"use strict";(()=>{var Rs=Object.create;var ln=Object.defineProperty;var ks=Object.getOwnPropertyDescriptor;var xs=Object.getOwnPropertyNames;var Ts=Object.getPrototypeOf,Hs=Object.prototype.hasOwnProperty;var dr=(r=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(r,{get:(i,l)=>(typeof require<"u"?require:i)[l]}):r)(function(r){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+r+'" is not supported')});var ye=(r,i)=>()=>(i||r((i={exports:{}}).exports,i),i.exports);var Ms=(r,i,l,o)=>{if(i&&typeof i=="object"||typeof i=="function")for(let u of xs(i))!Hs.call(r,u)&&u!==l&&ln(r,u,{get:()=>i[u],enumerable:!(o=ks(i,u))||o.enumerable});return r};var cn=(r,i,l)=>(l=r!=null?Rs(Ts(r)):{},Ms(i||!r||!r.__esModule?ln(l,"default",{value:r,enumerable:!0}):l,r));var hr=ye(()=>{});var br=ye(()=>{});var bn=ye(()=>{});var Er=ye(()=>{});var mn=ye(()=>{});var pn=ye((Ve,Ar)=>{"use strict";var Fr=(()=>{var r=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(r=r||__filename),function(i={}){function l(){return X.buffer!=ce.buffer&&fe(),ce}function o(){return X.buffer!=ce.buffer&&fe(),Hr}function u(){return X.buffer!=ce.buffer&&fe(),Mr}function f(){return X.buffer!=ce.buffer&&fe(),Ur}function _(){return X.buffer!=ce.buffer&&fe(),Cr}function c(){return X.buffer!=ce.buffer&&fe(),Br}function h(){return X.buffer!=ce.buffer&&fe(),Ir}var n=typeof i<"u"?i:{},v,U;n.ready=new Promise((e,t)=>{v=e,U=t});var N=Object.assign({},n),D=[],z="./this.program",j=(e,t)=>{throw t},ee=typeof window=="object",re=typeof importScripts=="function",O=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",E=n.ENVIRONMENT_IS_PTHREAD||!1,G="";function ve(e){return n.locateFile?n.locateFile(e,G):G+e}var Ae,Se,de,x;if(O){var P=br(),J=bn();re?G=J.dirname(G)+"/":G=__dirname+"/",Ae=(t,a)=>(t=Yr(t)?new URL(t):J.normalize(t),P.readFileSync(t,a?void 0:"utf8")),de=t=>{var a=Ae(t,!0);return a.buffer||(a=new Uint8Array(a)),a},Se=(t,a,s,d=!0)=>{t=Yr(t)?new URL(t):J.normalize(t),P.readFile(t,d?void 0:"utf8",(m,b)=>{m?s(m):a(d?b.buffer:b)})},!n.thisProgram&&process.argv.length>1&&(z=process.argv[1].replace(/\\/g,"/")),D=process.argv.slice(2),j=(t,a)=>{throw process.exitCode=t,a},n.inspect=()=>"[Emscripten Module object]";let e;try{e=hr()}catch(t){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),t}global.Worker=e.Worker}else(ee||re)&&(re?G=self.location.href:typeof document<"u"&&document.currentScript&&(G=document.currentScript.src),r&&(G=r),G.indexOf("blob:")!==0?G=G.substr(0,G.replace(/[?#].*/,"").lastIndexOf("/")+1):G="",O||(Ae=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),t.responseText},re&&(de=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),Se=(e,t,a)=>{var s=new XMLHttpRequest;s.open("GET",e,!0),s.responseType="arraybuffer",s.onload=()=>{if(s.status==200||s.status==0&&s.response){t(s.response);return}a()},s.onerror=a,s.send(null)}),x=e=>document.title=e);O&&typeof performance>"u"&&(global.performance=Er().performance);var Z=console.log.bind(console),q=console.error.bind(console);O&&(Z=(...e)=>P.writeSync(1,e.join(" ")+"\n"),q=(...e)=>P.writeSync(2,e.join(" ")+"\n"));var W=n.print||Z,y=n.printErr||q;Object.assign(n,N),N=null,n.arguments&&(D=n.arguments),n.thisProgram&&(z=n.thisProgram),n.quit&&(j=n.quit);var $;n.wasmBinary&&($=n.wasmBinary);var be=n.noExitRuntime||!0;typeof WebAssembly!="object"&&S("no native wasm support detected");var X,Tr,Ue=!1,me;function Ce(e,t){e||S(t)}var ce,Hr,Mr,Ur,Cr,Br,Rn,Ir;function fe(){var e=X.buffer;n.HEAP8=ce=new Int8Array(e),n.HEAP16=Mr=new Int16Array(e),n.HEAP32=Cr=new Int32Array(e),n.HEAPU8=Hr=new Uint8Array(e),n.HEAPU16=Ur=new Uint16Array(e),n.HEAPU32=Br=new Uint32Array(e),n.HEAPF32=Rn=new Float32Array(e),n.HEAPF64=Ir=new Float64Array(e)}var Be=n.INITIAL_MEMORY||16777216;if(Ce(Be>=65536,"INITIAL_MEMORY should be larger than STACK_SIZE, was "+Be+"! (STACK_SIZE=65536)"),E)X=n.wasmMemory;else if(n.wasmMemory)X=n.wasmMemory;else if(X=new WebAssembly.Memory({initial:Be/65536,maximum:65536,shared:!0}),!(X.buffer instanceof SharedArrayBuffer))throw y("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),O&&y("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");fe(),Be=X.buffer.byteLength;var Lr,Nr=[],Or=[],kn=[],Pr=[],Wr=!1,Xr=0;function Ie(){return be||Xr>0}function xn(){if(n.preRun)for(typeof n.preRun=="function"&&(n.preRun=[n.preRun]);n.preRun.length;)Gr(n.preRun.shift());Le(Nr)}function zr(){Wr=!0,!E&&Le(Or)}function Tn(){E||Le(kn)}function Hn(){if(!E){if(n.postRun)for(typeof n.postRun=="function"&&(n.postRun=[n.postRun]);n.postRun.length;)Un(n.postRun.shift());Le(Pr)}}function Gr(e){Nr.unshift(e)}function Mn(e){Or.unshift(e)}function Un(e){Pr.unshift(e)}var pe=0,Ze=null,De=null;function qr(e){pe++,n.monitorRunDependencies&&n.monitorRunDependencies(pe)}function Kr(e){if(pe--,n.monitorRunDependencies&&n.monitorRunDependencies(pe),pe==0&&(Ze!==null&&(clearInterval(Ze),Ze=null),De)){var t=De;De=null,t()}}function S(e){n.onAbort&&n.onAbort(e),e="Aborted("+e+")",y(e),Ue=!0,me=1,e+=". Build with -sASSERTIONS for more info.",Wr&&nn();var t=new WebAssembly.RuntimeError(e);throw U(t),t}var Cn="data:application/octet-stream;base64,";function $r(e){return e.startsWith(Cn)}function Yr(e){return e.startsWith("file://")}var we;we="./duckdb-coi.wasm",$r(we)||(we=ve(we));function jr(e){try{if(e==we&&$)return new Uint8Array($);if(de)return de(e);throw"both async and sync fetching of the wasm failed"}catch(t){S(t)}}function Bn(e){return!$&&(ee||re)&&typeof fetch=="function"?fetch(e,{credentials:"same-origin"}).then(t=>{if(!t.ok)throw"failed to load wasm binary file at '"+e+"'";return t.arrayBuffer()}).catch(()=>jr(e)):Promise.resolve().then(()=>jr(e))}function Vr(e,t,a){return Bn(e).then(s=>WebAssembly.instantiate(s,t)).then(s=>s).then(a,s=>{y("failed to asynchronously prepare wasm: "+s),S(s)})}function In(e,t,a,s){return!e&&typeof WebAssembly.instantiateStreaming=="function"&&!$r(t)&&!O&&typeof fetch=="function"?fetch(t,{credentials:"same-origin"}).then(d=>{var m=WebAssembly.instantiateStreaming(d,a);return m.then(s,function(b){return y("wasm streaming compile failed: "+b),y("falling back to ArrayBuffer instantiation"),Vr(t,a,s)})}):Vr(t,a,s)}function Ln(){var e={a:Ti};function t(s,d){var m=s.exports;return n.asm=m,zn(n.asm.Pb),Lr=n.asm.cb,Mn(n.asm.ab),Tr=d,Kr("wasm-instantiate"),m}qr("wasm-instantiate");function a(s){t(s.instance,s.module)}if(n.instantiateWasm)try{return n.instantiateWasm(e,t)}catch(s){y("Module.instantiateWasm callback failed with error: "+s),U(s)}return In($,we,e,a).catch(U),{}}var ne,Ee;function Qe(e){this.name="ExitStatus",this.message="Program terminated with exit(".concat(e,")"),this.status=e}function er(e){e.terminate(),e.onmessage=t=>{}}function Nn(e){var t=A.pthreads[e];delete A.pthreads[e],er(t),fr(e),A.runningWorkers.splice(A.runningWorkers.indexOf(t),1),t.pthread_ptr=0}function On(e){var t=A.pthreads[e];t.postMessage({cmd:"cancel"})}function Jr(e){var t=A.pthreads[e];Ce(t),A.returnWorkerToPool(t)}function Zr(e,t){return o().fill(0,e,e+t),e}function Qr(e){var t=A.getNewWorker();if(!t)return 6;A.runningWorkers.push(t),A.pthreads[e.pthread_ptr]=t,t.pthread_ptr=e.pthread_ptr;var a={cmd:"run",start_routine:e.startRoutine,arg:e.arg,pthread_ptr:e.pthread_ptr};return O&&t.unref(),t.postMessage(a,e.transferList),0}var et=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function rt(e,t,a){t>>>=0;for(var s=t+a,d=t;e[d]&&!(d>=s);)++d;if(d-t>16&&e.buffer&&et)return et.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,d):e.subarray(t,d));for(var m="";t<d;){var b=e[t++];if(!(b&128)){m+=String.fromCharCode(b);continue}var p=e[t++]&63;if((b&224)==192){m+=String.fromCharCode((b&31)<<6|p);continue}var w=e[t++]&63;if((b&240)==224?b=(b&15)<<12|p<<6|w:b=(b&7)<<18|p<<12|w<<6|e[t++]&63,b<65536)m+=String.fromCharCode(b);else{var R=b-65536;m+=String.fromCharCode(55296|R>>10,56320|R&1023)}}return m}function Fe(e,t){return e>>>=0,e?rt(o(),e,t):""}var ge={varargs:void 0,get:function(){ge.varargs+=4;var e=_()[ge.varargs-4>>>2];return e},getStr:function(e){var t=Fe(e);return t}};function tt(e){if(E)return k(1,1,e);me=e,Ie()||(A.terminateAllThreads(),n.onExit&&n.onExit(e),Ue=!0),j(e,new Qe(e))}function nt(e,t){if(me=e,E)throw at(e),"unwind";tt(e)}var rr=nt;function tr(e){if(e instanceof Qe||e=="unwind")return me;j(1,e)}var A={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],pthreads:{},init:function(){E?A.initWorker():A.initMainThread()},initMainThread:function(){for(var e=4;e--;)A.allocateUnusedWorker();Gr(()=>{qr("loading-workers"),A.loadWasmModuleToAllWorkers(()=>Kr("loading-workers"))})},initWorker:function(){be=!1},setExitStatus:function(e){me=e},terminateAllThreads__deps:["$terminateWorker"],terminateAllThreads:function(){for(var e of A.runningWorkers)er(e);for(var e of A.unusedWorkers)er(e);A.unusedWorkers=[],A.runningWorkers=[],A.pthreads=[]},returnWorkerToPool:function(e){var t=e.pthread_ptr;delete A.pthreads[t],A.unusedWorkers.push(e),A.runningWorkers.splice(A.runningWorkers.indexOf(e),1),e.pthread_ptr=0,fr(t)},receiveObjectTransfer:function(e){},threadInitTLS:function(){A.tlsInitFunctions.forEach(e=>e())},loadWasmModuleToWorker:e=>new Promise(t=>{e.onmessage=m=>{var b=m.data,p=b.cmd;if(e.pthread_ptr&&(A.currentProxiedOperationCallerThread=e.pthread_ptr),b.targetThread&&b.targetThread!=ze()){var w=A.pthreads[b.targetThread];w?w.postMessage(b,b.transferList):y('Internal error! Worker sent a message "'+p+'" to target pthread '+b.targetThread+", but that thread no longer exists!"),A.currentProxiedOperationCallerThread=void 0;return}p==="checkMailbox"?Xe():p==="spawnThread"?Qr(b):p==="cleanupThread"?Jr(b.thread):p==="killThread"?Nn(b.thread):p==="cancelThread"?On(b.thread):p==="loaded"?(e.loaded=!0,O&&!e.pthread_ptr&&e.unref(),t(e)):p==="print"?W("Thread "+b.threadId+": "+b.text):p==="printErr"?y("Thread "+b.threadId+": "+b.text):p==="alert"?alert("Thread "+b.threadId+": "+b.text):b.target==="setimmediate"?e.postMessage(b):p==="callHandler"?n[b.handler](...b.args):p&&y("worker sent an unknown command "+p),A.currentProxiedOperationCallerThread=void 0},e.onerror=m=>{var b="worker sent an error!";throw y(b+" "+m.filename+":"+m.lineno+": "+m.message),m},O&&(e.on("message",function(m){e.onmessage({data:m})}),e.on("error",function(m){e.onerror(m)}));var a=[],s=["onExit","onAbort","print","printErr"];for(var d of s)n.hasOwnProperty(d)&&a.push(d);e.postMessage({cmd:"load",handlers:a,urlOrBlob:n.mainScriptUrlOrBlob||r,wasmMemory:X,wasmModule:Tr})}),loadWasmModuleToAllWorkers:function(e){if(E)return e();Promise.all(A.unusedWorkers.map(A.loadWasmModuleToWorker)).then(e)},allocateUnusedWorker:function(){var e,t=ve("duckdb_wasm.worker.js");e=new Worker(t),A.unusedWorkers.push(e)},getNewWorker:function(){return A.unusedWorkers.length==0&&(A.allocateUnusedWorker(),A.loadWasmModuleToWorker(A.unusedWorkers[0])),A.unusedWorkers.pop()}};n.PThread=A;function Le(e){for(;e.length>0;)e.shift()(n)}function Pn(){var e=ze(),t=_()[e+52>>>2],a=_()[e+56>>>2],s=t-a;an(t,s),Te(t)}n.establishStackSpace=Pn;function at(e){if(E)return k(2,0,e);rr(e)}var Ne=[];function Wn(e){var t=Ne[e];return t||(e>=Ne.length&&(Ne.length=e+1),Ne[e]=t=Lr.get(e)),t}function Xn(e,t){var a=Wn(e)(t);Ie()?A.setExitStatus(a):_r(a)}n.invokeEntryPoint=Xn;function zn(e){A.tlsInitFunctions.push(e)}function Gn(){y("missing function: XML_GetBuffer"),S(-1)}function qn(){y("missing function: XML_GetErrorCode"),S(-1)}function Kn(){y("missing function: XML_Parse"),S(-1)}function $n(){y("missing function: XML_ParseBuffer"),S(-1)}function Yn(){y("missing function: XML_ParserCreate"),S(-1)}function jn(){y("missing function: XML_ParserFree"),S(-1)}function Vn(){y("missing function: XML_ResumeParser"),S(-1)}function Jn(){y("missing function: XML_SetCharacterDataHandler"),S(-1)}function Zn(){y("missing function: XML_SetElementHandler"),S(-1)}function Qn(){y("missing function: XML_SetUserData"),S(-1)}function ea(){y("missing function: XML_StopParser"),S(-1)}var it="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function ra(e,t,a){S(it)}function ta(e){en(e,!re,1,!ee,65536),A.threadInitTLS()}function na(e){E?postMessage({cmd:"cleanupThread",thread:e}):Jr(e)}function st(e,t,a,s){return E?k(3,1,e,t,a,s):ut(e,t,a,s)}function ut(e,t,a,s){if(typeof SharedArrayBuffer>"u")return y("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var d=[],m=0;if(E&&(d.length===0||m))return st(e,t,a,s);if(m)return m;var b={startRoutine:a,pthread_ptr:e,arg:s,transferList:d};return E?(b.cmd="spawnThread",postMessage(b,d),0):Qr(b)}function ot(e,t,a,s,d){if(E)return k(4,1,e,t,a,s,d);for(var m=0,b=t?_()[t>>>2]:0,p=t?_()[t+4>>>2]:0,w=a?_()[a>>>2]:0,R=a?_()[a+4>>>2]:0,H=s?_()[s>>>2]:0,V=s?_()[s+4>>>2]:0,M=0,te=0,L=0,Y=0,se=0,_e=0,g=(t?_()[t>>>2]:0)|(a?_()[a>>>2]:0)|(s?_()[s>>>2]:0),F=(t?_()[t+4>>>2]:0)|(a?_()[a+4>>>2]:0)|(s?_()[s+4>>>2]:0),B=function(As,Ss,Ds,on){return As<32?Ss&on:Ds&on},C=0;C<e;C++){var Q=1<<C%32;if(B(C,g,F,Q)){var Me=ge.getStreamFromFD(C),je=ge.DEFAULT_POLLMASK;Me.stream_ops.poll&&(je=Me.stream_ops.poll(Me)),je&1&&B(C,b,p,Q)&&(C<32?M=M|Q:te=te|Q,m++),je&4&&B(C,w,R,Q)&&(C<32?L=L|Q:Y=Y|Q,m++),je&2&&B(C,H,V,Q)&&(C<32?se=se|Q:_e=_e|Q,m++)}}return t&&(_()[t>>>2]=M,_()[t+4>>>2]=te),a&&(_()[a>>>2]=L,_()[a+4>>>2]=Y),s&&(_()[s>>>2]=se,_()[s+4>>>2]=_e),m}function aa(){y("missing function: $SOCKFS"),S(-1)}function lt(){y("missing function: $FS"),S(-1)}function Re(e){var t=aa.getSocket(e);if(!t)throw new lt.ErrnoError(8);return t}function nr(e){return(e&255)+"."+(e>>8&255)+"."+(e>>16&255)+"."+(e>>24&255)}function ct(e){var t="",a=0,s=0,d=0,m=0,b=0,p=0,w=[e[0]&65535,e[0]>>16,e[1]&65535,e[1]>>16,e[2]&65535,e[2]>>16,e[3]&65535,e[3]>>16],R=!0,H="";for(p=0;p<5;p++)if(w[p]!==0){R=!1;break}if(R){if(H=nr(w[6]|w[7]<<16),w[5]===-1)return t="::ffff:",t+=H,t;if(w[5]===0)return t="::",H==="0.0.0.0"&&(H=""),H==="0.0.0.1"&&(H="1"),t+=H,t}for(a=0;a<8;a++)w[a]===0&&(a-d>1&&(b=0),d=a,b++),b>s&&(s=b,m=a-s+1);for(a=0;a<8;a++){if(s>1&&w[a]===0&&a>=m&&a<m+s){a===m&&(t+=":",m===0&&(t+=":"));continue}t+=Number(cr(w[a]&65535)).toString(16),t+=a<7?":":""}return t}function ft(e,t){var a=u()[e>>>1],s=cr(f()[e+2>>>1]),d;switch(a){case 2:if(t!==16)return{errno:28};d=_()[e+4>>>2],d=nr(d);break;case 10:if(t!==28)return{errno:28};d=[_()[e+8>>>2],_()[e+12>>>2],_()[e+16>>>2],_()[e+20>>>2]],d=ct(d);break;default:return{errno:5}}return{family:a,addr:d,port:s}}function Oe(e){for(var t=e.split("."),a=0;a<4;a++){var s=Number(t[a]);if(isNaN(s))return null;t[a]=s}return(t[0]|t[1]<<8|t[2]<<16|t[3]<<24)>>>0}function Pe(e){return parseInt(e)}function ar(e){var t,a,s,d,m=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,b=[];if(!m.test(e))return null;if(e==="::")return[0,0,0,0,0,0,0,0];for(e.startsWith("::")?e=e.replace("::","Z:"):e=e.replace("::",":Z:"),e.indexOf(".")>0?(e=e.replace(new RegExp("[.]","g"),":"),t=e.split(":"),t[t.length-4]=Pe(t[t.length-4])+Pe(t[t.length-3])*256,t[t.length-3]=Pe(t[t.length-2])+Pe(t[t.length-1])*256,t=t.slice(0,t.length-2)):t=e.split(":"),s=0,d=0,a=0;a<t.length;a++)if(typeof t[a]=="string")if(t[a]==="Z"){for(d=0;d<8-t.length+1;d++)b[a+d]=0;s=d-1}else b[a+s]=qe(parseInt(t[a],16));else b[a+s]=t[a];return[b[1]<<16|b[0],b[3]<<16|b[2],b[5]<<16|b[4],b[7]<<16|b[6]]}var ae={address_map:{id:1,addrs:{},names:{}},lookup_name:function(e){var t=Oe(e);if(t!==null||(t=ar(e),t!==null))return e;var a;if(ae.address_map.addrs[e])a=ae.address_map.addrs[e];else{var s=ae.address_map.id++;Ce(s<65535,"exceeded max address mappings of 65535"),a="172.29."+(s&255)+"."+(s&65280),ae.address_map.names[a]=e,ae.address_map.addrs[e]=a}return a},lookup_addr:function(e){return ae.address_map.names[e]?ae.address_map.names[e]:null}};function _t(e,t,a){if(a&&e===0)return null;var s=ft(e,t);if(s.errno)throw new lt.ErrnoError(s.errno);return s.addr=ae.lookup_addr(s.addr)||s.addr,s}function dt(e,t,a,s,d,m){if(E)return k(5,1,e,t,a,s,d,m);var b=Re(e),p=_t(t,a);return b.sock_ops.bind(b,p.addr,p.port),0}function ht(e,t,a,s,d,m){if(E)return k(6,1,e,t,a,s,d,m);var b=Re(e),p=_t(t,a);return b.sock_ops.connect(b,p.addr,p.port),0}function bt(e,t,a,s){if(E)return k(7,1,e,t,a,s)}function mt(e,t,a){return E?k(8,1,e,t,a):(ge.varargs=a,0)}function pt(e,t){if(E)return k(9,1,e,t)}function gt(e,t,a){if(E)return k(10,1,e,t,a)}function yt(e,t,a,s){if(a>>>=0,!(s>0))return 0;for(var d=a,m=a+s-1,b=0;b<e.length;++b){var p=e.charCodeAt(b);if(p>=55296&&p<=57343){var w=e.charCodeAt(++b);p=65536+((p&1023)<<10)|w&1023}if(p<=127){if(a>=m)break;t[a++>>>0]=p}else if(p<=2047){if(a+1>=m)break;t[a++>>>0]=192|p>>6,t[a++>>>0]=128|p&63}else if(p<=65535){if(a+2>=m)break;t[a++>>>0]=224|p>>12,t[a++>>>0]=128|p>>6&63,t[a++>>>0]=128|p&63}else{if(a+3>=m)break;t[a++>>>0]=240|p>>18,t[a++>>>0]=128|p>>12&63,t[a++>>>0]=128|p>>6&63,t[a++>>>0]=128|p&63}}return t[a>>>0]=0,a-d}function We(e,t,a){return yt(e,o(),t,a)}function vt(e,t,a){if(E)return k(11,1,e,t,a)}function ir(e,t,a,s,d){switch(t){case 2:a=Oe(a),Zr(e,16),d&&(_()[d>>>2]=16),u()[e>>>1]=t,_()[e+4>>>2]=a,u()[e+2>>>1]=qe(s);break;case 10:a=ar(a),Zr(e,28),d&&(_()[d>>>2]=28),_()[e>>>2]=t,_()[e+8>>>2]=a[0],_()[e+12>>>2]=a[1],_()[e+16>>>2]=a[2],_()[e+20>>>2]=a[3],u()[e+2>>>1]=qe(s);break;default:return 5}return 0}function wt(e,t,a,s,d,m){if(E)return k(12,1,e,t,a,s,d,m);var b=Re(e);if(!b.daddr)return-53;var p=ir(t,b.family,ae.lookup_name(b.daddr),b.dport,a);return 0}function Et(e,t,a,s,d,m){if(E)return k(13,1,e,t,a,s,d,m);var b=Re(e);return t===1&&a===4?(_()[s>>>2]=b.error,_()[d>>>2]=4,b.error=null,0):-50}function Ft(e,t,a){return E?k(14,1,e,t,a):(ge.varargs=a,0)}function At(e,t){if(E)return k(15,1,e,t)}function St(e,t,a){if(E)return k(16,1,e,t,a)}function Dt(e,t,a,s){if(E)return k(17,1,e,t,a,s)}function Rt(e,t,a,s){if(E)return k(18,1,e,t,a,s);ge.varargs=s}function kt(e,t,a,s,d,m){if(E)return k(19,1,e,t,a,s,d,m);var b=Re(e),p=b.sock_ops.recvmsg(b,a);if(!p)return 0;if(d)var w=ir(d,b.family,ae.lookup_name(p.addr),p.port,m);return o().set(p.buffer,t>>>0),p.buffer.byteLength}function xt(e,t,a,s){if(E)return k(20,1,e,t,a,s)}function Tt(e){if(E)return k(21,1,e)}function Ht(e,t,a,s,d,m){if(E)return k(22,1,e,t,a,s,d,m)}function Mt(e,t,a){if(E)return k(23,1,e,t,a)}function Ut(e,t){if(E)return k(24,1,e,t)}function Ct(e,t,a){if(E)return k(25,1,e,t,a)}var ia=!0;function sa(){return ia}function ua(){if(!Ie())try{E?_r(me):rr(me)}catch(e){tr(e)}}function oa(e){if(!Ue)try{e(),ua()}catch(t){tr(t)}}function sr(e){if(typeof Atomics.waitAsync=="function"){var t=Atomics.waitAsync(_(),e>>2,e);t.value.then(Xe);var a=e+128;Atomics.store(_(),a>>2,1)}}n.__emscripten_thread_mailbox_await=sr;function Xe(){var e=ze();e&&(sr(e),oa(()=>tn()))}n.checkMailbox=Xe;function la(e,t,a){if(e==t)setTimeout(()=>Xe());else if(E)postMessage({targetThread:e,cmd:"checkMailbox"});else{var s=A.pthreads[e];if(!s)return;s.postMessage({cmd:"checkMailbox"})}}function ca(e,t,a){return-1}function fa(e){O&&A.pthreads[e].ref()}function _a(e){return c()[e>>>2]+_()[e+4>>>2]*4294967296}function ke(e){return e%4===0&&(e%100!==0||e%400===0)}var da=[0,31,60,91,121,152,182,213,244,274,305,335],ha=[0,31,59,90,120,151,181,212,243,273,304,334];function ba(e){var t=ke(e.getFullYear()),a=t?da:ha,s=a[e.getMonth()]+e.getDate()-1;return s}function ma(e,t){var a=new Date(_a(e)*1e3);_()[t>>>2]=a.getSeconds(),_()[t+4>>>2]=a.getMinutes(),_()[t+8>>>2]=a.getHours(),_()[t+12>>>2]=a.getDate(),_()[t+16>>>2]=a.getMonth(),_()[t+20>>>2]=a.getFullYear()-1900,_()[t+24>>>2]=a.getDay();var s=ba(a)|0;_()[t+28>>>2]=s,_()[t+36>>>2]=-(a.getTimezoneOffset()*60);var d=new Date(a.getFullYear(),0,1),m=new Date(a.getFullYear(),6,1).getTimezoneOffset(),b=d.getTimezoneOffset(),p=(m!=b&&a.getTimezoneOffset()==Math.min(b,m))|0;_()[t+32>>>2]=p}function ur(e){for(var t=0,a=0;a<e.length;++a){var s=e.charCodeAt(a);s<=127?t++:s<=2047?t+=2:s>=55296&&s<=57343?(t+=4,++a):t+=3}return t}function Bt(e){var t=ur(e)+1,a=Ke(t);return a&&We(e,a,t),a}function pa(e,t,a){var s=new Date().getFullYear(),d=new Date(s,0,1),m=new Date(s,6,1),b=d.getTimezoneOffset(),p=m.getTimezoneOffset(),w=Math.max(b,p);c()[e>>>2]=w*60,_()[t>>>2]=+(b!=p);function R(L){var Y=L.toTimeString().match(/\(([A-Za-z ]+)\)$/);return Y?Y[1]:"GMT"}var H=R(d),V=R(m),M=Bt(H),te=Bt(V);p<b?(c()[a>>>2]=M,c()[a+4>>>2]=te):(c()[a>>>2]=te,c()[a+4>>>2]=M)}function ga(){S("")}function ya(e,t){S(it)}function va(e,t){return globalThis.DUCKDB_RUNTIME.createDirectory(n,e,t)}function wa(e,t){return globalThis.DUCKDB_RUNTIME.checkDirectory(n,e,t)}function Ea(e,t){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(n,e,t)}function Fa(e,t){return globalThis.DUCKDB_RUNTIME.removeDirectory(n,e,t)}function Aa(e){return globalThis.DUCKDB_RUNTIME.closeFile(n,e)}function Sa(e,t){return globalThis.DUCKDB_RUNTIME.checkFile(n,e,t)}function Da(e){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(n,e)}function Ra(e,t,a,s){return globalThis.DUCKDB_RUNTIME.moveFile(n,e,t,a,s)}function ka(e,t){return globalThis.DUCKDB_RUNTIME.openFile(n,e,t)}function xa(e,t,a,s){return globalThis.DUCKDB_RUNTIME.readFile(n,e,t,a,s)}function Ta(e,t){return globalThis.DUCKDB_RUNTIME.truncateFile(n,e,t)}function Ha(e,t,a,s){return globalThis.DUCKDB_RUNTIME.writeFile(n,e,t,a,s)}function Ma(e){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(e)}function Ua(e,t){return globalThis.DUCKDB_RUNTIME.glob(n,e,t)}function Ca(e){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(n,e)}function Ba(e,t,a,s,d,m){return globalThis.DUCKDB_RUNTIME.callScalarUDF(n,e,t,a,s,d,m)}function Ia(){}function La(){return Date.now()}function Na(){Xr+=1}function Oa(){throw Na(),"unwind"}function It(){return 4294901760}function Pa(){return It()}var Lt;O&&(global.performance=Er().performance),Lt=()=>performance.timeOrigin+performance.now();function Wa(){return O?mn().cpus().length:navigator.hardwareConcurrency}function Xa(e){var t=$e(),a=e();return Te(t),a}function k(e,t){var a=arguments.length-2,s=arguments;return Xa(()=>{for(var d=a,m=He(d*8),b=m>>3,p=0;p<a;p++){var w=s[2+p];h()[b+p>>>0]=w}return rn(e,d,m,t)})}var or=[];function za(e,t,a){or.length=t;for(var s=a>>3,d=0;d<t;d++)or[d]=h()[s+d>>>0];var m=xi[e];return m.apply(null,or)}function Ga(e){var t=X.buffer,a=e-t.byteLength+65535>>>16;try{return X.grow(a),fe(),1}catch(s){}}function qa(e){var t=o().length;if(e=e>>>0,e<=t)return!1;var a=It();if(e>a)return!1;for(var s=(w,R)=>w+(R-w%R)%R,d=1;d<=4;d*=2){var m=t*(1+.2/d);m=Math.min(m,e+100663296);var b=Math.min(a,s(Math.max(e,m),65536)),p=Ga(b);if(p)return!0}return!1}var lr={};function Ka(){return z||"./this.program"}function xe(){if(!xe.strings){var e=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",t={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:e,_:Ka()};for(var a in lr)lr[a]===void 0?delete t[a]:t[a]=lr[a];var s=[];for(var a in t)s.push("".concat(a,"=").concat(t[a]));xe.strings=s}return xe.strings}function $a(e,t){for(var a=0;a<e.length;++a)l()[t++>>>0]=e.charCodeAt(a);l()[t>>>0]=0}function Nt(e,t){if(E)return k(26,1,e,t);var a=0;return xe().forEach(function(s,d){var m=t+a;c()[e+d*4>>>2]=m,$a(s,m),a+=s.length+1}),0}function Ot(e,t){if(E)return k(27,1,e,t);var a=xe();c()[e>>>2]=a.length;var s=0;return a.forEach(function(d){s+=d.length+1}),c()[t>>>2]=s,0}function Pt(e){return E?k(28,1,e):52}function Wt(e,t){if(E)return k(29,1,e,t);var a=0,s=0,d=0;{var m=2;e==0?a=2:(e==1||e==2)&&(a=64),d=1}return l()[t>>>0]=m,u()[t+2>>>1]=d,Ee=[a>>>0,(ne=a,+Math.abs(ne)>=1?ne>0?+Math.floor(ne/4294967296)>>>0:~~+Math.ceil((ne-+(~~ne>>>0))/4294967296)>>>0:0)],_()[t+8>>>2]=Ee[0],_()[t+12>>>2]=Ee[1],Ee=[s>>>0,(ne=s,+Math.abs(ne)>=1?ne>0?+Math.floor(ne/4294967296)>>>0:~~+Math.ceil((ne-+(~~ne>>>0))/4294967296)>>>0:0)],_()[t+16>>>2]=Ee[0],_()[t+20>>>2]=Ee[1],0}function Xt(e,t,a,s,d,m){return E?k(30,1,e,t,a,s,d,m):52}function zt(e,t,a,s,d,m){return E?k(31,1,e,t,a,s,d,m):52}function Gt(e,t,a,s){return E?k(32,1,e,t,a,s):52}function qt(e,t,a,s,d){return E?k(33,1,e,t,a,s,d):70}function Kt(e){return E?k(34,1,e):52}var Ya=[null,[],[]];function ja(e,t){var a=Ya[e];t===0||t===10?((e===1?W:y)(rt(a,0)),a.length=0):a.push(t)}function $t(e,t,a,s){if(E)return k(35,1,e,t,a,s);for(var d=0,m=0;m<a;m++){var b=c()[t>>>2],p=c()[t+4>>>2];t+=8;for(var w=0;w<p;w++)ja(e,o()[b+w>>>0]);d+=p}return c()[s>>>2]=d,0}function Yt(e,t,a,s){if(E)return k(36,1,e,t,a,s);var d=0,m=0,b=0,p=0,w=0,R=0,H;function V(M,te,L,Y,se,_e){var g,F,B,C;return F=M===10?28:16,se=M===10?ct(se):nr(se),g=Ke(F),C=ir(g,M,se,_e),Ce(!C),B=Ke(32),_()[B+4>>>2]=M,_()[B+8>>>2]=te,_()[B+12>>>2]=L,c()[B+24>>>2]=Y,c()[B+20>>>2]=g,M===10?_()[B+16>>>2]=28:_()[B+16>>>2]=16,_()[B+28>>>2]=0,B}if(a&&(b=_()[a>>>2],p=_()[a+4>>>2],w=_()[a+8>>>2],R=_()[a+12>>>2]),w&&!R&&(R=w===2?17:6),!w&&R&&(w=R===17?2:1),R===0&&(R=6),w===0&&(w=1),!e&&!t)return-2;if(b&-1088||a!==0&&_()[a>>>2]&2&&!e)return-1;if(b&32)return-2;if(w!==0&&w!==1&&w!==2)return-7;if(p!==0&&p!==2&&p!==10)return-6;if(t&&(t=Fe(t),m=parseInt(t,10),isNaN(m)))return b&1024?-2:-8;if(!e)return p===0&&(p=2),b&1||(p===2?d=Ge(2130706433):d=[0,0,0,1]),H=V(p,w,R,null,d,m),c()[s>>>2]=H,0;if(e=Fe(e),d=Oe(e),d!==null)if(p===0||p===2)p=2;else if(p===10&&b&8)d=[0,0,Ge(65535),d],p=10;else return-2;else if(d=ar(e),d!==null)if(p===0||p===10)p=10;else return-2;return d!=null?(H=V(p,w,R,e,d,m),c()[s>>>2]=H,0):b&4?-2:(e=ae.lookup_name(e),d=Oe(e),p===0?p=2:p===10&&(d=[0,0,Ge(65535),d]),H=V(p,w,R,null,d,m),c()[s>>>2]=H,0)}function Va(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return s=>(s.set(crypto.getRandomValues(new Uint8Array(s.byteLength))),s);if(O)try{var e=dr("crypto"),t=e.randomFillSync;if(t)return s=>e.randomFillSync(s);var a=e.randomBytes;return s=>(s.set(a(s.byteLength)),s)}catch(s){}S("initRandomDevice")}function jt(e){return(jt=Va())(e)}function Ja(e,t){return jt(o().subarray(e>>>0,e+t>>>0)),0}function Za(e,t,a,s,d,m,b){var p=ft(e,t);if(p.errno)return-6;var w=p.port,R=p.addr,H=!1;if(a&&s){var V;if(b&1||!(V=ae.lookup_addr(R))){if(b&8)return-2}else R=V;var M=We(R,a,s);M+1>=s&&(H=!0)}if(d&&m){w=""+w;var M=We(w,d,m);M+1>=m&&(H=!0)}return H?-12:0}function Qa(e,t){for(var a=0,s=0;s<=t;a+=e[s++]);return a}var Vt=[31,29,31,30,31,30,31,31,30,31,30,31],Jt=[31,28,31,30,31,30,31,31,30,31,30,31];function ei(e,t){for(var a=new Date(e.getTime());t>0;){var s=ke(a.getFullYear()),d=a.getMonth(),m=(s?Vt:Jt)[d];if(t>m-a.getDate())t-=m-a.getDate()+1,a.setDate(1),d<11?a.setMonth(d+1):(a.setMonth(0),a.setFullYear(a.getFullYear()+1));else return a.setDate(a.getDate()+t),a}return a}function ri(e,t,a){var s=a>0?a:ur(e)+1,d=new Array(s),m=yt(e,d,0,d.length);return t&&(d.length=m),d}function Zt(e,t){l().set(e,t>>>0)}function ti(e,t,a,s){var d=_()[s+40>>>2],m={tm_sec:_()[s>>>2],tm_min:_()[s+4>>>2],tm_hour:_()[s+8>>>2],tm_mday:_()[s+12>>>2],tm_mon:_()[s+16>>>2],tm_year:_()[s+20>>>2],tm_wday:_()[s+24>>>2],tm_yday:_()[s+28>>>2],tm_isdst:_()[s+32>>>2],tm_gmtoff:_()[s+36>>>2],tm_zone:d?Fe(d):""},b=Fe(a),p={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var w in p)b=b.replace(new RegExp(w,"g"),p[w]);var R=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],H=["January","February","March","April","May","June","July","August","September","October","November","December"];function V(g,F,B){for(var C=typeof g=="number"?g.toString():g||"";C.length<F;)C=B[0]+C;return C}function M(g,F){return V(g,F,"0")}function te(g,F){function B(Q){return Q<0?-1:Q>0?1:0}var C;return(C=B(g.getFullYear()-F.getFullYear()))===0&&(C=B(g.getMonth()-F.getMonth()))===0&&(C=B(g.getDate()-F.getDate())),C}function L(g){switch(g.getDay()){case 0:return new Date(g.getFullYear()-1,11,29);case 1:return g;case 2:return new Date(g.getFullYear(),0,3);case 3:return new Date(g.getFullYear(),0,2);case 4:return new Date(g.getFullYear(),0,1);case 5:return new Date(g.getFullYear()-1,11,31);case 6:return new Date(g.getFullYear()-1,11,30)}}function Y(g){var F=ei(new Date(g.tm_year+1900,0,1),g.tm_yday),B=new Date(F.getFullYear(),0,4),C=new Date(F.getFullYear()+1,0,4),Q=L(B),Me=L(C);return te(Q,F)<=0?te(Me,F)<=0?F.getFullYear()+1:F.getFullYear():F.getFullYear()-1}var se={"%a":function(g){return R[g.tm_wday].substring(0,3)},"%A":function(g){return R[g.tm_wday]},"%b":function(g){return H[g.tm_mon].substring(0,3)},"%B":function(g){return H[g.tm_mon]},"%C":function(g){var F=g.tm_year+1900;return M(F/100|0,2)},"%d":function(g){return M(g.tm_mday,2)},"%e":function(g){return V(g.tm_mday,2," ")},"%g":function(g){return Y(g).toString().substring(2)},"%G":function(g){return Y(g)},"%H":function(g){return M(g.tm_hour,2)},"%I":function(g){var F=g.tm_hour;return F==0?F=12:F>12&&(F-=12),M(F,2)},"%j":function(g){return M(g.tm_mday+Qa(ke(g.tm_year+1900)?Vt:Jt,g.tm_mon-1),3)},"%m":function(g){return M(g.tm_mon+1,2)},"%M":function(g){return M(g.tm_min,2)},"%n":function(){return"\n"},"%p":function(g){return g.tm_hour>=0&&g.tm_hour<12?"AM":"PM"},"%S":function(g){return M(g.tm_sec,2)},"%t":function(){return"	"},"%u":function(g){return g.tm_wday||7},"%U":function(g){var F=g.tm_yday+7-g.tm_wday;return M(Math.floor(F/7),2)},"%V":function(g){var F=Math.floor((g.tm_yday+7-(g.tm_wday+6)%7)/7);if((g.tm_wday+371-g.tm_yday-2)%7<=2&&F++,F){if(F==53){var C=(g.tm_wday+371-g.tm_yday)%7;C!=4&&(C!=3||!ke(g.tm_year))&&(F=1)}}else{F=52;var B=(g.tm_wday+7-g.tm_yday-1)%7;(B==4||B==5&&ke(g.tm_year%400-1))&&F++}return M(F,2)},"%w":function(g){return g.tm_wday},"%W":function(g){var F=g.tm_yday+7-(g.tm_wday+6)%7;return M(Math.floor(F/7),2)},"%y":function(g){return(g.tm_year+1900).toString().substring(2)},"%Y":function(g){return g.tm_year+1900},"%z":function(g){var F=g.tm_gmtoff,B=F>=0;return F=Math.abs(F)/60,F=F/60*100+F%60,(B?"+":"-")+("0000"+F).slice(-4)},"%Z":function(g){return g.tm_zone},"%%":function(){return"%"}};b=b.replace(/%%/g,"\0\0");for(var w in se)b.includes(w)&&(b=b.replace(new RegExp(w,"g"),se[w](m)));b=b.replace(/\0\0/g,"%");var _e=ri(b,!1);return _e.length>t?0:(Zt(_e,e),_e.length-1)}function ni(e,t,a,s,d){return ti(e,t,a,s)}function ai(){y("missing function: ucnv_close_64"),S(-1)}function ii(){y("missing function: ucnv_convertEx_64"),S(-1)}function si(){y("missing function: ucnv_open_64"),S(-1)}function ui(){y("missing function: ucnv_toAlgorithmic_64"),S(-1)}function oi(){y("missing function: ucsdet_close_64"),S(-1)}function li(){y("missing function: ucsdet_detect_64"),S(-1)}function ci(){y("missing function: ucsdet_getConfidence_64"),S(-1)}function fi(){y("missing function: ucsdet_getName_64"),S(-1)}function _i(){y("missing function: ucsdet_open_64"),S(-1)}function di(){y("missing function: ucsdet_setText_64"),S(-1)}function hi(){y("missing function: unzClose"),S(-1)}function bi(){y("missing function: unzCloseCurrentFile"),S(-1)}function mi(){y("missing function: unzGetCurrentFileInfo"),S(-1)}function pi(){y("missing function: unzGetCurrentFileInfo64"),S(-1)}function gi(){y("missing function: unzGetGlobalInfo"),S(-1)}function yi(){y("missing function: unzGoToFirstFile"),S(-1)}function vi(){y("missing function: unzGoToNextFile"),S(-1)}function wi(){y("missing function: unzLocateFile"),S(-1)}function Ei(){y("missing function: unzOpen"),S(-1)}function Fi(){y("missing function: unzOpen2"),S(-1)}function Ai(){y("missing function: unzOpenCurrentFile"),S(-1)}function Si(){y("missing function: unzReadCurrentFile"),S(-1)}function Di(e){var t=n["_"+e];return t}function Ri(e){var t=ur(e)+1,a=He(t);return We(e,a,t),a}function ki(e,t,a,s,d){var m={string:L=>{var Y=0;return L!=null&&L!==0&&(Y=Ri(L)),Y},array:L=>{var Y=He(L.length);return Zt(L,Y),Y}};function b(L){return t==="string"?Fe(L):t==="boolean"?!!L:L}var p=Di(e),w=[],R=0;if(s)for(var H=0;H<s.length;H++){var V=m[a[H]];V?(R===0&&(R=$e()),w[H]=V(s[H])):w[H]=s[H]}var M=p.apply(null,w);function te(L){return R!==0&&Te(R),b(L)}return M=te(M),M}A.init();var xi=[null,tt,at,st,ot,dt,ht,bt,mt,pt,gt,vt,wt,Et,Ft,At,St,Dt,Rt,kt,xt,Tt,Ht,Mt,Ut,Ct,Nt,Ot,Pt,Wt,Xt,zt,Gt,qt,Kt,$t,Yt],Ti={h:Gn,R:qn,T:Kn,n:$n,p:Yn,d:jn,C:Vn,f:Jn,b:Zn,o:Qn,j:ea,Ja:ra,$:ta,O:na,Ma:ut,Da:ot,Ha:dt,Ga:ht,za:bt,e:mt,ya:pt,Va:gt,ta:vt,Ba:wt,Ca:Et,M:Ft,va:At,ua:St,wa:Dt,N:Rt,Ea:kt,qa:xt,G:Tt,Fa:Ht,J:Mt,xa:Ut,H:Ct,$a:sa,Ia:la,ra:ca,U:sr,S:fa,ba:ma,ca:pa,l:ga,Ka:ya,ia:va,ka:wa,ga:Ea,ha:Fa,F:Aa,ea:Sa,Ua:Da,fa:Ra,ma:ka,q:xa,la:Ta,v:Ha,na:Ma,da:Ua,E:Ca,oa:Ba,I:Ia,P:La,_a:Oa,Na:Pa,c:Lt,Oa:Wa,ja:za,Ta:qa,Qa:Nt,Ra:Ot,La:rr,k:Pt,Sa:Wt,Xa:Xt,Wa:zt,L:Gt,Ya:qt,sa:Kt,w:$t,K:Yt,pa:Ja,Aa:Za,a:X||n.wasmMemory,Pa:ni,g:ai,V:ii,u:si,W:ui,D:oi,Z:li,Y:ci,X:fi,aa:_i,_:di,i:hi,t:bi,A:mi,x:pi,Q:gi,B:yi,z:vi,s:wi,y:Ei,Za:Fi,r:Ai,m:Si},zs=Ln(),Hi=function(){return(Hi=n.asm.ab).apply(null,arguments)},Qt=n._main=function(){return(Qt=n._main=n.asm.bb).apply(null,arguments)},Mi=n._duckdb_web_fs_glob_add_path=function(){return(Mi=n._duckdb_web_fs_glob_add_path=n.asm.db).apply(null,arguments)},Ui=n._duckdb_web_clear_response=function(){return(Ui=n._duckdb_web_clear_response=n.asm.eb).apply(null,arguments)},Ci=n._duckdb_web_fail_with=function(){return(Ci=n._duckdb_web_fail_with=n.asm.fb).apply(null,arguments)},Bi=n._duckdb_web_reset=function(){return(Bi=n._duckdb_web_reset=n.asm.gb).apply(null,arguments)},Ii=n._duckdb_web_connect=function(){return(Ii=n._duckdb_web_connect=n.asm.hb).apply(null,arguments)},Li=n._duckdb_web_disconnect=function(){return(Li=n._duckdb_web_disconnect=n.asm.ib).apply(null,arguments)},Ni=n._duckdb_web_flush_files=function(){return(Ni=n._duckdb_web_flush_files=n.asm.jb).apply(null,arguments)},Oi=n._duckdb_web_flush_file=function(){return(Oi=n._duckdb_web_flush_file=n.asm.kb).apply(null,arguments)},Pi=n._duckdb_web_open=function(){return(Pi=n._duckdb_web_open=n.asm.lb).apply(null,arguments)},Wi=n._duckdb_web_get_global_file_info=function(){return(Wi=n._duckdb_web_get_global_file_info=n.asm.mb).apply(null,arguments)},Xi=n._duckdb_web_collect_file_stats=function(){return(Xi=n._duckdb_web_collect_file_stats=n.asm.nb).apply(null,arguments)},zi=n._duckdb_web_export_file_stats=function(){return(zi=n._duckdb_web_export_file_stats=n.asm.ob).apply(null,arguments)},Gi=n._duckdb_web_fs_drop_file=function(){return(Gi=n._duckdb_web_fs_drop_file=n.asm.pb).apply(null,arguments)},qi=n._duckdb_web_fs_drop_files=function(){return(qi=n._duckdb_web_fs_drop_files=n.asm.qb).apply(null,arguments)},Ki=n._duckdb_web_fs_glob_file_infos=function(){return(Ki=n._duckdb_web_fs_glob_file_infos=n.asm.rb).apply(null,arguments)},$i=n._duckdb_web_fs_get_file_info_by_id=function(){return($i=n._duckdb_web_fs_get_file_info_by_id=n.asm.sb).apply(null,arguments)},Yi=n._duckdb_web_fs_get_file_info_by_name=function(){return(Yi=n._duckdb_web_fs_get_file_info_by_name=n.asm.tb).apply(null,arguments)},ji=n._duckdb_web_fs_register_file_url=function(){return(ji=n._duckdb_web_fs_register_file_url=n.asm.ub).apply(null,arguments)},Vi=n._duckdb_web_fs_register_file_buffer=function(){return(Vi=n._duckdb_web_fs_register_file_buffer=n.asm.vb).apply(null,arguments)},Ji=n._duckdb_web_copy_file_to_buffer=function(){return(Ji=n._duckdb_web_copy_file_to_buffer=n.asm.wb).apply(null,arguments)},Zi=n._duckdb_web_copy_file_to_path=function(){return(Zi=n._duckdb_web_copy_file_to_path=n.asm.xb).apply(null,arguments)},Qi=n._duckdb_web_get_version=function(){return(Qi=n._duckdb_web_get_version=n.asm.yb).apply(null,arguments)},es=n._duckdb_web_get_feature_flags=function(){return(es=n._duckdb_web_get_feature_flags=n.asm.zb).apply(null,arguments)},rs=n._duckdb_web_tokenize=function(){return(rs=n._duckdb_web_tokenize=n.asm.Ab).apply(null,arguments)},ts=n._duckdb_web_udf_scalar_create=function(){return(ts=n._duckdb_web_udf_scalar_create=n.asm.Bb).apply(null,arguments)},ns=n._duckdb_web_prepared_create=function(){return(ns=n._duckdb_web_prepared_create=n.asm.Cb).apply(null,arguments)},as=n._duckdb_web_prepared_close=function(){return(as=n._duckdb_web_prepared_close=n.asm.Db).apply(null,arguments)},is=n._duckdb_web_prepared_run=function(){return(is=n._duckdb_web_prepared_run=n.asm.Eb).apply(null,arguments)},ss=n._duckdb_web_prepared_send=function(){return(ss=n._duckdb_web_prepared_send=n.asm.Fb).apply(null,arguments)},us=n._duckdb_web_query_run=function(){return(us=n._duckdb_web_query_run=n.asm.Gb).apply(null,arguments)},os=n._duckdb_web_pending_query_start=function(){return(os=n._duckdb_web_pending_query_start=n.asm.Hb).apply(null,arguments)},ls=n._duckdb_web_pending_query_poll=function(){return(ls=n._duckdb_web_pending_query_poll=n.asm.Ib).apply(null,arguments)},cs=n._duckdb_web_pending_query_cancel=function(){return(cs=n._duckdb_web_pending_query_cancel=n.asm.Jb).apply(null,arguments)},fs=n._duckdb_web_query_fetch_results=function(){return(fs=n._duckdb_web_query_fetch_results=n.asm.Kb).apply(null,arguments)},_s=n._duckdb_web_get_tablenames=function(){return(_s=n._duckdb_web_get_tablenames=n.asm.Lb).apply(null,arguments)},ds=n._duckdb_web_insert_arrow_from_ipc_stream=function(){return(ds=n._duckdb_web_insert_arrow_from_ipc_stream=n.asm.Mb).apply(null,arguments)},hs=n._duckdb_web_insert_csv_from_path=function(){return(hs=n._duckdb_web_insert_csv_from_path=n.asm.Nb).apply(null,arguments)},bs=n._duckdb_web_insert_json_from_path=function(){return(bs=n._duckdb_web_insert_json_from_path=n.asm.Ob).apply(null,arguments)},ms=n.__emscripten_tls_init=function(){return(ms=n.__emscripten_tls_init=n.asm.Pb).apply(null,arguments)},ze=n._pthread_self=function(){return(ze=n._pthread_self=n.asm.Qb).apply(null,arguments)},ps=function(){return(ps=n.asm.__errno_location).apply(null,arguments)},en=n.__emscripten_thread_init=function(){return(en=n.__emscripten_thread_init=n.asm.Rb).apply(null,arguments)},gs=n.__emscripten_thread_crashed=function(){return(gs=n.__emscripten_thread_crashed=n.asm.Sb).apply(null,arguments)},Ge=function(){return(Ge=n.asm.Tb).apply(null,arguments)},qe=function(){return(qe=n.asm.Ub).apply(null,arguments)},ys=function(){return(ys=n.asm.emscripten_main_runtime_thread_id).apply(null,arguments)},vs=function(){return(vs=n.asm.emscripten_main_thread_process_queued_calls).apply(null,arguments)},rn=function(){return(rn=n.asm.Vb).apply(null,arguments)},ws=function(){return(ws=n.asm.emscripten_dispatch_to_thread_).apply(null,arguments)},cr=function(){return(cr=n.asm.Wb).apply(null,arguments)},fr=function(){return(fr=n.asm.Xb).apply(null,arguments)},_r=n.__emscripten_thread_exit=function(){return(_r=n.__emscripten_thread_exit=n.asm.Yb).apply(null,arguments)},tn=n.__emscripten_check_mailbox=function(){return(tn=n.__emscripten_check_mailbox=n.asm.Zb).apply(null,arguments)},Ke=n._malloc=function(){return(Ke=n._malloc=n.asm._b).apply(null,arguments)},Es=n._free=function(){return(Es=n._free=n.asm.$b).apply(null,arguments)},nn=function(){return(nn=n.asm.ac).apply(null,arguments)},an=function(){return(an=n.asm.bc).apply(null,arguments)},$e=function(){return($e=n.asm.cc).apply(null,arguments)},Te=function(){return(Te=n.asm.dc).apply(null,arguments)},He=function(){return(He=n.asm.ec).apply(null,arguments)};n.keepRuntimeAlive=Ie,n.wasmMemory=X,n.stackAlloc=He,n.stackSave=$e,n.stackRestore=Te,n.ccall=ki,n.ExitStatus=Qe,n.PThread=A;var Ye;De=function e(){Ye||sn(),Ye||(De=e)};function Fs(){var e=Qt,t=0,a=0;try{var s=e(t,a);return nt(s,!0),s}catch(d){return tr(d)}}function sn(){if(pe>0)return;if(E){v(n),zr(),startWorker(n);return}if(xn(),pe>0)return;function e(){Ye||(Ye=!0,n.calledRun=!0,!Ue&&(zr(),Tn(),v(n),n.onRuntimeInitialized&&n.onRuntimeInitialized(),un&&Fs(),Hn()))}n.setStatus?(n.setStatus("Running..."),setTimeout(function(){setTimeout(function(){n.setStatus("")},1),e()},1)):e()}if(n.preInit)for(typeof n.preInit=="function"&&(n.preInit=[n.preInit]);n.preInit.length>0;)n.preInit.pop()();var un=!0;return n.noInitialRun&&(un=!1),sn(),i.ready}})();typeof Ve=="object"&&typeof Ar=="object"?Ar.exports=Fr:typeof define=="function"&&define.amd?define([],function(){return Fr}):typeof Ve=="object"&&(Ve.DuckDB=Fr)});var gn=ye((exports,module)=>{(function(){"use strict";var ERROR="input is invalid type",WINDOW=typeof window=="object",root=WINDOW?window:{};root.JS_SHA256_NO_WINDOW&&(WINDOW=!1);var WEB_WORKER=!WINDOW&&typeof self=="object",NODE_JS=!root.JS_SHA256_NO_NODE_JS&&typeof process=="object"&&process.versions&&process.versions.node;NODE_JS?root=global:WEB_WORKER&&(root=self);var COMMON_JS=!root.JS_SHA256_NO_COMMON_JS&&typeof module=="object"&&module.exports,AMD=typeof define=="function"&&define.amd,ARRAY_BUFFER=!root.JS_SHA256_NO_ARRAY_BUFFER&&typeof ArrayBuffer<"u",HEX_CHARS="0123456789abcdef".split(""),EXTRA=[-2147483648,8388608,32768,128],SHIFT=[24,16,8,0],K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],OUTPUT_TYPES=["hex","array","digest","arrayBuffer"],blocks=[];(root.JS_SHA256_NO_NODE_JS||!Array.isArray)&&(Array.isArray=function(r){return Object.prototype.toString.call(r)==="[object Array]"}),ARRAY_BUFFER&&(root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW||!ArrayBuffer.isView)&&(ArrayBuffer.isView=function(r){return typeof r=="object"&&r.buffer&&r.buffer.constructor===ArrayBuffer});var createOutputMethod=function(r,i){return function(l){return new Sha256(i,!0).update(l)[r]()}},createMethod=function(r){var i=createOutputMethod("hex",r);NODE_JS&&(i=nodeWrap(i,r)),i.create=function(){return new Sha256(r)},i.update=function(u){return i.create().update(u)};for(var l=0;l<OUTPUT_TYPES.length;++l){var o=OUTPUT_TYPES[l];i[o]=createOutputMethod(o,r)}return i},nodeWrap=function(method,is224){var crypto=eval("require('crypto')"),Buffer=eval("require('buffer').Buffer"),algorithm=is224?"sha224":"sha256",nodeMethod=function(r){if(typeof r=="string")return crypto.createHash(algorithm).update(r,"utf8").digest("hex");if(r==null)throw new Error(ERROR);return r.constructor===ArrayBuffer&&(r=new Uint8Array(r)),Array.isArray(r)||ArrayBuffer.isView(r)||r.constructor===Buffer?crypto.createHash(algorithm).update(new Buffer(r)).digest("hex"):method(r)};return nodeMethod},createHmacOutputMethod=function(r,i){return function(l,o){return new HmacSha256(l,i,!0).update(o)[r]()}},createHmacMethod=function(r){var i=createHmacOutputMethod("hex",r);i.create=function(u){return new HmacSha256(u,r)},i.update=function(u,f){return i.create(u).update(f)};for(var l=0;l<OUTPUT_TYPES.length;++l){var o=OUTPUT_TYPES[l];i[o]=createHmacOutputMethod(o,r)}return i};function Sha256(r,i){i?(blocks[0]=blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0,this.blocks=blocks):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],r?(this.h0=3238371032,this.h1=914150663,this.h2=812702999,this.h3=4144912697,this.h4=4290775857,this.h5=1750603025,this.h6=1694076839,this.h7=3204075428):(this.h0=1779033703,this.h1=3144134277,this.h2=1013904242,this.h3=2773480762,this.h4=1359893119,this.h5=2600822924,this.h6=528734635,this.h7=1541459225),this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0,this.is224=r}Sha256.prototype.update=function(r){if(!this.finalized){var i,l=typeof r;if(l!=="string"){if(l==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);i=!0}for(var o,u=0,f,_=r.length,c=this.blocks;u<_;){if(this.hashed&&(this.hashed=!1,c[0]=this.block,c[16]=c[1]=c[2]=c[3]=c[4]=c[5]=c[6]=c[7]=c[8]=c[9]=c[10]=c[11]=c[12]=c[13]=c[14]=c[15]=0),i)for(f=this.start;u<_&&f<64;++u)c[f>>2]|=r[u]<<SHIFT[f++&3];else for(f=this.start;u<_&&f<64;++u)o=r.charCodeAt(u),o<128?c[f>>2]|=o<<SHIFT[f++&3]:o<2048?(c[f>>2]|=(192|o>>6)<<SHIFT[f++&3],c[f>>2]|=(128|o&63)<<SHIFT[f++&3]):o<55296||o>=57344?(c[f>>2]|=(224|o>>12)<<SHIFT[f++&3],c[f>>2]|=(128|o>>6&63)<<SHIFT[f++&3],c[f>>2]|=(128|o&63)<<SHIFT[f++&3]):(o=65536+((o&1023)<<10|r.charCodeAt(++u)&1023),c[f>>2]|=(240|o>>18)<<SHIFT[f++&3],c[f>>2]|=(128|o>>12&63)<<SHIFT[f++&3],c[f>>2]|=(128|o>>6&63)<<SHIFT[f++&3],c[f>>2]|=(128|o&63)<<SHIFT[f++&3]);this.lastByteIndex=f,this.bytes+=f-this.start,f>=64?(this.block=c[16],this.start=f-64,this.hash(),this.hashed=!0):this.start=f}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},Sha256.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var r=this.blocks,i=this.lastByteIndex;r[16]=this.block,r[i>>2]|=EXTRA[i&3],this.block=r[16],i>=56&&(this.hashed||this.hash(),r[0]=this.block,r[16]=r[1]=r[2]=r[3]=r[4]=r[5]=r[6]=r[7]=r[8]=r[9]=r[10]=r[11]=r[12]=r[13]=r[14]=r[15]=0),r[14]=this.hBytes<<3|this.bytes>>>29,r[15]=this.bytes<<3,this.hash()}},Sha256.prototype.hash=function(){var r=this.h0,i=this.h1,l=this.h2,o=this.h3,u=this.h4,f=this.h5,_=this.h6,c=this.h7,h=this.blocks,n,v,U,N,D,z,j,ee,re,O,E;for(n=16;n<64;++n)D=h[n-15],v=(D>>>7|D<<25)^(D>>>18|D<<14)^D>>>3,D=h[n-2],U=(D>>>17|D<<15)^(D>>>19|D<<13)^D>>>10,h[n]=h[n-16]+v+h[n-7]+U<<0;for(E=i&l,n=0;n<64;n+=4)this.first?(this.is224?(ee=300032,D=h[0]-1413257819,c=D-150054599<<0,o=D+24177077<<0):(ee=704751109,D=h[0]-210244248,c=D-1521486534<<0,o=D+143694565<<0),this.first=!1):(v=(r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10),U=(u>>>6|u<<26)^(u>>>11|u<<21)^(u>>>25|u<<7),ee=r&i,N=ee^r&l^E,j=u&f^~u&_,D=c+U+j+K[n]+h[n],z=v+N,c=o+D<<0,o=D+z<<0),v=(o>>>2|o<<30)^(o>>>13|o<<19)^(o>>>22|o<<10),U=(c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7),re=o&r,N=re^o&i^ee,j=c&u^~c&f,D=_+U+j+K[n+1]+h[n+1],z=v+N,_=l+D<<0,l=D+z<<0,v=(l>>>2|l<<30)^(l>>>13|l<<19)^(l>>>22|l<<10),U=(_>>>6|_<<26)^(_>>>11|_<<21)^(_>>>25|_<<7),O=l&o,N=O^l&r^re,j=_&c^~_&u,D=f+U+j+K[n+2]+h[n+2],z=v+N,f=i+D<<0,i=D+z<<0,v=(i>>>2|i<<30)^(i>>>13|i<<19)^(i>>>22|i<<10),U=(f>>>6|f<<26)^(f>>>11|f<<21)^(f>>>25|f<<7),E=i&l,N=E^i&o^O,j=f&_^~f&c,D=u+U+j+K[n+3]+h[n+3],z=v+N,u=r+D<<0,r=D+z<<0;this.h0=this.h0+r<<0,this.h1=this.h1+i<<0,this.h2=this.h2+l<<0,this.h3=this.h3+o<<0,this.h4=this.h4+u<<0,this.h5=this.h5+f<<0,this.h6=this.h6+_<<0,this.h7=this.h7+c<<0},Sha256.prototype.hex=function(){this.finalize();var r=this.h0,i=this.h1,l=this.h2,o=this.h3,u=this.h4,f=this.h5,_=this.h6,c=this.h7,h=HEX_CHARS[r>>28&15]+HEX_CHARS[r>>24&15]+HEX_CHARS[r>>20&15]+HEX_CHARS[r>>16&15]+HEX_CHARS[r>>12&15]+HEX_CHARS[r>>8&15]+HEX_CHARS[r>>4&15]+HEX_CHARS[r&15]+HEX_CHARS[i>>28&15]+HEX_CHARS[i>>24&15]+HEX_CHARS[i>>20&15]+HEX_CHARS[i>>16&15]+HEX_CHARS[i>>12&15]+HEX_CHARS[i>>8&15]+HEX_CHARS[i>>4&15]+HEX_CHARS[i&15]+HEX_CHARS[l>>28&15]+HEX_CHARS[l>>24&15]+HEX_CHARS[l>>20&15]+HEX_CHARS[l>>16&15]+HEX_CHARS[l>>12&15]+HEX_CHARS[l>>8&15]+HEX_CHARS[l>>4&15]+HEX_CHARS[l&15]+HEX_CHARS[o>>28&15]+HEX_CHARS[o>>24&15]+HEX_CHARS[o>>20&15]+HEX_CHARS[o>>16&15]+HEX_CHARS[o>>12&15]+HEX_CHARS[o>>8&15]+HEX_CHARS[o>>4&15]+HEX_CHARS[o&15]+HEX_CHARS[u>>28&15]+HEX_CHARS[u>>24&15]+HEX_CHARS[u>>20&15]+HEX_CHARS[u>>16&15]+HEX_CHARS[u>>12&15]+HEX_CHARS[u>>8&15]+HEX_CHARS[u>>4&15]+HEX_CHARS[u&15]+HEX_CHARS[f>>28&15]+HEX_CHARS[f>>24&15]+HEX_CHARS[f>>20&15]+HEX_CHARS[f>>16&15]+HEX_CHARS[f>>12&15]+HEX_CHARS[f>>8&15]+HEX_CHARS[f>>4&15]+HEX_CHARS[f&15]+HEX_CHARS[_>>28&15]+HEX_CHARS[_>>24&15]+HEX_CHARS[_>>20&15]+HEX_CHARS[_>>16&15]+HEX_CHARS[_>>12&15]+HEX_CHARS[_>>8&15]+HEX_CHARS[_>>4&15]+HEX_CHARS[_&15];return this.is224||(h+=HEX_CHARS[c>>28&15]+HEX_CHARS[c>>24&15]+HEX_CHARS[c>>20&15]+HEX_CHARS[c>>16&15]+HEX_CHARS[c>>12&15]+HEX_CHARS[c>>8&15]+HEX_CHARS[c>>4&15]+HEX_CHARS[c&15]),h},Sha256.prototype.toString=Sha256.prototype.hex,Sha256.prototype.digest=function(){this.finalize();var r=this.h0,i=this.h1,l=this.h2,o=this.h3,u=this.h4,f=this.h5,_=this.h6,c=this.h7,h=[r>>24&255,r>>16&255,r>>8&255,r&255,i>>24&255,i>>16&255,i>>8&255,i&255,l>>24&255,l>>16&255,l>>8&255,l&255,o>>24&255,o>>16&255,o>>8&255,o&255,u>>24&255,u>>16&255,u>>8&255,u&255,f>>24&255,f>>16&255,f>>8&255,f&255,_>>24&255,_>>16&255,_>>8&255,_&255];return this.is224||h.push(c>>24&255,c>>16&255,c>>8&255,c&255),h},Sha256.prototype.array=Sha256.prototype.digest,Sha256.prototype.arrayBuffer=function(){this.finalize();var r=new ArrayBuffer(this.is224?28:32),i=new DataView(r);return i.setUint32(0,this.h0),i.setUint32(4,this.h1),i.setUint32(8,this.h2),i.setUint32(12,this.h3),i.setUint32(16,this.h4),i.setUint32(20,this.h5),i.setUint32(24,this.h6),this.is224||i.setUint32(28,this.h7),r};function HmacSha256(r,i,l){var o,u=typeof r;if(u==="string"){var f=[],_=r.length,c=0,h;for(o=0;o<_;++o)h=r.charCodeAt(o),h<128?f[c++]=h:h<2048?(f[c++]=192|h>>6,f[c++]=128|h&63):h<55296||h>=57344?(f[c++]=224|h>>12,f[c++]=128|h>>6&63,f[c++]=128|h&63):(h=65536+((h&1023)<<10|r.charCodeAt(++o)&1023),f[c++]=240|h>>18,f[c++]=128|h>>12&63,f[c++]=128|h>>6&63,f[c++]=128|h&63);r=f}else if(u==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);r.length>64&&(r=new Sha256(i,!0).update(r).array());var n=[],v=[];for(o=0;o<64;++o){var U=r[o]||0;n[o]=92^U,v[o]=54^U}Sha256.call(this,i,l),this.update(v),this.oKeyPad=n,this.inner=!0,this.sharedMemory=l}HmacSha256.prototype=new Sha256,HmacSha256.prototype.finalize=function(){if(Sha256.prototype.finalize.call(this),this.inner){this.inner=!1;var r=this.array();Sha256.call(this,this.is224,this.sharedMemory),this.update(this.oKeyPad),this.update(r),Sha256.prototype.finalize.call(this)}};var exports=createMethod();exports.sha256=exports,exports.sha224=createMethod(!0),exports.sha256.hmac=createHmacMethod(),exports.sha224.hmac=createHmacMethod(!0),COMMON_JS?module.exports=exports:(root.sha256=exports.sha256,root.sha224=exports.sha224,AMD&&define(function(){return exports}))})()});var I={},_n=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";_n&&(mr=hr(),pr=mr.parentPort,pr.on("message",r=>wr({data:r})),yr=br(),Object.assign(global,{self:global,require:dr,Module:I,location:{href:__filename},Worker:mr.Worker,importScripts:function(r){(0,eval)(yr.readFileSync(r,"utf8")+"//# sourceURL="+r)},postMessage:function(r){pr.postMessage(r)},performance:global.performance||{now:function(){return Date.now()}}}));var mr,pr,yr,gr=!1;function Us(){var r=Array.prototype.slice.call(arguments).join(" ");if(_n){yr.writeSync(2,r+"\n");return}console.error(r)}function Cs(){var r=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:r,threadId:I._pthread_self()})}var fn=Us;self.alert=Cs;I.instantiateWasm=(r,i)=>{var l=I.wasmModule;I.wasmModule=null;var o=new WebAssembly.Instance(l,r);return i(o)};self.onunhandledrejection=r=>{var i;throw(i=r.reason)!=null?i:r};function vr(r){try{if(r.data.cmd==="load"){let l=[];self.onmessage=o=>l.push(o),self.startWorker=o=>{I=o,postMessage({cmd:"loaded"});for(let u of l)vr(u);self.onmessage=vr},I.wasmModule=r.data.wasmModule;for(let o of r.data.handlers)I[o]=function(){postMessage({cmd:"callHandler",handler:o,args:[...arguments]})};if(I.wasmMemory=r.data.wasmMemory,I.buffer=I.wasmMemory.buffer,I.ENVIRONMENT_IS_PTHREAD=!0,typeof r.data.urlOrBlob=="string")importScripts(r.data.urlOrBlob);else{var i=URL.createObjectURL(r.data.urlOrBlob);importScripts(i),URL.revokeObjectURL(i)}DuckDB(I)}else if(r.data.cmd==="run"){I.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),I.__emscripten_thread_mailbox_await(r.data.pthread_ptr),I.establishStackSpace(),I.PThread.receiveObjectTransfer(r.data),I.PThread.threadInitTLS(),gr||(gr=!0);try{I.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(l){if(l!="unwind")throw l}}else r.data.cmd==="cancel"?I._pthread_self()&&I.__emscripten_thread_exit(-1):r.data.target==="setimmediate"||(r.data.cmd==="checkMailbox"?gr&&I.checkMailbox():r.data.cmd&&(fn("worker.js received unknown command "+r.data.cmd),fn(r.data)))}catch(l){throw I.__emscripten_thread_crashed&&I.__emscripten_thread_crashed(),l}}self.onmessage=vr;var wr=self.onmessage;function dn(){return I}function hn(r){I=r}var Dn=cn(pn());var he=cn(gn()),yn=function(r,i,l){var o;if((o=r==null?void 0:r.endpoint)!=null&&o.startsWith("http")){let u="".concat(r==null?void 0:r.endpoint),f=u.indexOf("://")+3;return u.substring(f)}else return r!=null&&r.endpoint?"".concat(l,".").concat(r==null?void 0:r.endpoint):"".concat(l,".s3.amazonaws.com")};function Is(r,i,l){var f,_,c,h;let o=vn(i),u=o.path;return wn(r)&&(u="/".concat(o.bucket).concat(u)),{url:u,query:"",host:yn(r,i,o.bucket),region:(f=r==null?void 0:r.region)!=null?f:"",service:"s3",method:l,accessKeyId:(_=r==null?void 0:r.accessKeyId)!=null?_:"",secretAccessKey:(c=r==null?void 0:r.secretAccessKey)!=null?c:"",sessionToken:(h=r==null?void 0:r.sessionToken)!=null?h:"",dateNow:new Date().toISOString().replace(/-/g,"").split("T")[0],datetimeNow:new Date().toISOString().replace(/-/g,"").replace(/:/g,"").split(".")[0]+"Z"}}function Ls(r,i=!1){let l="0123456789ABCDEF",o="";for(let u=0;u<r.length;u++){let f=r[u];f>="A"&&f<="Z"||f>="a"&&f<="z"||f>="0"&&f<="9"||f=="_"||f=="-"||f=="~"||f=="."?o+=f:f=="/"?i?o+="%2F":o+=f:(o+="%",o+=l[f.charCodeAt(0)>>4],o+=l[f.charCodeAt(0)&15])}return o}function Ns(r,i=null){var z;let l=(z=i==null?void 0:i.contentHash)!=null?z:"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",o=new Map;o.set("x-amz-date",r.datetimeNow),o.set("x-amz-content-sha256",l),r.sessionToken&&o.set("x-amz-security-token",r.sessionToken);let u="";i!=null&&i.contentType&&(u+="content-type;"),u+="host;x-amz-content-sha256;x-amz-date",r.sessionToken&&(u+=";x-amz-security-token");let f=r.method+"\n"+Ls(r.url)+"\n"+r.query;i!=null&&i.contentType&&(f+="\ncontent-type:"+(i==null?void 0:i.contentType)),f+="\nhost:"+r.host+"\nx-amz-content-sha256:"+l+"\nx-amz-date:"+r.datetimeNow,r.sessionToken&&r.sessionToken.length>0&&(f+="\nx-amz-security-token:"+r.sessionToken),f+="\n\n"+u+"\n"+l;let _=(0,he.sha256)(f),c="AWS4-HMAC-SHA256\n"+r.datetimeNow+"\n"+r.dateNow+"/"+r.region+"/"+r.service+"/aws4_request\n"+_,h="AWS4"+r.secretAccessKey,n=he.sha256.hmac.arrayBuffer(h,r.dateNow),v=he.sha256.hmac.arrayBuffer(n,r.region),U=he.sha256.hmac.arrayBuffer(v,r.service),N=he.sha256.hmac.arrayBuffer(U,"aws4_request"),D=he.sha256.hmac(N,c);return o.set("Authorization","AWS4-HMAC-SHA256 Credential="+r.accessKeyId+"/"+r.dateNow+"/"+r.region+"/"+r.service+"/aws4_request, SignedHeaders="+u+", Signature="+D),o}var Os=function(r,i,l,o=null,u=null){let f=Is(r,i,l),_={contentType:o,contentHash:u?he.sha256.hex(u):null};return Ns(f,_)};function oe(r,i,l,o,u=null,f=null){(i!=null&&i.accessKeyId||i!=null&&i.sessionToken)&&(Os(i,l,o,u,f).forEach((c,h)=>{r.setRequestHeader(h,c)}),u&&r.setRequestHeader("content-type",u))}function vn(r){if(r.indexOf("s3://")!=0)throw new Error("URL needs to start with s3://");let i=r.indexOf("/",5);if(i==-1)throw new Error("URL needs to contain a '/' after the host");let l=r.substring(5,i);if(!l)throw new Error("URL needs to contain a bucket name");let o=r.substring(i);if(!o)throw new Error("URL needs to contain key");return{bucket:l,path:o}}function wn(r){var i;return!!((i=r==null?void 0:r.endpoint)!=null&&i.startsWith("http"))}function le(r,i){let l=vn(i);return wn(r)?"".concat(r==null?void 0:r.endpoint,"/").concat(l.bucket)+l.path:"https://"+yn(r,i,l.bucket)+l.path}var An=new TextEncoder,En=new TextDecoder("utf-8");function Sr(r,i,l){let o=An.encode(l),u=r._malloc(o.byteLength),f=r.HEAPU8.subarray(u,u+o.byteLength);f.set(o),r.HEAPF64[(i>>3)+0]=1,r.HEAPF64[(i>>3)+1]=u,r.HEAPF64[(i>>3)+2]=f.byteLength}function Rr(r){switch(r){case"UINT8":case"INT8":return 1;case"INT32":case"FLOAT":return 4;case"INT64":case"UINT64":case"DOUBLE":case"VARCHAR":return 8;default:return 0}}function Dr(r,i,l,o){let u=r.HEAPU8.subarray(i,i+o*Rr(l));switch(l){case"UINT8":return new Uint8Array(u.buffer,u.byteOffset,o);case"INT8":return new Int8Array(u.buffer,u.byteOffset,o);case"INT32":return new Int32Array(u.buffer,u.byteOffset,o);case"FLOAT":return new Float32Array(u.buffer,u.byteOffset,o);case"DOUBLE":return new Float64Array(u.buffer,u.byteOffset,o);case"VARCHAR":return new Float64Array(u.buffer,u.byteOffset,o);default:return new Array(0)}}function Fn(r,i,l){let o=r.HEAPU8.subarray(i,i+l);return new Uint8Array(o.buffer,o.byteOffset,l)}function Je(r,i,l){let o=r.HEAPU8.subarray(i,i+l*8);return new Float64Array(o.buffer,o.byteOffset,l)}function Sn(r,i,l,o,u,f,_,c){try{let h=r._udfFunctions.get(o);if(!h){Sr(i,l,"Unknown UDF with id: "+o);return}let n=En.decode(i.HEAPU8.subarray(u,u+f)),v=JSON.parse(n),U=Je(i,_,c/8),N=x=>{var J;let P=null;switch(x.validityBuffer!==void 0&&(P=Fn(i,U[x.validityBuffer],v.rows)),x.physicalType){case"VARCHAR":{if(x.dataBuffer===null||x.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for VARCHAR argument");if(x.lengthBuffer===null||x.lengthBuffer===void 0)throw new Error("malformed data view, expected data length buffer for VARCHAR argument");let Z=Dr(i,U[x.dataBuffer],x.physicalType,v.rows),q=[],W=Je(i,U[x.lengthBuffer],v.rows);for(let y=0;y<v.rows;++y){if(P!=null&&!P[y]){q.push(null);continue}let $=i.HEAPU8.subarray(Z[y],Z[y]+W[y]),be=En.decode($);q.push(be)}return y=>q[y]}case"STRUCT":{let Z={},q=[];for(let W=0;W<(((J=x.children)==null?void 0:J.length)||0);++W){let y=x.children[W],$=N(y);q.push(be=>{Z[y.name]=$(be)})}return P!=null?W=>{if(!P[W])return null;for(let y of q)y(W);return Z}:W=>{for(let y of q)y(W);return Z}}default:{if(x.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for argument of type: "+x.physicalType);let Z=Dr(i,U[x.dataBuffer],x.physicalType,v.rows);return P!=null?q=>P[q]?Z[q]:null:q=>Z[q]}}},D=[];for(let x=0;x<v.args.length;++x)D.push(N(v.args[x]));let z=v.rows*Rr(v.ret.physicalType),j=i._malloc(z),ee=Dr(i,j,v.ret.physicalType,v.rows),re=i._malloc(v.rows),O=Fn(i,re,v.rows);if(ee.length==0||O.length==0){Sr(i,l,"Can't create physical arrays for result");return}let E=ee;v.ret.physicalType=="VARCHAR"&&(E=new Array(v.rows));let G=[];for(let x=0;x<v.args.length;++x)G.push(null);for(let x=0;x<v.rows;++x){for(let J=0;J<v.args.length;++J)G[J]=D[J](x);let P=h.func(...G);E[x]=P,O[x]=P==null?0:1}let ve=0;switch(v.ret.physicalType){case"VARCHAR":{let x=new Array(0);ve=i._malloc(v.rows*Rr("DOUBLE"));let P=Je(i,ve,v.rows),J=0;for(let y=0;y<v.rows;++y){let $=An.encode(E[y]||"");x.push($),P[y]=$.length,J+=$.length}let Z=i._malloc(J),q=i.HEAPU8.subarray(Z,Z+J),W=0;for(let y=0;y<v.rows;++y){ee[y]=W;let $=x[y];q.subarray(W,W+$.length).set($),W+=$.length}}}let Ae=3*8,Se=i._malloc(Ae),de=Je(i,Se,3);de[0]=j,de[1]=re,de[2]=ve,i.HEAPF64[(l>>3)+0]=0,i.HEAPF64[(l>>3)+1]=Se,i.HEAPF64[(l>>3)+2]=0}catch(h){Sr(i,l,h.toString())}}function Ws(){let r=new TextDecoder;return i=>(typeof SharedArrayBuffer<"u"&&i.buffer instanceof SharedArrayBuffer&&(i=new Uint8Array(i)),r.decode(i))}var Xs=Ws();function ie(r,i){console.error("FAIL WITH: ".concat(i)),r.ccall("duckdb_web_fail_with",null,["string"],[i])}function ue(r,i,l){return Xs(r.HEAPU8.subarray(i,i+l))}function kr(r,i,l,o){let u=r.stackSave(),f=r.stackAlloc(3*8);l.unshift("number"),o.unshift(f),r.ccall(i,null,l,o);let _=r.HEAPF64[(f>>3)+0],c=r.HEAPF64[(f>>3)+1],h=r.HEAPF64[(f>>3)+2];return r.stackRestore(u),[_,c,h]}function xr(r){r.ccall("duckdb_web_clear_response",null,[],[])}var T={_files:new Map,_fileInfoCache:new Map,_udfFunctions:new Map,_globalFileInfo:null,getFileInfo(r,i){try{let l=T._fileInfoCache.get(i),[o,u,f]=kr(r,"duckdb_web_fs_get_file_info_by_id",["number","number"],[i,(l==null?void 0:l.cacheEpoch)||0]);if(o!==0)return null;if(f===0)return l;let _=ue(r,u,f);xr(r);let c=JSON.parse(_);if(c==null)return null;let h={...c,blob:null};return T._fileInfoCache.set(i,h),h}catch(l){return console.log(l),null}},getGlobalFileInfo(r){var i;try{let[l,o,u]=kr(r,"duckdb_web_get_global_file_info",["number"],[((i=T._globalFileInfo)==null?void 0:i.cacheEpoch)||0]);if(l!==0)return null;if(u===0)return T._globalFileInfo;let f=ue(r,o,u);xr(r);let _=JSON.parse(f);return _==null?null:(T._globalFileInfo={..._,blob:null},T._globalFileInfo)}catch(l){return console.log(l),null}},testPlatformFeature:(r,i)=>{switch(i){case 1:return typeof BigInt64Array<"u";default:return console.warn("test for unknown feature: ".concat(i)),!1}},getDefaultDataProtocol(r){return 2},openFile:(r,i,l)=>{var o;try{T._fileInfoCache.delete(i);let u=T.getFileInfo(r,i);switch(u==null?void 0:u.dataProtocol){case 4:case 5:{if(l&1&&l&2)throw new Error("Opening file ".concat(u.fileName," failed: cannot open file with both read and write flags set"));if(l&32)throw new Error("Opening file ".concat(u.fileName," failed: appending to HTTP/S3 files is not supported"));if(l&2){let c=new XMLHttpRequest;if(u.dataProtocol==5?(c.open("HEAD",le(u.s3Config,u.dataUrl),!1),oe(c,u.s3Config,u.dataUrl,"HEAD")):c.open("HEAD",u.dataUrl,!1),c.send(null),c.status!=200&&c.status!=404)throw new Error("Opening file ".concat(u.fileName," failed: Unexpected return status from server (").concat(c.status,")"));if(c.status==404&&!(l&8||l&16))throw new Error("Opening file ".concat(u.fileName," failed: Cannot write to non-existent file without FILE_FLAGS_FILE_CREATE or FILE_FLAGS_FILE_CREATE_NEW flag."));let h=r._malloc(1),n=new Uint8Array;r.HEAPU8.set(n,h);let v=r._malloc(2*8);return r.HEAPF64[(v>>3)+0]=1,r.HEAPF64[(v>>3)+1]=h,v}else if(l!=1)throw new Error("Opening file ".concat(u.fileName," failed: unsupported file flags: ").concat(l));let f=null,_=null;try{let c=new XMLHttpRequest;if(u.dataProtocol==5?(c.open("HEAD",le(u.s3Config,u.dataUrl),!1),oe(c,u.s3Config,u.dataUrl,"HEAD")):c.open("HEAD",u.dataUrl,!1),c.setRequestHeader("Range","bytes=0-"),c.send(null),f=c.getResponseHeader("Content-Length"),f!==null&&c.status==206){let h=r._malloc(16);return r.HEAPF64[(h>>3)+0]=+f,r.HEAPF64[(h>>3)+1]=0,h}}catch(c){_=c,console.warn("HEAD request with range header failed: ".concat(c))}if(u.allowFullHttpReads){if(f!==null&&+f>1){let h=new XMLHttpRequest;u.dataProtocol==5?(h.open("GET",le(u.s3Config,u.dataUrl),!1),oe(h,u.s3Config,u.dataUrl,"GET")):h.open("GET",u.dataUrl,!1),h.setRequestHeader("Range","bytes=0-0"),h.send(null);let n=h.getResponseHeader("Content-Length");if(h.status==206&&n!==null&&+n==1){let v=r._malloc(16);return r.HEAPF64[(v>>3)+0]=+f,r.HEAPF64[(v>>3)+1]=0,v}if(h.status==200&&n!==null&&+n==+f){console.warn("fall back to full HTTP read for: ".concat(u.dataUrl));let v=r._malloc(h.response.byteLength),U=new Uint8Array(h.response,0,h.response.byteLength);r.HEAPU8.set(U,v);let N=r._malloc(2*8);return r.HEAPF64[(N>>3)+0]=h.response.byteLength,r.HEAPF64[(N>>3)+1]=v,N}}console.warn("falling back to full HTTP read for: ".concat(u.dataUrl));let c=new XMLHttpRequest;if(u.dataProtocol==5?(c.open("GET",le(u.s3Config,u.dataUrl),!1),oe(c,u.s3Config,u.dataUrl,"GET")):c.open("GET",u.dataUrl,!1),c.responseType="arraybuffer",c.send(null),c.status==200){let h=r._malloc(c.response.byteLength),n=new Uint8Array(c.response,0,c.response.byteLength);r.HEAPU8.set(n,h);let v=r._malloc(2*8);return r.HEAPF64[(v>>3)+0]=c.response.byteLength,r.HEAPF64[(v>>3)+1]=h,v}}if(_!=null)throw new Error("Reading file ".concat(u.fileName," failed with error: ").concat(_));return 0}case 2:{let f=(o=T._files)==null?void 0:o.get(u.fileName);if(f){let h=r._malloc(16);return r.HEAPF64[(h>>3)+0]=f.size,r.HEAPF64[(h>>3)+1]=0,h}console.warn("Buffering missing file: ".concat(u.fileName));let _=r._malloc(2*8),c=r._malloc(1);return r.HEAPF64[(_>>3)+0]=1,r.HEAPF64[(_>>3)+1]=c,_}}}catch(u){console.error(u.toString()),ie(r,u.toString())}return 0},glob:(r,i,l)=>{var o;try{let u=ue(r,i,l);if(u.startsWith("http")||u.startsWith("s3://")){let f=new XMLHttpRequest;if(u.startsWith("s3://")){let _=T.getGlobalFileInfo(r);f.open("HEAD",le(_==null?void 0:_.s3Config,u),!1),oe(f,_==null?void 0:_.s3Config,u,"HEAD")}else f.open("HEAD",u,!1);if(f.send(null),f.status!=200&&f.status!==206){if(!((o=T.getGlobalFileInfo(r))!=null&&o.allowFullHttpReads)){ie(r,"HEAD request failed: ".concat(u,", with full http reads are disabled"));return}let _=new XMLHttpRequest;if(u.startsWith("s3://")){let h=T.getGlobalFileInfo(r);_.open("GET",le(h==null?void 0:h.s3Config,u),!1),oe(_,h==null?void 0:h.s3Config,u,"HEAD")}else _.open("GET",u,!1);if(_.setRequestHeader("Range","bytes=0-0"),_.send(null),_.status!=200&&_.status!==206){ie(r,"HEAD and GET requests failed: ".concat(u));return}let c=_.getResponseHeader("Content-Length");c&&+c>1&&console.warn("Range request for ".concat(u," did not return a partial response: ").concat(_.status,' "').concat(_.statusText,'"'))}r.ccall("duckdb_web_fs_glob_add_path",null,["string"],[u])}}catch(u){return console.log(u),ie(r,u.toString()),0}},checkFile:(r,i,l)=>{try{let o=ue(r,i,l);if(o.startsWith("http")||o.startsWith("s3://")){let u=new XMLHttpRequest;if(o.startsWith("s3://")){let f=T.getGlobalFileInfo(r);u.open("HEAD",le(f==null?void 0:f.s3Config,o),!1),oe(u,f==null?void 0:f.s3Config,o,"HEAD")}else u.open("HEAD",o,!1);return u.send(null),u.status==206||u.status==200}}catch(o){return console.log(o),!1}return!1},syncFile:(r,i)=>{},closeFile:(r,i)=>{var o;let l=T.getFileInfo(r,i);switch(T._fileInfoCache.delete(i),l==null?void 0:l.dataProtocol){case 0:case 4:case 5:break;case 1:case 2:return;case 3:{let u=(o=T._files)==null?void 0:o.get(l.fileName);if(!u)throw new Error("No OPFS access handle registered with name: ".concat(l.fileName));return u.flush()}}},truncateFile:(r,i,l)=>{var u;let o=T.getFileInfo(r,i);switch(o==null?void 0:o.dataProtocol){case 4:ie(r,"Cannot truncate a http file");return;case 5:ie(r,"Cannot truncate an s3 file");return;case 0:case 1:case 2:ie(r,"truncateFile not implemented");return;case 3:{let f=(u=T._files)==null?void 0:u.get(o.fileName);if(!f)throw new Error("No OPFS access handle registered with name: ".concat(o.fileName));return f.truncate(l)}}return 0},readFile(r,i,l,o,u){var f,_;if(o==0)return 0;try{let c=T.getFileInfo(r,i);switch(c==null?void 0:c.dataProtocol){case 4:case 5:{if(!c.dataUrl)throw new Error("Missing data URL for file ".concat(i));try{let h=new XMLHttpRequest;if(c.dataProtocol==5?(h.open("GET",le(c==null?void 0:c.s3Config,c.dataUrl),!1),oe(h,c==null?void 0:c.s3Config,c.dataUrl,"GET")):h.open("GET",c.dataUrl,!1),h.responseType="arraybuffer",h.setRequestHeader("Range","bytes=".concat(u,"-").concat(u+o-1)),h.send(null),h.status==206||h.status==200&&o==h.response.byteLength&&u==0){let n=new Uint8Array(h.response,0,Math.min(h.response.byteLength,o));return r.HEAPU8.set(n,l),n.byteLength}else if(h.status==200){console.warn("Range request for ".concat(c.dataUrl," did not return a partial response: ").concat(h.status,' "').concat(h.statusText,'"'));let n=new Uint8Array(h.response,u,Math.min(h.response.byteLength-u,o));return r.HEAPU8.set(n,l),n.byteLength}else throw new Error("Range request for ".concat(c.dataUrl," did returned non-success status: ").concat(h.status,' "').concat(h.statusText,'"'))}catch(h){throw console.log(h),new Error("Range request for ".concat(c.dataUrl," failed with error: ").concat(h,'"'))}}case 2:{let h=(f=T._files)==null?void 0:f.get(c.fileName);if(!h)throw new Error("No HTML5 file registered with name: ".concat(c.fileName));let n=h.slice(u,u+o),v=new Uint8Array(new FileReaderSync().readAsArrayBuffer(n));return r.HEAPU8.set(v,l),v.byteLength}case 3:{let h=(_=T._files)==null?void 0:_.get(c.fileName);if(!h)throw new Error("No OPFS access handle registered with name: ".concat(c.fileName));let n=r.HEAPU8.subarray(l,l+o);return h.read(n,{at:u})}}return 0}catch(c){return console.log(c),ie(r,c.toString()),0}},writeFile:(r,i,l,o,u)=>{var _;let f=T.getFileInfo(r,i);switch(f==null?void 0:f.dataProtocol){case 4:return ie(r,"Cannot write to HTTP file"),0;case 5:{let c=r.HEAPU8.subarray(l,l+o),h=new XMLHttpRequest;return h.open("PUT",le(f==null?void 0:f.s3Config,f.dataUrl),!1),oe(h,f==null?void 0:f.s3Config,f.dataUrl,"PUT","",c),h.send(c),h.status!==200?(ie(r,"Failed writing file: HTTP "+h.status),0):o}case 2:return ie(r,"cannot write using the html5 file reader api"),0;case 3:{let c=(_=T._files)==null?void 0:_.get(f.fileName);if(!c)throw new Error("No OPFS access handle registered with name: ".concat(f.fileName));let h=r.HEAPU8.subarray(l,l+o);return c.write(h,{at:u})}}return 0},getLastFileModificationTime:(r,i)=>{var o;let l=T.getFileInfo(r,i);switch(l==null?void 0:l.dataProtocol){case 2:{if(!((o=T._files)==null?void 0:o.get(l.fileName)))throw Error("No handle available for file: ".concat(l.fileName));return 0}case 4:case 5:return new Date().getTime()}return 0},checkDirectory:(r,i,l)=>{let o=ue(r,i,l);return console.log("checkDirectory: ".concat(o)),!1},createDirectory:(r,i,l)=>{let o=ue(r,i,l);console.log("createDirectory: ".concat(o))},removeDirectory:(r,i,l)=>{let o=ue(r,i,l);console.log("removeDirectory: ".concat(o))},listDirectoryEntries:(r,i,l)=>{let o=ue(r,i,l);return console.log("listDirectoryEntries: ".concat(o)),!1},moveFile:(r,i,l,o,u)=>{var h,n;let f=ue(r,i,l),_=ue(r,o,u),c=(h=T._files)==null?void 0:h.get(f);c!==void 0&&(T._files.delete(c),T._files.set(_,c));for(let[v,U]of((n=T._fileInfoCache)==null?void 0:n.entries())||[])if(U.dataUrl==f){T._fileInfoCache.delete(v);break}return!0},removeFile:(r,i,l)=>{},callScalarUDF:(r,i,l,o,u,f,_)=>{Sn(T,r,i,l,o,u,f,_)}};globalThis.DUCKDB_RUNTIME={};for(let r of Object.getOwnPropertyNames(T))r!="constructor"&&(globalThis.DUCKDB_RUNTIME[r]=Object.getOwnPropertyDescriptor(T,r).value);globalThis.onmessage=r=>{if(r.data.cmd==="load"){let i=dn();i.wasmModule=r.data.wasmModule,i.wasmMemory=r.data.wasmMemory,i.buffer=i.wasmMemory.buffer,i.ENVIRONMENT_IS_PTHREAD=!0,(0,Dn.default)(i).then(function(l){hn(l)})}else if(r.data.cmd==="registerFileHandle")globalThis.DUCKDB_RUNTIME._files=globalThis.DUCKDB_RUNTIME._files||new Map,globalThis.DUCKDB_RUNTIME._files.set(r.data.fileName,r.data.fileHandle);else if(r.data.cmd==="dropFileHandle")globalThis.DUCKDB_RUNTIME._files=globalThis.DUCKDB_RUNTIME._files||new Map,globalThis.DUCKDB_RUNTIME._files.delete(r.data.fileName);else if(r.data.cmd==="registerUDFFunction")globalThis.DUCKDB_RUNTIME._udfFunctions=globalThis.DUCKDB_RUNTIME._files||new Map,globalThis.DUCKDB_RUNTIME._udfFunctions.set(r.data.udf.name,r.data.udf);else if(r.data.cmd==="dropUDFFunctions"){globalThis.DUCKDB_RUNTIME._udfFunctions=globalThis.DUCKDB_RUNTIME._files||new Map;for(let i of globalThis.DUCKDB_RUNTIME._udfFunctions.keys())globalThis.DUCKDB_RUNTIME._udfFunctions.get(i).connection_id==r.data.connectionId&&globalThis.DUCKDB_RUNTIME._udfFunctions.delete(i)}else wr(r)};})();
/*! Bundled license information:

js-sha256/src/sha256.js:
  (**
   * [js-sha256]{@link https://github.com/emn178/js-sha256}
   *
   * @version 0.9.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2014-2017
   * @license MIT
   *)
*/
//# sourceMappingURL=data:application/json;base64,
