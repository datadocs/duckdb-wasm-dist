"use strict";(()=>{var Eo=Object.create;var Dt=Object.defineProperty;var So=Object.getOwnPropertyDescriptor;var ko=Object.getOwnPropertyNames;var Ao=Object.getPrototypeOf,Fo=Object.prototype.hasOwnProperty;var at=(r=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(r,{get:(a,u)=>(typeof require<"u"?require:a)[u]}):r)(function(r){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+r+'" is not supported')});var Co=(r,a)=>()=>(r&&(a=r(r=0)),a);var Mt=(r,a)=>()=>(a||r((a={exports:{}}).exports,a),a.exports),To=(r,a)=>{for(var u in a)Dt(r,u,{get:a[u],enumerable:!0})},Ro=(r,a,u,l)=>{if(a&&typeof a=="object"||typeof a=="function")for(let s of ko(a))!Fo.call(r,s)&&s!==u&&Dt(r,s,{get:()=>a[s],enumerable:!(l=So(a,s))||l.enumerable});return r};var ot=(r,a,u)=>(u=r!=null?Eo(Ao(r)):{},Ro(a||!r||!r.__esModule?Dt(u,"default",{value:r,enumerable:!0}):u,r));var In=Mt(()=>{});var Ln=Mt(()=>{});var Hn={};To(Hn,{default:()=>jt});var $e,xo,jt,It=Co(()=>{"use strict";$e={},xo=(()=>{var r=$e.url;return async function(a={}){function u(){return z.buffer!=he.buffer&&be(),he}function l(){return z.buffer!=he.buffer&&be(),qt}function s(){return z.buffer!=he.buffer&&be(),Vt}function c(){return z.buffer!=he.buffer&&be(),Jt}function f(){return z.buffer!=he.buffer&&be(),Qt}function _(){return z.buffer!=he.buffer&&be(),Zt}function p(){return z.buffer!=he.buffer&&be(),er}function A(){return z.buffer!=he.buffer&&be(),tr}var i=typeof a<"u"?a:{},U,N;i.ready=new Promise((e,t)=>{U=e,N=t}),["_main","_malloc","_free","_duckdb_web_clear_response","_duckdb_web_collect_file_stats","_duckdb_web_connect","_duckdb_web_copy_file_to_buffer","_duckdb_web_copy_file_to_path","_duckdb_web_disconnect","_duckdb_web_export_file_stats","_duckdb_web_fail_with","_duckdb_web_flush_file","_duckdb_web_flush_files","_duckdb_web_fs_drop_file","_duckdb_web_fs_drop_files","_duckdb_web_fs_get_file_info_by_id","_duckdb_web_fs_get_file_info_by_name","_duckdb_web_fs_glob_add_path","_duckdb_web_fs_glob_file_infos","_duckdb_web_fs_register_file_buffer","_duckdb_web_fs_register_file_url","_duckdb_web_get_feature_flags","_duckdb_web_get_global_file_info","_duckdb_web_get_tablenames","_duckdb_web_get_version","_duckdb_web_insert_arrow_from_ipc_stream","_duckdb_web_insert_csv_from_path","_duckdb_web_insert_json_from_path","_duckdb_web_open","_duckdb_web_pending_query_cancel","_duckdb_web_pending_query_poll","_duckdb_web_pending_query_start","_duckdb_web_prepared_close","_duckdb_web_prepared_create","_duckdb_web_prepared_run","_duckdb_web_prepared_send","_duckdb_web_query_fetch_results","_duckdb_web_query_run","_duckdb_web_reset","_duckdb_web_tokenize","_duckdb_web_udf_scalar_create","__emscripten_thread_init","__emscripten_thread_exit","__emscripten_thread_crashed","__emscripten_thread_mailbox_await","__emscripten_tls_init","_pthread_self","checkMailbox","establishStackSpace","invokeEntryPoint","PThread","getExceptionMessage","___get_exception_message","___cpp_exception","___cxa_increment_exception_refcount","___cxa_decrement_exception_refcount","___thrown_object_from_unwind_exception","_fflush","__emscripten_check_mailbox","onRuntimeInitialized"].forEach(e=>{Object.getOwnPropertyDescriptor(i.ready,e)||Object.defineProperty(i.ready,e,{get:()=>v("You are getting "+e+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"),set:()=>v("You are setting "+e+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")})});var x=Object.assign({},i),q=[],te="./this.program",re=(e,t)=>{throw t},oe=typeof window=="object",Q=typeof importScripts=="function",O=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",De=!oe&&!O&&!Q;if(i.ENVIRONMENT)throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");var S=i.ENVIRONMENT_IS_PTHREAD||!1,ne="";function Oe(e){return i.locateFile?i.locateFile(e,ne):ne+e}var we,D,X,ae;if(O){throw typeof process>"u"||process.release,new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");var ie=process.versions.node,Y=ie.split(".").slice(0,3);Y=Y[0]*1e4+Y[1]*100+Y[2].split("-")[0]*1;var Z=101900;if(Y<101900)throw new Error("This emscripten-generated code requires node v10.19.19.0 (detected v"+ie+")");let{createRequire:e}=await Promise.resolve().then(()=>ot(at("module")));var j=e($e.url),J=j("fs"),Ee=j("path");Q?ne=Ee.dirname(ne)+"/":ne=j("url").fileURLToPath(new URL("./",$e.url)),we=(n,o)=>(n=ft(n)?new URL(n):Ee.normalize(n),J.readFileSync(n,o?void 0:"utf8")),X=n=>{var o=we(n,!0);return o.buffer||(o=new Uint8Array(o)),w(o.buffer),o},D=(n,o,b,m=!0)=>{n=ft(n)?new URL(n):Ee.normalize(n),J.readFile(n,m?void 0:"utf8",(d,y)=>{d?b(d):o(m?y.buffer:y)})},!i.thisProgram&&process.argv.length>1&&(te=process.argv[1].replace(/\\/g,"/")),q=process.argv.slice(2),re=(n,o)=>{throw process.exitCode=n,o},i.inspect=()=>"[Emscripten Module object]";let t;try{t=j("worker_threads")}catch(n){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),n}global.Worker=t.Worker}else if(De){if(typeof process=="object"&&typeof j=="function"||typeof window=="object"||typeof importScripts=="function")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");typeof read<"u"&&(we=e=>read(e)),X=e=>{let t;return typeof readbuffer=="function"?new Uint8Array(readbuffer(e)):(t=read(e,"binary"),w(typeof t=="object"),t)},D=(e,t,n)=>{setTimeout(()=>t(X(e)),0)},typeof clearTimeout>"u"&&(globalThis.clearTimeout=e=>{}),typeof scriptArgs<"u"?q=scriptArgs:typeof arguments<"u"&&(q=arguments),typeof quit=="function"&&(re=(e,t)=>{throw setTimeout(()=>{if(!(t instanceof Ve)){let n=t;t&&typeof t=="object"&&t.stack&&(n=[t,t.stack]),E(`exiting due to exception: ${n}`)}quit(e)}),t}),typeof print<"u"&&(typeof console>"u"&&(console={}),console.log=print,console.warn=console.error=typeof printErr<"u"?printErr:print)}else if(oe||Q){if(Q?ne=self.location.href:typeof document<"u"&&document.currentScript&&(ne=document.currentScript.src),r&&(ne=r),ne.indexOf("blob:")!==0?ne=ne.substr(0,ne.replace(/[?#].*/,"").lastIndexOf("/")+1):ne="",!(typeof window=="object"||typeof importScripts=="function"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");O||(we=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),t.responseText},Q&&(X=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),D=(e,t,n)=>{var o=new XMLHttpRequest;o.open("GET",e,!0),o.responseType="arraybuffer",o.onload=()=>{if(o.status==200||o.status==0&&o.response){t(o.response);return}n()},o.onerror=n,o.send(null)}),ae=e=>document.title=e}else throw new Error("environment detection error");O&&typeof performance>"u"&&(global.performance=j("perf_hooks").performance);var zt=console.log.bind(console),Kt=console.error.bind(console);O&&(zt=(...e)=>J.writeSync(1,e.join(" ")+`
`),Kt=(...e)=>J.writeSync(2,e.join(" ")+`
`));var Pe=i.print||zt,E=i.printErr||Kt;Object.assign(i,x),x=null,eo(),i.arguments&&(q=i.arguments),pe("arguments","arguments_"),i.thisProgram&&(te=i.thisProgram),pe("thisProgram","thisProgram"),i.quit&&(re=i.quit),pe("quit","quit_"),w(typeof i.memoryInitializerPrefixURL>"u","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"),w(typeof i.pthreadMainPrefixURL>"u","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"),w(typeof i.cdInitializerPrefixURL>"u","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"),w(typeof i.filePackagePrefixURL>"u","Module.filePackagePrefixURL option was removed, use Module.locateFile instead"),w(typeof i.read>"u","Module.read option was removed (modify read_ in JS)"),w(typeof i.readAsync>"u","Module.readAsync option was removed (modify readAsync in JS)"),w(typeof i.readBinary>"u","Module.readBinary option was removed (modify readBinary in JS)"),w(typeof i.setWindowTitle>"u","Module.setWindowTitle option was removed (modify setWindowTitle in JS)"),w(typeof i.TOTAL_MEMORY>"u","Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"),pe("read","read_"),pe("readAsync","readAsync"),pe("readBinary","readBinary"),pe("setWindowTitle","setWindowTitle");var Wo="IDBFS is no longer included by default; build with -lidbfs.js",Go="PROXYFS is no longer included by default; build with -lproxyfs.js",Xo="WORKERFS is no longer included by default; build with -lworkerfs.js",Yo="NODEFS is no longer included by default; build with -lnodefs.js";w(oe||Q||O,"Pthreads do not work in this environment yet (need Web Workers, or an alternative to them)"),w(!De,"shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");var Be;i.wasmBinary&&(Be=i.wasmBinary),pe("wasmBinary","wasmBinary");var $t=i.noExitRuntime||!0;pe("noExitRuntime","noExitRuntime"),typeof WebAssembly!="object"&&v("no native wasm support detected");var z,ut,Me=!1,Ce;function w(e,t){e||v("Assertion failed"+(t?": "+t:""))}var zo,he,qt,Vt,Jt,Qt,Zt,er,tr;function be(){var e=z.buffer;i.HEAP8=he=new Int8Array(e),i.HEAP16=Vt=new Int16Array(e),i.HEAP32=Qt=new Int32Array(e),i.HEAPU8=qt=new Uint8Array(e),i.HEAPU16=Jt=new Uint16Array(e),i.HEAPU32=Zt=new Uint32Array(e),i.HEAPF32=er=new Float32Array(e),i.HEAPF64=tr=new Float64Array(e)}w(!i.STACK_SIZE,"STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time"),w(typeof Int32Array<"u"&&typeof Float64Array<"u"&&Int32Array.prototype.subarray!=null&&Int32Array.prototype.set!=null,"JS engine does not provide full typed array support");var Ne=i.INITIAL_MEMORY||16777216;if(pe("INITIAL_MEMORY","INITIAL_MEMORY"),w(Ne>=65536,"INITIAL_MEMORY should be larger than STACK_SIZE, was "+Ne+"! (STACK_SIZE="+65536+")"),S)z=i.wasmMemory;else if(i.wasmMemory)z=i.wasmMemory;else if(z=new WebAssembly.Memory({initial:Ne/65536,maximum:65536,shared:!0}),!(z.buffer instanceof SharedArrayBuffer))throw E("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),O&&E("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");be(),Ne=z.buffer.byteLength,w(Ne%65536===0);var qe;function rr(){var e=Rt();w((e&3)==0),e==0&&(e+=4),_()[e>>>2]=34821223,_()[e+4>>>2]=2310721022,_()[0]=1668509029}function je(){if(!Me){var e=Rt();e==0&&(e+=4);var t=_()[e>>>2],n=_()[e+4>>>2];(t!=34821223||n!=2310721022)&&v(`Stack overflow! Stack cookie has been overwritten at ${Re(e)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${Re(n)} ${Re(t)}`),_()[0]!=1668509029&&v("Runtime error: The application has corrupted its heap memory area (address zero)!")}}(function(){var e=new Int16Array(1),t=new Int8Array(e.buffer);if(e[0]=25459,t[0]!==115||t[1]!==99)throw"Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)"})();var _t=[],nr=[],ir=[],Ko=[],ar=[],We=!1,ct=0;function Ge(){return $t||ct>0}function $n(){if(w(!S),i.preRun)for(typeof i.preRun=="function"&&(i.preRun=[i.preRun]);i.preRun.length;)sr(i.preRun.shift());Je(_t)}function or(){w(!We),We=!0,!S&&(je(),Je(nr))}function qn(){je(),!S&&Je(ir)}function Vn(){if(je(),!S){if(i.postRun)for(typeof i.postRun=="function"&&(i.postRun=[i.postRun]);i.postRun.length;)Qn(i.postRun.shift());Je(ar)}}function sr(e){_t.unshift(e)}function Jn(e){nr.unshift(e)}function $o(e){ir.unshift(e)}function qo(e){}function Qn(e){ar.unshift(e)}w(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),w(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),w(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),w(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var Se=0,Te=null,Xe=null,Ie={};function Vo(e){for(var t=e;;){if(!Ie[e])return e;e=t+Math.random()}}function lr(e){Se++,i.monitorRunDependencies&&i.monitorRunDependencies(Se),e?(w(!Ie[e]),Ie[e]=1,Te===null&&typeof setInterval<"u"&&(Te=setInterval(()=>{if(Me){clearInterval(Te),Te=null;return}var t=!1;for(var n in Ie)t||(t=!0,E("still waiting on run dependencies:")),E("dependency: "+n);t&&E("(end of list)")},1e4))):E("warning: run dependency added without ID")}function ur(e){if(Se--,i.monitorRunDependencies&&i.monitorRunDependencies(Se),e?(w(Ie[e]),delete Ie[e]):E("warning: run dependency removed without ID"),Se==0&&(Te!==null&&(clearInterval(Te),Te=null),Xe)){var t=Xe;Xe=null,t()}}function v(e){i.onAbort&&i.onAbort(e),e="Aborted("+e+")",E(e),Me=!0,Ce=1,We&&Cn();var t=new WebAssembly.RuntimeError(e);throw N(t),t}var Zn="data:application/octet-stream;base64,";function _r(e){return e.startsWith(Zn)}function ft(e){return e.startsWith("file://")}function h(e,t){return function(){var n=e,o=t;return t||(o=i.asm),w(We,"native function `"+n+"` called before runtime initialization"),o[e]||w(o[e],"exported native function `"+n+"` not found"),o[e].apply(null,arguments)}}var ge;i.locateFile?(ge="./duckdb-coi.wasm",_r(ge)||(ge=Oe(ge))):ge=new URL("./duckdb-coi.wasm",$e.url).href;function cr(e){try{if(e==ge&&Be)return new Uint8Array(Be);if(X)return X(e);throw"both async and sync fetching of the wasm failed"}catch(t){v(t)}}function ei(e){return!Be&&(oe||Q)&&typeof fetch=="function"?fetch(e,{credentials:"same-origin"}).then(t=>{if(!t.ok)throw"failed to load wasm binary file at '"+e+"'";return t.arrayBuffer()}).catch(()=>cr(e)):Promise.resolve().then(()=>cr(e))}function fr(e,t,n){return ei(e).then(o=>WebAssembly.instantiate(o,t)).then(o=>o).then(n,o=>{E("failed to asynchronously prepare wasm: "+o),ft(ge)&&E("warning: Loading from a file URI ("+ge+") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing"),v(o)})}function ti(e,t,n,o){return!e&&typeof WebAssembly.instantiateStreaming=="function"&&!_r(t)&&!O&&typeof fetch=="function"?fetch(t,{credentials:"same-origin"}).then(b=>{var m=WebAssembly.instantiateStreaming(b,n);return m.then(o,function(d){return E("wasm streaming compile failed: "+d),E("falling back to ArrayBuffer instantiation"),fr(t,n,o)})}):fr(t,n,o)}function ri(){var e={env:En,wasi_snapshot_preview1:En};function t(b,m){var d=b.exports;return i.asm=d,fi(i.asm._emscripten_tls_init),qe=i.asm.__indirect_function_table,w(qe,"table not found in wasm exports"),Jn(i.asm.__wasm_call_ctors),ut=m,ur("wasm-instantiate"),d}lr("wasm-instantiate");var n=i;function o(b){w(i===n,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"),n=null,t(b.instance,b.module)}if(i.instantiateWasm)try{return i.instantiateWasm(e,t)}catch(b){E("Module.instantiateWasm callback failed with error: "+b),N(b)}return ti(Be,ge,e,o).catch(N),{}}var se,Le;function pe(e,t){Object.getOwnPropertyDescriptor(i,e)||Object.defineProperty(i,e,{configurable:!0,get:function(){v("Module."+e+" has been replaced with plain "+t+" (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}})}function ni(e){Object.getOwnPropertyDescriptor(i,e)&&v("`Module."+e+"` was supplied but `"+e+"` not included in INCOMING_MODULE_JS_API")}function dr(e){return e==="FS_createPath"||e==="FS_createDataFile"||e==="FS_createPreloadedFile"||e==="FS_unlink"||e==="addRunDependency"||e==="FS_createLazyFile"||e==="FS_createDevice"||e==="removeRunDependency"}function ii(e,t){typeof globalThis<"u"&&Object.defineProperty(globalThis,e,{configurable:!0,get:function(){ce("`"+e+"` is not longer defined by emscripten. "+t)}})}ii("buffer","Please use HEAP8.buffer or wasmMemory.buffer");function ai(e){typeof globalThis<"u"&&!Object.getOwnPropertyDescriptor(globalThis,e)&&Object.defineProperty(globalThis,e,{configurable:!0,get:function(){var t="`"+e+"` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line",n=e;n.startsWith("_")||(n="$"+e),t+=" (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE="+n+")",dr(e)&&(t+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),ce(t)}}),hr(e)}function hr(e){Object.getOwnPropertyDescriptor(i,e)||Object.defineProperty(i,e,{configurable:!0,get:function(){var t="'"+e+"' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";dr(e)&&(t+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),v(t)}})}function br(e){O?J.writeSync(2,Array.from(arguments).join(" ")+`
`):console.warn.apply(console,arguments)}function Ve(e){this.name="ExitStatus",this.message=`Program terminated with exit(${e})`,this.status=e}function dt(e){e.terminate(),e.onmessage=t=>{var n=t.data.cmd;E('received "'+n+'" command from terminated worker: '+e.workerID)}}function oi(e){w(!S,"Internal Error! killThread() can only ever be called from main application thread!"),w(e,"Internal Error! Null pthread_ptr in killThread!");var t=T.pthreads[e];delete T.pthreads[e],dt(t),kn(e),T.runningWorkers.splice(T.runningWorkers.indexOf(t),1),t.pthread_ptr=0}function si(e){w(!S,"Internal Error! cancelThread() can only ever be called from main application thread!"),w(e,"Internal Error! Null pthread_ptr in cancelThread!");var t=T.pthreads[e];t.postMessage({cmd:"cancel"})}function pr(e){w(!S,"Internal Error! cleanupThread() can only ever be called from main application thread!"),w(e,"Internal Error! Null pthread_ptr in cleanupThread!");var t=T.pthreads[e];w(t),T.returnWorkerToPool(t)}function mr(e,t){return l().fill(0,e,e+t),e}function yr(e){w(!S,"Internal Error! spawnThread() can only ever be called from main application thread!"),w(e.pthread_ptr,"Internal error, no pthread ptr!");var t=T.getNewWorker();if(!t)return 6;w(!t.pthread_ptr,"Internal error!"),T.runningWorkers.push(t),T.pthreads[e.pthread_ptr]=t,t.pthread_ptr=e.pthread_ptr;var n={cmd:"run",start_routine:e.startRoutine,arg:e.arg,pthread_ptr:e.pthread_ptr};return O&&t.unref(),t.postMessage(n,e.transferList),0}var gr=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function vr(e,t,n){t>>>=0;for(var o=t+n,b=t;e[b]&&!(b>=o);)++b;if(b-t>16&&e.buffer&&gr)return gr.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,b):e.subarray(t,b));for(var m="";t<b;){var d=e[t++];if(!(d&128)){m+=String.fromCharCode(d);continue}var y=e[t++]&63;if((d&224)==192){m+=String.fromCharCode((d&31)<<6|y);continue}var k=e[t++]&63;if((d&240)==224?d=(d&15)<<12|y<<6|k:((d&248)!=240&&ce("Invalid UTF-8 leading byte "+Re(d)+" encountered when deserializing a UTF-8 string in wasm memory to a JS string!"),d=(d&7)<<18|y<<12|k<<6|e[t++]&63),d<65536)m+=String.fromCharCode(d);else{var F=d-65536;m+=String.fromCharCode(55296|F>>10,56320|F&1023)}}return m}function le(e,t){return w(typeof e=="number"),e>>>=0,e?vr(l(),e,t):""}var ke={varargs:void 0,get:function(){w(ke.varargs!=null),ke.varargs+=4;var e=f()[ke.varargs-4>>>2];return e},getStr:function(e){var t=le(e);return t}};function wr(e){if(S)return M(1,1,e);Ce=e,Ge()||(T.terminateAllThreads(),i.onExit&&i.onExit(e),Me=!0),re(e,new Ve(e))}function Er(e,t){if(Ce=e,yo(),S)throw w(!t),kr(e),"unwind";if(Ge()&&!t){var n=`program exited (with status: ${e}), but keepRuntimeAlive() is set (counter=${ct}) due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)`;N(n),E(n)}wr(e)}var ht=Er;function Re(e){return w(typeof e=="number"),"0x"+e.toString(16).padStart(8,"0")}function bt(e){if(e instanceof Ve||e=="unwind")return Ce;je(),e instanceof WebAssembly.RuntimeError&&xn()<=0&&E("Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to 65536)"),re(1,e)}var T={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],pthreads:{},nextWorkerID:1,debugInit:function(){function e(){var n=0;return We&&typeof He<"u"&&(n=He()),"w:"+(i.workerID||0)+",t:"+Re(n)+": "}var t=br;br=n=>t(e()+n)},init:function(){T.debugInit(),S?T.initWorker():T.initMainThread()},initMainThread:function(){for(var e=4;e--;)T.allocateUnusedWorker();sr(()=>{lr("loading-workers"),T.loadWasmModuleToAllWorkers(()=>ur("loading-workers"))})},initWorker:function(){$t=!1},setExitStatus:function(e){Ce=e},terminateAllThreads__deps:["$terminateWorker"],terminateAllThreads:function(){w(!S,"Internal Error! terminateAllThreads() can only ever be called from main application thread!");for(var e of T.runningWorkers)dt(e);for(var e of T.unusedWorkers)dt(e);T.unusedWorkers=[],T.runningWorkers=[],T.pthreads=[]},returnWorkerToPool:function(e){var t=e.pthread_ptr;delete T.pthreads[t],T.unusedWorkers.push(e),T.runningWorkers.splice(T.runningWorkers.indexOf(e),1),e.pthread_ptr=0,kn(t)},receiveObjectTransfer:function(e){},threadInitTLS:function(){T.tlsInitFunctions.forEach(e=>e())},loadWasmModuleToWorker:e=>new Promise(t=>{e.onmessage=m=>{var d=m.data,y=d.cmd;if(e.pthread_ptr&&(T.currentProxiedOperationCallerThread=e.pthread_ptr),d.targetThread&&d.targetThread!=He()){var k=T.pthreads[d.targetThread];k?k.postMessage(d,d.transferList):E('Internal error! Worker sent a message "'+y+'" to target pthread '+d.targetThread+", but that thread no longer exists!"),T.currentProxiedOperationCallerThread=void 0;return}y==="checkMailbox"?rt():y==="spawnThread"?yr(d):y==="cleanupThread"?pr(d.thread):y==="killThread"?oi(d.thread):y==="cancelThread"?si(d.thread):y==="loaded"?(e.loaded=!0,O&&!e.pthread_ptr&&e.unref(),t(e)):y==="print"?Pe("Thread "+d.threadId+": "+d.text):y==="printErr"?E("Thread "+d.threadId+": "+d.text):y==="alert"?alert("Thread "+d.threadId+": "+d.text):d.target==="setimmediate"?e.postMessage(d):y==="callHandler"?i[d.handler](...d.args):y&&E("worker sent an unknown command "+y),T.currentProxiedOperationCallerThread=void 0},e.onerror=m=>{var d="worker sent an error!";throw e.pthread_ptr&&(d="Pthread "+Re(e.pthread_ptr)+" sent an error!"),E(d+" "+m.filename+":"+m.lineno+": "+m.message),m},O&&(e.on("message",function(m){e.onmessage({data:m})}),e.on("error",function(m){e.onerror(m)})),w(z instanceof WebAssembly.Memory,"WebAssembly memory should have been loaded by now!"),w(ut instanceof WebAssembly.Module,"WebAssembly Module should have been loaded by now!");var n=[],o=["onExit","onAbort","print","printErr"];for(var b of o)i.hasOwnProperty(b)&&n.push(b);e.workerID=T.nextWorkerID++,e.postMessage({cmd:"load",handlers:n,urlOrBlob:i.mainScriptUrlOrBlob,wasmMemory:z,wasmModule:ut,workerID:e.workerID})}),loadWasmModuleToAllWorkers:function(e){if(S)return e();Promise.all(T.unusedWorkers.map(T.loadWasmModuleToWorker)).then(e)},allocateUnusedWorker:function(){var e;if(!i.locateFile)e=new Worker(new URL("duckdb_wasm.worker.js",$e.url));else{var t=Oe("duckdb_wasm.worker.js");e=new Worker(t)}T.unusedWorkers.push(e)},getNewWorker:function(){return T.unusedWorkers.length==0&&(O||E("Tried to spawn a new thread, but the thread pool is exhausted.\nThis might result in a deadlock unless some threads eventually exit or the code explicitly breaks out to the event loop.\nIf you want to increase the pool size, use setting `-sPTHREAD_POOL_SIZE=...`.\nIf you want to throw an explicit error instead of the risk of deadlocking in those cases, use setting `-sPTHREAD_POOL_SIZE_STRICT=2`."),T.allocateUnusedWorker(),T.loadWasmModuleToWorker(T.unusedWorkers[0])),T.unusedWorkers.pop()}};i.PThread=T;function Je(e){for(;e.length>0;)e.shift()(i)}function Sr(){return i.asm.__cpp_exception}function pt(e){var t=e.getArg(Sr(),0);return co(t)}function Jo(e){var t=pt(e);uo(t)}function li(){var e=He(),t=f()[e+52>>>2],n=f()[e+56>>>2],o=t-n;w(t!=0),w(o!=0),w(t>o,"stackHigh must be higher then stackLow"),Rn(t,o),nt(t),rr()}i.establishStackSpace=li;function kr(e){if(S)return M(2,0,e);ht(e)}function Ar(e){var t=xt(),n=e();return nt(t),n}function ui(e){return Ar(function(){var t=Ue(4),n=Ue(4);fo(e,t,n);var o=_()[t>>>2],b=_()[n>>>2],m=le(o);Fn(o);var d;return b&&(d=le(b),Fn(b)),[m,d]})}function Fr(e){var t=pt(e);return ui(t)}i.getExceptionMessage=Fr;function Qo(e,t="i8"){switch(t.endsWith("*")&&(t="*"),t){case"i1":return u()[e>>>0];case"i8":return u()[e>>>0];case"i16":return s()[e>>>1];case"i32":return f()[e>>>2];case"i64":v("to do getValue(i64) use WASM_BIGINT");case"float":return p()[e>>>2];case"double":return A()[e>>>3];case"*":return _()[e>>>2];default:v(`invalid type for getValue: ${t}`)}}function Zo(e){var t=pt(e);_o(t)}var Qe=[];function _i(e){var t=Qe[e];return t||(e>=Qe.length&&(Qe.length=e+1),Qe[e]=t=qe.get(e)),w(qe.get(e)==t,"JavaScript-side Wasm function table mirror is out of date!"),t}function ci(e,t){var n=_i(e)(t);je(),Ge()?T.setExitStatus(n):An(n)}i.invokeEntryPoint=ci;function fi(e){T.tlsInitFunctions.push(e)}function es(e,t,n="i8"){switch(n.endsWith("*")&&(n="*"),n){case"i1":u()[e>>>0]=t;break;case"i8":u()[e>>>0]=t;break;case"i16":s()[e>>>1]=t;break;case"i32":f()[e>>>2]=t;break;case"i64":v("to do setValue(i64) use WASM_BIGINT");case"float":p()[e>>>2]=t;break;case"double":A()[e>>>3]=t;break;case"*":_()[e>>>2]=t;break;default:v(`invalid type for setValue: ${n}`)}}function ce(e){ce.shown||(ce.shown={}),ce.shown[e]||(ce.shown[e]=1,O&&(e="warning: "+e),E(e))}function di(){E("missing function: XML_GetBuffer"),v(-1)}function hi(){E("missing function: XML_GetErrorCode"),v(-1)}function bi(){E("missing function: XML_Parse"),v(-1)}function pi(){E("missing function: XML_ParseBuffer"),v(-1)}function mi(){E("missing function: XML_ParserCreate"),v(-1)}function yi(){E("missing function: XML_ParserFree"),v(-1)}function gi(){E("missing function: XML_ResumeParser"),v(-1)}function vi(){E("missing function: XML_SetCharacterDataHandler"),v(-1)}function wi(){E("missing function: XML_SetElementHandler"),v(-1)}function Ei(){E("missing function: XML_SetUserData"),v(-1)}function Si(){E("missing function: XML_StopParser"),v(-1)}function ki(e,t,n,o){v(`Assertion failed: ${le(e)}, at: `+[t?le(t):"unknown filename",n,o?le(o):"unknown function"])}var Cr="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function Ai(e,t,n){v(Cr)}function Fi(e){no(e,!Q,1,!oe,65536),T.threadInitTLS()}function Ci(e){S?postMessage({cmd:"cleanupThread",thread:e}):pr(e)}function Tr(e,t,n,o){return S?M(3,1,e,t,n,o):Rr(e,t,n,o)}function Rr(e,t,n,o){if(typeof SharedArrayBuffer>"u")return E("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var b=[],m=0;if(S&&(b.length===0||m))return Tr(e,t,n,o);if(m)return m;var d={startRoutine:n,pthread_ptr:e,arg:o,transferList:b};return S?(d.cmd="spawnThread",postMessage(d,b),0):yr(d)}function xr(e,t,n,o,b){if(S)return M(4,1,e,t,n,o,b);w(e<=64,"nfds must be less than or equal to 64"),w(!o,"exceptfds not supported");for(var m=0,d=t?f()[t>>>2]:0,y=t?f()[t+4>>>2]:0,k=n?f()[n>>>2]:0,F=n?f()[n+4>>>2]:0,R=o?f()[o>>>2]:0,W=o?f()[o+4>>>2]:0,L=0,_e=0,B=0,G=0,Ae=0,ve=0,g=(t?f()[t>>>2]:0)|(n?f()[n>>>2]:0)|(o?f()[o>>>2]:0),C=(t?f()[t+4>>>2]:0)|(n?f()[n+4>>>2]:0)|(o?f()[o+4>>>2]:0),$=function(go,vo,wo,jn){return go<32?vo&jn:wo&jn},H=0;H<e;H++){var V=1<<H%32;if(!!$(H,g,C,V)){var ee=ke.getStreamFromFD(H),xe=ke.DEFAULT_POLLMASK;ee.stream_ops.poll&&(xe=ee.stream_ops.poll(ee)),xe&1&&$(H,d,y,V)&&(H<32?L=L|V:_e=_e|V,m++),xe&4&&$(H,k,F,V)&&(H<32?B=B|V:G=G|V,m++),xe&2&&$(H,R,W,V)&&(H<32?Ae=Ae|V:ve=ve|V,m++)}}return t&&(f()[t>>>2]=L,f()[t+4>>>2]=_e),n&&(f()[n>>>2]=B,f()[n+4>>>2]=G),o&&(f()[o>>>2]=Ae,f()[o+4>>>2]=ve),m}function Ti(){E("missing function: $SOCKFS"),v(-1)}function Dr(){E("missing function: $FS"),v(-1)}function Ye(e){var t=Ti.getSocket(e);if(!t)throw new Dr.ErrnoError(8);return t}function ts(e){return f()[ro()>>>2]=e,e}var rs={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};function mt(e){return(e&255)+"."+(e>>8&255)+"."+(e>>16&255)+"."+(e>>24&255)}function Mr(e){var t="",n=0,o=0,b=0,m=0,d=0,y=0,k=[e[0]&65535,e[0]>>16,e[1]&65535,e[1]>>16,e[2]&65535,e[2]>>16,e[3]&65535,e[3]>>16],F=!0,R="";for(y=0;y<5;y++)if(k[y]!==0){F=!1;break}if(F){if(R=mt(k[6]|k[7]<<16),k[5]===-1)return t="::ffff:",t+=R,t;if(k[5]===0)return t="::",R==="0.0.0.0"&&(R=""),R==="0.0.0.1"&&(R="1"),t+=R,t}for(n=0;n<8;n++)k[n]===0&&(n-b>1&&(d=0),b=n,d++),d>o&&(o=d,m=n-o+1);for(n=0;n<8;n++){if(o>1&&k[n]===0&&n>=m&&n<m+o){n===m&&(t+=":",m===0&&(t+=":"));continue}t+=Number(Sn(k[n]&65535)).toString(16),t+=n<7?":":""}return t}function jr(e,t){var n=s()[e>>>1],o=Sn(c()[e+2>>>1]),b;switch(n){case 2:if(t!==16)return{errno:28};b=f()[e+4>>>2],b=mt(b);break;case 10:if(t!==28)return{errno:28};b=[f()[e+8>>>2],f()[e+12>>>2],f()[e+16>>>2],f()[e+20>>>2]],b=Mr(b);break;default:return{errno:5}}return{family:n,addr:b,port:o}}function Ze(e){for(var t=e.split("."),n=0;n<4;n++){var o=Number(t[n]);if(isNaN(o))return null;t[n]=o}return(t[0]|t[1]<<8|t[2]<<16|t[3]<<24)>>>0}function et(e){return parseInt(e)}function yt(e){var t,n,o,b,m,d=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,y=[];if(!d.test(e))return null;if(e==="::")return[0,0,0,0,0,0,0,0];for(e.startsWith("::")?e=e.replace("::","Z:"):e=e.replace("::",":Z:"),e.indexOf(".")>0?(e=e.replace(new RegExp("[.]","g"),":"),t=e.split(":"),t[t.length-4]=et(t[t.length-4])+et(t[t.length-3])*256,t[t.length-3]=et(t[t.length-2])+et(t[t.length-1])*256,t=t.slice(0,t.length-2)):t=e.split(":"),o=0,b=0,n=0;n<t.length;n++)if(typeof t[n]=="string")if(t[n]==="Z"){for(b=0;b<8-t.length+1;b++)y[n+b]=0;o=b-1}else y[n+o]=Ct(parseInt(t[n],16));else y[n+o]=t[n];return[y[1]<<16|y[0],y[3]<<16|y[2],y[5]<<16|y[4],y[7]<<16|y[6]]}var ue={address_map:{id:1,addrs:{},names:{}},lookup_name:function(e){var t=Ze(e);if(t!==null||(t=yt(e),t!==null))return e;var n;if(ue.address_map.addrs[e])n=ue.address_map.addrs[e];else{var o=ue.address_map.id++;w(o<65535,"exceeded max address mappings of 65535"),n="172.29."+(o&255)+"."+(o&65280),ue.address_map.names[n]=e,ue.address_map.addrs[e]=n}return n},lookup_addr:function(e){return ue.address_map.names[e]?ue.address_map.names[e]:null}};function Ir(e,t,n){if(n&&e===0)return null;var o=jr(e,t);if(o.errno)throw new Dr.ErrnoError(o.errno);return o.addr=ue.lookup_addr(o.addr)||o.addr,o}function Lr(e,t,n,o,b,m){if(S)return M(5,1,e,t,n,o,b,m);var d=Ye(e),y=Ir(t,n);return d.sock_ops.bind(d,y.addr,y.port),0}function Hr(e,t,n,o,b,m){if(S)return M(6,1,e,t,n,o,b,m);var d=Ye(e),y=Ir(t,n);return d.sock_ops.connect(d,y.addr,y.port),0}function Ur(e,t,n,o){if(S)return M(7,1,e,t,n,o);v("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Or(e,t,n){return S?M(8,1,e,t,n):(ke.varargs=n,0)}function Pr(e,t){if(S)return M(9,1,e,t);v("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function ns(e,t){return w(e==e>>>0||e==(e|0)),w(t===(t|0)),t+2097152>>>0<4194305-!!e?(e>>>0)+t*4294967296:NaN}function Br(e,t,n){if(S)return M(10,1,e,t,n);v("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Nr(e,t,n,o){if(n>>>=0,w(typeof e=="string"),!(o>0))return 0;for(var b=n,m=n+o-1,d=0;d<e.length;++d){var y=e.charCodeAt(d);if(y>=55296&&y<=57343){var k=e.charCodeAt(++d);y=65536+((y&1023)<<10)|k&1023}if(y<=127){if(n>=m)break;t[n++>>>0]=y}else if(y<=2047){if(n+1>=m)break;t[n++>>>0]=192|y>>6,t[n++>>>0]=128|y&63}else if(y<=65535){if(n+2>=m)break;t[n++>>>0]=224|y>>12,t[n++>>>0]=128|y>>6&63,t[n++>>>0]=128|y&63}else{if(n+3>=m)break;y>1114111&&ce("Invalid Unicode code point "+Re(y)+" encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF)."),t[n++>>>0]=240|y>>18,t[n++>>>0]=128|y>>12&63,t[n++>>>0]=128|y>>6&63,t[n++>>>0]=128|y&63}}return t[n>>>0]=0,n-b}function tt(e,t,n){return w(typeof n=="number","stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),Nr(e,l(),t,n)}function Wr(e,t,n){if(S)return M(11,1,e,t,n);v("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function gt(e,t,n,o,b){switch(t){case 2:n=Ze(n),mr(e,16),b&&(f()[b>>>2]=16),s()[e>>>1]=t,f()[e+4>>>2]=n,s()[e+2>>>1]=Ct(o);break;case 10:n=yt(n),mr(e,28),b&&(f()[b>>>2]=28),f()[e>>>2]=t,f()[e+8>>>2]=n[0],f()[e+12>>>2]=n[1],f()[e+16>>>2]=n[2],f()[e+20>>>2]=n[3],s()[e+2>>>1]=Ct(o);break;default:return 5}return 0}function Gr(e,t,n,o,b,m){if(S)return M(12,1,e,t,n,o,b,m);var d=Ye(e);if(!d.daddr)return-53;var y=gt(t,d.family,ue.lookup_name(d.daddr),d.dport,n);return w(!y),0}function Xr(e,t,n,o,b,m){if(S)return M(13,1,e,t,n,o,b,m);var d=Ye(e);return t===1&&n===4?(f()[o>>>2]=d.error,f()[b>>>2]=4,d.error=null,0):-50}function Yr(e,t,n){return S?M(14,1,e,t,n):(ke.varargs=n,0)}function zr(e,t){if(S)return M(15,1,e,t);v("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Kr(e,t,n){if(S)return M(16,1,e,t,n);v("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function $r(e,t,n,o){if(S)return M(17,1,e,t,n,o);v("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function qr(e,t,n,o){if(S)return M(18,1,e,t,n,o);ke.varargs=o,v("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Vr(e,t,n,o,b,m){if(S)return M(19,1,e,t,n,o,b,m);var d=Ye(e),y=d.sock_ops.recvmsg(d,n);if(!y)return 0;if(b){var k=gt(b,d.family,ue.lookup_name(y.addr),y.port,m);w(!k)}return l().set(y.buffer,t>>>0),y.buffer.byteLength}function Jr(e,t,n,o){if(S)return M(20,1,e,t,n,o);v("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Qr(e){if(S)return M(21,1,e);v("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Zr(e,t,n,o,b,m){if(S)return M(22,1,e,t,n,o,b,m);v("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function en(e,t,n){if(S)return M(23,1,e,t,n);v("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function tn(e,t){if(S)return M(24,1,e,t);v("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function rn(e,t,n){if(S)return M(25,1,e,t,n);v("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Ri(e){var t=new WebAssembly.Exception(Sr(),[e],{traceStack:!0});if(t.message=Fr(t),t.stack){var n=t.stack.split(`
`);n.splice(1,1),t.stack=n.join(`
`)}throw t}var xi=!0;function Di(){return xi}function Mi(){if(!Ge())try{S?An(Ce):ht(Ce)}catch(e){bt(e)}}function ji(e){if(Me){E("user callback triggered after runtime exited or application aborted.  Ignoring.");return}try{e(),Mi()}catch(t){bt(t)}}function vt(e){if(typeof Atomics.waitAsync=="function"){var t=Atomics.waitAsync(f(),e>>2,e);w(t.async),t.value.then(rt);var n=e+128;Atomics.store(f(),n>>2,1)}}i.__emscripten_thread_mailbox_await=vt;function rt(){var e=He();e&&(vt(e),ji(()=>oo()))}i.checkMailbox=rt;function Ii(e,t,n){if(e==t)setTimeout(()=>rt());else if(S)postMessage({targetThread:e,cmd:"checkMailbox"});else{var o=T.pthreads[e];if(!o){E("Cannot send message to thread with ID "+e+", unknown thread ID!");return}o.postMessage({cmd:"checkMailbox"})}}function Li(e,t,n){return E("emscripten_set_offscreencanvas_size: Build with -sOFFSCREENCANVAS_SUPPORT=1 to enable transferring canvases to pthreads."),-1}function Hi(e){O&&T.pthreads[e].ref()}function Ui(e){return _()[e>>>2]+f()[e+4>>>2]*4294967296}function ze(e){return e%4===0&&(e%100!==0||e%400===0)}var Oi=[0,31,60,91,121,152,182,213,244,274,305,335],Pi=[0,31,59,90,120,151,181,212,243,273,304,334];function Bi(e){var t=ze(e.getFullYear()),n=t?Oi:Pi,o=n[e.getMonth()]+e.getDate()-1;return o}function Ni(e,t){var n=new Date(Ui(e)*1e3);f()[t>>>2]=n.getSeconds(),f()[t+4>>>2]=n.getMinutes(),f()[t+8>>>2]=n.getHours(),f()[t+12>>>2]=n.getDate(),f()[t+16>>>2]=n.getMonth(),f()[t+20>>>2]=n.getFullYear()-1900,f()[t+24>>>2]=n.getDay();var o=Bi(n)|0;f()[t+28>>>2]=o,f()[t+36>>>2]=-(n.getTimezoneOffset()*60);var b=new Date(n.getFullYear(),0,1),m=new Date(n.getFullYear(),6,1).getTimezoneOffset(),d=b.getTimezoneOffset(),y=(m!=d&&n.getTimezoneOffset()==Math.min(d,m))|0;f()[t+32>>>2]=y}function wt(e){for(var t=0,n=0;n<e.length;++n){var o=e.charCodeAt(n);o<=127?t++:o<=2047?t+=2:o>=55296&&o<=57343?(t+=4,++n):t+=3}return t}function nn(e){var t=wt(e)+1,n=Tt(t);return n&&tt(e,n,t),n}function Wi(e,t,n){var o=new Date().getFullYear(),b=new Date(o,0,1),m=new Date(o,6,1),d=b.getTimezoneOffset(),y=m.getTimezoneOffset(),k=Math.max(d,y);_()[e>>>2]=k*60,f()[t>>>2]=Number(d!=y);function F(B){var G=B.toTimeString().match(/\(([A-Za-z ]+)\)$/);return G?G[1]:"GMT"}var R=F(b),W=F(m),L=nn(R),_e=nn(W);y<d?(_()[n>>>2]=L,_()[n+4>>>2]=_e):(_()[n>>>2]=_e,_()[n+4>>>2]=L)}function Gi(){v("native code called abort()")}function Xi(e,t){v(Cr)}function Yi(e,t){return globalThis.DUCKDB_RUNTIME.createDirectory(i,e,t)}function zi(e,t){return globalThis.DUCKDB_RUNTIME.checkDirectory(i,e,t)}function Ki(e,t){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(i,e,t)}function $i(e,t){return globalThis.DUCKDB_RUNTIME.removeDirectory(i,e,t)}function qi(e){return globalThis.DUCKDB_RUNTIME.closeFile(i,e)}function Vi(e,t){return globalThis.DUCKDB_RUNTIME.checkFile(i,e,t)}function Ji(e){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(i,e)}function Qi(e,t,n,o){return globalThis.DUCKDB_RUNTIME.moveFile(i,e,t,n,o)}function Zi(e,t){return globalThis.DUCKDB_RUNTIME.openFile(i,e,t)}function ea(e,t,n,o){return globalThis.DUCKDB_RUNTIME.readFile(i,e,t,n,o)}function ta(e,t){return globalThis.DUCKDB_RUNTIME.truncateFile(i,e,t)}function ra(e,t,n,o){return globalThis.DUCKDB_RUNTIME.writeFile(i,e,t,n,o)}function na(e){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(e)}function ia(e,t){return globalThis.DUCKDB_RUNTIME.glob(i,e,t)}function aa(e){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(i,e)}function oa(e,t,n,o,b,m){return globalThis.DUCKDB_RUNTIME.callScalarUDF(i,e,t,n,o,b,m)}function sa(){O||Q||ce("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread")}function la(e){w(typeof e=="number"),console.error(le(e))}function ua(){return Date.now()}function _a(){ct+=1}function ca(){throw _a(),"unwind"}function an(){return 4294901760}function fa(){return an()}var on;O&&(global.performance=j("perf_hooks").performance),on=()=>performance.timeOrigin+performance.now();function da(){return O?j("os").cpus().length:navigator.hardwareConcurrency}function M(e,t){var n=arguments.length-2,o=arguments,b=19;if(n>b)throw"proxyToMainThread: Too many arguments "+n+" to proxied function idx="+e+", maximum supported is "+b;return Ar(()=>{for(var m=n,d=Ue(m*8),y=d>>3,k=0;k<n;k++){var F=o[2+k];A()[y+k>>>0]=F}return ao(e,m,d,t)})}var Et=[];function ha(e,t,n){Et.length=t;for(var o=n>>3,b=0;b<t;b++)Et[b]=A()[o+b>>>0];var m=Za[e];return w(m.length==t,"Call args mismatch in emscripten_receive_on_main_thread_js"),m.apply(null,Et)}function ba(e){var t=z.buffer,n=e-t.byteLength+65535>>>16;try{return z.grow(n),be(),1}catch(o){E(`emscripten_realloc_buffer: Attempted to grow heap from ${t.byteLength} bytes to ${e} bytes, but got error: ${o}`)}}function pa(e){var t=l().length;if(e=e>>>0,e<=t)return!1;var n=an();if(e>n)return E(`Cannot enlarge memory, asked to go up to ${e} bytes, but the limit is ${n} bytes!`),!1;for(var o=(k,F)=>k+(F-k%F)%F,b=1;b<=4;b*=2){var m=t*(1+.2/b);m=Math.min(m,e+100663296);var d=Math.min(n,o(Math.max(e,m),65536)),y=ba(d);if(y)return!0}return E(`Failed to grow the heap from ${t} bytes to ${d} bytes, not enough memory!`),!1}var St={};function ma(){return te||"./this.program"}function Ke(){if(!Ke.strings){var e=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",t={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:e,_:ma()};for(var n in St)St[n]===void 0?delete t[n]:t[n]=St[n];var o=[];for(var n in t)o.push(`${n}=${t[n]}`);Ke.strings=o}return Ke.strings}function ya(e,t){for(var n=0;n<e.length;++n)w(e.charCodeAt(n)===(e.charCodeAt(n)&255)),u()[t++>>>0]=e.charCodeAt(n);u()[t>>>0]=0}function sn(e,t){if(S)return M(26,1,e,t);var n=0;return Ke().forEach(function(o,b){var m=t+n;_()[e+b*4>>>2]=m,ya(o,m),n+=o.length+1}),0}function ln(e,t){if(S)return M(27,1,e,t);var n=Ke();_()[e>>>2]=n.length;var o=0;return n.forEach(function(b){o+=b.length+1}),_()[t>>>2]=o,0}function un(e){if(S)return M(28,1,e);v("fd_close called without SYSCALLS_REQUIRE_FILESYSTEM")}function _n(e,t){if(S)return M(29,1,e,t);var n=0,o=0,b=0;{w(e==0||e==1||e==2);var m=2;e==0?n=2:(e==1||e==2)&&(n=64),b=1}return u()[t>>>0]=m,s()[t+2>>>1]=b,Le=[n>>>0,(se=n,+Math.abs(se)>=1?se>0?+Math.floor(se/4294967296)>>>0:~~+Math.ceil((se-+(~~se>>>0))/4294967296)>>>0:0)],f()[t+8>>>2]=Le[0],f()[t+12>>>2]=Le[1],Le=[o>>>0,(se=o,+Math.abs(se)>=1?se>0?+Math.floor(se/4294967296)>>>0:~~+Math.ceil((se-+(~~se>>>0))/4294967296)>>>0:0)],f()[t+16>>>2]=Le[0],f()[t+20>>>2]=Le[1],0}function cn(e,t,n,o,b,m){if(S)return M(30,1,e,t,n,o,b,m);v("fd_pread called without SYSCALLS_REQUIRE_FILESYSTEM")}function fn(e,t,n,o,b,m){if(S)return M(31,1,e,t,n,o,b,m);v("fd_pwrite called without SYSCALLS_REQUIRE_FILESYSTEM")}function dn(e,t,n,o){if(S)return M(32,1,e,t,n,o);v("fd_read called without SYSCALLS_REQUIRE_FILESYSTEM")}function hn(e,t,n,o,b){return S?M(33,1,e,t,n,o,b):70}function bn(e){if(S)return M(34,1,e);v("fd_sync called without SYSCALLS_REQUIRE_FILESYSTEM")}var kt=[null,[],[]];function At(e,t){var n=kt[e];w(n),t===0||t===10?((e===1?Pe:E)(vr(n,0)),n.length=0):n.push(t)}function ga(){io(0),kt[1].length&&At(1,10),kt[2].length&&At(2,10)}function pn(e,t,n,o){if(S)return M(35,1,e,t,n,o);for(var b=0,m=0;m<n;m++){var d=_()[t>>>2],y=_()[t+4>>>2];t+=8;for(var k=0;k<y;k++)At(e,l()[d+k>>>0]);b+=y}return _()[o>>>2]=b,0}function mn(e,t,n,o){if(S)return M(36,1,e,t,n,o);var b=[],m=null,d=0,y=0,k=0,F=0,R=0,W=0,L,_e;function B(G,Ae,ve,g,C,$){var H,V,ee,xe;return V=G===10?28:16,C=G===10?Mr(C):mt(C),H=Tt(V),xe=gt(H,G,C,$),w(!xe),ee=Tt(32),f()[ee+4>>>2]=G,f()[ee+8>>>2]=Ae,f()[ee+12>>>2]=ve,_()[ee+24>>>2]=g,_()[ee+20>>>2]=H,G===10?f()[ee+16>>>2]=28:f()[ee+16>>>2]=16,f()[ee+28>>>2]=0,ee}if(n&&(k=f()[n>>>2],F=f()[n+4>>>2],R=f()[n+8>>>2],W=f()[n+12>>>2]),R&&!W&&(W=R===2?17:6),!R&&W&&(R=W===17?2:1),W===0&&(W=6),R===0&&(R=1),!e&&!t)return-2;if(k&-1088||n!==0&&f()[n>>>2]&2&&!e)return-1;if(k&32)return-2;if(R!==0&&R!==1&&R!==2)return-7;if(F!==0&&F!==2&&F!==10)return-6;if(t&&(t=le(t),y=parseInt(t,10),isNaN(y)))return k&1024?-2:-8;if(!e)return F===0&&(F=2),(k&1)===0&&(F===2?d=Ft(2130706433):d=[0,0,0,1]),L=B(F,R,W,null,d,y),_()[o>>>2]=L,0;if(e=le(e),d=Ze(e),d!==null)if(F===0||F===2)F=2;else if(F===10&&k&8)d=[0,0,Ft(65535),d],F=10;else return-2;else if(d=yt(e),d!==null)if(F===0||F===10)F=10;else return-2;return d!=null?(L=B(F,R,W,e,d,y),_()[o>>>2]=L,0):k&4?-2:(e=ue.lookup_name(e),d=Ze(e),F===0?F=2:F===10&&(d=[0,0,Ft(65535),d]),L=B(F,R,W,null,d,y),_()[o>>>2]=L,0)}function va(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return o=>(o.set(crypto.getRandomValues(new Uint8Array(o.byteLength))),o);if(O)try{var e=j("crypto"),t=e.randomFillSync;if(t)return o=>e.randomFillSync(o);var n=e.randomBytes;return o=>(o.set(n(o.byteLength)),o)}catch(o){}v("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };")}function yn(e){return(yn=va())(e)}function wa(e,t){return yn(l().subarray(e>>>0,e+t>>>0)),0}function Ea(e,t,n,o,b,m,d){var y=jr(e,t);if(y.errno)return-6;var k=y.port,F=y.addr,R=!1;if(n&&o){var W;if(d&1||!(W=ue.lookup_addr(F))){if(d&8)return-2}else F=W;var L=tt(F,n,o);L+1>=o&&(R=!0)}if(b&&m){k=""+k;var L=tt(k,b,m);L+1>=m&&(R=!0)}return R?-12:0}function Sa(e,t){for(var n=0,o=0;o<=t;n+=e[o++]);return n}var gn=[31,29,31,30,31,30,31,31,30,31,30,31],vn=[31,28,31,30,31,30,31,31,30,31,30,31];function ka(e,t){for(var n=new Date(e.getTime());t>0;){var o=ze(n.getFullYear()),b=n.getMonth(),m=(o?gn:vn)[b];if(t>m-n.getDate())t-=m-n.getDate()+1,n.setDate(1),b<11?n.setMonth(b+1):(n.setMonth(0),n.setFullYear(n.getFullYear()+1));else return n.setDate(n.getDate()+t),n}return n}function Aa(e,t,n){var o=n>0?n:wt(e)+1,b=new Array(o),m=Nr(e,b,0,b.length);return t&&(b.length=m),b}function wn(e,t){w(e.length>=0,"writeArrayToMemory array must have a length (should be an array or typed array)"),u().set(e,t>>>0)}function Fa(e,t,n,o){var b=f()[o+40>>>2],m={tm_sec:f()[o>>>2],tm_min:f()[o+4>>>2],tm_hour:f()[o+8>>>2],tm_mday:f()[o+12>>>2],tm_mon:f()[o+16>>>2],tm_year:f()[o+20>>>2],tm_wday:f()[o+24>>>2],tm_yday:f()[o+28>>>2],tm_isdst:f()[o+32>>>2],tm_gmtoff:f()[o+36>>>2],tm_zone:b?le(b):""},d=le(n),y={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var k in y)d=d.replace(new RegExp(k,"g"),y[k]);var F=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],R=["January","February","March","April","May","June","July","August","September","October","November","December"];function W(g,C,$){for(var H=typeof g=="number"?g.toString():g||"";H.length<C;)H=$[0]+H;return H}function L(g,C){return W(g,C,"0")}function _e(g,C){function $(V){return V<0?-1:V>0?1:0}var H;return(H=$(g.getFullYear()-C.getFullYear()))===0&&(H=$(g.getMonth()-C.getMonth()))===0&&(H=$(g.getDate()-C.getDate())),H}function B(g){switch(g.getDay()){case 0:return new Date(g.getFullYear()-1,11,29);case 1:return g;case 2:return new Date(g.getFullYear(),0,3);case 3:return new Date(g.getFullYear(),0,2);case 4:return new Date(g.getFullYear(),0,1);case 5:return new Date(g.getFullYear()-1,11,31);case 6:return new Date(g.getFullYear()-1,11,30)}}function G(g){var C=ka(new Date(g.tm_year+1900,0,1),g.tm_yday),$=new Date(C.getFullYear(),0,4),H=new Date(C.getFullYear()+1,0,4),V=B($),ee=B(H);return _e(V,C)<=0?_e(ee,C)<=0?C.getFullYear()+1:C.getFullYear():C.getFullYear()-1}var Ae={"%a":function(g){return F[g.tm_wday].substring(0,3)},"%A":function(g){return F[g.tm_wday]},"%b":function(g){return R[g.tm_mon].substring(0,3)},"%B":function(g){return R[g.tm_mon]},"%C":function(g){var C=g.tm_year+1900;return L(C/100|0,2)},"%d":function(g){return L(g.tm_mday,2)},"%e":function(g){return W(g.tm_mday,2," ")},"%g":function(g){return G(g).toString().substring(2)},"%G":function(g){return G(g)},"%H":function(g){return L(g.tm_hour,2)},"%I":function(g){var C=g.tm_hour;return C==0?C=12:C>12&&(C-=12),L(C,2)},"%j":function(g){return L(g.tm_mday+Sa(ze(g.tm_year+1900)?gn:vn,g.tm_mon-1),3)},"%m":function(g){return L(g.tm_mon+1,2)},"%M":function(g){return L(g.tm_min,2)},"%n":function(){return`
`},"%p":function(g){return g.tm_hour>=0&&g.tm_hour<12?"AM":"PM"},"%S":function(g){return L(g.tm_sec,2)},"%t":function(){return"	"},"%u":function(g){return g.tm_wday||7},"%U":function(g){var C=g.tm_yday+7-g.tm_wday;return L(Math.floor(C/7),2)},"%V":function(g){var C=Math.floor((g.tm_yday+7-(g.tm_wday+6)%7)/7);if((g.tm_wday+371-g.tm_yday-2)%7<=2&&C++,C){if(C==53){var H=(g.tm_wday+371-g.tm_yday)%7;H!=4&&(H!=3||!ze(g.tm_year))&&(C=1)}}else{C=52;var $=(g.tm_wday+7-g.tm_yday-1)%7;($==4||$==5&&ze(g.tm_year%400-1))&&C++}return L(C,2)},"%w":function(g){return g.tm_wday},"%W":function(g){var C=g.tm_yday+7-(g.tm_wday+6)%7;return L(Math.floor(C/7),2)},"%y":function(g){return(g.tm_year+1900).toString().substring(2)},"%Y":function(g){return g.tm_year+1900},"%z":function(g){var C=g.tm_gmtoff,$=C>=0;return C=Math.abs(C)/60,C=C/60*100+C%60,($?"+":"-")+String("0000"+C).slice(-4)},"%Z":function(g){return g.tm_zone},"%%":function(){return"%"}};d=d.replace(/%%/g,"\0\0");for(var k in Ae)d.includes(k)&&(d=d.replace(new RegExp(k,"g"),Ae[k](m)));d=d.replace(/\0\0/g,"%");var ve=Aa(d,!1);return ve.length>t?0:(wn(ve,e),ve.length-1)}function Ca(e,t,n,o,b){return Fa(e,t,n,o)}function Ta(){E("missing function: ucnv_close_64"),v(-1)}function Ra(){E("missing function: ucnv_convertEx_64"),v(-1)}function xa(){E("missing function: ucnv_open_64"),v(-1)}function Da(){E("missing function: ucnv_toAlgorithmic_64"),v(-1)}function Ma(){E("missing function: ucsdet_close_64"),v(-1)}function ja(){E("missing function: ucsdet_detect_64"),v(-1)}function Ia(){E("missing function: ucsdet_getConfidence_64"),v(-1)}function La(){E("missing function: ucsdet_getName_64"),v(-1)}function Ha(){E("missing function: ucsdet_open_64"),v(-1)}function Ua(){E("missing function: ucsdet_setText_64"),v(-1)}function Oa(){E("missing function: unzClose"),v(-1)}function Pa(){E("missing function: unzCloseCurrentFile"),v(-1)}function Ba(){E("missing function: unzGetCurrentFileInfo"),v(-1)}function Na(){E("missing function: unzGetCurrentFileInfo64"),v(-1)}function Wa(){E("missing function: unzGetGlobalInfo"),v(-1)}function Ga(){E("missing function: unzGoToFirstFile"),v(-1)}function Xa(){E("missing function: unzGoToNextFile"),v(-1)}function Ya(){E("missing function: unzLocateFile"),v(-1)}function za(){E("missing function: unzOpen"),v(-1)}function Ka(){E("missing function: unzOpen2"),v(-1)}function $a(){E("missing function: unzOpenCurrentFile"),v(-1)}function qa(){E("missing function: unzReadCurrentFile"),v(-1)}function Va(e){var t=i["_"+e];return w(t,"Cannot call unknown function "+e+", make sure it is exported"),t}function Ja(e){var t=wt(e)+1,n=Ue(t);return tt(e,n,t),n}function Qa(e,t,n,o,b){var m={string:B=>{var G=0;return B!=null&&B!==0&&(G=Ja(B)),G},array:B=>{var G=Ue(B.length);return wn(B,G),G}};function d(B){return t==="string"?le(B):t==="boolean"?Boolean(B):B}var y=Va(e),k=[],F=0;if(w(t!=="array",'Return type should not be "array".'),o)for(var R=0;R<o.length;R++){var W=m[n[R]];W?(F===0&&(F=xt()),k[R]=W(o[R])):k[R]=o[R]}var L=y.apply(null,k);function _e(B){return F!==0&&nt(F),d(B)}return L=_e(L),L}T.init();var Za=[null,wr,kr,Tr,xr,Lr,Hr,Ur,Or,Pr,Br,Wr,Gr,Xr,Yr,zr,Kr,$r,qr,Vr,Jr,Qr,Zr,en,tn,rn,sn,ln,un,_n,cn,fn,dn,hn,bn,pn,mn];function eo(){ni("fetchSettings")}var En={XML_GetBuffer:di,XML_GetErrorCode:hi,XML_Parse:bi,XML_ParseBuffer:pi,XML_ParserCreate:mi,XML_ParserFree:yi,XML_ResumeParser:gi,XML_SetCharacterDataHandler:vi,XML_SetElementHandler:wi,XML_SetUserData:Ei,XML_StopParser:Si,__assert_fail:ki,__dlsym:Ai,__emscripten_init_main_thread_js:Fi,__emscripten_thread_cleanup:Ci,__pthread_create_js:Rr,__syscall__newselect:xr,__syscall_bind:Lr,__syscall_connect:Hr,__syscall_faccessat:Ur,__syscall_fcntl64:Or,__syscall_fstat64:Pr,__syscall_ftruncate64:Br,__syscall_getdents64:Wr,__syscall_getpeername:Gr,__syscall_getsockopt:Xr,__syscall_ioctl:Yr,__syscall_lstat64:zr,__syscall_mkdirat:Kr,__syscall_newfstatat:$r,__syscall_openat:qr,__syscall_recvfrom:Vr,__syscall_renameat:Jr,__syscall_rmdir:Qr,__syscall_sendto:Zr,__syscall_socket:en,__syscall_stat64:tn,__syscall_unlinkat:rn,__throw_exception_with_stack_trace:Ri,_emscripten_get_now_is_monotonic:Di,_emscripten_notify_mailbox_postmessage:Ii,_emscripten_set_offscreencanvas_size:Li,_emscripten_thread_mailbox_await:vt,_emscripten_thread_set_strongref:Hi,_localtime_js:Ni,_tzset_js:Wi,abort:Gi,dlopen:Xi,duckdb_web_fs_directory_create:Yi,duckdb_web_fs_directory_exists:zi,duckdb_web_fs_directory_list_files:Ki,duckdb_web_fs_directory_remove:$i,duckdb_web_fs_file_close:qi,duckdb_web_fs_file_exists:Vi,duckdb_web_fs_file_get_last_modified_time:Ji,duckdb_web_fs_file_move:Qi,duckdb_web_fs_file_open:Zi,duckdb_web_fs_file_read:ea,duckdb_web_fs_file_truncate:ta,duckdb_web_fs_file_write:ra,duckdb_web_fs_get_default_data_protocol:na,duckdb_web_fs_glob:ia,duckdb_web_test_platform_feature:aa,duckdb_web_udf_scalar_call:oa,emscripten_check_blocking_allowed:sa,emscripten_console_error:la,emscripten_date_now:ua,emscripten_exit_with_live_runtime:ca,emscripten_get_heap_max:fa,emscripten_get_now:on,emscripten_num_logical_cores:da,emscripten_receive_on_main_thread_js:ha,emscripten_resize_heap:pa,environ_get:sn,environ_sizes_get:ln,exit:ht,fd_close:un,fd_fdstat_get:_n,fd_pread:cn,fd_pwrite:fn,fd_read:dn,fd_seek:hn,fd_sync:bn,fd_write:pn,getaddrinfo:mn,getentropy:wa,getnameinfo:Ea,memory:z||i.wasmMemory,strftime_l:Ca,ucnv_close_64:Ta,ucnv_convertEx_64:Ra,ucnv_open_64:xa,ucnv_toAlgorithmic_64:Da,ucsdet_close_64:Ma,ucsdet_detect_64:ja,ucsdet_getConfidence_64:Ia,ucsdet_getName_64:La,ucsdet_open_64:Ha,ucsdet_setText_64:Ua,unzClose:Oa,unzCloseCurrentFile:Pa,unzGetCurrentFileInfo:Ba,unzGetCurrentFileInfo64:Na,unzGetGlobalInfo:Wa,unzGoToFirstFile:Ga,unzGoToNextFile:Xa,unzLocateFile:Ya,unzOpen:za,unzOpen2:Ka,unzOpenCurrentFile:$a,unzReadCurrentFile:qa},is=ri(),as=h("__wasm_call_ctors"),to=i._main=h("main"),os=i._duckdb_web_fs_glob_add_path=h("duckdb_web_fs_glob_add_path"),ss=i._duckdb_web_clear_response=h("duckdb_web_clear_response"),ls=i._duckdb_web_fail_with=h("duckdb_web_fail_with"),us=i._duckdb_web_reset=h("duckdb_web_reset"),_s=i._duckdb_web_connect=h("duckdb_web_connect"),cs=i._duckdb_web_disconnect=h("duckdb_web_disconnect"),fs=i._duckdb_web_flush_files=h("duckdb_web_flush_files"),ds=i._duckdb_web_flush_file=h("duckdb_web_flush_file"),hs=i._duckdb_web_open=h("duckdb_web_open"),bs=i._duckdb_web_get_global_file_info=h("duckdb_web_get_global_file_info"),ps=i._duckdb_web_collect_file_stats=h("duckdb_web_collect_file_stats"),ms=i._duckdb_web_export_file_stats=h("duckdb_web_export_file_stats"),ys=i._duckdb_web_fs_drop_file=h("duckdb_web_fs_drop_file"),gs=i._duckdb_web_fs_drop_files=h("duckdb_web_fs_drop_files"),vs=i._duckdb_web_fs_glob_file_infos=h("duckdb_web_fs_glob_file_infos"),ws=i._duckdb_web_fs_get_file_info_by_id=h("duckdb_web_fs_get_file_info_by_id"),Es=i._duckdb_web_fs_get_file_info_by_name=h("duckdb_web_fs_get_file_info_by_name"),Ss=i._duckdb_web_fs_register_file_url=h("duckdb_web_fs_register_file_url"),ks=i._duckdb_web_fs_register_file_buffer=h("duckdb_web_fs_register_file_buffer"),As=i._duckdb_web_copy_file_to_buffer=h("duckdb_web_copy_file_to_buffer"),Fs=i._duckdb_web_copy_file_to_path=h("duckdb_web_copy_file_to_path"),Cs=i._duckdb_web_get_version=h("duckdb_web_get_version"),Ts=i._duckdb_web_get_feature_flags=h("duckdb_web_get_feature_flags"),Rs=i._duckdb_web_tokenize=h("duckdb_web_tokenize"),xs=i._duckdb_web_udf_scalar_create=h("duckdb_web_udf_scalar_create"),Ds=i._duckdb_web_prepared_create=h("duckdb_web_prepared_create"),Ms=i._duckdb_web_prepared_close=h("duckdb_web_prepared_close"),js=i._duckdb_web_prepared_run=h("duckdb_web_prepared_run"),Is=i._duckdb_web_prepared_send=h("duckdb_web_prepared_send"),Ls=i._duckdb_web_query_run=h("duckdb_web_query_run"),Hs=i._duckdb_web_pending_query_start=h("duckdb_web_pending_query_start"),Us=i._duckdb_web_pending_query_poll=h("duckdb_web_pending_query_poll"),Os=i._duckdb_web_pending_query_cancel=h("duckdb_web_pending_query_cancel"),Ps=i._duckdb_web_query_fetch_results=h("duckdb_web_query_fetch_results"),Bs=i._duckdb_web_get_tablenames=h("duckdb_web_get_tablenames"),Ns=i._duckdb_web_insert_arrow_from_ipc_stream=h("duckdb_web_insert_arrow_from_ipc_stream"),Ws=i._duckdb_web_insert_csv_from_path=h("duckdb_web_insert_csv_from_path"),Gs=i._duckdb_web_insert_json_from_path=h("duckdb_web_insert_json_from_path"),Xs=i.__emscripten_tls_init=h("_emscripten_tls_init"),He=i._pthread_self=function(){return(He=i._pthread_self=i.asm.pthread_self).apply(null,arguments)},ro=h("__errno_location"),no=i.__emscripten_thread_init=h("_emscripten_thread_init"),Ys=i.__emscripten_thread_crashed=h("_emscripten_thread_crashed"),io=i._fflush=h("fflush"),Ft=h("htonl"),Ct=h("htons"),zs=h("emscripten_main_runtime_thread_id"),Ks=h("emscripten_main_thread_process_queued_calls"),ao=h("_emscripten_run_in_main_runtime_thread_js"),$s=h("emscripten_dispatch_to_thread_"),Sn=h("ntohs"),kn=h("_emscripten_thread_free_data"),An=i.__emscripten_thread_exit=h("_emscripten_thread_exit"),oo=i.__emscripten_check_mailbox=h("_emscripten_check_mailbox"),Tt=i._malloc=h("malloc"),Fn=i._free=h("free"),so=function(){return(so=i.asm.emscripten_stack_get_base).apply(null,arguments)},Rt=function(){return(Rt=i.asm.emscripten_stack_get_end).apply(null,arguments)},Cn=function(){return(Cn=i.asm.__trap).apply(null,arguments)},Tn=function(){return(Tn=i.asm.emscripten_stack_init).apply(null,arguments)},Rn=function(){return(Rn=i.asm.emscripten_stack_set_limits).apply(null,arguments)},lo=function(){return(lo=i.asm.emscripten_stack_get_free).apply(null,arguments)},xt=h("stackSave"),nt=h("stackRestore"),Ue=h("stackAlloc"),xn=function(){return(xn=i.asm.emscripten_stack_get_current).apply(null,arguments)},uo=i.___cxa_decrement_exception_refcount=h("__cxa_decrement_exception_refcount"),_o=i.___cxa_increment_exception_refcount=h("__cxa_increment_exception_refcount"),co=i.___thrown_object_from_unwind_exception=h("__thrown_object_from_unwind_exception"),fo=i.___get_exception_message=h("__get_exception_message"),qs=i.dynCall_jiji=h("dynCall_jiji"),Vs=i.dynCall_iiiiij=h("dynCall_iiiiij"),Js=i.dynCall_iiiiijj=h("dynCall_iiiiijj"),Qs=i.dynCall_iiiiiijj=h("dynCall_iiiiiijj"),Zs=i.dynCall_viijii=h("dynCall_viijii"),el=i.dynCall_viijji=h("dynCall_viijji"),tl=i.dynCall_iiiji=h("dynCall_iiiji"),rl=i.dynCall_ji=h("dynCall_ji"),nl=i.dynCall_viij=h("dynCall_viij"),il=i.dynCall_vij=h("dynCall_vij"),al=i.dynCall_vjjijij=h("dynCall_vjjijij"),ol=i.dynCall_vijjji=h("dynCall_vijjji"),sl=i.dynCall_vjjii=h("dynCall_vjjii"),ll=i.dynCall_viiiiiji=h("dynCall_viiiiiji"),ul=i.dynCall_jiiiji=h("dynCall_jiiiji"),_l=i.dynCall_jiiij=h("dynCall_jiiij"),cl=i.dynCall_jijjij=h("dynCall_jijjij"),fl=i.dynCall_iiij=h("dynCall_iiij"),dl=i.dynCall_vijjj=h("dynCall_vijjj"),hl=i.dynCall_vijj=h("dynCall_vijj"),bl=i.dynCall_viijj=h("dynCall_viijj"),pl=i.dynCall_jiijii=h("dynCall_jiijii"),ml=i.dynCall_jijiii=h("dynCall_jijiii"),yl=i.dynCall_viijiiiii=h("dynCall_viijiiiii"),gl=i.dynCall_viijiiij=h("dynCall_viijiiij"),vl=i.dynCall_vijiiiji=h("dynCall_vijiiiji"),wl=i.dynCall_viiiij=h("dynCall_viiiij"),El=i.dynCall_jiiji=h("dynCall_jiiji"),Sl=i.dynCall_viiijij=h("dynCall_viiijij"),kl=i.dynCall_viijiij=h("dynCall_viijiij"),Al=i.dynCall_viiiiijj=h("dynCall_viiiiijj"),Fl=i.dynCall_viiijji=h("dynCall_viiijji"),Cl=i.dynCall_vijii=h("dynCall_vijii"),Tl=i.dynCall_iiiiiji=h("dynCall_iiiiiji"),Rl=i.dynCall_iij=h("dynCall_iij"),xl=i.dynCall_iiijj=h("dynCall_iiijj"),Dl=i.dynCall_iijii=h("dynCall_iijii"),Ml=i.dynCall_viji=h("dynCall_viji"),jl=i.dynCall_iiji=h("dynCall_iiji"),Il=i.dynCall_viijjj=h("dynCall_viijjj"),Ll=i.dynCall_viiijj=h("dynCall_viiijj"),Hl=i.dynCall_jijj=h("dynCall_jijj"),Ul=i.dynCall_jiiiii=h("dynCall_jiiiii"),Ol=i.dynCall_vijji=h("dynCall_vijji"),Pl=i.dynCall_jiiii=h("dynCall_jiiii"),Bl=i.dynCall_jii=h("dynCall_jii"),Nl=i.dynCall_viijij=h("dynCall_viijij"),Wl=i.dynCall_viiij=h("dynCall_viiij"),Gl=i.dynCall_j=h("dynCall_j"),Xl=i.dynCall_viiijiiiijj=h("dynCall_viiijiiiijj"),Yl=i.dynCall_jiiiij=h("dynCall_jiiiij"),zl=i.dynCall_jj=h("dynCall_jj"),Kl=i.dynCall_ij=h("dynCall_ij"),$l=i.dynCall_ijjj=h("dynCall_ijjj"),ql=i.dynCall_jjjd=h("dynCall_jjjd"),Vl=i.dynCall_jjjjjjd=h("dynCall_jjjjjjd"),Jl=i.dynCall_jij=h("dynCall_jij"),Ql=i.dynCall_viiijiiijii=h("dynCall_viiijiiijii"),Zl=i.dynCall_viijijiiii=h("dynCall_viijijiiii"),eu=i.dynCall_viiji=h("dynCall_viiji"),tu=i.dynCall_jiiiijj=h("dynCall_jiiiijj"),ru=i.dynCall_viiiji=h("dynCall_viiiji"),nu=i.dynCall_viiiiji=h("dynCall_viiiiji"),iu=i.dynCall_jijiiii=h("dynCall_jijiiii"),au=i.dynCall_viiijiji=h("dynCall_viiijiji"),ou=i.dynCall_viijiji=h("dynCall_viijiji"),su=i.dynCall_jiii=h("dynCall_jiii");i.keepRuntimeAlive=Ge,i.wasmMemory=z,i.stackAlloc=Ue,i.stackSave=xt,i.stackRestore=nt,i.ccall=Qa,i.ExitStatus=Ve,i.PThread=T;var ho=["getHostByName","traverseStack","getCallstack","emscriptenLog","convertPCtoSourceLocation","readEmAsmArgs","jstoi_s","listenOnce","autoResumeAudioContext","dynCallLegacy","getDynCaller","dynCall","runtimeKeepalivePop","safeSetTimeout","asmjsMangle","asyncLoad","alignMemory","mmapAlloc","HandleAllocator","getNativeTypeSize","STACK_SIZE","STACK_ALIGN","POINTER_SIZE","ASSERTIONS","writeI53ToI64","writeI53ToI64Clamped","writeI53ToI64Signaling","writeI53ToU64Clamped","writeI53ToU64Signaling","readI53FromU64","convertI32PairToI53","convertU32PairToI53","cwrap","uleb128Encode","sigToWasmTypes","generateFuncType","convertJsFunctionToWasm","getEmptyTableSlot","updateTableMap","getFunctionAddress","addFunction","removeFunction","reallyNegative","unSign","strLen","reSign","formatString","intArrayToString","AsciiToString","UTF16ToString","stringToUTF16","lengthBytesUTF16","UTF32ToString","stringToUTF32","lengthBytesUTF32","registerKeyEventCallback","maybeCStringToJsString","findEventTarget","findCanvasEventTarget","getBoundingClientRect","fillMouseEventData","registerMouseEventCallback","registerWheelEventCallback","registerUiEventCallback","registerFocusEventCallback","fillDeviceOrientationEventData","registerDeviceOrientationEventCallback","fillDeviceMotionEventData","registerDeviceMotionEventCallback","screenOrientation","fillOrientationChangeEventData","registerOrientationChangeEventCallback","fillFullscreenChangeEventData","registerFullscreenChangeEventCallback","JSEvents_requestFullscreen","JSEvents_resizeCanvasForFullscreen","registerRestoreOldStyle","hideEverythingExceptGivenElement","restoreHiddenElements","setLetterbox","softFullscreenResizeWebGLRenderTarget","doRequestFullscreen","fillPointerlockChangeEventData","registerPointerlockChangeEventCallback","registerPointerlockErrorEventCallback","requestPointerLock","fillVisibilityChangeEventData","registerVisibilityChangeEventCallback","registerTouchEventCallback","fillGamepadEventData","registerGamepadEventCallback","registerBeforeUnloadEventCallback","fillBatteryEventData","battery","registerBatteryEventCallback","setCanvasElementSizeCallingThread","setCanvasElementSizeMainThread","setCanvasElementSize","getCanvasSizeCallingThread","getCanvasSizeMainThread","getCanvasElementSize","demangle","demangleAll","jsStackTrace","stackTrace","checkWasiClock","wasiRightsToMuslOFlags","wasiOFlagsToMuslOFlags","createDyncallWrapper","setImmediateWrapped","clearImmediateWrapped","polyfillSetImmediate","getPromise","makePromise","idsToPromises","makePromiseCallback","setMainLoop","heapObjectForWebGLType","heapAccessShiftForWebGLHeap","webgl_enable_ANGLE_instanced_arrays","webgl_enable_OES_vertex_array_object","webgl_enable_WEBGL_draw_buffers","webgl_enable_WEBGL_multi_draw","emscriptenWebGLGet","computeUnpackAlignedImageSize","colorChannelsInGlTextureFormat","emscriptenWebGLGetTexPixelData","__glGenObject","emscriptenWebGLGetUniform","webglGetUniformLocation","webglPrepareUniformLocationsBeforeFirstUse","webglGetLeftBracePos","emscriptenWebGLGetVertexAttrib","__glGetActiveAttribOrUniform","writeGLArray","emscripten_webgl_destroy_context_before_on_calling_thread","registerWebGlEventCallback","runAndAbortIfError","SDL_unicode","SDL_ttfContext","SDL_audio","GLFW_Window","ALLOC_NORMAL","ALLOC_STACK","allocate","writeStringToMemory","writeAsciiToMemory"];ho.forEach(ai);var bo=["run","addOnPreRun","addOnInit","addOnPreMain","addOnExit","addOnPostRun","addRunDependency","removeRunDependency","FS_createFolder","FS_createPath","FS_createDataFile","FS_createLazyFile","FS_createLink","FS_createDevice","FS_unlink","out","err","callMain","abort","getTempRet0","setTempRet0","GROWABLE_HEAP_I8","GROWABLE_HEAP_U8","GROWABLE_HEAP_I16","GROWABLE_HEAP_U16","GROWABLE_HEAP_I32","GROWABLE_HEAP_U32","GROWABLE_HEAP_F32","GROWABLE_HEAP_F64","writeStackCookie","checkStackCookie","ptrToString","zeroMemory","exitJS","getHeapMax","emscripten_realloc_buffer","ENV","MONTH_DAYS_REGULAR","MONTH_DAYS_LEAP","MONTH_DAYS_REGULAR_CUMULATIVE","MONTH_DAYS_LEAP_CUMULATIVE","isLeapYear","ydayFromDate","arraySum","addDays","ERRNO_CODES","ERRNO_MESSAGES","setErrNo","inetPton4","inetNtop4","inetPton6","inetNtop6","readSockaddr","writeSockaddr","DNS","Protocols","Sockets","initRandomFill","randomFill","timers","warnOnce","UNWIND_CACHE","readEmAsmArgsArray","jstoi_q","getExecutableName","handleException","runtimeKeepalivePush","callUserCallback","maybeExit","readI53FromI64","convertI32PairToI53Checked","getCFunc","freeTableIndexes","functionsInTableMap","setValue","getValue","PATH","PATH_FS","UTF8Decoder","UTF8ArrayToString","UTF8ToString","stringToUTF8Array","stringToUTF8","lengthBytesUTF8","intArrayFromString","stringToAscii","UTF16Decoder","stringToNewUTF8","stringToUTF8OnStack","writeArrayToMemory","JSEvents","specialHTMLTargets","currentFullscreenStrategy","restoreOldWindowedStyle","getEnvStrings","flush_NO_FILESYSTEM","dlopenMissingError","promiseMap","getExceptionMessageCommon","getCppExceptionTag","getCppExceptionThrownObjectFromWebAssemblyException","incrementExceptionRefcount","decrementExceptionRefcount","getExceptionMessage","Browser","wget","SYSCALLS","getSocketFromFD","getSocketAddress","tempFixedLengthArray","miniTempWebGLFloatBuffers","miniTempWebGLIntBuffers","GL","emscripten_webgl_power_preferences","AL","GLUT","EGL","GLEW","IDBStore","SDL","SDL_gfx","GLFW","allocateUTF8","allocateUTF8OnStack","terminateWorker","killThread","cleanupThread","registerTLSInit","cancelThread","spawnThread","exitOnMainThread","proxyToMainThread","emscripten_receive_on_main_thread_js_callArgs","invokeEntryPoint","checkMailbox","SOCKFS","FS"];bo.forEach(hr);var it;Xe=function e(){it||Dn(),it||(Xe=e)};function po(){w(Se==0,'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])'),w(_t.length==0,"cannot call main when preRun functions remain to be called");var e=to,t=0,n=0;try{var o=e(t,n);return Er(o,!0),o}catch(b){return bt(b)}}function mo(){w(!S),Tn(),rr()}function Dn(){if(Se>0)return;if(S||mo(),S){U(i),or(),startWorker(i);return}if($n(),Se>0)return;function e(){it||(it=!0,i.calledRun=!0,!Me&&(or(),qn(),U(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),Mn&&po(),Vn()))}i.setStatus?(i.setStatus("Running..."),setTimeout(function(){setTimeout(function(){i.setStatus("")},1),e()},1)):e(),je()}function yo(){var e=Pe,t=E,n=!1;Pe=E=o=>{n=!0};try{ga()}catch(o){}Pe=e,E=t,n&&(ce("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc."),ce("(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)"))}if(i.preInit)for(typeof i.preInit=="function"&&(i.preInit=[i.preInit]);i.preInit.length>0;)i.preInit.pop()();var Mn=!0;return i.noInitialRun&&(Mn=!1),Dn(),a.ready}})(),jt=xo});var Bn=Mt((exports,module)=>{(function(){"use strict";var ERROR="input is invalid type",WINDOW=typeof window=="object",root=WINDOW?window:{};root.JS_SHA256_NO_WINDOW&&(WINDOW=!1);var WEB_WORKER=!WINDOW&&typeof self=="object",NODE_JS=!root.JS_SHA256_NO_NODE_JS&&typeof process=="object"&&process.versions&&process.versions.node;NODE_JS?root=global:WEB_WORKER&&(root=self);var COMMON_JS=!root.JS_SHA256_NO_COMMON_JS&&typeof module=="object"&&module.exports,AMD=typeof define=="function"&&define.amd,ARRAY_BUFFER=!root.JS_SHA256_NO_ARRAY_BUFFER&&typeof ArrayBuffer<"u",HEX_CHARS="0123456789abcdef".split(""),EXTRA=[-2147483648,8388608,32768,128],SHIFT=[24,16,8,0],K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],OUTPUT_TYPES=["hex","array","digest","arrayBuffer"],blocks=[];(root.JS_SHA256_NO_NODE_JS||!Array.isArray)&&(Array.isArray=function(r){return Object.prototype.toString.call(r)==="[object Array]"}),ARRAY_BUFFER&&(root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW||!ArrayBuffer.isView)&&(ArrayBuffer.isView=function(r){return typeof r=="object"&&r.buffer&&r.buffer.constructor===ArrayBuffer});var createOutputMethod=function(r,a){return function(u){return new Sha256(a,!0).update(u)[r]()}},createMethod=function(r){var a=createOutputMethod("hex",r);NODE_JS&&(a=nodeWrap(a,r)),a.create=function(){return new Sha256(r)},a.update=function(s){return a.create().update(s)};for(var u=0;u<OUTPUT_TYPES.length;++u){var l=OUTPUT_TYPES[u];a[l]=createOutputMethod(l,r)}return a},nodeWrap=function(method,is224){var crypto=eval("require('crypto')"),Buffer=eval("require('buffer').Buffer"),algorithm=is224?"sha224":"sha256",nodeMethod=function(r){if(typeof r=="string")return crypto.createHash(algorithm).update(r,"utf8").digest("hex");if(r==null)throw new Error(ERROR);return r.constructor===ArrayBuffer&&(r=new Uint8Array(r)),Array.isArray(r)||ArrayBuffer.isView(r)||r.constructor===Buffer?crypto.createHash(algorithm).update(new Buffer(r)).digest("hex"):method(r)};return nodeMethod},createHmacOutputMethod=function(r,a){return function(u,l){return new HmacSha256(u,a,!0).update(l)[r]()}},createHmacMethod=function(r){var a=createHmacOutputMethod("hex",r);a.create=function(s){return new HmacSha256(s,r)},a.update=function(s,c){return a.create(s).update(c)};for(var u=0;u<OUTPUT_TYPES.length;++u){var l=OUTPUT_TYPES[u];a[l]=createHmacOutputMethod(l,r)}return a};function Sha256(r,a){a?(blocks[0]=blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0,this.blocks=blocks):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],r?(this.h0=3238371032,this.h1=914150663,this.h2=812702999,this.h3=4144912697,this.h4=4290775857,this.h5=1750603025,this.h6=1694076839,this.h7=3204075428):(this.h0=1779033703,this.h1=3144134277,this.h2=1013904242,this.h3=2773480762,this.h4=1359893119,this.h5=2600822924,this.h6=528734635,this.h7=1541459225),this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0,this.is224=r}Sha256.prototype.update=function(r){if(!this.finalized){var a,u=typeof r;if(u!=="string"){if(u==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);a=!0}for(var l,s=0,c,f=r.length,_=this.blocks;s<f;){if(this.hashed&&(this.hashed=!1,_[0]=this.block,_[16]=_[1]=_[2]=_[3]=_[4]=_[5]=_[6]=_[7]=_[8]=_[9]=_[10]=_[11]=_[12]=_[13]=_[14]=_[15]=0),a)for(c=this.start;s<f&&c<64;++s)_[c>>2]|=r[s]<<SHIFT[c++&3];else for(c=this.start;s<f&&c<64;++s)l=r.charCodeAt(s),l<128?_[c>>2]|=l<<SHIFT[c++&3]:l<2048?(_[c>>2]|=(192|l>>6)<<SHIFT[c++&3],_[c>>2]|=(128|l&63)<<SHIFT[c++&3]):l<55296||l>=57344?(_[c>>2]|=(224|l>>12)<<SHIFT[c++&3],_[c>>2]|=(128|l>>6&63)<<SHIFT[c++&3],_[c>>2]|=(128|l&63)<<SHIFT[c++&3]):(l=65536+((l&1023)<<10|r.charCodeAt(++s)&1023),_[c>>2]|=(240|l>>18)<<SHIFT[c++&3],_[c>>2]|=(128|l>>12&63)<<SHIFT[c++&3],_[c>>2]|=(128|l>>6&63)<<SHIFT[c++&3],_[c>>2]|=(128|l&63)<<SHIFT[c++&3]);this.lastByteIndex=c,this.bytes+=c-this.start,c>=64?(this.block=_[16],this.start=c-64,this.hash(),this.hashed=!0):this.start=c}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},Sha256.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var r=this.blocks,a=this.lastByteIndex;r[16]=this.block,r[a>>2]|=EXTRA[a&3],this.block=r[16],a>=56&&(this.hashed||this.hash(),r[0]=this.block,r[16]=r[1]=r[2]=r[3]=r[4]=r[5]=r[6]=r[7]=r[8]=r[9]=r[10]=r[11]=r[12]=r[13]=r[14]=r[15]=0),r[14]=this.hBytes<<3|this.bytes>>>29,r[15]=this.bytes<<3,this.hash()}},Sha256.prototype.hash=function(){var r=this.h0,a=this.h1,u=this.h2,l=this.h3,s=this.h4,c=this.h5,f=this.h6,_=this.h7,p=this.blocks,A,i,U,N,x,q,te,re,oe,Q,O;for(A=16;A<64;++A)x=p[A-15],i=(x>>>7|x<<25)^(x>>>18|x<<14)^x>>>3,x=p[A-2],U=(x>>>17|x<<15)^(x>>>19|x<<13)^x>>>10,p[A]=p[A-16]+i+p[A-7]+U<<0;for(O=a&u,A=0;A<64;A+=4)this.first?(this.is224?(re=300032,x=p[0]-1413257819,_=x-150054599<<0,l=x+24177077<<0):(re=704751109,x=p[0]-210244248,_=x-1521486534<<0,l=x+143694565<<0),this.first=!1):(i=(r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10),U=(s>>>6|s<<26)^(s>>>11|s<<21)^(s>>>25|s<<7),re=r&a,N=re^r&u^O,te=s&c^~s&f,x=_+U+te+K[A]+p[A],q=i+N,_=l+x<<0,l=x+q<<0),i=(l>>>2|l<<30)^(l>>>13|l<<19)^(l>>>22|l<<10),U=(_>>>6|_<<26)^(_>>>11|_<<21)^(_>>>25|_<<7),oe=l&r,N=oe^l&a^re,te=_&s^~_&c,x=f+U+te+K[A+1]+p[A+1],q=i+N,f=u+x<<0,u=x+q<<0,i=(u>>>2|u<<30)^(u>>>13|u<<19)^(u>>>22|u<<10),U=(f>>>6|f<<26)^(f>>>11|f<<21)^(f>>>25|f<<7),Q=u&l,N=Q^u&r^oe,te=f&_^~f&s,x=c+U+te+K[A+2]+p[A+2],q=i+N,c=a+x<<0,a=x+q<<0,i=(a>>>2|a<<30)^(a>>>13|a<<19)^(a>>>22|a<<10),U=(c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7),O=a&u,N=O^a&l^Q,te=c&f^~c&_,x=s+U+te+K[A+3]+p[A+3],q=i+N,s=r+x<<0,r=x+q<<0;this.h0=this.h0+r<<0,this.h1=this.h1+a<<0,this.h2=this.h2+u<<0,this.h3=this.h3+l<<0,this.h4=this.h4+s<<0,this.h5=this.h5+c<<0,this.h6=this.h6+f<<0,this.h7=this.h7+_<<0},Sha256.prototype.hex=function(){this.finalize();var r=this.h0,a=this.h1,u=this.h2,l=this.h3,s=this.h4,c=this.h5,f=this.h6,_=this.h7,p=HEX_CHARS[r>>28&15]+HEX_CHARS[r>>24&15]+HEX_CHARS[r>>20&15]+HEX_CHARS[r>>16&15]+HEX_CHARS[r>>12&15]+HEX_CHARS[r>>8&15]+HEX_CHARS[r>>4&15]+HEX_CHARS[r&15]+HEX_CHARS[a>>28&15]+HEX_CHARS[a>>24&15]+HEX_CHARS[a>>20&15]+HEX_CHARS[a>>16&15]+HEX_CHARS[a>>12&15]+HEX_CHARS[a>>8&15]+HEX_CHARS[a>>4&15]+HEX_CHARS[a&15]+HEX_CHARS[u>>28&15]+HEX_CHARS[u>>24&15]+HEX_CHARS[u>>20&15]+HEX_CHARS[u>>16&15]+HEX_CHARS[u>>12&15]+HEX_CHARS[u>>8&15]+HEX_CHARS[u>>4&15]+HEX_CHARS[u&15]+HEX_CHARS[l>>28&15]+HEX_CHARS[l>>24&15]+HEX_CHARS[l>>20&15]+HEX_CHARS[l>>16&15]+HEX_CHARS[l>>12&15]+HEX_CHARS[l>>8&15]+HEX_CHARS[l>>4&15]+HEX_CHARS[l&15]+HEX_CHARS[s>>28&15]+HEX_CHARS[s>>24&15]+HEX_CHARS[s>>20&15]+HEX_CHARS[s>>16&15]+HEX_CHARS[s>>12&15]+HEX_CHARS[s>>8&15]+HEX_CHARS[s>>4&15]+HEX_CHARS[s&15]+HEX_CHARS[c>>28&15]+HEX_CHARS[c>>24&15]+HEX_CHARS[c>>20&15]+HEX_CHARS[c>>16&15]+HEX_CHARS[c>>12&15]+HEX_CHARS[c>>8&15]+HEX_CHARS[c>>4&15]+HEX_CHARS[c&15]+HEX_CHARS[f>>28&15]+HEX_CHARS[f>>24&15]+HEX_CHARS[f>>20&15]+HEX_CHARS[f>>16&15]+HEX_CHARS[f>>12&15]+HEX_CHARS[f>>8&15]+HEX_CHARS[f>>4&15]+HEX_CHARS[f&15];return this.is224||(p+=HEX_CHARS[_>>28&15]+HEX_CHARS[_>>24&15]+HEX_CHARS[_>>20&15]+HEX_CHARS[_>>16&15]+HEX_CHARS[_>>12&15]+HEX_CHARS[_>>8&15]+HEX_CHARS[_>>4&15]+HEX_CHARS[_&15]),p},Sha256.prototype.toString=Sha256.prototype.hex,Sha256.prototype.digest=function(){this.finalize();var r=this.h0,a=this.h1,u=this.h2,l=this.h3,s=this.h4,c=this.h5,f=this.h6,_=this.h7,p=[r>>24&255,r>>16&255,r>>8&255,r&255,a>>24&255,a>>16&255,a>>8&255,a&255,u>>24&255,u>>16&255,u>>8&255,u&255,l>>24&255,l>>16&255,l>>8&255,l&255,s>>24&255,s>>16&255,s>>8&255,s&255,c>>24&255,c>>16&255,c>>8&255,c&255,f>>24&255,f>>16&255,f>>8&255,f&255];return this.is224||p.push(_>>24&255,_>>16&255,_>>8&255,_&255),p},Sha256.prototype.array=Sha256.prototype.digest,Sha256.prototype.arrayBuffer=function(){this.finalize();var r=new ArrayBuffer(this.is224?28:32),a=new DataView(r);return a.setUint32(0,this.h0),a.setUint32(4,this.h1),a.setUint32(8,this.h2),a.setUint32(12,this.h3),a.setUint32(16,this.h4),a.setUint32(20,this.h5),a.setUint32(24,this.h6),this.is224||a.setUint32(28,this.h7),r};function HmacSha256(r,a,u){var l,s=typeof r;if(s==="string"){var c=[],f=r.length,_=0,p;for(l=0;l<f;++l)p=r.charCodeAt(l),p<128?c[_++]=p:p<2048?(c[_++]=192|p>>6,c[_++]=128|p&63):p<55296||p>=57344?(c[_++]=224|p>>12,c[_++]=128|p>>6&63,c[_++]=128|p&63):(p=65536+((p&1023)<<10|r.charCodeAt(++l)&1023),c[_++]=240|p>>18,c[_++]=128|p>>12&63,c[_++]=128|p>>6&63,c[_++]=128|p&63);r=c}else if(s==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);r.length>64&&(r=new Sha256(a,!0).update(r).array());var A=[],i=[];for(l=0;l<64;++l){var U=r[l]||0;A[l]=92^U,i[l]=54^U}Sha256.call(this,a,u),this.update(i),this.oKeyPad=A,this.inner=!0,this.sharedMemory=u}HmacSha256.prototype=new Sha256,HmacSha256.prototype.finalize=function(){if(Sha256.prototype.finalize.call(this),this.inner){this.inner=!1;var r=this.array();Sha256.call(this,this.is224,this.sharedMemory),this.update(this.oKeyPad),this.update(r),Sha256.prototype.finalize.call(this)}};var exports=createMethod();exports.sha256=exports,exports.sha224=createMethod(!0),exports.sha256.hmac=createHmacMethod(),exports.sha224.hmac=createHmacMethod(!0),COMMON_JS?module.exports=exports:(root.sha256=exports.sha256,root.sha224=exports.sha224,AMD&&define(function(){return exports}))})()});var P={},Un=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";Un&&(Lt=In(),Ht=Lt.parentPort,Ht.on("message",r=>Bt({data:r})),Ot=Ln(),Object.assign(global,{self:global,require:at,Module:P,location:{href:__filename},Worker:Lt.Worker,importScripts:function(r){(0,eval)(Ot.readFileSync(r,"utf8")+"//# sourceURL="+r)},postMessage:function(r){Ht.postMessage(r)},performance:global.performance||{now:function(){return Date.now()}}}));var Lt,Ht,Ot,Ut=!1;function Do(r,a){r||abort("Assertion failed: "+a)}function Mo(){var r=Array.prototype.slice.call(arguments).join(" ");if(Un){Ot.writeSync(2,r+`
`);return}console.error(r)}function jo(){var r=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:r,threadId:P._pthread_self()})}var st=Mo;self.alert=jo;P.instantiateWasm=(r,a)=>{var u=P.wasmModule;P.wasmModule=null;var l=new WebAssembly.Instance(u,r);return a(l)};self.onunhandledrejection=r=>{var a;throw(a=r.reason)!=null?a:r};function Pt(r){try{if(r.data.cmd==="load"){let a=[];self.onmessage=u=>a.push(u),self.startWorker=u=>{P=u,postMessage({cmd:"loaded"});for(let l of a)Pt(l);self.onmessage=Pt},P.wasmModule=r.data.wasmModule;for(let u of r.data.handlers)P[u]=function(){postMessage({cmd:"callHandler",handler:u,args:[...arguments]})};P.wasmMemory=r.data.wasmMemory,P.buffer=P.wasmMemory.buffer,P.workerID=r.data.workerID,P.ENVIRONMENT_IS_PTHREAD=!0,(r.data.urlOrBlob?Promise.resolve().then(()=>ot(at(r.data.urlOrBlob))):Promise.resolve().then(()=>(It(),Hn))).then(u=>u.default(P))}else if(r.data.cmd==="run"){P.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),P.__emscripten_thread_mailbox_await(r.data.pthread_ptr),Do(r.data.pthread_ptr),P.establishStackSpace(),P.PThread.receiveObjectTransfer(r.data),P.PThread.threadInitTLS(),Ut||(Ut=!0);try{P.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(a){if(a!="unwind")throw a}}else r.data.cmd==="cancel"?P._pthread_self()&&P.__emscripten_thread_exit(-1):r.data.target==="setimmediate"||(r.data.cmd==="checkMailbox"?Ut&&P.checkMailbox():r.data.cmd&&(st("worker.js received unknown command "+r.data.cmd),st(r.data)))}catch(a){throw st("worker.js onmessage() captured an uncaught exception: "+a),a&&a.stack&&st(a.stack),P.__emscripten_thread_crashed&&P.__emscripten_thread_crashed(),a}}self.onmessage=Pt;var Bt=self.onmessage;function On(){return P}function Pn(r){P=r}It();var Fe=ot(Bn()),Nn=function(r,a,u){var l;if((l=r==null?void 0:r.endpoint)!=null&&l.startsWith("http")){let s=`${r==null?void 0:r.endpoint}`,c=s.indexOf("://")+3;return s.substring(c)}else return r!=null&&r.endpoint?`${u}.${r==null?void 0:r.endpoint}`:`${u}.s3.amazonaws.com`};function Lo(r,a,u){var c,f,_,p;let l=Wn(a),s=l.path;return Gn(r)&&(s=`/${l.bucket}${s}`),{url:s,query:"",host:Nn(r,a,l.bucket),region:(c=r==null?void 0:r.region)!=null?c:"",service:"s3",method:u,accessKeyId:(f=r==null?void 0:r.accessKeyId)!=null?f:"",secretAccessKey:(_=r==null?void 0:r.secretAccessKey)!=null?_:"",sessionToken:(p=r==null?void 0:r.sessionToken)!=null?p:"",dateNow:new Date().toISOString().replace(/-/g,"").split("T")[0],datetimeNow:new Date().toISOString().replace(/-/g,"").replace(/:/g,"").split(".")[0]+"Z"}}function Ho(r,a=!1){let u="0123456789ABCDEF",l="";for(let s=0;s<r.length;s++){let c=r[s];c>="A"&&c<="Z"||c>="a"&&c<="z"||c>="0"&&c<="9"||c=="_"||c=="-"||c=="~"||c=="."?l+=c:c=="/"?a?l+="%2F":l+=c:(l+="%",l+=u[c.charCodeAt(0)>>4],l+=u[c.charCodeAt(0)&15])}return l}function Uo(r,a=null){var q;let u=(q=a==null?void 0:a.contentHash)!=null?q:"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",l=new Map;l.set("x-amz-date",r.datetimeNow),l.set("x-amz-content-sha256",u),r.sessionToken&&l.set("x-amz-security-token",r.sessionToken);let s="";a!=null&&a.contentType&&(s+="content-type;"),s+="host;x-amz-content-sha256;x-amz-date",r.sessionToken&&(s+=";x-amz-security-token");let c=r.method+`
`+Ho(r.url)+`
`+r.query;a!=null&&a.contentType&&(c+=`
content-type:`+(a==null?void 0:a.contentType)),c+=`
host:`+r.host+`
x-amz-content-sha256:`+u+`
x-amz-date:`+r.datetimeNow,r.sessionToken&&r.sessionToken.length>0&&(c+=`
x-amz-security-token:`+r.sessionToken),c+=`

`+s+`
`+u;let f=(0,Fe.sha256)(c),_=`AWS4-HMAC-SHA256
`+r.datetimeNow+`
`+r.dateNow+"/"+r.region+"/"+r.service+`/aws4_request
`+f,p="AWS4"+r.secretAccessKey,A=Fe.sha256.hmac.arrayBuffer(p,r.dateNow),i=Fe.sha256.hmac.arrayBuffer(A,r.region),U=Fe.sha256.hmac.arrayBuffer(i,r.service),N=Fe.sha256.hmac.arrayBuffer(U,"aws4_request"),x=Fe.sha256.hmac(N,_);return l.set("Authorization","AWS4-HMAC-SHA256 Credential="+r.accessKeyId+"/"+r.dateNow+"/"+r.region+"/"+r.service+"/aws4_request, SignedHeaders="+s+", Signature="+x),l}var Oo=function(r,a,u,l=null,s=null){let c=Lo(r,a,u),f={contentType:l,contentHash:s?Fe.sha256.hex(s):null};return Uo(c,f)};function me(r,a,u,l,s=null,c=null){((a==null?void 0:a.accessKeyId)||(a==null?void 0:a.sessionToken))&&(Oo(a,u,l,s,c).forEach((_,p)=>{r.setRequestHeader(p,_)}),s&&r.setRequestHeader("content-type",s))}function Wn(r){if(r.indexOf("s3://")!=0)throw new Error("URL needs to start with s3://");let a=r.indexOf("/",5);if(a==-1)throw new Error("URL needs to contain a '/' after the host");let u=r.substring(5,a);if(!u)throw new Error("URL needs to contain a bucket name");let l=r.substring(a);if(!l)throw new Error("URL needs to contain key");return{bucket:u,path:l}}function Gn(r){var a;return!!((a=r==null?void 0:r.endpoint)!=null&&a.startsWith("http"))}function ye(r,a){let u=Wn(a);return Gn(r)?`${r==null?void 0:r.endpoint}/${u.bucket}`+u.path:"https://"+Nn(r,a,u.bucket)+u.path}var zn=new TextEncoder,Xn=new TextDecoder("utf-8");function Nt(r,a,u){let l=zn.encode(u),s=r._malloc(l.byteLength),c=r.HEAPU8.subarray(s,s+l.byteLength);c.set(l),r.HEAPF64[(a>>3)+0]=1,r.HEAPF64[(a>>3)+1]=s,r.HEAPF64[(a>>3)+2]=c.byteLength}function Gt(r){switch(r){case"UINT8":case"INT8":return 1;case"INT32":case"FLOAT":return 4;case"INT64":case"UINT64":case"DOUBLE":case"VARCHAR":return 8;default:return 0}}function Wt(r,a,u,l){let s=r.HEAPU8.subarray(a,a+l*Gt(u));switch(u){case"UINT8":return new Uint8Array(s.buffer,s.byteOffset,l);case"INT8":return new Int8Array(s.buffer,s.byteOffset,l);case"INT32":return new Int32Array(s.buffer,s.byteOffset,l);case"FLOAT":return new Float32Array(s.buffer,s.byteOffset,l);case"DOUBLE":return new Float64Array(s.buffer,s.byteOffset,l);case"VARCHAR":return new Float64Array(s.buffer,s.byteOffset,l);default:return new Array(0)}}function Yn(r,a,u){let l=r.HEAPU8.subarray(a,a+u);return new Uint8Array(l.buffer,l.byteOffset,u)}function lt(r,a,u){let l=r.HEAPU8.subarray(a,a+u*8);return new Float64Array(l.buffer,l.byteOffset,u)}function Kn(r,a,u,l,s,c,f,_){try{let p=r._udfFunctions.get(l);if(!p){Nt(a,u,"Unknown UDF with id: "+l);return}let A=Xn.decode(a.HEAPU8.subarray(s,s+c)),i=JSON.parse(A),U=lt(a,f,_/8),N=D=>{var ae;let X=null;switch(D.validityBuffer!==void 0&&(X=Yn(a,U[D.validityBuffer],i.rows)),D.physicalType){case"VARCHAR":{if(D.dataBuffer===null||D.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for VARCHAR argument");if(D.lengthBuffer===null||D.lengthBuffer===void 0)throw new Error("malformed data view, expected data length buffer for VARCHAR argument");let ie=Wt(a,U[D.dataBuffer],D.physicalType,i.rows),Y=[],Z=lt(a,U[D.lengthBuffer],i.rows);for(let j=0;j<i.rows;++j){if(X!=null&&!X[j]){Y.push(null);continue}let J=a.HEAPU8.subarray(ie[j],ie[j]+Z[j]),Ee=Xn.decode(J);Y.push(Ee)}return j=>Y[j]}case"STRUCT":{let ie={},Y=[];for(let Z=0;Z<(((ae=D.children)==null?void 0:ae.length)||0);++Z){let j=D.children[Z],J=N(j);Y.push(Ee=>{ie[j.name]=J(Ee)})}return X!=null?Z=>{if(!X[Z])return null;for(let j of Y)j(Z);return ie}:Z=>{for(let j of Y)j(Z);return ie}}default:{if(D.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for argument of type: "+D.physicalType);let ie=Wt(a,U[D.dataBuffer],D.physicalType,i.rows);return X!=null?Y=>X[Y]?ie[Y]:null:Y=>ie[Y]}}},x=[];for(let D=0;D<i.args.length;++D)x.push(N(i.args[D]));let q=i.rows*Gt(i.ret.physicalType),te=a._malloc(q),re=Wt(a,te,i.ret.physicalType,i.rows),oe=a._malloc(i.rows),Q=Yn(a,oe,i.rows);if(re.length==0||Q.length==0){Nt(a,u,"Can't create physical arrays for result");return}let O=re;i.ret.physicalType=="VARCHAR"&&(O=new Array(i.rows));let De=[];for(let D=0;D<i.args.length;++D)De.push(null);for(let D=0;D<i.rows;++D){for(let ae=0;ae<i.args.length;++ae)De[ae]=x[ae](D);let X=p.func(...De);O[D]=X,Q[D]=X==null?0:1}let S=0;switch(i.ret.physicalType){case"VARCHAR":{let D=new Array(0);S=a._malloc(i.rows*Gt("DOUBLE"));let X=lt(a,S,i.rows),ae=0;for(let j=0;j<i.rows;++j){let J=zn.encode(O[j]||"");D.push(J),X[j]=J.length,ae+=J.length}let ie=a._malloc(ae),Y=a.HEAPU8.subarray(ie,ie+ae),Z=0;for(let j=0;j<i.rows;++j){re[j]=Z;let J=D[j];Y.subarray(Z,Z+J.length).set(J),Z+=J.length}}}let ne=3*8,Oe=a._malloc(ne),we=lt(a,Oe,3);we[0]=te,we[1]=oe,we[2]=S,a.HEAPF64[(u>>3)+0]=0,a.HEAPF64[(u>>3)+1]=Oe,a.HEAPF64[(u>>3)+2]=0}catch(p){Nt(a,u,p.toString())}}function Bo(){let r=new TextDecoder;return a=>(typeof SharedArrayBuffer<"u"&&a.buffer instanceof SharedArrayBuffer&&(a=new Uint8Array(a)),r.decode(a))}var No=Bo();function fe(r,a){console.error(`FAIL WITH: ${a}`),r.ccall("duckdb_web_fail_with",null,["string"],[a])}function de(r,a,u){return No(r.HEAPU8.subarray(a,a+u))}function Xt(r,a,u,l){let s=r.stackSave(),c=r.stackAlloc(3*8);u.unshift("number"),l.unshift(c),r.ccall(a,null,u,l);let f=r.HEAPF64[(c>>3)+0],_=r.HEAPF64[(c>>3)+1],p=r.HEAPF64[(c>>3)+2];return r.stackRestore(s),[f,_,p]}function Yt(r){r.ccall("duckdb_web_clear_response",null,[],[])}var I={_files:new Map,_fileInfoCache:new Map,_udfFunctions:new Map,_globalFileInfo:null,getFileInfo(r,a){try{let u=I._fileInfoCache.get(a),[l,s,c]=Xt(r,"duckdb_web_fs_get_file_info_by_id",["number","number"],[a,(u==null?void 0:u.cacheEpoch)||0]);if(l!==0)return null;if(c===0)return u;let f=de(r,s,c);Yt(r);let _=JSON.parse(f);if(_==null)return null;let p={..._,blob:null};return I._fileInfoCache.set(a,p),p}catch(u){return null}},getGlobalFileInfo(r){var a;try{let[u,l,s]=Xt(r,"duckdb_web_get_global_file_info",["number"],[((a=I._globalFileInfo)==null?void 0:a.cacheEpoch)||0]);if(u!==0)return null;if(s===0)return I._globalFileInfo;let c=de(r,l,s);Yt(r);let f=JSON.parse(c);return f==null?null:(I._globalFileInfo={...f,blob:null},I._globalFileInfo)}catch(u){return null}},testPlatformFeature:(r,a)=>{switch(a){case 1:return typeof BigInt64Array<"u";default:return console.warn(`test for unknown feature: ${a}`),!1}},getDefaultDataProtocol(r){return 2},openFile:(r,a,u)=>{var l;try{I._fileInfoCache.delete(a);let s=I.getFileInfo(r,a);switch(s==null?void 0:s.dataProtocol){case 4:case 5:{if(u&1&&u&2)throw new Error(`Opening file ${s.fileName} failed: cannot open file with both read and write flags set`);if(u&32)throw new Error(`Opening file ${s.fileName} failed: appending to HTTP/S3 files is not supported`);if(u&2){let _=new XMLHttpRequest;if(s.dataProtocol==5?(_.open("HEAD",ye(s.s3Config,s.dataUrl),!1),me(_,s.s3Config,s.dataUrl,"HEAD")):_.open("HEAD",s.dataUrl,!1),_.send(null),_.status!=200&&_.status!=404)throw new Error(`Opening file ${s.fileName} failed: Unexpected return status from server (${_.status})`);if(_.status==404&&!(u&8||u&16))throw new Error(`Opening file ${s.fileName} failed: Cannot write to non-existent file without FILE_FLAGS_FILE_CREATE or FILE_FLAGS_FILE_CREATE_NEW flag.`);let p=r._malloc(1),A=new Uint8Array;r.HEAPU8.set(A,p);let i=r._malloc(2*8);return r.HEAPF64[(i>>3)+0]=1,r.HEAPF64[(i>>3)+1]=p,i}else if(u!=1)throw new Error(`Opening file ${s.fileName} failed: unsupported file flags: ${u}`);let c=null,f=null;try{let _=new XMLHttpRequest;if(s.dataProtocol==5?(_.open("HEAD",ye(s.s3Config,s.dataUrl),!1),me(_,s.s3Config,s.dataUrl,"HEAD")):_.open("HEAD",s.dataUrl,!1),_.setRequestHeader("Range","bytes=0-"),_.send(null),c=_.getResponseHeader("Content-Length"),c!==null&&_.status==206){let p=r._malloc(16);return r.HEAPF64[(p>>3)+0]=+c,r.HEAPF64[(p>>3)+1]=0,p}}catch(_){f=_,console.warn(`HEAD request with range header failed: ${_}`)}if(s.allowFullHttpReads){if(c!==null&&+c>1){let p=new XMLHttpRequest;s.dataProtocol==5?(p.open("GET",ye(s.s3Config,s.dataUrl),!1),me(p,s.s3Config,s.dataUrl,"GET")):p.open("GET",s.dataUrl,!1),p.setRequestHeader("Range","bytes=0-0"),p.send(null);let A=p.getResponseHeader("Content-Length");if(p.status==206&&A!==null&&+A==1){let i=r._malloc(16);return r.HEAPF64[(i>>3)+0]=+c,r.HEAPF64[(i>>3)+1]=0,i}if(p.status==200&&A!==null&&+A==+c){console.warn(`fall back to full HTTP read for: ${s.dataUrl}`);let i=r._malloc(p.response.byteLength),U=new Uint8Array(p.response,0,p.response.byteLength);r.HEAPU8.set(U,i);let N=r._malloc(2*8);return r.HEAPF64[(N>>3)+0]=p.response.byteLength,r.HEAPF64[(N>>3)+1]=i,N}}console.warn(`falling back to full HTTP read for: ${s.dataUrl}`);let _=new XMLHttpRequest;if(s.dataProtocol==5?(_.open("GET",ye(s.s3Config,s.dataUrl),!1),me(_,s.s3Config,s.dataUrl,"GET")):_.open("GET",s.dataUrl,!1),_.responseType="arraybuffer",_.send(null),_.status==200){let p=r._malloc(_.response.byteLength),A=new Uint8Array(_.response,0,_.response.byteLength);r.HEAPU8.set(A,p);let i=r._malloc(2*8);return r.HEAPF64[(i>>3)+0]=_.response.byteLength,r.HEAPF64[(i>>3)+1]=p,i}}if(f!=null)throw new Error(`Reading file ${s.fileName} failed with error: ${f}`);return 0}case 2:{let c=(l=I._files)==null?void 0:l.get(s.fileName);if(c){let p=r._malloc(16);return r.HEAPF64[(p>>3)+0]=c.size,r.HEAPF64[(p>>3)+1]=0,p}console.warn(`Buffering missing file: ${s.fileName}`);let f=r._malloc(2*8),_=r._malloc(1);return r.HEAPF64[(f>>3)+0]=1,r.HEAPF64[(f>>3)+1]=_,f}}}catch(s){console.error(s.toString()),fe(r,s.toString())}return 0},glob:(r,a,u)=>{var l;try{let s=de(r,a,u);if(s.startsWith("http")||s.startsWith("s3://")){let c=new XMLHttpRequest;if(s.startsWith("s3://")){let f=I.getGlobalFileInfo(r);c.open("HEAD",ye(f==null?void 0:f.s3Config,s),!1),me(c,f==null?void 0:f.s3Config,s,"HEAD")}else c.open("HEAD",s,!1);if(c.send(null),c.status!=200&&c.status!==206){if(!((l=I.getGlobalFileInfo(r))!=null&&l.allowFullHttpReads)){fe(r,`HEAD request failed: ${s}, with full http reads are disabled`);return}let f=new XMLHttpRequest;if(s.startsWith("s3://")){let p=I.getGlobalFileInfo(r);f.open("GET",ye(p==null?void 0:p.s3Config,s),!1),me(f,p==null?void 0:p.s3Config,s,"HEAD")}else f.open("GET",s,!1);if(f.setRequestHeader("Range","bytes=0-0"),f.send(null),f.status!=200&&f.status!==206){fe(r,`HEAD and GET requests failed: ${s}`);return}let _=f.getResponseHeader("Content-Length");_&&+_>1&&console.warn(`Range request for ${s} did not return a partial response: ${f.status} "${f.statusText}"`)}r.ccall("duckdb_web_fs_glob_add_path",null,["string"],[s])}}catch(s){return fe(r,s.toString()),0}},checkFile:(r,a,u)=>{try{let l=de(r,a,u);if(l.startsWith("http")||l.startsWith("s3://")){let s=new XMLHttpRequest;if(l.startsWith("s3://")){let c=I.getGlobalFileInfo(r);s.open("HEAD",ye(c==null?void 0:c.s3Config,l),!1),me(s,c==null?void 0:c.s3Config,l,"HEAD")}else s.open("HEAD",l,!1);return s.send(null),s.status==206||s.status==200}}catch(l){return!1}return!1},syncFile:(r,a)=>{},closeFile:(r,a)=>{var l;let u=I.getFileInfo(r,a);switch(I._fileInfoCache.delete(a),u==null?void 0:u.dataProtocol){case 0:case 4:case 5:break;case 1:case 2:return;case 3:{let s=(l=I._files)==null?void 0:l.get(u.fileName);if(!s)throw new Error(`No OPFS access handle registered with name: ${u.fileName}`);return s.flush()}}},truncateFile:(r,a,u)=>{var s;let l=I.getFileInfo(r,a);switch(l==null?void 0:l.dataProtocol){case 4:fe(r,"Cannot truncate a http file");return;case 5:fe(r,"Cannot truncate an s3 file");return;case 0:case 1:case 2:fe(r,"truncateFile not implemented");return;case 3:{let c=(s=I._files)==null?void 0:s.get(l.fileName);if(!c)throw new Error(`No OPFS access handle registered with name: ${l.fileName}`);return c.truncate(u)}}return 0},readFile(r,a,u,l,s){var c,f;if(l==0)return 0;try{let _=I.getFileInfo(r,a);switch(_==null?void 0:_.dataProtocol){case 4:case 5:{if(!_.dataUrl)throw new Error(`Missing data URL for file ${a}`);try{let p=new XMLHttpRequest;if(_.dataProtocol==5?(p.open("GET",ye(_==null?void 0:_.s3Config,_.dataUrl),!1),me(p,_==null?void 0:_.s3Config,_.dataUrl,"GET")):p.open("GET",_.dataUrl,!1),p.responseType="arraybuffer",p.setRequestHeader("Range",`bytes=${s}-${s+l-1}`),p.send(null),p.status==206||p.status==200&&l==p.response.byteLength&&s==0){let A=new Uint8Array(p.response,0,Math.min(p.response.byteLength,l));return r.HEAPU8.set(A,u),A.byteLength}else if(p.status==200){console.warn(`Range request for ${_.dataUrl} did not return a partial response: ${p.status} "${p.statusText}"`);let A=new Uint8Array(p.response,s,Math.min(p.response.byteLength-s,l));return r.HEAPU8.set(A,u),A.byteLength}else throw new Error(`Range request for ${_.dataUrl} did returned non-success status: ${p.status} "${p.statusText}"`)}catch(p){throw new Error(`Range request for ${_.dataUrl} failed with error: ${p}"`)}}case 2:{let p=(c=I._files)==null?void 0:c.get(_.fileName);if(!p)throw new Error(`No HTML5 file registered with name: ${_.fileName}`);let A=p.slice(s,s+l),i=new Uint8Array(new FileReaderSync().readAsArrayBuffer(A));return r.HEAPU8.set(i,u),i.byteLength}case 3:{let p=(f=I._files)==null?void 0:f.get(_.fileName);if(!p)throw new Error(`No OPFS access handle registered with name: ${_.fileName}`);let A=r.HEAPU8.subarray(u,u+l);return p.read(A,{at:s})}}return 0}catch(_){return fe(r,_.toString()),0}},writeFile:(r,a,u,l,s)=>{var f;let c=I.getFileInfo(r,a);switch(c==null?void 0:c.dataProtocol){case 4:return fe(r,"Cannot write to HTTP file"),0;case 5:{let _=r.HEAPU8.subarray(u,u+l),p=new XMLHttpRequest;return p.open("PUT",ye(c==null?void 0:c.s3Config,c.dataUrl),!1),me(p,c==null?void 0:c.s3Config,c.dataUrl,"PUT","",_),p.send(_),l}case 2:return fe(r,"cannot write using the html5 file reader api"),0;case 3:{let _=(f=I._files)==null?void 0:f.get(c.fileName);if(!_)throw new Error(`No OPFS access handle registered with name: ${c.fileName}`);let p=r.HEAPU8.subarray(u,u+l);return _.write(p,{at:s})}}return 0},getLastFileModificationTime:(r,a)=>{var l;let u=I.getFileInfo(r,a);switch(u==null?void 0:u.dataProtocol){case 2:{if(!((l=I._files)==null?void 0:l.get(u.fileName)))throw Error(`No handle available for file: ${u.fileName}`);return 0}case 4:case 5:return new Date().getTime()}return 0},checkDirectory:(r,a,u)=>{let l=de(r,a,u);return console.log(`checkDirectory: ${l}`),!1},createDirectory:(r,a,u)=>{let l=de(r,a,u);console.log(`createDirectory: ${l}`)},removeDirectory:(r,a,u)=>{let l=de(r,a,u);console.log(`removeDirectory: ${l}`)},listDirectoryEntries:(r,a,u)=>{let l=de(r,a,u);return console.log(`listDirectoryEntries: ${l}`),!1},moveFile:(r,a,u,l,s)=>{var p,A;let c=de(r,a,u),f=de(r,l,s),_=(p=I._files)==null?void 0:p.get(c);_!==void 0&&(I._files.delete(_),I._files.set(f,_));for(let[i,U]of((A=I._fileInfoCache)==null?void 0:A.entries())||[])if(U.dataUrl==c){I._fileInfoCache.delete(i);break}return!0},removeFile:(r,a,u)=>{},callScalarUDF:(r,a,u,l,s,c,f)=>{Kn(I,r,a,u,l,s,c,f)}};globalThis.DUCKDB_RUNTIME={};for(let r of Object.getOwnPropertyNames(I))r!="constructor"&&(globalThis.DUCKDB_RUNTIME[r]=Object.getOwnPropertyDescriptor(I,r).value);globalThis.onmessage=r=>{if(r.data.cmd==="load"){let a=On();a.wasmModule=r.data.wasmModule,a.wasmMemory=r.data.wasmMemory,a.buffer=a.wasmMemory.buffer,a.ENVIRONMENT_IS_PTHREAD=!0,jt(a).then(function(u){Pn(u)})}else if(r.data.cmd==="registerFileHandle")globalThis.DUCKDB_RUNTIME._files=globalThis.DUCKDB_RUNTIME._files||new Map,globalThis.DUCKDB_RUNTIME._files.set(r.data.fileName,r.data.fileHandle);else if(r.data.cmd==="dropFileHandle")globalThis.DUCKDB_RUNTIME._files=globalThis.DUCKDB_RUNTIME._files||new Map,globalThis.DUCKDB_RUNTIME._files.delete(r.data.fileName);else if(r.data.cmd==="registerUDFFunction")globalThis.DUCKDB_RUNTIME._udfFunctions=globalThis.DUCKDB_RUNTIME._files||new Map,globalThis.DUCKDB_RUNTIME._udfFunctions.set(r.data.udf.name,r.data.udf);else if(r.data.cmd==="dropUDFFunctions"){globalThis.DUCKDB_RUNTIME._udfFunctions=globalThis.DUCKDB_RUNTIME._files||new Map;for(let a of globalThis.DUCKDB_RUNTIME._udfFunctions.keys())globalThis.DUCKDB_RUNTIME._udfFunctions.get(a).connection_id==r.data.connectionId&&globalThis.DUCKDB_RUNTIME._udfFunctions.delete(a)}else Bt(r)};})();
/**
 * @license
 * Copyright 2015 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */
/**
 * [js-sha256]{@link https://github.com/emn178/js-sha256}
 *
 * @version 0.9.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */
//# sourceMappingURL=data:application/json;base64,
