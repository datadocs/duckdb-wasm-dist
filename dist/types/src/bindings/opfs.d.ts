export declare const opfsScheme = "opfs";
export declare const defaultOPFSDomain = "default";
export declare function stringifyOPFSURL(filePath: string, isDirectory: boolean, authority?: string): string;
export declare function parseOPFSURL(url: string): {
    domain: string;
    path: string;
} | undefined;
/** The file handle for OPFS */
export interface OPFSFileHandle {
    dirHandle?: FileSystemDirectoryHandle;
    filePath: string;
    fileName: string;
    domain: string;
    /**
     * A flag for the DuckDB internal file system, treat this file as absent if the file is empty.
     * Because the OPFS API is async, we need to create the placeholder file and
     * create the FileSystemSyncAccessHandle of it before DuckDB initialize the database
     * structure in the file.
     */
    emptyAsAbsent: boolean;
    file?: File;
    fileHandle?: FileSystemFileHandle;
    accessHandle?: FileSystemSyncAccessHandle;
    /**
     * Normalized URL of this OPFS handle,
     * it is generated by function `registerFileHandle` in web worker
     * @example `opfs://authority/path/to/test.db`
     */
    _url?: string;
}
export declare class OPFSFileHandleGenerator {
    readonly root: FileSystemDirectoryHandle;
    /** Keys in this map does not contain the leading '/' */
    private cachedDirHandles;
    constructor(root: FileSystemDirectoryHandle);
    getDirHandle(path: string | string[], options: {
        create?: boolean;
    }): Promise<FileSystemDirectoryHandle>;
    create(path: string | string[], options: CreateOPFSFileHandleOptions): Promise<OPFSFileHandle>;
}
export type CreateOPFSFileHandleOptions = {
    create?: boolean;
    /**
     * This option is useless for main thread,
     * Because createSyncAccessHandle can be used in the worker only
     */
    access?: boolean;
    domain?: string;
    emptyAsAbsent?: boolean;
};
export declare function createOPFSFileHandle(filePath: string, dirHandle: FileSystemDirectoryHandle, options?: CreateOPFSFileHandleOptions): Promise<OPFSFileHandle>;
export declare function createStandaloneOPFSFileHandle(fileHandle: FileSystemFileHandle, options?: Omit<CreateOPFSFileHandleOptions, 'create' | 'access'> & {
    fileName?: string;
}): OPFSFileHandle;
export declare function assertOPFSHandle<P extends boolean>(context: string, fileName: string, handle: any, requireAccessHandle?: P): asserts handle is P extends true ? Required<OPFSFileHandle> : OPFSFileHandle;
