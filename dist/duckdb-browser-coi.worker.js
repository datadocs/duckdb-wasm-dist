"use strict";var duckdb=(()=>{var I_=Object.create;var Rs=Object.defineProperty;var T_=Object.getOwnPropertyDescriptor;var A_=Object.getOwnPropertyNames;var F_=Object.getPrototypeOf,E_=Object.prototype.hasOwnProperty;var x_=(r=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(r,{get:(t,e)=>(typeof require<"u"?require:t)[e]}):r)(function(r){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+r+'" is not supported')});var Bu=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),An=(r,t)=>{for(var e in t)Rs(r,e,{get:t[e],enumerable:!0})},Mu=(r,t,e,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of A_(t))!E_.call(r,i)&&i!==e&&Rs(r,i,{get:()=>t[i],enumerable:!(n=T_(t,i))||n.enumerable});return r};var ja=(r,t,e)=>(e=r!=null?I_(F_(r)):{},Mu(t||!r||!r.__esModule?Rs(e,"default",{value:r,enumerable:!0}):e,r)),D_=r=>Mu(Rs({},"__esModule",{value:!0}),r);var Qu=Bu((z0,ks)=>{var Ou,Ru,Cu,Lu,ku,Uu,Nu,ju,Pu,Cs,Pa,Hu,Vu,zu,Jn,Wu,Yu,Gu,$u,Xu,Ku,Ju,qu,Zu,Ls;(function(r){var t=typeof global=="object"?global:typeof self=="object"?self:typeof this=="object"?this:{};typeof define=="function"&&define.amd?define("tslib",["exports"],function(n){r(e(t,e(n)))}):typeof ks=="object"&&typeof ks.exports=="object"?r(e(t,e(ks.exports))):r(e(t));function e(n,i){return n!==t&&(typeof Object.create=="function"?Object.defineProperty(n,"__esModule",{value:!0}):n.__esModule=!0),function(s,o){return n[s]=i?i(s,o):o}}})(function(r){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(n[s]=i[s])};Ou=function(n,i){if(typeof i!="function"&&i!==null)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");t(n,i);function s(){this.constructor=n}n.prototype=i===null?Object.create(i):(s.prototype=i.prototype,new s)},Ru=Object.assign||function(n){for(var i,s=1,o=arguments.length;s<o;s++){i=arguments[s];for(var l in i)Object.prototype.hasOwnProperty.call(i,l)&&(n[l]=i[l])}return n},Cu=function(n,i){var s={};for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&i.indexOf(o)<0&&(s[o]=n[o]);if(n!=null&&typeof Object.getOwnPropertySymbols=="function")for(var l=0,o=Object.getOwnPropertySymbols(n);l<o.length;l++)i.indexOf(o[l])<0&&Object.prototype.propertyIsEnumerable.call(n,o[l])&&(s[o[l]]=n[o[l]]);return s},Lu=function(n,i,s,o){var l=arguments.length,d=l<3?i:o===null?o=Object.getOwnPropertyDescriptor(i,s):o,h;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")d=Reflect.decorate(n,i,s,o);else for(var u=n.length-1;u>=0;u--)(h=n[u])&&(d=(l<3?h(d):l>3?h(i,s,d):h(i,s))||d);return l>3&&d&&Object.defineProperty(i,s,d),d},ku=function(n,i){return function(s,o){i(s,o,n)}},Uu=function(n,i){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(n,i)},Nu=function(n,i,s,o){function l(d){return d instanceof s?d:new s(function(h){h(d)})}return new(s||(s=Promise))(function(d,h){function u(A){try{S(o.next(A))}catch(rt){h(rt)}}function v(A){try{S(o.throw(A))}catch(rt){h(rt)}}function S(A){A.done?d(A.value):l(A.value).then(u,v)}S((o=o.apply(n,i||[])).next())})},ju=function(n,i){var s={label:0,sent:function(){if(d[0]&1)throw d[1];return d[1]},trys:[],ops:[]},o,l,d,h;return h={next:u(0),throw:u(1),return:u(2)},typeof Symbol=="function"&&(h[Symbol.iterator]=function(){return this}),h;function u(S){return function(A){return v([S,A])}}function v(S){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,l&&(d=S[0]&2?l.return:S[0]?l.throw||((d=l.return)&&d.call(l),0):l.next)&&!(d=d.call(l,S[1])).done)return d;switch(l=0,d&&(S=[S[0]&2,d.value]),S[0]){case 0:case 1:d=S;break;case 4:return s.label++,{value:S[1],done:!1};case 5:s.label++,l=S[1],S=[0];continue;case 7:S=s.ops.pop(),s.trys.pop();continue;default:if(d=s.trys,!(d=d.length>0&&d[d.length-1])&&(S[0]===6||S[0]===2)){s=0;continue}if(S[0]===3&&(!d||S[1]>d[0]&&S[1]<d[3])){s.label=S[1];break}if(S[0]===6&&s.label<d[1]){s.label=d[1],d=S;break}if(d&&s.label<d[2]){s.label=d[2],s.ops.push(S);break}d[2]&&s.ops.pop(),s.trys.pop();continue}S=i.call(n,s)}catch(A){S=[6,A],l=0}finally{o=d=0}if(S[0]&5)throw S[1];return{value:S[0]?S[1]:void 0,done:!0}}},Pu=function(n,i){for(var s in n)s!=="default"&&!Object.prototype.hasOwnProperty.call(i,s)&&Ls(i,n,s)},Ls=Object.create?function(n,i,s,o){o===void 0&&(o=s);var l=Object.getOwnPropertyDescriptor(i,s);(!l||("get"in l?!i.__esModule:l.writable||l.configurable))&&(l={enumerable:!0,get:function(){return i[s]}}),Object.defineProperty(n,o,l)}:function(n,i,s,o){o===void 0&&(o=s),n[o]=i[s]},Cs=function(n){var i=typeof Symbol=="function"&&Symbol.iterator,s=i&&n[i],o=0;if(s)return s.call(n);if(n&&typeof n.length=="number")return{next:function(){return n&&o>=n.length&&(n=void 0),{value:n&&n[o++],done:!n}}};throw new TypeError(i?"Object is not iterable.":"Symbol.iterator is not defined.")},Pa=function(n,i){var s=typeof Symbol=="function"&&n[Symbol.iterator];if(!s)return n;var o=s.call(n),l,d=[],h;try{for(;(i===void 0||i-- >0)&&!(l=o.next()).done;)d.push(l.value)}catch(u){h={error:u}}finally{try{l&&!l.done&&(s=o.return)&&s.call(o)}finally{if(h)throw h.error}}return d},Hu=function(){for(var n=[],i=0;i<arguments.length;i++)n=n.concat(Pa(arguments[i]));return n},Vu=function(){for(var n=0,i=0,s=arguments.length;i<s;i++)n+=arguments[i].length;for(var o=Array(n),l=0,i=0;i<s;i++)for(var d=arguments[i],h=0,u=d.length;h<u;h++,l++)o[l]=d[h];return o},zu=function(n,i,s){if(s||arguments.length===2)for(var o=0,l=i.length,d;o<l;o++)(d||!(o in i))&&(d||(d=Array.prototype.slice.call(i,0,o)),d[o]=i[o]);return n.concat(d||Array.prototype.slice.call(i))},Jn=function(n){return this instanceof Jn?(this.v=n,this):new Jn(n)},Wu=function(n,i,s){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var o=s.apply(n,i||[]),l,d=[];return l={},h("next"),h("throw"),h("return"),l[Symbol.asyncIterator]=function(){return this},l;function h(it){o[it]&&(l[it]=function(yt){return new Promise(function(gt,xt){d.push([it,yt,gt,xt])>1||u(it,yt)})})}function u(it,yt){try{v(o[it](yt))}catch(gt){rt(d[0][3],gt)}}function v(it){it.value instanceof Jn?Promise.resolve(it.value.v).then(S,A):rt(d[0][2],it)}function S(it){u("next",it)}function A(it){u("throw",it)}function rt(it,yt){it(yt),d.shift(),d.length&&u(d[0][0],d[0][1])}},Yu=function(n){var i,s;return i={},o("next"),o("throw",function(l){throw l}),o("return"),i[Symbol.iterator]=function(){return this},i;function o(l,d){i[l]=n[l]?function(h){return(s=!s)?{value:Jn(n[l](h)),done:l==="return"}:d?d(h):h}:d}},Gu=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i=n[Symbol.asyncIterator],s;return i?i.call(n):(n=typeof Cs=="function"?Cs(n):n[Symbol.iterator](),s={},o("next"),o("throw"),o("return"),s[Symbol.asyncIterator]=function(){return this},s);function o(d){s[d]=n[d]&&function(h){return new Promise(function(u,v){h=n[d](h),l(u,v,h.done,h.value)})}}function l(d,h,u,v){Promise.resolve(v).then(function(S){d({value:S,done:u})},h)}},$u=function(n,i){return Object.defineProperty?Object.defineProperty(n,"raw",{value:i}):n.raw=i,n};var e=Object.create?function(n,i){Object.defineProperty(n,"default",{enumerable:!0,value:i})}:function(n,i){n.default=i};Xu=function(n){if(n&&n.__esModule)return n;var i={};if(n!=null)for(var s in n)s!=="default"&&Object.prototype.hasOwnProperty.call(n,s)&&Ls(i,n,s);return e(i,n),i},Ku=function(n){return n&&n.__esModule?n:{default:n}},Ju=function(n,i,s,o){if(s==="a"&&!o)throw new TypeError("Private accessor was defined without a getter");if(typeof i=="function"?n!==i||!o:!i.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return s==="m"?o:s==="a"?o.call(n):o?o.value:i.get(n)},qu=function(n,i,s,o,l){if(o==="m")throw new TypeError("Private method is not writable");if(o==="a"&&!l)throw new TypeError("Private accessor was defined without a setter");if(typeof i=="function"?n!==i||!l:!i.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return o==="a"?l.call(n,s):l?l.value=s:i.set(n,s),s},Zu=function(n,i){if(i===null||typeof i!="object"&&typeof i!="function")throw new TypeError("Cannot use 'in' operator on non-object");return typeof n=="function"?i===n:n.has(i)},r("__extends",Ou),r("__assign",Ru),r("__rest",Cu),r("__decorate",Lu),r("__param",ku),r("__metadata",Uu),r("__awaiter",Nu),r("__generator",ju),r("__exportStar",Pu),r("__createBinding",Ls),r("__values",Cs),r("__read",Pa),r("__spread",Hu),r("__spreadArrays",Vu),r("__spreadArray",zu),r("__await",Jn),r("__asyncGenerator",Wu),r("__asyncDelegator",Yu),r("__asyncValues",Gu),r("__makeTemplateObject",$u),r("__importStar",Xu),r("__importDefault",Ku),r("__classPrivateFieldGet",Ju),r("__classPrivateFieldSet",qu),r("__classPrivateFieldIn",Zu)})});var Yf=Bu((exports,module)=>{(function(){"use strict";var ERROR="input is invalid type",WINDOW=typeof window=="object",root=WINDOW?window:{};root.JS_SHA256_NO_WINDOW&&(WINDOW=!1);var WEB_WORKER=!WINDOW&&typeof self=="object",NODE_JS=!root.JS_SHA256_NO_NODE_JS&&typeof process=="object"&&process.versions&&process.versions.node;NODE_JS?root=global:WEB_WORKER&&(root=self);var COMMON_JS=!root.JS_SHA256_NO_COMMON_JS&&typeof module=="object"&&module.exports,AMD=typeof define=="function"&&define.amd,ARRAY_BUFFER=!root.JS_SHA256_NO_ARRAY_BUFFER&&typeof ArrayBuffer<"u",HEX_CHARS="0123456789abcdef".split(""),EXTRA=[-2147483648,8388608,32768,128],SHIFT=[24,16,8,0],K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],OUTPUT_TYPES=["hex","array","digest","arrayBuffer"],blocks=[];(root.JS_SHA256_NO_NODE_JS||!Array.isArray)&&(Array.isArray=function(r){return Object.prototype.toString.call(r)==="[object Array]"}),ARRAY_BUFFER&&(root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW||!ArrayBuffer.isView)&&(ArrayBuffer.isView=function(r){return typeof r=="object"&&r.buffer&&r.buffer.constructor===ArrayBuffer});var createOutputMethod=function(r,t){return function(e){return new Sha256(t,!0).update(e)[r]()}},createMethod=function(r){var t=createOutputMethod("hex",r);NODE_JS&&(t=nodeWrap(t,r)),t.create=function(){return new Sha256(r)},t.update=function(i){return t.create().update(i)};for(var e=0;e<OUTPUT_TYPES.length;++e){var n=OUTPUT_TYPES[e];t[n]=createOutputMethod(n,r)}return t},nodeWrap=function(method,is224){var crypto=eval("require('crypto')"),Buffer=eval("require('buffer').Buffer"),algorithm=is224?"sha224":"sha256",nodeMethod=function(r){if(typeof r=="string")return crypto.createHash(algorithm).update(r,"utf8").digest("hex");if(r==null)throw new Error(ERROR);return r.constructor===ArrayBuffer&&(r=new Uint8Array(r)),Array.isArray(r)||ArrayBuffer.isView(r)||r.constructor===Buffer?crypto.createHash(algorithm).update(new Buffer(r)).digest("hex"):method(r)};return nodeMethod},createHmacOutputMethod=function(r,t){return function(e,n){return new HmacSha256(e,t,!0).update(n)[r]()}},createHmacMethod=function(r){var t=createHmacOutputMethod("hex",r);t.create=function(i){return new HmacSha256(i,r)},t.update=function(i,s){return t.create(i).update(s)};for(var e=0;e<OUTPUT_TYPES.length;++e){var n=OUTPUT_TYPES[e];t[n]=createHmacOutputMethod(n,r)}return t};function Sha256(r,t){t?(blocks[0]=blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0,this.blocks=blocks):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],r?(this.h0=3238371032,this.h1=914150663,this.h2=812702999,this.h3=4144912697,this.h4=4290775857,this.h5=1750603025,this.h6=1694076839,this.h7=3204075428):(this.h0=1779033703,this.h1=3144134277,this.h2=1013904242,this.h3=2773480762,this.h4=1359893119,this.h5=2600822924,this.h6=528734635,this.h7=1541459225),this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0,this.is224=r}Sha256.prototype.update=function(r){if(!this.finalized){var t,e=typeof r;if(e!=="string"){if(e==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);t=!0}for(var n,i=0,s,o=r.length,l=this.blocks;i<o;){if(this.hashed&&(this.hashed=!1,l[0]=this.block,l[16]=l[1]=l[2]=l[3]=l[4]=l[5]=l[6]=l[7]=l[8]=l[9]=l[10]=l[11]=l[12]=l[13]=l[14]=l[15]=0),t)for(s=this.start;i<o&&s<64;++i)l[s>>2]|=r[i]<<SHIFT[s++&3];else for(s=this.start;i<o&&s<64;++i)n=r.charCodeAt(i),n<128?l[s>>2]|=n<<SHIFT[s++&3]:n<2048?(l[s>>2]|=(192|n>>6)<<SHIFT[s++&3],l[s>>2]|=(128|n&63)<<SHIFT[s++&3]):n<55296||n>=57344?(l[s>>2]|=(224|n>>12)<<SHIFT[s++&3],l[s>>2]|=(128|n>>6&63)<<SHIFT[s++&3],l[s>>2]|=(128|n&63)<<SHIFT[s++&3]):(n=65536+((n&1023)<<10|r.charCodeAt(++i)&1023),l[s>>2]|=(240|n>>18)<<SHIFT[s++&3],l[s>>2]|=(128|n>>12&63)<<SHIFT[s++&3],l[s>>2]|=(128|n>>6&63)<<SHIFT[s++&3],l[s>>2]|=(128|n&63)<<SHIFT[s++&3]);this.lastByteIndex=s,this.bytes+=s-this.start,s>=64?(this.block=l[16],this.start=s-64,this.hash(),this.hashed=!0):this.start=s}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},Sha256.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var r=this.blocks,t=this.lastByteIndex;r[16]=this.block,r[t>>2]|=EXTRA[t&3],this.block=r[16],t>=56&&(this.hashed||this.hash(),r[0]=this.block,r[16]=r[1]=r[2]=r[3]=r[4]=r[5]=r[6]=r[7]=r[8]=r[9]=r[10]=r[11]=r[12]=r[13]=r[14]=r[15]=0),r[14]=this.hBytes<<3|this.bytes>>>29,r[15]=this.bytes<<3,this.hash()}},Sha256.prototype.hash=function(){var r=this.h0,t=this.h1,e=this.h2,n=this.h3,i=this.h4,s=this.h5,o=this.h6,l=this.h7,d=this.blocks,h,u,v,S,A,rt,it,yt,gt,xt,pt;for(h=16;h<64;++h)A=d[h-15],u=(A>>>7|A<<25)^(A>>>18|A<<14)^A>>>3,A=d[h-2],v=(A>>>17|A<<15)^(A>>>19|A<<13)^A>>>10,d[h]=d[h-16]+u+d[h-7]+v<<0;for(pt=t&e,h=0;h<64;h+=4)this.first?(this.is224?(yt=300032,A=d[0]-1413257819,l=A-150054599<<0,n=A+24177077<<0):(yt=704751109,A=d[0]-210244248,l=A-1521486534<<0,n=A+143694565<<0),this.first=!1):(u=(r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10),v=(i>>>6|i<<26)^(i>>>11|i<<21)^(i>>>25|i<<7),yt=r&t,S=yt^r&e^pt,it=i&s^~i&o,A=l+v+it+K[h]+d[h],rt=u+S,l=n+A<<0,n=A+rt<<0),u=(n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10),v=(l>>>6|l<<26)^(l>>>11|l<<21)^(l>>>25|l<<7),gt=n&r,S=gt^n&t^yt,it=l&i^~l&s,A=o+v+it+K[h+1]+d[h+1],rt=u+S,o=e+A<<0,e=A+rt<<0,u=(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10),v=(o>>>6|o<<26)^(o>>>11|o<<21)^(o>>>25|o<<7),xt=e&n,S=xt^e&r^gt,it=o&l^~o&i,A=s+v+it+K[h+2]+d[h+2],rt=u+S,s=t+A<<0,t=A+rt<<0,u=(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10),v=(s>>>6|s<<26)^(s>>>11|s<<21)^(s>>>25|s<<7),pt=t&e,S=pt^t&n^xt,it=s&o^~s&l,A=i+v+it+K[h+3]+d[h+3],rt=u+S,i=r+A<<0,r=A+rt<<0;this.h0=this.h0+r<<0,this.h1=this.h1+t<<0,this.h2=this.h2+e<<0,this.h3=this.h3+n<<0,this.h4=this.h4+i<<0,this.h5=this.h5+s<<0,this.h6=this.h6+o<<0,this.h7=this.h7+l<<0},Sha256.prototype.hex=function(){this.finalize();var r=this.h0,t=this.h1,e=this.h2,n=this.h3,i=this.h4,s=this.h5,o=this.h6,l=this.h7,d=HEX_CHARS[r>>28&15]+HEX_CHARS[r>>24&15]+HEX_CHARS[r>>20&15]+HEX_CHARS[r>>16&15]+HEX_CHARS[r>>12&15]+HEX_CHARS[r>>8&15]+HEX_CHARS[r>>4&15]+HEX_CHARS[r&15]+HEX_CHARS[t>>28&15]+HEX_CHARS[t>>24&15]+HEX_CHARS[t>>20&15]+HEX_CHARS[t>>16&15]+HEX_CHARS[t>>12&15]+HEX_CHARS[t>>8&15]+HEX_CHARS[t>>4&15]+HEX_CHARS[t&15]+HEX_CHARS[e>>28&15]+HEX_CHARS[e>>24&15]+HEX_CHARS[e>>20&15]+HEX_CHARS[e>>16&15]+HEX_CHARS[e>>12&15]+HEX_CHARS[e>>8&15]+HEX_CHARS[e>>4&15]+HEX_CHARS[e&15]+HEX_CHARS[n>>28&15]+HEX_CHARS[n>>24&15]+HEX_CHARS[n>>20&15]+HEX_CHARS[n>>16&15]+HEX_CHARS[n>>12&15]+HEX_CHARS[n>>8&15]+HEX_CHARS[n>>4&15]+HEX_CHARS[n&15]+HEX_CHARS[i>>28&15]+HEX_CHARS[i>>24&15]+HEX_CHARS[i>>20&15]+HEX_CHARS[i>>16&15]+HEX_CHARS[i>>12&15]+HEX_CHARS[i>>8&15]+HEX_CHARS[i>>4&15]+HEX_CHARS[i&15]+HEX_CHARS[s>>28&15]+HEX_CHARS[s>>24&15]+HEX_CHARS[s>>20&15]+HEX_CHARS[s>>16&15]+HEX_CHARS[s>>12&15]+HEX_CHARS[s>>8&15]+HEX_CHARS[s>>4&15]+HEX_CHARS[s&15]+HEX_CHARS[o>>28&15]+HEX_CHARS[o>>24&15]+HEX_CHARS[o>>20&15]+HEX_CHARS[o>>16&15]+HEX_CHARS[o>>12&15]+HEX_CHARS[o>>8&15]+HEX_CHARS[o>>4&15]+HEX_CHARS[o&15];return this.is224||(d+=HEX_CHARS[l>>28&15]+HEX_CHARS[l>>24&15]+HEX_CHARS[l>>20&15]+HEX_CHARS[l>>16&15]+HEX_CHARS[l>>12&15]+HEX_CHARS[l>>8&15]+HEX_CHARS[l>>4&15]+HEX_CHARS[l&15]),d},Sha256.prototype.toString=Sha256.prototype.hex,Sha256.prototype.digest=function(){this.finalize();var r=this.h0,t=this.h1,e=this.h2,n=this.h3,i=this.h4,s=this.h5,o=this.h6,l=this.h7,d=[r>>24&255,r>>16&255,r>>8&255,r&255,t>>24&255,t>>16&255,t>>8&255,t&255,e>>24&255,e>>16&255,e>>8&255,e&255,n>>24&255,n>>16&255,n>>8&255,n&255,i>>24&255,i>>16&255,i>>8&255,i&255,s>>24&255,s>>16&255,s>>8&255,s&255,o>>24&255,o>>16&255,o>>8&255,o&255];return this.is224||d.push(l>>24&255,l>>16&255,l>>8&255,l&255),d},Sha256.prototype.array=Sha256.prototype.digest,Sha256.prototype.arrayBuffer=function(){this.finalize();var r=new ArrayBuffer(this.is224?28:32),t=new DataView(r);return t.setUint32(0,this.h0),t.setUint32(4,this.h1),t.setUint32(8,this.h2),t.setUint32(12,this.h3),t.setUint32(16,this.h4),t.setUint32(20,this.h5),t.setUint32(24,this.h6),this.is224||t.setUint32(28,this.h7),r};function HmacSha256(r,t,e){var n,i=typeof r;if(i==="string"){var s=[],o=r.length,l=0,d;for(n=0;n<o;++n)d=r.charCodeAt(n),d<128?s[l++]=d:d<2048?(s[l++]=192|d>>6,s[l++]=128|d&63):d<55296||d>=57344?(s[l++]=224|d>>12,s[l++]=128|d>>6&63,s[l++]=128|d&63):(d=65536+((d&1023)<<10|r.charCodeAt(++n)&1023),s[l++]=240|d>>18,s[l++]=128|d>>12&63,s[l++]=128|d>>6&63,s[l++]=128|d&63);r=s}else if(i==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);r.length>64&&(r=new Sha256(t,!0).update(r).array());var h=[],u=[];for(n=0;n<64;++n){var v=r[n]||0;h[n]=92^v,u[n]=54^v}Sha256.call(this,t,e),this.update(u),this.oKeyPad=h,this.inner=!0,this.sharedMemory=e}HmacSha256.prototype=new Sha256,HmacSha256.prototype.finalize=function(){if(Sha256.prototype.finalize.call(this),this.inner){this.inner=!1;var r=this.array();Sha256.call(this,this.is224,this.sharedMemory),this.update(this.oKeyPad),this.update(r),Sha256.prototype.finalize.call(this)}};var exports=createMethod();exports.sha256=exports,exports.sha224=createMethod(!0),exports.sha256.hmac=createHmacMethod(),exports.sha224.hmac=createHmacMethod(!0),COMMON_JS?module.exports=exports:(root.sha256=exports.sha256,root.sha224=exports.sha224,AMD&&define(function(){return exports}))})()});var vb={};An(vb,{registerWorker:()=>Kf});var td=ja(Qu(),1),{__extends:W0,__assign:Y0,__rest:ed,__decorate:G0,__param:$0,__metadata:X0,__awaiter:x,__generator:K0,__exportStar:J0,__createBinding:q0,__values:Z0,__read:Q0,__spread:tw,__spreadArrays:ew,__spreadArray:rw,__await:q,__asyncGenerator:ye,__asyncDelegator:qn,__asyncValues:Pe,__makeTemplateObject:nw,__importStar:iw,__importDefault:sw,__classPrivateFieldGet:ow,__classPrivateFieldSet:aw,__classPrivateFieldIn:lw}=td.default;var Ga={};An(Ga,{compareArrayLike:()=>Ya,joinUint8Arrays:()=>Me,memcpy:()=>Zn,rebaseValueOffsets:()=>ki,toArrayBufferView:()=>Q,toArrayBufferViewAsyncIterator:()=>Ze,toArrayBufferViewIterator:()=>mr,toBigInt64Array:()=>k_,toBigUint64Array:()=>j_,toFloat32Array:()=>P_,toFloat32ArrayAsyncIterator:()=>rm,toFloat32ArrayIterator:()=>X_,toFloat64Array:()=>H_,toFloat64ArrayAsyncIterator:()=>nm,toFloat64ArrayIterator:()=>K_,toInt16Array:()=>L_,toInt16ArrayAsyncIterator:()=>Z_,toInt16ArrayIterator:()=>W_,toInt32Array:()=>Fn,toInt32ArrayAsyncIterator:()=>Q_,toInt32ArrayIterator:()=>Y_,toInt8Array:()=>C_,toInt8ArrayAsyncIterator:()=>q_,toInt8ArrayIterator:()=>z_,toUint16Array:()=>U_,toUint16ArrayAsyncIterator:()=>tm,toUint16ArrayIterator:()=>G_,toUint32Array:()=>N_,toUint32ArrayAsyncIterator:()=>em,toUint32ArrayIterator:()=>$_,toUint8Array:()=>H,toUint8ArrayAsyncIterator:()=>Wa,toUint8ArrayIterator:()=>za,toUint8ClampedArray:()=>V_,toUint8ClampedArrayAsyncIterator:()=>im,toUint8ClampedArrayIterator:()=>J_});var B_=new TextDecoder("utf-8"),Ci=r=>B_.decode(r),M_=new TextEncoder,on=r=>M_.encode(r);var[dw,Us]=(()=>{let r=()=>{throw new Error("BigInt is not available in this environment")};function t(){throw r()}return t.asIntN=()=>{throw r()},t.asUintN=()=>{throw r()},typeof BigInt<"u"?[BigInt,!0]:[t,!1]})(),[He,fw]=(()=>{let r=()=>{throw new Error("BigInt64Array is not available in this environment")};class t{static get BYTES_PER_ELEMENT(){return 8}static of(){throw r()}static from(){throw r()}constructor(){throw r()}}return typeof BigInt64Array<"u"?[BigInt64Array,!0]:[t,!1]})(),[Ve,hw]=(()=>{let r=()=>{throw new Error("BigUint64Array is not available in this environment")};class t{static get BYTES_PER_ELEMENT(){return 8}static of(){throw r()}static from(){throw r()}constructor(){throw r()}}return typeof BigUint64Array<"u"?[BigUint64Array,!0]:[t,!1]})();var O_=r=>typeof r=="number",rd=r=>typeof r=="boolean",Gt=r=>typeof r=="function",he=r=>r!=null&&Object(r)===r,Je=r=>he(r)&&Gt(r.then);var qe=r=>he(r)&&Gt(r[Symbol.iterator]),ze=r=>he(r)&&Gt(r[Symbol.asyncIterator]),Ns=r=>he(r)&&he(r.schema);var js=r=>he(r)&&"done"in r&&"value"in r;var Ps=r=>he(r)&&Gt(r.stat)&&O_(r.fd);var Hs=r=>he(r)&&Li(r.body),Vs=r=>"_getDOMStream"in r&&"_getNodeStream"in r,nd=r=>he(r)&&Gt(r.abort)&&Gt(r.getWriter)&&!Vs(r),Li=r=>he(r)&&Gt(r.cancel)&&Gt(r.getReader)&&!Vs(r),id=r=>he(r)&&Gt(r.end)&&Gt(r.write)&&rd(r.writable)&&!Vs(r),zs=r=>he(r)&&Gt(r.read)&&Gt(r.pipe)&&rd(r.readable)&&!Vs(r),sd=r=>he(r)&&Gt(r.clear)&&Gt(r.bytes)&&Gt(r.position)&&Gt(r.setPosition)&&Gt(r.capacity)&&Gt(r.getBufferIdentifier)&&Gt(r.createLong);var Va=typeof SharedArrayBuffer<"u"?SharedArrayBuffer:ArrayBuffer;function R_(r){let t=r[0]?[r[0]]:[],e,n,i,s;for(let o,l,d=0,h=0,u=r.length;++d<u;){if(o=t[h],l=r[d],!o||!l||o.buffer!==l.buffer||l.byteOffset<o.byteOffset){l&&(t[++h]=l);continue}if({byteOffset:e,byteLength:i}=o,{byteOffset:n,byteLength:s}=l,e+i<n||n+s<e){l&&(t[++h]=l);continue}t[h]=new Uint8Array(o.buffer,e,n-e+s)}return t}function Zn(r,t,e=0,n=t.byteLength){let i=r.byteLength,s=new Uint8Array(r.buffer,r.byteOffset,i),o=new Uint8Array(t.buffer,t.byteOffset,Math.min(n,i));return s.set(o,e),r}function Me(r,t){let e=R_(r),n=e.reduce((u,v)=>u+v.byteLength,0),i,s,o,l=0,d=-1,h=Math.min(t||Number.POSITIVE_INFINITY,n);for(let u=e.length;++d<u;){if(i=e[d],s=i.subarray(0,Math.min(i.length,h-l)),h<=l+s.length){s.length<i.length?e[d]=i.subarray(s.length):s.length===i.length&&d++,o?Zn(o,s,l):o=s;break}Zn(o||(o=new Uint8Array(h)),s,l),l+=s.length}return[o||new Uint8Array(0),e.slice(d),n-(o?o.byteLength:0)]}function Q(r,t){let e=js(t)?t.value:t;return e instanceof r?r===Uint8Array?new r(e.buffer,e.byteOffset,e.byteLength):e:e?(typeof e=="string"&&(e=on(e)),e instanceof ArrayBuffer?new r(e):e instanceof Va?new r(e):sd(e)?Q(r,e.bytes()):ArrayBuffer.isView(e)?e.byteLength<=0?new r(0):new r(e.buffer,e.byteOffset,e.byteLength/r.BYTES_PER_ELEMENT):r.from(e)):new r(0)}var C_=r=>Q(Int8Array,r),L_=r=>Q(Int16Array,r),Fn=r=>Q(Int32Array,r),k_=r=>Q(He,r),H=r=>Q(Uint8Array,r),U_=r=>Q(Uint16Array,r),N_=r=>Q(Uint32Array,r),j_=r=>Q(Ve,r),P_=r=>Q(Float32Array,r),H_=r=>Q(Float64Array,r),V_=r=>Q(Uint8ClampedArray,r),Ha=r=>(r.next(),r);function*mr(r,t){let e=function*(i){yield i},n=typeof t=="string"||ArrayBuffer.isView(t)||t instanceof ArrayBuffer||t instanceof Va?e(t):qe(t)?t:e(t);return yield*Ha(function*(i){let s=null;do s=i.next(yield Q(r,s));while(!s.done)}(n[Symbol.iterator]())),new r}var z_=r=>mr(Int8Array,r),W_=r=>mr(Int16Array,r),Y_=r=>mr(Int32Array,r),za=r=>mr(Uint8Array,r),G_=r=>mr(Uint16Array,r),$_=r=>mr(Uint32Array,r),X_=r=>mr(Float32Array,r),K_=r=>mr(Float64Array,r),J_=r=>mr(Uint8ClampedArray,r);function Ze(r,t){return ye(this,arguments,function*(){if(Je(t))return yield q(yield q(yield*qn(Pe(Ze(r,yield q(t))))));let n=function(o){return ye(this,arguments,function*(){yield yield q(yield q(o))})},i=function(o){return ye(this,arguments,function*(){yield q(yield*qn(Pe(Ha(function*(l){let d=null;do d=l.next(yield d==null?void 0:d.value);while(!d.done)}(o[Symbol.iterator]())))))})},s=typeof t=="string"||ArrayBuffer.isView(t)||t instanceof ArrayBuffer||t instanceof Va?n(t):qe(t)?i(t):ze(t)?t:n(t);return yield q(yield*qn(Pe(Ha(function(o){return ye(this,arguments,function*(){let l=null;do l=yield q(o.next(yield yield q(Q(r,l))));while(!l.done)})}(s[Symbol.asyncIterator]()))))),yield q(new r)})}var q_=r=>Ze(Int8Array,r),Z_=r=>Ze(Int16Array,r),Q_=r=>Ze(Int32Array,r),Wa=r=>Ze(Uint8Array,r),tm=r=>Ze(Uint16Array,r),em=r=>Ze(Uint32Array,r),rm=r=>Ze(Float32Array,r),nm=r=>Ze(Float64Array,r),im=r=>Ze(Uint8ClampedArray,r);function ki(r,t,e){if(r!==0){e=e.slice(0,t+1);for(let n=-1;++n<=t;)e[n]+=r}return e}function Ya(r,t){let e=0,n=r.length;if(n!==t.length)return!1;if(n>0)do if(r[e]!==t[e])return!1;while(++e<n);return!0}var ee={fromIterable(r){return Ws(sm(r))},fromAsyncIterable(r){return Ws(om(r))},fromDOMStream(r){return Ws(am(r))},fromNodeStream(r){return Ws(lm(r))},toDOMStream(r,t){throw new Error('"toDOMStream" not available in this environment')},toNodeStream(r,t){throw new Error('"toNodeStream" not available in this environment')}},Ws=r=>(r.next(),r);function*sm(r){let t,e=!1,n=[],i,s,o,l=0;function d(){return s==="peek"?Me(n,o)[0]:([i,n,l]=Me(n,o),i)}({cmd:s,size:o}=yield null);let h=za(r)[Symbol.iterator]();try{do if({done:t,value:i}=Number.isNaN(o-l)?h.next():h.next(o-l),!t&&i.byteLength>0&&(n.push(i),l+=i.byteLength),t||o<=l)do({cmd:s,size:o}=yield d());while(o<l);while(!t)}catch(u){(e=!0)&&typeof h.throw=="function"&&h.throw(u)}finally{e===!1&&typeof h.return=="function"&&h.return(null)}return null}function om(r){return ye(this,arguments,function*(){let e,n=!1,i=[],s,o,l,d=0;function h(){return o==="peek"?Me(i,l)[0]:([s,i,d]=Me(i,l),s)}({cmd:o,size:l}=yield yield q(null));let u=Wa(r)[Symbol.asyncIterator]();try{do if({done:e,value:s}=Number.isNaN(l-d)?yield q(u.next()):yield q(u.next(l-d)),!e&&s.byteLength>0&&(i.push(s),d+=s.byteLength),e||l<=d)do({cmd:o,size:l}=yield yield q(h()));while(l<d);while(!e)}catch(v){(n=!0)&&typeof u.throw=="function"&&(yield q(u.throw(v)))}finally{n===!1&&typeof u.return=="function"&&(yield q(u.return(new Uint8Array(0))))}return yield q(null)})}function am(r){return ye(this,arguments,function*(){let e=!1,n=!1,i=[],s,o,l,d=0;function h(){return o==="peek"?Me(i,l)[0]:([s,i,d]=Me(i,l),s)}({cmd:o,size:l}=yield yield q(null));let u=new Xa(r);try{do if({done:e,value:s}=Number.isNaN(l-d)?yield q(u.read()):yield q(u.read(l-d)),!e&&s.byteLength>0&&(i.push(H(s)),d+=s.byteLength),e||l<=d)do({cmd:o,size:l}=yield yield q(h()));while(l<d);while(!e)}catch(v){(n=!0)&&(yield q(u.cancel(v)))}finally{n===!1?yield q(u.cancel()):r.locked&&u.releaseLock()}return yield q(null)})}var Xa=class{constructor(t){this.source=t,this.reader=null,this.reader=this.source.getReader(),this.reader.closed.catch(()=>{})}get closed(){return this.reader?this.reader.closed.catch(()=>{}):Promise.resolve()}releaseLock(){this.reader&&this.reader.releaseLock(),this.reader=null}cancel(t){return x(this,void 0,void 0,function*(){let{reader:e,source:n}=this;e&&(yield e.cancel(t).catch(()=>{})),n&&n.locked&&this.releaseLock()})}read(t){return x(this,void 0,void 0,function*(){if(t===0)return{done:this.reader==null,value:new Uint8Array(0)};let e=yield this.reader.read();return!e.done&&(e.value=H(e)),e})}},$a=(r,t)=>{let e=i=>n([t,i]),n;return[t,e,new Promise(i=>(n=i)&&r.once(t,e))]};function lm(r){return ye(this,arguments,function*(){let e=[],n="error",i=!1,s=null,o,l,d=0,h=[],u;function v(){return o==="peek"?Me(h,l)[0]:([u,h,d]=Me(h,l),u)}if({cmd:o,size:l}=yield yield q(null),r.isTTY)return yield yield q(new Uint8Array(0)),yield q(null);try{e[0]=$a(r,"end"),e[1]=$a(r,"error");do{if(e[2]=$a(r,"readable"),[n,s]=yield q(Promise.race(e.map(A=>A[2]))),n==="error")break;if((i=n==="end")||(Number.isFinite(l-d)?(u=H(r.read(l-d)),u.byteLength<l-d&&(u=H(r.read()))):u=H(r.read()),u.byteLength>0&&(h.push(u),d+=u.byteLength)),i||l<=d)do({cmd:o,size:l}=yield yield q(v()));while(l<d)}while(!i)}finally{yield q(S(e,n==="error"?s:null))}return yield q(null);function S(A,rt){return u=h=null,new Promise((it,yt)=>{for(let[gt,xt]of A)r.off(gt,xt);try{let gt=r.destroy;gt&&gt.call(r,rt),rt=void 0}catch(gt){rt=gt||rt}finally{rt!=null?yt(rt):it()}})}})}var Xt;(function(r){r[r.V1=0]="V1",r[r.V2=1]="V2",r[r.V3=2]="V3",r[r.V4=3]="V4",r[r.V5=4]="V5"})(Xt||(Xt={}));var Bt;(function(r){r[r.Sparse=0]="Sparse",r[r.Dense=1]="Dense"})(Bt||(Bt={}));var At;(function(r){r[r.HALF=0]="HALF",r[r.SINGLE=1]="SINGLE",r[r.DOUBLE=2]="DOUBLE"})(At||(At={}));var re;(function(r){r[r.DAY=0]="DAY",r[r.MILLISECOND=1]="MILLISECOND"})(re||(re={}));var et;(function(r){r[r.SECOND=0]="SECOND",r[r.MILLISECOND=1]="MILLISECOND",r[r.MICROSECOND=2]="MICROSECOND",r[r.NANOSECOND=3]="NANOSECOND"})(et||(et={}));var pe;(function(r){r[r.YEAR_MONTH=0]="YEAR_MONTH",r[r.DAY_TIME=1]="DAY_TIME",r[r.MONTH_DAY_NANO=2]="MONTH_DAY_NANO"})(pe||(pe={}));var lt;(function(r){r[r.NONE=0]="NONE",r[r.Schema=1]="Schema",r[r.DictionaryBatch=2]="DictionaryBatch",r[r.RecordBatch=3]="RecordBatch",r[r.Tensor=4]="Tensor",r[r.SparseTensor=5]="SparseTensor"})(lt||(lt={}));var _;(function(r){r[r.NONE=0]="NONE",r[r.Null=1]="Null",r[r.Int=2]="Int",r[r.Float=3]="Float",r[r.Binary=4]="Binary",r[r.Utf8=5]="Utf8",r[r.Bool=6]="Bool",r[r.Decimal=7]="Decimal",r[r.Date=8]="Date",r[r.Time=9]="Time",r[r.Timestamp=10]="Timestamp",r[r.Interval=11]="Interval",r[r.List=12]="List",r[r.Struct=13]="Struct",r[r.Union=14]="Union",r[r.FixedSizeBinary=15]="FixedSizeBinary",r[r.FixedSizeList=16]="FixedSizeList",r[r.Map=17]="Map",r[r.Dictionary=-1]="Dictionary",r[r.Int8=-2]="Int8",r[r.Int16=-3]="Int16",r[r.Int32=-4]="Int32",r[r.Int64=-5]="Int64",r[r.Uint8=-6]="Uint8",r[r.Uint16=-7]="Uint16",r[r.Uint32=-8]="Uint32",r[r.Uint64=-9]="Uint64",r[r.Float16=-10]="Float16",r[r.Float32=-11]="Float32",r[r.Float64=-12]="Float64",r[r.DateDay=-13]="DateDay",r[r.DateMillisecond=-14]="DateMillisecond",r[r.TimestampSecond=-15]="TimestampSecond",r[r.TimestampMillisecond=-16]="TimestampMillisecond",r[r.TimestampMicrosecond=-17]="TimestampMicrosecond",r[r.TimestampNanosecond=-18]="TimestampNanosecond",r[r.TimeSecond=-19]="TimeSecond",r[r.TimeMillisecond=-20]="TimeMillisecond",r[r.TimeMicrosecond=-21]="TimeMicrosecond",r[r.TimeNanosecond=-22]="TimeNanosecond",r[r.DenseUnion=-23]="DenseUnion",r[r.SparseUnion=-24]="SparseUnion",r[r.IntervalDayTime=-25]="IntervalDayTime",r[r.IntervalYearMonth=-26]="IntervalYearMonth"})(_||(_={}));var We;(function(r){r[r.OFFSET=0]="OFFSET",r[r.DATA=1]="DATA",r[r.VALIDITY=2]="VALIDITY",r[r.TYPE=3]="TYPE"})(We||(We={}));var dl={};An(dl,{clampIndex:()=>Qm,clampRange:()=>ji,createElementComparator:()=>un});var cm=void 0;function Qe(r){if(r===null)return"null";if(r===cm)return"undefined";switch(typeof r){case"number":return`${r}`;case"bigint":return`${r}`;case"string":return`"${r}"`}return typeof r[Symbol.toPrimitive]=="function"?r[Symbol.toPrimitive]("string"):ArrayBuffer.isView(r)?r instanceof He||r instanceof Ve?`[${[...r].map(t=>Qe(t))}]`:`[${r}]`:ArrayBuffer.isView(r)?`[${r}]`:JSON.stringify(r,(t,e)=>typeof e=="bigint"?`${e}`:e)}var Ja={};An(Ja,{BN:()=>En,bignumToBigInt:()=>Ys,bignumToString:()=>an,isArrowBigNumSymbol:()=>od});var od=Symbol.for("isArrowBigNum");function tr(r,...t){return t.length===0?Object.setPrototypeOf(Q(this.TypedArray,r),this.constructor.prototype):Object.setPrototypeOf(new this.TypedArray(r,...t),this.constructor.prototype)}tr.prototype[od]=!0;tr.prototype.toJSON=function(){return`"${an(this)}"`};tr.prototype.valueOf=function(){return ad(this)};tr.prototype.toString=function(){return an(this)};tr.prototype[Symbol.toPrimitive]=function(r="default"){switch(r){case"number":return ad(this);case"string":return an(this);case"default":return Ys(this)}return an(this)};function Qn(...r){return tr.apply(this,r)}function ti(...r){return tr.apply(this,r)}function Ui(...r){return tr.apply(this,r)}Object.setPrototypeOf(Qn.prototype,Object.create(Int32Array.prototype));Object.setPrototypeOf(ti.prototype,Object.create(Uint32Array.prototype));Object.setPrototypeOf(Ui.prototype,Object.create(Uint32Array.prototype));Object.assign(Qn.prototype,tr.prototype,{constructor:Qn,signed:!0,TypedArray:Int32Array,BigIntArray:He});Object.assign(ti.prototype,tr.prototype,{constructor:ti,signed:!1,TypedArray:Uint32Array,BigIntArray:Ve});Object.assign(Ui.prototype,tr.prototype,{constructor:Ui,signed:!0,TypedArray:Uint32Array,BigIntArray:Ve});function ad(r){let{buffer:t,byteOffset:e,length:n,signed:i}=r,s=new Ve(t,e,n),o=i&&s[s.length-1]&BigInt(1)<<BigInt(63),l=BigInt(o?1:0),d=BigInt(0);if(o){for(let h of s)l+=~h*(BigInt(1)<<BigInt(32)*d++);l*=BigInt(-1)}else for(let h of s)l+=h*(BigInt(1)<<BigInt(32)*d++);return l}var an,Ys;Us?(Ys=r=>r.byteLength===8?new r.BigIntArray(r.buffer,r.byteOffset,1)[0]:Ka(r),an=r=>r.byteLength===8?`${new r.BigIntArray(r.buffer,r.byteOffset,1)[0]}`:Ka(r)):(an=Ka,Ys=an);function Ka(r){let t="",e=new Uint32Array(2),n=new Uint16Array(r.buffer,r.byteOffset,r.byteLength/2),i=new Uint32Array((n=new Uint16Array(n).reverse()).buffer),s=-1,o=n.length-1;do{for(e[0]=n[s=0];s<o;)n[s++]=e[1]=e[0]/10,e[0]=(e[0]-e[1]*10<<16)+n[s];n[s]=e[1]=e[0]/10,e[0]=e[0]-e[1]*10,t=`${e[0]}${t}`}while(i[0]||i[1]||i[2]||i[3]);return t!=null?t:"0"}var En=class{static new(t,e){switch(e){case!0:return new Qn(t);case!1:return new ti(t)}switch(t.constructor){case Int8Array:case Int16Array:case Int32Array:case He:return new Qn(t)}return t.byteLength===16?new Ui(t):new ti(t)}static signed(t){return new Qn(t)}static unsigned(t){return new ti(t)}static decimal(t){return new Ui(t)}constructor(t,e){return En.new(t,e)}};var ld,cd,ud,dd,fd,hd,pd,_d,md,yd,bd,gd,wd,vd,Sd,Id,Td,Ad,Fd,M=class{static isNull(t){return(t==null?void 0:t.typeId)===_.Null}static isInt(t){return(t==null?void 0:t.typeId)===_.Int}static isFloat(t){return(t==null?void 0:t.typeId)===_.Float}static isBinary(t){return(t==null?void 0:t.typeId)===_.Binary}static isUtf8(t){return(t==null?void 0:t.typeId)===_.Utf8}static isBool(t){return(t==null?void 0:t.typeId)===_.Bool}static isDecimal(t){return(t==null?void 0:t.typeId)===_.Decimal}static isDate(t){return(t==null?void 0:t.typeId)===_.Date}static isTime(t){return(t==null?void 0:t.typeId)===_.Time}static isTimestamp(t){return(t==null?void 0:t.typeId)===_.Timestamp}static isInterval(t){return(t==null?void 0:t.typeId)===_.Interval}static isList(t){return(t==null?void 0:t.typeId)===_.List}static isStruct(t){return(t==null?void 0:t.typeId)===_.Struct}static isUnion(t){return(t==null?void 0:t.typeId)===_.Union}static isFixedSizeBinary(t){return(t==null?void 0:t.typeId)===_.FixedSizeBinary}static isFixedSizeList(t){return(t==null?void 0:t.typeId)===_.FixedSizeList}static isMap(t){return(t==null?void 0:t.typeId)===_.Map}static isDictionary(t){return(t==null?void 0:t.typeId)===_.Dictionary}static isDenseUnion(t){return M.isUnion(t)&&t.mode===Bt.Dense}static isSparseUnion(t){return M.isUnion(t)&&t.mode===Bt.Sparse}get typeId(){return _.NONE}};ld=Symbol.toStringTag;M[ld]=(r=>(r.children=null,r.ArrayType=Array,r[Symbol.toStringTag]="DataType"))(M.prototype);var _e=class extends M{toString(){return"Null"}get typeId(){return _.Null}};cd=Symbol.toStringTag;_e[cd]=(r=>r[Symbol.toStringTag]="Null")(_e.prototype);var Lt=class extends M{constructor(t,e){super(),this.isSigned=t,this.bitWidth=e}get typeId(){return _.Int}get ArrayType(){switch(this.bitWidth){case 8:return this.isSigned?Int8Array:Uint8Array;case 16:return this.isSigned?Int16Array:Uint16Array;case 32:return this.isSigned?Int32Array:Uint32Array;case 64:return this.isSigned?He:Ve}throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`)}toString(){return`${this.isSigned?"I":"Ui"}nt${this.bitWidth}`}};ud=Symbol.toStringTag;Lt[ud]=(r=>(r.isSigned=null,r.bitWidth=null,r[Symbol.toStringTag]="Int"))(Lt.prototype);var Gs=class extends Lt{constructor(){super(!0,8)}get ArrayType(){return Int8Array}},$s=class extends Lt{constructor(){super(!0,16)}get ArrayType(){return Int16Array}},yr=class extends Lt{constructor(){super(!0,32)}get ArrayType(){return Int32Array}},Xs=class extends Lt{constructor(){super(!0,64)}get ArrayType(){return He}},Ks=class extends Lt{constructor(){super(!1,8)}get ArrayType(){return Uint8Array}},Js=class extends Lt{constructor(){super(!1,16)}get ArrayType(){return Uint16Array}},qs=class extends Lt{constructor(){super(!1,32)}get ArrayType(){return Uint32Array}},Zs=class extends Lt{constructor(){super(!1,64)}get ArrayType(){return Ve}};Object.defineProperty(Gs.prototype,"ArrayType",{value:Int8Array});Object.defineProperty($s.prototype,"ArrayType",{value:Int16Array});Object.defineProperty(yr.prototype,"ArrayType",{value:Int32Array});Object.defineProperty(Xs.prototype,"ArrayType",{value:He});Object.defineProperty(Ks.prototype,"ArrayType",{value:Uint8Array});Object.defineProperty(Js.prototype,"ArrayType",{value:Uint16Array});Object.defineProperty(qs.prototype,"ArrayType",{value:Uint32Array});Object.defineProperty(Zs.prototype,"ArrayType",{value:Ve});var be=class extends M{constructor(t){super(),this.precision=t}get typeId(){return _.Float}get ArrayType(){switch(this.precision){case At.HALF:return Uint16Array;case At.SINGLE:return Float32Array;case At.DOUBLE:return Float64Array}throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`)}toString(){return`Float${this.precision<<5||16}`}};dd=Symbol.toStringTag;be[dd]=(r=>(r.precision=null,r[Symbol.toStringTag]="Float"))(be.prototype);var Qs=class extends be{constructor(){super(At.HALF)}},to=class extends be{constructor(){super(At.SINGLE)}},eo=class extends be{constructor(){super(At.DOUBLE)}};Object.defineProperty(Qs.prototype,"ArrayType",{value:Uint16Array});Object.defineProperty(to.prototype,"ArrayType",{value:Float32Array});Object.defineProperty(eo.prototype,"ArrayType",{value:Float64Array});var kr=class extends M{constructor(){super()}get typeId(){return _.Binary}toString(){return"Binary"}};fd=Symbol.toStringTag;kr[fd]=(r=>(r.ArrayType=Uint8Array,r[Symbol.toStringTag]="Binary"))(kr.prototype);var Ur=class extends M{constructor(){super()}get typeId(){return _.Utf8}toString(){return"Utf8"}};hd=Symbol.toStringTag;Ur[hd]=(r=>(r.ArrayType=Uint8Array,r[Symbol.toStringTag]="Utf8"))(Ur.prototype);var Nr=class extends M{constructor(){super()}get typeId(){return _.Bool}toString(){return"Bool"}};pd=Symbol.toStringTag;Nr[pd]=(r=>(r.ArrayType=Uint8Array,r[Symbol.toStringTag]="Bool"))(Nr.prototype);var jr=class extends M{constructor(t,e,n=128){super(),this.scale=t,this.precision=e,this.bitWidth=n}get typeId(){return _.Decimal}toString(){return`Decimal[${this.precision}e${this.scale>0?"+":""}${this.scale}]`}};_d=Symbol.toStringTag;jr[_d]=(r=>(r.scale=null,r.precision=null,r.ArrayType=Uint32Array,r[Symbol.toStringTag]="Decimal"))(jr.prototype);var Pr=class extends M{constructor(t){super(),this.unit=t}get typeId(){return _.Date}toString(){return`Date${(this.unit+1)*32}<${re[this.unit]}>`}};md=Symbol.toStringTag;Pr[md]=(r=>(r.unit=null,r.ArrayType=Int32Array,r[Symbol.toStringTag]="Date"))(Pr.prototype);var er=class extends M{constructor(t,e){super(),this.unit=t,this.bitWidth=e}get typeId(){return _.Time}toString(){return`Time${this.bitWidth}<${et[this.unit]}>`}get ArrayType(){switch(this.bitWidth){case 32:return Int32Array;case 64:return He}throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`)}};yd=Symbol.toStringTag;er[yd]=(r=>(r.unit=null,r.bitWidth=null,r[Symbol.toStringTag]="Time"))(er.prototype);var Hr=class extends M{constructor(t,e){super(),this.unit=t,this.timezone=e}get typeId(){return _.Timestamp}toString(){return`Timestamp<${et[this.unit]}${this.timezone?`, ${this.timezone}`:""}>`}};bd=Symbol.toStringTag;Hr[bd]=(r=>(r.unit=null,r.timezone=null,r.ArrayType=Int32Array,r[Symbol.toStringTag]="Timestamp"))(Hr.prototype);var Vr=class extends M{constructor(t){super(),this.unit=t}get typeId(){return _.Interval}toString(){return`Interval<${pe[this.unit]}>`}};gd=Symbol.toStringTag;Vr[gd]=(r=>(r.unit=null,r.ArrayType=Int32Array,r[Symbol.toStringTag]="Interval"))(Vr.prototype);var rr=class extends M{constructor(t){super(),this.children=[t]}get typeId(){return _.List}toString(){return`List<${this.valueType}>`}get valueType(){return this.children[0].type}get valueField(){return this.children[0]}get ArrayType(){return this.valueType.ArrayType}};wd=Symbol.toStringTag;rr[wd]=(r=>(r.children=null,r[Symbol.toStringTag]="List"))(rr.prototype);var vt=class extends M{constructor(t){super(),this.children=t}get typeId(){return _.Struct}toString(){return`Struct<{${this.children.map(t=>`${t.name}:${t.type}`).join(", ")}}>`}};vd=Symbol.toStringTag;vt[vd]=(r=>(r.children=null,r[Symbol.toStringTag]="Struct"))(vt.prototype);var nr=class extends M{constructor(t,e,n){super(),this.mode=t,this.children=n,this.typeIds=e=Int32Array.from(e),this.typeIdToChildIndex=e.reduce((i,s,o)=>(i[s]=o)&&i||i,Object.create(null))}get typeId(){return _.Union}toString(){return`${this[Symbol.toStringTag]}<${this.children.map(t=>`${t.type}`).join(" | ")}>`}};Sd=Symbol.toStringTag;nr[Sd]=(r=>(r.mode=null,r.typeIds=null,r.children=null,r.typeIdToChildIndex=null,r.ArrayType=Int8Array,r[Symbol.toStringTag]="Union"))(nr.prototype);var zr=class extends M{constructor(t){super(),this.byteWidth=t}get typeId(){return _.FixedSizeBinary}toString(){return`FixedSizeBinary[${this.byteWidth}]`}};Id=Symbol.toStringTag;zr[Id]=(r=>(r.byteWidth=null,r.ArrayType=Uint8Array,r[Symbol.toStringTag]="FixedSizeBinary"))(zr.prototype);var ir=class extends M{constructor(t,e){super(),this.listSize=t,this.children=[e]}get typeId(){return _.FixedSizeList}get valueType(){return this.children[0].type}get valueField(){return this.children[0]}get ArrayType(){return this.valueType.ArrayType}toString(){return`FixedSizeList[${this.listSize}]<${this.valueType}>`}};Td=Symbol.toStringTag;ir[Td]=(r=>(r.children=null,r.listSize=null,r[Symbol.toStringTag]="FixedSizeList"))(ir.prototype);var sr=class extends M{constructor(t,e=!1){super(),this.children=[t],this.keysSorted=e}get typeId(){return _.Map}get keyType(){return this.children[0].type.children[0].type}get valueType(){return this.children[0].type.children[1].type}get childType(){return this.children[0].type}toString(){return`Map<{${this.children[0].type.children.map(t=>`${t.name}:${t.type}`).join(", ")}}>`}};Ad=Symbol.toStringTag;sr[Ad]=(r=>(r.children=null,r.keysSorted=null,r[Symbol.toStringTag]="Map_"))(sr.prototype);var um=(r=>()=>++r)(-1),Oe=class extends M{constructor(t,e,n,i){super(),this.indices=e,this.dictionary=t,this.isOrdered=i||!1,this.id=n==null?um():typeof n=="number"?n:n.low}get typeId(){return _.Dictionary}get children(){return this.dictionary.children}get valueType(){return this.dictionary}get ArrayType(){return this.dictionary.ArrayType}toString(){return`Dictionary<${this.indices}, ${this.dictionary}>`}};Fd=Symbol.toStringTag;Oe[Fd]=(r=>(r.id=null,r.indices=null,r.isOrdered=null,r.dictionary=null,r[Symbol.toStringTag]="Dictionary"))(Oe.prototype);function Re(r){let t=r;switch(r.typeId){case _.Decimal:return r.bitWidth/32;case _.Timestamp:return 2;case _.Date:return 1+t.unit;case _.Interval:return 1+t.unit;case _.FixedSizeList:return t.listSize;case _.FixedSizeBinary:return t.byteWidth;default:return 1}}var L=class{visitMany(t,...e){return t.map((n,i)=>this.visit(n,...e.map(s=>s[i])))}visit(...t){return this.getVisitFn(t[0],!1).apply(this,t)}getVisitFn(t,e=!0){return dm(this,t,e)}getVisitFnByTypeId(t,e=!0){return ei(this,t,e)}visitNull(t,...e){return null}visitBool(t,...e){return null}visitInt(t,...e){return null}visitFloat(t,...e){return null}visitUtf8(t,...e){return null}visitBinary(t,...e){return null}visitFixedSizeBinary(t,...e){return null}visitDate(t,...e){return null}visitTimestamp(t,...e){return null}visitTime(t,...e){return null}visitDecimal(t,...e){return null}visitList(t,...e){return null}visitStruct(t,...e){return null}visitUnion(t,...e){return null}visitDictionary(t,...e){return null}visitInterval(t,...e){return null}visitFixedSizeList(t,...e){return null}visitMap(t,...e){return null}};function dm(r,t,e=!0){return typeof t=="number"?ei(r,t,e):typeof t=="string"&&t in _?ei(r,_[t],e):t&&t instanceof M?ei(r,Ed(t),e):(t==null?void 0:t.type)&&t.type instanceof M?ei(r,Ed(t.type),e):ei(r,_.NONE,e)}function ei(r,t,e=!0){let n=null;switch(t){case _.Null:n=r.visitNull;break;case _.Bool:n=r.visitBool;break;case _.Int:n=r.visitInt;break;case _.Int8:n=r.visitInt8||r.visitInt;break;case _.Int16:n=r.visitInt16||r.visitInt;break;case _.Int32:n=r.visitInt32||r.visitInt;break;case _.Int64:n=r.visitInt64||r.visitInt;break;case _.Uint8:n=r.visitUint8||r.visitInt;break;case _.Uint16:n=r.visitUint16||r.visitInt;break;case _.Uint32:n=r.visitUint32||r.visitInt;break;case _.Uint64:n=r.visitUint64||r.visitInt;break;case _.Float:n=r.visitFloat;break;case _.Float16:n=r.visitFloat16||r.visitFloat;break;case _.Float32:n=r.visitFloat32||r.visitFloat;break;case _.Float64:n=r.visitFloat64||r.visitFloat;break;case _.Utf8:n=r.visitUtf8;break;case _.Binary:n=r.visitBinary;break;case _.FixedSizeBinary:n=r.visitFixedSizeBinary;break;case _.Date:n=r.visitDate;break;case _.DateDay:n=r.visitDateDay||r.visitDate;break;case _.DateMillisecond:n=r.visitDateMillisecond||r.visitDate;break;case _.Timestamp:n=r.visitTimestamp;break;case _.TimestampSecond:n=r.visitTimestampSecond||r.visitTimestamp;break;case _.TimestampMillisecond:n=r.visitTimestampMillisecond||r.visitTimestamp;break;case _.TimestampMicrosecond:n=r.visitTimestampMicrosecond||r.visitTimestamp;break;case _.TimestampNanosecond:n=r.visitTimestampNanosecond||r.visitTimestamp;break;case _.Time:n=r.visitTime;break;case _.TimeSecond:n=r.visitTimeSecond||r.visitTime;break;case _.TimeMillisecond:n=r.visitTimeMillisecond||r.visitTime;break;case _.TimeMicrosecond:n=r.visitTimeMicrosecond||r.visitTime;break;case _.TimeNanosecond:n=r.visitTimeNanosecond||r.visitTime;break;case _.Decimal:n=r.visitDecimal;break;case _.List:n=r.visitList;break;case _.Struct:n=r.visitStruct;break;case _.Union:n=r.visitUnion;break;case _.DenseUnion:n=r.visitDenseUnion||r.visitUnion;break;case _.SparseUnion:n=r.visitSparseUnion||r.visitUnion;break;case _.Dictionary:n=r.visitDictionary;break;case _.Interval:n=r.visitInterval;break;case _.IntervalDayTime:n=r.visitIntervalDayTime||r.visitInterval;break;case _.IntervalYearMonth:n=r.visitIntervalYearMonth||r.visitInterval;break;case _.FixedSizeList:n=r.visitFixedSizeList;break;case _.Map:n=r.visitMap;break}if(typeof n=="function")return n;if(!e)return()=>null;throw new Error(`Unrecognized type '${_[t]}'`)}function Ed(r){switch(r.typeId){case _.Null:return _.Null;case _.Int:{let{bitWidth:t,isSigned:e}=r;switch(t){case 8:return e?_.Int8:_.Uint8;case 16:return e?_.Int16:_.Uint16;case 32:return e?_.Int32:_.Uint32;case 64:return e?_.Int64:_.Uint64}return _.Int}case _.Float:switch(r.precision){case At.HALF:return _.Float16;case At.SINGLE:return _.Float32;case At.DOUBLE:return _.Float64}return _.Float;case _.Binary:return _.Binary;case _.Utf8:return _.Utf8;case _.Bool:return _.Bool;case _.Decimal:return _.Decimal;case _.Time:switch(r.unit){case et.SECOND:return _.TimeSecond;case et.MILLISECOND:return _.TimeMillisecond;case et.MICROSECOND:return _.TimeMicrosecond;case et.NANOSECOND:return _.TimeNanosecond}return _.Time;case _.Timestamp:switch(r.unit){case et.SECOND:return _.TimestampSecond;case et.MILLISECOND:return _.TimestampMillisecond;case et.MICROSECOND:return _.TimestampMicrosecond;case et.NANOSECOND:return _.TimestampNanosecond}return _.Timestamp;case _.Date:switch(r.unit){case re.DAY:return _.DateDay;case re.MILLISECOND:return _.DateMillisecond}return _.Date;case _.Interval:switch(r.unit){case pe.DAY_TIME:return _.IntervalDayTime;case pe.YEAR_MONTH:return _.IntervalYearMonth}return _.Interval;case _.Map:return _.Map;case _.List:return _.List;case _.Struct:return _.Struct;case _.Union:switch(r.mode){case Bt.Dense:return _.DenseUnion;case Bt.Sparse:return _.SparseUnion}return _.Union;case _.FixedSizeBinary:return _.FixedSizeBinary;case _.FixedSizeList:return _.FixedSizeList;case _.Dictionary:return _.Dictionary}throw new Error(`Unrecognized type '${_[r.typeId]}'`)}L.prototype.visitInt8=null;L.prototype.visitInt16=null;L.prototype.visitInt32=null;L.prototype.visitInt64=null;L.prototype.visitUint8=null;L.prototype.visitUint16=null;L.prototype.visitUint32=null;L.prototype.visitUint64=null;L.prototype.visitFloat16=null;L.prototype.visitFloat32=null;L.prototype.visitFloat64=null;L.prototype.visitDateDay=null;L.prototype.visitDateMillisecond=null;L.prototype.visitTimestampSecond=null;L.prototype.visitTimestampMillisecond=null;L.prototype.visitTimestampMicrosecond=null;L.prototype.visitTimestampNanosecond=null;L.prototype.visitTimeSecond=null;L.prototype.visitTimeMillisecond=null;L.prototype.visitTimeMicrosecond=null;L.prototype.visitTimeNanosecond=null;L.prototype.visitDenseUnion=null;L.prototype.visitSparseUnion=null;L.prototype.visitIntervalDayTime=null;L.prototype.visitIntervalYearMonth=null;var qa={};An(qa,{float64ToUint16:()=>Ni,uint16ToFloat64:()=>ro});var xd=new Float64Array(1),ri=new Uint32Array(xd.buffer);function ro(r){let t=(r&31744)>>10,e=(r&1023)/1024,n=Math.pow(-1,(r&32768)>>15);switch(t){case 31:return n*(e?Number.NaN:1/0);case 0:return n*(e?6103515625e-14*e:0)}return n*Math.pow(2,t-15)*(1+e)}function Ni(r){if(r!==r)return 32256;xd[0]=r;let t=(ri[1]&2147483648)>>16&65535,e=ri[1]&2146435072,n=0;return e>=1089470464?ri[0]>0?e=31744:(e=(e&2080374784)>>16,n=(ri[1]&1048575)>>10):e<=1056964608?(n=1048576+(ri[1]&1048575),n=1048576+(n<<(e>>20)-998)>>21,e=0):(e=e-1056964608>>10,n=(ri[1]&1048575)+512>>10),t|e|n&65535}var V=class extends L{};function J(r){return(t,e,n)=>{if(t.setValid(e,n!=null))return r(t,e,n)}}var fm=(r,t,e)=>{r[t]=Math.trunc(e/864e5)},Za=(r,t,e)=>{r[t]=Math.trunc(e%4294967296),r[t+1]=Math.trunc(e/4294967296)},hm=(r,t,e)=>{r[t]=Math.trunc(e*1e3%4294967296),r[t+1]=Math.trunc(e*1e3/4294967296)},pm=(r,t,e)=>{r[t]=Math.trunc(e*1e6%4294967296),r[t+1]=Math.trunc(e*1e6/4294967296)},Dd=(r,t,e,n)=>{if(e+1<t.length){let{[e]:i,[e+1]:s}=t;r.set(n.subarray(0,s-i),i)}},_m=({offset:r,values:t},e,n)=>{let i=r+e;n?t[i>>3]|=1<<i%8:t[i>>3]&=~(1<<i%8)},Wr=({values:r},t,e)=>{r[t]=e},Qa=({values:r},t,e)=>{r[t]=e},Bd=({values:r},t,e)=>{r[t]=Ni(e)},mm=(r,t,e)=>{switch(r.type.precision){case At.HALF:return Bd(r,t,e);case At.SINGLE:case At.DOUBLE:return Qa(r,t,e)}},no=({values:r},t,e)=>{fm(r,t,e.valueOf())},io=({values:r},t,e)=>{Za(r,t*2,e.valueOf())},tl=({stride:r,values:t},e,n)=>{t.set(n.subarray(0,r),r*e)},ym=({values:r,valueOffsets:t},e,n)=>Dd(r,t,e,n),bm=({values:r,valueOffsets:t},e,n)=>{Dd(r,t,e,on(n))},el=(r,t,e)=>{r.type.unit===re.DAY?no(r,t,e):io(r,t,e)},so=({values:r},t,e)=>Za(r,t*2,e/1e3),oo=({values:r},t,e)=>Za(r,t*2,e),ao=({values:r},t,e)=>hm(r,t*2,e),lo=({values:r},t,e)=>pm(r,t*2,e),rl=(r,t,e)=>{switch(r.type.unit){case et.SECOND:return so(r,t,e);case et.MILLISECOND:return oo(r,t,e);case et.MICROSECOND:return ao(r,t,e);case et.NANOSECOND:return lo(r,t,e)}},co=({values:r},t,e)=>{r[t]=e},uo=({values:r},t,e)=>{r[t]=e},fo=({values:r},t,e)=>{r[t]=e},ho=({values:r},t,e)=>{r[t]=e},nl=(r,t,e)=>{switch(r.type.unit){case et.SECOND:return co(r,t,e);case et.MILLISECOND:return uo(r,t,e);case et.MICROSECOND:return fo(r,t,e);case et.NANOSECOND:return ho(r,t,e)}},il=({values:r,stride:t},e,n)=>{r.set(n.subarray(0,t),t*e)},gm=(r,t,e)=>{let n=r.children[0],i=r.valueOffsets,s=ne.getVisitFn(n);if(Array.isArray(e))for(let o=-1,l=i[t],d=i[t+1];l<d;)s(n,l++,e[++o]);else for(let o=-1,l=i[t],d=i[t+1];l<d;)s(n,l++,e.get(++o))},wm=(r,t,e)=>{let n=r.children[0],{valueOffsets:i}=r,s=ne.getVisitFn(n),{[t]:o,[t+1]:l}=i,d=e instanceof Map?e.entries():Object.entries(e);for(let h of d)if(s(n,o,h),++o>=l)break},vm=(r,t)=>(e,n,i,s)=>n&&e(n,r,t[s]),Sm=(r,t)=>(e,n,i,s)=>n&&e(n,r,t.get(s)),Im=(r,t)=>(e,n,i,s)=>n&&e(n,r,t.get(i.name)),Tm=(r,t)=>(e,n,i,s)=>n&&e(n,r,t[i.name]),Am=(r,t,e)=>{let n=r.type.children.map(s=>ne.getVisitFn(s.type)),i=e instanceof Map?Im(t,e):e instanceof z?Sm(t,e):Array.isArray(e)?vm(t,e):Tm(t,e);r.type.children.forEach((s,o)=>i(n[o],r.children[o],s,o))},Fm=(r,t,e)=>{r.type.mode===Bt.Dense?Md(r,t,e):Od(r,t,e)},Md=(r,t,e)=>{let n=r.type.typeIdToChildIndex[r.typeIds[t]],i=r.children[n];ne.visit(i,r.valueOffsets[t],e)},Od=(r,t,e)=>{let n=r.type.typeIdToChildIndex[r.typeIds[t]],i=r.children[n];ne.visit(i,t,e)},Em=(r,t,e)=>{var n;(n=r.dictionary)===null||n===void 0||n.set(r.values[t],e)},sl=(r,t,e)=>{r.type.unit===pe.DAY_TIME?po(r,t,e):_o(r,t,e)},po=({values:r},t,e)=>{r.set(e.subarray(0,2),2*t)},_o=({values:r},t,e)=>{r[t]=e[0]*12+e[1]%12},xm=(r,t,e)=>{let{stride:n}=r,i=r.children[0],s=ne.getVisitFn(i);if(Array.isArray(e))for(let o=-1,l=t*n;++o<n;)s(i,l+o,e[o]);else for(let o=-1,l=t*n;++o<n;)s(i,l+o,e.get(o))};V.prototype.visitBool=J(_m);V.prototype.visitInt=J(Wr);V.prototype.visitInt8=J(Wr);V.prototype.visitInt16=J(Wr);V.prototype.visitInt32=J(Wr);V.prototype.visitInt64=J(Wr);V.prototype.visitUint8=J(Wr);V.prototype.visitUint16=J(Wr);V.prototype.visitUint32=J(Wr);V.prototype.visitUint64=J(Wr);V.prototype.visitFloat=J(mm);V.prototype.visitFloat16=J(Bd);V.prototype.visitFloat32=J(Qa);V.prototype.visitFloat64=J(Qa);V.prototype.visitUtf8=J(bm);V.prototype.visitBinary=J(ym);V.prototype.visitFixedSizeBinary=J(tl);V.prototype.visitDate=J(el);V.prototype.visitDateDay=J(no);V.prototype.visitDateMillisecond=J(io);V.prototype.visitTimestamp=J(rl);V.prototype.visitTimestampSecond=J(so);V.prototype.visitTimestampMillisecond=J(oo);V.prototype.visitTimestampMicrosecond=J(ao);V.prototype.visitTimestampNanosecond=J(lo);V.prototype.visitTime=J(nl);V.prototype.visitTimeSecond=J(co);V.prototype.visitTimeMillisecond=J(uo);V.prototype.visitTimeMicrosecond=J(fo);V.prototype.visitTimeNanosecond=J(ho);V.prototype.visitDecimal=J(il);V.prototype.visitList=J(gm);V.prototype.visitStruct=J(Am);V.prototype.visitUnion=J(Fm);V.prototype.visitDenseUnion=J(Md);V.prototype.visitSparseUnion=J(Od);V.prototype.visitDictionary=J(Em);V.prototype.visitInterval=J(sl);V.prototype.visitIntervalDayTime=J(po);V.prototype.visitIntervalYearMonth=J(_o);V.prototype.visitFixedSizeList=J(xm);V.prototype.visitMap=J(wm);var ne=new V;var or=Symbol.for("parent"),ni=Symbol.for("rowIndex"),ln=class{constructor(t,e){return this[or]=t,this[ni]=e,new Proxy(this,new al)}toArray(){return Object.values(this.toJSON())}toJSON(){let t=this[ni],e=this[or],n=e.type.children,i={};for(let s=-1,o=n.length;++s<o;)i[n[s].name]=Ht.visit(e.children[s],t);return i}toString(){return`{${[...this].map(([t,e])=>`${Qe(t)}: ${Qe(e)}`).join(", ")}}`}[Symbol.for("nodejs.util.inspect.custom")](){return this.toString()}[Symbol.iterator](){return new ol(this[or],this[ni])}},ol=class{constructor(t,e){this.childIndex=0,this.children=t.children,this.rowIndex=e,this.childFields=t.type.children,this.numChildren=this.childFields.length}[Symbol.iterator](){return this}next(){let t=this.childIndex;return t<this.numChildren?(this.childIndex=t+1,{done:!1,value:[this.childFields[t].name,Ht.visit(this.children[t],this.rowIndex)]}):{done:!0,value:null}}};Object.defineProperties(ln.prototype,{[Symbol.toStringTag]:{enumerable:!1,configurable:!1,value:"Row"},[or]:{writable:!0,enumerable:!1,configurable:!1,value:null},[ni]:{writable:!0,enumerable:!1,configurable:!1,value:-1}});var al=class{isExtensible(){return!1}deleteProperty(){return!1}preventExtensions(){return!0}ownKeys(t){return t[or].type.children.map(e=>e.name)}has(t,e){return t[or].type.children.findIndex(n=>n.name===e)!==-1}getOwnPropertyDescriptor(t,e){if(t[or].type.children.findIndex(n=>n.name===e)!==-1)return{writable:!0,enumerable:!0,configurable:!0}}get(t,e){if(Reflect.has(t,e))return t[e];let n=t[or].type.children.findIndex(i=>i.name===e);if(n!==-1){let i=Ht.visit(t[or].children[n],t[ni]);return Reflect.set(t,e,i),i}}set(t,e,n){let i=t[or].type.children.findIndex(s=>s.name===e);return i!==-1?(ne.visit(t[or].children[i],t[ni],n),Reflect.set(t,e,n)):Reflect.has(t,e)||typeof e=="symbol"?Reflect.set(t,e,n):!1}};var U=class extends L{};function Y(r){return(t,e)=>t.getValid(e)?r(t,e):null}var Dm=(r,t)=>864e5*r[t],ll=(r,t)=>4294967296*r[t+1]+(r[t]>>>0),Bm=(r,t)=>4294967296*(r[t+1]/1e3)+(r[t]>>>0)/1e3,Mm=(r,t)=>4294967296*(r[t+1]/1e6)+(r[t]>>>0)/1e6,Rd=r=>new Date(r),Om=(r,t)=>Rd(Dm(r,t)),Rm=(r,t)=>Rd(ll(r,t)),Cm=(r,t)=>null,Cd=(r,t,e)=>{if(e+1>=t.length)return null;let n=t[e],i=t[e+1];return r.subarray(n,i)},Lm=({offset:r,values:t},e)=>{let n=r+e;return(t[n>>3]&1<<n%8)!==0},Ld=({values:r},t)=>Om(r,t),kd=({values:r},t)=>Rm(r,t*2),cn=({stride:r,values:t},e)=>t[r*e],km=({stride:r,values:t},e)=>ro(t[r*e]),Ud=({values:r},t)=>r[t],Um=({stride:r,values:t},e)=>t.subarray(r*e,r*(e+1)),Nm=({values:r,valueOffsets:t},e)=>Cd(r,t,e),jm=({values:r,valueOffsets:t},e)=>{let n=Cd(r,t,e);return n!==null?Ci(n):null},Pm=({values:r},t)=>r[t],Hm=({type:r,values:t},e)=>r.precision!==At.HALF?t[e]:ro(t[e]),Vm=(r,t)=>r.type.unit===re.DAY?Ld(r,t):kd(r,t),Nd=({values:r},t)=>1e3*ll(r,t*2),jd=({values:r},t)=>ll(r,t*2),Pd=({values:r},t)=>Bm(r,t*2),Hd=({values:r},t)=>Mm(r,t*2),zm=(r,t)=>{switch(r.type.unit){case et.SECOND:return Nd(r,t);case et.MILLISECOND:return jd(r,t);case et.MICROSECOND:return Pd(r,t);case et.NANOSECOND:return Hd(r,t)}},Vd=({values:r},t)=>r[t],zd=({values:r},t)=>r[t],Wd=({values:r},t)=>r[t],Yd=({values:r},t)=>r[t],Wm=(r,t)=>{switch(r.type.unit){case et.SECOND:return Vd(r,t);case et.MILLISECOND:return zd(r,t);case et.MICROSECOND:return Wd(r,t);case et.NANOSECOND:return Yd(r,t)}},Ym=({values:r,stride:t},e)=>En.decimal(r.subarray(t*e,t*(e+1))),Gm=(r,t)=>{let{valueOffsets:e,stride:n,children:i}=r,{[t*n]:s,[t*n+1]:o}=e,d=i[0].slice(s,o-s);return new z([d])},$m=(r,t)=>{let{valueOffsets:e,children:n}=r,{[t]:i,[t+1]:s}=e,o=n[0];return new br(o.slice(i,s-i))},Xm=(r,t)=>new ln(r,t),Km=(r,t)=>r.type.mode===Bt.Dense?Gd(r,t):$d(r,t),Gd=(r,t)=>{let e=r.type.typeIdToChildIndex[r.typeIds[t]],n=r.children[e];return Ht.visit(n,r.valueOffsets[t])},$d=(r,t)=>{let e=r.type.typeIdToChildIndex[r.typeIds[t]],n=r.children[e];return Ht.visit(n,t)},Jm=(r,t)=>{var e;return(e=r.dictionary)===null||e===void 0?void 0:e.get(r.values[t])},qm=(r,t)=>r.type.unit===pe.DAY_TIME?Xd(r,t):Kd(r,t),Xd=({values:r},t)=>r.subarray(2*t,2*(t+1)),Kd=({values:r},t)=>{let e=r[t],n=new Int32Array(2);return n[0]=Math.trunc(e/12),n[1]=Math.trunc(e%12),n},Zm=(r,t)=>{let{stride:e,children:n}=r,s=n[0].slice(t*e,e);return new z([s])};U.prototype.visitNull=Y(Cm);U.prototype.visitBool=Y(Lm);U.prototype.visitInt=Y(Pm);U.prototype.visitInt8=Y(cn);U.prototype.visitInt16=Y(cn);U.prototype.visitInt32=Y(cn);U.prototype.visitInt64=Y(Ud);U.prototype.visitUint8=Y(cn);U.prototype.visitUint16=Y(cn);U.prototype.visitUint32=Y(cn);U.prototype.visitUint64=Y(Ud);U.prototype.visitFloat=Y(Hm);U.prototype.visitFloat16=Y(km);U.prototype.visitFloat32=Y(cn);U.prototype.visitFloat64=Y(cn);U.prototype.visitUtf8=Y(jm);U.prototype.visitBinary=Y(Nm);U.prototype.visitFixedSizeBinary=Y(Um);U.prototype.visitDate=Y(Vm);U.prototype.visitDateDay=Y(Ld);U.prototype.visitDateMillisecond=Y(kd);U.prototype.visitTimestamp=Y(zm);U.prototype.visitTimestampSecond=Y(Nd);U.prototype.visitTimestampMillisecond=Y(jd);U.prototype.visitTimestampMicrosecond=Y(Pd);U.prototype.visitTimestampNanosecond=Y(Hd);U.prototype.visitTime=Y(Wm);U.prototype.visitTimeSecond=Y(Vd);U.prototype.visitTimeMillisecond=Y(zd);U.prototype.visitTimeMicrosecond=Y(Wd);U.prototype.visitTimeNanosecond=Y(Yd);U.prototype.visitDecimal=Y(Ym);U.prototype.visitList=Y(Gm);U.prototype.visitStruct=Y(Xm);U.prototype.visitUnion=Y(Km);U.prototype.visitDenseUnion=Y(Gd);U.prototype.visitSparseUnion=Y($d);U.prototype.visitDictionary=Y(Jm);U.prototype.visitInterval=Y(qm);U.prototype.visitIntervalDayTime=Y(Xd);U.prototype.visitIntervalYearMonth=Y(Kd);U.prototype.visitFixedSizeList=Y(Zm);U.prototype.visitMap=Y($m);var Ht=new U;var Ye=Symbol.for("keys"),ii=Symbol.for("vals"),br=class{constructor(t){return this[Ye]=new z([t.children[0]]).memoize(),this[ii]=t.children[1],new Proxy(this,new ul)}[Symbol.iterator](){return new cl(this[Ye],this[ii])}get size(){return this[Ye].length}toArray(){return Object.values(this.toJSON())}toJSON(){let t=this[Ye],e=this[ii],n={};for(let i=-1,s=t.length;++i<s;)n[t.get(i)]=Ht.visit(e,i);return n}toString(){return`{${[...this].map(([t,e])=>`${Qe(t)}: ${Qe(e)}`).join(", ")}}`}[Symbol.for("nodejs.util.inspect.custom")](){return this.toString()}},cl=class{constructor(t,e){this.keys=t,this.vals=e,this.keyIndex=0,this.numKeys=t.length}[Symbol.iterator](){return this}next(){let t=this.keyIndex;return t===this.numKeys?{done:!0,value:null}:(this.keyIndex++,{done:!1,value:[this.keys.get(t),Ht.visit(this.vals,t)]})}},ul=class{isExtensible(){return!1}deleteProperty(){return!1}preventExtensions(){return!0}ownKeys(t){return t[Ye].toArray().map(String)}has(t,e){return t[Ye].includes(e)}getOwnPropertyDescriptor(t,e){if(t[Ye].indexOf(e)!==-1)return{writable:!0,enumerable:!0,configurable:!0}}get(t,e){if(Reflect.has(t,e))return t[e];let n=t[Ye].indexOf(e);if(n!==-1){let i=Ht.visit(Reflect.get(t,ii),n);return Reflect.set(t,e,i),i}}set(t,e,n){let i=t[Ye].indexOf(e);return i!==-1?(ne.visit(Reflect.get(t,ii),i,n),Reflect.set(t,e,n)):Reflect.has(t,e)?Reflect.set(t,e,n):!1}};Object.defineProperties(br.prototype,{[Symbol.toStringTag]:{enumerable:!1,configurable:!1,value:"Row"},[Ye]:{writable:!0,enumerable:!1,configurable:!1,value:null},[ii]:{writable:!0,enumerable:!1,configurable:!1,value:null}});function Qm(r,t,e){let n=r.length,i=t>-1?t:n+t%n;return e?e(r,i):i}var Jd;function ji(r,t,e,n){let{length:i=0}=r,s=typeof t!="number"?0:t,o=typeof e!="number"?i:e;return s<0&&(s=(s%i+i)%i),o<0&&(o=(o%i+i)%i),o<s&&(Jd=s,s=o,o=Jd),o>i&&(o=i),n?n(r,s,o):[s,o]}var qd=r=>r!==r;function un(r){if(typeof r!=="object"||r===null)return qd(r)?qd:e=>e===r;if(r instanceof Date){let e=r.valueOf();return n=>n instanceof Date?n.valueOf()===e:!1}return ArrayBuffer.isView(r)?e=>e?Ya(r,e):!1:r instanceof Map?ey(r):Array.isArray(r)?ty(r):r instanceof z?ry(r):ny(r,!0)}function ty(r){let t=[];for(let e=-1,n=r.length;++e<n;)t[e]=un(r[e]);return mo(t)}function ey(r){let t=-1,e=[];for(let n of r.values())e[++t]=un(n);return mo(e)}function ry(r){let t=[];for(let e=-1,n=r.length;++e<n;)t[e]=un(r.get(e));return mo(t)}function ny(r,t=!1){let e=Object.keys(r);if(!t&&e.length===0)return()=>!1;let n=[];for(let i=-1,s=e.length;++i<s;)n[i]=un(r[e[i]]);return mo(n,e)}function mo(r,t){return e=>{if(!e||typeof e!="object")return!1;switch(e.constructor){case Array:return iy(r,e);case Map:return Zd(r,e,e.keys());case br:case ln:case Object:case void 0:return Zd(r,e,t||Object.keys(e))}return e instanceof z?sy(r,e):!1}}function iy(r,t){let e=r.length;if(t.length!==e)return!1;for(let n=-1;++n<e;)if(!r[n](t[n]))return!1;return!0}function sy(r,t){let e=r.length;if(t.length!==e)return!1;for(let n=-1;++n<e;)if(!r[n](t.get(n)))return!1;return!0}function Zd(r,t,e){let n=e[Symbol.iterator](),i=t instanceof Map?t.keys():Object.keys(t)[Symbol.iterator](),s=t instanceof Map?t.values():Object.values(t)[Symbol.iterator](),o=0,l=r.length,d=s.next(),h=n.next(),u=i.next();for(;o<l&&!h.done&&!u.done&&!d.done&&!(h.value!==u.value||!r[o](d.value));++o,h=n.next(),u=i.next(),d=s.next());return o===l&&h.done&&u.done&&d.done?!0:(n.return&&n.return(),i.return&&i.return(),s.return&&s.return(),!1)}var fl={};An(fl,{BitIterator:()=>xn,getBit:()=>Qd,getBool:()=>bo,packBools:()=>Dn,popcnt_array:()=>tf,popcnt_bit_range:()=>Pi,popcnt_uint32:()=>yo,setBool:()=>oy,truncateBitmap:()=>si});function bo(r,t,e,n){return(e&1<<n)!==0}function Qd(r,t,e,n){return(e&1<<n)>>n}function oy(r,t,e){return e?!!(r[t>>3]|=1<<t%8)||!0:!(r[t>>3]&=~(1<<t%8))&&!1}function si(r,t,e){let n=e.byteLength+7&-8;if(r>0||e.byteLength<n){let i=new Uint8Array(n);return i.set(r%8===0?e.subarray(r>>3):Dn(new xn(e,r,t,null,bo)).subarray(0,n)),i}return e}function Dn(r){let t=[],e=0,n=0,i=0;for(let o of r)o&&(i|=1<<n),++n===8&&(t[e++]=i,i=n=0);(e===0||n>0)&&(t[e++]=i);let s=new Uint8Array(t.length+7&-8);return s.set(t),s}var xn=class{constructor(t,e,n,i,s){this.bytes=t,this.length=n,this.context=i,this.get=s,this.bit=e%8,this.byteIndex=e>>3,this.byte=t[this.byteIndex++],this.index=0}next(){return this.index<this.length?(this.bit===8&&(this.bit=0,this.byte=this.bytes[this.byteIndex++]),{value:this.get(this.context,this.index++,this.byte,this.bit++)}):{done:!0,value:null}}[Symbol.iterator](){return this}};function Pi(r,t,e){if(e-t<=0)return 0;if(e-t<8){let s=0;for(let o of new xn(r,t,e-t,r,Qd))s+=o;return s}let n=e>>3<<3,i=t+(t%8===0?0:8-t%8);return Pi(r,t,i)+Pi(r,n,e)+tf(r,i>>3,n-i>>3)}function tf(r,t,e){let n=0,i=Math.trunc(t),s=new DataView(r.buffer,r.byteOffset,r.byteLength),o=e===void 0?r.byteLength:i+e;for(;o-i>=4;)n+=yo(s.getUint32(i)),i+=4;for(;o-i>=2;)n+=yo(s.getUint16(i)),i+=2;for(;o-i>=1;)n+=yo(s.getUint8(i)),i+=1;return n}function yo(r){let t=Math.trunc(r);return t=t-(t>>>1&1431655765),t=(t&858993459)+(t>>>2&858993459),(t+(t>>>4)&252645135)*16843009>>>24}var ay=-1,dt=class{constructor(t,e,n,i,s,o=[],l){this.type=t,this.children=o,this.dictionary=l,this.offset=Math.floor(Math.max(e||0,0)),this.length=Math.floor(Math.max(n||0,0)),this._nullCount=Math.floor(Math.max(i||0,-1));let d;s instanceof dt?(this.stride=s.stride,this.values=s.values,this.typeIds=s.typeIds,this.nullBitmap=s.nullBitmap,this.valueOffsets=s.valueOffsets):(this.stride=Re(t),s&&((d=s[0])&&(this.valueOffsets=d),(d=s[1])&&(this.values=d),(d=s[2])&&(this.nullBitmap=d),(d=s[3])&&(this.typeIds=d))),this.nullable=this._nullCount!==0&&this.nullBitmap&&this.nullBitmap.byteLength>0}get typeId(){return this.type.typeId}get ArrayType(){return this.type.ArrayType}get buffers(){return[this.valueOffsets,this.values,this.nullBitmap,this.typeIds]}get byteLength(){let t=0,{valueOffsets:e,values:n,nullBitmap:i,typeIds:s}=this;return e&&(t+=e.byteLength),n&&(t+=n.byteLength),i&&(t+=i.byteLength),s&&(t+=s.byteLength),this.children.reduce((o,l)=>o+l.byteLength,t)}get nullCount(){let t=this._nullCount,e;return t<=ay&&(e=this.nullBitmap)&&(this._nullCount=t=this.length-Pi(e,this.offset,this.offset+this.length)),t}getValid(t){if(this.nullable&&this.nullCount>0){let e=this.offset+t;return(this.nullBitmap[e>>3]&1<<e%8)!==0}return!0}setValid(t,e){if(!this.nullable)return e;if(!this.nullBitmap||this.nullBitmap.byteLength<=t>>3){let{nullBitmap:d}=this._changeLengthAndBackfillNullBitmap(this.length);Object.assign(this,{nullBitmap:d,_nullCount:0})}let{nullBitmap:n,offset:i}=this,s=i+t>>3,o=(i+t)%8,l=n[s]>>o&1;return e?l===0&&(n[s]|=1<<o,this._nullCount=this.nullCount+1):l===1&&(n[s]&=~(1<<o),this._nullCount=this.nullCount-1),e}clone(t=this.type,e=this.offset,n=this.length,i=this._nullCount,s=this,o=this.children){return new dt(t,e,n,i,s,o,this.dictionary)}slice(t,e){let{stride:n,typeId:i,children:s}=this,o=+(this._nullCount===0)-1,l=i===16?n:1,d=this._sliceBuffers(t,e,n,i);return this.clone(this.type,this.offset+t,e,o,d,s.length===0||this.valueOffsets?s:this._sliceChildren(s,l*t,l*e))}_changeLengthAndBackfillNullBitmap(t){if(this.typeId===_.Null)return this.clone(this.type,0,t,0);let{length:e,nullCount:n}=this,i=new Uint8Array((t+63&-64)>>3).fill(255,0,e>>3);i[e>>3]=(1<<e-(e&-8))-1,n>0&&i.set(si(this.offset,e,this.nullBitmap),0);let s=this.buffers;return s[We.VALIDITY]=i,this.clone(this.type,0,t,n+(t-e),s)}_sliceBuffers(t,e,n,i){let s,{buffers:o}=this;return(s=o[We.TYPE])&&(o[We.TYPE]=s.subarray(t,t+e)),(s=o[We.OFFSET])&&(o[We.OFFSET]=s.subarray(t,t+e+1))||(s=o[We.DATA])&&(o[We.DATA]=i===6?s:s.subarray(n*t,n*(t+e))),o}_sliceChildren(t,e,n){return t.map(i=>i.slice(e,n))}};dt.prototype.children=Object.freeze([]);var Bn=class extends L{visit(t){return this.getVisitFn(t.type).call(this,t)}visitNull(t){let{["type"]:e,["offset"]:n=0,["length"]:i=0}=t;return new dt(e,n,i,0)}visitBool(t){let{["type"]:e,["offset"]:n=0}=t,i=H(t.nullBitmap),s=Q(e.ArrayType,t.data),{["length"]:o=s.length>>3,["nullCount"]:l=t.nullBitmap?-1:0}=t;return new dt(e,n,o,l,[void 0,s,i])}visitInt(t){let{["type"]:e,["offset"]:n=0}=t,i=H(t.nullBitmap),s=Q(e.ArrayType,t.data),{["length"]:o=s.length,["nullCount"]:l=t.nullBitmap?-1:0}=t;return new dt(e,n,o,l,[void 0,s,i])}visitFloat(t){let{["type"]:e,["offset"]:n=0}=t,i=H(t.nullBitmap),s=Q(e.ArrayType,t.data),{["length"]:o=s.length,["nullCount"]:l=t.nullBitmap?-1:0}=t;return new dt(e,n,o,l,[void 0,s,i])}visitUtf8(t){let{["type"]:e,["offset"]:n=0}=t,i=H(t.data),s=H(t.nullBitmap),o=Fn(t.valueOffsets),{["length"]:l=o.length-1,["nullCount"]:d=t.nullBitmap?-1:0}=t;return new dt(e,n,l,d,[o,i,s])}visitBinary(t){let{["type"]:e,["offset"]:n=0}=t,i=H(t.data),s=H(t.nullBitmap),o=Fn(t.valueOffsets),{["length"]:l=o.length-1,["nullCount"]:d=t.nullBitmap?-1:0}=t;return new dt(e,n,l,d,[o,i,s])}visitFixedSizeBinary(t){let{["type"]:e,["offset"]:n=0}=t,i=H(t.nullBitmap),s=Q(e.ArrayType,t.data),{["length"]:o=s.length/Re(e),["nullCount"]:l=t.nullBitmap?-1:0}=t;return new dt(e,n,o,l,[void 0,s,i])}visitDate(t){let{["type"]:e,["offset"]:n=0}=t,i=H(t.nullBitmap),s=Q(e.ArrayType,t.data),{["length"]:o=s.length/Re(e),["nullCount"]:l=t.nullBitmap?-1:0}=t;return new dt(e,n,o,l,[void 0,s,i])}visitTimestamp(t){let{["type"]:e,["offset"]:n=0}=t,i=H(t.nullBitmap),s=Q(e.ArrayType,t.data),{["length"]:o=s.length/Re(e),["nullCount"]:l=t.nullBitmap?-1:0}=t;return new dt(e,n,o,l,[void 0,s,i])}visitTime(t){let{["type"]:e,["offset"]:n=0}=t,i=H(t.nullBitmap),s=Q(e.ArrayType,t.data),{["length"]:o=s.length/Re(e),["nullCount"]:l=t.nullBitmap?-1:0}=t;return new dt(e,n,o,l,[void 0,s,i])}visitDecimal(t){let{["type"]:e,["offset"]:n=0}=t,i=H(t.nullBitmap),s=Q(e.ArrayType,t.data),{["length"]:o=s.length/Re(e),["nullCount"]:l=t.nullBitmap?-1:0}=t;return new dt(e,n,o,l,[void 0,s,i])}visitList(t){let{["type"]:e,["offset"]:n=0,["child"]:i}=t,s=H(t.nullBitmap),o=Fn(t.valueOffsets),{["length"]:l=o.length-1,["nullCount"]:d=t.nullBitmap?-1:0}=t;return new dt(e,n,l,d,[o,void 0,s],[i])}visitStruct(t){let{["type"]:e,["offset"]:n=0,["children"]:i=[]}=t,s=H(t.nullBitmap),{length:o=i.reduce((d,{length:h})=>Math.max(d,h),0),nullCount:l=t.nullBitmap?-1:0}=t;return new dt(e,n,o,l,[void 0,void 0,s],i)}visitUnion(t){let{["type"]:e,["offset"]:n=0,["children"]:i=[]}=t,s=H(t.nullBitmap),o=Q(e.ArrayType,t.typeIds),{["length"]:l=o.length,["nullCount"]:d=t.nullBitmap?-1:0}=t;if(M.isSparseUnion(e))return new dt(e,n,l,d,[void 0,void 0,s,o],i);let h=Fn(t.valueOffsets);return new dt(e,n,l,d,[h,void 0,s,o],i)}visitDictionary(t){let{["type"]:e,["offset"]:n=0}=t,i=H(t.nullBitmap),s=Q(e.indices.ArrayType,t.data),{["dictionary"]:o=new z([new Bn().visit({type:e.dictionary})])}=t,{["length"]:l=s.length,["nullCount"]:d=t.nullBitmap?-1:0}=t;return new dt(e,n,l,d,[void 0,s,i],[],o)}visitInterval(t){let{["type"]:e,["offset"]:n=0}=t,i=H(t.nullBitmap),s=Q(e.ArrayType,t.data),{["length"]:o=s.length/Re(e),["nullCount"]:l=t.nullBitmap?-1:0}=t;return new dt(e,n,o,l,[void 0,s,i])}visitFixedSizeList(t){let{["type"]:e,["offset"]:n=0,["child"]:i=new Bn().visit({type:e.valueType})}=t,s=H(t.nullBitmap),{["length"]:o=i.length/Re(e),["nullCount"]:l=t.nullBitmap?-1:0}=t;return new dt(e,n,o,l,[void 0,void 0,s],[i])}visitMap(t){let{["type"]:e,["offset"]:n=0,["child"]:i=new Bn().visit({type:e.childType})}=t,s=H(t.nullBitmap),o=Fn(t.valueOffsets),{["length"]:l=o.length-1,["nullCount"]:d=t.nullBitmap?-1:0}=t;return new dt(e,n,l,d,[o,void 0,s],[i])}};function W(r){return new Bn().visit(r)}var Hi=class{constructor(t=0,e){this.numChunks=t,this.getChunkIterator=e,this.chunkIndex=0,this.chunkIterator=this.getChunkIterator(0)}next(){for(;this.chunkIndex<this.numChunks;){let t=this.chunkIterator.next();if(!t.done)return t;++this.chunkIndex<this.numChunks&&(this.chunkIterator=this.getChunkIterator(this.chunkIndex))}return{done:!0,value:null}}[Symbol.iterator](){return this}};function go(r){return r.reduce((t,e)=>t+e.nullCount,0)}function wo(r){return r.reduce((t,e,n)=>(t[n+1]=t[n]+e.length,t),new Uint32Array(r.length+1))}function vo(r,t,e,n){let i=[];for(let s=-1,o=r.length;++s<o;){let l=r[s],d=t[s],{length:h}=l;if(d>=n)break;if(e>=d+h)continue;if(d>=e&&d+h<=n){i.push(l);continue}let u=Math.max(0,e-d),v=Math.min(n-d,h);i.push(l.slice(u,v-u))}return i.length===0&&i.push(r[0].slice(0,0)),i}function hl(r,t,e,n){let i=0,s=0,o=t.length-1;do{if(i>=o-1)return e<t[o]?n(r,i,e-t[i]):null;s=i+Math.trunc((o-i)*.5),e<t[s]?o=s:i=s}while(i<o)}function Vi(r,t){return r.getValid(t)}function dn(r){function t(e,n,i){return r(e[n],i)}return function(e){let n=this.data;return hl(n,this._offsets,e,t)}}function So(r){let t;function e(n,i,s){return r(n[i],s,t)}return function(n,i){let s=this.data;t=i;let o=hl(s,this._offsets,n,e);return t=void 0,o}}function Io(r){let t;function e(n,i,s){let o=s,l=0,d=0;for(let h=i-1,u=n.length;++h<u;){let v=n[h];if(~(l=r(v,t,o)))return d+l;o=0,d+=v.length}return-1}return function(n,i){t=n;let s=this.data,o=typeof i!="number"?e(s,0,0):hl(s,this._offsets,i,e);return t=void 0,o}}var N=class extends L{};function ly(r,t){return t===null&&r.length>0?0:-1}function cy(r,t){let{nullBitmap:e}=r;if(!e||r.nullCount<=0)return-1;let n=0;for(let i of new xn(e,r.offset+(t||0),r.length,e,bo)){if(!i)return n;++n}return-1}function tt(r,t,e){if(t===void 0)return-1;if(t===null)return cy(r,e);let n=Ht.getVisitFn(r),i=un(t);for(let s=(e||0)-1,o=r.length;++s<o;)if(i(n(r,s)))return s;return-1}function ef(r,t,e){let n=Ht.getVisitFn(r),i=un(t);for(let s=(e||0)-1,o=r.length;++s<o;)if(i(n(r,s)))return s;return-1}N.prototype.visitNull=ly;N.prototype.visitBool=tt;N.prototype.visitInt=tt;N.prototype.visitInt8=tt;N.prototype.visitInt16=tt;N.prototype.visitInt32=tt;N.prototype.visitInt64=tt;N.prototype.visitUint8=tt;N.prototype.visitUint16=tt;N.prototype.visitUint32=tt;N.prototype.visitUint64=tt;N.prototype.visitFloat=tt;N.prototype.visitFloat16=tt;N.prototype.visitFloat32=tt;N.prototype.visitFloat64=tt;N.prototype.visitUtf8=tt;N.prototype.visitBinary=tt;N.prototype.visitFixedSizeBinary=tt;N.prototype.visitDate=tt;N.prototype.visitDateDay=tt;N.prototype.visitDateMillisecond=tt;N.prototype.visitTimestamp=tt;N.prototype.visitTimestampSecond=tt;N.prototype.visitTimestampMillisecond=tt;N.prototype.visitTimestampMicrosecond=tt;N.prototype.visitTimestampNanosecond=tt;N.prototype.visitTime=tt;N.prototype.visitTimeSecond=tt;N.prototype.visitTimeMillisecond=tt;N.prototype.visitTimeMicrosecond=tt;N.prototype.visitTimeNanosecond=tt;N.prototype.visitDecimal=tt;N.prototype.visitList=tt;N.prototype.visitStruct=tt;N.prototype.visitUnion=tt;N.prototype.visitDenseUnion=ef;N.prototype.visitSparseUnion=ef;N.prototype.visitDictionary=tt;N.prototype.visitInterval=tt;N.prototype.visitIntervalDayTime=tt;N.prototype.visitIntervalYearMonth=tt;N.prototype.visitFixedSizeList=tt;N.prototype.visitMap=tt;var Mn=new N;var j=class extends L{};function G(r){let{type:t}=r;if(r.nullCount===0&&r.stride===1&&(t.typeId===_.Timestamp||t instanceof Lt&&t.bitWidth!==64||t instanceof er&&t.bitWidth!==64||t instanceof be&&t.precision!==At.HALF))return new Hi(r.data.length,n=>{let i=r.data[n];return i.values.subarray(0,i.length)[Symbol.iterator]()});let e=0;return new Hi(r.data.length,n=>{let s=r.data[n].length,o=r.slice(e,e+s);return e+=s,new pl(o)})}var pl=class{constructor(t){this.vector=t,this.index=0}next(){return this.index<this.vector.length?{value:this.vector.get(this.index++)}:{done:!0,value:null}}[Symbol.iterator](){return this}};j.prototype.visitNull=G;j.prototype.visitBool=G;j.prototype.visitInt=G;j.prototype.visitInt8=G;j.prototype.visitInt16=G;j.prototype.visitInt32=G;j.prototype.visitInt64=G;j.prototype.visitUint8=G;j.prototype.visitUint16=G;j.prototype.visitUint32=G;j.prototype.visitUint64=G;j.prototype.visitFloat=G;j.prototype.visitFloat16=G;j.prototype.visitFloat32=G;j.prototype.visitFloat64=G;j.prototype.visitUtf8=G;j.prototype.visitBinary=G;j.prototype.visitFixedSizeBinary=G;j.prototype.visitDate=G;j.prototype.visitDateDay=G;j.prototype.visitDateMillisecond=G;j.prototype.visitTimestamp=G;j.prototype.visitTimestampSecond=G;j.prototype.visitTimestampMillisecond=G;j.prototype.visitTimestampMicrosecond=G;j.prototype.visitTimestampNanosecond=G;j.prototype.visitTime=G;j.prototype.visitTimeSecond=G;j.prototype.visitTimeMillisecond=G;j.prototype.visitTimeMicrosecond=G;j.prototype.visitTimeNanosecond=G;j.prototype.visitDecimal=G;j.prototype.visitList=G;j.prototype.visitStruct=G;j.prototype.visitUnion=G;j.prototype.visitDenseUnion=G;j.prototype.visitSparseUnion=G;j.prototype.visitDictionary=G;j.prototype.visitInterval=G;j.prototype.visitIntervalDayTime=G;j.prototype.visitIntervalYearMonth=G;j.prototype.visitFixedSizeList=G;j.prototype.visitMap=G;var oi=new j;var uy=(r,t)=>r+t,gr=class extends L{visitNull(t,e){return 0}visitInt(t,e){return t.type.bitWidth/8}visitFloat(t,e){return t.type.ArrayType.BYTES_PER_ELEMENT}visitBool(t,e){return 1/8}visitDecimal(t,e){return t.type.bitWidth/8}visitDate(t,e){return(t.type.unit+1)*4}visitTime(t,e){return t.type.bitWidth/8}visitTimestamp(t,e){return t.type.unit===et.SECOND?4:8}visitInterval(t,e){return(t.type.unit+1)*4}visitStruct(t,e){return t.children.reduce((n,i)=>n+Ce.visit(i,e),0)}visitFixedSizeBinary(t,e){return t.type.byteWidth}visitMap(t,e){return 8+t.children.reduce((n,i)=>n+Ce.visit(i,e),0)}visitDictionary(t,e){var n;return t.type.indices.bitWidth/8+(((n=t.dictionary)===null||n===void 0?void 0:n.getByteLength(t.values[e]))||0)}},dy=({valueOffsets:r},t)=>8+(r[t+1]-r[t]),fy=({valueOffsets:r},t)=>8+(r[t+1]-r[t]),hy=({valueOffsets:r,stride:t,children:e},n)=>{let i=e[0],{[n*t]:s}=r,{[n*t+1]:o}=r,l=Ce.getVisitFn(i.type),d=i.slice(s,o-s),h=8;for(let u=-1,v=o-s;++u<v;)h+=l(d,u);return h},py=({stride:r,children:t},e)=>{let n=t[0],i=n.slice(e*r,r),s=Ce.getVisitFn(n.type),o=0;for(let l=-1,d=i.length;++l<d;)o+=s(i,l);return o},_y=(r,t)=>r.type.mode===Bt.Dense?rf(r,t):nf(r,t),rf=({type:r,children:t,typeIds:e,valueOffsets:n},i)=>{let s=r.typeIdToChildIndex[e[i]];return 8+Ce.visit(t[s],n[i])},nf=({children:r},t)=>4+Ce.visitMany(r,r.map(()=>t)).reduce(uy,0);gr.prototype.visitUtf8=dy;gr.prototype.visitBinary=fy;gr.prototype.visitList=hy;gr.prototype.visitFixedSizeList=py;gr.prototype.visitUnion=_y;gr.prototype.visitDenseUnion=rf;gr.prototype.visitSparseUnion=nf;var Ce=new gr;var sf,of={},af={},z=class{constructor(t){var e,n,i;let s=t[0]instanceof z?t.flatMap(l=>l.data):t;if(s.length===0||s.some(l=>!(l instanceof dt)))throw new TypeError("Vector constructor expects an Array of Data instances.");let o=(e=s[0])===null||e===void 0?void 0:e.type;switch(s.length){case 0:this._offsets=[0];break;case 1:{let{get:l,set:d,indexOf:h,byteLength:u}=of[o.typeId],v=s[0];this.isValid=S=>Vi(v,S),this.get=S=>l(v,S),this.set=(S,A)=>d(v,S,A),this.indexOf=S=>h(v,S),this.getByteLength=S=>u(v,S),this._offsets=[0,v.length];break}default:Object.setPrototypeOf(this,af[o.typeId]),this._offsets=wo(s);break}this.data=s,this.type=o,this.stride=Re(o),this.numChildren=(i=(n=o.children)===null||n===void 0?void 0:n.length)!==null&&i!==void 0?i:0,this.length=this._offsets[this._offsets.length-1]}get byteLength(){return this._byteLength===-1&&(this._byteLength=this.data.reduce((t,e)=>t+e.byteLength,0)),this._byteLength}get nullCount(){return this._nullCount===-1&&(this._nullCount=go(this.data)),this._nullCount}get ArrayType(){return this.type.ArrayType}get[Symbol.toStringTag](){return`${this.VectorName}<${this.type[Symbol.toStringTag]}>`}get VectorName(){return`${_[this.type.typeId]}Vector`}isValid(t){return!1}get(t){return null}set(t,e){}indexOf(t,e){return-1}includes(t,e){return this.indexOf(t,e)>0}getByteLength(t){return 0}[Symbol.iterator](){return oi.visit(this)}concat(...t){return new z(this.data.concat(t.flatMap(e=>e.data).flat(Number.POSITIVE_INFINITY)))}slice(t,e){return new z(ji(this,t,e,({data:n,_offsets:i},s,o)=>vo(n,i,s,o)))}toJSON(){return[...this]}toArray(){let{type:t,data:e,length:n,stride:i,ArrayType:s}=this;switch(t.typeId){case _.Int:case _.Float:case _.Decimal:case _.Time:case _.Timestamp:switch(e.length){case 0:return new s;case 1:return e[0].values.subarray(0,n*i);default:return e.reduce((o,{values:l,length:d})=>(o.array.set(l.subarray(0,d*i),o.offset),o.offset+=d*i,o),{array:new s(n*i),offset:0}).array}}return[...this]}toString(){return`[${[...this].join(",")}]`}getChild(t){var e;return this.getChildAt((e=this.type.children)===null||e===void 0?void 0:e.findIndex(n=>n.name===t))}getChildAt(t){return t>-1&&t<this.numChildren?new z(this.data.map(({children:e})=>e[t])):null}get isMemoized(){return M.isDictionary(this.type)?this.data[0].dictionary.isMemoized:!1}memoize(){if(M.isDictionary(this.type)){let t=new ai(this.data[0].dictionary),e=this.data.map(n=>{let i=n.clone();return i.dictionary=t,i});return new z(e)}return new ai(this)}unmemoize(){if(M.isDictionary(this.type)&&this.isMemoized){let t=this.data[0].dictionary.unmemoize(),e=this.data.map(n=>{let i=n.clone();return i.dictionary=t,i});return new z(e)}return this}};sf=Symbol.toStringTag;z[sf]=(r=>{r.type=M.prototype,r.data=[],r.length=0,r.stride=1,r.numChildren=0,r._nullCount=-1,r._byteLength=-1,r._offsets=new Uint32Array([0]),r[Symbol.isConcatSpreadable]=!0;let t=Object.keys(_).map(e=>_[e]).filter(e=>typeof e=="number"&&e!==_.NONE);for(let e of t){let n=Ht.getVisitFnByTypeId(e),i=ne.getVisitFnByTypeId(e),s=Mn.getVisitFnByTypeId(e),o=Ce.getVisitFnByTypeId(e);of[e]={get:n,set:i,indexOf:s,byteLength:o},af[e]=Object.create(r,{isValid:{value:dn(Vi)},get:{value:dn(Ht.getVisitFnByTypeId(e))},set:{value:So(ne.getVisitFnByTypeId(e))},indexOf:{value:Io(Mn.getVisitFnByTypeId(e))},getByteLength:{value:dn(Ce.getVisitFnByTypeId(e))}})}return"Vector"})(z.prototype);var ai=class extends z{constructor(t){super(t.data);let e=this.get,n=this.set,i=this.slice,s=new Array(this.length);Object.defineProperty(this,"get",{value(o){let l=s[o];if(l!==void 0)return l;let d=e.call(this,o);return s[o]=d,d}}),Object.defineProperty(this,"set",{value(o,l){n.call(this,o,l),s[o]=l}}),Object.defineProperty(this,"slice",{value:(o,l)=>new ai(i.call(this,o,l))}),Object.defineProperty(this,"isMemoized",{value:!0}),Object.defineProperty(this,"unmemoize",{value:()=>new z(this.data)}),Object.defineProperty(this,"memoize",{value:()=>this})}};function lf(r){if(!r||r.length<=0)return function(i){return!0};let t="",e=r.filter(n=>n===n);return e.length>0&&(t=`
    switch (x) {${e.map(n=>`
        case ${my(n)}:`).join("")}
            return false;
    }`),r.length!==e.length&&(t=`if (x !== x) return false;
${t}`),new Function("x",`${t}
return true;`)}function my(r){return typeof r!="bigint"?Qe(r):Us?`${Qe(r)}n`:`"${Qe(r)}"`}var _l=(r,t)=>(Math.ceil(r)*t+63&-64||64)/t,yy=(r,t=0)=>r.length>=t?r.subarray(0,t):Zn(new r.constructor(t),r,0),fn=class{constructor(t,e=1){this.buffer=t,this.stride=e,this.BYTES_PER_ELEMENT=t.BYTES_PER_ELEMENT,this.ArrayType=t.constructor,this._resize(this.length=Math.ceil(t.length/e))}get byteLength(){return Math.ceil(this.length*this.stride)*this.BYTES_PER_ELEMENT}get reservedLength(){return this.buffer.length/this.stride}get reservedByteLength(){return this.buffer.byteLength}set(t,e){return this}append(t){return this.set(this.length,t)}reserve(t){if(t>0){this.length+=t;let e=this.stride,n=this.length*e,i=this.buffer.length;n>=i&&this._resize(i===0?_l(n*1,this.BYTES_PER_ELEMENT):_l(n*2,this.BYTES_PER_ELEMENT))}return this}flush(t=this.length){t=_l(t*this.stride,this.BYTES_PER_ELEMENT);let e=yy(this.buffer,t);return this.clear(),e}clear(){return this.length=0,this._resize(0),this}_resize(t){return this.buffer=Zn(new this.ArrayType(t),this.buffer)}};fn.prototype.offset=0;var Yr=class extends fn{last(){return this.get(this.length-1)}get(t){return this.buffer[t]}set(t,e){return this.reserve(t-this.length+1),this.buffer[t*this.stride]=e,this}},li=class extends Yr{constructor(t=new Uint8Array(0)){super(t,1/8),this.numValid=0}get numInvalid(){return this.length-this.numValid}get(t){return this.buffer[t>>3]>>t%8&1}set(t,e){let{buffer:n}=this.reserve(t-this.length+1),i=t>>3,s=t%8,o=n[i]>>s&1;return e?o===0&&(n[i]|=1<<s,++this.numValid):o===1&&(n[i]&=~(1<<s),--this.numValid),this}clear(){return this.numValid=0,super.clear()}},ci=class extends Yr{constructor(t=new Int32Array(1)){super(t,1)}append(t){return this.set(this.length-1,t)}set(t,e){let n=this.length-1,i=this.reserve(t-n+1).buffer;return n<t++&&i.fill(i[n],n,t),i[t]=i[t-1]+e,this}flush(t=this.length-1){return t>this.length&&this.set(t-1,0),super.flush(t+1)}};var Ft=class{constructor({type:t,nullValues:e}){this.length=0,this.finished=!1,this.type=t,this.children=[],this.nullValues=e,this.stride=Re(t),this._nulls=new li,e&&e.length>0&&(this._isValid=lf(e))}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t){throw new Error('"throughDOM" not available in this environment')}toVector(){return new z([this.flush()])}get ArrayType(){return this.type.ArrayType}get nullCount(){return this._nulls.numInvalid}get numChildren(){return this.children.length}get byteLength(){let t=0,{_offsets:e,_values:n,_nulls:i,_typeIds:s,children:o}=this;return e&&(t+=e.byteLength),n&&(t+=n.byteLength),i&&(t+=i.byteLength),s&&(t+=s.byteLength),o.reduce((l,d)=>l+d.byteLength,t)}get reservedLength(){return this._nulls.reservedLength}get reservedByteLength(){let t=0;return this._offsets&&(t+=this._offsets.reservedByteLength),this._values&&(t+=this._values.reservedByteLength),this._nulls&&(t+=this._nulls.reservedByteLength),this._typeIds&&(t+=this._typeIds.reservedByteLength),this.children.reduce((e,n)=>e+n.reservedByteLength,t)}get valueOffsets(){return this._offsets?this._offsets.buffer:null}get values(){return this._values?this._values.buffer:null}get nullBitmap(){return this._nulls?this._nulls.buffer:null}get typeIds(){return this._typeIds?this._typeIds.buffer:null}append(t){return this.set(this.length,t)}isValid(t){return this._isValid(t)}set(t,e){return this.setValid(t,this.isValid(e))&&this.setValue(t,e),this}setValue(t,e){this._setValue(this,t,e)}setValid(t,e){return this.length=this._nulls.set(t,+e).length,e}addChild(t,e=`${this.numChildren}`){throw new Error(`Cannot append children to non-nested type "${this.type}"`)}getChildAt(t){return this.children[t]||null}flush(){let t,e,n,i,{type:s,length:o,nullCount:l,_typeIds:d,_offsets:h,_values:u,_nulls:v}=this;(e=d==null?void 0:d.flush(o))?i=h==null?void 0:h.flush(o):(i=h==null?void 0:h.flush(o))?t=u==null?void 0:u.flush(h.last()):t=u==null?void 0:u.flush(o),l>0&&(n=v==null?void 0:v.flush(o));let S=this.children.map(A=>A.flush());return this.clear(),W({type:s,length:o,nullCount:l,children:S,child:S[0],data:t,typeIds:e,nullBitmap:n,valueOffsets:i})}finish(){this.finished=!0;for(let t of this.children)t.finish();return this}clear(){var t,e,n,i;this.length=0,(t=this._nulls)===null||t===void 0||t.clear(),(e=this._values)===null||e===void 0||e.clear(),(n=this._offsets)===null||n===void 0||n.clear(),(i=this._typeIds)===null||i===void 0||i.clear();for(let s of this.children)s.clear();return this}};Ft.prototype.length=1;Ft.prototype.stride=1;Ft.prototype.children=null;Ft.prototype.finished=!1;Ft.prototype.nullValues=null;Ft.prototype._isValid=()=>!0;var Kt=class extends Ft{constructor(t){super(t),this._values=new Yr(new this.ArrayType(0),this.stride)}setValue(t,e){let n=this._values;return n.reserve(t-n.length+1),super.setValue(t,e)}},wr=class extends Ft{constructor(t){super(t),this._pendingLength=0,this._offsets=new ci}setValue(t,e){let n=this._pending||(this._pending=new Map),i=n.get(t);i&&(this._pendingLength-=i.length),this._pendingLength+=e instanceof br?e[Ye].length:e.length,n.set(t,e)}setValid(t,e){return super.setValid(t,e)?!0:((this._pending||(this._pending=new Map)).set(t,void 0),!1)}clear(){return this._pendingLength=0,this._pending=void 0,super.clear()}flush(){return this._flush(),super.flush()}finish(){return this._flush(),super.finish()}_flush(){let t=this._pending,e=this._pendingLength;return this._pendingLength=0,this._pending=void 0,t&&t.size>0&&this._flushPending(t,e),this}};var On=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}offset(){return this.bb.readInt64(this.bb_pos)}metaDataLength(){return this.bb.readInt32(this.bb_pos+8)}bodyLength(){return this.bb.readInt64(this.bb_pos+16)}static sizeOf(){return 24}static createBlock(t,e,n,i){return t.prep(8,24),t.writeInt64(i),t.pad(4),t.writeInt32(n),t.writeInt64(e),t.offset()}};var vr=new Int32Array(2),To=new Float32Array(vr.buffer),Ao=new Float64Array(vr.buffer),ui=new Uint16Array(new Uint8Array([1,0]).buffer)[0]===1;var Vt=class{constructor(t,e){this.low=t|0,this.high=e|0}static create(t,e){return t==0&&e==0?Vt.ZERO:new Vt(t,e)}toFloat64(){return(this.low>>>0)+this.high*4294967296}equals(t){return this.low==t.low&&this.high==t.high}};Vt.ZERO=new Vt(0,0);var zi;(function(r){r[r.UTF8_BYTES=1]="UTF8_BYTES",r[r.UTF16_STRING=2]="UTF16_STRING"})(zi||(zi={}));var me=class{constructor(t){this.bytes_=t,this.position_=0}static allocate(t){return new me(new Uint8Array(t))}clear(){this.position_=0}bytes(){return this.bytes_}position(){return this.position_}setPosition(t){this.position_=t}capacity(){return this.bytes_.length}readInt8(t){return this.readUint8(t)<<24>>24}readUint8(t){return this.bytes_[t]}readInt16(t){return this.readUint16(t)<<16>>16}readUint16(t){return this.bytes_[t]|this.bytes_[t+1]<<8}readInt32(t){return this.bytes_[t]|this.bytes_[t+1]<<8|this.bytes_[t+2]<<16|this.bytes_[t+3]<<24}readUint32(t){return this.readInt32(t)>>>0}readInt64(t){return new Vt(this.readInt32(t),this.readInt32(t+4))}readUint64(t){return new Vt(this.readUint32(t),this.readUint32(t+4))}readFloat32(t){return vr[0]=this.readInt32(t),To[0]}readFloat64(t){return vr[ui?0:1]=this.readInt32(t),vr[ui?1:0]=this.readInt32(t+4),Ao[0]}writeInt8(t,e){this.bytes_[t]=e}writeUint8(t,e){this.bytes_[t]=e}writeInt16(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8}writeUint16(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8}writeInt32(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24}writeUint32(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24}writeInt64(t,e){this.writeInt32(t,e.low),this.writeInt32(t+4,e.high)}writeUint64(t,e){this.writeUint32(t,e.low),this.writeUint32(t+4,e.high)}writeFloat32(t,e){To[0]=e,this.writeInt32(t,vr[0])}writeFloat64(t,e){Ao[0]=e,this.writeInt32(t,vr[ui?0:1]),this.writeInt32(t+4,vr[ui?1:0])}getBufferIdentifier(){if(this.bytes_.length<this.position_+4+4)throw new Error("FlatBuffers: ByteBuffer is too short to contain an identifier.");let t="";for(let e=0;e<4;e++)t+=String.fromCharCode(this.readInt8(this.position_+4+e));return t}__offset(t,e){let n=t-this.readInt32(t);return e<this.readInt16(n)?this.readInt16(n+e):0}__union(t,e){return t.bb_pos=e+this.readInt32(e),t.bb=this,t}__string(t,e){t+=this.readInt32(t);let n=this.readInt32(t),i="",s=0;if(t+=4,e===zi.UTF8_BYTES)return this.bytes_.subarray(t,t+n);for(;s<n;){let o,l=this.readUint8(t+s++);if(l<192)o=l;else{let d=this.readUint8(t+s++);if(l<224)o=(l&31)<<6|d&63;else{let h=this.readUint8(t+s++);if(l<240)o=(l&15)<<12|(d&63)<<6|h&63;else{let u=this.readUint8(t+s++);o=(l&7)<<18|(d&63)<<12|(h&63)<<6|u&63}}}o<65536?i+=String.fromCharCode(o):(o-=65536,i+=String.fromCharCode((o>>10)+55296,(o&(1<<10)-1)+56320))}return i}__union_with_string(t,e){return typeof t=="string"?this.__string(e):this.__union(t,e)}__indirect(t){return t+this.readInt32(t)}__vector(t){return t+this.readInt32(t)+4}__vector_len(t){return this.readInt32(t+this.readInt32(t))}__has_identifier(t){if(t.length!=4)throw new Error("FlatBuffers: file identifier must be length "+4);for(let e=0;e<4;e++)if(t.charCodeAt(e)!=this.readInt8(this.position()+4+e))return!1;return!0}createLong(t,e){return Vt.create(t,e)}createScalarList(t,e){let n=[];for(let i=0;i<e;++i)t(i)!==null&&n.push(t(i));return n}createObjList(t,e){let n=[];for(let i=0;i<e;++i){let s=t(i);s!==null&&n.push(s.unpack())}return n}};var Gr=class{constructor(t){this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1,this.string_maps=null;let e;t?e=t:e=1024,this.bb=me.allocate(e),this.space=e}clear(){this.bb.clear(),this.space=this.bb.capacity(),this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1,this.string_maps=null}forceDefaults(t){this.force_defaults=t}dataBuffer(){return this.bb}asUint8Array(){return this.bb.bytes().subarray(this.bb.position(),this.bb.position()+this.offset())}prep(t,e){t>this.minalign&&(this.minalign=t);let n=~(this.bb.capacity()-this.space+e)+1&t-1;for(;this.space<n+t+e;){let i=this.bb.capacity();this.bb=Gr.growByteBuffer(this.bb),this.space+=this.bb.capacity()-i}this.pad(n)}pad(t){for(let e=0;e<t;e++)this.bb.writeInt8(--this.space,0)}writeInt8(t){this.bb.writeInt8(this.space-=1,t)}writeInt16(t){this.bb.writeInt16(this.space-=2,t)}writeInt32(t){this.bb.writeInt32(this.space-=4,t)}writeInt64(t){this.bb.writeInt64(this.space-=8,t)}writeFloat32(t){this.bb.writeFloat32(this.space-=4,t)}writeFloat64(t){this.bb.writeFloat64(this.space-=8,t)}addInt8(t){this.prep(1,0),this.writeInt8(t)}addInt16(t){this.prep(2,0),this.writeInt16(t)}addInt32(t){this.prep(4,0),this.writeInt32(t)}addInt64(t){this.prep(8,0),this.writeInt64(t)}addFloat32(t){this.prep(4,0),this.writeFloat32(t)}addFloat64(t){this.prep(8,0),this.writeFloat64(t)}addFieldInt8(t,e,n){(this.force_defaults||e!=n)&&(this.addInt8(e),this.slot(t))}addFieldInt16(t,e,n){(this.force_defaults||e!=n)&&(this.addInt16(e),this.slot(t))}addFieldInt32(t,e,n){(this.force_defaults||e!=n)&&(this.addInt32(e),this.slot(t))}addFieldInt64(t,e,n){(this.force_defaults||!e.equals(n))&&(this.addInt64(e),this.slot(t))}addFieldFloat32(t,e,n){(this.force_defaults||e!=n)&&(this.addFloat32(e),this.slot(t))}addFieldFloat64(t,e,n){(this.force_defaults||e!=n)&&(this.addFloat64(e),this.slot(t))}addFieldOffset(t,e,n){(this.force_defaults||e!=n)&&(this.addOffset(e),this.slot(t))}addFieldStruct(t,e,n){e!=n&&(this.nested(e),this.slot(t))}nested(t){if(t!=this.offset())throw new Error("FlatBuffers: struct must be serialized inline.")}notNested(){if(this.isNested)throw new Error("FlatBuffers: object serialization must not be nested.")}slot(t){this.vtable!==null&&(this.vtable[t]=this.offset())}offset(){return this.bb.capacity()-this.space}static growByteBuffer(t){let e=t.capacity();if(e&3221225472)throw new Error("FlatBuffers: cannot grow buffer beyond 2 gigabytes.");let n=e<<1,i=me.allocate(n);return i.setPosition(n-e),i.bytes().set(t.bytes(),n-e),i}addOffset(t){this.prep(4,0),this.writeInt32(this.offset()-t+4)}startObject(t){this.notNested(),this.vtable==null&&(this.vtable=[]),this.vtable_in_use=t;for(let e=0;e<t;e++)this.vtable[e]=0;this.isNested=!0,this.object_start=this.offset()}endObject(){if(this.vtable==null||!this.isNested)throw new Error("FlatBuffers: endObject called without startObject");this.addInt32(0);let t=this.offset(),e=this.vtable_in_use-1;for(;e>=0&&this.vtable[e]==0;e--);let n=e+1;for(;e>=0;e--)this.addInt16(this.vtable[e]!=0?t-this.vtable[e]:0);let i=2;this.addInt16(t-this.object_start);let s=(n+i)*2;this.addInt16(s);let o=0,l=this.space;t:for(e=0;e<this.vtables.length;e++){let d=this.bb.capacity()-this.vtables[e];if(s==this.bb.readInt16(d)){for(let h=2;h<s;h+=2)if(this.bb.readInt16(l+h)!=this.bb.readInt16(d+h))continue t;o=this.vtables[e];break}}return o?(this.space=this.bb.capacity()-t,this.bb.writeInt32(this.space,o-t)):(this.vtables.push(this.offset()),this.bb.writeInt32(this.bb.capacity()-t,this.offset()-t)),this.isNested=!1,t}finish(t,e,n){let i=n?4:0;if(e){let s=e;if(this.prep(this.minalign,4+4+i),s.length!=4)throw new Error("FlatBuffers: file identifier must be length "+4);for(let o=4-1;o>=0;o--)this.writeInt8(s.charCodeAt(o))}this.prep(this.minalign,4+i),this.addOffset(t),i&&this.addInt32(this.bb.capacity()-this.space),this.bb.setPosition(this.space)}finishSizePrefixed(t,e){this.finish(t,e,!0)}requiredField(t,e){let n=this.bb.capacity()-t,i=n-this.bb.readInt32(n);if(!(this.bb.readInt16(i+e)!=0))throw new Error("FlatBuffers: field "+e+" must be set")}startVector(t,e,n){this.notNested(),this.vector_num_elems=e,this.prep(4,t*e),this.prep(n,t*e)}endVector(){return this.writeInt32(this.vector_num_elems),this.offset()}createSharedString(t){if(!t)return 0;if(this.string_maps||(this.string_maps=new Map),this.string_maps.has(t))return this.string_maps.get(t);let e=this.createString(t);return this.string_maps.set(t,e),e}createString(t){if(!t)return 0;let e;if(t instanceof Uint8Array)e=t;else{e=[];let n=0;for(;n<t.length;){let i,s=t.charCodeAt(n++);if(s<55296||s>=56320)i=s;else{let o=t.charCodeAt(n++);i=(s<<10)+o+(65536-(55296<<10)-56320)}i<128?e.push(i):(i<2048?e.push(i>>6&31|192):(i<65536?e.push(i>>12&15|224):e.push(i>>18&7|240,i>>12&63|128),e.push(i>>6&63|128)),e.push(i&63|128))}}this.addInt8(0),this.startVector(1,e.length,1),this.bb.setPosition(this.space-=e.length);for(let n=0,i=this.space,s=this.bb.bytes();n<e.length;n++)s[i++]=e[n];return this.endVector()}createLong(t,e){return Vt.create(t,e)}createObjectOffset(t){return t===null?0:typeof t=="string"?this.createString(t):t.pack(this)}createObjectOffsetList(t){let e=[];for(let n=0;n<t.length;++n){let i=t[n];if(i!==null)e.push(this.createObjectOffset(i));else throw new Error("FlatBuffers: Argument for createObjectOffsetList cannot contain null.")}return e}createStructOffsetList(t,e){return e(this,t.length),this.createObjectOffsetList(t),this.endVector()}};var St=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsKeyValue(t,e){return(e||new St).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsKeyValue(t,e){return t.setPosition(t.position()+4),(e||new St).__init(t.readInt32(t.position())+t.position(),t)}key(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}value(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}static startKeyValue(t){t.startObject(2)}static addKey(t,e){t.addFieldOffset(0,e,0)}static addValue(t,e){t.addFieldOffset(1,e,0)}static endKeyValue(t){return t.endObject()}static createKeyValue(t,e,n){return St.startKeyValue(t),St.addKey(t,e),St.addValue(t,n),St.endKeyValue(t)}};var hn;(function(r){r[r.V1=0]="V1",r[r.V2=1]="V2",r[r.V3=2]="V3",r[r.V4=3]="V4",r[r.V5=4]="V5"})(hn||(hn={}));var pn;(function(r){r[r.Little=0]="Little",r[r.Big=1]="Big"})(pn||(pn={}));var Wi;(function(r){r[r.DenseArray=0]="DenseArray"})(Wi||(Wi={}));var Jt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsInt(t,e){return(e||new Jt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsInt(t,e){return t.setPosition(t.position()+4),(e||new Jt).__init(t.readInt32(t.position())+t.position(),t)}bitWidth(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}isSigned(){let t=this.bb.__offset(this.bb_pos,6);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startInt(t){t.startObject(2)}static addBitWidth(t,e){t.addFieldInt32(0,e,0)}static addIsSigned(t,e){t.addFieldInt8(1,+e,0)}static endInt(t){return t.endObject()}static createInt(t,e,n){return Jt.startInt(t),Jt.addBitWidth(t,e),Jt.addIsSigned(t,n),Jt.endInt(t)}};var Le=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDictionaryEncoding(t,e){return(e||new Le).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDictionaryEncoding(t,e){return t.setPosition(t.position()+4),(e||new Le).__init(t.readInt32(t.position())+t.position(),t)}id(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}indexType(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new Jt).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}isOrdered(){let t=this.bb.__offset(this.bb_pos,8);return t?!!this.bb.readInt8(this.bb_pos+t):!1}dictionaryKind(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt16(this.bb_pos+t):Wi.DenseArray}static startDictionaryEncoding(t){t.startObject(4)}static addId(t,e){t.addFieldInt64(0,e,t.createLong(0,0))}static addIndexType(t,e){t.addFieldOffset(1,e,0)}static addIsOrdered(t,e){t.addFieldInt8(2,+e,0)}static addDictionaryKind(t,e){t.addFieldInt16(3,e,Wi.DenseArray)}static endDictionaryEncoding(t){return t.endObject()}};var Sr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBinary(t,e){return(e||new Sr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBinary(t,e){return t.setPosition(t.position()+4),(e||new Sr).__init(t.readInt32(t.position())+t.position(),t)}static startBinary(t){t.startObject(0)}static endBinary(t){return t.endObject()}static createBinary(t){return Sr.startBinary(t),Sr.endBinary(t)}};var Ir=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBool(t,e){return(e||new Ir).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBool(t,e){return t.setPosition(t.position()+4),(e||new Ir).__init(t.readInt32(t.position())+t.position(),t)}static startBool(t){t.startObject(0)}static endBool(t){return t.endObject()}static createBool(t){return Ir.startBool(t),Ir.endBool(t)}};var Yi;(function(r){r[r.DAY=0]="DAY",r[r.MILLISECOND=1]="MILLISECOND"})(Yi||(Yi={}));var ge=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDate(t,e){return(e||new ge).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDate(t,e){return t.setPosition(t.position()+4),(e||new ge).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Yi.MILLISECOND}static startDate(t){t.startObject(1)}static addUnit(t,e){t.addFieldInt16(0,e,Yi.MILLISECOND)}static endDate(t){return t.endObject()}static createDate(t,e){return ge.startDate(t),ge.addUnit(t,e),ge.endDate(t)}};var qt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDecimal(t,e){return(e||new qt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDecimal(t,e){return t.setPosition(t.position()+4),(e||new qt).__init(t.readInt32(t.position())+t.position(),t)}precision(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}scale(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt32(this.bb_pos+t):0}bitWidth(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readInt32(this.bb_pos+t):128}static startDecimal(t){t.startObject(3)}static addPrecision(t,e){t.addFieldInt32(0,e,0)}static addScale(t,e){t.addFieldInt32(1,e,0)}static addBitWidth(t,e){t.addFieldInt32(2,e,128)}static endDecimal(t){return t.endObject()}static createDecimal(t,e,n,i){return qt.startDecimal(t),qt.addPrecision(t,e),qt.addScale(t,n),qt.addBitWidth(t,i),qt.endDecimal(t)}};var _n;(function(r){r[r.SECOND=0]="SECOND",r[r.MILLISECOND=1]="MILLISECOND",r[r.MICROSECOND=2]="MICROSECOND",r[r.NANOSECOND=3]="NANOSECOND"})(_n||(_n={}));var we=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFixedSizeBinary(t,e){return(e||new we).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFixedSizeBinary(t,e){return t.setPosition(t.position()+4),(e||new we).__init(t.readInt32(t.position())+t.position(),t)}byteWidth(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}static startFixedSizeBinary(t){t.startObject(1)}static addByteWidth(t,e){t.addFieldInt32(0,e,0)}static endFixedSizeBinary(t){return t.endObject()}static createFixedSizeBinary(t,e){return we.startFixedSizeBinary(t),we.addByteWidth(t,e),we.endFixedSizeBinary(t)}};var ve=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFixedSizeList(t,e){return(e||new ve).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFixedSizeList(t,e){return t.setPosition(t.position()+4),(e||new ve).__init(t.readInt32(t.position())+t.position(),t)}listSize(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}static startFixedSizeList(t){t.startObject(1)}static addListSize(t,e){t.addFieldInt32(0,e,0)}static endFixedSizeList(t){return t.endObject()}static createFixedSizeList(t,e){return ve.startFixedSizeList(t),ve.addListSize(t,e),ve.endFixedSizeList(t)}};var Gi;(function(r){r[r.HALF=0]="HALF",r[r.SINGLE=1]="SINGLE",r[r.DOUBLE=2]="DOUBLE"})(Gi||(Gi={}));var Se=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFloatingPoint(t,e){return(e||new Se).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFloatingPoint(t,e){return t.setPosition(t.position()+4),(e||new Se).__init(t.readInt32(t.position())+t.position(),t)}precision(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Gi.HALF}static startFloatingPoint(t){t.startObject(1)}static addPrecision(t,e){t.addFieldInt16(0,e,Gi.HALF)}static endFloatingPoint(t){return t.endObject()}static createFloatingPoint(t,e){return Se.startFloatingPoint(t),Se.addPrecision(t,e),Se.endFloatingPoint(t)}};var $i;(function(r){r[r.YEAR_MONTH=0]="YEAR_MONTH",r[r.DAY_TIME=1]="DAY_TIME",r[r.MONTH_DAY_NANO=2]="MONTH_DAY_NANO"})($i||($i={}));var Ie=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsInterval(t,e){return(e||new Ie).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsInterval(t,e){return t.setPosition(t.position()+4),(e||new Ie).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):$i.YEAR_MONTH}static startInterval(t){t.startObject(1)}static addUnit(t,e){t.addFieldInt16(0,e,$i.YEAR_MONTH)}static endInterval(t){return t.endObject()}static createInterval(t,e){return Ie.startInterval(t),Ie.addUnit(t,e),Ie.endInterval(t)}};var Tr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsList(t,e){return(e||new Tr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsList(t,e){return t.setPosition(t.position()+4),(e||new Tr).__init(t.readInt32(t.position())+t.position(),t)}static startList(t){t.startObject(0)}static endList(t){return t.endObject()}static createList(t){return Tr.startList(t),Tr.endList(t)}};var Te=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsMap(t,e){return(e||new Te).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMap(t,e){return t.setPosition(t.position()+4),(e||new Te).__init(t.readInt32(t.position())+t.position(),t)}keysSorted(){let t=this.bb.__offset(this.bb_pos,4);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startMap(t){t.startObject(1)}static addKeysSorted(t,e){t.addFieldInt8(0,+e,0)}static endMap(t){return t.endObject()}static createMap(t,e){return Te.startMap(t),Te.addKeysSorted(t,e),Te.endMap(t)}};var Ar=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsNull(t,e){return(e||new Ar).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsNull(t,e){return t.setPosition(t.position()+4),(e||new Ar).__init(t.readInt32(t.position())+t.position(),t)}static startNull(t){t.startObject(0)}static endNull(t){return t.endObject()}static createNull(t){return Ar.startNull(t),Ar.endNull(t)}};var Fr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsStruct_(t,e){return(e||new Fr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsStruct_(t,e){return t.setPosition(t.position()+4),(e||new Fr).__init(t.readInt32(t.position())+t.position(),t)}static startStruct_(t){t.startObject(0)}static endStruct_(t){return t.endObject()}static createStruct_(t){return Fr.startStruct_(t),Fr.endStruct_(t)}};var ae=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTime(t,e){return(e||new ae).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTime(t,e){return t.setPosition(t.position()+4),(e||new ae).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):_n.MILLISECOND}bitWidth(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt32(this.bb_pos+t):32}static startTime(t){t.startObject(2)}static addUnit(t,e){t.addFieldInt16(0,e,_n.MILLISECOND)}static addBitWidth(t,e){t.addFieldInt32(1,e,32)}static endTime(t){return t.endObject()}static createTime(t,e,n){return ae.startTime(t),ae.addUnit(t,e),ae.addBitWidth(t,n),ae.endTime(t)}};var le=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTimestamp(t,e){return(e||new le).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTimestamp(t,e){return t.setPosition(t.position()+4),(e||new le).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):_n.SECOND}timezone(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}static startTimestamp(t){t.startObject(2)}static addUnit(t,e){t.addFieldInt16(0,e,_n.SECOND)}static addTimezone(t,e){t.addFieldOffset(1,e,0)}static endTimestamp(t){return t.endObject()}static createTimestamp(t,e,n){return le.startTimestamp(t),le.addUnit(t,e),le.addTimezone(t,n),le.endTimestamp(t)}};var Xi;(function(r){r[r.Sparse=0]="Sparse",r[r.Dense=1]="Dense"})(Xi||(Xi={}));var Zt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsUnion(t,e){return(e||new Zt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsUnion(t,e){return t.setPosition(t.position()+4),(e||new Zt).__init(t.readInt32(t.position())+t.position(),t)}mode(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Xi.Sparse}typeIds(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.readInt32(this.bb.__vector(this.bb_pos+e)+t*4):0}typeIdsLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}typeIdsArray(){let t=this.bb.__offset(this.bb_pos,6);return t?new Int32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}static startUnion(t){t.startObject(2)}static addMode(t,e){t.addFieldInt16(0,e,Xi.Sparse)}static addTypeIds(t,e){t.addFieldOffset(1,e,0)}static createTypeIdsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addInt32(e[n]);return t.endVector()}static startTypeIdsVector(t,e){t.startVector(4,e,4)}static endUnion(t){return t.endObject()}static createUnion(t,e,n){return Zt.startUnion(t),Zt.addMode(t,e),Zt.addTypeIds(t,n),Zt.endUnion(t)}};var Er=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsUtf8(t,e){return(e||new Er).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsUtf8(t,e){return t.setPosition(t.position()+4),(e||new Er).__init(t.readInt32(t.position())+t.position(),t)}static startUtf8(t){t.startObject(0)}static endUtf8(t){return t.endObject()}static createUtf8(t){return Er.startUtf8(t),Er.endUtf8(t)}};var Et;(function(r){r[r.NONE=0]="NONE",r[r.Null=1]="Null",r[r.Int=2]="Int",r[r.FloatingPoint=3]="FloatingPoint",r[r.Binary=4]="Binary",r[r.Utf8=5]="Utf8",r[r.Bool=6]="Bool",r[r.Decimal=7]="Decimal",r[r.Date=8]="Date",r[r.Time=9]="Time",r[r.Timestamp=10]="Timestamp",r[r.Interval=11]="Interval",r[r.List=12]="List",r[r.Struct_=13]="Struct_",r[r.Union=14]="Union",r[r.FixedSizeBinary=15]="FixedSizeBinary",r[r.FixedSizeList=16]="FixedSizeList",r[r.Map=17]="Map",r[r.Duration=18]="Duration",r[r.LargeBinary=19]="LargeBinary",r[r.LargeUtf8=20]="LargeUtf8",r[r.LargeList=21]="LargeList"})(Et||(Et={}));var zt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsField(t,e){return(e||new zt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsField(t,e){return t.setPosition(t.position()+4),(e||new zt).__init(t.readInt32(t.position())+t.position(),t)}name(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}nullable(){let t=this.bb.__offset(this.bb_pos,6);return t?!!this.bb.readInt8(this.bb_pos+t):!1}typeType(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readUint8(this.bb_pos+t):Et.NONE}type(t){let e=this.bb.__offset(this.bb_pos,10);return e?this.bb.__union(t,this.bb_pos+e):null}dictionary(t){let e=this.bb.__offset(this.bb_pos,12);return e?(t||new Le).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}children(t,e){let n=this.bb.__offset(this.bb_pos,14);return n?(e||new zt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}childrenLength(){let t=this.bb.__offset(this.bb_pos,14);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,16);return n?(e||new St).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,16);return t?this.bb.__vector_len(this.bb_pos+t):0}static startField(t){t.startObject(7)}static addName(t,e){t.addFieldOffset(0,e,0)}static addNullable(t,e){t.addFieldInt8(1,+e,0)}static addTypeType(t,e){t.addFieldInt8(2,e,Et.NONE)}static addType(t,e){t.addFieldOffset(3,e,0)}static addDictionary(t,e){t.addFieldOffset(4,e,0)}static addChildren(t,e){t.addFieldOffset(5,e,0)}static createChildrenVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startChildrenVector(t,e){t.startVector(4,e,4)}static addCustomMetadata(t,e){t.addFieldOffset(6,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endField(t){return t.endObject()}};var Mt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsSchema(t,e){return(e||new Mt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSchema(t,e){return t.setPosition(t.position()+4),(e||new Mt).__init(t.readInt32(t.position())+t.position(),t)}endianness(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):pn.Little}fields(t,e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new zt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}fieldsLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new St).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}features(t){let e=this.bb.__offset(this.bb_pos,10);return e?this.bb.readInt64(this.bb.__vector(this.bb_pos+e)+t*8):this.bb.createLong(0,0)}featuresLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.__vector_len(this.bb_pos+t):0}static startSchema(t){t.startObject(4)}static addEndianness(t,e){t.addFieldInt16(0,e,pn.Little)}static addFields(t,e){t.addFieldOffset(1,e,0)}static createFieldsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startFieldsVector(t,e){t.startVector(4,e,4)}static addCustomMetadata(t,e){t.addFieldOffset(2,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static addFeatures(t,e){t.addFieldOffset(3,e,0)}static createFeaturesVector(t,e){t.startVector(8,e.length,8);for(let n=e.length-1;n>=0;n--)t.addInt64(e[n]);return t.endVector()}static startFeaturesVector(t,e){t.startVector(8,e,8)}static endSchema(t){return t.endObject()}static finishSchemaBuffer(t,e){t.finish(e)}static finishSizePrefixedSchemaBuffer(t,e){t.finish(e,void 0,!0)}static createSchema(t,e,n,i,s){return Mt.startSchema(t),Mt.addEndianness(t,e),Mt.addFields(t,n),Mt.addCustomMetadata(t,i),Mt.addFeatures(t,s),Mt.endSchema(t)}};var ce=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFooter(t,e){return(e||new ce).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFooter(t,e){return t.setPosition(t.position()+4),(e||new ce).__init(t.readInt32(t.position())+t.position(),t)}version(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):hn.V1}schema(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new Mt).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}dictionaries(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new On).__init(this.bb.__vector(this.bb_pos+n)+t*24,this.bb):null}dictionariesLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}recordBatches(t,e){let n=this.bb.__offset(this.bb_pos,10);return n?(e||new On).__init(this.bb.__vector(this.bb_pos+n)+t*24,this.bb):null}recordBatchesLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,12);return n?(e||new St).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}static startFooter(t){t.startObject(5)}static addVersion(t,e){t.addFieldInt16(0,e,hn.V1)}static addSchema(t,e){t.addFieldOffset(1,e,0)}static addDictionaries(t,e){t.addFieldOffset(2,e,0)}static startDictionariesVector(t,e){t.startVector(24,e,8)}static addRecordBatches(t,e){t.addFieldOffset(3,e,0)}static startRecordBatchesVector(t,e){t.startVector(24,e,8)}static addCustomMetadata(t,e){t.addFieldOffset(4,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endFooter(t){return t.endObject()}static finishFooterBuffer(t,e){t.finish(e)}static finishSizePrefixedFooterBuffer(t,e){t.finish(e,void 0,!0)}};var nt=class{constructor(t=[],e,n){this.fields=t||[],this.metadata=e||new Map,n||(n=ml(t)),this.dictionaries=n}get[Symbol.toStringTag](){return"Schema"}get names(){return this.fields.map(t=>t.name)}toString(){return`Schema<{ ${this.fields.map((t,e)=>`${e}: ${t}`).join(", ")} }>`}select(t){let e=new Set(t),n=this.fields.filter(i=>e.has(i.name));return new nt(n,this.metadata)}selectAt(t){let e=t.map(n=>this.fields[n]).filter(Boolean);return new nt(e,this.metadata)}assign(...t){let e=t[0]instanceof nt?t[0]:Array.isArray(t[0])?new nt(t[0]):new nt(t),n=[...this.fields],i=Eo(Eo(new Map,this.metadata),e.metadata),s=e.fields.filter(l=>{let d=n.findIndex(h=>h.name===l.name);return~d?(n[d]=l.clone({metadata:Eo(Eo(new Map,n[d].metadata),l.metadata)}))&&!1:!0}),o=ml(s,new Map);return new nt([...n,...s],i,new Map([...this.dictionaries,...o]))}};nt.prototype.fields=null;nt.prototype.metadata=null;nt.prototype.dictionaries=null;var $=class{constructor(t,e,n=!1,i){this.name=t,this.type=e,this.nullable=n,this.metadata=i||new Map}static new(...t){let[e,n,i,s]=t;return t[0]&&typeof t[0]=="object"&&({name:e}=t[0],n===void 0&&(n=t[0].type),i===void 0&&(i=t[0].nullable),s===void 0&&(s=t[0].metadata)),new $(`${e}`,n,i,s)}get typeId(){return this.type.typeId}get[Symbol.toStringTag](){return"Field"}toString(){return`${this.name}: ${this.type}`}clone(...t){let[e,n,i,s]=t;return!t[0]||typeof t[0]!="object"?[e=this.name,n=this.type,i=this.nullable,s=this.metadata]=t:{name:e=this.name,type:n=this.type,nullable:i=this.nullable,metadata:s=this.metadata}=t[0],$.new(e,n,i,s)}};$.prototype.type=null;$.prototype.name=null;$.prototype.nullable=null;$.prototype.metadata=null;function Eo(r,t){return new Map([...r||new Map,...t||new Map])}function ml(r,t=new Map){for(let e=-1,n=r.length;++e<n;){let s=r[e].type;if(M.isDictionary(s)){if(!t.has(s.id))t.set(s.id,s.dictionary);else if(t.get(s.id)!==s.dictionary)throw new Error("Cannot create Schema containing two different dictionaries with the same Id")}s.children&&s.children.length>0&&ml(s.children,t)}return t}var cf=Vt,by=Gr,gy=me,$r=class{constructor(t,e=Xt.V4,n,i){this.schema=t,this.version=e,n&&(this._recordBatches=n),i&&(this._dictionaryBatches=i)}static decode(t){t=new gy(H(t));let e=ce.getRootAsFooter(t),n=nt.decode(e.schema());return new yl(n,e)}static encode(t){let e=new by,n=nt.encode(e,t.schema);ce.startRecordBatchesVector(e,t.numRecordBatches);for(let o of[...t.recordBatches()].slice().reverse())lr.encode(e,o);let i=e.endVector();ce.startDictionariesVector(e,t.numDictionaries);for(let o of[...t.dictionaryBatches()].slice().reverse())lr.encode(e,o);let s=e.endVector();return ce.startFooter(e),ce.addSchema(e,n),ce.addVersion(e,Xt.V4),ce.addRecordBatches(e,i),ce.addDictionaries(e,s),ce.finishFooterBuffer(e,ce.endFooter(e)),e.asUint8Array()}get numRecordBatches(){return this._recordBatches.length}get numDictionaries(){return this._dictionaryBatches.length}*recordBatches(){for(let t,e=-1,n=this.numRecordBatches;++e<n;)(t=this.getRecordBatch(e))&&(yield t)}*dictionaryBatches(){for(let t,e=-1,n=this.numDictionaries;++e<n;)(t=this.getDictionaryBatch(e))&&(yield t)}getRecordBatch(t){return t>=0&&t<this.numRecordBatches&&this._recordBatches[t]||null}getDictionaryBatch(t){return t>=0&&t<this.numDictionaries&&this._dictionaryBatches[t]||null}};var yl=class extends $r{constructor(t,e){super(t,e.version()),this._footer=e}get numRecordBatches(){return this._footer.recordBatchesLength()}get numDictionaries(){return this._footer.dictionariesLength()}getRecordBatch(t){if(t>=0&&t<this.numRecordBatches){let e=this._footer.recordBatches(t);if(e)return lr.decode(e)}return null}getDictionaryBatch(t){if(t>=0&&t<this.numDictionaries){let e=this._footer.dictionaries(t);if(e)return lr.decode(e)}return null}},lr=class{constructor(t,e,n){this.metaDataLength=t,this.offset=typeof n=="number"?n:n.low,this.bodyLength=typeof e=="number"?e:e.low}static decode(t){return new lr(t.metaDataLength(),t.bodyLength(),t.offset())}static encode(t,e){let{metaDataLength:n}=e,i=new cf(e.offset,0),s=new cf(e.bodyLength,0);return On.createBlock(t,i,n,s)}};var It=Object.freeze({done:!0,value:void 0}),Ki=class{constructor(t){this._json=t}get schema(){return this._json.schema}get batches(){return this._json.batches||[]}get dictionaries(){return this._json.dictionaries||[]}},Rn=class{tee(){return this._getDOMStream().tee()}pipe(t,e){return this._getNodeStream().pipe(t,e)}pipeTo(t,e){return this._getDOMStream().pipeTo(t,e)}pipeThrough(t,e){return this._getDOMStream().pipeThrough(t,e)}_getDOMStream(){return this._DOMStream||(this._DOMStream=this.toDOMStream())}_getNodeStream(){return this._nodeStream||(this._nodeStream=this.toNodeStream())}},xo=class extends Rn{constructor(){super(),this._values=[],this.resolvers=[],this._closedPromise=new Promise(t=>this._closedPromiseResolve=t)}get closed(){return this._closedPromise}cancel(t){return x(this,void 0,void 0,function*(){yield this.return(t)})}write(t){this._ensureOpen()&&(this.resolvers.length<=0?this._values.push(t):this.resolvers.shift().resolve({done:!1,value:t}))}abort(t){this._closedPromiseResolve&&(this.resolvers.length<=0?this._error={error:t}:this.resolvers.shift().reject({done:!0,value:t}))}close(){if(this._closedPromiseResolve){let{resolvers:t}=this;for(;t.length>0;)t.shift().resolve(It);this._closedPromiseResolve(),this._closedPromiseResolve=void 0}}[Symbol.asyncIterator](){return this}toDOMStream(t){return ee.toDOMStream(this._closedPromiseResolve||this._error?this:this._values,t)}toNodeStream(t){return ee.toNodeStream(this._closedPromiseResolve||this._error?this:this._values,t)}throw(t){return x(this,void 0,void 0,function*(){return yield this.abort(t),It})}return(t){return x(this,void 0,void 0,function*(){return yield this.close(),It})}read(t){return x(this,void 0,void 0,function*(){return(yield this.next(t,"read")).value})}peek(t){return x(this,void 0,void 0,function*(){return(yield this.next(t,"peek")).value})}next(...t){return this._values.length>0?Promise.resolve({done:!1,value:this._values.shift()}):this._error?Promise.reject({done:!0,value:this._error.error}):this._closedPromiseResolve?new Promise((e,n)=>{this.resolvers.push({resolve:e,reject:n})}):Promise.resolve(It)}_ensureOpen(){if(this._closedPromiseResolve)return!0;throw new Error("AsyncQueue is closed")}};var xr=class extends xo{write(t){if((t=H(t)).byteLength>0)return super.write(t)}toString(t=!1){return t?Ci(this.toUint8Array(!0)):this.toUint8Array(!1).then(Ci)}toUint8Array(t=!1){return t?Me(this._values)[0]:(()=>x(this,void 0,void 0,function*(){var e,n;let i=[],s=0;try{for(var o=Pe(this),l;l=yield o.next(),!l.done;){let d=l.value;i.push(d),s+=d.byteLength}}catch(d){e={error:d}}finally{try{l&&!l.done&&(n=o.return)&&(yield n.call(o))}finally{if(e)throw e.error}}return Me(i,s)[0]}))()}},Dr=class{constructor(t){t&&(this.source=new bl(ee.fromIterable(t)))}[Symbol.iterator](){return this}next(t){return this.source.next(t)}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}peek(t){return this.source.peek(t)}read(t){return this.source.read(t)}},Ae=class{constructor(t){t instanceof Ae?this.source=t.source:t instanceof xr?this.source=new Xr(ee.fromAsyncIterable(t)):zs(t)?this.source=new Xr(ee.fromNodeStream(t)):Li(t)?this.source=new Xr(ee.fromDOMStream(t)):Hs(t)?this.source=new Xr(ee.fromDOMStream(t.body)):qe(t)?this.source=new Xr(ee.fromIterable(t)):Je(t)?this.source=new Xr(ee.fromAsyncIterable(t)):ze(t)&&(this.source=new Xr(ee.fromAsyncIterable(t)))}[Symbol.asyncIterator](){return this}next(t){return this.source.next(t)}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}get closed(){return this.source.closed}cancel(t){return this.source.cancel(t)}peek(t){return this.source.peek(t)}read(t){return this.source.read(t)}},bl=class{constructor(t){this.source=t}cancel(t){this.return(t)}peek(t){return this.next(t,"peek").value}read(t){return this.next(t,"read").value}next(t,e="read"){return this.source.next({cmd:e,size:t})}throw(t){return Object.create(this.source.throw&&this.source.throw(t)||It)}return(t){return Object.create(this.source.return&&this.source.return(t)||It)}},Xr=class{constructor(t){this.source=t,this._closedPromise=new Promise(e=>this._closedPromiseResolve=e)}cancel(t){return x(this,void 0,void 0,function*(){yield this.return(t)})}get closed(){return this._closedPromise}read(t){return x(this,void 0,void 0,function*(){return(yield this.next(t,"read")).value})}peek(t){return x(this,void 0,void 0,function*(){return(yield this.next(t,"peek")).value})}next(t,e="read"){return x(this,void 0,void 0,function*(){return yield this.source.next({cmd:e,size:t})})}throw(t){return x(this,void 0,void 0,function*(){let e=this.source.throw&&(yield this.source.throw(t))||It;return this._closedPromiseResolve&&this._closedPromiseResolve(),this._closedPromiseResolve=void 0,Object.create(e)})}return(t){return x(this,void 0,void 0,function*(){let e=this.source.return&&(yield this.source.return(t))||It;return this._closedPromiseResolve&&this._closedPromiseResolve(),this._closedPromiseResolve=void 0,Object.create(e)})}};var Ji=class extends Dr{constructor(t,e){super(),this.position=0,this.buffer=H(t),this.size=typeof e>"u"?this.buffer.byteLength:e}readInt32(t){let{buffer:e,byteOffset:n}=this.readAt(t,4);return new DataView(e,n).getInt32(0,!0)}seek(t){return this.position=Math.min(t,this.size),t<this.size}read(t){let{buffer:e,size:n,position:i}=this;return e&&i<n?(typeof t!="number"&&(t=Number.POSITIVE_INFINITY),this.position=Math.min(n,i+Math.min(n-i,t)),e.subarray(i,this.position)):null}readAt(t,e){let n=this.buffer,i=Math.min(this.size,t+e);return n?n.subarray(t,i):new Uint8Array(e)}close(){this.buffer&&(this.buffer=null)}throw(t){return this.close(),{done:!0,value:t}}return(t){return this.close(),{done:!0,value:t}}},mn=class extends Ae{constructor(t,e){super(),this.position=0,this._handle=t,typeof e=="number"?this.size=e:this._pending=(()=>x(this,void 0,void 0,function*(){this.size=(yield t.stat()).size,delete this._pending}))()}readInt32(t){return x(this,void 0,void 0,function*(){let{buffer:e,byteOffset:n}=yield this.readAt(t,4);return new DataView(e,n).getInt32(0,!0)})}seek(t){return x(this,void 0,void 0,function*(){return this._pending&&(yield this._pending),this.position=Math.min(t,this.size),t<this.size})}read(t){return x(this,void 0,void 0,function*(){this._pending&&(yield this._pending);let{_handle:e,size:n,position:i}=this;if(e&&i<n){typeof t!="number"&&(t=Number.POSITIVE_INFINITY);let s=i,o=0,l=0,d=Math.min(n,s+Math.min(n-s,t)),h=new Uint8Array(Math.max(0,(this.position=d)-s));for(;(s+=l)<d&&(o+=l)<h.byteLength;)({bytesRead:l}=yield e.read(h,o,h.byteLength-o,s));return h}return null})}readAt(t,e){return x(this,void 0,void 0,function*(){this._pending&&(yield this._pending);let{_handle:n,size:i}=this;if(n&&t+e<i){let s=Math.min(i,t+e),o=new Uint8Array(s-t);return(yield n.read(o,0,e,t)).buffer}return new Uint8Array(e)})}close(){return x(this,void 0,void 0,function*(){let t=this._handle;this._handle=null,t&&(yield t.close())})}throw(t){return x(this,void 0,void 0,function*(){return yield this.close(),{done:!0,value:t}})}return(t){return x(this,void 0,void 0,function*(){return yield this.close(),{done:!0,value:t}})}};var wl={};An(wl,{BaseInt64:()=>qi,Int128:()=>Fe,Int64:()=>Qt,Uint64:()=>ft});function di(r){return r<0&&(r=4294967295+r+1),`0x${r.toString(16)}`}var fi=8,gl=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8],qi=class{constructor(t){this.buffer=t}high(){return this.buffer[1]}low(){return this.buffer[0]}_times(t){let e=new Uint32Array([this.buffer[1]>>>16,this.buffer[1]&65535,this.buffer[0]>>>16,this.buffer[0]&65535]),n=new Uint32Array([t.buffer[1]>>>16,t.buffer[1]&65535,t.buffer[0]>>>16,t.buffer[0]&65535]),i=e[3]*n[3];this.buffer[0]=i&65535;let s=i>>>16;return i=e[2]*n[3],s+=i,i=e[3]*n[2]>>>0,s+=i,this.buffer[0]+=s<<16,this.buffer[1]=s>>>0<i?65536:0,this.buffer[1]+=s>>>16,this.buffer[1]+=e[1]*n[3]+e[2]*n[2]+e[3]*n[1],this.buffer[1]+=e[0]*n[3]+e[1]*n[2]+e[2]*n[1]+e[3]*n[0]<<16,this}_plus(t){let e=this.buffer[0]+t.buffer[0]>>>0;this.buffer[1]+=t.buffer[1],e<this.buffer[0]>>>0&&++this.buffer[1],this.buffer[0]=e}lessThan(t){return this.buffer[1]<t.buffer[1]||this.buffer[1]===t.buffer[1]&&this.buffer[0]<t.buffer[0]}equals(t){return this.buffer[1]===t.buffer[1]&&this.buffer[0]==t.buffer[0]}greaterThan(t){return t.lessThan(this)}hex(){return`${di(this.buffer[1])} ${di(this.buffer[0])}`}},ft=class extends qi{times(t){return this._times(t),this}plus(t){return this._plus(t),this}static from(t,e=new Uint32Array(2)){return ft.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(2)){return ft.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(2)){let n=t.length,i=new ft(e);for(let s=0;s<n;){let o=fi<n-s?fi:n-s,l=new ft(new Uint32Array([Number.parseInt(t.slice(s,s+o),10),0])),d=new ft(new Uint32Array([gl[o],0]));i.times(d),i.plus(l),s+=o}return i}static convertArray(t){let e=new Uint32Array(t.length*2);for(let n=-1,i=t.length;++n<i;)ft.from(t[n],new Uint32Array(e.buffer,e.byteOffset+2*n*4,2));return e}static multiply(t,e){return new ft(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new ft(new Uint32Array(t.buffer)).plus(e)}},Qt=class extends qi{negate(){return this.buffer[0]=~this.buffer[0]+1,this.buffer[1]=~this.buffer[1],this.buffer[0]==0&&++this.buffer[1],this}times(t){return this._times(t),this}plus(t){return this._plus(t),this}lessThan(t){let e=this.buffer[1]<<0,n=t.buffer[1]<<0;return e<n||e===n&&this.buffer[0]<t.buffer[0]}static from(t,e=new Uint32Array(2)){return Qt.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(2)){return Qt.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(2)){let n=t.startsWith("-"),i=t.length,s=new Qt(e);for(let o=n?1:0;o<i;){let l=fi<i-o?fi:i-o,d=new Qt(new Uint32Array([Number.parseInt(t.slice(o,o+l),10),0])),h=new Qt(new Uint32Array([gl[l],0]));s.times(h),s.plus(d),o+=l}return n?s.negate():s}static convertArray(t){let e=new Uint32Array(t.length*2);for(let n=-1,i=t.length;++n<i;)Qt.from(t[n],new Uint32Array(e.buffer,e.byteOffset+2*n*4,2));return e}static multiply(t,e){return new Qt(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new Qt(new Uint32Array(t.buffer)).plus(e)}},Fe=class{constructor(t){this.buffer=t}high(){return new Qt(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset+8,2))}low(){return new Qt(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset,2))}negate(){return this.buffer[0]=~this.buffer[0]+1,this.buffer[1]=~this.buffer[1],this.buffer[2]=~this.buffer[2],this.buffer[3]=~this.buffer[3],this.buffer[0]==0&&++this.buffer[1],this.buffer[1]==0&&++this.buffer[2],this.buffer[2]==0&&++this.buffer[3],this}times(t){let e=new ft(new Uint32Array([this.buffer[3],0])),n=new ft(new Uint32Array([this.buffer[2],0])),i=new ft(new Uint32Array([this.buffer[1],0])),s=new ft(new Uint32Array([this.buffer[0],0])),o=new ft(new Uint32Array([t.buffer[3],0])),l=new ft(new Uint32Array([t.buffer[2],0])),d=new ft(new Uint32Array([t.buffer[1],0])),h=new ft(new Uint32Array([t.buffer[0],0])),u=ft.multiply(s,h);this.buffer[0]=u.low();let v=new ft(new Uint32Array([u.high(),0]));return u=ft.multiply(i,h),v.plus(u),u=ft.multiply(s,d),v.plus(u),this.buffer[1]=v.low(),this.buffer[3]=v.lessThan(u)?1:0,this.buffer[2]=v.high(),new ft(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset+8,2)).plus(ft.multiply(n,h)).plus(ft.multiply(i,d)).plus(ft.multiply(s,l)),this.buffer[3]+=ft.multiply(e,h).plus(ft.multiply(n,d)).plus(ft.multiply(i,l)).plus(ft.multiply(s,o)).low(),this}plus(t){let e=new Uint32Array(4);return e[3]=this.buffer[3]+t.buffer[3]>>>0,e[2]=this.buffer[2]+t.buffer[2]>>>0,e[1]=this.buffer[1]+t.buffer[1]>>>0,e[0]=this.buffer[0]+t.buffer[0]>>>0,e[0]<this.buffer[0]>>>0&&++e[1],e[1]<this.buffer[1]>>>0&&++e[2],e[2]<this.buffer[2]>>>0&&++e[3],this.buffer[3]=e[3],this.buffer[2]=e[2],this.buffer[1]=e[1],this.buffer[0]=e[0],this}hex(){return`${di(this.buffer[3])} ${di(this.buffer[2])} ${di(this.buffer[1])} ${di(this.buffer[0])}`}static multiply(t,e){return new Fe(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new Fe(new Uint32Array(t.buffer)).plus(e)}static from(t,e=new Uint32Array(4)){return Fe.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(4)){return Fe.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(4)){let n=t.startsWith("-"),i=t.length,s=new Fe(e);for(let o=n?1:0;o<i;){let l=fi<i-o?fi:i-o,d=new Fe(new Uint32Array([Number.parseInt(t.slice(o,o+l),10),0,0,0])),h=new Fe(new Uint32Array([gl[l],0,0,0]));s.times(h),s.plus(d),o+=l}return n?s.negate():s}static convertArray(t){let e=new Uint32Array(t.length*4);for(let n=-1,i=t.length;++n<i;)Fe.from(t[n],new Uint32Array(e.buffer,e.byteOffset+4*4*n,4));return e}};var Zi=class extends L{constructor(t,e,n,i){super(),this.nodesIndex=-1,this.buffersIndex=-1,this.bytes=t,this.nodes=e,this.buffers=n,this.dictionaries=i}visit(t){return super.visit(t instanceof $?t.type:t)}visitNull(t,{length:e}=this.nextFieldNode()){return W({type:t,length:e})}visitBool(t,{length:e,nullCount:n}=this.nextFieldNode()){return W({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitInt(t,{length:e,nullCount:n}=this.nextFieldNode()){return W({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitFloat(t,{length:e,nullCount:n}=this.nextFieldNode()){return W({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitUtf8(t,{length:e,nullCount:n}=this.nextFieldNode()){return W({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),data:this.readData(t)})}visitBinary(t,{length:e,nullCount:n}=this.nextFieldNode()){return W({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),data:this.readData(t)})}visitFixedSizeBinary(t,{length:e,nullCount:n}=this.nextFieldNode()){return W({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitDate(t,{length:e,nullCount:n}=this.nextFieldNode()){return W({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitTimestamp(t,{length:e,nullCount:n}=this.nextFieldNode()){return W({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitTime(t,{length:e,nullCount:n}=this.nextFieldNode()){return W({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitDecimal(t,{length:e,nullCount:n}=this.nextFieldNode()){return W({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitList(t,{length:e,nullCount:n}=this.nextFieldNode()){return W({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),child:this.visit(t.children[0])})}visitStruct(t,{length:e,nullCount:n}=this.nextFieldNode()){return W({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),children:this.visitMany(t.children)})}visitUnion(t){return t.mode===Bt.Sparse?this.visitSparseUnion(t):this.visitDenseUnion(t)}visitDenseUnion(t,{length:e,nullCount:n}=this.nextFieldNode()){return W({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),typeIds:this.readTypeIds(t),valueOffsets:this.readOffsets(t),children:this.visitMany(t.children)})}visitSparseUnion(t,{length:e,nullCount:n}=this.nextFieldNode()){return W({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),typeIds:this.readTypeIds(t),children:this.visitMany(t.children)})}visitDictionary(t,{length:e,nullCount:n}=this.nextFieldNode()){return W({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t.indices),dictionary:this.readDictionary(t)})}visitInterval(t,{length:e,nullCount:n}=this.nextFieldNode()){return W({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitFixedSizeList(t,{length:e,nullCount:n}=this.nextFieldNode()){return W({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),child:this.visit(t.children[0])})}visitMap(t,{length:e,nullCount:n}=this.nextFieldNode()){return W({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),child:this.visit(t.children[0])})}nextFieldNode(){return this.nodes[++this.nodesIndex]}nextBufferRange(){return this.buffers[++this.buffersIndex]}readNullBitmap(t,e,n=this.nextBufferRange()){return e>0&&this.readData(t,n)||new Uint8Array(0)}readOffsets(t,e){return this.readData(t,e)}readTypeIds(t,e){return this.readData(t,e)}readData(t,{length:e,offset:n}=this.nextBufferRange()){return this.bytes.subarray(n,n+e)}readDictionary(t){return this.dictionaries.get(t.id)}},Do=class extends Zi{constructor(t,e,n,i){super(new Uint8Array(0),e,n,i),this.sources=t}readNullBitmap(t,e,{offset:n}=this.nextBufferRange()){return e<=0?new Uint8Array(0):Dn(this.sources[n])}readOffsets(t,{offset:e}=this.nextBufferRange()){return Q(Uint8Array,Q(Int32Array,this.sources[e]))}readTypeIds(t,{offset:e}=this.nextBufferRange()){return Q(Uint8Array,Q(t.ArrayType,this.sources[e]))}readData(t,{offset:e}=this.nextBufferRange()){let{sources:n}=this;return M.isTimestamp(t)?Q(Uint8Array,Qt.convertArray(n[e])):(M.isInt(t)||M.isTime(t))&&t.bitWidth===64?Q(Uint8Array,Qt.convertArray(n[e])):M.isDate(t)&&t.unit===re.MILLISECOND?Q(Uint8Array,Qt.convertArray(n[e])):M.isDecimal(t)?Q(Uint8Array,Fe.convertArray(n[e])):M.isBinary(t)||M.isFixedSizeBinary(t)?wy(n[e]):M.isBool(t)?Dn(n[e]):M.isUtf8(t)?on(n[e].join("")):Q(Uint8Array,Q(t.ArrayType,n[e].map(i=>+i)))}};function wy(r){let t=r.join(""),e=new Uint8Array(t.length/2);for(let n=0;n<t.length;n+=2)e[n>>1]=Number.parseInt(t.slice(n,n+2),16);return e}var hi=class extends wr{constructor(t){super(t),this._values=new fn(new Uint8Array(0))}get byteLength(){let t=this._pendingLength+this.length*4;return this._offsets&&(t+=this._offsets.byteLength),this._values&&(t+=this._values.byteLength),this._nulls&&(t+=this._nulls.byteLength),t}setValue(t,e){return super.setValue(t,H(e))}_flushPending(t,e){let n=this._offsets,i=this._values.reserve(e).buffer,s=0;for(let[o,l]of t)if(l===void 0)n.set(o,0);else{let d=l.length;i.set(l,s),n.set(o,d),s+=d}}};var Bo=class extends Ft{constructor(t){super(t),this._values=new li}setValue(t,e){this._values.set(t,+e)}};var Cn=class extends Kt{};Cn.prototype._setValue=el;var Qi=class extends Cn{};Qi.prototype._setValue=no;var ts=class extends Cn{};ts.prototype._setValue=io;var es=class extends Kt{};es.prototype._setValue=il;var Mo=class extends Ft{constructor({type:t,nullValues:e,dictionaryHashFunction:n}){super({type:new Oe(t.dictionary,t.indices,t.id,t.isOrdered)}),this._nulls=null,this._dictionaryOffset=0,this._keysToIndices=Object.create(null),this.indices=Ln({type:this.type.indices,nullValues:e}),this.dictionary=Ln({type:this.type.dictionary,nullValues:null}),typeof n=="function"&&(this.valueToKey=n)}get values(){return this.indices.values}get nullCount(){return this.indices.nullCount}get nullBitmap(){return this.indices.nullBitmap}get byteLength(){return this.indices.byteLength+this.dictionary.byteLength}get reservedLength(){return this.indices.reservedLength+this.dictionary.reservedLength}get reservedByteLength(){return this.indices.reservedByteLength+this.dictionary.reservedByteLength}isValid(t){return this.indices.isValid(t)}setValid(t,e){let n=this.indices;return e=n.setValid(t,e),this.length=n.length,e}setValue(t,e){let n=this._keysToIndices,i=this.valueToKey(e),s=n[i];return s===void 0&&(n[i]=s=this._dictionaryOffset+this.dictionary.append(e).length-1),this.indices.setValue(t,s)}flush(){let t=this.type,e=this._dictionary,n=this.dictionary.toVector(),i=this.indices.flush().clone(t);return i.dictionary=e?e.concat(n):n,this.finished||(this._dictionaryOffset+=n.length),this._dictionary=i.dictionary,this.clear(),i}finish(){return this.indices.finish(),this.dictionary.finish(),this._dictionaryOffset=0,this._keysToIndices=Object.create(null),super.finish()}clear(){return this.indices.clear(),this.dictionary.clear(),super.clear()}valueToKey(t){return typeof t=="string"?t:`${t}`}};var rs=class extends Kt{};rs.prototype._setValue=tl;var Oo=class extends Ft{setValue(t,e){let[n]=this.children,i=t*this.stride;for(let s=-1,o=e.length;++s<o;)n.set(i+s,e[s])}addChild(t,e="0"){if(this.numChildren>0)throw new Error("FixedSizeListBuilder can only have one child.");let n=this.children.push(t);return this.type=new ir(this.type.listSize,new $(e,t.type,!0)),n}};var kn=class extends Kt{setValue(t,e){this._values.set(t,e)}},Ro=class extends kn{setValue(t,e){super.setValue(t,Ni(e))}},Co=class extends kn{},Lo=class extends kn{};var Un=class extends Kt{};Un.prototype._setValue=sl;var ns=class extends Un{};ns.prototype._setValue=po;var is=class extends Un{};is.prototype._setValue=_o;var $e=class extends Kt{setValue(t,e){this._values.set(t,e)}},ko=class extends $e{},Uo=class extends $e{},No=class extends $e{},jo=class extends $e{},Po=class extends $e{},Ho=class extends $e{},Vo=class extends $e{},zo=class extends $e{};var Wo=class extends wr{constructor(t){super(t),this._offsets=new ci}addChild(t,e="0"){if(this.numChildren>0)throw new Error("ListBuilder can only have one child.");return this.children[this.numChildren]=t,this.type=new rr(new $(e,t.type,!0)),this.numChildren-1}_flushPending(t){let e=this._offsets,[n]=this.children;for(let[i,s]of t)if(typeof s>"u")e.set(i,0);else{let o=s.length,l=e.set(i,o).buffer[i];for(let d=-1;++d<o;)n.set(l+d,s[d])}}};var Yo=class extends wr{set(t,e){return super.set(t,e)}setValue(t,e){let n=e instanceof Map?e:new Map(Object.entries(e)),i=this._pending||(this._pending=new Map),s=i.get(t);s&&(this._pendingLength-=s.size),this._pendingLength+=n.size,i.set(t,n)}addChild(t,e=`${this.numChildren}`){if(this.numChildren>0)throw new Error("ListBuilder can only have one child.");return this.children[this.numChildren]=t,this.type=new sr(new $(e,t.type,!0),this.type.keysSorted),this.numChildren-1}_flushPending(t){let e=this._offsets,[n]=this.children;for(let[i,s]of t)if(s===void 0)e.set(i,0);else{let{[i]:o,[i+1]:l}=e.set(i,s.size).buffer;for(let d of s.entries())if(n.set(o,d),++o>=l)break}}};var Go=class extends Ft{setValue(t,e){}setValid(t,e){return this.length=Math.max(t+1,this.length),e}};var $o=class extends Ft{setValue(t,e){let{children:n,type:i}=this;switch(Array.isArray(e)||e.constructor){case!0:return i.children.forEach((s,o)=>n[o].set(t,e[o]));case Map:return i.children.forEach((s,o)=>n[o].set(t,e.get(s.name)));default:return i.children.forEach((s,o)=>n[o].set(t,e[s.name]))}}setValid(t,e){return super.setValid(t,e)||this.children.forEach(n=>n.setValid(t,e)),e}addChild(t,e=`${this.numChildren}`){let n=this.children.push(t);return this.type=new vt([...this.type.children,new $(e,t.type,!0)]),n}};var Kr=class extends Kt{};Kr.prototype._setValue=rl;var ss=class extends Kr{};ss.prototype._setValue=so;var os=class extends Kr{};os.prototype._setValue=oo;var as=class extends Kr{};as.prototype._setValue=ao;var ls=class extends Kr{};ls.prototype._setValue=lo;var Jr=class extends Kt{};Jr.prototype._setValue=nl;var cs=class extends Jr{};cs.prototype._setValue=co;var us=class extends Jr{};us.prototype._setValue=uo;var ds=class extends Jr{};ds.prototype._setValue=fo;var fs=class extends Jr{};fs.prototype._setValue=ho;var pi=class extends Ft{constructor(t){super(t),this._typeIds=new Yr(new Int8Array(0),1),typeof t.valueToChildTypeId=="function"&&(this._valueToChildTypeId=t.valueToChildTypeId)}get typeIdToChildIndex(){return this.type.typeIdToChildIndex}append(t,e){return this.set(this.length,t,e)}set(t,e,n){return n===void 0&&(n=this._valueToChildTypeId(this,e,t)),this.setValid(t,this.isValid(e))&&this.setValue(t,e,n),this}setValue(t,e,n){this._typeIds.set(t,n);let i=this.type.typeIdToChildIndex[n],s=this.children[i];s==null||s.set(t,e)}addChild(t,e=`${this.children.length}`){let n=this.children.push(t),{type:{children:i,mode:s,typeIds:o}}=this,l=[...i,new $(e,t.type)];return this.type=new nr(s,[...o,n],l),n}_valueToChildTypeId(t,e,n){throw new Error("Cannot map UnionBuilder value to child typeId. Pass the `childTypeId` as the second argument to unionBuilder.append(), or supply a `valueToChildTypeId` function as part of the UnionBuilder constructor options.")}},Xo=class extends pi{},Ko=class extends pi{constructor(t){super(t),this._offsets=new Yr(new Int32Array(0))}setValue(t,e,n){let i=this._typeIds.set(t,n).buffer[t],s=this.getChildAt(this.type.typeIdToChildIndex[i]),o=this._offsets.set(t,s.length).buffer[t];s==null||s.set(o,e)}};var hs=class extends wr{constructor(t){super(t),this._values=new fn(new Uint8Array(0))}get byteLength(){let t=this._pendingLength+this.length*4;return this._offsets&&(t+=this._offsets.byteLength),this._values&&(t+=this._values.byteLength),this._nulls&&(t+=this._nulls.byteLength),t}setValue(t,e){return super.setValue(t,on(e))}_flushPending(t,e){}};hs.prototype._flushPending=hi.prototype._flushPending;var vl=class extends L{visitNull(){return Go}visitBool(){return Bo}visitInt(){return $e}visitInt8(){return ko}visitInt16(){return Uo}visitInt32(){return No}visitInt64(){return jo}visitUint8(){return Po}visitUint16(){return Ho}visitUint32(){return Vo}visitUint64(){return zo}visitFloat(){return kn}visitFloat16(){return Ro}visitFloat32(){return Co}visitFloat64(){return Lo}visitUtf8(){return hs}visitBinary(){return hi}visitFixedSizeBinary(){return rs}visitDate(){return Cn}visitDateDay(){return Qi}visitDateMillisecond(){return ts}visitTimestamp(){return Kr}visitTimestampSecond(){return ss}visitTimestampMillisecond(){return os}visitTimestampMicrosecond(){return as}visitTimestampNanosecond(){return ls}visitTime(){return Jr}visitTimeSecond(){return cs}visitTimeMillisecond(){return us}visitTimeMicrosecond(){return ds}visitTimeNanosecond(){return fs}visitDecimal(){return es}visitList(){return Wo}visitStruct(){return $o}visitUnion(){return pi}visitDenseUnion(){return Ko}visitSparseUnion(){return Xo}visitDictionary(){return Mo}visitInterval(){return Un}visitIntervalDayTime(){return ns}visitIntervalYearMonth(){return is}visitFixedSizeList(){return Oo}visitMap(){return Yo}},uf=new vl;var P=class extends L{compareSchemas(t,e){return t===e||e instanceof t.constructor&&this.compareManyFields(t.fields,e.fields)}compareManyFields(t,e){return t===e||Array.isArray(t)&&Array.isArray(e)&&t.length===e.length&&t.every((n,i)=>this.compareFields(n,e[i]))}compareFields(t,e){return t===e||e instanceof t.constructor&&t.name===e.name&&t.nullable===e.nullable&&this.visit(t.type,e.type)}};function Ee(r,t){return t instanceof r.constructor}function ps(r,t){return r===t||Ee(r,t)}function qr(r,t){return r===t||Ee(r,t)&&r.bitWidth===t.bitWidth&&r.isSigned===t.isSigned}function Jo(r,t){return r===t||Ee(r,t)&&r.precision===t.precision}function vy(r,t){return r===t||Ee(r,t)&&r.byteWidth===t.byteWidth}function Sl(r,t){return r===t||Ee(r,t)&&r.unit===t.unit}function _s(r,t){return r===t||Ee(r,t)&&r.unit===t.unit&&r.timezone===t.timezone}function ms(r,t){return r===t||Ee(r,t)&&r.unit===t.unit&&r.bitWidth===t.bitWidth}function Sy(r,t){return r===t||Ee(r,t)&&r.children.length===t.children.length&&Br.compareManyFields(r.children,t.children)}function Iy(r,t){return r===t||Ee(r,t)&&r.children.length===t.children.length&&Br.compareManyFields(r.children,t.children)}function Il(r,t){return r===t||Ee(r,t)&&r.mode===t.mode&&r.typeIds.every((e,n)=>e===t.typeIds[n])&&Br.compareManyFields(r.children,t.children)}function Ty(r,t){return r===t||Ee(r,t)&&r.id===t.id&&r.isOrdered===t.isOrdered&&Br.visit(r.indices,t.indices)&&Br.visit(r.dictionary,t.dictionary)}function Tl(r,t){return r===t||Ee(r,t)&&r.unit===t.unit}function Ay(r,t){return r===t||Ee(r,t)&&r.listSize===t.listSize&&r.children.length===t.children.length&&Br.compareManyFields(r.children,t.children)}function Fy(r,t){return r===t||Ee(r,t)&&r.keysSorted===t.keysSorted&&r.children.length===t.children.length&&Br.compareManyFields(r.children,t.children)}P.prototype.visitNull=ps;P.prototype.visitBool=ps;P.prototype.visitInt=qr;P.prototype.visitInt8=qr;P.prototype.visitInt16=qr;P.prototype.visitInt32=qr;P.prototype.visitInt64=qr;P.prototype.visitUint8=qr;P.prototype.visitUint16=qr;P.prototype.visitUint32=qr;P.prototype.visitUint64=qr;P.prototype.visitFloat=Jo;P.prototype.visitFloat16=Jo;P.prototype.visitFloat32=Jo;P.prototype.visitFloat64=Jo;P.prototype.visitUtf8=ps;P.prototype.visitBinary=ps;P.prototype.visitFixedSizeBinary=vy;P.prototype.visitDate=Sl;P.prototype.visitDateDay=Sl;P.prototype.visitDateMillisecond=Sl;P.prototype.visitTimestamp=_s;P.prototype.visitTimestampSecond=_s;P.prototype.visitTimestampMillisecond=_s;P.prototype.visitTimestampMicrosecond=_s;P.prototype.visitTimestampNanosecond=_s;P.prototype.visitTime=ms;P.prototype.visitTimeSecond=ms;P.prototype.visitTimeMillisecond=ms;P.prototype.visitTimeMicrosecond=ms;P.prototype.visitTimeNanosecond=ms;P.prototype.visitDecimal=ps;P.prototype.visitList=Sy;P.prototype.visitStruct=Iy;P.prototype.visitUnion=Il;P.prototype.visitDenseUnion=Il;P.prototype.visitSparseUnion=Il;P.prototype.visitDictionary=Ty;P.prototype.visitInterval=Tl;P.prototype.visitIntervalDayTime=Tl;P.prototype.visitIntervalYearMonth=Tl;P.prototype.visitFixedSizeList=Ay;P.prototype.visitMap=Fy;var Br=new P;function Nn(r,t){return Br.compareSchemas(r,t)}function df(r,t){return Br.compareFields(r,t)}function ff(r,t){return Br.visit(r,t)}function Ln(r){let t=r.type,e=new(uf.getVisitFn(t)())(r);if(t.children&&t.children.length>0){let n=r.children||[],i={nullValues:r.nullValues},s=Array.isArray(n)?(o,l)=>n[l]||i:({name:o})=>n[o]||i;for(let[o,l]of t.children.entries()){let{type:d}=l,h=s(l,o);e.children.push(Ln(Object.assign(Object.assign({},h),{type:d})))}}return e}function qo(r,t){return Ey(r,t.map(e=>e.data.concat()))}function Ey(r,t){let e=[...r.fields],n=[],i={numBatches:t.reduce((v,S)=>Math.max(v,S.length),0)},s=0,o=0,l=-1,d=t.length,h,u=[];for(;i.numBatches-- >0;){for(o=Number.POSITIVE_INFINITY,l=-1;++l<d;)u[l]=h=t[l].shift(),o=Math.min(o,h?h.length:o);Number.isFinite(o)&&(u=xy(e,o,u,t,i),o>0&&(n[s++]=W({type:new vt(e),length:o,nullCount:0,children:u.slice()})))}return[r=r.assign(e),n.map(v=>new bt(r,v))]}function xy(r,t,e,n,i){var s;let o=(t+63&-64)>>3;for(let l=-1,d=n.length;++l<d;){let h=e[l],u=h==null?void 0:h.length;if(u>=t)u===t?e[l]=h:(e[l]=h.slice(0,t),i.numBatches=Math.max(i.numBatches,n[l].unshift(h.slice(t,u-t))));else{let v=r[l];r[l]=v.clone({nullable:!0}),e[l]=(s=h==null?void 0:h._changeLengthAndBackfillNullBitmap(t))!==null&&s!==void 0?s:W({type:v.type,length:t,nullCount:t,nullBitmap:new Uint8Array(o)})}}return e}var hf,Rt=class{constructor(...t){var e,n;if(t.length===0)return this.batches=[],this.schema=new nt([]),this._offsets=[0],this;let i,s;t[0]instanceof nt&&(i=t.shift()),t[t.length-1]instanceof Uint32Array&&(s=t.pop());let o=d=>{if(d){if(d instanceof bt)return[d];if(d instanceof Rt)return d.batches;if(d instanceof dt){if(d.type instanceof vt)return[new bt(new nt(d.type.children),d)]}else{if(Array.isArray(d))return d.flatMap(h=>o(h));if(typeof d[Symbol.iterator]=="function")return[...d].flatMap(h=>o(h));if(typeof d=="object"){let h=Object.keys(d),u=h.map(A=>new z([d[A]])),v=new nt(h.map((A,rt)=>new $(String(A),u[rt].type))),[,S]=qo(v,u);return S.length===0?[new bt(d)]:S}}}return[]},l=t.flatMap(d=>o(d));if(i=(n=i!=null?i:(e=l[0])===null||e===void 0?void 0:e.schema)!==null&&n!==void 0?n:new nt([]),!(i instanceof nt))throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");for(let d of l){if(!(d instanceof bt))throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");if(!Nn(i,d.schema))throw new TypeError("Table and inner RecordBatch schemas must be equivalent.")}this.schema=i,this.batches=l,this._offsets=s!=null?s:wo(this.data)}get data(){return this.batches.map(({data:t})=>t)}get numCols(){return this.schema.fields.length}get numRows(){return this.data.reduce((t,e)=>t+e.length,0)}get nullCount(){return this._nullCount===-1&&(this._nullCount=go(this.data)),this._nullCount}isValid(t){return!1}get(t){return null}set(t,e){}indexOf(t,e){return-1}getByteLength(t){return 0}[Symbol.iterator](){return this.batches.length>0?oi.visit(new z(this.data)):new Array(0)[Symbol.iterator]()}toArray(){return[...this]}toString(){return`[
  ${this.toArray().join(`,
  `)}
]`}concat(...t){let e=this.schema,n=this.data.concat(t.flatMap(({data:i})=>i));return new Rt(e,n.map(i=>new bt(e,i)))}slice(t,e){let n=this.schema;[t,e]=ji({length:this.numRows},t,e);let i=vo(this.data,this._offsets,t,e);return new Rt(n,i.map(s=>new bt(n,s)))}getChild(t){return this.getChildAt(this.schema.fields.findIndex(e=>e.name===t))}getChildAt(t){if(t>-1&&t<this.schema.fields.length){let e=this.data.map(n=>n.children[t]);if(e.length===0){let{type:n}=this.schema.fields[t],i=W({type:n,length:0,nullCount:0});e.push(i._changeLengthAndBackfillNullBitmap(this.numRows))}return new z(e)}return null}setChild(t,e){var n;return this.setChildAt((n=this.schema.fields)===null||n===void 0?void 0:n.findIndex(i=>i.name===t),e)}setChildAt(t,e){let n=this.schema,i=[...this.batches];if(t>-1&&t<this.numCols){e||(e=new z([W({type:new _e,length:this.numRows})]));let s=n.fields.slice(),o=s[t].clone({type:e.type}),l=this.schema.fields.map((d,h)=>this.getChildAt(h));[s[t],l[t]]=[o,e],[n,i]=qo(n,l)}return new Rt(n,i)}select(t){let e=this.schema.fields.reduce((n,i,s)=>n.set(i.name,s),new Map);return this.selectAt(t.map(n=>e.get(n)).filter(n=>n>-1))}selectAt(t){let e=this.schema.selectAt(t),n=this.batches.map(i=>i.selectAt(t));return new Rt(e,n)}assign(t){let e=this.schema.fields,[n,i]=t.schema.fields.reduce((l,d,h)=>{let[u,v]=l,S=e.findIndex(A=>A.name===d.name);return~S?v[S]=h:u.push(h),l},[[],[]]),s=this.schema.assign(t.schema),o=[...e.map((l,d)=>[d,i[d]]).map(([l,d])=>d===void 0?this.getChildAt(l):t.getChildAt(d)),...n.map(l=>t.getChildAt(l))].filter(Boolean);return new Rt(...qo(s,o))}};hf=Symbol.toStringTag;Rt[hf]=(r=>(r.schema=null,r.batches=[],r._offsets=new Uint32Array([0]),r._nullCount=-1,r[Symbol.isConcatSpreadable]=!0,r.isValid=dn(Vi),r.get=dn(Ht.getVisitFn(_.Struct)),r.set=So(ne.getVisitFn(_.Struct)),r.indexOf=Io(Mn.getVisitFn(_.Struct)),r.getByteLength=dn(Ce.getVisitFn(_.Struct)),"Table"))(Rt.prototype);var _f,bt=class{constructor(...t){switch(t.length){case 2:{if([this.schema]=t,!(this.schema instanceof nt))throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");if([,this.data=W({nullCount:0,type:new vt(this.schema.fields),children:this.schema.fields.map(e=>W({type:e.type,nullCount:0}))})]=t,!(this.data instanceof dt))throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");[this.schema,this.data]=pf(this.schema,this.data.children);break}case 1:{let[e]=t,{fields:n,children:i,length:s}=Object.keys(e).reduce((d,h,u)=>(d.children[u]=e[h],d.length=Math.max(d.length,e[h].length),d.fields[u]=$.new({name:h,type:e[h].type,nullable:!0}),d),{length:0,fields:new Array,children:new Array}),o=new nt(n),l=W({type:new vt(n),length:s,children:i,nullCount:0});[this.schema,this.data]=pf(o,l.children,s);break}default:throw new TypeError("RecordBatch constructor expects an Object mapping names to child Data, or a [Schema, Data] pair.")}}get dictionaries(){return this._dictionaries||(this._dictionaries=mf(this.schema.fields,this.data.children))}get numCols(){return this.schema.fields.length}get numRows(){return this.data.length}get nullCount(){return this.data.nullCount}isValid(t){return this.data.getValid(t)}get(t){return Ht.visit(this.data,t)}set(t,e){return ne.visit(this.data,t,e)}indexOf(t,e){return Mn.visit(this.data,t,e)}getByteLength(t){return Ce.visit(this.data,t)}[Symbol.iterator](){return oi.visit(new z([this.data]))}toArray(){return[...this]}concat(...t){return new Rt(this.schema,[this,...t])}slice(t,e){let[n]=new z([this.data]).slice(t,e).data;return new bt(this.schema,n)}getChild(t){var e;return this.getChildAt((e=this.schema.fields)===null||e===void 0?void 0:e.findIndex(n=>n.name===t))}getChildAt(t){return t>-1&&t<this.schema.fields.length?new z([this.data.children[t]]):null}setChild(t,e){var n;return this.setChildAt((n=this.schema.fields)===null||n===void 0?void 0:n.findIndex(i=>i.name===t),e)}setChildAt(t,e){let n=this.schema,i=this.data;if(t>-1&&t<this.numCols){e||(e=new z([W({type:new _e,length:this.numRows})]));let s=n.fields.slice(),o=i.children.slice(),l=s[t].clone({type:e.type});[s[t],o[t]]=[l,e.data[0]],n=new nt(s,new Map(this.schema.metadata)),i=W({type:new vt(s),children:o})}return new bt(n,i)}select(t){let e=this.schema.select(t),n=new vt(e.fields),i=[];for(let s of t){let o=this.schema.fields.findIndex(l=>l.name===s);~o&&(i[o]=this.data.children[o])}return new bt(e,W({type:n,length:this.numRows,children:i}))}selectAt(t){let e=this.schema.selectAt(t),n=t.map(s=>this.data.children[s]).filter(Boolean),i=W({type:new vt(e.fields),length:this.numRows,children:n});return new bt(e,i)}};_f=Symbol.toStringTag;bt[_f]=(r=>(r._nullCount=-1,r[Symbol.isConcatSpreadable]=!0,"RecordBatch"))(bt.prototype);function pf(r,t,e=t.reduce((n,i)=>Math.max(n,i.length),0)){var n;let i=[...r.fields],s=[...t],o=(e+63&-64)>>3;for(let[l,d]of r.fields.entries()){let h=t[l];(!h||h.length!==e)&&(i[l]=d.clone({nullable:!0}),s[l]=(n=h==null?void 0:h._changeLengthAndBackfillNullBitmap(e))!==null&&n!==void 0?n:W({type:d.type,length:e,nullCount:e,nullBitmap:new Uint8Array(o)}))}return[r.assign(i),W({type:new vt(i),length:e,children:s})]}function mf(r,t,e=new Map){for(let n=-1,i=r.length;++n<i;){let o=r[n].type,l=t[n];if(M.isDictionary(o)){if(!e.has(o.id))l.dictionary&&e.set(o.id,l.dictionary);else if(e.get(o.id)!==l.dictionary)throw new Error("Cannot create Schema containing two different dictionaries with the same Id")}o.children&&o.children.length>0&&mf(o.children,l.children,e)}return e}var jn=class extends bt{constructor(t){let e=t.fields.map(i=>W({type:i.type})),n=W({type:new vt(t.fields),nullCount:0,children:e});super(t,n)}};var ys;(function(r){r[r.BUFFER=0]="BUFFER"})(ys||(ys={}));var bs;(function(r){r[r.LZ4_FRAME=0]="LZ4_FRAME",r[r.ZSTD=1]="ZSTD"})(bs||(bs={}));var cr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBodyCompression(t,e){return(e||new cr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBodyCompression(t,e){return t.setPosition(t.position()+4),(e||new cr).__init(t.readInt32(t.position())+t.position(),t)}codec(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt8(this.bb_pos+t):bs.LZ4_FRAME}method(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt8(this.bb_pos+t):ys.BUFFER}static startBodyCompression(t){t.startObject(2)}static addCodec(t,e){t.addFieldInt8(0,e,bs.LZ4_FRAME)}static addMethod(t,e){t.addFieldInt8(1,e,ys.BUFFER)}static endBodyCompression(t){return t.endObject()}static createBodyCompression(t,e,n){return cr.startBodyCompression(t),cr.addCodec(t,e),cr.addMethod(t,n),cr.endBodyCompression(t)}};var _i=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}offset(){return this.bb.readInt64(this.bb_pos)}length(){return this.bb.readInt64(this.bb_pos+8)}static sizeOf(){return 16}static createBuffer(t,e,n){return t.prep(8,16),t.writeInt64(n),t.writeInt64(e),t.offset()}};var mi=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}length(){return this.bb.readInt64(this.bb_pos)}nullCount(){return this.bb.readInt64(this.bb_pos+8)}static sizeOf(){return 16}static createFieldNode(t,e,n){return t.prep(8,16),t.writeInt64(n),t.writeInt64(e),t.offset()}};var ue=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsRecordBatch(t,e){return(e||new ue).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsRecordBatch(t,e){return t.setPosition(t.position()+4),(e||new ue).__init(t.readInt32(t.position())+t.position(),t)}length(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}nodes(t,e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new mi).__init(this.bb.__vector(this.bb_pos+n)+t*16,this.bb):null}nodesLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}buffers(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new _i).__init(this.bb.__vector(this.bb_pos+n)+t*16,this.bb):null}buffersLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}compression(t){let e=this.bb.__offset(this.bb_pos,10);return e?(t||new cr).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}static startRecordBatch(t){t.startObject(4)}static addLength(t,e){t.addFieldInt64(0,e,t.createLong(0,0))}static addNodes(t,e){t.addFieldOffset(1,e,0)}static startNodesVector(t,e){t.startVector(16,e,8)}static addBuffers(t,e){t.addFieldOffset(2,e,0)}static startBuffersVector(t,e){t.startVector(16,e,8)}static addCompression(t,e){t.addFieldOffset(3,e,0)}static endRecordBatch(t){return t.endObject()}};var Xe=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDictionaryBatch(t,e){return(e||new Xe).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDictionaryBatch(t,e){return t.setPosition(t.position()+4),(e||new Xe).__init(t.readInt32(t.position())+t.position(),t)}id(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}data(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new ue).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}isDelta(){let t=this.bb.__offset(this.bb_pos,8);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startDictionaryBatch(t){t.startObject(3)}static addId(t,e){t.addFieldInt64(0,e,t.createLong(0,0))}static addData(t,e){t.addFieldOffset(1,e,0)}static addIsDelta(t,e){t.addFieldInt8(2,+e,0)}static endDictionaryBatch(t){return t.endObject()}};var yi;(function(r){r[r.NONE=0]="NONE",r[r.Schema=1]="Schema",r[r.DictionaryBatch=2]="DictionaryBatch",r[r.RecordBatch=3]="RecordBatch",r[r.Tensor=4]="Tensor",r[r.SparseTensor=5]="SparseTensor"})(yi||(yi={}));var kt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsMessage(t,e){return(e||new kt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMessage(t,e){return t.setPosition(t.position()+4),(e||new kt).__init(t.readInt32(t.position())+t.position(),t)}version(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):hn.V1}headerType(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readUint8(this.bb_pos+t):yi.NONE}header(t){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.__union(t,this.bb_pos+e):null}bodyLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,12);return n?(e||new St).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}static startMessage(t){t.startObject(5)}static addVersion(t,e){t.addFieldInt16(0,e,hn.V1)}static addHeaderType(t,e){t.addFieldInt8(1,e,yi.NONE)}static addHeader(t,e){t.addFieldOffset(2,e,0)}static addBodyLength(t,e){t.addFieldInt64(3,e,t.createLong(0,0))}static addCustomMetadata(t,e){t.addFieldOffset(4,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endMessage(t){return t.endObject()}static finishMessageBuffer(t,e){t.finish(e)}static finishSizePrefixedMessageBuffer(t,e){t.finish(e,void 0,!0)}static createMessage(t,e,n,i,s,o){return kt.startMessage(t),kt.addVersion(t,e),kt.addHeaderType(t,n),kt.addHeader(t,i),kt.addBodyLength(t,s),kt.addCustomMetadata(t,o),kt.endMessage(t)}};var By=Vt,Al=class extends L{visit(t,e){return t==null||e==null?void 0:super.visit(t,e)}visitNull(t,e){return Ar.startNull(e),Ar.endNull(e)}visitInt(t,e){return Jt.startInt(e),Jt.addBitWidth(e,t.bitWidth),Jt.addIsSigned(e,t.isSigned),Jt.endInt(e)}visitFloat(t,e){return Se.startFloatingPoint(e),Se.addPrecision(e,t.precision),Se.endFloatingPoint(e)}visitBinary(t,e){return Sr.startBinary(e),Sr.endBinary(e)}visitBool(t,e){return Ir.startBool(e),Ir.endBool(e)}visitUtf8(t,e){return Er.startUtf8(e),Er.endUtf8(e)}visitDecimal(t,e){return qt.startDecimal(e),qt.addScale(e,t.scale),qt.addPrecision(e,t.precision),qt.addBitWidth(e,t.bitWidth),qt.endDecimal(e)}visitDate(t,e){return ge.startDate(e),ge.addUnit(e,t.unit),ge.endDate(e)}visitTime(t,e){return ae.startTime(e),ae.addUnit(e,t.unit),ae.addBitWidth(e,t.bitWidth),ae.endTime(e)}visitTimestamp(t,e){let n=t.timezone&&e.createString(t.timezone)||void 0;return le.startTimestamp(e),le.addUnit(e,t.unit),n!==void 0&&le.addTimezone(e,n),le.endTimestamp(e)}visitInterval(t,e){return Ie.startInterval(e),Ie.addUnit(e,t.unit),Ie.endInterval(e)}visitList(t,e){return Tr.startList(e),Tr.endList(e)}visitStruct(t,e){return Fr.startStruct_(e),Fr.endStruct_(e)}visitUnion(t,e){Zt.startTypeIdsVector(e,t.typeIds.length);let n=Zt.createTypeIdsVector(e,t.typeIds);return Zt.startUnion(e),Zt.addMode(e,t.mode),Zt.addTypeIds(e,n),Zt.endUnion(e)}visitDictionary(t,e){let n=this.visit(t.indices,e);return Le.startDictionaryEncoding(e),Le.addId(e,new By(t.id,0)),Le.addIsOrdered(e,t.isOrdered),n!==void 0&&Le.addIndexType(e,n),Le.endDictionaryEncoding(e)}visitFixedSizeBinary(t,e){return we.startFixedSizeBinary(e),we.addByteWidth(e,t.byteWidth),we.endFixedSizeBinary(e)}visitFixedSizeList(t,e){return ve.startFixedSizeList(e),ve.addListSize(e,t.listSize),ve.endFixedSizeList(e)}visitMap(t,e){return Te.startMap(e),Te.addKeysSorted(e,t.keysSorted),Te.endMap(e)}},Zo=new Al;function wf(r,t=new Map){return new nt(My(r,t),Qo(r.customMetadata),t)}function Fl(r){return new ie(r.count,Sf(r.columns),If(r.columns))}function vf(r){return new De(Fl(r.data),r.id,r.isDelta)}function My(r,t){return(r.fields||[]).filter(Boolean).map(e=>$.fromJSON(e,t))}function yf(r,t){return(r.children||[]).filter(Boolean).map(e=>$.fromJSON(e,t))}function Sf(r){return(r||[]).reduce((t,e)=>[...t,new ur(e.count,Oy(e.VALIDITY)),...Sf(e.children)],[])}function If(r,t=[]){for(let e=-1,n=(r||[]).length;++e<n;){let i=r[e];i.VALIDITY&&t.push(new xe(t.length,i.VALIDITY.length)),i.TYPE&&t.push(new xe(t.length,i.TYPE.length)),i.OFFSET&&t.push(new xe(t.length,i.OFFSET.length)),i.DATA&&t.push(new xe(t.length,i.DATA.length)),t=If(i.children,t)}return t}function Oy(r){return(r||[]).reduce((t,e)=>t+ +(e===0),0)}function Tf(r,t){let e,n,i,s,o,l;return!t||!(s=r.dictionary)?(o=gf(r,yf(r,t)),i=new $(r.name,o,r.nullable,Qo(r.customMetadata))):t.has(e=s.id)?(n=(n=s.indexType)?bf(n):new yr,l=new Oe(t.get(e),n,e,s.isOrdered),i=new $(r.name,l,r.nullable,Qo(r.customMetadata))):(n=(n=s.indexType)?bf(n):new yr,t.set(e,o=gf(r,yf(r,t))),l=new Oe(o,n,e,s.isOrdered),i=new $(r.name,l,r.nullable,Qo(r.customMetadata))),i||null}function Qo(r){return new Map(Object.entries(r||{}))}function bf(r){return new Lt(r.isSigned,r.bitWidth)}function gf(r,t){let e=r.type.name;switch(e){case"NONE":return new _e;case"null":return new _e;case"binary":return new kr;case"utf8":return new Ur;case"bool":return new Nr;case"list":return new rr((t||[])[0]);case"struct":return new vt(t||[]);case"struct_":return new vt(t||[])}switch(e){case"int":{let n=r.type;return new Lt(n.isSigned,n.bitWidth)}case"floatingpoint":{let n=r.type;return new be(At[n.precision])}case"decimal":{let n=r.type;return new jr(n.scale,n.precision,n.bitWidth)}case"date":{let n=r.type;return new Pr(re[n.unit])}case"time":{let n=r.type;return new er(et[n.unit],n.bitWidth)}case"timestamp":{let n=r.type;return new Hr(et[n.unit],n.timezone)}case"interval":{let n=r.type;return new Vr(pe[n.unit])}case"union":{let n=r.type;return new nr(Bt[n.mode],n.typeIds||[],t||[])}case"fixedsizebinary":{let n=r.type;return new zr(n.byteWidth)}case"fixedsizelist":{let n=r.type;return new ir(n.listSize,(t||[])[0])}case"map":{let n=r.type;return new sr((t||[])[0],n.keysSorted)}}throw new Error(`Unrecognized type: "${e}"`)}var Pn=Vt,Ry=Gr,Cy=me,Wt=class{constructor(t,e,n,i){this._version=e,this._headerType=n,this.body=new Uint8Array(0),i&&(this._createHeader=()=>i),this._bodyLength=typeof t=="number"?t:t.low}static fromJSON(t,e){let n=new Wt(0,Xt.V4,e);return n._createHeader=Ly(t,e),n}static decode(t){t=new Cy(H(t));let e=kt.getRootAsMessage(t),n=e.bodyLength(),i=e.version(),s=e.headerType(),o=new Wt(n,i,s);return o._createHeader=ky(e,s),o}static encode(t){let e=new Ry,n=-1;return t.isSchema()?n=nt.encode(e,t.header()):t.isRecordBatch()?n=ie.encode(e,t.header()):t.isDictionaryBatch()&&(n=De.encode(e,t.header())),kt.startMessage(e),kt.addVersion(e,Xt.V4),kt.addHeader(e,n),kt.addHeaderType(e,t.headerType),kt.addBodyLength(e,new Pn(t.bodyLength,0)),kt.finishMessageBuffer(e,kt.endMessage(e)),e.asUint8Array()}static from(t,e=0){if(t instanceof nt)return new Wt(0,Xt.V4,lt.Schema,t);if(t instanceof ie)return new Wt(e,Xt.V4,lt.RecordBatch,t);if(t instanceof De)return new Wt(e,Xt.V4,lt.DictionaryBatch,t);throw new Error(`Unrecognized Message header: ${t}`)}get type(){return this.headerType}get version(){return this._version}get headerType(){return this._headerType}get bodyLength(){return this._bodyLength}header(){return this._createHeader()}isSchema(){return this.headerType===lt.Schema}isRecordBatch(){return this.headerType===lt.RecordBatch}isDictionaryBatch(){return this.headerType===lt.DictionaryBatch}},ie=class{constructor(t,e,n){this._nodes=e,this._buffers=n,this._length=typeof t=="number"?t:t.low}get nodes(){return this._nodes}get length(){return this._length}get buffers(){return this._buffers}},De=class{constructor(t,e,n=!1){this._data=t,this._isDelta=n,this._id=typeof e=="number"?e:e.low}get id(){return this._id}get data(){return this._data}get isDelta(){return this._isDelta}get length(){return this.data.length}get nodes(){return this.data.nodes}get buffers(){return this.data.buffers}},xe=class{constructor(t,e){this.offset=typeof t=="number"?t:t.low,this.length=typeof e=="number"?e:e.low}},ur=class{constructor(t,e){this.length=typeof t=="number"?t:t.low,this.nullCount=typeof e=="number"?e:e.low}};function Ly(r,t){return()=>{switch(t){case lt.Schema:return nt.fromJSON(r);case lt.RecordBatch:return ie.fromJSON(r);case lt.DictionaryBatch:return De.fromJSON(r)}throw new Error(`Unrecognized Message type: { name: ${lt[t]}, type: ${t} }`)}}function ky(r,t){return()=>{switch(t){case lt.Schema:return nt.decode(r.header(new Mt));case lt.RecordBatch:return ie.decode(r.header(new ue),r.version());case lt.DictionaryBatch:return De.decode(r.header(new Xe),r.version())}throw new Error(`Unrecognized Message type: { name: ${lt[t]}, type: ${t} }`)}}$.encode=$y;$.decode=Yy;$.fromJSON=Tf;nt.encode=Gy;nt.decode=Uy;nt.fromJSON=wf;ie.encode=Xy;ie.decode=Ny;ie.fromJSON=Fl;De.encode=Ky;De.decode=jy;De.fromJSON=vf;ur.encode=Jy;ur.decode=Hy;xe.encode=qy;xe.decode=Py;function Uy(r,t=new Map){let e=Wy(r,t);return new nt(e,ta(r),t)}function Ny(r,t=Xt.V4){if(r.compression()!==null)throw new Error("Record batch compression not implemented");return new ie(r.length(),Vy(r),zy(r,t))}function jy(r,t=Xt.V4){return new De(ie.decode(r.data(),t),r.id(),r.isDelta())}function Py(r){return new xe(r.offset(),r.length())}function Hy(r){return new ur(r.length(),r.nullCount())}function Vy(r){let t=[];for(let e,n=-1,i=-1,s=r.nodesLength();++n<s;)(e=r.nodes(n))&&(t[++i]=ur.decode(e));return t}function zy(r,t){let e=[];for(let n,i=-1,s=-1,o=r.buffersLength();++i<o;)(n=r.buffers(i))&&(t<Xt.V4&&(n.bb_pos+=8*(i+1)),e[++s]=xe.decode(n));return e}function Wy(r,t){let e=[];for(let n,i=-1,s=-1,o=r.fieldsLength();++i<o;)(n=r.fields(i))&&(e[++s]=$.decode(n,t));return e}function Af(r,t){let e=[];for(let n,i=-1,s=-1,o=r.childrenLength();++i<o;)(n=r.children(i))&&(e[++s]=$.decode(n,t));return e}function Yy(r,t){let e,n,i,s,o,l;return!t||!(l=r.dictionary())?(i=Ef(r,Af(r,t)),n=new $(r.name(),i,r.nullable(),ta(r))):t.has(e=l.id().low)?(s=(s=l.indexType())?Ff(s):new yr,o=new Oe(t.get(e),s,e,l.isOrdered()),n=new $(r.name(),o,r.nullable(),ta(r))):(s=(s=l.indexType())?Ff(s):new yr,t.set(e,i=Ef(r,Af(r,t))),o=new Oe(i,s,e,l.isOrdered()),n=new $(r.name(),o,r.nullable(),ta(r))),n||null}function ta(r){let t=new Map;if(r)for(let e,n,i=-1,s=Math.trunc(r.customMetadataLength());++i<s;)(e=r.customMetadata(i))&&(n=e.key())!=null&&t.set(n,e.value());return t}function Ff(r){return new Lt(r.isSigned(),r.bitWidth())}function Ef(r,t){let e=r.typeType();switch(e){case Et.NONE:return new _e;case Et.Null:return new _e;case Et.Binary:return new kr;case Et.Utf8:return new Ur;case Et.Bool:return new Nr;case Et.List:return new rr((t||[])[0]);case Et.Struct_:return new vt(t||[])}switch(e){case Et.Int:{let n=r.type(new Jt);return new Lt(n.isSigned(),n.bitWidth())}case Et.FloatingPoint:{let n=r.type(new Se);return new be(n.precision())}case Et.Decimal:{let n=r.type(new qt);return new jr(n.scale(),n.precision(),n.bitWidth())}case Et.Date:{let n=r.type(new ge);return new Pr(n.unit())}case Et.Time:{let n=r.type(new ae);return new er(n.unit(),n.bitWidth())}case Et.Timestamp:{let n=r.type(new le);return new Hr(n.unit(),n.timezone())}case Et.Interval:{let n=r.type(new Ie);return new Vr(n.unit())}case Et.Union:{let n=r.type(new Zt);return new nr(n.mode(),n.typeIdsArray()||[],t||[])}case Et.FixedSizeBinary:{let n=r.type(new we);return new zr(n.byteWidth())}case Et.FixedSizeList:{let n=r.type(new ve);return new ir(n.listSize(),(t||[])[0])}case Et.Map:{let n=r.type(new Te);return new sr((t||[])[0],n.keysSorted())}}throw new Error(`Unrecognized type: "${Et[e]}" (${e})`)}function Gy(r,t){let e=t.fields.map(s=>$.encode(r,s));Mt.startFieldsVector(r,e.length);let n=Mt.createFieldsVector(r,e),i=t.metadata&&t.metadata.size>0?Mt.createCustomMetadataVector(r,[...t.metadata].map(([s,o])=>{let l=r.createString(`${s}`),d=r.createString(`${o}`);return St.startKeyValue(r),St.addKey(r,l),St.addValue(r,d),St.endKeyValue(r)})):-1;return Mt.startSchema(r),Mt.addFields(r,n),Mt.addEndianness(r,Zy?pn.Little:pn.Big),i!==-1&&Mt.addCustomMetadata(r,i),Mt.endSchema(r)}function $y(r,t){let e=-1,n=-1,i=-1,s=t.type,o=t.typeId;M.isDictionary(s)?(o=s.dictionary.typeId,i=Zo.visit(s,r),n=Zo.visit(s.dictionary,r)):n=Zo.visit(s,r);let l=(s.children||[]).map(u=>$.encode(r,u)),d=zt.createChildrenVector(r,l),h=t.metadata&&t.metadata.size>0?zt.createCustomMetadataVector(r,[...t.metadata].map(([u,v])=>{let S=r.createString(`${u}`),A=r.createString(`${v}`);return St.startKeyValue(r),St.addKey(r,S),St.addValue(r,A),St.endKeyValue(r)})):-1;return t.name&&(e=r.createString(t.name)),zt.startField(r),zt.addType(r,n),zt.addTypeType(r,o),zt.addChildren(r,d),zt.addNullable(r,!!t.nullable),e!==-1&&zt.addName(r,e),i!==-1&&zt.addDictionary(r,i),h!==-1&&zt.addCustomMetadata(r,h),zt.endField(r)}function Xy(r,t){let e=t.nodes||[],n=t.buffers||[];ue.startNodesVector(r,e.length);for(let o of e.slice().reverse())ur.encode(r,o);let i=r.endVector();ue.startBuffersVector(r,n.length);for(let o of n.slice().reverse())xe.encode(r,o);let s=r.endVector();return ue.startRecordBatch(r),ue.addLength(r,new Pn(t.length,0)),ue.addNodes(r,i),ue.addBuffers(r,s),ue.endRecordBatch(r)}function Ky(r,t){let e=ie.encode(r,t.data);return Xe.startDictionaryBatch(r),Xe.addId(r,new Pn(t.id,0)),Xe.addIsDelta(r,t.isDelta),Xe.addData(r,e),Xe.endDictionaryBatch(r)}function Jy(r,t){return mi.createFieldNode(r,new Pn(t.length,0),new Pn(t.nullCount,0))}function qy(r,t){return _i.createBuffer(r,new Pn(t.offset,0),new Pn(t.length,0))}var Zy=(()=>{let r=new ArrayBuffer(2);return new DataView(r).setInt16(0,256,!0),new Int16Array(r)[0]===256})();var xl=r=>`Expected ${lt[r]} Message in stream, but was null or length 0.`,Dl=r=>`Header pointer of flatbuffer-encoded ${lt[r]} Message is null or length 0.`,xf=(r,t)=>`Expected to read ${r} metadata bytes, but only read ${t}.`,Df=(r,t)=>`Expected to read ${r} bytes for message body, but only read ${t}.`,bi=class{constructor(t){this.source=t instanceof Dr?t:new Dr(t)}[Symbol.iterator](){return this}next(){let t;return(t=this.readMetadataLength()).done?It:t.value===-1&&(t=this.readMetadataLength()).done?It:(t=this.readMetadata(t.value)).done?It:t}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}readMessage(t){let e;if((e=this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(xl(t));return e.value}readMessageBody(t){if(t<=0)return new Uint8Array(0);let e=H(this.source.read(t));if(e.byteLength<t)throw new Error(Df(t,e.byteLength));return e.byteOffset%8===0&&e.byteOffset+e.byteLength<=e.buffer.byteLength?e:e.slice()}readSchema(t=!1){let e=lt.Schema,n=this.readMessage(e),i=n==null?void 0:n.header();if(t&&!i)throw new Error(Dl(e));return i}readMetadataLength(){let t=this.source.read(ea),e=t&&new me(t),n=(e==null?void 0:e.readInt32(0))||0;return{done:n===0,value:n}}readMetadata(t){let e=this.source.read(t);if(!e)return It;if(e.byteLength<t)throw new Error(xf(t,e.byteLength));return{done:!1,value:Wt.decode(e)}}},gs=class{constructor(t,e){this.source=t instanceof Ae?t:Ps(t)?new mn(t,e):new Ae(t)}[Symbol.asyncIterator](){return this}next(){return x(this,void 0,void 0,function*(){let t;return(t=yield this.readMetadataLength()).done?It:t.value===-1&&(t=yield this.readMetadataLength()).done?It:(t=yield this.readMetadata(t.value)).done?It:t})}throw(t){return x(this,void 0,void 0,function*(){return yield this.source.throw(t)})}return(t){return x(this,void 0,void 0,function*(){return yield this.source.return(t)})}readMessage(t){return x(this,void 0,void 0,function*(){let e;if((e=yield this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(xl(t));return e.value})}readMessageBody(t){return x(this,void 0,void 0,function*(){if(t<=0)return new Uint8Array(0);let e=H(yield this.source.read(t));if(e.byteLength<t)throw new Error(Df(t,e.byteLength));return e.byteOffset%8===0&&e.byteOffset+e.byteLength<=e.buffer.byteLength?e:e.slice()})}readSchema(t=!1){return x(this,void 0,void 0,function*(){let e=lt.Schema,n=yield this.readMessage(e),i=n==null?void 0:n.header();if(t&&!i)throw new Error(Dl(e));return i})}readMetadataLength(){return x(this,void 0,void 0,function*(){let t=yield this.source.read(ea),e=t&&new me(t),n=(e==null?void 0:e.readInt32(0))||0;return{done:n===0,value:n}})}readMetadata(t){return x(this,void 0,void 0,function*(){let e=yield this.source.read(t);if(!e)return It;if(e.byteLength<t)throw new Error(xf(t,e.byteLength));return{done:!1,value:Wt.decode(e)}})}},ws=class extends bi{constructor(t){super(new Uint8Array(0)),this._schema=!1,this._body=[],this._batchIndex=0,this._dictionaryIndex=0,this._json=t instanceof Ki?t:new Ki(t)}next(){let{_json:t}=this;if(!this._schema)return this._schema=!0,{done:!1,value:Wt.fromJSON(t.schema,lt.Schema)};if(this._dictionaryIndex<t.dictionaries.length){let e=t.dictionaries[this._dictionaryIndex++];return this._body=e.data.columns,{done:!1,value:Wt.fromJSON(e,lt.DictionaryBatch)}}if(this._batchIndex<t.batches.length){let e=t.batches[this._batchIndex++];return this._body=e.columns,{done:!1,value:Wt.fromJSON(e,lt.RecordBatch)}}return this._body=[],It}readMessageBody(t){return e(this._body);function e(n){return(n||[]).reduce((i,s)=>[...i,...s.VALIDITY&&[s.VALIDITY]||[],...s.TYPE&&[s.TYPE]||[],...s.OFFSET&&[s.OFFSET]||[],...s.DATA&&[s.DATA]||[],...e(s.children)],[])}}readMessage(t){let e;if((e=this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(xl(t));return e.value}readSchema(){let t=lt.Schema,e=this.readMessage(t),n=e==null?void 0:e.header();if(!e||!n)throw new Error(Dl(t));return n}},ea=4,El="ARROW1",gi=new Uint8Array(El.length);for(let r=0;r<El.length;r+=1)gi[r]=El.codePointAt(r);function ra(r,t=0){for(let e=-1,n=gi.length;++e<n;)if(gi[e]!==r[t+e])return!1;return!0}var wi=gi.length,Bl=wi+ea,Bf=wi*2+ea;var Ut=class extends Rn{constructor(t){super(),this._impl=t}get closed(){return this._impl.closed}get schema(){return this._impl.schema}get autoDestroy(){return this._impl.autoDestroy}get dictionaries(){return this._impl.dictionaries}get numDictionaries(){return this._impl.numDictionaries}get numRecordBatches(){return this._impl.numRecordBatches}get footer(){return this._impl.isFile()?this._impl.footer:null}isSync(){return this._impl.isSync()}isAsync(){return this._impl.isAsync()}isFile(){return this._impl.isFile()}isStream(){return this._impl.isStream()}next(){return this._impl.next()}throw(t){return this._impl.throw(t)}return(t){return this._impl.return(t)}cancel(){return this._impl.cancel()}reset(t){return this._impl.reset(t),this._DOMStream=void 0,this._nodeStream=void 0,this}open(t){let e=this._impl.open(t);return Je(e)?e.then(()=>this):this}readRecordBatch(t){return this._impl.isFile()?this._impl.readRecordBatch(t):null}[Symbol.iterator](){return this._impl[Symbol.iterator]()}[Symbol.asyncIterator](){return this._impl[Symbol.asyncIterator]()}toDOMStream(){return ee.toDOMStream(this.isSync()?{[Symbol.iterator]:()=>this}:{[Symbol.asyncIterator]:()=>this})}toNodeStream(){return ee.toNodeStream(this.isSync()?{[Symbol.iterator]:()=>this}:{[Symbol.asyncIterator]:()=>this},{objectMode:!0})}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t,e){throw new Error('"throughDOM" not available in this environment')}static from(t){return t instanceof Ut?t:Ns(t)?tb(t):Ps(t)?nb(t):Je(t)?(()=>x(this,void 0,void 0,function*(){return yield Ut.from(yield t)}))():Hs(t)||Li(t)||zs(t)||ze(t)?rb(new Ae(t)):eb(new Dr(t))}static readAll(t){return t instanceof Ut?t.isSync()?Mf(t):Of(t):Ns(t)||ArrayBuffer.isView(t)||qe(t)||js(t)?Mf(t):Of(t)}},Mr=class extends Ut{constructor(t){super(t),this._impl=t}readAll(){return[...this]}[Symbol.iterator](){return this._impl[Symbol.iterator]()}[Symbol.asyncIterator](){return ye(this,arguments,function*(){yield q(yield*qn(Pe(this[Symbol.iterator]())))})}},yn=class extends Ut{constructor(t){super(t),this._impl=t}readAll(){var t,e;return x(this,void 0,void 0,function*(){let n=new Array;try{for(var i=Pe(this),s;s=yield i.next(),!s.done;){let o=s.value;n.push(o)}}catch(o){t={error:o}}finally{try{s&&!s.done&&(e=i.return)&&(yield e.call(i))}finally{if(t)throw t.error}}return n})}[Symbol.iterator](){throw new Error("AsyncRecordBatchStreamReader is not Iterable")}[Symbol.asyncIterator](){return this._impl[Symbol.asyncIterator]()}},bn=class extends Mr{constructor(t){super(t),this._impl=t}},vs=class extends yn{constructor(t){super(t),this._impl=t}},na=class{constructor(t=new Map){this.closed=!1,this.autoDestroy=!0,this._dictionaryIndex=0,this._recordBatchIndex=0,this.dictionaries=t}get numDictionaries(){return this._dictionaryIndex}get numRecordBatches(){return this._recordBatchIndex}isSync(){return!1}isAsync(){return!1}isFile(){return!1}isStream(){return!1}reset(t){return this._dictionaryIndex=0,this._recordBatchIndex=0,this.schema=t,this.dictionaries=new Map,this}_loadRecordBatch(t,e){let n=this._loadVectors(t,e,this.schema.fields),i=W({type:new vt(this.schema.fields),length:t.length,children:n});return new bt(this.schema,i)}_loadDictionaryBatch(t,e){let{id:n,isDelta:i}=t,{dictionaries:s,schema:o}=this,l=s.get(n);if(i||!l){let d=o.dictionaries.get(n),h=this._loadVectors(t.data,e,[d]);return(l&&i?l.concat(new z(h)):new z(h)).memoize()}return l.memoize()}_loadVectors(t,e,n){return new Zi(e,t.nodes,t.buffers,this.dictionaries).visitMany(n)}},vi=class extends na{constructor(t,e){super(e),this._reader=Ns(t)?new ws(this._handle=t):new bi(this._handle=t)}isSync(){return!0}isStream(){return!0}[Symbol.iterator](){return this}cancel(){!this.closed&&(this.closed=!0)&&(this.reset()._reader.return(),this._reader=null,this.dictionaries=null)}open(t){return this.closed||(this.autoDestroy=Rf(this,t),this.schema||(this.schema=this._reader.readSchema())||this.cancel()),this}throw(t){return!this.closed&&this.autoDestroy&&(this.closed=!0)?this.reset()._reader.throw(t):It}return(t){return!this.closed&&this.autoDestroy&&(this.closed=!0)?this.reset()._reader.return(t):It}next(){if(this.closed)return It;let t,{_reader:e}=this;for(;t=this._readNextMessageAndValidate();)if(t.isSchema())this.reset(t.header());else if(t.isRecordBatch()){this._recordBatchIndex++;let n=t.header(),i=e.readMessageBody(t.bodyLength);return{done:!1,value:this._loadRecordBatch(n,i)}}else if(t.isDictionaryBatch()){this._dictionaryIndex++;let n=t.header(),i=e.readMessageBody(t.bodyLength),s=this._loadDictionaryBatch(n,i);this.dictionaries.set(n.id,s)}return this.schema&&this._recordBatchIndex===0?(this._recordBatchIndex++,{done:!1,value:new jn(this.schema)}):this.return()}_readNextMessageAndValidate(t){return this._reader.readMessage(t)}},Si=class extends na{constructor(t,e){super(e),this._reader=new gs(this._handle=t)}isAsync(){return!0}isStream(){return!0}[Symbol.asyncIterator](){return this}cancel(){return x(this,void 0,void 0,function*(){!this.closed&&(this.closed=!0)&&(yield this.reset()._reader.return(),this._reader=null,this.dictionaries=null)})}open(t){return x(this,void 0,void 0,function*(){return this.closed||(this.autoDestroy=Rf(this,t),this.schema||(this.schema=yield this._reader.readSchema())||(yield this.cancel())),this})}throw(t){return x(this,void 0,void 0,function*(){return!this.closed&&this.autoDestroy&&(this.closed=!0)?yield this.reset()._reader.throw(t):It})}return(t){return x(this,void 0,void 0,function*(){return!this.closed&&this.autoDestroy&&(this.closed=!0)?yield this.reset()._reader.return(t):It})}next(){return x(this,void 0,void 0,function*(){if(this.closed)return It;let t,{_reader:e}=this;for(;t=yield this._readNextMessageAndValidate();)if(t.isSchema())yield this.reset(t.header());else if(t.isRecordBatch()){this._recordBatchIndex++;let n=t.header(),i=yield e.readMessageBody(t.bodyLength);return{done:!1,value:this._loadRecordBatch(n,i)}}else if(t.isDictionaryBatch()){this._dictionaryIndex++;let n=t.header(),i=yield e.readMessageBody(t.bodyLength),s=this._loadDictionaryBatch(n,i);this.dictionaries.set(n.id,s)}return this.schema&&this._recordBatchIndex===0?(this._recordBatchIndex++,{done:!1,value:new jn(this.schema)}):yield this.return()})}_readNextMessageAndValidate(t){return x(this,void 0,void 0,function*(){return yield this._reader.readMessage(t)})}},ia=class extends vi{constructor(t,e){super(t instanceof Ji?t:new Ji(t),e)}get footer(){return this._footer}get numDictionaries(){return this._footer?this._footer.numDictionaries:0}get numRecordBatches(){return this._footer?this._footer.numRecordBatches:0}isSync(){return!0}isFile(){return!0}open(t){if(!this.closed&&!this._footer){this.schema=(this._footer=this._readFooter()).schema;for(let e of this._footer.dictionaryBatches())e&&this._readDictionaryBatch(this._dictionaryIndex++)}return super.open(t)}readRecordBatch(t){var e;if(this.closed)return null;this._footer||this.open();let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(t);if(n&&this._handle.seek(n.offset)){let i=this._reader.readMessage(lt.RecordBatch);if(i!=null&&i.isRecordBatch()){let s=i.header(),o=this._reader.readMessageBody(i.bodyLength);return this._loadRecordBatch(s,o)}}return null}_readDictionaryBatch(t){var e;let n=(e=this._footer)===null||e===void 0?void 0:e.getDictionaryBatch(t);if(n&&this._handle.seek(n.offset)){let i=this._reader.readMessage(lt.DictionaryBatch);if(i!=null&&i.isDictionaryBatch()){let s=i.header(),o=this._reader.readMessageBody(i.bodyLength),l=this._loadDictionaryBatch(s,o);this.dictionaries.set(s.id,l)}}}_readFooter(){let{_handle:t}=this,e=t.size-Bl,n=t.readInt32(e),i=t.readAt(e-n,n);return $r.decode(i)}_readNextMessageAndValidate(t){var e;if(this._footer||this.open(),this._footer&&this._recordBatchIndex<this.numRecordBatches){let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(this._recordBatchIndex);if(n&&this._handle.seek(n.offset))return this._reader.readMessage(t)}return null}},Ml=class extends Si{constructor(t,...e){let n=typeof e[0]!="number"?e.shift():void 0,i=e[0]instanceof Map?e.shift():void 0;super(t instanceof mn?t:new mn(t,n),i)}get footer(){return this._footer}get numDictionaries(){return this._footer?this._footer.numDictionaries:0}get numRecordBatches(){return this._footer?this._footer.numRecordBatches:0}isFile(){return!0}isAsync(){return!0}open(t){let e=Object.create(null,{open:{get:()=>super.open}});return x(this,void 0,void 0,function*(){if(!this.closed&&!this._footer){this.schema=(this._footer=yield this._readFooter()).schema;for(let n of this._footer.dictionaryBatches())n&&(yield this._readDictionaryBatch(this._dictionaryIndex++))}return yield e.open.call(this,t)})}readRecordBatch(t){var e;return x(this,void 0,void 0,function*(){if(this.closed)return null;this._footer||(yield this.open());let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(t);if(n&&(yield this._handle.seek(n.offset))){let i=yield this._reader.readMessage(lt.RecordBatch);if(i!=null&&i.isRecordBatch()){let s=i.header(),o=yield this._reader.readMessageBody(i.bodyLength);return this._loadRecordBatch(s,o)}}return null})}_readDictionaryBatch(t){var e;return x(this,void 0,void 0,function*(){let n=(e=this._footer)===null||e===void 0?void 0:e.getDictionaryBatch(t);if(n&&(yield this._handle.seek(n.offset))){let i=yield this._reader.readMessage(lt.DictionaryBatch);if(i!=null&&i.isDictionaryBatch()){let s=i.header(),o=yield this._reader.readMessageBody(i.bodyLength),l=this._loadDictionaryBatch(s,o);this.dictionaries.set(s.id,l)}}})}_readFooter(){return x(this,void 0,void 0,function*(){let{_handle:t}=this;t._pending&&(yield t._pending);let e=t.size-Bl,n=yield t.readInt32(e),i=yield t.readAt(e-n,n);return $r.decode(i)})}_readNextMessageAndValidate(t){return x(this,void 0,void 0,function*(){if(this._footer||(yield this.open()),this._footer&&this._recordBatchIndex<this.numRecordBatches){let e=this._footer.getRecordBatch(this._recordBatchIndex);if(e&&(yield this._handle.seek(e.offset)))return yield this._reader.readMessage(t)}return null})}},Ol=class extends vi{constructor(t,e){super(t,e)}_loadVectors(t,e,n){return new Do(e,t.nodes,t.buffers,this.dictionaries).visitMany(n)}};function Rf(r,t){return t&&typeof t.autoDestroy=="boolean"?t.autoDestroy:r.autoDestroy}function*Mf(r){let t=Ut.from(r);try{if(!t.open({autoDestroy:!1}).closed)do yield t;while(!t.reset().open().closed)}finally{t.cancel()}}function Of(r){return ye(this,arguments,function*(){let e=yield q(Ut.from(r));try{if(!(yield q(e.open({autoDestroy:!1}))).closed)do yield yield q(e);while(!(yield q(e.reset().open())).closed)}finally{yield q(e.cancel())}})}function tb(r){return new Mr(new Ol(r))}function eb(r){let t=r.peek(wi+7&-8);return t&&t.byteLength>=4?ra(t)?new bn(new ia(r.read())):new Mr(new vi(r)):new Mr(new vi(function*(){}()))}function rb(r){return x(this,void 0,void 0,function*(){let t=yield r.peek(wi+7&-8);return t&&t.byteLength>=4?ra(t)?new bn(new ia(yield r.read())):new yn(new Si(r)):new yn(new Si(function(){return ye(this,arguments,function*(){})}()))})}function nb(r){return x(this,void 0,void 0,function*(){let{size:t}=yield r.stat(),e=new mn(r,t);return t>=Bf&&ra(yield e.readAt(0,wi+7&-8))?new vs(new Ml(e)):new yn(new Si(e))})}var Ot=class extends L{constructor(){super(),this._byteLength=0,this._nodes=[],this._buffers=[],this._bufferRegions=[]}static assemble(...t){let e=i=>i.flatMap(s=>Array.isArray(s)?e(s):s instanceof bt?s.data.children:s.data),n=new Ot;return n.visitMany(e(t)),n}visit(t){if(t instanceof z)return this.visitMany(t.data),this;let{type:e}=t;if(!M.isDictionary(e)){let{length:n,nullCount:i}=t;if(n>2147483647)throw new RangeError("Cannot write arrays larger than 2^31 - 1 in length");M.isNull(e)||dr.call(this,i<=0?new Uint8Array(0):si(t.offset,n,t.nullBitmap)),this.nodes.push(new ur(n,i))}return super.visit(t)}visitNull(t){return this}visitDictionary(t){return this.visit(t.clone(t.type.indices))}get nodes(){return this._nodes}get buffers(){return this._buffers}get byteLength(){return this._byteLength}get bufferRegions(){return this._bufferRegions}};function dr(r){let t=r.byteLength+7&-8;return this.buffers.push(r),this.bufferRegions.push(new xe(this._byteLength,t)),this._byteLength+=t,this}function ib(r){let{type:t,length:e,typeIds:n,valueOffsets:i}=r;if(dr.call(this,n),t.mode===Bt.Sparse)return Rl.call(this,r);if(t.mode===Bt.Dense){if(r.offset<=0)return dr.call(this,i),Rl.call(this,r);{let s=n.reduce((u,v)=>Math.max(u,v),n[0]),o=new Int32Array(s+1),l=new Int32Array(s+1).fill(-1),d=new Int32Array(e),h=ki(-i[0],e,i);for(let u,v,S=-1;++S<e;)(v=l[u=n[S]])===-1&&(v=l[u]=h[u]),d[S]=h[S]-v,++o[u];dr.call(this,d);for(let u,v=-1,S=t.children.length;++v<S;)if(u=r.children[v]){let A=t.typeIds[v],rt=Math.min(e,o[A]);this.visit(u.slice(l[A],rt))}}}return this}function sb(r){let t;return r.nullCount>=r.length?dr.call(this,new Uint8Array(0)):(t=r.values)instanceof Uint8Array?dr.call(this,si(r.offset,r.length,t)):dr.call(this,Dn(r.values))}function gn(r){return dr.call(this,r.values.subarray(0,r.length*r.stride))}function Cf(r){let{length:t,values:e,valueOffsets:n}=r,i=n[0],s=n[t],o=Math.min(s-i,e.byteLength-i);return dr.call(this,ki(-n[0],t,n)),dr.call(this,e.subarray(i,i+o)),this}function Cl(r){let{length:t,valueOffsets:e}=r;return e&&dr.call(this,ki(e[0],t,e)),this.visit(r.children[0])}function Rl(r){return this.visitMany(r.type.children.map((t,e)=>r.children[e]).filter(Boolean))[0]}Ot.prototype.visitBool=sb;Ot.prototype.visitInt=gn;Ot.prototype.visitFloat=gn;Ot.prototype.visitUtf8=Cf;Ot.prototype.visitBinary=Cf;Ot.prototype.visitFixedSizeBinary=gn;Ot.prototype.visitDate=gn;Ot.prototype.visitTimestamp=gn;Ot.prototype.visitTime=gn;Ot.prototype.visitDecimal=gn;Ot.prototype.visitList=Cl;Ot.prototype.visitStruct=Rl;Ot.prototype.visitUnion=ib;Ot.prototype.visitInterval=gn;Ot.prototype.visitFixedSizeList=Cl;Ot.prototype.visitMap=Cl;var Hn=class extends Rn{constructor(t){super(),this._position=0,this._started=!1,this._sink=new xr,this._schema=null,this._dictionaryBlocks=[],this._recordBatchBlocks=[],this._dictionaryDeltaOffsets=new Map,he(t)||(t={autoDestroy:!0,writeLegacyIpcFormat:!1}),this._autoDestroy=typeof t.autoDestroy=="boolean"?t.autoDestroy:!0,this._writeLegacyIpcFormat=typeof t.writeLegacyIpcFormat=="boolean"?t.writeLegacyIpcFormat:!1}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t,e){throw new Error('"throughDOM" not available in this environment')}toString(t=!1){return this._sink.toString(t)}toUint8Array(t=!1){return this._sink.toUint8Array(t)}writeAll(t){return Je(t)?t.then(e=>this.writeAll(e)):ze(t)?kl(this,t):Ll(this,t)}get closed(){return this._sink.closed}[Symbol.asyncIterator](){return this._sink[Symbol.asyncIterator]()}toDOMStream(t){return this._sink.toDOMStream(t)}toNodeStream(t){return this._sink.toNodeStream(t)}close(){return this.reset()._sink.close()}abort(t){return this.reset()._sink.abort(t)}finish(){return this._autoDestroy?this.close():this.reset(this._sink,this._schema),this}reset(t=this._sink,e=null){return t===this._sink||t instanceof xr?this._sink=t:(this._sink=new xr,t&&nd(t)?this.toDOMStream({type:"bytes"}).pipeTo(t):t&&id(t)&&this.toNodeStream({objectMode:!1}).pipe(t)),this._started&&this._schema&&this._writeFooter(this._schema),this._started=!1,this._dictionaryBlocks=[],this._recordBatchBlocks=[],this._dictionaryDeltaOffsets=new Map,(!e||!Nn(e,this._schema))&&(e==null?(this._position=0,this._schema=null):(this._started=!0,this._schema=e,this._writeSchema(e))),this}write(t){let e=null;if(this._sink){if(t==null)return this.finish()&&void 0;if(t instanceof Rt&&!(e=t.schema))return this.finish()&&void 0;if(t instanceof bt&&!(e=t.schema))return this.finish()&&void 0}else throw new Error("RecordBatchWriter is closed");if(e&&!Nn(e,this._schema)){if(this._started&&this._autoDestroy)return this.close();this.reset(this._sink,e)}t instanceof bt?t instanceof jn||this._writeRecordBatch(t):t instanceof Rt?this.writeAll(t.batches):qe(t)&&this.writeAll(t)}_writeMessage(t,e=8){let n=e-1,i=Wt.encode(t),s=i.byteLength,o=this._writeLegacyIpcFormat?4:8,l=s+o+n&~n,d=l-s-o;return t.headerType===lt.RecordBatch?this._recordBatchBlocks.push(new lr(l,t.bodyLength,this._position)):t.headerType===lt.DictionaryBatch&&this._dictionaryBlocks.push(new lr(l,t.bodyLength,this._position)),this._writeLegacyIpcFormat||this._write(Int32Array.of(-1)),this._write(Int32Array.of(l-o)),s>0&&this._write(i),this._writePadding(d)}_write(t){if(this._started){let e=H(t);e&&e.byteLength>0&&(this._sink.write(e),this._position+=e.byteLength)}return this}_writeSchema(t){return this._writeMessage(Wt.from(t))}_writeFooter(t){return this._writeLegacyIpcFormat?this._write(Int32Array.of(0)):this._write(Int32Array.of(-1,0))}_writeMagic(){return this._write(gi)}_writePadding(t){return t>0?this._write(new Uint8Array(t)):this}_writeRecordBatch(t){let{byteLength:e,nodes:n,bufferRegions:i,buffers:s}=Ot.assemble(t),o=new ie(t.numRows,n,i),l=Wt.from(o,e);return this._writeDictionaries(t)._writeMessage(l)._writeBodyBuffers(s)}_writeDictionaryBatch(t,e,n=!1){this._dictionaryDeltaOffsets.set(e,t.length+(this._dictionaryDeltaOffsets.get(e)||0));let{byteLength:i,nodes:s,bufferRegions:o,buffers:l}=Ot.assemble(new z([t])),d=new ie(t.length,s,o),h=new De(d,e,n),u=Wt.from(h,i);return this._writeMessage(u)._writeBodyBuffers(l)}_writeBodyBuffers(t){let e,n,i;for(let s=-1,o=t.length;++s<o;)(e=t[s])&&(n=e.byteLength)>0&&(this._write(e),(i=(n+7&-8)-n)>0&&this._writePadding(i));return this}_writeDictionaries(t){for(let[e,n]of t.dictionaries){let i=this._dictionaryDeltaOffsets.get(e)||0;if(i===0||(n=n==null?void 0:n.slice(i)).length>0)for(let s of n.data)this._writeDictionaryBatch(s,e,i>0),i+=s.length}return this}},Zr=class extends Hn{static writeAll(t,e){let n=new Zr(e);return Je(t)?t.then(i=>n.writeAll(i)):ze(t)?kl(n,t):Ll(n,t)}},Qr=class extends Hn{static writeAll(t){let e=new Qr;return Je(t)?t.then(n=>e.writeAll(n)):ze(t)?kl(e,t):Ll(e,t)}constructor(){super(),this._autoDestroy=!0}_writeSchema(t){return this._writeMagic()._writePadding(2)}_writeFooter(t){let e=$r.encode(new $r(t,Xt.V4,this._recordBatchBlocks,this._dictionaryBlocks));return super._writeFooter(t)._write(e)._write(Int32Array.of(e.byteLength))._writeMagic()}};function Ll(r,t){let e=t;t instanceof Rt&&(e=t.batches,r.reset(void 0,t.schema));for(let n of e)r.write(n);return r.finish()}function kl(r,t){var e,n,i,s;return x(this,void 0,void 0,function*(){try{for(e=Pe(t);n=yield e.next(),!n.done;){let o=n.value;r.write(o)}}catch(o){i={error:o}}finally{try{n&&!n.done&&(s=e.return)&&(yield s.call(e))}finally{if(i)throw i.error}}return r.finish()})}function Lf(r,t){if(ze(r))return ab(r,t);if(qe(r))return ob(r,t);throw new Error("toDOMStream() must be called with an Iterable or AsyncIterable")}function ob(r,t){let e=null,n=(t==null?void 0:t.type)==="bytes"||!1,i=(t==null?void 0:t.highWaterMark)||Math.pow(2,24);return new ReadableStream(Object.assign(Object.assign({},t),{start(o){s(o,e||(e=r[Symbol.iterator]()))},pull(o){e?s(o,e):o.close()},cancel(){((e==null?void 0:e.return)&&e.return()||!0)&&(e=null)}}),Object.assign({highWaterMark:n?i:void 0},t));function s(o,l){let d,h=null,u=o.desiredSize||null;for(;!(h=l.next(n?u:null)).done;)if(ArrayBuffer.isView(h.value)&&(d=H(h.value))&&(u!=null&&n&&(u=u-d.byteLength+1),h.value=d),o.enqueue(h.value),u!=null&&--u<=0)return;o.close()}}function ab(r,t){let e=null,n=(t==null?void 0:t.type)==="bytes"||!1,i=(t==null?void 0:t.highWaterMark)||Math.pow(2,24);return new ReadableStream(Object.assign(Object.assign({},t),{start(o){return x(this,void 0,void 0,function*(){yield s(o,e||(e=r[Symbol.asyncIterator]()))})},pull(o){return x(this,void 0,void 0,function*(){e?yield s(o,e):o.close()})},cancel(){return x(this,void 0,void 0,function*(){((e==null?void 0:e.return)&&(yield e.return())||!0)&&(e=null)})}}),Object.assign({highWaterMark:n?i:void 0},t));function s(o,l){return x(this,void 0,void 0,function*(){let d,h=null,u=o.desiredSize||null;for(;!(h=yield l.next(n?u:null)).done;)if(ArrayBuffer.isView(h.value)&&(d=H(h.value))&&(u!=null&&n&&(u=u-d.byteLength+1),h.value=d),o.enqueue(h.value),u!=null&&--u<=0)return;o.close()})}}function Nf(r){return new Ul(r)}var Ul=class{constructor(t){this._numChunks=0,this._finished=!1,this._bufferedSize=0;let{["readableStrategy"]:e,["writableStrategy"]:n,["queueingStrategy"]:i="count"}=t,s=ed(t,["readableStrategy","writableStrategy","queueingStrategy"]);this._controller=null,this._builder=Ln(s),this._getSize=i!=="bytes"?kf:Uf;let{["highWaterMark"]:o=i==="bytes"?Math.pow(2,14):1e3}=Object.assign({},e),{["highWaterMark"]:l=i==="bytes"?Math.pow(2,14):1e3}=Object.assign({},n);this.readable=new ReadableStream({cancel:()=>{this._builder.clear()},pull:d=>{this._maybeFlush(this._builder,this._controller=d)},start:d=>{this._maybeFlush(this._builder,this._controller=d)}},{highWaterMark:o,size:i!=="bytes"?kf:Uf}),this.writable=new WritableStream({abort:()=>{this._builder.clear()},write:()=>{this._maybeFlush(this._builder,this._controller)},close:()=>{this._maybeFlush(this._builder.finish(),this._controller)}},{highWaterMark:l,size:d=>this._writeValueAndReturnChunkSize(d)})}_writeValueAndReturnChunkSize(t){let e=this._bufferedSize;return this._bufferedSize=this._getSize(this._builder.append(t)),this._bufferedSize-e}_maybeFlush(t,e){e!=null&&(this._bufferedSize>=e.desiredSize&&++this._numChunks&&this._enqueue(e,t.toVector()),t.finished&&((t.length>0||this._numChunks===0)&&++this._numChunks&&this._enqueue(e,t.toVector()),!this._finished&&(this._finished=!0)&&this._enqueue(e,null)))}_enqueue(t,e){this._bufferedSize=0,this._controller=null,e==null?t.close():t.enqueue(e)}},kf=r=>{var t;return(t=r==null?void 0:r.length)!==null&&t!==void 0?t:0},Uf=r=>{var t;return(t=r==null?void 0:r.byteLength)!==null&&t!==void 0?t:0};function sa(r,t){let e=new xr,n=null,i=new ReadableStream({cancel(){return x(this,void 0,void 0,function*(){yield e.close()})},start(l){return x(this,void 0,void 0,function*(){yield o(l,n||(n=yield s()))})},pull(l){return x(this,void 0,void 0,function*(){n?yield o(l,n):l.close()})}});return{writable:new WritableStream(e,Object.assign({highWaterMark:Math.pow(2,14)},r)),readable:i};function s(){return x(this,void 0,void 0,function*(){return yield(yield Ut.from(e)).open(t)})}function o(l,d){return x(this,void 0,void 0,function*(){let h=l.desiredSize,u=null;for(;!(u=yield d.next()).done;)if(l.enqueue(u.value),h!=null&&--h<=0)return;l.close()})}}function oa(r,t){let e=new this(r),n=new Ae(e),i=new ReadableStream({cancel(){return x(this,void 0,void 0,function*(){yield n.cancel()})},pull(o){return x(this,void 0,void 0,function*(){yield s(o)})},start(o){return x(this,void 0,void 0,function*(){yield s(o)})}},Object.assign({highWaterMark:Math.pow(2,14)},t));return{writable:new WritableStream(e,r),readable:i};function s(o){return x(this,void 0,void 0,function*(){let l=null,d=o.desiredSize;for(;l=yield n.read(d||null);)if(o.enqueue(l),d!=null&&(d-=l.byteLength)<=0)return;o.close()})}}function aa(r,t="stream"){return(t==="stream"?Zr:Qr).writeAll(r).toUint8Array(!0)}var db=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},Ja),wl),fl),qa),Ga),dl),{compareSchemas:Nn,compareFields:df,compareTypes:ff});ee.toDOMStream=Lf;Ft.throughDOM=Nf;Ut.throughDOM=sa;bn.throughDOM=sa;Mr.throughDOM=sa;Hn.throughDOM=oa;Qr.throughDOM=oa;Zr.throughDOM=oa;function Ii(r){switch(r.typeId){case _.Binary:return{sqlType:"binary"};case _.Bool:return{sqlType:"bool"};case _.Date:return{sqlType:"date"};case _.DateDay:return{sqlType:"date32[d]"};case _.DateMillisecond:return{sqlType:"date64[ms]"};case _.Decimal:{let t=r;return{sqlType:"decimal",precision:t.precision,scale:t.scale}}case _.Float:return{sqlType:"float"};case _.Float16:return{sqlType:"float16"};case _.Float32:return{sqlType:"float32"};case _.Float64:return{sqlType:"float64"};case _.Int:return{sqlType:"int32"};case _.Int16:return{sqlType:"int16"};case _.Int32:return{sqlType:"int32"};case _.Int64:return{sqlType:"int64"};case _.Uint16:return{sqlType:"uint16"};case _.Uint32:return{sqlType:"uint32"};case _.Uint64:return{sqlType:"uint64"};case _.Uint8:return{sqlType:"uint8"};case _.IntervalDayTime:return{sqlType:"interval[dt]"};case _.IntervalYearMonth:return{sqlType:"interval[m]"};case _.List:return{sqlType:"list",valueType:Ii(r.valueType)};case _.FixedSizeBinary:return{sqlType:"fixedsizebinary",byteWidth:r.byteWidth};case _.Null:return{sqlType:"null"};case _.Utf8:return{sqlType:"utf8"};case _.Struct:return{sqlType:"struct",fields:r.children.map(e=>la(e.name,e.type))};case _.Map:{let t=r;return{sqlType:"map",keyType:Ii(t.keyType),valueType:Ii(t.valueType)}}case _.Time:return{sqlType:"time[s]"};case _.TimeMicrosecond:return{sqlType:"time[us]"};case _.TimeMillisecond:return{sqlType:"time[ms]"};case _.TimeNanosecond:return{sqlType:"time[ns]"};case _.TimeSecond:return{sqlType:"time[s]"};case _.Timestamp:return{sqlType:"timestamp",timezone:r.timezone||void 0};case _.TimestampSecond:return{sqlType:"timestamp[s]",timezone:r.timezone||void 0};case _.TimestampMicrosecond:return{sqlType:"timestamp[us]",timezone:r.timezone||void 0};case _.TimestampNanosecond:return{sqlType:"timestamp[ns]",timezone:r.timezone||void 0};case _.TimestampMillisecond:return{sqlType:"timestamp[ms]",timezone:r.timezone||void 0}}throw new Error(`unsupported arrow type: ${r.toString()}`)}function la(r,t){let e=Ii(t);return e.name=r,e}var ca=class{constructor(){this._bindings=null;this._nextMessageId=0}log(t){this.postMessage({messageId:this._nextMessageId++,requestId:0,type:"LOG",data:t},[])}sendOK(t){this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"OK",data:null},[])}failWith(t,e){let n={name:e.name,message:e.message,stack:e.stack||void 0};this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"ERROR",data:n},[])}async onMessage(t){switch(t.type){case"PING":this.sendOK(t);return;case"INSTANTIATE":this._bindings!=null&&this.failWith(t,new Error("duckdb already initialized"));try{this._bindings=await this.instantiate(t.data[0],t.data[1],e=>{this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"INSTANTIATE_PROGRESS",data:e},[])}),this.sendOK(t)}catch(e){this._bindings=null,this.failWith(t,e)}return;default:break}if(!this._bindings)return this.failWith(t,new Error("duckdb is not initialized"));try{switch(t.type){case"GET_VERSION":this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"VERSION_STRING",data:this._bindings.getVersion()},[]);break;case"GET_FEATURE_FLAGS":this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FEATURE_FLAGS",data:this._bindings.getFeatureFlags()},[]);break;case"RESET":this._bindings.reset(),this.sendOK(t);break;case"OPEN":this._bindings.open(t.data),this.sendOK(t);break;case"DROP_FILE":this._bindings.dropFile(t.data),this.sendOK(t);break;case"DROP_FILES":this._bindings.dropFiles(),this.sendOK(t);break;case"FLUSH_FILES":this._bindings.flushFiles(),this.sendOK(t);break;case"CONNECT":{let e=this._bindings.connect();this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"CONNECTION_INFO",data:e.useUnsafe((n,i)=>i)},[]);break}case"DISCONNECT":this._bindings.disconnect(t.data),this.sendOK(t);break;case"CREATE_PREPARED":{let e=this._bindings.createPrepared(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"PREPARED_STATEMENT_ID",data:e},[]);break}case"CLOSE_PREPARED":{this._bindings.closePrepared(t.data[0],t.data[1]),this.sendOK(t);break}case"RUN_PREPARED":{let e=this._bindings.runPrepared(t.data[0],t.data[1],t.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT",data:e},[e.buffer]);break}case"RUN_QUERY":{let e=this._bindings.runQuery(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT",data:e},[e.buffer]);break}case"SEND_PREPARED":{let e=this._bindings.sendPrepared(t.data[0],t.data[1],t.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER",data:e},[e.buffer]);break}case"START_PENDING_QUERY":{let e=this._bindings.startPendingQuery(t.data[0],t.data[1]),n=[];e&&n.push(e.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:e},n);break}case"POLL_PENDING_QUERY":{let e=this._bindings.pollPendingQuery(t.data),n=[];e&&n.push(e.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:e},n);break}case"CANCEL_PENDING_QUERY":{let e=this._bindings.cancelPendingQuery(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"SUCCESS",data:e},[]);break}case"FETCH_QUERY_RESULTS":{let e=this._bindings.fetchQueryResults(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_CHUNK",data:e},[e.buffer]);break}case"GET_TABLE_NAMES":{let e=this._bindings.getTableNames(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"TABLE_NAMES",data:e},[]);break}case"GLOB_FILE_INFOS":{let e=this._bindings.globFiles(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_INFOS",data:e},[]);break}case"REGISTER_FILE_URL":this._bindings.registerFileURL(t.data[0],t.data[1],t.data[2],t.data[3]),this.sendOK(t);break;case"REGISTER_FILE_BUFFER":this._bindings.registerFileBuffer(t.data[0],t.data[1]),this.sendOK(t);break;case"REGISTER_FILE_HANDLE":this._bindings.registerFileHandle(t.data[0],t.data[1],t.data[2],t.data[3]),this.sendOK(t);break;case"COPY_FILE_TO_PATH":this._bindings.copyFileToPath(t.data[0],t.data[1]),this.sendOK(t);break;case"COPY_FILE_TO_BUFFER":{let e=this._bindings.copyFileToBuffer(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_BUFFER",data:e},[]);break}case"COLLECT_FILE_STATISTICS":this._bindings.collectFileStatistics(t.data[0],t.data[1]),this.sendOK(t);break;case"EXPORT_FILE_STATISTICS":{this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_STATISTICS",data:this._bindings.exportFileStatistics(t.data)},[]);break}case"INSERT_ARROW_FROM_IPC_STREAM":{this._bindings.insertArrowFromIPCStream(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"IMPORT_CSV_FROM_PATH":{this._bindings.insertCSVFromPath(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"IMPORT_JSON_FROM_PATH":{this._bindings.insertJSONFromPath(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"TOKENIZE":{let e=this._bindings.tokenize(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"SCRIPT_TOKENS",data:e},[]);break}}}catch(e){return this.failWith(t,e)}}};var Ss={},fb=(()=>{var r=Ss.url;return async function(t={}){function e(){return Pt.buffer!=hr.buffer&&pr(),hr}function n(){return Pt.buffer!=hr.buffer&&pr(),Gl}function i(){return Pt.buffer!=hr.buffer&&pr(),$l}function s(){return Pt.buffer!=hr.buffer&&pr(),Xl}function o(){return Pt.buffer!=hr.buffer&&pr(),Kl}function l(){return Pt.buffer!=hr.buffer&&pr(),Jl}function d(){return Pt.buffer!=hr.buffer&&pr(),ql}function h(){return Pt.buffer!=hr.buffer&&pr(),Zl}var u=typeof t<"u"?t:{},v,S;u.ready=new Promise((a,c)=>{v=a,S=c}),["_main","_malloc","_free","_duckdb_web_clear_response","_duckdb_web_collect_file_stats","_duckdb_web_connect","_duckdb_web_copy_file_to_buffer","_duckdb_web_copy_file_to_path","_duckdb_web_disconnect","_duckdb_web_export_file_stats","_duckdb_web_fail_with","_duckdb_web_flush_file","_duckdb_web_flush_files","_duckdb_web_fs_drop_file","_duckdb_web_fs_drop_files","_duckdb_web_fs_get_file_info_by_id","_duckdb_web_fs_get_file_info_by_name","_duckdb_web_fs_glob_add_path","_duckdb_web_fs_glob_file_infos","_duckdb_web_fs_register_file_buffer","_duckdb_web_fs_register_file_url","_duckdb_web_get_feature_flags","_duckdb_web_get_global_file_info","_duckdb_web_get_tablenames","_duckdb_web_get_version","_duckdb_web_insert_arrow_from_ipc_stream","_duckdb_web_insert_csv_from_path","_duckdb_web_insert_json_from_path","_duckdb_web_open","_duckdb_web_pending_query_cancel","_duckdb_web_pending_query_poll","_duckdb_web_pending_query_start","_duckdb_web_prepared_close","_duckdb_web_prepared_create","_duckdb_web_prepared_run","_duckdb_web_prepared_send","_duckdb_web_query_fetch_results","_duckdb_web_query_run","_duckdb_web_reset","_duckdb_web_tokenize","_duckdb_web_udf_scalar_create","__emscripten_thread_init","__emscripten_thread_exit","__emscripten_thread_crashed","__emscripten_thread_mailbox_await","__emscripten_tls_init","_pthread_self","checkMailbox","establishStackSpace","invokeEntryPoint","PThread","getExceptionMessage","___get_exception_message","___cpp_exception","___cxa_increment_exception_refcount","___cxa_decrement_exception_refcount","___thrown_object_from_unwind_exception","_fflush","__emscripten_check_mailbox","onRuntimeInitialized"].forEach(a=>{Object.getOwnPropertyDescriptor(u.ready,a)||Object.defineProperty(u.ready,a,{get:()=>T("You are getting "+a+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"),set:()=>T("You are setting "+a+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")})});var A=Object.assign({},u),rt=[],it="./this.program",yt=(a,c)=>{throw c},gt=typeof window=="object",xt=typeof importScripts=="function",pt=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",zn=!gt&&!pt&&!xt;if(u.ENVIRONMENT)throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");var D=u.ENVIRONMENT_IS_PTHREAD||!1,de="";function Ti(a){return u.locateFile?u.locateFile(a,de):de+a}var tn,st,Nt,Be;if(pt){throw typeof process>"u"||process.release,new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");var fe=process.versions.node,jt=fe.split(".").slice(0,3);jt=jt[0]*1e4+jt[1]*100+jt[2].split("-")[0]*1;var se=101900;if(jt<101900)throw new Error("This emscripten-generated code requires node v10.19.19.0 (detected v"+fe+")");let{createRequire:a}=await Promise.resolve().then(()=>ja(x_("module")));var at=a(Ss.url),te=at("fs"),en=at("path");xt?de=en.dirname(de)+"/":de=at("url").fileURLToPath(new URL("./",Ss.url)),tn=(f,p)=>(f=wa(f)?new URL(f):en.normalize(f),te.readFileSync(f,p?void 0:"utf8")),Nt=f=>{var p=tn(f,!0);return p.buffer||(p=new Uint8Array(p)),F(p.buffer),p},st=(f,p,b,g=!0)=>{f=wa(f)?new URL(f):en.normalize(f),te.readFile(f,g?void 0:"utf8",(m,w)=>{m?b(m):p(g?w.buffer:w)})},!u.thisProgram&&process.argv.length>1&&(it=process.argv[1].replace(/\\/g,"/")),rt=process.argv.slice(2),yt=(f,p)=>{throw process.exitCode=f,p},u.inspect=()=>"[Emscripten Module object]";let c;try{c=at("worker_threads")}catch(f){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),f}global.Worker=c.Worker}else if(zn){if(typeof process=="object"&&typeof at=="function"||typeof window=="object"||typeof importScripts=="function")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");typeof read<"u"&&(tn=a=>read(a)),Nt=a=>{let c;return typeof readbuffer=="function"?new Uint8Array(readbuffer(a)):(c=read(a,"binary"),F(typeof c=="object"),c)},st=(a,c,f)=>{setTimeout(()=>c(Nt(a)),0)},typeof clearTimeout>"u"&&(globalThis.clearTimeout=a=>{}),typeof scriptArgs<"u"?rt=scriptArgs:typeof arguments<"u"&&(rt=arguments),typeof quit=="function"&&(yt=(a,c)=>{throw setTimeout(()=>{if(!(c instanceof Ts)){let f=c;c&&typeof c=="object"&&c.stack&&(f=[c,c.stack]),E(`exiting due to exception: ${f}`)}quit(a)}),c}),typeof print<"u"&&(typeof console>"u"&&(console={}),console.log=print,console.warn=console.error=typeof printErr<"u"?printErr:print)}else if(gt||xt){if(xt?de=self.location.href:typeof document<"u"&&document.currentScript&&(de=document.currentScript.src),r&&(de=r),de.indexOf("blob:")!==0?de=de.substr(0,de.replace(/[?#].*/,"").lastIndexOf("/")+1):de="",!(typeof window=="object"||typeof importScripts=="function"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");pt||(tn=a=>{var c=new XMLHttpRequest;return c.open("GET",a,!1),c.send(null),c.responseText},xt&&(Nt=a=>{var c=new XMLHttpRequest;return c.open("GET",a,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),st=(a,c,f)=>{var p=new XMLHttpRequest;p.open("GET",a,!0),p.responseType="arraybuffer",p.onload=()=>{if(p.status==200||p.status==0&&p.response){c(p.response);return}f()},p.onerror=f,p.send(null)}),Be=a=>document.title=a}else throw new Error("environment detection error");pt&&typeof performance>"u"&&(global.performance=at("perf_hooks").performance);var zl=console.log.bind(console),Wl=console.error.bind(console);pt&&(zl=(...a)=>te.writeSync(1,a.join(" ")+`
`),Wl=(...a)=>te.writeSync(2,a.join(" ")+`
`));var Ai=u.print||zl,E=u.printErr||Wl;Object.assign(u,A),A=null,r_(),u.arguments&&(rt=u.arguments),_r("arguments","arguments_"),u.thisProgram&&(it=u.thisProgram),_r("thisProgram","thisProgram"),u.quit&&(yt=u.quit),_r("quit","quit_"),F(typeof u.memoryInitializerPrefixURL>"u","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"),F(typeof u.pthreadMainPrefixURL>"u","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"),F(typeof u.cdInitializerPrefixURL>"u","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"),F(typeof u.filePackagePrefixURL>"u","Module.filePackagePrefixURL option was removed, use Module.locateFile instead"),F(typeof u.read>"u","Module.read option was removed (modify read_ in JS)"),F(typeof u.readAsync>"u","Module.readAsync option was removed (modify readAsync in JS)"),F(typeof u.readBinary>"u","Module.readBinary option was removed (modify readBinary in JS)"),F(typeof u.setWindowTitle>"u","Module.setWindowTitle option was removed (modify setWindowTitle in JS)"),F(typeof u.TOTAL_MEMORY>"u","Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"),_r("read","read_"),_r("readAsync","readAsync"),_r("readBinary","readBinary"),_r("setWindowTitle","setWindowTitle");var Sb="IDBFS is no longer included by default; build with -lidbfs.js",Ib="PROXYFS is no longer included by default; build with -lproxyfs.js",Tb="WORKERFS is no longer included by default; build with -lworkerfs.js",Ab="NODEFS is no longer included by default; build with -lnodefs.js";F(gt||xt||pt,"Pthreads do not work in this environment yet (need Web Workers, or an alternative to them)"),F(!zn,"shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");var Fi;u.wasmBinary&&(Fi=u.wasmBinary),_r("wasmBinary","wasmBinary");var Yl=u.noExitRuntime||!0;_r("noExitRuntime","noExitRuntime"),typeof WebAssembly!="object"&&T("no native wasm support detected");var Pt,ya,Wn=!1,vn;function F(a,c){a||T("Assertion failed"+(c?": "+c:""))}var Fb,hr,Gl,$l,Xl,Kl,Jl,ql,Zl;function pr(){var a=Pt.buffer;u.HEAP8=hr=new Int8Array(a),u.HEAP16=$l=new Int16Array(a),u.HEAP32=Kl=new Int32Array(a),u.HEAPU8=Gl=new Uint8Array(a),u.HEAPU16=Xl=new Uint16Array(a),u.HEAPU32=Jl=new Uint32Array(a),u.HEAPF32=ql=new Float32Array(a),u.HEAPF64=Zl=new Float64Array(a)}F(!u.STACK_SIZE,"STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time"),F(typeof Int32Array<"u"&&typeof Float64Array<"u"&&Int32Array.prototype.subarray!=null&&Int32Array.prototype.set!=null,"JS engine does not provide full typed array support");var Ei=u.INITIAL_MEMORY||16777216;if(_r("INITIAL_MEMORY","INITIAL_MEMORY"),F(Ei>=65536,"INITIAL_MEMORY should be larger than STACK_SIZE, was "+Ei+"! (STACK_SIZE="+65536+")"),D)Pt=u.wasmMemory;else if(u.wasmMemory)Pt=u.wasmMemory;else if(Pt=new WebAssembly.Memory({initial:Ei/65536,maximum:65536,shared:!0}),!(Pt.buffer instanceof SharedArrayBuffer))throw E("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),pt&&E("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");pr(),Ei=Pt.buffer.byteLength,F(Ei%65536===0);var Is;function Ql(){var a=Ua();F((a&3)==0),a==0&&(a+=4),l()[a>>>2]=34821223,l()[a+4>>>2]=2310721022,l()[0]=1668509029}function Yn(){if(!Wn){var a=Ua();a==0&&(a+=4);var c=l()[a>>>2],f=l()[a+4>>>2];(c!=34821223||f!=2310721022)&&T(`Stack overflow! Stack cookie has been overwritten at ${In(a)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${In(f)} ${In(c)}`),l()[0]!=1668509029&&T("Runtime error: The application has corrupted its heap memory area (address zero)!")}}(function(){var a=new Int16Array(1),c=new Int8Array(a.buffer);if(a[0]=25459,c[0]!==115||c[1]!==99)throw"Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)"})();var ba=[],tc=[],ec=[],Eb=[],rc=[],xi=!1,ga=0;function Di(){return Yl||ga>0}function Jf(){if(F(!D),u.preRun)for(typeof u.preRun=="function"&&(u.preRun=[u.preRun]);u.preRun.length;)ic(u.preRun.shift());As(ba)}function nc(){F(!xi),xi=!0,!D&&(Yn(),As(tc))}function qf(){Yn(),!D&&As(ec)}function Zf(){if(Yn(),!D){if(u.postRun)for(typeof u.postRun=="function"&&(u.postRun=[u.postRun]);u.postRun.length;)th(u.postRun.shift());As(rc)}}function ic(a){ba.unshift(a)}function Qf(a){tc.unshift(a)}function xb(a){ec.unshift(a)}function Db(a){}function th(a){rc.unshift(a)}F(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),F(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),F(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),F(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var rn=0,Sn=null,Bi=null,Gn={};function Bb(a){for(var c=a;;){if(!Gn[a])return a;a=c+Math.random()}}function sc(a){rn++,u.monitorRunDependencies&&u.monitorRunDependencies(rn),a?(F(!Gn[a]),Gn[a]=1,Sn===null&&typeof setInterval<"u"&&(Sn=setInterval(()=>{if(Wn){clearInterval(Sn),Sn=null;return}var c=!1;for(var f in Gn)c||(c=!0,E("still waiting on run dependencies:")),E("dependency: "+f);c&&E("(end of list)")},1e4))):E("warning: run dependency added without ID")}function oc(a){if(rn--,u.monitorRunDependencies&&u.monitorRunDependencies(rn),a?(F(Gn[a]),delete Gn[a]):E("warning: run dependency removed without ID"),rn==0&&(Sn!==null&&(clearInterval(Sn),Sn=null),Bi)){var c=Bi;Bi=null,c()}}function T(a){u.onAbort&&u.onAbort(a),a="Aborted("+a+")",E(a),Wn=!0,vn=1,xi&&Iu();var c=new WebAssembly.RuntimeError(a);throw S(c),c}var eh="data:application/octet-stream;base64,";function ac(a){return a.startsWith(eh)}function wa(a){return a.startsWith("file://")}function y(a,c){return function(){var f=a,p=c;return c||(p=u.asm),F(xi,"native function `"+f+"` called before runtime initialization"),p[a]||F(p[a],"exported native function `"+f+"` not found"),p[a].apply(null,arguments)}}var Cr;u.locateFile?(Cr="./duckdb-coi.wasm",ac(Cr)||(Cr=Ti(Cr))):Cr=new URL("./duckdb-coi.wasm",Ss.url).href;function lc(a){try{if(a==Cr&&Fi)return new Uint8Array(Fi);if(Nt)return Nt(a);throw"both async and sync fetching of the wasm failed"}catch(c){T(c)}}function rh(a){return!Fi&&(gt||xt)&&typeof fetch=="function"?fetch(a,{credentials:"same-origin"}).then(c=>{if(!c.ok)throw"failed to load wasm binary file at '"+a+"'";return c.arrayBuffer()}).catch(()=>lc(a)):Promise.resolve().then(()=>lc(a))}function cc(a,c,f){return rh(a).then(p=>WebAssembly.instantiate(p,c)).then(p=>p).then(f,p=>{E("failed to asynchronously prepare wasm: "+p),wa(Cr)&&E("warning: Loading from a file URI ("+Cr+") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing"),T(p)})}function nh(a,c,f,p){return!a&&typeof WebAssembly.instantiateStreaming=="function"&&!ac(c)&&!pt&&typeof fetch=="function"?fetch(c,{credentials:"same-origin"}).then(b=>{var g=WebAssembly.instantiateStreaming(b,f);return g.then(p,function(m){return E("wasm streaming compile failed: "+m),E("falling back to ArrayBuffer instantiation"),cc(c,f,p)})}):cc(c,f,p)}function ih(){var a={env:bu,wasi_snapshot_preview1:bu};function c(b,g){var m=b.exports;return u.asm=m,ph(u.asm._emscripten_tls_init),Is=u.asm.__indirect_function_table,F(Is,"table not found in wasm exports"),Qf(u.asm.__wasm_call_ctors),ya=g,oc("wasm-instantiate"),m}sc("wasm-instantiate");var f=u;function p(b){F(u===f,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"),f=null,c(b.instance,b.module)}if(u.instantiateWasm)try{return u.instantiateWasm(a,c)}catch(b){E("Module.instantiateWasm callback failed with error: "+b),S(b)}return nh(Fi,Cr,a,p).catch(S),{}}var ke,$n;function _r(a,c){Object.getOwnPropertyDescriptor(u,a)||Object.defineProperty(u,a,{configurable:!0,get:function(){T("Module."+a+" has been replaced with plain "+c+" (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}})}function sh(a){Object.getOwnPropertyDescriptor(u,a)&&T("`Module."+a+"` was supplied but `"+a+"` not included in INCOMING_MODULE_JS_API")}function uc(a){return a==="FS_createPath"||a==="FS_createDataFile"||a==="FS_createPreloadedFile"||a==="FS_unlink"||a==="addRunDependency"||a==="FS_createLazyFile"||a==="FS_createDevice"||a==="removeRunDependency"}function oh(a,c){typeof globalThis<"u"&&Object.defineProperty(globalThis,a,{configurable:!0,get:function(){Ke("`"+a+"` is not longer defined by emscripten. "+c)}})}oh("buffer","Please use HEAP8.buffer or wasmMemory.buffer");function ah(a){typeof globalThis<"u"&&!Object.getOwnPropertyDescriptor(globalThis,a)&&Object.defineProperty(globalThis,a,{configurable:!0,get:function(){var c="`"+a+"` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line",f=a;f.startsWith("_")||(f="$"+a),c+=" (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE="+f+")",uc(a)&&(c+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),Ke(c)}}),dc(a)}function dc(a){Object.getOwnPropertyDescriptor(u,a)||Object.defineProperty(u,a,{configurable:!0,get:function(){var c="'"+a+"' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";uc(a)&&(c+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),T(c)}})}function fc(a){pt?te.writeSync(2,Array.from(arguments).join(" ")+`
`):console.warn.apply(console,arguments)}function Ts(a){this.name="ExitStatus",this.message=`Program terminated with exit(${a})`,this.status=a}function va(a){a.terminate(),a.onmessage=c=>{var f=c.data.cmd;E('received "'+f+'" command from terminated worker: '+a.workerID)}}function lh(a){F(!D,"Internal Error! killThread() can only ever be called from main application thread!"),F(a,"Internal Error! Null pthread_ptr in killThread!");var c=k.pthreads[a];delete k.pthreads[a],va(c),wu(a),k.runningWorkers.splice(k.runningWorkers.indexOf(c),1),c.pthread_ptr=0}function ch(a){F(!D,"Internal Error! cancelThread() can only ever be called from main application thread!"),F(a,"Internal Error! Null pthread_ptr in cancelThread!");var c=k.pthreads[a];c.postMessage({cmd:"cancel"})}function hc(a){F(!D,"Internal Error! cleanupThread() can only ever be called from main application thread!"),F(a,"Internal Error! Null pthread_ptr in cleanupThread!");var c=k.pthreads[a];F(c),k.returnWorkerToPool(c)}function pc(a,c){return n().fill(0,a,a+c),a}function _c(a){F(!D,"Internal Error! spawnThread() can only ever be called from main application thread!"),F(a.pthread_ptr,"Internal error, no pthread ptr!");var c=k.getNewWorker();if(!c)return 6;F(!c.pthread_ptr,"Internal error!"),k.runningWorkers.push(c),k.pthreads[a.pthread_ptr]=c,c.pthread_ptr=a.pthread_ptr;var f={cmd:"run",start_routine:a.startRoutine,arg:a.arg,pthread_ptr:a.pthread_ptr};return pt&&c.unref(),c.postMessage(f,a.transferList),0}var mc=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function yc(a,c,f){c>>>=0;for(var p=c+f,b=c;a[b]&&!(b>=p);)++b;if(b-c>16&&a.buffer&&mc)return mc.decode(a.buffer instanceof SharedArrayBuffer?a.slice(c,b):a.subarray(c,b));for(var g="";c<b;){var m=a[c++];if(!(m&128)){g+=String.fromCharCode(m);continue}var w=a[c++]&63;if((m&224)==192){g+=String.fromCharCode((m&31)<<6|w);continue}var B=a[c++]&63;if((m&240)==224?m=(m&15)<<12|w<<6|B:((m&248)!=240&&Ke("Invalid UTF-8 leading byte "+In(m)+" encountered when deserializing a UTF-8 string in wasm memory to a JS string!"),m=(m&7)<<18|w<<12|B<<6|a[c++]&63),m<65536)g+=String.fromCharCode(m);else{var R=m-65536;g+=String.fromCharCode(55296|R>>10,56320|R&1023)}}return g}function Ue(a,c){return F(typeof a=="number"),a>>>=0,a?yc(n(),a,c):""}var nn={varargs:void 0,get:function(){F(nn.varargs!=null),nn.varargs+=4;var a=o()[nn.varargs-4>>>2];return a},getStr:function(a){var c=Ue(a);return c}};function bc(a){if(D)return ot(1,1,a);vn=a,Di()||(k.terminateAllThreads(),u.onExit&&u.onExit(a),Wn=!0),yt(a,new Ts(a))}function gc(a,c){if(vn=a,g_(),D)throw F(!c),vc(a),"unwind";if(Di()&&!c){var f=`program exited (with status: ${a}), but keepRuntimeAlive() is set (counter=${ga}) due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)`;S(f),E(f)}bc(a)}var Sa=gc;function In(a){return F(typeof a=="number"),"0x"+a.toString(16).padStart(8,"0")}function Ia(a){if(a instanceof Ts||a=="unwind")return vn;Yn(),a instanceof WebAssembly.RuntimeError&&Fu()<=0&&E("Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to 65536)"),yt(1,a)}var k={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],pthreads:{},nextWorkerID:1,debugInit:function(){function a(){var f=0;return xi&&typeof Xn<"u"&&(f=Xn()),"w:"+(u.workerID||0)+",t:"+In(f)+": "}var c=fc;fc=f=>c(a()+f)},init:function(){k.debugInit(),D?k.initWorker():k.initMainThread()},initMainThread:function(){for(var a=4;a--;)k.allocateUnusedWorker();ic(()=>{sc("loading-workers"),k.loadWasmModuleToAllWorkers(()=>oc("loading-workers"))})},initWorker:function(){Yl=!1},setExitStatus:function(a){vn=a},terminateAllThreads__deps:["$terminateWorker"],terminateAllThreads:function(){F(!D,"Internal Error! terminateAllThreads() can only ever be called from main application thread!");for(var a of k.runningWorkers)va(a);for(var a of k.unusedWorkers)va(a);k.unusedWorkers=[],k.runningWorkers=[],k.pthreads=[]},returnWorkerToPool:function(a){var c=a.pthread_ptr;delete k.pthreads[c],k.unusedWorkers.push(a),k.runningWorkers.splice(k.runningWorkers.indexOf(a),1),a.pthread_ptr=0,wu(c)},receiveObjectTransfer:function(a){},threadInitTLS:function(){k.tlsInitFunctions.forEach(a=>a())},loadWasmModuleToWorker:a=>new Promise(c=>{a.onmessage=g=>{var m=g.data,w=m.cmd;if(a.pthread_ptr&&(k.currentProxiedOperationCallerThread=a.pthread_ptr),m.targetThread&&m.targetThread!=Xn()){var B=k.pthreads[m.targetThread];B?B.postMessage(m,m.transferList):E('Internal error! Worker sent a message "'+w+'" to target pthread '+m.targetThread+", but that thread no longer exists!"),k.currentProxiedOperationCallerThread=void 0;return}w==="checkMailbox"?Bs():w==="spawnThread"?_c(m):w==="cleanupThread"?hc(m.thread):w==="killThread"?lh(m.thread):w==="cancelThread"?ch(m.thread):w==="loaded"?(a.loaded=!0,pt&&!a.pthread_ptr&&a.unref(),c(a)):w==="print"?Ai("Thread "+m.threadId+": "+m.text):w==="printErr"?E("Thread "+m.threadId+": "+m.text):w==="alert"?alert("Thread "+m.threadId+": "+m.text):m.target==="setimmediate"?a.postMessage(m):w==="callHandler"?u[m.handler](...m.args):w&&E("worker sent an unknown command "+w),k.currentProxiedOperationCallerThread=void 0},a.onerror=g=>{var m="worker sent an error!";throw a.pthread_ptr&&(m="Pthread "+In(a.pthread_ptr)+" sent an error!"),E(m+" "+g.filename+":"+g.lineno+": "+g.message),g},pt&&(a.on("message",function(g){a.onmessage({data:g})}),a.on("error",function(g){a.onerror(g)})),F(Pt instanceof WebAssembly.Memory,"WebAssembly memory should have been loaded by now!"),F(ya instanceof WebAssembly.Module,"WebAssembly Module should have been loaded by now!");var f=[],p=["onExit","onAbort","print","printErr"];for(var b of p)u.hasOwnProperty(b)&&f.push(b);a.workerID=k.nextWorkerID++,a.postMessage({cmd:"load",handlers:f,urlOrBlob:u.mainScriptUrlOrBlob,wasmMemory:Pt,wasmModule:ya,workerID:a.workerID})}),loadWasmModuleToAllWorkers:function(a){if(D)return a();Promise.all(k.unusedWorkers.map(k.loadWasmModuleToWorker)).then(a)},allocateUnusedWorker:function(){var a;if(!u.locateFile)a=new Worker(new URL("duckdb_wasm.worker.js",Ss.url));else{var c=Ti("duckdb_wasm.worker.js");a=new Worker(c)}k.unusedWorkers.push(a)},getNewWorker:function(){return k.unusedWorkers.length==0&&(pt||E("Tried to spawn a new thread, but the thread pool is exhausted.\nThis might result in a deadlock unless some threads eventually exit or the code explicitly breaks out to the event loop.\nIf you want to increase the pool size, use setting `-sPTHREAD_POOL_SIZE=...`.\nIf you want to throw an explicit error instead of the risk of deadlocking in those cases, use setting `-sPTHREAD_POOL_SIZE_STRICT=2`."),k.allocateUnusedWorker(),k.loadWasmModuleToWorker(k.unusedWorkers[0])),k.unusedWorkers.pop()}};u.PThread=k;function As(a){for(;a.length>0;)a.shift()(u)}function wc(){return u.asm.__cpp_exception}function Ta(a){var c=a.getArg(wc(),0);return h_(c)}function Mb(a){var c=Ta(a);d_(c)}function uh(){var a=Xn(),c=o()[a+52>>>2],f=o()[a+56>>>2],p=c-f;F(c!=0),F(p!=0),F(c>p,"stackHigh must be higher then stackLow"),Au(c,p),Ms(c),Ql()}u.establishStackSpace=uh;function vc(a){if(D)return ot(2,0,a);Sa(a)}function Sc(a){var c=Na(),f=a();return Ms(c),f}function dh(a){return Sc(function(){var c=Kn(4),f=Kn(4);p_(a,c,f);var p=l()[c>>>2],b=l()[f>>>2],g=Ue(p);Su(p);var m;return b&&(m=Ue(b),Su(b)),[g,m]})}function Ic(a){var c=Ta(a);return dh(c)}u.getExceptionMessage=Ic;function Ob(a,c="i8"){switch(c.endsWith("*")&&(c="*"),c){case"i1":return e()[a>>>0];case"i8":return e()[a>>>0];case"i16":return i()[a>>>1];case"i32":return o()[a>>>2];case"i64":T("to do getValue(i64) use WASM_BIGINT");case"float":return d()[a>>>2];case"double":return h()[a>>>3];case"*":return l()[a>>>2];default:T(`invalid type for getValue: ${c}`)}}function Rb(a){var c=Ta(a);f_(c)}var Fs=[];function fh(a){var c=Fs[a];return c||(a>=Fs.length&&(Fs.length=a+1),Fs[a]=c=Is.get(a)),F(Is.get(a)==c,"JavaScript-side Wasm function table mirror is out of date!"),c}function hh(a,c){var f=fh(a)(c);Yn(),Di()?k.setExitStatus(f):vu(f)}u.invokeEntryPoint=hh;function ph(a){k.tlsInitFunctions.push(a)}function Cb(a,c,f="i8"){switch(f.endsWith("*")&&(f="*"),f){case"i1":e()[a>>>0]=c;break;case"i8":e()[a>>>0]=c;break;case"i16":i()[a>>>1]=c;break;case"i32":o()[a>>>2]=c;break;case"i64":T("to do setValue(i64) use WASM_BIGINT");case"float":d()[a>>>2]=c;break;case"double":h()[a>>>3]=c;break;case"*":l()[a>>>2]=c;break;default:T(`invalid type for setValue: ${f}`)}}function Ke(a){Ke.shown||(Ke.shown={}),Ke.shown[a]||(Ke.shown[a]=1,pt&&(a="warning: "+a),E(a))}function _h(){E("missing function: XML_GetBuffer"),T(-1)}function mh(){E("missing function: XML_GetErrorCode"),T(-1)}function yh(){E("missing function: XML_Parse"),T(-1)}function bh(){E("missing function: XML_ParseBuffer"),T(-1)}function gh(){E("missing function: XML_ParserCreate"),T(-1)}function wh(){E("missing function: XML_ParserFree"),T(-1)}function vh(){E("missing function: XML_ResumeParser"),T(-1)}function Sh(){E("missing function: XML_SetCharacterDataHandler"),T(-1)}function Ih(){E("missing function: XML_SetElementHandler"),T(-1)}function Th(){E("missing function: XML_SetUserData"),T(-1)}function Ah(){E("missing function: XML_StopParser"),T(-1)}function Fh(a,c,f,p){T(`Assertion failed: ${Ue(a)}, at: `+[c?Ue(c):"unknown filename",f,p?Ue(p):"unknown function"])}var Tc="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function Eh(a,c,f){T(Tc)}function xh(a){s_(a,!xt,1,!gt,65536),k.threadInitTLS()}function Dh(a){D?postMessage({cmd:"cleanupThread",thread:a}):hc(a)}function Ac(a,c,f,p){return D?ot(3,1,a,c,f,p):Fc(a,c,f,p)}function Fc(a,c,f,p){if(typeof SharedArrayBuffer>"u")return E("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var b=[],g=0;if(D&&(b.length===0||g))return Ac(a,c,f,p);if(g)return g;var m={startRoutine:f,pthread_ptr:a,arg:p,transferList:b};return D?(m.cmd="spawnThread",postMessage(m,b),0):_c(m)}function Ec(a,c,f,p,b){if(D)return ot(4,1,a,c,f,p,b);F(a<=64,"nfds must be less than or equal to 64"),F(!p,"exceptfds not supported");for(var g=0,m=c?o()[c>>>2]:0,w=c?o()[c+4>>>2]:0,B=f?o()[f>>>2]:0,R=f?o()[f+4>>>2]:0,Z=p?o()[p>>>2]:0,Dt=p?o()[p+4>>>2]:0,ct=0,je=0,wt=0,Ct=0,sn=0,Lr=0,I=(c?o()[c>>>2]:0)|(f?o()[f>>>2]:0)|(p?o()[p>>>2]:0),C=(c?o()[c+4>>>2]:0)|(f?o()[f+4>>>2]:0)|(p?o()[p+4>>>2]:0),Yt=function(w_,v_,S_,Du){return w_<32?v_&Du:S_&Du},_t=0;_t<a;_t++){var $t=1<<_t%32;if(!!Yt(_t,I,C,$t)){var oe=nn.getStreamFromFD(_t),Tn=nn.DEFAULT_POLLMASK;oe.stream_ops.poll&&(Tn=oe.stream_ops.poll(oe)),Tn&1&&Yt(_t,m,w,$t)&&(_t<32?ct=ct|$t:je=je|$t,g++),Tn&4&&Yt(_t,B,R,$t)&&(_t<32?wt=wt|$t:Ct=Ct|$t,g++),Tn&2&&Yt(_t,Z,Dt,$t)&&(_t<32?sn=sn|$t:Lr=Lr|$t,g++)}}return c&&(o()[c>>>2]=ct,o()[c+4>>>2]=je),f&&(o()[f>>>2]=wt,o()[f+4>>>2]=Ct),p&&(o()[p>>>2]=sn,o()[p+4>>>2]=Lr),g}function Bh(){E("missing function: $SOCKFS"),T(-1)}function xc(){E("missing function: $FS"),T(-1)}function Mi(a){var c=Bh.getSocket(a);if(!c)throw new xc.ErrnoError(8);return c}function Lb(a){return o()[i_()>>>2]=a,a}var kb={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};function Aa(a){return(a&255)+"."+(a>>8&255)+"."+(a>>16&255)+"."+(a>>24&255)}function Dc(a){var c="",f=0,p=0,b=0,g=0,m=0,w=0,B=[a[0]&65535,a[0]>>16,a[1]&65535,a[1]>>16,a[2]&65535,a[2]>>16,a[3]&65535,a[3]>>16],R=!0,Z="";for(w=0;w<5;w++)if(B[w]!==0){R=!1;break}if(R){if(Z=Aa(B[6]|B[7]<<16),B[5]===-1)return c="::ffff:",c+=Z,c;if(B[5]===0)return c="::",Z==="0.0.0.0"&&(Z=""),Z==="0.0.0.1"&&(Z="1"),c+=Z,c}for(f=0;f<8;f++)B[f]===0&&(f-b>1&&(m=0),b=f,m++),m>p&&(p=m,g=f-p+1);for(f=0;f<8;f++){if(p>1&&B[f]===0&&f>=g&&f<g+p){f===g&&(c+=":",g===0&&(c+=":"));continue}c+=Number(gu(B[f]&65535)).toString(16),c+=f<7?":":""}return c}function Bc(a,c){var f=i()[a>>>1],p=gu(s()[a+2>>>1]),b;switch(f){case 2:if(c!==16)return{errno:28};b=o()[a+4>>>2],b=Aa(b);break;case 10:if(c!==28)return{errno:28};b=[o()[a+8>>>2],o()[a+12>>>2],o()[a+16>>>2],o()[a+20>>>2]],b=Dc(b);break;default:return{errno:5}}return{family:f,addr:b,port:p}}function Es(a){for(var c=a.split("."),f=0;f<4;f++){var p=Number(c[f]);if(isNaN(p))return null;c[f]=p}return(c[0]|c[1]<<8|c[2]<<16|c[3]<<24)>>>0}function xs(a){return parseInt(a)}function Fa(a){var c,f,p,b,g,m=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,w=[];if(!m.test(a))return null;if(a==="::")return[0,0,0,0,0,0,0,0];for(a.startsWith("::")?a=a.replace("::","Z:"):a=a.replace("::",":Z:"),a.indexOf(".")>0?(a=a.replace(new RegExp("[.]","g"),":"),c=a.split(":"),c[c.length-4]=xs(c[c.length-4])+xs(c[c.length-3])*256,c[c.length-3]=xs(c[c.length-2])+xs(c[c.length-1])*256,c=c.slice(0,c.length-2)):c=a.split(":"),p=0,b=0,f=0;f<c.length;f++)if(typeof c[f]=="string")if(c[f]==="Z"){for(b=0;b<8-c.length+1;b++)w[f+b]=0;p=b-1}else w[f+p]=La(parseInt(c[f],16));else w[f+p]=c[f];return[w[1]<<16|w[0],w[3]<<16|w[2],w[5]<<16|w[4],w[7]<<16|w[6]]}var Ne={address_map:{id:1,addrs:{},names:{}},lookup_name:function(a){var c=Es(a);if(c!==null||(c=Fa(a),c!==null))return a;var f;if(Ne.address_map.addrs[a])f=Ne.address_map.addrs[a];else{var p=Ne.address_map.id++;F(p<65535,"exceeded max address mappings of 65535"),f="172.29."+(p&255)+"."+(p&65280),Ne.address_map.names[f]=a,Ne.address_map.addrs[a]=f}return f},lookup_addr:function(a){return Ne.address_map.names[a]?Ne.address_map.names[a]:null}};function Mc(a,c,f){if(f&&a===0)return null;var p=Bc(a,c);if(p.errno)throw new xc.ErrnoError(p.errno);return p.addr=Ne.lookup_addr(p.addr)||p.addr,p}function Oc(a,c,f,p,b,g){if(D)return ot(5,1,a,c,f,p,b,g);var m=Mi(a),w=Mc(c,f);return m.sock_ops.bind(m,w.addr,w.port),0}function Rc(a,c,f,p,b,g){if(D)return ot(6,1,a,c,f,p,b,g);var m=Mi(a),w=Mc(c,f);return m.sock_ops.connect(m,w.addr,w.port),0}function Cc(a,c,f,p){if(D)return ot(7,1,a,c,f,p);T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Lc(a,c,f){return D?ot(8,1,a,c,f):(nn.varargs=f,0)}function kc(a,c){if(D)return ot(9,1,a,c);T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Ub(a,c){return F(a==a>>>0||a==(a|0)),F(c===(c|0)),c+2097152>>>0<4194305-!!a?(a>>>0)+c*4294967296:NaN}function Uc(a,c,f){if(D)return ot(10,1,a,c,f);T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Nc(a,c,f,p){if(f>>>=0,F(typeof a=="string"),!(p>0))return 0;for(var b=f,g=f+p-1,m=0;m<a.length;++m){var w=a.charCodeAt(m);if(w>=55296&&w<=57343){var B=a.charCodeAt(++m);w=65536+((w&1023)<<10)|B&1023}if(w<=127){if(f>=g)break;c[f++>>>0]=w}else if(w<=2047){if(f+1>=g)break;c[f++>>>0]=192|w>>6,c[f++>>>0]=128|w&63}else if(w<=65535){if(f+2>=g)break;c[f++>>>0]=224|w>>12,c[f++>>>0]=128|w>>6&63,c[f++>>>0]=128|w&63}else{if(f+3>=g)break;w>1114111&&Ke("Invalid Unicode code point "+In(w)+" encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF)."),c[f++>>>0]=240|w>>18,c[f++>>>0]=128|w>>12&63,c[f++>>>0]=128|w>>6&63,c[f++>>>0]=128|w&63}}return c[f>>>0]=0,f-b}function Ds(a,c,f){return F(typeof f=="number","stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),Nc(a,n(),c,f)}function jc(a,c,f){if(D)return ot(11,1,a,c,f);T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Ea(a,c,f,p,b){switch(c){case 2:f=Es(f),pc(a,16),b&&(o()[b>>>2]=16),i()[a>>>1]=c,o()[a+4>>>2]=f,i()[a+2>>>1]=La(p);break;case 10:f=Fa(f),pc(a,28),b&&(o()[b>>>2]=28),o()[a>>>2]=c,o()[a+8>>>2]=f[0],o()[a+12>>>2]=f[1],o()[a+16>>>2]=f[2],o()[a+20>>>2]=f[3],i()[a+2>>>1]=La(p);break;default:return 5}return 0}function Pc(a,c,f,p,b,g){if(D)return ot(12,1,a,c,f,p,b,g);var m=Mi(a);if(!m.daddr)return-53;var w=Ea(c,m.family,Ne.lookup_name(m.daddr),m.dport,f);return F(!w),0}function Hc(a,c,f,p,b,g){if(D)return ot(13,1,a,c,f,p,b,g);var m=Mi(a);return c===1&&f===4?(o()[p>>>2]=m.error,o()[b>>>2]=4,m.error=null,0):-50}function Vc(a,c,f){return D?ot(14,1,a,c,f):(nn.varargs=f,0)}function zc(a,c){if(D)return ot(15,1,a,c);T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Wc(a,c,f){if(D)return ot(16,1,a,c,f);T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Yc(a,c,f,p){if(D)return ot(17,1,a,c,f,p);T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Gc(a,c,f,p){if(D)return ot(18,1,a,c,f,p);nn.varargs=p,T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function $c(a,c,f,p,b,g){if(D)return ot(19,1,a,c,f,p,b,g);var m=Mi(a),w=m.sock_ops.recvmsg(m,f);if(!w)return 0;if(b){var B=Ea(b,m.family,Ne.lookup_name(w.addr),w.port,g);F(!B)}return n().set(w.buffer,c>>>0),w.buffer.byteLength}function Xc(a,c,f,p){if(D)return ot(20,1,a,c,f,p);T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Kc(a){if(D)return ot(21,1,a);T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Jc(a,c,f,p,b,g){if(D)return ot(22,1,a,c,f,p,b,g);T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function qc(a,c,f){if(D)return ot(23,1,a,c,f);T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Zc(a,c){if(D)return ot(24,1,a,c);T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Qc(a,c,f){if(D)return ot(25,1,a,c,f);T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Mh(a){var c=new WebAssembly.Exception(wc(),[a],{traceStack:!0});if(c.message=Ic(c),c.stack){var f=c.stack.split(`
`);f.splice(1,1),c.stack=f.join(`
`)}throw c}var Oh=!0;function Rh(){return Oh}function Ch(){if(!Di())try{D?vu(vn):Sa(vn)}catch(a){Ia(a)}}function Lh(a){if(Wn){E("user callback triggered after runtime exited or application aborted.  Ignoring.");return}try{a(),Ch()}catch(c){Ia(c)}}function xa(a){if(typeof Atomics.waitAsync=="function"){var c=Atomics.waitAsync(o(),a>>2,a);F(c.async),c.value.then(Bs);var f=a+128;Atomics.store(o(),f>>2,1)}}u.__emscripten_thread_mailbox_await=xa;function Bs(){var a=Xn();a&&(xa(a),Lh(()=>l_()))}u.checkMailbox=Bs;function kh(a,c,f){if(a==c)setTimeout(()=>Bs());else if(D)postMessage({targetThread:a,cmd:"checkMailbox"});else{var p=k.pthreads[a];if(!p){E("Cannot send message to thread with ID "+a+", unknown thread ID!");return}p.postMessage({cmd:"checkMailbox"})}}function Uh(a,c,f){return E("emscripten_set_offscreencanvas_size: Build with -sOFFSCREENCANVAS_SUPPORT=1 to enable transferring canvases to pthreads."),-1}function Nh(a){pt&&k.pthreads[a].ref()}function jh(a){return l()[a>>>2]+o()[a+4>>>2]*4294967296}function Oi(a){return a%4===0&&(a%100!==0||a%400===0)}var Ph=[0,31,60,91,121,152,182,213,244,274,305,335],Hh=[0,31,59,90,120,151,181,212,243,273,304,334];function Vh(a){var c=Oi(a.getFullYear()),f=c?Ph:Hh,p=f[a.getMonth()]+a.getDate()-1;return p}function zh(a,c){var f=new Date(jh(a)*1e3);o()[c>>>2]=f.getSeconds(),o()[c+4>>>2]=f.getMinutes(),o()[c+8>>>2]=f.getHours(),o()[c+12>>>2]=f.getDate(),o()[c+16>>>2]=f.getMonth(),o()[c+20>>>2]=f.getFullYear()-1900,o()[c+24>>>2]=f.getDay();var p=Vh(f)|0;o()[c+28>>>2]=p,o()[c+36>>>2]=-(f.getTimezoneOffset()*60);var b=new Date(f.getFullYear(),0,1),g=new Date(f.getFullYear(),6,1).getTimezoneOffset(),m=b.getTimezoneOffset(),w=(g!=m&&f.getTimezoneOffset()==Math.min(m,g))|0;o()[c+32>>>2]=w}function Da(a){for(var c=0,f=0;f<a.length;++f){var p=a.charCodeAt(f);p<=127?c++:p<=2047?c+=2:p>=55296&&p<=57343?(c+=4,++f):c+=3}return c}function tu(a){var c=Da(a)+1,f=ka(c);return f&&Ds(a,f,c),f}function Wh(a,c,f){var p=new Date().getFullYear(),b=new Date(p,0,1),g=new Date(p,6,1),m=b.getTimezoneOffset(),w=g.getTimezoneOffset(),B=Math.max(m,w);l()[a>>>2]=B*60,o()[c>>>2]=Number(m!=w);function R(wt){var Ct=wt.toTimeString().match(/\(([A-Za-z ]+)\)$/);return Ct?Ct[1]:"GMT"}var Z=R(b),Dt=R(g),ct=tu(Z),je=tu(Dt);w<m?(l()[f>>>2]=ct,l()[f+4>>>2]=je):(l()[f>>>2]=je,l()[f+4>>>2]=ct)}function Yh(){T("native code called abort()")}function Gh(a,c){T(Tc)}function $h(a,c){return globalThis.DUCKDB_RUNTIME.createDirectory(u,a,c)}function Xh(a,c){return globalThis.DUCKDB_RUNTIME.checkDirectory(u,a,c)}function Kh(a,c){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(u,a,c)}function Jh(a,c){return globalThis.DUCKDB_RUNTIME.removeDirectory(u,a,c)}function qh(a){return globalThis.DUCKDB_RUNTIME.closeFile(u,a)}function Zh(a,c){return globalThis.DUCKDB_RUNTIME.checkFile(u,a,c)}function Qh(a){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(u,a)}function tp(a,c,f,p){return globalThis.DUCKDB_RUNTIME.moveFile(u,a,c,f,p)}function ep(a,c){return globalThis.DUCKDB_RUNTIME.openFile(u,a,c)}function rp(a,c,f,p){return globalThis.DUCKDB_RUNTIME.readFile(u,a,c,f,p)}function np(a,c){return globalThis.DUCKDB_RUNTIME.truncateFile(u,a,c)}function ip(a,c,f,p){return globalThis.DUCKDB_RUNTIME.writeFile(u,a,c,f,p)}function sp(a){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(a)}function op(a,c){return globalThis.DUCKDB_RUNTIME.glob(u,a,c)}function ap(a){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(u,a)}function lp(a,c,f,p,b,g){return globalThis.DUCKDB_RUNTIME.callScalarUDF(u,a,c,f,p,b,g)}function cp(){pt||xt||Ke("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread")}function up(a){F(typeof a=="number"),console.error(Ue(a))}function dp(){return Date.now()}function fp(){ga+=1}function hp(){throw fp(),"unwind"}function eu(){return 4294901760}function pp(){return eu()}var ru;pt&&(global.performance=at("perf_hooks").performance),ru=()=>performance.timeOrigin+performance.now();function _p(){return pt?at("os").cpus().length:navigator.hardwareConcurrency}function ot(a,c){var f=arguments.length-2,p=arguments,b=19;if(f>b)throw"proxyToMainThread: Too many arguments "+f+" to proxied function idx="+a+", maximum supported is "+b;return Sc(()=>{for(var g=f,m=Kn(g*8),w=m>>3,B=0;B<f;B++){var R=p[2+B];h()[w+B>>>0]=R}return a_(a,g,m,c)})}var Ba=[];function mp(a,c,f){Ba.length=c;for(var p=f>>3,b=0;b<c;b++)Ba[b]=h()[p+b>>>0];var g=e_[a];return F(g.length==c,"Call args mismatch in emscripten_receive_on_main_thread_js"),g.apply(null,Ba)}function yp(a){var c=Pt.buffer,f=a-c.byteLength+65535>>>16;try{return Pt.grow(f),pr(),1}catch(p){E(`emscripten_realloc_buffer: Attempted to grow heap from ${c.byteLength} bytes to ${a} bytes, but got error: ${p}`)}}function bp(a){var c=n().length;if(a=a>>>0,a<=c)return!1;var f=eu();if(a>f)return E(`Cannot enlarge memory, asked to go up to ${a} bytes, but the limit is ${f} bytes!`),!1;for(var p=(B,R)=>B+(R-B%R)%R,b=1;b<=4;b*=2){var g=c*(1+.2/b);g=Math.min(g,a+100663296);var m=Math.min(f,p(Math.max(a,g),65536)),w=yp(m);if(w)return!0}return E(`Failed to grow the heap from ${c} bytes to ${m} bytes, not enough memory!`),!1}var Ma={};function gp(){return it||"./this.program"}function Ri(){if(!Ri.strings){var a=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",c={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:a,_:gp()};for(var f in Ma)Ma[f]===void 0?delete c[f]:c[f]=Ma[f];var p=[];for(var f in c)p.push(`${f}=${c[f]}`);Ri.strings=p}return Ri.strings}function wp(a,c){for(var f=0;f<a.length;++f)F(a.charCodeAt(f)===(a.charCodeAt(f)&255)),e()[c++>>>0]=a.charCodeAt(f);e()[c>>>0]=0}function nu(a,c){if(D)return ot(26,1,a,c);var f=0;return Ri().forEach(function(p,b){var g=c+f;l()[a+b*4>>>2]=g,wp(p,g),f+=p.length+1}),0}function iu(a,c){if(D)return ot(27,1,a,c);var f=Ri();l()[a>>>2]=f.length;var p=0;return f.forEach(function(b){p+=b.length+1}),l()[c>>>2]=p,0}function su(a){if(D)return ot(28,1,a);T("fd_close called without SYSCALLS_REQUIRE_FILESYSTEM")}function ou(a,c){if(D)return ot(29,1,a,c);var f=0,p=0,b=0;{F(a==0||a==1||a==2);var g=2;a==0?f=2:(a==1||a==2)&&(f=64),b=1}return e()[c>>>0]=g,i()[c+2>>>1]=b,$n=[f>>>0,(ke=f,+Math.abs(ke)>=1?ke>0?+Math.floor(ke/4294967296)>>>0:~~+Math.ceil((ke-+(~~ke>>>0))/4294967296)>>>0:0)],o()[c+8>>>2]=$n[0],o()[c+12>>>2]=$n[1],$n=[p>>>0,(ke=p,+Math.abs(ke)>=1?ke>0?+Math.floor(ke/4294967296)>>>0:~~+Math.ceil((ke-+(~~ke>>>0))/4294967296)>>>0:0)],o()[c+16>>>2]=$n[0],o()[c+20>>>2]=$n[1],0}function au(a,c,f,p,b,g){if(D)return ot(30,1,a,c,f,p,b,g);T("fd_pread called without SYSCALLS_REQUIRE_FILESYSTEM")}function lu(a,c,f,p,b,g){if(D)return ot(31,1,a,c,f,p,b,g);T("fd_pwrite called without SYSCALLS_REQUIRE_FILESYSTEM")}function cu(a,c,f,p){if(D)return ot(32,1,a,c,f,p);T("fd_read called without SYSCALLS_REQUIRE_FILESYSTEM")}function uu(a,c,f,p,b){return D?ot(33,1,a,c,f,p,b):70}function du(a){if(D)return ot(34,1,a);T("fd_sync called without SYSCALLS_REQUIRE_FILESYSTEM")}var Oa=[null,[],[]];function Ra(a,c){var f=Oa[a];F(f),c===0||c===10?((a===1?Ai:E)(yc(f,0)),f.length=0):f.push(c)}function vp(){o_(0),Oa[1].length&&Ra(1,10),Oa[2].length&&Ra(2,10)}function fu(a,c,f,p){if(D)return ot(35,1,a,c,f,p);for(var b=0,g=0;g<f;g++){var m=l()[c>>>2],w=l()[c+4>>>2];c+=8;for(var B=0;B<w;B++)Ra(a,n()[m+B>>>0]);b+=w}return l()[p>>>2]=b,0}function hu(a,c,f,p){if(D)return ot(36,1,a,c,f,p);var b=[],g=null,m=0,w=0,B=0,R=0,Z=0,Dt=0,ct,je;function wt(Ct,sn,Lr,I,C,Yt){var _t,$t,oe,Tn;return $t=Ct===10?28:16,C=Ct===10?Dc(C):Aa(C),_t=ka($t),Tn=Ea(_t,Ct,C,Yt),F(!Tn),oe=ka(32),o()[oe+4>>>2]=Ct,o()[oe+8>>>2]=sn,o()[oe+12>>>2]=Lr,l()[oe+24>>>2]=I,l()[oe+20>>>2]=_t,Ct===10?o()[oe+16>>>2]=28:o()[oe+16>>>2]=16,o()[oe+28>>>2]=0,oe}if(f&&(B=o()[f>>>2],R=o()[f+4>>>2],Z=o()[f+8>>>2],Dt=o()[f+12>>>2]),Z&&!Dt&&(Dt=Z===2?17:6),!Z&&Dt&&(Z=Dt===17?2:1),Dt===0&&(Dt=6),Z===0&&(Z=1),!a&&!c)return-2;if(B&-1088||f!==0&&o()[f>>>2]&2&&!a)return-1;if(B&32)return-2;if(Z!==0&&Z!==1&&Z!==2)return-7;if(R!==0&&R!==2&&R!==10)return-6;if(c&&(c=Ue(c),w=parseInt(c,10),isNaN(w)))return B&1024?-2:-8;if(!a)return R===0&&(R=2),(B&1)===0&&(R===2?m=Ca(2130706433):m=[0,0,0,1]),ct=wt(R,Z,Dt,null,m,w),l()[p>>>2]=ct,0;if(a=Ue(a),m=Es(a),m!==null)if(R===0||R===2)R=2;else if(R===10&&B&8)m=[0,0,Ca(65535),m],R=10;else return-2;else if(m=Fa(a),m!==null)if(R===0||R===10)R=10;else return-2;return m!=null?(ct=wt(R,Z,Dt,a,m,w),l()[p>>>2]=ct,0):B&4?-2:(a=Ne.lookup_name(a),m=Es(a),R===0?R=2:R===10&&(m=[0,0,Ca(65535),m]),ct=wt(R,Z,Dt,null,m,w),l()[p>>>2]=ct,0)}function Sp(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return p=>(p.set(crypto.getRandomValues(new Uint8Array(p.byteLength))),p);if(pt)try{var a=at("crypto"),c=a.randomFillSync;if(c)return p=>a.randomFillSync(p);var f=a.randomBytes;return p=>(p.set(f(p.byteLength)),p)}catch(p){}T("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };")}function pu(a){return(pu=Sp())(a)}function Ip(a,c){return pu(n().subarray(a>>>0,a+c>>>0)),0}function Tp(a,c,f,p,b,g,m){var w=Bc(a,c);if(w.errno)return-6;var B=w.port,R=w.addr,Z=!1;if(f&&p){var Dt;if(m&1||!(Dt=Ne.lookup_addr(R))){if(m&8)return-2}else R=Dt;var ct=Ds(R,f,p);ct+1>=p&&(Z=!0)}if(b&&g){B=""+B;var ct=Ds(B,b,g);ct+1>=g&&(Z=!0)}return Z?-12:0}function Ap(a,c){for(var f=0,p=0;p<=c;f+=a[p++]);return f}var _u=[31,29,31,30,31,30,31,31,30,31,30,31],mu=[31,28,31,30,31,30,31,31,30,31,30,31];function Fp(a,c){for(var f=new Date(a.getTime());c>0;){var p=Oi(f.getFullYear()),b=f.getMonth(),g=(p?_u:mu)[b];if(c>g-f.getDate())c-=g-f.getDate()+1,f.setDate(1),b<11?f.setMonth(b+1):(f.setMonth(0),f.setFullYear(f.getFullYear()+1));else return f.setDate(f.getDate()+c),f}return f}function Ep(a,c,f){var p=f>0?f:Da(a)+1,b=new Array(p),g=Nc(a,b,0,b.length);return c&&(b.length=g),b}function yu(a,c){F(a.length>=0,"writeArrayToMemory array must have a length (should be an array or typed array)"),e().set(a,c>>>0)}function xp(a,c,f,p){var b=o()[p+40>>>2],g={tm_sec:o()[p>>>2],tm_min:o()[p+4>>>2],tm_hour:o()[p+8>>>2],tm_mday:o()[p+12>>>2],tm_mon:o()[p+16>>>2],tm_year:o()[p+20>>>2],tm_wday:o()[p+24>>>2],tm_yday:o()[p+28>>>2],tm_isdst:o()[p+32>>>2],tm_gmtoff:o()[p+36>>>2],tm_zone:b?Ue(b):""},m=Ue(f),w={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var B in w)m=m.replace(new RegExp(B,"g"),w[B]);var R=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],Z=["January","February","March","April","May","June","July","August","September","October","November","December"];function Dt(I,C,Yt){for(var _t=typeof I=="number"?I.toString():I||"";_t.length<C;)_t=Yt[0]+_t;return _t}function ct(I,C){return Dt(I,C,"0")}function je(I,C){function Yt($t){return $t<0?-1:$t>0?1:0}var _t;return(_t=Yt(I.getFullYear()-C.getFullYear()))===0&&(_t=Yt(I.getMonth()-C.getMonth()))===0&&(_t=Yt(I.getDate()-C.getDate())),_t}function wt(I){switch(I.getDay()){case 0:return new Date(I.getFullYear()-1,11,29);case 1:return I;case 2:return new Date(I.getFullYear(),0,3);case 3:return new Date(I.getFullYear(),0,2);case 4:return new Date(I.getFullYear(),0,1);case 5:return new Date(I.getFullYear()-1,11,31);case 6:return new Date(I.getFullYear()-1,11,30)}}function Ct(I){var C=Fp(new Date(I.tm_year+1900,0,1),I.tm_yday),Yt=new Date(C.getFullYear(),0,4),_t=new Date(C.getFullYear()+1,0,4),$t=wt(Yt),oe=wt(_t);return je($t,C)<=0?je(oe,C)<=0?C.getFullYear()+1:C.getFullYear():C.getFullYear()-1}var sn={"%a":function(I){return R[I.tm_wday].substring(0,3)},"%A":function(I){return R[I.tm_wday]},"%b":function(I){return Z[I.tm_mon].substring(0,3)},"%B":function(I){return Z[I.tm_mon]},"%C":function(I){var C=I.tm_year+1900;return ct(C/100|0,2)},"%d":function(I){return ct(I.tm_mday,2)},"%e":function(I){return Dt(I.tm_mday,2," ")},"%g":function(I){return Ct(I).toString().substring(2)},"%G":function(I){return Ct(I)},"%H":function(I){return ct(I.tm_hour,2)},"%I":function(I){var C=I.tm_hour;return C==0?C=12:C>12&&(C-=12),ct(C,2)},"%j":function(I){return ct(I.tm_mday+Ap(Oi(I.tm_year+1900)?_u:mu,I.tm_mon-1),3)},"%m":function(I){return ct(I.tm_mon+1,2)},"%M":function(I){return ct(I.tm_min,2)},"%n":function(){return`
`},"%p":function(I){return I.tm_hour>=0&&I.tm_hour<12?"AM":"PM"},"%S":function(I){return ct(I.tm_sec,2)},"%t":function(){return"	"},"%u":function(I){return I.tm_wday||7},"%U":function(I){var C=I.tm_yday+7-I.tm_wday;return ct(Math.floor(C/7),2)},"%V":function(I){var C=Math.floor((I.tm_yday+7-(I.tm_wday+6)%7)/7);if((I.tm_wday+371-I.tm_yday-2)%7<=2&&C++,C){if(C==53){var _t=(I.tm_wday+371-I.tm_yday)%7;_t!=4&&(_t!=3||!Oi(I.tm_year))&&(C=1)}}else{C=52;var Yt=(I.tm_wday+7-I.tm_yday-1)%7;(Yt==4||Yt==5&&Oi(I.tm_year%400-1))&&C++}return ct(C,2)},"%w":function(I){return I.tm_wday},"%W":function(I){var C=I.tm_yday+7-(I.tm_wday+6)%7;return ct(Math.floor(C/7),2)},"%y":function(I){return(I.tm_year+1900).toString().substring(2)},"%Y":function(I){return I.tm_year+1900},"%z":function(I){var C=I.tm_gmtoff,Yt=C>=0;return C=Math.abs(C)/60,C=C/60*100+C%60,(Yt?"+":"-")+String("0000"+C).slice(-4)},"%Z":function(I){return I.tm_zone},"%%":function(){return"%"}};m=m.replace(/%%/g,"\0\0");for(var B in sn)m.includes(B)&&(m=m.replace(new RegExp(B,"g"),sn[B](g)));m=m.replace(/\0\0/g,"%");var Lr=Ep(m,!1);return Lr.length>c?0:(yu(Lr,a),Lr.length-1)}function Dp(a,c,f,p,b){return xp(a,c,f,p)}function Bp(){E("missing function: ucnv_close_64"),T(-1)}function Mp(){E("missing function: ucnv_convertEx_64"),T(-1)}function Op(){E("missing function: ucnv_open_64"),T(-1)}function Rp(){E("missing function: ucnv_toAlgorithmic_64"),T(-1)}function Cp(){E("missing function: ucsdet_close_64"),T(-1)}function Lp(){E("missing function: ucsdet_detect_64"),T(-1)}function kp(){E("missing function: ucsdet_getConfidence_64"),T(-1)}function Up(){E("missing function: ucsdet_getName_64"),T(-1)}function Np(){E("missing function: ucsdet_open_64"),T(-1)}function jp(){E("missing function: ucsdet_setText_64"),T(-1)}function Pp(){E("missing function: unzClose"),T(-1)}function Hp(){E("missing function: unzCloseCurrentFile"),T(-1)}function Vp(){E("missing function: unzGetCurrentFileInfo"),T(-1)}function zp(){E("missing function: unzGetCurrentFileInfo64"),T(-1)}function Wp(){E("missing function: unzGetGlobalInfo"),T(-1)}function Yp(){E("missing function: unzGoToFirstFile"),T(-1)}function Gp(){E("missing function: unzGoToNextFile"),T(-1)}function $p(){E("missing function: unzLocateFile"),T(-1)}function Xp(){E("missing function: unzOpen"),T(-1)}function Kp(){E("missing function: unzOpen2"),T(-1)}function Jp(){E("missing function: unzOpenCurrentFile"),T(-1)}function qp(){E("missing function: unzReadCurrentFile"),T(-1)}function Zp(a){var c=u["_"+a];return F(c,"Cannot call unknown function "+a+", make sure it is exported"),c}function Qp(a){var c=Da(a)+1,f=Kn(c);return Ds(a,f,c),f}function t_(a,c,f,p,b){var g={string:wt=>{var Ct=0;return wt!=null&&wt!==0&&(Ct=Qp(wt)),Ct},array:wt=>{var Ct=Kn(wt.length);return yu(wt,Ct),Ct}};function m(wt){return c==="string"?Ue(wt):c==="boolean"?Boolean(wt):wt}var w=Zp(a),B=[],R=0;if(F(c!=="array",'Return type should not be "array".'),p)for(var Z=0;Z<p.length;Z++){var Dt=g[f[Z]];Dt?(R===0&&(R=Na()),B[Z]=Dt(p[Z])):B[Z]=p[Z]}var ct=w.apply(null,B);function je(wt){return R!==0&&Ms(R),m(wt)}return ct=je(ct),ct}k.init();var e_=[null,bc,vc,Ac,Ec,Oc,Rc,Cc,Lc,kc,Uc,jc,Pc,Hc,Vc,zc,Wc,Yc,Gc,$c,Xc,Kc,Jc,qc,Zc,Qc,nu,iu,su,ou,au,lu,cu,uu,du,fu,hu];function r_(){sh("fetchSettings")}var bu={XML_GetBuffer:_h,XML_GetErrorCode:mh,XML_Parse:yh,XML_ParseBuffer:bh,XML_ParserCreate:gh,XML_ParserFree:wh,XML_ResumeParser:vh,XML_SetCharacterDataHandler:Sh,XML_SetElementHandler:Ih,XML_SetUserData:Th,XML_StopParser:Ah,__assert_fail:Fh,__dlsym:Eh,__emscripten_init_main_thread_js:xh,__emscripten_thread_cleanup:Dh,__pthread_create_js:Fc,__syscall__newselect:Ec,__syscall_bind:Oc,__syscall_connect:Rc,__syscall_faccessat:Cc,__syscall_fcntl64:Lc,__syscall_fstat64:kc,__syscall_ftruncate64:Uc,__syscall_getdents64:jc,__syscall_getpeername:Pc,__syscall_getsockopt:Hc,__syscall_ioctl:Vc,__syscall_lstat64:zc,__syscall_mkdirat:Wc,__syscall_newfstatat:Yc,__syscall_openat:Gc,__syscall_recvfrom:$c,__syscall_renameat:Xc,__syscall_rmdir:Kc,__syscall_sendto:Jc,__syscall_socket:qc,__syscall_stat64:Zc,__syscall_unlinkat:Qc,__throw_exception_with_stack_trace:Mh,_emscripten_get_now_is_monotonic:Rh,_emscripten_notify_mailbox_postmessage:kh,_emscripten_set_offscreencanvas_size:Uh,_emscripten_thread_mailbox_await:xa,_emscripten_thread_set_strongref:Nh,_localtime_js:zh,_tzset_js:Wh,abort:Yh,dlopen:Gh,duckdb_web_fs_directory_create:$h,duckdb_web_fs_directory_exists:Xh,duckdb_web_fs_directory_list_files:Kh,duckdb_web_fs_directory_remove:Jh,duckdb_web_fs_file_close:qh,duckdb_web_fs_file_exists:Zh,duckdb_web_fs_file_get_last_modified_time:Qh,duckdb_web_fs_file_move:tp,duckdb_web_fs_file_open:ep,duckdb_web_fs_file_read:rp,duckdb_web_fs_file_truncate:np,duckdb_web_fs_file_write:ip,duckdb_web_fs_get_default_data_protocol:sp,duckdb_web_fs_glob:op,duckdb_web_test_platform_feature:ap,duckdb_web_udf_scalar_call:lp,emscripten_check_blocking_allowed:cp,emscripten_console_error:up,emscripten_date_now:dp,emscripten_exit_with_live_runtime:hp,emscripten_get_heap_max:pp,emscripten_get_now:ru,emscripten_num_logical_cores:_p,emscripten_receive_on_main_thread_js:mp,emscripten_resize_heap:bp,environ_get:nu,environ_sizes_get:iu,exit:Sa,fd_close:su,fd_fdstat_get:ou,fd_pread:au,fd_pwrite:lu,fd_read:cu,fd_seek:uu,fd_sync:du,fd_write:fu,getaddrinfo:hu,getentropy:Ip,getnameinfo:Tp,memory:Pt||u.wasmMemory,strftime_l:Dp,ucnv_close_64:Bp,ucnv_convertEx_64:Mp,ucnv_open_64:Op,ucnv_toAlgorithmic_64:Rp,ucsdet_close_64:Cp,ucsdet_detect_64:Lp,ucsdet_getConfidence_64:kp,ucsdet_getName_64:Up,ucsdet_open_64:Np,ucsdet_setText_64:jp,unzClose:Pp,unzCloseCurrentFile:Hp,unzGetCurrentFileInfo:Vp,unzGetCurrentFileInfo64:zp,unzGetGlobalInfo:Wp,unzGoToFirstFile:Yp,unzGoToNextFile:Gp,unzLocateFile:$p,unzOpen:Xp,unzOpen2:Kp,unzOpenCurrentFile:Jp,unzReadCurrentFile:qp},Nb=ih(),jb=y("__wasm_call_ctors"),n_=u._main=y("main"),Pb=u._duckdb_web_fs_glob_add_path=y("duckdb_web_fs_glob_add_path"),Hb=u._duckdb_web_clear_response=y("duckdb_web_clear_response"),Vb=u._duckdb_web_fail_with=y("duckdb_web_fail_with"),zb=u._duckdb_web_reset=y("duckdb_web_reset"),Wb=u._duckdb_web_connect=y("duckdb_web_connect"),Yb=u._duckdb_web_disconnect=y("duckdb_web_disconnect"),Gb=u._duckdb_web_flush_files=y("duckdb_web_flush_files"),$b=u._duckdb_web_flush_file=y("duckdb_web_flush_file"),Xb=u._duckdb_web_open=y("duckdb_web_open"),Kb=u._duckdb_web_get_global_file_info=y("duckdb_web_get_global_file_info"),Jb=u._duckdb_web_collect_file_stats=y("duckdb_web_collect_file_stats"),qb=u._duckdb_web_export_file_stats=y("duckdb_web_export_file_stats"),Zb=u._duckdb_web_fs_drop_file=y("duckdb_web_fs_drop_file"),Qb=u._duckdb_web_fs_drop_files=y("duckdb_web_fs_drop_files"),tg=u._duckdb_web_fs_glob_file_infos=y("duckdb_web_fs_glob_file_infos"),eg=u._duckdb_web_fs_get_file_info_by_id=y("duckdb_web_fs_get_file_info_by_id"),rg=u._duckdb_web_fs_get_file_info_by_name=y("duckdb_web_fs_get_file_info_by_name"),ng=u._duckdb_web_fs_register_file_url=y("duckdb_web_fs_register_file_url"),ig=u._duckdb_web_fs_register_file_buffer=y("duckdb_web_fs_register_file_buffer"),sg=u._duckdb_web_copy_file_to_buffer=y("duckdb_web_copy_file_to_buffer"),og=u._duckdb_web_copy_file_to_path=y("duckdb_web_copy_file_to_path"),ag=u._duckdb_web_get_version=y("duckdb_web_get_version"),lg=u._duckdb_web_get_feature_flags=y("duckdb_web_get_feature_flags"),cg=u._duckdb_web_tokenize=y("duckdb_web_tokenize"),ug=u._duckdb_web_udf_scalar_create=y("duckdb_web_udf_scalar_create"),dg=u._duckdb_web_prepared_create=y("duckdb_web_prepared_create"),fg=u._duckdb_web_prepared_close=y("duckdb_web_prepared_close"),hg=u._duckdb_web_prepared_run=y("duckdb_web_prepared_run"),pg=u._duckdb_web_prepared_send=y("duckdb_web_prepared_send"),_g=u._duckdb_web_query_run=y("duckdb_web_query_run"),mg=u._duckdb_web_pending_query_start=y("duckdb_web_pending_query_start"),yg=u._duckdb_web_pending_query_poll=y("duckdb_web_pending_query_poll"),bg=u._duckdb_web_pending_query_cancel=y("duckdb_web_pending_query_cancel"),gg=u._duckdb_web_query_fetch_results=y("duckdb_web_query_fetch_results"),wg=u._duckdb_web_get_tablenames=y("duckdb_web_get_tablenames"),vg=u._duckdb_web_insert_arrow_from_ipc_stream=y("duckdb_web_insert_arrow_from_ipc_stream"),Sg=u._duckdb_web_insert_csv_from_path=y("duckdb_web_insert_csv_from_path"),Ig=u._duckdb_web_insert_json_from_path=y("duckdb_web_insert_json_from_path"),Tg=u.__emscripten_tls_init=y("_emscripten_tls_init"),Xn=u._pthread_self=function(){return(Xn=u._pthread_self=u.asm.pthread_self).apply(null,arguments)},i_=y("__errno_location"),s_=u.__emscripten_thread_init=y("_emscripten_thread_init"),Ag=u.__emscripten_thread_crashed=y("_emscripten_thread_crashed"),o_=u._fflush=y("fflush"),Ca=y("htonl"),La=y("htons"),Fg=y("emscripten_main_runtime_thread_id"),Eg=y("emscripten_main_thread_process_queued_calls"),a_=y("_emscripten_run_in_main_runtime_thread_js"),xg=y("emscripten_dispatch_to_thread_"),gu=y("ntohs"),wu=y("_emscripten_thread_free_data"),vu=u.__emscripten_thread_exit=y("_emscripten_thread_exit"),l_=u.__emscripten_check_mailbox=y("_emscripten_check_mailbox"),ka=u._malloc=y("malloc"),Su=u._free=y("free"),c_=function(){return(c_=u.asm.emscripten_stack_get_base).apply(null,arguments)},Ua=function(){return(Ua=u.asm.emscripten_stack_get_end).apply(null,arguments)},Iu=function(){return(Iu=u.asm.__trap).apply(null,arguments)},Tu=function(){return(Tu=u.asm.emscripten_stack_init).apply(null,arguments)},Au=function(){return(Au=u.asm.emscripten_stack_set_limits).apply(null,arguments)},u_=function(){return(u_=u.asm.emscripten_stack_get_free).apply(null,arguments)},Na=y("stackSave"),Ms=y("stackRestore"),Kn=y("stackAlloc"),Fu=function(){return(Fu=u.asm.emscripten_stack_get_current).apply(null,arguments)},d_=u.___cxa_decrement_exception_refcount=y("__cxa_decrement_exception_refcount"),f_=u.___cxa_increment_exception_refcount=y("__cxa_increment_exception_refcount"),h_=u.___thrown_object_from_unwind_exception=y("__thrown_object_from_unwind_exception"),p_=u.___get_exception_message=y("__get_exception_message"),Dg=u.dynCall_jiji=y("dynCall_jiji"),Bg=u.dynCall_iiiiij=y("dynCall_iiiiij"),Mg=u.dynCall_iiiiijj=y("dynCall_iiiiijj"),Og=u.dynCall_iiiiiijj=y("dynCall_iiiiiijj"),Rg=u.dynCall_viijii=y("dynCall_viijii"),Cg=u.dynCall_viijji=y("dynCall_viijji"),Lg=u.dynCall_iiiji=y("dynCall_iiiji"),kg=u.dynCall_ji=y("dynCall_ji"),Ug=u.dynCall_viij=y("dynCall_viij"),Ng=u.dynCall_vij=y("dynCall_vij"),jg=u.dynCall_vjjijij=y("dynCall_vjjijij"),Pg=u.dynCall_vijjji=y("dynCall_vijjji"),Hg=u.dynCall_vjjii=y("dynCall_vjjii"),Vg=u.dynCall_viiiiiji=y("dynCall_viiiiiji"),zg=u.dynCall_jiiiji=y("dynCall_jiiiji"),Wg=u.dynCall_jiiij=y("dynCall_jiiij"),Yg=u.dynCall_jijjij=y("dynCall_jijjij"),Gg=u.dynCall_iiij=y("dynCall_iiij"),$g=u.dynCall_vijjj=y("dynCall_vijjj"),Xg=u.dynCall_vijj=y("dynCall_vijj"),Kg=u.dynCall_viijj=y("dynCall_viijj"),Jg=u.dynCall_jiijii=y("dynCall_jiijii"),qg=u.dynCall_jijiii=y("dynCall_jijiii"),Zg=u.dynCall_viijiiiii=y("dynCall_viijiiiii"),Qg=u.dynCall_viijiiij=y("dynCall_viijiiij"),t0=u.dynCall_vijiiiji=y("dynCall_vijiiiji"),e0=u.dynCall_viiiij=y("dynCall_viiiij"),r0=u.dynCall_jiiji=y("dynCall_jiiji"),n0=u.dynCall_viiijij=y("dynCall_viiijij"),i0=u.dynCall_viijiij=y("dynCall_viijiij"),s0=u.dynCall_viiiiijj=y("dynCall_viiiiijj"),o0=u.dynCall_viiijji=y("dynCall_viiijji"),a0=u.dynCall_vijii=y("dynCall_vijii"),l0=u.dynCall_iiiiiji=y("dynCall_iiiiiji"),c0=u.dynCall_iij=y("dynCall_iij"),u0=u.dynCall_iiijj=y("dynCall_iiijj"),d0=u.dynCall_iijii=y("dynCall_iijii"),f0=u.dynCall_viji=y("dynCall_viji"),h0=u.dynCall_iiji=y("dynCall_iiji"),p0=u.dynCall_viijjj=y("dynCall_viijjj"),_0=u.dynCall_viiijj=y("dynCall_viiijj"),m0=u.dynCall_jijj=y("dynCall_jijj"),y0=u.dynCall_jiiiii=y("dynCall_jiiiii"),b0=u.dynCall_vijji=y("dynCall_vijji"),g0=u.dynCall_jiiii=y("dynCall_jiiii"),w0=u.dynCall_jii=y("dynCall_jii"),v0=u.dynCall_viijij=y("dynCall_viijij"),S0=u.dynCall_viiij=y("dynCall_viiij"),I0=u.dynCall_j=y("dynCall_j"),T0=u.dynCall_viiijiiiijj=y("dynCall_viiijiiiijj"),A0=u.dynCall_jiiiij=y("dynCall_jiiiij"),F0=u.dynCall_jj=y("dynCall_jj"),E0=u.dynCall_ij=y("dynCall_ij"),x0=u.dynCall_ijjj=y("dynCall_ijjj"),D0=u.dynCall_jjjd=y("dynCall_jjjd"),B0=u.dynCall_jjjjjjd=y("dynCall_jjjjjjd"),M0=u.dynCall_jij=y("dynCall_jij"),O0=u.dynCall_viiijiiijii=y("dynCall_viiijiiijii"),R0=u.dynCall_viijijiiii=y("dynCall_viijijiiii"),C0=u.dynCall_viiji=y("dynCall_viiji"),L0=u.dynCall_jiiiijj=y("dynCall_jiiiijj"),k0=u.dynCall_viiiji=y("dynCall_viiiji"),U0=u.dynCall_viiiiji=y("dynCall_viiiiji"),N0=u.dynCall_jijiiii=y("dynCall_jijiiii"),j0=u.dynCall_viiijiji=y("dynCall_viiijiji"),P0=u.dynCall_viijiji=y("dynCall_viijiji"),H0=u.dynCall_jiii=y("dynCall_jiii");u.keepRuntimeAlive=Di,u.wasmMemory=Pt,u.stackAlloc=Kn,u.stackSave=Na,u.stackRestore=Ms,u.ccall=t_,u.ExitStatus=Ts,u.PThread=k;var __=["getHostByName","traverseStack","getCallstack","emscriptenLog","convertPCtoSourceLocation","readEmAsmArgs","jstoi_s","listenOnce","autoResumeAudioContext","dynCallLegacy","getDynCaller","dynCall","runtimeKeepalivePop","safeSetTimeout","asmjsMangle","asyncLoad","alignMemory","mmapAlloc","HandleAllocator","getNativeTypeSize","STACK_SIZE","STACK_ALIGN","POINTER_SIZE","ASSERTIONS","writeI53ToI64","writeI53ToI64Clamped","writeI53ToI64Signaling","writeI53ToU64Clamped","writeI53ToU64Signaling","readI53FromU64","convertI32PairToI53","convertU32PairToI53","cwrap","uleb128Encode","sigToWasmTypes","generateFuncType","convertJsFunctionToWasm","getEmptyTableSlot","updateTableMap","getFunctionAddress","addFunction","removeFunction","reallyNegative","unSign","strLen","reSign","formatString","intArrayToString","AsciiToString","UTF16ToString","stringToUTF16","lengthBytesUTF16","UTF32ToString","stringToUTF32","lengthBytesUTF32","registerKeyEventCallback","maybeCStringToJsString","findEventTarget","findCanvasEventTarget","getBoundingClientRect","fillMouseEventData","registerMouseEventCallback","registerWheelEventCallback","registerUiEventCallback","registerFocusEventCallback","fillDeviceOrientationEventData","registerDeviceOrientationEventCallback","fillDeviceMotionEventData","registerDeviceMotionEventCallback","screenOrientation","fillOrientationChangeEventData","registerOrientationChangeEventCallback","fillFullscreenChangeEventData","registerFullscreenChangeEventCallback","JSEvents_requestFullscreen","JSEvents_resizeCanvasForFullscreen","registerRestoreOldStyle","hideEverythingExceptGivenElement","restoreHiddenElements","setLetterbox","softFullscreenResizeWebGLRenderTarget","doRequestFullscreen","fillPointerlockChangeEventData","registerPointerlockChangeEventCallback","registerPointerlockErrorEventCallback","requestPointerLock","fillVisibilityChangeEventData","registerVisibilityChangeEventCallback","registerTouchEventCallback","fillGamepadEventData","registerGamepadEventCallback","registerBeforeUnloadEventCallback","fillBatteryEventData","battery","registerBatteryEventCallback","setCanvasElementSizeCallingThread","setCanvasElementSizeMainThread","setCanvasElementSize","getCanvasSizeCallingThread","getCanvasSizeMainThread","getCanvasElementSize","demangle","demangleAll","jsStackTrace","stackTrace","checkWasiClock","wasiRightsToMuslOFlags","wasiOFlagsToMuslOFlags","createDyncallWrapper","setImmediateWrapped","clearImmediateWrapped","polyfillSetImmediate","getPromise","makePromise","idsToPromises","makePromiseCallback","setMainLoop","heapObjectForWebGLType","heapAccessShiftForWebGLHeap","webgl_enable_ANGLE_instanced_arrays","webgl_enable_OES_vertex_array_object","webgl_enable_WEBGL_draw_buffers","webgl_enable_WEBGL_multi_draw","emscriptenWebGLGet","computeUnpackAlignedImageSize","colorChannelsInGlTextureFormat","emscriptenWebGLGetTexPixelData","__glGenObject","emscriptenWebGLGetUniform","webglGetUniformLocation","webglPrepareUniformLocationsBeforeFirstUse","webglGetLeftBracePos","emscriptenWebGLGetVertexAttrib","__glGetActiveAttribOrUniform","writeGLArray","emscripten_webgl_destroy_context_before_on_calling_thread","registerWebGlEventCallback","runAndAbortIfError","SDL_unicode","SDL_ttfContext","SDL_audio","GLFW_Window","ALLOC_NORMAL","ALLOC_STACK","allocate","writeStringToMemory","writeAsciiToMemory"];__.forEach(ah);var m_=["run","addOnPreRun","addOnInit","addOnPreMain","addOnExit","addOnPostRun","addRunDependency","removeRunDependency","FS_createFolder","FS_createPath","FS_createDataFile","FS_createLazyFile","FS_createLink","FS_createDevice","FS_unlink","out","err","callMain","abort","getTempRet0","setTempRet0","GROWABLE_HEAP_I8","GROWABLE_HEAP_U8","GROWABLE_HEAP_I16","GROWABLE_HEAP_U16","GROWABLE_HEAP_I32","GROWABLE_HEAP_U32","GROWABLE_HEAP_F32","GROWABLE_HEAP_F64","writeStackCookie","checkStackCookie","ptrToString","zeroMemory","exitJS","getHeapMax","emscripten_realloc_buffer","ENV","MONTH_DAYS_REGULAR","MONTH_DAYS_LEAP","MONTH_DAYS_REGULAR_CUMULATIVE","MONTH_DAYS_LEAP_CUMULATIVE","isLeapYear","ydayFromDate","arraySum","addDays","ERRNO_CODES","ERRNO_MESSAGES","setErrNo","inetPton4","inetNtop4","inetPton6","inetNtop6","readSockaddr","writeSockaddr","DNS","Protocols","Sockets","initRandomFill","randomFill","timers","warnOnce","UNWIND_CACHE","readEmAsmArgsArray","jstoi_q","getExecutableName","handleException","runtimeKeepalivePush","callUserCallback","maybeExit","readI53FromI64","convertI32PairToI53Checked","getCFunc","freeTableIndexes","functionsInTableMap","setValue","getValue","PATH","PATH_FS","UTF8Decoder","UTF8ArrayToString","UTF8ToString","stringToUTF8Array","stringToUTF8","lengthBytesUTF8","intArrayFromString","stringToAscii","UTF16Decoder","stringToNewUTF8","stringToUTF8OnStack","writeArrayToMemory","JSEvents","specialHTMLTargets","currentFullscreenStrategy","restoreOldWindowedStyle","getEnvStrings","flush_NO_FILESYSTEM","dlopenMissingError","promiseMap","getExceptionMessageCommon","getCppExceptionTag","getCppExceptionThrownObjectFromWebAssemblyException","incrementExceptionRefcount","decrementExceptionRefcount","getExceptionMessage","Browser","wget","SYSCALLS","getSocketFromFD","getSocketAddress","tempFixedLengthArray","miniTempWebGLFloatBuffers","miniTempWebGLIntBuffers","GL","emscripten_webgl_power_preferences","AL","GLUT","EGL","GLEW","IDBStore","SDL","SDL_gfx","GLFW","allocateUTF8","allocateUTF8OnStack","terminateWorker","killThread","cleanupThread","registerTLSInit","cancelThread","spawnThread","exitOnMainThread","proxyToMainThread","emscripten_receive_on_main_thread_js_callArgs","invokeEntryPoint","checkMailbox","SOCKFS","FS"];m_.forEach(dc);var Os;Bi=function a(){Os||Eu(),Os||(Bi=a)};function y_(){F(rn==0,'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])'),F(ba.length==0,"cannot call main when preRun functions remain to be called");var a=n_,c=0,f=0;try{var p=a(c,f);return gc(p,!0),p}catch(b){return Ia(b)}}function b_(){F(!D),Tu(),Ql()}function Eu(){if(rn>0)return;if(D||b_(),D){v(u),nc(),startWorker(u);return}if(Jf(),rn>0)return;function a(){Os||(Os=!0,u.calledRun=!0,!Wn&&(nc(),qf(),v(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),xu&&y_(),Zf()))}u.setStatus?(u.setStatus("Running..."),setTimeout(function(){setTimeout(function(){u.setStatus("")},1),a()},1)):a(),Yn()}function g_(){var a=Ai,c=E,f=!1;Ai=E=p=>{f=!0};try{vp()}catch(p){}Ai=a,E=c,f&&(Ke("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc."),Ke("(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)"))}if(u.preInit)for(typeof u.preInit=="function"&&(u.preInit=[u.preInit]);u.preInit.length>0;)u.preInit.pop()();var xu=!0;return u.noInitialRun&&(xu=!1),Eu(),t.ready}})(),Pf=fb;var ua=class{constructor(t,e){this._bindings=t,this._conn=e}close(){this._bindings.disconnect(this._conn)}useUnsafe(t){return t(this._bindings,this._conn)}query(t){let e=this._bindings.runQuery(this._conn,t),n=Ut.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new Rt(n)}async send(t){let e=this._bindings.startPendingQuery(this._conn,t);for(;e==null;)e=await new Promise((s,o)=>{try{s(this._bindings.pollPendingQuery(this._conn))}catch(l){o(l)}});let n=new da(this._bindings,this._conn,e),i=Ut.from(n);return console.assert(i.isSync()),console.assert(i.isStream()),i}cancelSent(){return this._bindings.cancelPendingQuery(this._conn)}getTableNames(t){return this._bindings.getTableNames(this._conn,t)}prepare(t){let e=this._bindings.createPrepared(this._conn,t);return new Nl(this._bindings,this._conn,e)}createScalarFunction(t,e,n){this._bindings.createScalarFunction(this._conn,t,e,n)}insertArrowTable(t,e){let n=aa(t,"stream");this.insertArrowFromIPCStream(n,e)}insertArrowFromIPCStream(t,e){this._bindings.insertArrowFromIPCStream(this._conn,t,e)}insertCSVFromPath(t,e){this._bindings.insertCSVFromPath(this._conn,t,e)}insertJSONFromPath(t,e){this._bindings.insertJSONFromPath(this._conn,t,e)}},da=class{constructor(t,e,n){this.bindings=t;this.conn=e;this.header=n;this._first=!0,this._depleted=!1}next(){if(this._first)return this._first=!1,{done:!1,value:this.header};if(this._depleted)return{done:!0,value:null};let t=this.bindings.fetchQueryResults(this.conn);return this._depleted=t.length==0,{done:this._depleted,value:t}}[Symbol.iterator](){return this}},Nl=class{constructor(t,e,n){this.bindings=t,this.connectionId=e,this.statementId=n}close(){this.bindings.closePrepared(this.connectionId,this.statementId)}query(...t){let e=this.bindings.runPrepared(this.connectionId,this.statementId,t),n=Ut.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new Rt(n)}send(...t){let e=this.bindings.sendPrepared(this.connectionId,this.statementId,t),n=new da(this.bindings,this.connectionId,e),i=Ut.from(n);return console.assert(i.isSync()),console.assert(i.isStream()),i}};var zf=new TextEncoder,Hf=new TextDecoder("utf-8");function jl(r,t,e){let n=zf.encode(e),i=r._malloc(n.byteLength),s=r.HEAPU8.subarray(i,i+n.byteLength);s.set(n),r.HEAPF64[(t>>3)+0]=1,r.HEAPF64[(t>>3)+1]=i,r.HEAPF64[(t>>3)+2]=s.byteLength}function Hl(r){switch(r){case"UINT8":case"INT8":return 1;case"INT32":case"FLOAT":return 4;case"INT64":case"UINT64":case"DOUBLE":case"VARCHAR":return 8;default:return 0}}function Pl(r,t,e,n){let i=r.HEAPU8.subarray(t,t+n*Hl(e));switch(e){case"UINT8":return new Uint8Array(i.buffer,i.byteOffset,n);case"INT8":return new Int8Array(i.buffer,i.byteOffset,n);case"INT32":return new Int32Array(i.buffer,i.byteOffset,n);case"FLOAT":return new Float32Array(i.buffer,i.byteOffset,n);case"DOUBLE":return new Float64Array(i.buffer,i.byteOffset,n);case"VARCHAR":return new Float64Array(i.buffer,i.byteOffset,n);default:return new Array(0)}}function Vf(r,t,e){let n=r.HEAPU8.subarray(t,t+e);return new Uint8Array(n.buffer,n.byteOffset,e)}function fa(r,t,e){let n=r.HEAPU8.subarray(t,t+e*8);return new Float64Array(n.buffer,n.byteOffset,e)}function Wf(r,t,e,n,i,s,o,l){try{let d=r._udfFunctions.get(n);if(!d){jl(t,e,"Unknown UDF with id: "+n);return}let h=Hf.decode(t.HEAPU8.subarray(i,i+s)),u=JSON.parse(h),v=fa(t,o,l/8),S=st=>{var Be;let Nt=null;switch(st.validityBuffer!==void 0&&(Nt=Vf(t,v[st.validityBuffer],u.rows)),st.physicalType){case"VARCHAR":{if(st.dataBuffer===null||st.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for VARCHAR argument");if(st.lengthBuffer===null||st.lengthBuffer===void 0)throw new Error("malformed data view, expected data length buffer for VARCHAR argument");let fe=Pl(t,v[st.dataBuffer],st.physicalType,u.rows),jt=[],se=fa(t,v[st.lengthBuffer],u.rows);for(let at=0;at<u.rows;++at){if(Nt!=null&&!Nt[at]){jt.push(null);continue}let te=t.HEAPU8.subarray(fe[at],fe[at]+se[at]),en=Hf.decode(te);jt.push(en)}return at=>jt[at]}case"STRUCT":{let fe={},jt=[];for(let se=0;se<(((Be=st.children)==null?void 0:Be.length)||0);++se){let at=st.children[se],te=S(at);jt.push(en=>{fe[at.name]=te(en)})}return Nt!=null?se=>{if(!Nt[se])return null;for(let at of jt)at(se);return fe}:se=>{for(let at of jt)at(se);return fe}}default:{if(st.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for argument of type: "+st.physicalType);let fe=Pl(t,v[st.dataBuffer],st.physicalType,u.rows);return Nt!=null?jt=>Nt[jt]?fe[jt]:null:jt=>fe[jt]}}},A=[];for(let st=0;st<u.args.length;++st)A.push(S(u.args[st]));let rt=u.rows*Hl(u.ret.physicalType),it=t._malloc(rt),yt=Pl(t,it,u.ret.physicalType,u.rows),gt=t._malloc(u.rows),xt=Vf(t,gt,u.rows);if(yt.length==0||xt.length==0){jl(t,e,"Can't create physical arrays for result");return}let pt=yt;u.ret.physicalType=="VARCHAR"&&(pt=new Array(u.rows));let zn=[];for(let st=0;st<u.args.length;++st)zn.push(null);for(let st=0;st<u.rows;++st){for(let Be=0;Be<u.args.length;++Be)zn[Be]=A[Be](st);let Nt=d.func(...zn);pt[st]=Nt,xt[st]=Nt==null?0:1}let D=0;switch(u.ret.physicalType){case"VARCHAR":{let st=new Array(0);D=t._malloc(u.rows*Hl("DOUBLE"));let Nt=fa(t,D,u.rows),Be=0;for(let at=0;at<u.rows;++at){let te=zf.encode(pt[at]||"");st.push(te),Nt[at]=te.length,Be+=te.length}let fe=t._malloc(Be),jt=t.HEAPU8.subarray(fe,fe+Be),se=0;for(let at=0;at<u.rows;++at){yt[at]=se;let te=st[at];jt.subarray(se,se+te.length).set(te),se+=te.length}}}let de=3*8,Ti=t._malloc(de),tn=fa(t,Ti,3);tn[0]=it,tn[1]=gt,tn[2]=D,t.HEAPF64[(e>>3)+0]=0,t.HEAPF64[(e>>3)+1]=Ti,t.HEAPF64[(e>>3)+2]=0}catch(d){jl(t,e,d.toString())}}function pb(){let r=new TextDecoder;return t=>(typeof SharedArrayBuffer<"u"&&t.buffer instanceof SharedArrayBuffer&&(t=new Uint8Array(t)),r.decode(t))}var _b=pb();function fr(r,t){console.error(`FAIL WITH: ${t}`),r.ccall("duckdb_web_fail_with",null,["string"],[t])}function Vn(r,t,e){let n=r.HEAPU8.subarray(t,t+e),i=new Uint8Array(new ArrayBuffer(n.byteLength));return i.set(n),i}function X(r,t,e){return _b(r.HEAPU8.subarray(t,t+e))}function ht(r,t,e,n){let i=r.stackSave(),s=r.stackAlloc(3*8);e.unshift("number"),n.unshift(s),r.ccall(t,null,e,n);let o=r.HEAPF64[(s>>3)+0],l=r.HEAPF64[(s>>3)+1],d=r.HEAPF64[(s>>3)+2];return r.stackRestore(i),[o,l,d]}function Tt(r){r.ccall("duckdb_web_clear_response",null,[],[])}var ha=class{constructor(t){let e=new Float64Array(t.buffer,t.byteOffset,t.byteLength/8),n=new Uint8Array(new ArrayBuffer(t.byteLength));n.set(t.subarray(7*8)),this.totalFileReadsCold=e[0],this.totalFileReadsAhead=e[1],this.totalFileReadsCached=e[2],this.totalFileWrites=e[3],this.totalPageAccesses=e[4],this.totalPageLoads=e[5],this.blockSize=e[6],this.blockStats=n}getBlockStats(t,e){return e=e||{file_reads_cold:0,file_reads_ahead:0,file_reads_cached:0,file_writes:0,page_accesses:0,page_loads:0},e.file_writes=this.blockStats[t*3+0]&15,e.file_reads_cold=this.blockStats[t*3+0]>>4,e.file_reads_ahead=this.blockStats[t*3+1]&15,e.file_reads_cached=this.blockStats[t*3+1]>>4,e.page_accesses=this.blockStats[t*3+1]&15,e.page_loads=this.blockStats[t*3+1]>>4,e}};var mb=new TextEncoder;var pa=class{constructor(t,e){this._instance=null;this._initPromise=null;this._initPromiseResolver=()=>{};this.onInstantiationProgress=[];this._logger=t,this._runtime=e,this._nextUDFId=1}get logger(){return this._logger}get mod(){return this._instance}get pthread(){return this.mod.PThread||null}async instantiate(t=e=>{}){return this._instance!=null?this:(this._initPromise!=null&&(this.onInstantiationProgress.push(t),await this._initPromise),this._initPromise=new Promise(e=>{this._initPromiseResolver=e}),this.onInstantiationProgress=[t],this._instance=await this.instantiateImpl({print:console.log.bind(console),printErr:console.log.bind(console),onRuntimeInitialized:this._initPromiseResolver}),await this._initPromise,this._initPromise=null,this.onInstantiationProgress=this.onInstantiationProgress.filter(e=>e!=t),this)}open(t){let[e,n,i]=ht(this.mod,"duckdb_web_open",["string"],[JSON.stringify(t)]);if(e!==0)throw new Error(X(this.mod,n,i));Tt(this.mod)}reset(){let[t,e,n]=ht(this.mod,"duckdb_web_reset",[],[]);if(t!==0)throw new Error(X(this.mod,e,n));Tt(this.mod)}getVersion(){let[t,e,n]=ht(this.mod,"duckdb_web_get_version",[],[]);if(t!==0)throw new Error(X(this.mod,e,n));let i=X(this.mod,e,n);return Tt(this.mod),i}getFeatureFlags(){return this.mod.ccall("duckdb_web_get_feature_flags","number",[],[])}tokenize(t){let[e,n,i]=ht(this.mod,"duckdb_web_tokenize",["string"],[t]);if(e!==0)throw new Error(X(this.mod,n,i));let s=X(this.mod,n,i);return Tt(this.mod),JSON.parse(s)}connect(){let t=this.mod.ccall("duckdb_web_connect","number",[],[]);return new ua(this,t)}disconnect(t){if(this.mod.ccall("duckdb_web_disconnect",null,["number"],[t]),this.pthread)for(let e of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])e.postMessage({cmd:"dropUDFFunctions",connectionId:t})}runQuery(t,e){let[n,i,s]=ht(this.mod,"duckdb_web_query_run",["number","string"],[t,e]);if(n!==0)throw new Error(X(this.mod,i,s));let o=Vn(this.mod,i,s);return Tt(this.mod),o}startPendingQuery(t,e){let[n,i,s]=ht(this.mod,"duckdb_web_pending_query_start",["number","string"],[t,e]);if(n!==0)throw new Error(X(this.mod,i,s));if(i==0)return null;let o=Vn(this.mod,i,s);return Tt(this.mod),o}pollPendingQuery(t){let[e,n,i]=ht(this.mod,"duckdb_web_pending_query_poll",["number"],[t]);if(e!==0)throw new Error(X(this.mod,n,i));if(n==0)return null;let s=Vn(this.mod,n,i);return Tt(this.mod),s}cancelPendingQuery(t){return this.mod.ccall("duckdb_web_pending_query_cancel","boolean",["number"],[t])}fetchQueryResults(t){let[e,n,i]=ht(this.mod,"duckdb_web_query_fetch_results",["number"],[t]);if(e!==0)throw new Error(X(this.mod,n,i));let s=Vn(this.mod,n,i);return Tt(this.mod),s}getTableNames(t,e){let[n,i,s]=ht(this.mod,"duckdb_web_get_tablenames",["number","string"],[t,e]);if(n!==0)throw new Error(X(this.mod,i,s));let o=X(this.mod,i,s);return Tt(this.mod),JSON.parse(o)}createScalarFunction(t,e,n,i){let s={functionId:this._nextUDFId,name:e,returnType:Ii(n)},o={functionId:s.functionId,connectionId:t,name:e,returnType:n,func:i};this._nextUDFId+=1;let[l,d,h]=ht(this.mod,"duckdb_web_udf_scalar_create",["number","string"],[t,JSON.stringify(s)]);if(l!==0)throw new Error(X(this.mod,d,h));if(Tt(this.mod),globalThis.DUCKDB_RUNTIME._udfFunctions=(globalThis.DUCKDB_RUNTIME._udfFunctions||new Map).set(o.functionId,o),this.pthread)for(let u of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])u.postMessage({cmd:"registerUDFFunction",udf:o})}createPrepared(t,e){let[n,i,s]=ht(this.mod,"duckdb_web_prepared_create",["number","string"],[t,e]);if(n!==0)throw new Error(X(this.mod,i,s));return Tt(this.mod),i}closePrepared(t,e){let[n,i,s]=ht(this.mod,"duckdb_web_prepared_close",["number","number"],[t,e]);if(n!==0)throw new Error(X(this.mod,i,s));Tt(this.mod)}runPrepared(t,e,n){let[i,s,o]=ht(this.mod,"duckdb_web_prepared_run",["number","number","string"],[t,e,JSON.stringify(n)]);if(i!==0)throw new Error(X(this.mod,s,o));let l=Vn(this.mod,s,o);return Tt(this.mod),l}sendPrepared(t,e,n){let[i,s,o]=ht(this.mod,"duckdb_web_prepared_send",["number","number","string"],[t,e,JSON.stringify(n)]);if(i!==0)throw new Error(X(this.mod,s,o));let l=Vn(this.mod,s,o);return Tt(this.mod),l}insertArrowFromIPCStream(t,e,n){if(e.length==0)return;let i=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(i,i+e.length).set(e);let o=n?JSON.stringify(n):"",[l,d,h]=ht(this.mod,"duckdb_web_insert_arrow_from_ipc_stream",["number","number","number","string"],[t,i,e.length,o]);if(l!==0)throw new Error(X(this.mod,d,h))}insertCSVFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let h in n.columns)n.columnsFlat.push(la(h,n.columns[h]))}let i={...n};i.columns=i.columnsFlat,delete i.columnsFlat;let s=JSON.stringify(i),[o,l,d]=ht(this.mod,"duckdb_web_insert_csv_from_path",["number","string","string"],[t,e,s]);if(o!==0)throw new Error(X(this.mod,l,d))}insertJSONFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let h in n.columns)n.columnsFlat.push(la(h,n.columns[h]))}let i={...n};i.columns=i.columnsFlat,delete i.columnsFlat;let s=JSON.stringify(i),[o,l,d]=ht(this.mod,"duckdb_web_insert_json_from_path",["number","string","string"],[t,e,s]);if(o!==0)throw new Error(X(this.mod,l,d))}globFiles(t){let[e,n,i]=ht(this.mod,"duckdb_web_fs_glob_file_infos",["string"],[t]);if(e!==0)throw new Error(X(this.mod,n,i));let s=X(this.mod,n,i);Tt(this.mod);let o=JSON.parse(s);return o==null?[]:o}registerFileURL(t,e,n,i=!1){e===void 0&&(e=t);let[s,o,l]=ht(this.mod,"duckdb_web_fs_register_file_url",["string","string"],[t,e,n,i]);if(s!==0)throw new Error(X(this.mod,o,l));Tt(this.mod)}registerFileText(t,e){let n=mb.encode(e);this.registerFileBuffer(t,n)}registerFileBuffer(t,e){let n=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(n,n+e.length).set(e);let[s,o,l]=ht(this.mod,"duckdb_web_fs_register_file_buffer",["string","number","number"],[t,n,e.length]);if(s!==0)throw new Error(X(this.mod,o,l));Tt(this.mod)}registerFileHandle(t,e,n,i){let[s,o,l]=ht(this.mod,"duckdb_web_fs_register_file_url",["string","string","number","boolean"],[t,t,n,i]);if(s!==0)throw new Error(X(this.mod,o,l));if(Tt(this.mod),globalThis.DUCKDB_RUNTIME._files=(globalThis.DUCKDB_RUNTIME._files||new Map).set(t,e),this.pthread){for(let d of this.pthread.runningWorkers)d.postMessage({cmd:"registerFileHandle",fileName:t,fileHandle:e});for(let d of this.pthread.unusedWorkers)d.postMessage({cmd:"dropFileHandle",fileName:t})}}dropFile(t){let[e,n,i]=ht(this.mod,"duckdb_web_fs_drop_file",["string"],[t]);if(e!==0)throw new Error(X(this.mod,n,i));Tt(this.mod)}dropFiles(){let[t,e,n]=ht(this.mod,"duckdb_web_fs_drop_files",[],[]);if(t!==0)throw new Error(X(this.mod,e,n));Tt(this.mod)}flushFiles(){this.mod.ccall("duckdb_web_flush_files",null,[],[])}copyFileToPath(t,e){let[n,i,s]=ht(this.mod,"duckdb_web_copy_file_to_path",["string","string"],[t,e]);if(n!==0)throw new Error(X(this.mod,i,s));Tt(this.mod)}copyFileToBuffer(t){let[e,n,i]=ht(this.mod,"duckdb_web_copy_file_to_buffer",["string"],[t]);if(e!==0)throw new Error(X(this.mod,n,i));let s=this.mod.HEAPU8.subarray(n,n+i),o=new Uint8Array(s.length);return o.set(s),Tt(this.mod),o}collectFileStatistics(t,e){let[n,i,s]=ht(this.mod,"duckdb_web_collect_file_stats",["string","boolean"],[t,e]);if(n!==0)throw new Error(X(this.mod,i,s))}exportFileStatistics(t){let[e,n,i]=ht(this.mod,"duckdb_web_export_file_stats",["string"],[t]);if(e!==0)throw new Error(X(this.mod,n,i));return new ha(this.mod.HEAPU8.subarray(n,n+i))}};var _a=class extends pa{constructor(e,n,i,s){super(e,n);this.mainModuleURL=i,this.pthreadWorkerURL=s}locateFile(e,n){if(e.endsWith(".wasm"))return this.mainModuleURL;if(e.endsWith(".worker.js")){if(!this.pthreadWorkerURL)throw new Error("Missing DuckDB worker URL!");return this.pthreadWorkerURL}throw new Error(`WASM instantiation requested unexpected file: prefix=${n} path=${e}`)}instantiateWasm(e,n){globalThis.DUCKDB_RUNTIME=this._runtime;let i=this.onInstantiationProgress;if(WebAssembly.instantiateStreaming)if(typeof TransformStream=="function"){let o=(async()=>{var it;let l=new Request(this.mainModuleURL),d=await fetch(l),h=d.headers.get("content-length"),u=h&&parseInt(h,10)||0,v=new Date,S={startedAt:v,updatedAt:v,bytesTotal:u||0,bytesLoaded:0},A={transform(yt,gt){S.bytesLoaded+=yt.byteLength;let xt=new Date;if(xt.getTime()-S.updatedAt.getTime()<20){S.updatedAt=xt,gt.enqueue(yt);return}for(let pt of i)pt(S);gt.enqueue(yt)}},rt=new TransformStream(A);return new Response((it=d.body)==null?void 0:it.pipeThrough(rt),d)})();WebAssembly.instantiateStreaming(o,e).then(l=>{n(l.instance,l.module)})}else{console.warn("instantiating without progress handler since transform streams are unavailable");let s=new Request(this.mainModuleURL);WebAssembly.instantiateStreaming(fetch(s),e).then(o=>{n(o.instance,o.module)})}else if(typeof XMLHttpRequest=="function"){let s=new XMLHttpRequest,o=this.mainModuleURL,l=new Date,d={startedAt:l,updatedAt:l,bytesTotal:0,bytesLoaded:0};s.open("GET",o),s.responseType="arraybuffer",s.onerror=h=>{throw this.logger.log({timestamp:new Date,level:4,origin:3,topic:5,event:2,value:"Failed to load WASM: "+h}),new Error(h.toString())},s.onprogress=h=>{d.bytesTotal=h.total,d.bytesLoaded=h.loaded;let u=new Date;if(u.getTime()-d.updatedAt.getTime()<20){d.updatedAt=u;return}for(let v of i)v(d)},s.onload=()=>{WebAssembly.instantiate(s.response,e).then(h=>{n(h.instance,h.module)}).catch(h=>{throw this.logger.log({timestamp:new Date,level:4,origin:3,topic:5,event:2,value:"Failed to instantiate WASM: "+h}),new Error(h)})},s.send()}else console.warn("instantiating with manual fetch since streaming instantiation and xhrs are unavailable"),(async()=>{let o=new Request(this.mainModuleURL),d=await(await fetch(o)).arrayBuffer();WebAssembly.instantiate(d,e).then(h=>{n(h.instance,h.module)})})();return[]}};var ma=class extends _a{constructor(t,e,n,i=null){super(t,e,n,i)}instantiateImpl(t){return Pf({...t,instantiateWasm:this.instantiateWasm.bind(this),locateFile:this.locateFile.bind(this)})}};var wn=ja(Yf()),Gf=function(r,t,e){var n;if((n=r==null?void 0:r.endpoint)!=null&&n.startsWith("http")){let i=`${r==null?void 0:r.endpoint}`,s=i.indexOf("://")+3;return i.substring(s)}else return r!=null&&r.endpoint?`${e}.${r==null?void 0:r.endpoint}`:`${e}.s3.amazonaws.com`};function yb(r,t,e){var s,o,l,d;let n=$f(t),i=n.path;return Xf(r)&&(i=`/${n.bucket}${i}`),{url:i,query:"",host:Gf(r,t,n.bucket),region:(s=r==null?void 0:r.region)!=null?s:"",service:"s3",method:e,accessKeyId:(o=r==null?void 0:r.accessKeyId)!=null?o:"",secretAccessKey:(l=r==null?void 0:r.secretAccessKey)!=null?l:"",sessionToken:(d=r==null?void 0:r.sessionToken)!=null?d:"",dateNow:new Date().toISOString().replace(/-/g,"").split("T")[0],datetimeNow:new Date().toISOString().replace(/-/g,"").replace(/:/g,"").split(".")[0]+"Z"}}function bb(r,t=!1){let e="0123456789ABCDEF",n="";for(let i=0;i<r.length;i++){let s=r[i];s>="A"&&s<="Z"||s>="a"&&s<="z"||s>="0"&&s<="9"||s=="_"||s=="-"||s=="~"||s=="."?n+=s:s=="/"?t?n+="%2F":n+=s:(n+="%",n+=e[s.charCodeAt(0)>>4],n+=e[s.charCodeAt(0)&15])}return n}function gb(r,t=null){var rt;let e=(rt=t==null?void 0:t.contentHash)!=null?rt:"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",n=new Map;n.set("x-amz-date",r.datetimeNow),n.set("x-amz-content-sha256",e),r.sessionToken&&n.set("x-amz-security-token",r.sessionToken);let i="";t!=null&&t.contentType&&(i+="content-type;"),i+="host;x-amz-content-sha256;x-amz-date",r.sessionToken&&(i+=";x-amz-security-token");let s=r.method+`
`+bb(r.url)+`
`+r.query;t!=null&&t.contentType&&(s+=`
content-type:`+(t==null?void 0:t.contentType)),s+=`
host:`+r.host+`
x-amz-content-sha256:`+e+`
x-amz-date:`+r.datetimeNow,r.sessionToken&&r.sessionToken.length>0&&(s+=`
x-amz-security-token:`+r.sessionToken),s+=`

`+i+`
`+e;let o=(0,wn.sha256)(s),l=`AWS4-HMAC-SHA256
`+r.datetimeNow+`
`+r.dateNow+"/"+r.region+"/"+r.service+`/aws4_request
`+o,d="AWS4"+r.secretAccessKey,h=wn.sha256.hmac.arrayBuffer(d,r.dateNow),u=wn.sha256.hmac.arrayBuffer(h,r.region),v=wn.sha256.hmac.arrayBuffer(u,r.service),S=wn.sha256.hmac.arrayBuffer(v,"aws4_request"),A=wn.sha256.hmac(S,l);return n.set("Authorization","AWS4-HMAC-SHA256 Credential="+r.accessKeyId+"/"+r.dateNow+"/"+r.region+"/"+r.service+"/aws4_request, SignedHeaders="+i+", Signature="+A),n}var wb=function(r,t,e,n=null,i=null){let s=yb(r,t,e),o={contentType:n,contentHash:i?wn.sha256.hex(i):null};return gb(s,o)};function Or(r,t,e,n,i=null,s=null){((t==null?void 0:t.accessKeyId)||(t==null?void 0:t.sessionToken))&&(wb(t,e,n,i,s).forEach((l,d)=>{r.setRequestHeader(d,l)}),i&&r.setRequestHeader("content-type",i))}function $f(r){if(r.indexOf("s3://")!=0)throw new Error("URL needs to start with s3://");let t=r.indexOf("/",5);if(t==-1)throw new Error("URL needs to contain a '/' after the host");let e=r.substring(5,t);if(!e)throw new Error("URL needs to contain a bucket name");let n=r.substring(t);if(!n)throw new Error("URL needs to contain key");return{bucket:e,path:n}}function Xf(r){var t;return!!((t=r==null?void 0:r.endpoint)!=null&&t.startsWith("http"))}function Rr(r,t){let e=$f(t);return Xf(r)?`${r==null?void 0:r.endpoint}/${e.bucket}`+e.path:"https://"+Gf(r,t,e.bucket)+e.path}var ut={_files:new Map,_fileInfoCache:new Map,_udfFunctions:new Map,_globalFileInfo:null,getFileInfo(r,t){try{let e=ut._fileInfoCache.get(t),[n,i,s]=ht(r,"duckdb_web_fs_get_file_info_by_id",["number","number"],[t,(e==null?void 0:e.cacheEpoch)||0]);if(n!==0)return null;if(s===0)return e;let o=X(r,i,s);Tt(r);let l=JSON.parse(o);if(l==null)return null;let d={...l,blob:null};return ut._fileInfoCache.set(t,d),d}catch(e){return null}},getGlobalFileInfo(r){var t;try{let[e,n,i]=ht(r,"duckdb_web_get_global_file_info",["number"],[((t=ut._globalFileInfo)==null?void 0:t.cacheEpoch)||0]);if(e!==0)return null;if(i===0)return ut._globalFileInfo;let s=X(r,n,i);Tt(r);let o=JSON.parse(s);return o==null?null:(ut._globalFileInfo={...o,blob:null},ut._globalFileInfo)}catch(e){return null}},testPlatformFeature:(r,t)=>{switch(t){case 1:return typeof BigInt64Array<"u";default:return console.warn(`test for unknown feature: ${t}`),!1}},getDefaultDataProtocol(r){return 2},openFile:(r,t,e)=>{var n;try{ut._fileInfoCache.delete(t);let i=ut.getFileInfo(r,t);switch(i==null?void 0:i.dataProtocol){case 4:case 5:{if(e&1&&e&2)throw new Error(`Opening file ${i.fileName} failed: cannot open file with both read and write flags set`);if(e&32)throw new Error(`Opening file ${i.fileName} failed: appending to HTTP/S3 files is not supported`);if(e&2){let l=new XMLHttpRequest;if(i.dataProtocol==5?(l.open("HEAD",Rr(i.s3Config,i.dataUrl),!1),Or(l,i.s3Config,i.dataUrl,"HEAD")):l.open("HEAD",i.dataUrl,!1),l.send(null),l.status!=200&&l.status!=404)throw new Error(`Opening file ${i.fileName} failed: Unexpected return status from server (${l.status})`);if(l.status==404&&!(e&8||e&16))throw new Error(`Opening file ${i.fileName} failed: Cannot write to non-existent file without FILE_FLAGS_FILE_CREATE or FILE_FLAGS_FILE_CREATE_NEW flag.`);let d=r._malloc(1),h=new Uint8Array;r.HEAPU8.set(h,d);let u=r._malloc(2*8);return r.HEAPF64[(u>>3)+0]=1,r.HEAPF64[(u>>3)+1]=d,u}else if(e!=1)throw new Error(`Opening file ${i.fileName} failed: unsupported file flags: ${e}`);let s=null,o=null;try{let l=new XMLHttpRequest;if(i.dataProtocol==5?(l.open("HEAD",Rr(i.s3Config,i.dataUrl),!1),Or(l,i.s3Config,i.dataUrl,"HEAD")):l.open("HEAD",i.dataUrl,!1),l.setRequestHeader("Range","bytes=0-"),l.send(null),s=l.getResponseHeader("Content-Length"),s!==null&&l.status==206){let d=r._malloc(16);return r.HEAPF64[(d>>3)+0]=+s,r.HEAPF64[(d>>3)+1]=0,d}}catch(l){o=l,console.warn(`HEAD request with range header failed: ${l}`)}if(i.allowFullHttpReads){if(s!==null&&+s>1){let d=new XMLHttpRequest;i.dataProtocol==5?(d.open("GET",Rr(i.s3Config,i.dataUrl),!1),Or(d,i.s3Config,i.dataUrl,"GET")):d.open("GET",i.dataUrl,!1),d.setRequestHeader("Range","bytes=0-0"),d.send(null);let h=d.getResponseHeader("Content-Length");if(d.status==206&&h!==null&&+h==1){let u=r._malloc(16);return r.HEAPF64[(u>>3)+0]=+s,r.HEAPF64[(u>>3)+1]=0,u}if(d.status==200&&h!==null&&+h==+s){console.warn(`fall back to full HTTP read for: ${i.dataUrl}`);let u=r._malloc(d.response.byteLength),v=new Uint8Array(d.response,0,d.response.byteLength);r.HEAPU8.set(v,u);let S=r._malloc(2*8);return r.HEAPF64[(S>>3)+0]=d.response.byteLength,r.HEAPF64[(S>>3)+1]=u,S}}console.warn(`falling back to full HTTP read for: ${i.dataUrl}`);let l=new XMLHttpRequest;if(i.dataProtocol==5?(l.open("GET",Rr(i.s3Config,i.dataUrl),!1),Or(l,i.s3Config,i.dataUrl,"GET")):l.open("GET",i.dataUrl,!1),l.responseType="arraybuffer",l.send(null),l.status==200){let d=r._malloc(l.response.byteLength),h=new Uint8Array(l.response,0,l.response.byteLength);r.HEAPU8.set(h,d);let u=r._malloc(2*8);return r.HEAPF64[(u>>3)+0]=l.response.byteLength,r.HEAPF64[(u>>3)+1]=d,u}}if(o!=null)throw new Error(`Reading file ${i.fileName} failed with error: ${o}`);return 0}case 2:{let s=(n=ut._files)==null?void 0:n.get(i.fileName);if(s){let d=r._malloc(16);return r.HEAPF64[(d>>3)+0]=s.size,r.HEAPF64[(d>>3)+1]=0,d}console.warn(`Buffering missing file: ${i.fileName}`);let o=r._malloc(2*8),l=r._malloc(1);return r.HEAPF64[(o>>3)+0]=1,r.HEAPF64[(o>>3)+1]=l,o}}}catch(i){console.error(i.toString()),fr(r,i.toString())}return 0},glob:(r,t,e)=>{var n;try{let i=X(r,t,e);if(i.startsWith("http")||i.startsWith("s3://")){let s=new XMLHttpRequest;if(i.startsWith("s3://")){let o=ut.getGlobalFileInfo(r);s.open("HEAD",Rr(o==null?void 0:o.s3Config,i),!1),Or(s,o==null?void 0:o.s3Config,i,"HEAD")}else s.open("HEAD",i,!1);if(s.send(null),s.status!=200&&s.status!==206){if(!((n=ut.getGlobalFileInfo(r))!=null&&n.allowFullHttpReads)){fr(r,`HEAD request failed: ${i}, with full http reads are disabled`);return}let o=new XMLHttpRequest;if(i.startsWith("s3://")){let d=ut.getGlobalFileInfo(r);o.open("GET",Rr(d==null?void 0:d.s3Config,i),!1),Or(o,d==null?void 0:d.s3Config,i,"HEAD")}else o.open("GET",i,!1);if(o.setRequestHeader("Range","bytes=0-0"),o.send(null),o.status!=200&&o.status!==206){fr(r,`HEAD and GET requests failed: ${i}`);return}let l=o.getResponseHeader("Content-Length");l&&+l>1&&console.warn(`Range request for ${i} did not return a partial response: ${o.status} "${o.statusText}"`)}r.ccall("duckdb_web_fs_glob_add_path",null,["string"],[i])}}catch(i){return fr(r,i.toString()),0}},checkFile:(r,t,e)=>{try{let n=X(r,t,e);if(n.startsWith("http")||n.startsWith("s3://")){let i=new XMLHttpRequest;if(n.startsWith("s3://")){let s=ut.getGlobalFileInfo(r);i.open("HEAD",Rr(s==null?void 0:s.s3Config,n),!1),Or(i,s==null?void 0:s.s3Config,n,"HEAD")}else i.open("HEAD",n,!1);return i.send(null),i.status==206||i.status==200}}catch(n){return!1}return!1},syncFile:(r,t)=>{},closeFile:(r,t)=>{var n;let e=ut.getFileInfo(r,t);switch(ut._fileInfoCache.delete(t),e==null?void 0:e.dataProtocol){case 0:case 4:case 5:break;case 1:case 2:return;case 3:{let i=(n=ut._files)==null?void 0:n.get(e.fileName);if(!i)throw new Error(`No OPFS access handle registered with name: ${e.fileName}`);return i.flush()}}},truncateFile:(r,t,e)=>{var i;let n=ut.getFileInfo(r,t);switch(n==null?void 0:n.dataProtocol){case 4:fr(r,"Cannot truncate a http file");return;case 5:fr(r,"Cannot truncate an s3 file");return;case 0:case 1:case 2:fr(r,"truncateFile not implemented");return;case 3:{let s=(i=ut._files)==null?void 0:i.get(n.fileName);if(!s)throw new Error(`No OPFS access handle registered with name: ${n.fileName}`);return s.truncate(e)}}return 0},readFile(r,t,e,n,i){var s,o;if(n==0)return 0;try{let l=ut.getFileInfo(r,t);switch(l==null?void 0:l.dataProtocol){case 4:case 5:{if(!l.dataUrl)throw new Error(`Missing data URL for file ${t}`);try{let d=new XMLHttpRequest;if(l.dataProtocol==5?(d.open("GET",Rr(l==null?void 0:l.s3Config,l.dataUrl),!1),Or(d,l==null?void 0:l.s3Config,l.dataUrl,"GET")):d.open("GET",l.dataUrl,!1),d.responseType="arraybuffer",d.setRequestHeader("Range",`bytes=${i}-${i+n-1}`),d.send(null),d.status==206||d.status==200&&n==d.response.byteLength&&i==0){let h=new Uint8Array(d.response,0,Math.min(d.response.byteLength,n));return r.HEAPU8.set(h,e),h.byteLength}else if(d.status==200){console.warn(`Range request for ${l.dataUrl} did not return a partial response: ${d.status} "${d.statusText}"`);let h=new Uint8Array(d.response,i,Math.min(d.response.byteLength-i,n));return r.HEAPU8.set(h,e),h.byteLength}else throw new Error(`Range request for ${l.dataUrl} did returned non-success status: ${d.status} "${d.statusText}"`)}catch(d){throw new Error(`Range request for ${l.dataUrl} failed with error: ${d}"`)}}case 2:{let d=(s=ut._files)==null?void 0:s.get(l.fileName);if(!d)throw new Error(`No HTML5 file registered with name: ${l.fileName}`);let h=d.slice(i,i+n),u=new Uint8Array(new FileReaderSync().readAsArrayBuffer(h));return r.HEAPU8.set(u,e),u.byteLength}case 3:{let d=(o=ut._files)==null?void 0:o.get(l.fileName);if(!d)throw new Error(`No OPFS access handle registered with name: ${l.fileName}`);let h=r.HEAPU8.subarray(e,e+n);return d.read(h,{at:i})}}return 0}catch(l){return fr(r,l.toString()),0}},writeFile:(r,t,e,n,i)=>{var o;let s=ut.getFileInfo(r,t);switch(s==null?void 0:s.dataProtocol){case 4:return fr(r,"Cannot write to HTTP file"),0;case 5:{let l=r.HEAPU8.subarray(e,e+n),d=new XMLHttpRequest;return d.open("PUT",Rr(s==null?void 0:s.s3Config,s.dataUrl),!1),Or(d,s==null?void 0:s.s3Config,s.dataUrl,"PUT","",l),d.send(l),n}case 2:return fr(r,"cannot write using the html5 file reader api"),0;case 3:{let l=(o=ut._files)==null?void 0:o.get(s.fileName);if(!l)throw new Error(`No OPFS access handle registered with name: ${s.fileName}`);let d=r.HEAPU8.subarray(e,e+n);return l.write(d,{at:i})}}return 0},getLastFileModificationTime:(r,t)=>{var n;let e=ut.getFileInfo(r,t);switch(e==null?void 0:e.dataProtocol){case 2:{if(!((n=ut._files)==null?void 0:n.get(e.fileName)))throw Error(`No handle available for file: ${e.fileName}`);return 0}case 4:case 5:return new Date().getTime()}return 0},checkDirectory:(r,t,e)=>{let n=X(r,t,e);return console.log(`checkDirectory: ${n}`),!1},createDirectory:(r,t,e)=>{let n=X(r,t,e);console.log(`createDirectory: ${n}`)},removeDirectory:(r,t,e)=>{let n=X(r,t,e);console.log(`removeDirectory: ${n}`)},listDirectoryEntries:(r,t,e)=>{let n=X(r,t,e);return console.log(`listDirectoryEntries: ${n}`),!1},moveFile:(r,t,e,n,i)=>{var d,h;let s=X(r,t,e),o=X(r,n,i),l=(d=ut._files)==null?void 0:d.get(s);l!==void 0&&(ut._files.delete(l),ut._files.set(o,l));for(let[u,v]of((h=ut._fileInfoCache)==null?void 0:h.entries())||[])if(v.dataUrl==s){ut._fileInfoCache.delete(u);break}return!0},removeFile:(r,t,e)=>{},callScalarUDF:(r,t,e,n,i,s,o)=>{Wf(ut,r,t,e,n,i,s,o)}};var Vl=class extends ca{postMessage(t,e){globalThis.postMessage(t,e)}async instantiate(t,e,n){return await new ma(this,ut,t,e).instantiate(n)}};function Kf(){let r=new Vl;globalThis.onmessage=async t=>{await r.onMessage(t.data)}}Kf();return D_(vb);})();
/**
 * [js-sha256]{@link https://github.com/emn178/js-sha256}
 *
 * @version 0.9.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */
//# sourceMappingURL=data:application/json;base64,
