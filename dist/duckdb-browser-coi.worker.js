"use strict";var duckdb=(()=>{var sm=Object.create;var ws=Object.defineProperty;var om=Object.getOwnPropertyDescriptor;var am=Object.getOwnPropertyNames;var cm=Object.getPrototypeOf,um=Object.prototype.hasOwnProperty;var ya=(r,t)=>{if(t=Symbol[r])return t;throw Error("Symbol."+r+" is not defined")};var lm=(r=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(r,{get:(t,e)=>(typeof require<"u"?require:t)[e]}):r)(function(r){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+r+'" is not supported')});var tn=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),en=(r,t)=>{for(var e in t)ws(r,e,{get:t[e],enumerable:!0})},el=(r,t,e,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of am(t))!um.call(r,i)&&i!==e&&ws(r,i,{get:()=>t[i],enumerable:!(n=om(t,i))||n.enumerable});return r};var rl=(r,t,e)=>(e=r!=null?sm(cm(r)):{},el(t||!r||!r.__esModule?ws(e,"default",{value:r,enumerable:!0}):e,r)),dm=r=>el(ws({},"__esModule",{value:!0}),r);var fm=function(r,t){this[0]=r,this[1]=t};var rn=r=>{var t=r[ya("asyncIterator")],e=!1,n,i={};return t==null?(t=r[ya("iterator")](),n=s=>i[s]=o=>t[s](o)):(t=t.call(r),n=s=>i[s]=o=>{if(e){if(e=!1,s==="throw")throw o;return o}return e=!0,{done:!1,value:new fm(new Promise(a=>{var l=t[s](o);if(!(l instanceof Object))throw TypeError("Object expected");a(l)}),1)}}),i[ya("iterator")]=()=>i,n("next"),"throw"in t?n("throw"):i.throw=s=>{throw s},"return"in t&&n("return"),i};var Wd=tn(()=>{});var jd=tn(()=>{});var $d=tn(()=>{});var mc=tn(()=>{});var Yd=tn(()=>{});var Xd=tn((Go,yc)=>{"use strict";var _c=(()=>{var r=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(r=r||__filename),function(t={}){function e(){return Rt.buffer!=or.buffer&&ar(),or}function n(){return Rt.buffer!=or.buffer&&ar(),Ac}function i(){return Rt.buffer!=or.buffer&&ar(),Tc}function s(){return Rt.buffer!=or.buffer&&ar(),Fc}function o(){return Rt.buffer!=or.buffer&&ar(),Bc}function a(){return Rt.buffer!=or.buffer&&ar(),xc}function l(){return Rt.buffer!=or.buffer&&ar(),Dc}var c=typeof t<"u"?t:{},m,w;c.ready=new Promise((u,d)=>{m=u,w=d});var S=Object.assign({},c),T=[],tt="./this.program",wt=(u,d)=>{throw d},xt=typeof window=="object",vt=typeof importScripts=="function",mt=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",F=c.ENVIRONMENT_IS_PTHREAD||!1,kt="";function vn(u){return c.locateFile?c.locateFile(u,kt):kt+u}var qn,Zn,Dr,et;if(mt){var Ot=Wd(),Xt=jd();vt?kt=Xt.dirname(kt)+"/":kt=__dirname+"/",qn=(d,f)=>(d=Vc(d)?new URL(d):Xt.normalize(d),Ot.readFileSync(d,f?void 0:"utf8")),Dr=d=>{var f=qn(d,!0);return f.buffer||(f=new Uint8Array(f)),f},Zn=(d,f,p,_=!0)=>{d=Vc(d)?new URL(d):Xt.normalize(d),Ot.readFile(d,_?void 0:"utf8",(b,y)=>{b?p(b):f(_?y.buffer:y)})},!c.thisProgram&&process.argv.length>1&&(tt=process.argv[1].replace(/\\/g,"/")),T=process.argv.slice(2),wt=(d,f)=>{throw process.exitCode=d,f},c.inspect=()=>"[Emscripten Module object]";let u;try{u=$d()}catch(d){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),d}global.Worker=u.Worker}else(xt||vt)&&(vt?kt=self.location.href:typeof document<"u"&&document.currentScript&&(kt=document.currentScript.src),r&&(kt=r),kt.indexOf("blob:")!==0?kt=kt.substr(0,kt.replace(/[?#].*/,"").lastIndexOf("/")+1):kt="",mt||(qn=u=>{var d=new XMLHttpRequest;return d.open("GET",u,!1),d.send(null),d.responseText},vt&&(Dr=u=>{var d=new XMLHttpRequest;return d.open("GET",u,!1),d.responseType="arraybuffer",d.send(null),new Uint8Array(d.response)}),Zn=(u,d,f)=>{var p=new XMLHttpRequest;p.open("GET",u,!0),p.responseType="arraybuffer",p.onload=()=>{if(p.status==200||p.status==0&&p.response){d(p.response);return}f()},p.onerror=f,p.send(null)}),et=u=>document.title=u);mt&&typeof performance>"u"&&(global.performance=mc().performance);var Gt=console.log.bind(console),Nt=console.error.bind(console);mt&&(Gt=(...u)=>Ot.writeSync(1,u.join(" ")+"\n"),Nt=(...u)=>Ot.writeSync(2,u.join(" ")+"\n"));var Mt=c.print||Gt,I=c.printErr||Nt;Object.assign(c,S),S=null,c.arguments&&(T=c.arguments),c.thisProgram&&(tt=c.thisProgram),c.quit&&(wt=c.quit);var Ct;c.wasmBinary&&(Ct=c.wasmBinary);var Jr=c.noExitRuntime||!0;typeof WebAssembly!="object"&&V("no native wasm support detected");var Rt,Ic,ns=!1,qr;function is(u,d){u||V(d)}var or,Ac,Tc,Fc,Bc,xc,sf,Dc;function ar(){var u=Rt.buffer;c.HEAP8=or=new Int8Array(u),c.HEAP16=Tc=new Int16Array(u),c.HEAP32=Bc=new Int32Array(u),c.HEAPU8=Ac=new Uint8Array(u),c.HEAPU16=Fc=new Uint16Array(u),c.HEAPU32=xc=new Uint32Array(u),c.HEAPF32=sf=new Float32Array(u),c.HEAPF64=Dc=new Float64Array(u)}var ss=c.INITIAL_MEMORY||16777216;if(is(ss>=65536,"INITIAL_MEMORY should be larger than STACK_SIZE, was "+ss+"! (STACK_SIZE=65536)"),F)Rt=c.wasmMemory;else if(c.wasmMemory)Rt=c.wasmMemory;else if(Rt=new WebAssembly.Memory({initial:ss/65536,maximum:65536,shared:!0}),!(Rt.buffer instanceof SharedArrayBuffer))throw I("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),mt&&I("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");ar(),ss=Rt.buffer.byteLength;var Ec,Oc=[],Mc=[],of=[],Rc=[],Uc=!1,Lc=0;function os(){return Jr||Lc>0}function af(){if(c.preRun)for(typeof c.preRun=="function"&&(c.preRun=[c.preRun]);c.preRun.length;)Nc(c.preRun.shift());as(Oc)}function kc(){Uc=!0,!F&&as(Mc)}function cf(){F||as(of)}function uf(){if(!F){if(c.postRun)for(typeof c.postRun=="function"&&(c.postRun=[c.postRun]);c.postRun.length;)df(c.postRun.shift());as(Rc)}}function Nc(u){Oc.unshift(u)}function lf(u){Mc.unshift(u)}function df(u){Rc.unshift(u)}var Zr=0,ra=null,Qn=null;function Cc(u){Zr++,c.monitorRunDependencies&&c.monitorRunDependencies(Zr)}function Pc(u){if(Zr--,c.monitorRunDependencies&&c.monitorRunDependencies(Zr),Zr==0&&(ra!==null&&(clearInterval(ra),ra=null),Qn)){var d=Qn;Qn=null,d()}}function V(u){c.onAbort&&c.onAbort(u),u="Aborted("+u+")",I(u),ns=!0,qr=1,u+=". Build with -sASSERTIONS for more info.",Uc&&Ju();var d=new WebAssembly.RuntimeError(u);throw w(d),d}var ff="data:application/octet-stream;base64,";function Hc(u){return u.startsWith(ff)}function Vc(u){return u.startsWith("file://")}var Sn;Sn="./duckdb-coi.wasm",Hc(Sn)||(Sn=vn(Sn));function zc(u){try{if(u==Sn&&Ct)return new Uint8Array(Ct);if(Dr)return Dr(u);throw"both async and sync fetching of the wasm failed"}catch(d){V(d)}}function hf(u){return!Ct&&(xt||vt)&&typeof fetch=="function"?fetch(u,{credentials:"same-origin"}).then(d=>{if(!d.ok)throw"failed to load wasm binary file at '"+u+"'";return d.arrayBuffer()}).catch(()=>zc(u)):Promise.resolve().then(()=>zc(u))}function Wc(u,d,f){return hf(u).then(p=>WebAssembly.instantiate(p,d)).then(p=>p).then(f,p=>{I("failed to asynchronously prepare wasm: "+p),V(p)})}function pf(u,d,f,p){return!u&&typeof WebAssembly.instantiateStreaming=="function"&&!Hc(d)&&!mt&&typeof fetch=="function"?fetch(d,{credentials:"same-origin"}).then(_=>{var b=WebAssembly.instantiateStreaming(_,f);return b.then(p,function(y){return I("wasm streaming compile failed: "+y),I("falling back to ArrayBuffer instantiation"),Wc(d,f,p)})}):Wc(d,f,p)}function mf(){var u={a:cp};function d(p,_){var b=p.exports;return c.asm=b,vf(c.asm.Pb),Ec=c.asm.cb,lf(c.asm.ab),Ic=_,Pc("wasm-instantiate"),b}Cc("wasm-instantiate");function f(p){d(p.instance,p.module)}if(c.instantiateWasm)try{return c.instantiateWasm(u,d)}catch(p){I("Module.instantiateWasm callback failed with error: "+p),w(p)}return pf(Ct,Sn,u,f).catch(w),{}}var _e,In;function na(u){this.name="ExitStatus",this.message="Program terminated with exit(".concat(u,")"),this.status=u}function ia(u){u.terminate(),u.onmessage=d=>{}}function _f(u){var d=k.pthreads[u];delete k.pthreads[u],ia(d),ma(u),k.runningWorkers.splice(k.runningWorkers.indexOf(d),1),d.pthread_ptr=0}function yf(u){var d=k.pthreads[u];d.postMessage({cmd:"cancel"})}function jc(u){var d=k.pthreads[u];is(d),k.returnWorkerToPool(d)}function $c(u,d){return n().fill(0,u,u+d),u}function Yc(u){var d=k.getNewWorker();if(!d)return 6;k.runningWorkers.push(d),k.pthreads[u.pthread_ptr]=d,d.pthread_ptr=u.pthread_ptr;var f={cmd:"run",start_routine:u.startRoutine,arg:u.arg,pthread_ptr:u.pthread_ptr};return mt&&d.unref(),d.postMessage(f,u.transferList),0}var Xc=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function Gc(u,d,f){d>>>=0;for(var p=d+f,_=d;u[_]&&!(_>=p);)++_;if(_-d>16&&u.buffer&&Xc)return Xc.decode(u.buffer instanceof SharedArrayBuffer?u.slice(d,_):u.subarray(d,_));for(var b="";d<_;){var y=u[d++];if(!(y&128)){b+=String.fromCharCode(y);continue}var g=u[d++]&63;if((y&224)==192){b+=String.fromCharCode((y&31)<<6|g);continue}var B=u[d++]&63;if((y&240)==224?y=(y&15)<<12|g<<6|B:y=(y&7)<<18|g<<12|B<<6|u[d++]&63,y<65536)b+=String.fromCharCode(y);else{var Z=y-65536;b+=String.fromCharCode(55296|Z>>10,56320|Z&1023)}}return b}function An(u,d){return u>>>=0,u?Gc(n(),u,d):""}var Qr={varargs:void 0,get:function(){Qr.varargs+=4;var u=o()[Qr.varargs-4>>>2];return u},getStr:function(u){var d=An(u);return d}};function Kc(u){if(F)return Q(1,1,u);qr=u,os()||(k.terminateAllThreads(),c.onExit&&c.onExit(u),ns=!0),wt(u,new na(u))}function Jc(u,d){if(qr=u,F)throw qc(u),"unwind";Kc(u)}var sa=Jc;function oa(u){if(u instanceof na||u=="unwind")return qr;wt(1,u)}var k={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],pthreads:{},init:function(){F?k.initWorker():k.initMainThread()},initMainThread:function(){for(var u=4;u--;)k.allocateUnusedWorker();Nc(()=>{Cc("loading-workers"),k.loadWasmModuleToAllWorkers(()=>Pc("loading-workers"))})},initWorker:function(){Jr=!1},setExitStatus:function(u){qr=u},terminateAllThreads__deps:["$terminateWorker"],terminateAllThreads:function(){for(var u of k.runningWorkers)ia(u);for(var u of k.unusedWorkers)ia(u);k.unusedWorkers=[],k.runningWorkers=[],k.pthreads=[]},returnWorkerToPool:function(u){var d=u.pthread_ptr;delete k.pthreads[d],k.unusedWorkers.push(u),k.runningWorkers.splice(k.runningWorkers.indexOf(u),1),u.pthread_ptr=0,ma(d)},receiveObjectTransfer:function(u){},threadInitTLS:function(){k.tlsInitFunctions.forEach(u=>u())},loadWasmModuleToWorker:u=>new Promise(d=>{u.onmessage=b=>{var y=b.data,g=y.cmd;if(u.pthread_ptr&&(k.currentProxiedOperationCallerThread=u.pthread_ptr),y.targetThread&&y.targetThread!=hs()){var B=k.pthreads[y.targetThread];B?B.postMessage(y,y.transferList):I('Internal error! Worker sent a message "'+g+'" to target pthread '+y.targetThread+", but that thread no longer exists!"),k.currentProxiedOperationCallerThread=void 0;return}g==="checkMailbox"?fs():g==="spawnThread"?Yc(y):g==="cleanupThread"?jc(y.thread):g==="killThread"?_f(y.thread):g==="cancelThread"?yf(y.thread):g==="loaded"?(u.loaded=!0,mt&&!u.pthread_ptr&&u.unref(),d(u)):g==="print"?Mt("Thread "+y.threadId+": "+y.text):g==="printErr"?I("Thread "+y.threadId+": "+y.text):g==="alert"?alert("Thread "+y.threadId+": "+y.text):y.target==="setimmediate"?u.postMessage(y):g==="callHandler"?c[y.handler](...y.args):g&&I("worker sent an unknown command "+g),k.currentProxiedOperationCallerThread=void 0},u.onerror=b=>{var y="worker sent an error!";throw I(y+" "+b.filename+":"+b.lineno+": "+b.message),b},mt&&(u.on("message",function(b){u.onmessage({data:b})}),u.on("error",function(b){u.onerror(b)}));var f=[],p=["onExit","onAbort","print","printErr"];for(var _ of p)c.hasOwnProperty(_)&&f.push(_);u.postMessage({cmd:"load",handlers:f,urlOrBlob:c.mainScriptUrlOrBlob||r,wasmMemory:Rt,wasmModule:Ic})}),loadWasmModuleToAllWorkers:function(u){if(F)return u();Promise.all(k.unusedWorkers.map(k.loadWasmModuleToWorker)).then(u)},allocateUnusedWorker:function(){var u,d=vn("duckdb_wasm.worker.js");u=new Worker(d),k.unusedWorkers.push(u)},getNewWorker:function(){return k.unusedWorkers.length==0&&(k.allocateUnusedWorker(),k.loadWasmModuleToWorker(k.unusedWorkers[0])),k.unusedWorkers.pop()}};c.PThread=k;function as(u){for(;u.length>0;)u.shift()(c)}function bf(){var u=hs(),d=o()[u+52>>>2],f=o()[u+56>>>2],p=d-f;qu(d,p),ni(d)}c.establishStackSpace=bf;function qc(u){if(F)return Q(2,0,u);sa(u)}var cs=[];function gf(u){var d=cs[u];return d||(u>=cs.length&&(cs.length=u+1),cs[u]=d=Ec.get(u)),d}function wf(u,d){var f=gf(u)(d);os()?k.setExitStatus(f):_a(f)}c.invokeEntryPoint=wf;function vf(u){k.tlsInitFunctions.push(u)}function Sf(){I("missing function: XML_GetBuffer"),V(-1)}function If(){I("missing function: XML_GetErrorCode"),V(-1)}function Af(){I("missing function: XML_Parse"),V(-1)}function Tf(){I("missing function: XML_ParseBuffer"),V(-1)}function Ff(){I("missing function: XML_ParserCreate"),V(-1)}function Bf(){I("missing function: XML_ParserFree"),V(-1)}function xf(){I("missing function: XML_ResumeParser"),V(-1)}function Df(){I("missing function: XML_SetCharacterDataHandler"),V(-1)}function Ef(){I("missing function: XML_SetElementHandler"),V(-1)}function Of(){I("missing function: XML_SetUserData"),V(-1)}function Mf(){I("missing function: XML_StopParser"),V(-1)}var Zc="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function Rf(u,d,f){V(Zc)}function Uf(u){Xu(u,!vt,1,!xt,65536),k.threadInitTLS()}function Lf(u){F?postMessage({cmd:"cleanupThread",thread:u}):jc(u)}function Qc(u,d,f,p){return F?Q(3,1,u,d,f,p):tu(u,d,f,p)}function tu(u,d,f,p){if(typeof SharedArrayBuffer>"u")return I("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var _=[],b=0;if(F&&(_.length===0||b))return Qc(u,d,f,p);if(b)return b;var y={startRoutine:f,pthread_ptr:u,arg:p,transferList:_};return F?(y.cmd="spawnThread",postMessage(y,_),0):Yc(y)}function eu(u,d,f,p,_){if(F)return Q(4,1,u,d,f,p,_);for(var b=0,y=d?o()[d>>>2]:0,g=d?o()[d+4>>>2]:0,B=f?o()[f>>>2]:0,Z=f?o()[f+4>>>2]:0,nt=p?o()[p>>>2]:0,$t=p?o()[p+4>>>2]:0,st=0,ae=0,gt=0,Pt=0,Be=0,cr=0,v=(d?o()[d>>>2]:0)|(f?o()[f>>>2]:0)|(p?o()[p>>>2]:0),O=(d?o()[d+4>>>2]:0)|(f?o()[f+4>>>2]:0)|(p?o()[p+4>>>2]:0),lt=function(rm,nm,im,tl){return rm<32?nm&tl:im&tl},ct=0;ct<u;ct++){var Kt=1<<ct%32;if(lt(ct,v,O,Kt)){var si=Qr.getStreamFromFD(ct),gs=Qr.DEFAULT_POLLMASK;si.stream_ops.poll&&(gs=si.stream_ops.poll(si)),gs&1&&lt(ct,y,g,Kt)&&(ct<32?st=st|Kt:ae=ae|Kt,b++),gs&4&&lt(ct,B,Z,Kt)&&(ct<32?gt=gt|Kt:Pt=Pt|Kt,b++),gs&2&&lt(ct,nt,$t,Kt)&&(ct<32?Be=Be|Kt:cr=cr|Kt,b++)}}return d&&(o()[d>>>2]=st,o()[d+4>>>2]=ae),f&&(o()[f>>>2]=gt,o()[f+4>>>2]=Pt),p&&(o()[p>>>2]=Be,o()[p+4>>>2]=cr),b}function kf(){I("missing function: $SOCKFS"),V(-1)}function ru(){I("missing function: $FS"),V(-1)}function ti(u){var d=kf.getSocket(u);if(!d)throw new ru.ErrnoError(8);return d}function aa(u){return(u&255)+"."+(u>>8&255)+"."+(u>>16&255)+"."+(u>>24&255)}function nu(u){var d="",f=0,p=0,_=0,b=0,y=0,g=0,B=[u[0]&65535,u[0]>>16,u[1]&65535,u[1]>>16,u[2]&65535,u[2]>>16,u[3]&65535,u[3]>>16],Z=!0,nt="";for(g=0;g<5;g++)if(B[g]!==0){Z=!1;break}if(Z){if(nt=aa(B[6]|B[7]<<16),B[5]===-1)return d="::ffff:",d+=nt,d;if(B[5]===0)return d="::",nt==="0.0.0.0"&&(nt=""),nt==="0.0.0.1"&&(nt="1"),d+=nt,d}for(f=0;f<8;f++)B[f]===0&&(f-_>1&&(y=0),_=f,y++),y>p&&(p=y,b=f-p+1);for(f=0;f<8;f++){if(p>1&&B[f]===0&&f>=b&&f<b+p){f===b&&(d+=":",b===0&&(d+=":"));continue}d+=Number(pa(B[f]&65535)).toString(16),d+=f<7?":":""}return d}function iu(u,d){var f=i()[u>>>1],p=pa(s()[u+2>>>1]),_;switch(f){case 2:if(d!==16)return{errno:28};_=o()[u+4>>>2],_=aa(_);break;case 10:if(d!==28)return{errno:28};_=[o()[u+8>>>2],o()[u+12>>>2],o()[u+16>>>2],o()[u+20>>>2]],_=nu(_);break;default:return{errno:5}}return{family:f,addr:_,port:p}}function us(u){for(var d=u.split("."),f=0;f<4;f++){var p=Number(d[f]);if(isNaN(p))return null;d[f]=p}return(d[0]|d[1]<<8|d[2]<<16|d[3]<<24)>>>0}function ls(u){return parseInt(u)}function ca(u){var d,f,p,_,b=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,y=[];if(!b.test(u))return null;if(u==="::")return[0,0,0,0,0,0,0,0];for(u.startsWith("::")?u=u.replace("::","Z:"):u=u.replace("::",":Z:"),u.indexOf(".")>0?(u=u.replace(new RegExp("[.]","g"),":"),d=u.split(":"),d[d.length-4]=ls(d[d.length-4])+ls(d[d.length-3])*256,d[d.length-3]=ls(d[d.length-2])+ls(d[d.length-1])*256,d=d.slice(0,d.length-2)):d=u.split(":"),p=0,_=0,f=0;f<d.length;f++)if(typeof d[f]=="string")if(d[f]==="Z"){for(_=0;_<8-d.length+1;_++)y[f+_]=0;p=_-1}else y[f+p]=ms(parseInt(d[f],16));else y[f+p]=d[f];return[y[1]<<16|y[0],y[3]<<16|y[2],y[5]<<16|y[4],y[7]<<16|y[6]]}var ye={address_map:{id:1,addrs:{},names:{}},lookup_name:function(u){var d=us(u);if(d!==null||(d=ca(u),d!==null))return u;var f;if(ye.address_map.addrs[u])f=ye.address_map.addrs[u];else{var p=ye.address_map.id++;is(p<65535,"exceeded max address mappings of 65535"),f="172.29."+(p&255)+"."+(p&65280),ye.address_map.names[f]=u,ye.address_map.addrs[u]=f}return f},lookup_addr:function(u){return ye.address_map.names[u]?ye.address_map.names[u]:null}};function su(u,d,f){if(f&&u===0)return null;var p=iu(u,d);if(p.errno)throw new ru.ErrnoError(p.errno);return p.addr=ye.lookup_addr(p.addr)||p.addr,p}function ou(u,d,f,p,_,b){if(F)return Q(5,1,u,d,f,p,_,b);var y=ti(u),g=su(d,f);return y.sock_ops.bind(y,g.addr,g.port),0}function au(u,d,f,p,_,b){if(F)return Q(6,1,u,d,f,p,_,b);var y=ti(u),g=su(d,f);return y.sock_ops.connect(y,g.addr,g.port),0}function cu(u,d,f,p){if(F)return Q(7,1,u,d,f,p)}function uu(u,d,f){return F?Q(8,1,u,d,f):(Qr.varargs=f,0)}function lu(u,d){if(F)return Q(9,1,u,d)}function du(u,d,f){if(F)return Q(10,1,u,d,f)}function fu(u,d,f,p){if(f>>>=0,!(p>0))return 0;for(var _=f,b=f+p-1,y=0;y<u.length;++y){var g=u.charCodeAt(y);if(g>=55296&&g<=57343){var B=u.charCodeAt(++y);g=65536+((g&1023)<<10)|B&1023}if(g<=127){if(f>=b)break;d[f++>>>0]=g}else if(g<=2047){if(f+1>=b)break;d[f++>>>0]=192|g>>6,d[f++>>>0]=128|g&63}else if(g<=65535){if(f+2>=b)break;d[f++>>>0]=224|g>>12,d[f++>>>0]=128|g>>6&63,d[f++>>>0]=128|g&63}else{if(f+3>=b)break;d[f++>>>0]=240|g>>18,d[f++>>>0]=128|g>>12&63,d[f++>>>0]=128|g>>6&63,d[f++>>>0]=128|g&63}}return d[f>>>0]=0,f-_}function ds(u,d,f){return fu(u,n(),d,f)}function hu(u,d,f){if(F)return Q(11,1,u,d,f)}function ua(u,d,f,p,_){switch(d){case 2:f=us(f),$c(u,16),_&&(o()[_>>>2]=16),i()[u>>>1]=d,o()[u+4>>>2]=f,i()[u+2>>>1]=ms(p);break;case 10:f=ca(f),$c(u,28),_&&(o()[_>>>2]=28),o()[u>>>2]=d,o()[u+8>>>2]=f[0],o()[u+12>>>2]=f[1],o()[u+16>>>2]=f[2],o()[u+20>>>2]=f[3],i()[u+2>>>1]=ms(p);break;default:return 5}return 0}function pu(u,d,f,p,_,b){if(F)return Q(12,1,u,d,f,p,_,b);var y=ti(u);if(!y.daddr)return-53;var g=ua(d,y.family,ye.lookup_name(y.daddr),y.dport,f);return 0}function mu(u,d,f,p,_,b){if(F)return Q(13,1,u,d,f,p,_,b);var y=ti(u);return d===1&&f===4?(o()[p>>>2]=y.error,o()[_>>>2]=4,y.error=null,0):-50}function _u(u,d,f){return F?Q(14,1,u,d,f):(Qr.varargs=f,0)}function yu(u,d){if(F)return Q(15,1,u,d)}function bu(u,d,f){if(F)return Q(16,1,u,d,f)}function gu(u,d,f,p){if(F)return Q(17,1,u,d,f,p)}function wu(u,d,f,p){if(F)return Q(18,1,u,d,f,p);Qr.varargs=p}function vu(u,d,f,p,_,b){if(F)return Q(19,1,u,d,f,p,_,b);var y=ti(u),g=y.sock_ops.recvmsg(y,f);if(!g)return 0;if(_)var B=ua(_,y.family,ye.lookup_name(g.addr),g.port,b);return n().set(g.buffer,d>>>0),g.buffer.byteLength}function Su(u,d,f,p){if(F)return Q(20,1,u,d,f,p)}function Iu(u){if(F)return Q(21,1,u)}function Au(u,d,f,p,_,b){if(F)return Q(22,1,u,d,f,p,_,b)}function Tu(u,d,f){if(F)return Q(23,1,u,d,f)}function Fu(u,d){if(F)return Q(24,1,u,d)}function Bu(u,d,f){if(F)return Q(25,1,u,d,f)}var Nf=!0;function Cf(){return Nf}function Pf(){if(!os())try{F?_a(qr):sa(qr)}catch(u){oa(u)}}function Hf(u){if(!ns)try{u(),Pf()}catch(d){oa(d)}}function la(u){if(typeof Atomics.waitAsync=="function"){var d=Atomics.waitAsync(o(),u>>2,u);d.value.then(fs);var f=u+128;Atomics.store(o(),f>>2,1)}}c.__emscripten_thread_mailbox_await=la;function fs(){var u=hs();u&&(la(u),Hf(()=>Ku()))}c.checkMailbox=fs;function Vf(u,d,f){if(u==d)setTimeout(()=>fs());else if(F)postMessage({targetThread:u,cmd:"checkMailbox"});else{var p=k.pthreads[u];if(!p)return;p.postMessage({cmd:"checkMailbox"})}}function zf(u,d,f){return-1}function Wf(u){mt&&k.pthreads[u].ref()}function jf(u){return a()[u>>>2]+o()[u+4>>>2]*4294967296}function ei(u){return u%4===0&&(u%100!==0||u%400===0)}var $f=[0,31,60,91,121,152,182,213,244,274,305,335],Yf=[0,31,59,90,120,151,181,212,243,273,304,334];function Xf(u){var d=ei(u.getFullYear()),f=d?$f:Yf,p=f[u.getMonth()]+u.getDate()-1;return p}function Gf(u,d){var f=new Date(jf(u)*1e3);o()[d>>>2]=f.getSeconds(),o()[d+4>>>2]=f.getMinutes(),o()[d+8>>>2]=f.getHours(),o()[d+12>>>2]=f.getDate(),o()[d+16>>>2]=f.getMonth(),o()[d+20>>>2]=f.getFullYear()-1900,o()[d+24>>>2]=f.getDay();var p=Xf(f)|0;o()[d+28>>>2]=p,o()[d+36>>>2]=-(f.getTimezoneOffset()*60);var _=new Date(f.getFullYear(),0,1),b=new Date(f.getFullYear(),6,1).getTimezoneOffset(),y=_.getTimezoneOffset(),g=(b!=y&&f.getTimezoneOffset()==Math.min(y,b))|0;o()[d+32>>>2]=g}function da(u){for(var d=0,f=0;f<u.length;++f){var p=u.charCodeAt(f);p<=127?d++:p<=2047?d+=2:p>=55296&&p<=57343?(d+=4,++f):d+=3}return d}function xu(u){var d=da(u)+1,f=_s(d);return f&&ds(u,f,d),f}function Kf(u,d,f){var p=new Date().getFullYear(),_=new Date(p,0,1),b=new Date(p,6,1),y=_.getTimezoneOffset(),g=b.getTimezoneOffset(),B=Math.max(y,g);a()[u>>>2]=B*60,o()[d>>>2]=+(y!=g);function Z(gt){var Pt=gt.toTimeString().match(/\(([A-Za-z ]+)\)$/);return Pt?Pt[1]:"GMT"}var nt=Z(_),$t=Z(b),st=xu(nt),ae=xu($t);g<y?(a()[f>>>2]=st,a()[f+4>>>2]=ae):(a()[f>>>2]=ae,a()[f+4>>>2]=st)}function Jf(){V("")}function qf(u,d){V(Zc)}function Zf(u,d){return globalThis.DUCKDB_RUNTIME.createDirectory(c,u,d)}function Qf(u,d){return globalThis.DUCKDB_RUNTIME.checkDirectory(c,u,d)}function th(u,d){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(c,u,d)}function eh(u,d){return globalThis.DUCKDB_RUNTIME.removeDirectory(c,u,d)}function rh(u){return globalThis.DUCKDB_RUNTIME.closeFile(c,u)}function nh(u,d){return globalThis.DUCKDB_RUNTIME.checkFile(c,u,d)}function ih(u){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(c,u)}function sh(u,d,f,p){return globalThis.DUCKDB_RUNTIME.moveFile(c,u,d,f,p)}function oh(u,d){return globalThis.DUCKDB_RUNTIME.openFile(c,u,d)}function ah(u,d,f,p){return globalThis.DUCKDB_RUNTIME.readFile(c,u,d,f,p)}function ch(u,d){return globalThis.DUCKDB_RUNTIME.truncateFile(c,u,d)}function uh(u,d,f,p){return globalThis.DUCKDB_RUNTIME.writeFile(c,u,d,f,p)}function lh(u){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(u)}function dh(u,d){return globalThis.DUCKDB_RUNTIME.glob(c,u,d)}function fh(u){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(c,u)}function hh(u,d,f,p,_,b){return globalThis.DUCKDB_RUNTIME.callScalarUDF(c,u,d,f,p,_,b)}function ph(){}function mh(){return Date.now()}function _h(){Lc+=1}function yh(){throw _h(),"unwind"}function Du(){return 4294901760}function bh(){return Du()}var Eu;mt&&(global.performance=mc().performance),Eu=()=>performance.timeOrigin+performance.now();function gh(){return mt?Yd().cpus().length:navigator.hardwareConcurrency}function wh(u){var d=ys(),f=u();return ni(d),f}function Q(u,d){var f=arguments.length-2,p=arguments;return wh(()=>{for(var _=f,b=ii(_*8),y=b>>3,g=0;g<f;g++){var B=p[2+g];l()[y+g>>>0]=B}return Gu(u,_,b,d)})}var fa=[];function vh(u,d,f){fa.length=d;for(var p=f>>3,_=0;_<d;_++)fa[_]=l()[p+_>>>0];var b=ap[u];return b.apply(null,fa)}function Sh(u){var d=Rt.buffer,f=u-d.byteLength+65535>>>16;try{return Rt.grow(f),ar(),1}catch(p){}}function Ih(u){var d=n().length;if(u=u>>>0,u<=d)return!1;var f=Du();if(u>f)return!1;for(var p=(B,Z)=>B+(Z-B%Z)%Z,_=1;_<=4;_*=2){var b=d*(1+.2/_);b=Math.min(b,u+100663296);var y=Math.min(f,p(Math.max(u,b),65536)),g=Sh(y);if(g)return!0}return!1}var ha={};function Ah(){return tt||"./this.program"}function ri(){if(!ri.strings){var u=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",d={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:u,_:Ah()};for(var f in ha)ha[f]===void 0?delete d[f]:d[f]=ha[f];var p=[];for(var f in d)p.push("".concat(f,"=").concat(d[f]));ri.strings=p}return ri.strings}function Th(u,d){for(var f=0;f<u.length;++f)e()[d++>>>0]=u.charCodeAt(f);e()[d>>>0]=0}function Ou(u,d){if(F)return Q(26,1,u,d);var f=0;return ri().forEach(function(p,_){var b=d+f;a()[u+_*4>>>2]=b,Th(p,b),f+=p.length+1}),0}function Mu(u,d){if(F)return Q(27,1,u,d);var f=ri();a()[u>>>2]=f.length;var p=0;return f.forEach(function(_){p+=_.length+1}),a()[d>>>2]=p,0}function Ru(u){return F?Q(28,1,u):52}function Uu(u,d){if(F)return Q(29,1,u,d);var f=0,p=0,_=0;{var b=2;u==0?f=2:(u==1||u==2)&&(f=64),_=1}return e()[d>>>0]=b,i()[d+2>>>1]=_,In=[f>>>0,(_e=f,+Math.abs(_e)>=1?_e>0?+Math.floor(_e/4294967296)>>>0:~~+Math.ceil((_e-+(~~_e>>>0))/4294967296)>>>0:0)],o()[d+8>>>2]=In[0],o()[d+12>>>2]=In[1],In=[p>>>0,(_e=p,+Math.abs(_e)>=1?_e>0?+Math.floor(_e/4294967296)>>>0:~~+Math.ceil((_e-+(~~_e>>>0))/4294967296)>>>0:0)],o()[d+16>>>2]=In[0],o()[d+20>>>2]=In[1],0}function Lu(u,d,f,p,_,b){return F?Q(30,1,u,d,f,p,_,b):52}function ku(u,d,f,p,_,b){return F?Q(31,1,u,d,f,p,_,b):52}function Nu(u,d,f,p){return F?Q(32,1,u,d,f,p):52}function Cu(u,d,f,p,_){return F?Q(33,1,u,d,f,p,_):70}function Pu(u){return F?Q(34,1,u):52}var Fh=[null,[],[]];function Bh(u,d){var f=Fh[u];d===0||d===10?((u===1?Mt:I)(Gc(f,0)),f.length=0):f.push(d)}function Hu(u,d,f,p){if(F)return Q(35,1,u,d,f,p);for(var _=0,b=0;b<f;b++){var y=a()[d>>>2],g=a()[d+4>>>2];d+=8;for(var B=0;B<g;B++)Bh(u,n()[y+B>>>0]);_+=g}return a()[p>>>2]=_,0}function Vu(u,d,f,p){if(F)return Q(36,1,u,d,f,p);var _=0,b=0,y=0,g=0,B=0,Z=0,nt;function $t(st,ae,gt,Pt,Be,cr){var v,O,lt,ct;return O=st===10?28:16,Be=st===10?nu(Be):aa(Be),v=_s(O),ct=ua(v,st,Be,cr),is(!ct),lt=_s(32),o()[lt+4>>>2]=st,o()[lt+8>>>2]=ae,o()[lt+12>>>2]=gt,a()[lt+24>>>2]=Pt,a()[lt+20>>>2]=v,st===10?o()[lt+16>>>2]=28:o()[lt+16>>>2]=16,o()[lt+28>>>2]=0,lt}if(f&&(y=o()[f>>>2],g=o()[f+4>>>2],B=o()[f+8>>>2],Z=o()[f+12>>>2]),B&&!Z&&(Z=B===2?17:6),!B&&Z&&(B=Z===17?2:1),Z===0&&(Z=6),B===0&&(B=1),!u&&!d)return-2;if(y&-1088||f!==0&&o()[f>>>2]&2&&!u)return-1;if(y&32)return-2;if(B!==0&&B!==1&&B!==2)return-7;if(g!==0&&g!==2&&g!==10)return-6;if(d&&(d=An(d),b=parseInt(d,10),isNaN(b)))return y&1024?-2:-8;if(!u)return g===0&&(g=2),y&1||(g===2?_=ps(2130706433):_=[0,0,0,1]),nt=$t(g,B,Z,null,_,b),a()[p>>>2]=nt,0;if(u=An(u),_=us(u),_!==null)if(g===0||g===2)g=2;else if(g===10&&y&8)_=[0,0,ps(65535),_],g=10;else return-2;else if(_=ca(u),_!==null)if(g===0||g===10)g=10;else return-2;return _!=null?(nt=$t(g,B,Z,u,_,b),a()[p>>>2]=nt,0):y&4?-2:(u=ye.lookup_name(u),_=us(u),g===0?g=2:g===10&&(_=[0,0,ps(65535),_]),nt=$t(g,B,Z,null,_,b),a()[p>>>2]=nt,0)}function xh(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return p=>(p.set(crypto.getRandomValues(new Uint8Array(p.byteLength))),p);if(mt)try{var u=lm("crypto"),d=u.randomFillSync;if(d)return p=>u.randomFillSync(p);var f=u.randomBytes;return p=>(p.set(f(p.byteLength)),p)}catch(p){}V("initRandomDevice")}function zu(u){return(zu=xh())(u)}function Dh(u,d){return zu(n().subarray(u>>>0,u+d>>>0)),0}function Eh(u,d,f,p,_,b,y){var g=iu(u,d);if(g.errno)return-6;var B=g.port,Z=g.addr,nt=!1;if(f&&p){var $t;if(y&1||!($t=ye.lookup_addr(Z))){if(y&8)return-2}else Z=$t;var st=ds(Z,f,p);st+1>=p&&(nt=!0)}if(_&&b){B=""+B;var st=ds(B,_,b);st+1>=b&&(nt=!0)}return nt?-12:0}function Oh(u,d){for(var f=0,p=0;p<=d;f+=u[p++]);return f}var Wu=[31,29,31,30,31,30,31,31,30,31,30,31],ju=[31,28,31,30,31,30,31,31,30,31,30,31];function Mh(u,d){for(var f=new Date(u.getTime());d>0;){var p=ei(f.getFullYear()),_=f.getMonth(),b=(p?Wu:ju)[_];if(d>b-f.getDate())d-=b-f.getDate()+1,f.setDate(1),_<11?f.setMonth(_+1):(f.setMonth(0),f.setFullYear(f.getFullYear()+1));else return f.setDate(f.getDate()+d),f}return f}function Rh(u,d,f){var p=f>0?f:da(u)+1,_=new Array(p),b=fu(u,_,0,_.length);return d&&(_.length=b),_}function $u(u,d){e().set(u,d>>>0)}function Uh(u,d,f,p){var _=o()[p+40>>>2],b={tm_sec:o()[p>>>2],tm_min:o()[p+4>>>2],tm_hour:o()[p+8>>>2],tm_mday:o()[p+12>>>2],tm_mon:o()[p+16>>>2],tm_year:o()[p+20>>>2],tm_wday:o()[p+24>>>2],tm_yday:o()[p+28>>>2],tm_isdst:o()[p+32>>>2],tm_gmtoff:o()[p+36>>>2],tm_zone:_?An(_):""},y=An(f),g={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var B in g)y=y.replace(new RegExp(B,"g"),g[B]);var Z=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],nt=["January","February","March","April","May","June","July","August","September","October","November","December"];function $t(v,O,lt){for(var ct=typeof v=="number"?v.toString():v||"";ct.length<O;)ct=lt[0]+ct;return ct}function st(v,O){return $t(v,O,"0")}function ae(v,O){function lt(Kt){return Kt<0?-1:Kt>0?1:0}var ct;return(ct=lt(v.getFullYear()-O.getFullYear()))===0&&(ct=lt(v.getMonth()-O.getMonth()))===0&&(ct=lt(v.getDate()-O.getDate())),ct}function gt(v){switch(v.getDay()){case 0:return new Date(v.getFullYear()-1,11,29);case 1:return v;case 2:return new Date(v.getFullYear(),0,3);case 3:return new Date(v.getFullYear(),0,2);case 4:return new Date(v.getFullYear(),0,1);case 5:return new Date(v.getFullYear()-1,11,31);case 6:return new Date(v.getFullYear()-1,11,30)}}function Pt(v){var O=Mh(new Date(v.tm_year+1900,0,1),v.tm_yday),lt=new Date(O.getFullYear(),0,4),ct=new Date(O.getFullYear()+1,0,4),Kt=gt(lt),si=gt(ct);return ae(Kt,O)<=0?ae(si,O)<=0?O.getFullYear()+1:O.getFullYear():O.getFullYear()-1}var Be={"%a":function(v){return Z[v.tm_wday].substring(0,3)},"%A":function(v){return Z[v.tm_wday]},"%b":function(v){return nt[v.tm_mon].substring(0,3)},"%B":function(v){return nt[v.tm_mon]},"%C":function(v){var O=v.tm_year+1900;return st(O/100|0,2)},"%d":function(v){return st(v.tm_mday,2)},"%e":function(v){return $t(v.tm_mday,2," ")},"%g":function(v){return Pt(v).toString().substring(2)},"%G":function(v){return Pt(v)},"%H":function(v){return st(v.tm_hour,2)},"%I":function(v){var O=v.tm_hour;return O==0?O=12:O>12&&(O-=12),st(O,2)},"%j":function(v){return st(v.tm_mday+Oh(ei(v.tm_year+1900)?Wu:ju,v.tm_mon-1),3)},"%m":function(v){return st(v.tm_mon+1,2)},"%M":function(v){return st(v.tm_min,2)},"%n":function(){return"\n"},"%p":function(v){return v.tm_hour>=0&&v.tm_hour<12?"AM":"PM"},"%S":function(v){return st(v.tm_sec,2)},"%t":function(){return"	"},"%u":function(v){return v.tm_wday||7},"%U":function(v){var O=v.tm_yday+7-v.tm_wday;return st(Math.floor(O/7),2)},"%V":function(v){var O=Math.floor((v.tm_yday+7-(v.tm_wday+6)%7)/7);if((v.tm_wday+371-v.tm_yday-2)%7<=2&&O++,O){if(O==53){var ct=(v.tm_wday+371-v.tm_yday)%7;ct!=4&&(ct!=3||!ei(v.tm_year))&&(O=1)}}else{O=52;var lt=(v.tm_wday+7-v.tm_yday-1)%7;(lt==4||lt==5&&ei(v.tm_year%400-1))&&O++}return st(O,2)},"%w":function(v){return v.tm_wday},"%W":function(v){var O=v.tm_yday+7-(v.tm_wday+6)%7;return st(Math.floor(O/7),2)},"%y":function(v){return(v.tm_year+1900).toString().substring(2)},"%Y":function(v){return v.tm_year+1900},"%z":function(v){var O=v.tm_gmtoff,lt=O>=0;return O=Math.abs(O)/60,O=O/60*100+O%60,(lt?"+":"-")+("0000"+O).slice(-4)},"%Z":function(v){return v.tm_zone},"%%":function(){return"%"}};y=y.replace(/%%/g,"\0\0");for(var B in Be)y.includes(B)&&(y=y.replace(new RegExp(B,"g"),Be[B](b)));y=y.replace(/\0\0/g,"%");var cr=Rh(y,!1);return cr.length>d?0:($u(cr,u),cr.length-1)}function Lh(u,d,f,p,_){return Uh(u,d,f,p)}function kh(){I("missing function: ucnv_close_64"),V(-1)}function Nh(){I("missing function: ucnv_convertEx_64"),V(-1)}function Ch(){I("missing function: ucnv_open_64"),V(-1)}function Ph(){I("missing function: ucnv_toAlgorithmic_64"),V(-1)}function Hh(){I("missing function: ucsdet_close_64"),V(-1)}function Vh(){I("missing function: ucsdet_detect_64"),V(-1)}function zh(){I("missing function: ucsdet_getConfidence_64"),V(-1)}function Wh(){I("missing function: ucsdet_getName_64"),V(-1)}function jh(){I("missing function: ucsdet_open_64"),V(-1)}function $h(){I("missing function: ucsdet_setText_64"),V(-1)}function Yh(){I("missing function: unzClose"),V(-1)}function Xh(){I("missing function: unzCloseCurrentFile"),V(-1)}function Gh(){I("missing function: unzGetCurrentFileInfo"),V(-1)}function Kh(){I("missing function: unzGetCurrentFileInfo64"),V(-1)}function Jh(){I("missing function: unzGetGlobalInfo"),V(-1)}function qh(){I("missing function: unzGoToFirstFile"),V(-1)}function Zh(){I("missing function: unzGoToNextFile"),V(-1)}function Qh(){I("missing function: unzLocateFile"),V(-1)}function tp(){I("missing function: unzOpen"),V(-1)}function ep(){I("missing function: unzOpen2"),V(-1)}function rp(){I("missing function: unzOpenCurrentFile"),V(-1)}function np(){I("missing function: unzReadCurrentFile"),V(-1)}function ip(u){var d=c["_"+u];return d}function sp(u){var d=da(u)+1,f=ii(d);return ds(u,f,d),f}function op(u,d,f,p,_){var b={string:gt=>{var Pt=0;return gt!=null&&gt!==0&&(Pt=sp(gt)),Pt},array:gt=>{var Pt=ii(gt.length);return $u(gt,Pt),Pt}};function y(gt){return d==="string"?An(gt):d==="boolean"?!!gt:gt}var g=ip(u),B=[],Z=0;if(p)for(var nt=0;nt<p.length;nt++){var $t=b[f[nt]];$t?(Z===0&&(Z=ys()),B[nt]=$t(p[nt])):B[nt]=p[nt]}var st=g.apply(null,B);function ae(gt){return Z!==0&&ni(Z),y(gt)}return st=ae(st),st}k.init();var ap=[null,Kc,qc,Qc,eu,ou,au,cu,uu,lu,du,hu,pu,mu,_u,yu,bu,gu,wu,vu,Su,Iu,Au,Tu,Fu,Bu,Ou,Mu,Ru,Uu,Lu,ku,Nu,Cu,Pu,Hu,Vu],cp={h:Sf,R:If,T:Af,n:Tf,p:Ff,d:Bf,C:xf,f:Df,b:Ef,o:Of,j:Mf,Ja:Rf,$:Uf,O:Lf,Ma:tu,Da:eu,Ha:ou,Ga:au,za:cu,e:uu,ya:lu,Va:du,ta:hu,Ba:pu,Ca:mu,M:_u,va:yu,ua:bu,wa:gu,N:wu,Ea:vu,qa:Su,G:Iu,Fa:Au,J:Tu,xa:Fu,H:Bu,$a:Cf,Ia:Vf,ra:zf,U:la,S:Wf,ba:Gf,ca:Kf,l:Jf,Ka:qf,ia:Zf,ka:Qf,ga:th,ha:eh,F:rh,ea:nh,Ua:ih,fa:sh,ma:oh,q:ah,la:ch,v:uh,na:lh,da:dh,E:fh,oa:hh,I:ph,P:mh,_a:yh,Na:bh,c:Eu,Oa:gh,ja:vh,Ta:Ih,Qa:Ou,Ra:Mu,La:sa,k:Ru,Sa:Uu,Xa:Lu,Wa:ku,L:Nu,Ya:Cu,sa:Pu,w:Hu,K:Vu,pa:Dh,Aa:Eh,a:Rt||c.wasmMemory,Pa:Lh,g:kh,V:Nh,u:Ch,W:Ph,D:Hh,Z:Vh,Y:zh,X:Wh,aa:jh,_:$h,i:Yh,t:Xh,A:Gh,x:Kh,Q:Jh,B:qh,z:Zh,s:Qh,y:tp,Za:ep,r:rp,m:np},nb=mf(),up=function(){return(up=c.asm.ab).apply(null,arguments)},Yu=c._main=function(){return(Yu=c._main=c.asm.bb).apply(null,arguments)},lp=c._duckdb_web_fs_glob_add_path=function(){return(lp=c._duckdb_web_fs_glob_add_path=c.asm.db).apply(null,arguments)},dp=c._duckdb_web_clear_response=function(){return(dp=c._duckdb_web_clear_response=c.asm.eb).apply(null,arguments)},fp=c._duckdb_web_fail_with=function(){return(fp=c._duckdb_web_fail_with=c.asm.fb).apply(null,arguments)},hp=c._duckdb_web_reset=function(){return(hp=c._duckdb_web_reset=c.asm.gb).apply(null,arguments)},pp=c._duckdb_web_connect=function(){return(pp=c._duckdb_web_connect=c.asm.hb).apply(null,arguments)},mp=c._duckdb_web_disconnect=function(){return(mp=c._duckdb_web_disconnect=c.asm.ib).apply(null,arguments)},_p=c._duckdb_web_flush_files=function(){return(_p=c._duckdb_web_flush_files=c.asm.jb).apply(null,arguments)},yp=c._duckdb_web_flush_file=function(){return(yp=c._duckdb_web_flush_file=c.asm.kb).apply(null,arguments)},bp=c._duckdb_web_open=function(){return(bp=c._duckdb_web_open=c.asm.lb).apply(null,arguments)},gp=c._duckdb_web_get_global_file_info=function(){return(gp=c._duckdb_web_get_global_file_info=c.asm.mb).apply(null,arguments)},wp=c._duckdb_web_collect_file_stats=function(){return(wp=c._duckdb_web_collect_file_stats=c.asm.nb).apply(null,arguments)},vp=c._duckdb_web_export_file_stats=function(){return(vp=c._duckdb_web_export_file_stats=c.asm.ob).apply(null,arguments)},Sp=c._duckdb_web_fs_drop_file=function(){return(Sp=c._duckdb_web_fs_drop_file=c.asm.pb).apply(null,arguments)},Ip=c._duckdb_web_fs_drop_files=function(){return(Ip=c._duckdb_web_fs_drop_files=c.asm.qb).apply(null,arguments)},Ap=c._duckdb_web_fs_glob_file_infos=function(){return(Ap=c._duckdb_web_fs_glob_file_infos=c.asm.rb).apply(null,arguments)},Tp=c._duckdb_web_fs_get_file_info_by_id=function(){return(Tp=c._duckdb_web_fs_get_file_info_by_id=c.asm.sb).apply(null,arguments)},Fp=c._duckdb_web_fs_get_file_info_by_name=function(){return(Fp=c._duckdb_web_fs_get_file_info_by_name=c.asm.tb).apply(null,arguments)},Bp=c._duckdb_web_fs_register_file_url=function(){return(Bp=c._duckdb_web_fs_register_file_url=c.asm.ub).apply(null,arguments)},xp=c._duckdb_web_fs_register_file_buffer=function(){return(xp=c._duckdb_web_fs_register_file_buffer=c.asm.vb).apply(null,arguments)},Dp=c._duckdb_web_copy_file_to_buffer=function(){return(Dp=c._duckdb_web_copy_file_to_buffer=c.asm.wb).apply(null,arguments)},Ep=c._duckdb_web_copy_file_to_path=function(){return(Ep=c._duckdb_web_copy_file_to_path=c.asm.xb).apply(null,arguments)},Op=c._duckdb_web_get_version=function(){return(Op=c._duckdb_web_get_version=c.asm.yb).apply(null,arguments)},Mp=c._duckdb_web_get_feature_flags=function(){return(Mp=c._duckdb_web_get_feature_flags=c.asm.zb).apply(null,arguments)},Rp=c._duckdb_web_tokenize=function(){return(Rp=c._duckdb_web_tokenize=c.asm.Ab).apply(null,arguments)},Up=c._duckdb_web_udf_scalar_create=function(){return(Up=c._duckdb_web_udf_scalar_create=c.asm.Bb).apply(null,arguments)},Lp=c._duckdb_web_prepared_create=function(){return(Lp=c._duckdb_web_prepared_create=c.asm.Cb).apply(null,arguments)},kp=c._duckdb_web_prepared_close=function(){return(kp=c._duckdb_web_prepared_close=c.asm.Db).apply(null,arguments)},Np=c._duckdb_web_prepared_run=function(){return(Np=c._duckdb_web_prepared_run=c.asm.Eb).apply(null,arguments)},Cp=c._duckdb_web_prepared_send=function(){return(Cp=c._duckdb_web_prepared_send=c.asm.Fb).apply(null,arguments)},Pp=c._duckdb_web_query_run=function(){return(Pp=c._duckdb_web_query_run=c.asm.Gb).apply(null,arguments)},Hp=c._duckdb_web_pending_query_start=function(){return(Hp=c._duckdb_web_pending_query_start=c.asm.Hb).apply(null,arguments)},Vp=c._duckdb_web_pending_query_poll=function(){return(Vp=c._duckdb_web_pending_query_poll=c.asm.Ib).apply(null,arguments)},zp=c._duckdb_web_pending_query_cancel=function(){return(zp=c._duckdb_web_pending_query_cancel=c.asm.Jb).apply(null,arguments)},Wp=c._duckdb_web_query_fetch_results=function(){return(Wp=c._duckdb_web_query_fetch_results=c.asm.Kb).apply(null,arguments)},jp=c._duckdb_web_get_tablenames=function(){return(jp=c._duckdb_web_get_tablenames=c.asm.Lb).apply(null,arguments)},$p=c._duckdb_web_insert_arrow_from_ipc_stream=function(){return($p=c._duckdb_web_insert_arrow_from_ipc_stream=c.asm.Mb).apply(null,arguments)},Yp=c._duckdb_web_insert_csv_from_path=function(){return(Yp=c._duckdb_web_insert_csv_from_path=c.asm.Nb).apply(null,arguments)},Xp=c._duckdb_web_insert_json_from_path=function(){return(Xp=c._duckdb_web_insert_json_from_path=c.asm.Ob).apply(null,arguments)},Gp=c.__emscripten_tls_init=function(){return(Gp=c.__emscripten_tls_init=c.asm.Pb).apply(null,arguments)},hs=c._pthread_self=function(){return(hs=c._pthread_self=c.asm.Qb).apply(null,arguments)},Kp=function(){return(Kp=c.asm.__errno_location).apply(null,arguments)},Xu=c.__emscripten_thread_init=function(){return(Xu=c.__emscripten_thread_init=c.asm.Rb).apply(null,arguments)},Jp=c.__emscripten_thread_crashed=function(){return(Jp=c.__emscripten_thread_crashed=c.asm.Sb).apply(null,arguments)},ps=function(){return(ps=c.asm.Tb).apply(null,arguments)},ms=function(){return(ms=c.asm.Ub).apply(null,arguments)},qp=function(){return(qp=c.asm.emscripten_main_runtime_thread_id).apply(null,arguments)},Zp=function(){return(Zp=c.asm.emscripten_main_thread_process_queued_calls).apply(null,arguments)},Gu=function(){return(Gu=c.asm.Vb).apply(null,arguments)},Qp=function(){return(Qp=c.asm.emscripten_dispatch_to_thread_).apply(null,arguments)},pa=function(){return(pa=c.asm.Wb).apply(null,arguments)},ma=function(){return(ma=c.asm.Xb).apply(null,arguments)},_a=c.__emscripten_thread_exit=function(){return(_a=c.__emscripten_thread_exit=c.asm.Yb).apply(null,arguments)},Ku=c.__emscripten_check_mailbox=function(){return(Ku=c.__emscripten_check_mailbox=c.asm.Zb).apply(null,arguments)},_s=c._malloc=function(){return(_s=c._malloc=c.asm._b).apply(null,arguments)},tm=c._free=function(){return(tm=c._free=c.asm.$b).apply(null,arguments)},Ju=function(){return(Ju=c.asm.ac).apply(null,arguments)},qu=function(){return(qu=c.asm.bc).apply(null,arguments)},ys=function(){return(ys=c.asm.cc).apply(null,arguments)},ni=function(){return(ni=c.asm.dc).apply(null,arguments)},ii=function(){return(ii=c.asm.ec).apply(null,arguments)};c.keepRuntimeAlive=os,c.wasmMemory=Rt,c.stackAlloc=ii,c.stackSave=ys,c.stackRestore=ni,c.ccall=op,c.ExitStatus=na,c.PThread=k;var bs;Qn=function u(){bs||Zu(),bs||(Qn=u)};function em(){var u=Yu,d=0,f=0;try{var p=u(d,f);return Jc(p,!0),p}catch(_){return oa(_)}}function Zu(){if(Zr>0)return;if(F){m(c),kc(),startWorker(c);return}if(af(),Zr>0)return;function u(){bs||(bs=!0,c.calledRun=!0,!ns&&(kc(),cf(),m(c),c.onRuntimeInitialized&&c.onRuntimeInitialized(),Qu&&em(),uf()))}c.setStatus?(c.setStatus("Running..."),setTimeout(function(){setTimeout(function(){c.setStatus("")},1),u()},1)):u()}if(c.preInit)for(typeof c.preInit=="function"&&(c.preInit=[c.preInit]);c.preInit.length>0;)c.preInit.pop()();var Qu=!0;return c.noInitialRun&&(Qu=!1),Zu(),t.ready}})();typeof Go=="object"&&typeof yc=="object"?yc.exports=_c:typeof define=="function"&&define.amd?define([],function(){return _c}):typeof Go=="object"&&(Go.DuckDB=_c)});var Qd=tn((exports,module)=>{(function(){"use strict";var ERROR="input is invalid type",WINDOW=typeof window=="object",root=WINDOW?window:{};root.JS_SHA256_NO_WINDOW&&(WINDOW=!1);var WEB_WORKER=!WINDOW&&typeof self=="object",NODE_JS=!root.JS_SHA256_NO_NODE_JS&&typeof process=="object"&&process.versions&&process.versions.node;NODE_JS?root=global:WEB_WORKER&&(root=self);var COMMON_JS=!root.JS_SHA256_NO_COMMON_JS&&typeof module=="object"&&module.exports,AMD=typeof define=="function"&&define.amd,ARRAY_BUFFER=!root.JS_SHA256_NO_ARRAY_BUFFER&&typeof ArrayBuffer<"u",HEX_CHARS="0123456789abcdef".split(""),EXTRA=[-2147483648,8388608,32768,128],SHIFT=[24,16,8,0],K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],OUTPUT_TYPES=["hex","array","digest","arrayBuffer"],blocks=[];(root.JS_SHA256_NO_NODE_JS||!Array.isArray)&&(Array.isArray=function(r){return Object.prototype.toString.call(r)==="[object Array]"}),ARRAY_BUFFER&&(root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW||!ArrayBuffer.isView)&&(ArrayBuffer.isView=function(r){return typeof r=="object"&&r.buffer&&r.buffer.constructor===ArrayBuffer});var createOutputMethod=function(r,t){return function(e){return new Sha256(t,!0).update(e)[r]()}},createMethod=function(r){var t=createOutputMethod("hex",r);NODE_JS&&(t=nodeWrap(t,r)),t.create=function(){return new Sha256(r)},t.update=function(i){return t.create().update(i)};for(var e=0;e<OUTPUT_TYPES.length;++e){var n=OUTPUT_TYPES[e];t[n]=createOutputMethod(n,r)}return t},nodeWrap=function(method,is224){var crypto=eval("require('crypto')"),Buffer=eval("require('buffer').Buffer"),algorithm=is224?"sha224":"sha256",nodeMethod=function(r){if(typeof r=="string")return crypto.createHash(algorithm).update(r,"utf8").digest("hex");if(r==null)throw new Error(ERROR);return r.constructor===ArrayBuffer&&(r=new Uint8Array(r)),Array.isArray(r)||ArrayBuffer.isView(r)||r.constructor===Buffer?crypto.createHash(algorithm).update(new Buffer(r)).digest("hex"):method(r)};return nodeMethod},createHmacOutputMethod=function(r,t){return function(e,n){return new HmacSha256(e,t,!0).update(n)[r]()}},createHmacMethod=function(r){var t=createHmacOutputMethod("hex",r);t.create=function(i){return new HmacSha256(i,r)},t.update=function(i,s){return t.create(i).update(s)};for(var e=0;e<OUTPUT_TYPES.length;++e){var n=OUTPUT_TYPES[e];t[n]=createHmacOutputMethod(n,r)}return t};function Sha256(r,t){t?(blocks[0]=blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0,this.blocks=blocks):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],r?(this.h0=3238371032,this.h1=914150663,this.h2=812702999,this.h3=4144912697,this.h4=4290775857,this.h5=1750603025,this.h6=1694076839,this.h7=3204075428):(this.h0=1779033703,this.h1=3144134277,this.h2=1013904242,this.h3=2773480762,this.h4=1359893119,this.h5=2600822924,this.h6=528734635,this.h7=1541459225),this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0,this.is224=r}Sha256.prototype.update=function(r){if(!this.finalized){var t,e=typeof r;if(e!=="string"){if(e==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);t=!0}for(var n,i=0,s,o=r.length,a=this.blocks;i<o;){if(this.hashed&&(this.hashed=!1,a[0]=this.block,a[16]=a[1]=a[2]=a[3]=a[4]=a[5]=a[6]=a[7]=a[8]=a[9]=a[10]=a[11]=a[12]=a[13]=a[14]=a[15]=0),t)for(s=this.start;i<o&&s<64;++i)a[s>>2]|=r[i]<<SHIFT[s++&3];else for(s=this.start;i<o&&s<64;++i)n=r.charCodeAt(i),n<128?a[s>>2]|=n<<SHIFT[s++&3]:n<2048?(a[s>>2]|=(192|n>>6)<<SHIFT[s++&3],a[s>>2]|=(128|n&63)<<SHIFT[s++&3]):n<55296||n>=57344?(a[s>>2]|=(224|n>>12)<<SHIFT[s++&3],a[s>>2]|=(128|n>>6&63)<<SHIFT[s++&3],a[s>>2]|=(128|n&63)<<SHIFT[s++&3]):(n=65536+((n&1023)<<10|r.charCodeAt(++i)&1023),a[s>>2]|=(240|n>>18)<<SHIFT[s++&3],a[s>>2]|=(128|n>>12&63)<<SHIFT[s++&3],a[s>>2]|=(128|n>>6&63)<<SHIFT[s++&3],a[s>>2]|=(128|n&63)<<SHIFT[s++&3]);this.lastByteIndex=s,this.bytes+=s-this.start,s>=64?(this.block=a[16],this.start=s-64,this.hash(),this.hashed=!0):this.start=s}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},Sha256.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var r=this.blocks,t=this.lastByteIndex;r[16]=this.block,r[t>>2]|=EXTRA[t&3],this.block=r[16],t>=56&&(this.hashed||this.hash(),r[0]=this.block,r[16]=r[1]=r[2]=r[3]=r[4]=r[5]=r[6]=r[7]=r[8]=r[9]=r[10]=r[11]=r[12]=r[13]=r[14]=r[15]=0),r[14]=this.hBytes<<3|this.bytes>>>29,r[15]=this.bytes<<3,this.hash()}},Sha256.prototype.hash=function(){var r=this.h0,t=this.h1,e=this.h2,n=this.h3,i=this.h4,s=this.h5,o=this.h6,a=this.h7,l=this.blocks,c,m,w,S,T,tt,wt,xt,vt,mt,F;for(c=16;c<64;++c)T=l[c-15],m=(T>>>7|T<<25)^(T>>>18|T<<14)^T>>>3,T=l[c-2],w=(T>>>17|T<<15)^(T>>>19|T<<13)^T>>>10,l[c]=l[c-16]+m+l[c-7]+w<<0;for(F=t&e,c=0;c<64;c+=4)this.first?(this.is224?(xt=300032,T=l[0]-1413257819,a=T-150054599<<0,n=T+24177077<<0):(xt=704751109,T=l[0]-210244248,a=T-1521486534<<0,n=T+143694565<<0),this.first=!1):(m=(r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10),w=(i>>>6|i<<26)^(i>>>11|i<<21)^(i>>>25|i<<7),xt=r&t,S=xt^r&e^F,wt=i&s^~i&o,T=a+w+wt+K[c]+l[c],tt=m+S,a=n+T<<0,n=T+tt<<0),m=(n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10),w=(a>>>6|a<<26)^(a>>>11|a<<21)^(a>>>25|a<<7),vt=n&r,S=vt^n&t^xt,wt=a&i^~a&s,T=o+w+wt+K[c+1]+l[c+1],tt=m+S,o=e+T<<0,e=T+tt<<0,m=(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10),w=(o>>>6|o<<26)^(o>>>11|o<<21)^(o>>>25|o<<7),mt=e&n,S=mt^e&r^vt,wt=o&a^~o&i,T=s+w+wt+K[c+2]+l[c+2],tt=m+S,s=t+T<<0,t=T+tt<<0,m=(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10),w=(s>>>6|s<<26)^(s>>>11|s<<21)^(s>>>25|s<<7),F=t&e,S=F^t&n^mt,wt=s&o^~s&a,T=i+w+wt+K[c+3]+l[c+3],tt=m+S,i=r+T<<0,r=T+tt<<0;this.h0=this.h0+r<<0,this.h1=this.h1+t<<0,this.h2=this.h2+e<<0,this.h3=this.h3+n<<0,this.h4=this.h4+i<<0,this.h5=this.h5+s<<0,this.h6=this.h6+o<<0,this.h7=this.h7+a<<0},Sha256.prototype.hex=function(){this.finalize();var r=this.h0,t=this.h1,e=this.h2,n=this.h3,i=this.h4,s=this.h5,o=this.h6,a=this.h7,l=HEX_CHARS[r>>28&15]+HEX_CHARS[r>>24&15]+HEX_CHARS[r>>20&15]+HEX_CHARS[r>>16&15]+HEX_CHARS[r>>12&15]+HEX_CHARS[r>>8&15]+HEX_CHARS[r>>4&15]+HEX_CHARS[r&15]+HEX_CHARS[t>>28&15]+HEX_CHARS[t>>24&15]+HEX_CHARS[t>>20&15]+HEX_CHARS[t>>16&15]+HEX_CHARS[t>>12&15]+HEX_CHARS[t>>8&15]+HEX_CHARS[t>>4&15]+HEX_CHARS[t&15]+HEX_CHARS[e>>28&15]+HEX_CHARS[e>>24&15]+HEX_CHARS[e>>20&15]+HEX_CHARS[e>>16&15]+HEX_CHARS[e>>12&15]+HEX_CHARS[e>>8&15]+HEX_CHARS[e>>4&15]+HEX_CHARS[e&15]+HEX_CHARS[n>>28&15]+HEX_CHARS[n>>24&15]+HEX_CHARS[n>>20&15]+HEX_CHARS[n>>16&15]+HEX_CHARS[n>>12&15]+HEX_CHARS[n>>8&15]+HEX_CHARS[n>>4&15]+HEX_CHARS[n&15]+HEX_CHARS[i>>28&15]+HEX_CHARS[i>>24&15]+HEX_CHARS[i>>20&15]+HEX_CHARS[i>>16&15]+HEX_CHARS[i>>12&15]+HEX_CHARS[i>>8&15]+HEX_CHARS[i>>4&15]+HEX_CHARS[i&15]+HEX_CHARS[s>>28&15]+HEX_CHARS[s>>24&15]+HEX_CHARS[s>>20&15]+HEX_CHARS[s>>16&15]+HEX_CHARS[s>>12&15]+HEX_CHARS[s>>8&15]+HEX_CHARS[s>>4&15]+HEX_CHARS[s&15]+HEX_CHARS[o>>28&15]+HEX_CHARS[o>>24&15]+HEX_CHARS[o>>20&15]+HEX_CHARS[o>>16&15]+HEX_CHARS[o>>12&15]+HEX_CHARS[o>>8&15]+HEX_CHARS[o>>4&15]+HEX_CHARS[o&15];return this.is224||(l+=HEX_CHARS[a>>28&15]+HEX_CHARS[a>>24&15]+HEX_CHARS[a>>20&15]+HEX_CHARS[a>>16&15]+HEX_CHARS[a>>12&15]+HEX_CHARS[a>>8&15]+HEX_CHARS[a>>4&15]+HEX_CHARS[a&15]),l},Sha256.prototype.toString=Sha256.prototype.hex,Sha256.prototype.digest=function(){this.finalize();var r=this.h0,t=this.h1,e=this.h2,n=this.h3,i=this.h4,s=this.h5,o=this.h6,a=this.h7,l=[r>>24&255,r>>16&255,r>>8&255,r&255,t>>24&255,t>>16&255,t>>8&255,t&255,e>>24&255,e>>16&255,e>>8&255,e&255,n>>24&255,n>>16&255,n>>8&255,n&255,i>>24&255,i>>16&255,i>>8&255,i&255,s>>24&255,s>>16&255,s>>8&255,s&255,o>>24&255,o>>16&255,o>>8&255,o&255];return this.is224||l.push(a>>24&255,a>>16&255,a>>8&255,a&255),l},Sha256.prototype.array=Sha256.prototype.digest,Sha256.prototype.arrayBuffer=function(){this.finalize();var r=new ArrayBuffer(this.is224?28:32),t=new DataView(r);return t.setUint32(0,this.h0),t.setUint32(4,this.h1),t.setUint32(8,this.h2),t.setUint32(12,this.h3),t.setUint32(16,this.h4),t.setUint32(20,this.h5),t.setUint32(24,this.h6),this.is224||t.setUint32(28,this.h7),r};function HmacSha256(r,t,e){var n,i=typeof r;if(i==="string"){var s=[],o=r.length,a=0,l;for(n=0;n<o;++n)l=r.charCodeAt(n),l<128?s[a++]=l:l<2048?(s[a++]=192|l>>6,s[a++]=128|l&63):l<55296||l>=57344?(s[a++]=224|l>>12,s[a++]=128|l>>6&63,s[a++]=128|l&63):(l=65536+((l&1023)<<10|r.charCodeAt(++n)&1023),s[a++]=240|l>>18,s[a++]=128|l>>12&63,s[a++]=128|l>>6&63,s[a++]=128|l&63);r=s}else if(i==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);r.length>64&&(r=new Sha256(t,!0).update(r).array());var c=[],m=[];for(n=0;n<64;++n){var w=r[n]||0;c[n]=92^w,m[n]=54^w}Sha256.call(this,t,e),this.update(m),this.oKeyPad=c,this.inner=!0,this.sharedMemory=e}HmacSha256.prototype=new Sha256,HmacSha256.prototype.finalize=function(){if(Sha256.prototype.finalize.call(this),this.inner){this.inner=!1;var r=this.array();Sha256.call(this,this.is224,this.sharedMemory),this.update(this.oKeyPad),this.update(r),Sha256.prototype.finalize.call(this)}};var exports=createMethod();exports.sha256=exports,exports.sha224=createMethod(!0),exports.sha256.hmac=createHmacMethod(),exports.sha224.hmac=createHmacMethod(!0),COMMON_JS?module.exports=exports:(root.sha256=exports.sha256,root.sha224=exports.sha224,AMD&&define(function(){return exports}))})()});var rb={};en(rb,{registerWorker:()=>nf});function il(r,t){var e={};for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&t.indexOf(n)<0&&(e[n]=r[n]);if(r!=null&&typeof Object.getOwnPropertySymbols=="function")for(var i=0,n=Object.getOwnPropertySymbols(r);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(r,n[i])&&(e[n[i]]=r[n[i]]);return e}function A(r,t,e,n){function i(s){return s instanceof e?s:new e(function(o){o(s)})}return new(e||(e=Promise))(function(s,o){function a(m){try{c(n.next(m))}catch(w){o(w)}}function l(m){try{c(n.throw(m))}catch(w){o(w)}}function c(m){m.done?s(m.value):i(m.value).then(a,l)}c((n=n.apply(r,t||[])).next())})}function nl(r){var t=typeof Symbol=="function"&&Symbol.iterator,e=t&&r[t],n=0;if(e)return e.call(r);if(r&&typeof r.length=="number")return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function P(r){return this instanceof P?(this.v=r,this):new P(r)}function ce(r,t,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n=e.apply(r,t||[]),i,s=[];return i={},o("next"),o("throw"),o("return"),i[Symbol.asyncIterator]=function(){return this},i;function o(S){n[S]&&(i[S]=function(T){return new Promise(function(tt,wt){s.push([S,T,tt,wt])>1||a(S,T)})})}function a(S,T){try{l(n[S](T))}catch(tt){w(s[0][3],tt)}}function l(S){S.value instanceof P?Promise.resolve(S.value.v).then(c,m):w(s[0][2],S)}function c(S){a("next",S)}function m(S){a("throw",S)}function w(S,T){S(T),s.shift(),s.length&&a(s[0][0],s[0][1])}}function Tn(r){var t,e;return t={},n("next"),n("throw",function(i){throw i}),n("return"),t[Symbol.iterator]=function(){return this},t;function n(i,s){t[i]=r[i]?function(o){return(e=!e)?{value:P(r[i](o)),done:!1}:s?s(o):o}:s}}function xe(r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t=r[Symbol.asyncIterator],e;return t?t.call(r):(r=typeof nl=="function"?nl(r):r[Symbol.iterator](),e={},n("next"),n("throw"),n("return"),e[Symbol.asyncIterator]=function(){return this},e);function n(s){e[s]=r[s]&&function(o){return new Promise(function(a,l){o=r[s](o),i(a,l,o.done,o.value)})}}function i(s,o,a,l){Promise.resolve(l).then(function(c){s({value:c,done:a})},o)}}var Ia={};en(Ia,{compareArrayLike:()=>Sa,joinUint8Arrays:()=>ue,memcpy:()=>Fn,rebaseValueOffsets:()=>ci,toArrayBufferView:()=>Y,toArrayBufferViewAsyncIterator:()=>Oe,toArrayBufferViewIterator:()=>$e,toBigInt64Array:()=>gm,toBigUint64Array:()=>Sm,toFloat32Array:()=>Im,toFloat32ArrayAsyncIterator:()=>Pm,toFloat32ArrayIterator:()=>Om,toFloat64Array:()=>Am,toFloat64ArrayAsyncIterator:()=>Hm,toFloat64ArrayIterator:()=>Mm,toInt16Array:()=>bm,toInt16ArrayAsyncIterator:()=>Lm,toInt16ArrayIterator:()=>Bm,toInt32Array:()=>nn,toInt32ArrayAsyncIterator:()=>km,toInt32ArrayIterator:()=>xm,toInt8Array:()=>ym,toInt8ArrayAsyncIterator:()=>Um,toInt8ArrayIterator:()=>Fm,toUint16Array:()=>wm,toUint16ArrayAsyncIterator:()=>Nm,toUint16ArrayIterator:()=>Dm,toUint32Array:()=>vm,toUint32ArrayAsyncIterator:()=>Cm,toUint32ArrayIterator:()=>Em,toUint8Array:()=>N,toUint8ArrayAsyncIterator:()=>va,toUint8ArrayIterator:()=>wa,toUint8ClampedArray:()=>Tm,toUint8ClampedArrayAsyncIterator:()=>Vm,toUint8ClampedArrayIterator:()=>Rm});var hm=new TextDecoder("utf-8"),oi=r=>hm.decode(r),pm=new TextEncoder,Er=r=>pm.encode(r);var[be,ab]=(()=>{let r=()=>{throw new Error("BigInt64Array is not available in this environment")};class t{static get BYTES_PER_ELEMENT(){return 8}static of(){throw r()}static from(){throw r()}constructor(){throw r()}}return typeof BigInt64Array<"u"?[BigInt64Array,!0]:[t,!1]})(),[ge,cb]=(()=>{let r=()=>{throw new Error("BigUint64Array is not available in this environment")};class t{static get BYTES_PER_ELEMENT(){return 8}static of(){throw r()}static from(){throw r()}constructor(){throw r()}}return typeof BigUint64Array<"u"?[BigUint64Array,!0]:[t,!1]})();var mm=r=>typeof r=="number",sl=r=>typeof r=="boolean",Dt=r=>typeof r=="function",Jt=r=>r!=null&&Object(r)===r,De=r=>Jt(r)&&Dt(r.then);var Ee=r=>Jt(r)&&Dt(r[Symbol.iterator]),we=r=>Jt(r)&&Dt(r[Symbol.asyncIterator]),vs=r=>Jt(r)&&Jt(r.schema);var Ss=r=>Jt(r)&&"done"in r&&"value"in r;var Is=r=>Jt(r)&&Dt(r.stat)&&mm(r.fd);var As=r=>Jt(r)&&ai(r.body),Ts=r=>"_getDOMStream"in r&&"_getNodeStream"in r,ol=r=>Jt(r)&&Dt(r.abort)&&Dt(r.getWriter)&&!Ts(r),ai=r=>Jt(r)&&Dt(r.cancel)&&Dt(r.getReader)&&!Ts(r),al=r=>Jt(r)&&Dt(r.end)&&Dt(r.write)&&sl(r.writable)&&!Ts(r),Fs=r=>Jt(r)&&Dt(r.read)&&Dt(r.pipe)&&sl(r.readable)&&!Ts(r),cl=r=>Jt(r)&&Dt(r.clear)&&Dt(r.bytes)&&Dt(r.position)&&Dt(r.setPosition)&&Dt(r.capacity)&&Dt(r.getBufferIdentifier)&&Dt(r.createLong);var ga=typeof SharedArrayBuffer<"u"?SharedArrayBuffer:ArrayBuffer;function _m(r){let t=r[0]?[r[0]]:[],e,n,i,s;for(let o,a,l=0,c=0,m=r.length;++l<m;){if(o=t[c],a=r[l],!o||!a||o.buffer!==a.buffer||a.byteOffset<o.byteOffset){a&&(t[++c]=a);continue}if({byteOffset:e,byteLength:i}=o,{byteOffset:n,byteLength:s}=a,e+i<n||n+s<e){a&&(t[++c]=a);continue}t[c]=new Uint8Array(o.buffer,e,n-e+s)}return t}function Fn(r,t,e=0,n=t.byteLength){let i=r.byteLength,s=new Uint8Array(r.buffer,r.byteOffset,i),o=new Uint8Array(t.buffer,t.byteOffset,Math.min(n,i));return s.set(o,e),r}function ue(r,t){let e=_m(r),n=e.reduce((m,w)=>m+w.byteLength,0),i,s,o,a=0,l=-1,c=Math.min(t||Number.POSITIVE_INFINITY,n);for(let m=e.length;++l<m;){if(i=e[l],s=i.subarray(0,Math.min(i.length,c-a)),c<=a+s.length){s.length<i.length?e[l]=i.subarray(s.length):s.length===i.length&&l++,o?Fn(o,s,a):o=s;break}Fn(o||(o=new Uint8Array(c)),s,a),a+=s.length}return[o||new Uint8Array(0),e.slice(l),n-(o?o.byteLength:0)]}function Y(r,t){let e=Ss(t)?t.value:t;return e instanceof r?r===Uint8Array?new r(e.buffer,e.byteOffset,e.byteLength):e:e?(typeof e=="string"&&(e=Er(e)),e instanceof ArrayBuffer?new r(e):e instanceof ga?new r(e):cl(e)?Y(r,e.bytes()):ArrayBuffer.isView(e)?e.byteLength<=0?new r(0):new r(e.buffer,e.byteOffset,e.byteLength/r.BYTES_PER_ELEMENT):r.from(e)):new r(0)}var ym=r=>Y(Int8Array,r),bm=r=>Y(Int16Array,r),nn=r=>Y(Int32Array,r),gm=r=>Y(be,r),N=r=>Y(Uint8Array,r),wm=r=>Y(Uint16Array,r),vm=r=>Y(Uint32Array,r),Sm=r=>Y(ge,r),Im=r=>Y(Float32Array,r),Am=r=>Y(Float64Array,r),Tm=r=>Y(Uint8ClampedArray,r),ba=r=>(r.next(),r);function*$e(r,t){let e=function*(i){yield i},n=typeof t=="string"||ArrayBuffer.isView(t)||t instanceof ArrayBuffer||t instanceof ga?e(t):Ee(t)?t:e(t);return yield*rn(ba(function*(i){let s=null;do s=i.next(yield Y(r,s));while(!s.done)}(n[Symbol.iterator]()))),new r}var Fm=r=>$e(Int8Array,r),Bm=r=>$e(Int16Array,r),xm=r=>$e(Int32Array,r),wa=r=>$e(Uint8Array,r),Dm=r=>$e(Uint16Array,r),Em=r=>$e(Uint32Array,r),Om=r=>$e(Float32Array,r),Mm=r=>$e(Float64Array,r),Rm=r=>$e(Uint8ClampedArray,r);function Oe(r,t){return ce(this,arguments,function*(){if(De(t))return yield P(yield P(yield*rn(Tn(xe(Oe(r,yield P(t)))))));let n=function(o){return ce(this,arguments,function*(){yield yield P(yield P(o))})},i=function(o){return ce(this,arguments,function*(){yield P(yield*rn(Tn(xe(ba(function*(a){let l=null;do l=a.next(yield l==null?void 0:l.value);while(!l.done)}(o[Symbol.iterator]()))))))})},s=typeof t=="string"||ArrayBuffer.isView(t)||t instanceof ArrayBuffer||t instanceof ga?n(t):Ee(t)?i(t):we(t)?t:n(t);return yield P(yield*rn(Tn(xe(ba(function(o){return ce(this,arguments,function*(){let a=null;do a=yield P(o.next(yield yield P(Y(r,a))));while(!a.done)})}(s[Symbol.asyncIterator]())))))),yield P(new r)})}var Um=r=>Oe(Int8Array,r),Lm=r=>Oe(Int16Array,r),km=r=>Oe(Int32Array,r),va=r=>Oe(Uint8Array,r),Nm=r=>Oe(Uint16Array,r),Cm=r=>Oe(Uint32Array,r),Pm=r=>Oe(Float32Array,r),Hm=r=>Oe(Float64Array,r),Vm=r=>Oe(Uint8ClampedArray,r);function ci(r,t,e){if(r!==0){e=e.slice(0,t+1);for(let n=-1;++n<=t;)e[n]+=r}return e}function Sa(r,t){let e=0,n=r.length;if(n!==t.length)return!1;if(n>0)do if(r[e]!==t[e])return!1;while(++e<n);return!0}var Ht={fromIterable(r){return Bs(zm(r))},fromAsyncIterable(r){return Bs(Wm(r))},fromDOMStream(r){return Bs(jm(r))},fromNodeStream(r){return Bs($m(r))},toDOMStream(r,t){throw new Error('"toDOMStream" not available in this environment')},toNodeStream(r,t){throw new Error('"toNodeStream" not available in this environment')}},Bs=r=>(r.next(),r);function*zm(r){let t,e=!1,n=[],i,s,o,a=0;function l(){return s==="peek"?ue(n,o)[0]:([i,n,a]=ue(n,o),i)}({cmd:s,size:o}=yield null);let c=wa(r)[Symbol.iterator]();try{do if({done:t,value:i}=Number.isNaN(o-a)?c.next():c.next(o-a),!t&&i.byteLength>0&&(n.push(i),a+=i.byteLength),t||o<=a)do({cmd:s,size:o}=yield l());while(o<a);while(!t)}catch(m){(e=!0)&&typeof c.throw=="function"&&c.throw(m)}finally{e===!1&&typeof c.return=="function"&&c.return(null)}return null}function Wm(r){return ce(this,arguments,function*(){let e,n=!1,i=[],s,o,a,l=0;function c(){return o==="peek"?ue(i,a)[0]:([s,i,l]=ue(i,a),s)}({cmd:o,size:a}=yield yield P(null));let m=va(r)[Symbol.asyncIterator]();try{do if({done:e,value:s}=Number.isNaN(a-l)?yield P(m.next()):yield P(m.next(a-l)),!e&&s.byteLength>0&&(i.push(s),l+=s.byteLength),e||a<=l)do({cmd:o,size:a}=yield yield P(c()));while(a<l);while(!e)}catch(w){(n=!0)&&typeof m.throw=="function"&&(yield P(m.throw(w)))}finally{n===!1&&typeof m.return=="function"&&(yield P(m.return(new Uint8Array(0))))}return yield P(null)})}function jm(r){return ce(this,arguments,function*(){let e=!1,n=!1,i=[],s,o,a,l=0;function c(){return o==="peek"?ue(i,a)[0]:([s,i,l]=ue(i,a),s)}({cmd:o,size:a}=yield yield P(null));let m=new Ta(r);try{do if({done:e,value:s}=Number.isNaN(a-l)?yield P(m.read()):yield P(m.read(a-l)),!e&&s.byteLength>0&&(i.push(N(s)),l+=s.byteLength),e||a<=l)do({cmd:o,size:a}=yield yield P(c()));while(a<l);while(!e)}catch(w){(n=!0)&&(yield P(m.cancel(w)))}finally{n===!1?yield P(m.cancel()):r.locked&&m.releaseLock()}return yield P(null)})}var Ta=class{constructor(t){this.source=t,this.reader=null,this.reader=this.source.getReader(),this.reader.closed.catch(()=>{})}get closed(){return this.reader?this.reader.closed.catch(()=>{}):Promise.resolve()}releaseLock(){this.reader&&this.reader.releaseLock(),this.reader=null}cancel(t){return A(this,void 0,void 0,function*(){let{reader:e,source:n}=this;e&&(yield e.cancel(t).catch(()=>{})),n&&n.locked&&this.releaseLock()})}read(t){return A(this,void 0,void 0,function*(){if(t===0)return{done:this.reader==null,value:new Uint8Array(0)};let e=yield this.reader.read();return!e.done&&(e.value=N(e)),e})}},Aa=(r,t)=>{let e=i=>n([t,i]),n;return[t,e,new Promise(i=>(n=i)&&r.once(t,e))]};function $m(r){return ce(this,arguments,function*(){let e=[],n="error",i=!1,s=null,o,a,l=0,c=[],m;function w(){return o==="peek"?ue(c,a)[0]:([m,c,l]=ue(c,a),m)}if({cmd:o,size:a}=yield yield P(null),r.isTTY)return yield yield P(new Uint8Array(0)),yield P(null);try{e[0]=Aa(r,"end"),e[1]=Aa(r,"error");do{if(e[2]=Aa(r,"readable"),[n,s]=yield P(Promise.race(e.map(T=>T[2]))),n==="error")break;if((i=n==="end")||(Number.isFinite(a-l)?(m=N(r.read(a-l)),m.byteLength<a-l&&(m=N(r.read()))):m=N(r.read()),m.byteLength>0&&(c.push(m),l+=m.byteLength)),i||a<=l)do({cmd:o,size:a}=yield yield P(w()));while(a<l)}while(!i)}finally{yield P(S(e,n==="error"?s:null))}return yield P(null);function S(T,tt){return m=c=null,new Promise((wt,xt)=>{for(let[vt,mt]of T)r.off(vt,mt);try{let vt=r.destroy;vt&&vt.call(r,tt),tt=void 0}catch(vt){tt=vt||tt}finally{tt!=null?xt(tt):wt()}})}})}var Ut;(function(r){r[r.V1=0]="V1",r[r.V2=1]="V2",r[r.V3=2]="V3",r[r.V4=3]="V4",r[r.V5=4]="V5"})(Ut||(Ut={}));var St;(function(r){r[r.Sparse=0]="Sparse",r[r.Dense=1]="Dense"})(St||(St={}));var _t;(function(r){r[r.HALF=0]="HALF",r[r.SINGLE=1]="SINGLE",r[r.DOUBLE=2]="DOUBLE"})(_t||(_t={}));var Vt;(function(r){r[r.DAY=0]="DAY",r[r.MILLISECOND=1]="MILLISECOND"})(Vt||(Vt={}));var J;(function(r){r[r.SECOND=0]="SECOND",r[r.MILLISECOND=1]="MILLISECOND",r[r.MICROSECOND=2]="MICROSECOND",r[r.NANOSECOND=3]="NANOSECOND"})(J||(J={}));var qt;(function(r){r[r.YEAR_MONTH=0]="YEAR_MONTH",r[r.DAY_TIME=1]="DAY_TIME",r[r.MONTH_DAY_NANO=2]="MONTH_DAY_NANO"})(qt||(qt={}));var rt;(function(r){r[r.NONE=0]="NONE",r[r.Schema=1]="Schema",r[r.DictionaryBatch=2]="DictionaryBatch",r[r.RecordBatch=3]="RecordBatch",r[r.Tensor=4]="Tensor",r[r.SparseTensor=5]="SparseTensor"})(rt||(rt={}));var h;(function(r){r[r.NONE=0]="NONE",r[r.Null=1]="Null",r[r.Int=2]="Int",r[r.Float=3]="Float",r[r.Binary=4]="Binary",r[r.Utf8=5]="Utf8",r[r.Bool=6]="Bool",r[r.Decimal=7]="Decimal",r[r.Date=8]="Date",r[r.Time=9]="Time",r[r.Timestamp=10]="Timestamp",r[r.Interval=11]="Interval",r[r.List=12]="List",r[r.Struct=13]="Struct",r[r.Union=14]="Union",r[r.FixedSizeBinary=15]="FixedSizeBinary",r[r.FixedSizeList=16]="FixedSizeList",r[r.Map=17]="Map",r[r.Dictionary=-1]="Dictionary",r[r.Int8=-2]="Int8",r[r.Int16=-3]="Int16",r[r.Int32=-4]="Int32",r[r.Int64=-5]="Int64",r[r.Uint8=-6]="Uint8",r[r.Uint16=-7]="Uint16",r[r.Uint32=-8]="Uint32",r[r.Uint64=-9]="Uint64",r[r.Float16=-10]="Float16",r[r.Float32=-11]="Float32",r[r.Float64=-12]="Float64",r[r.DateDay=-13]="DateDay",r[r.DateMillisecond=-14]="DateMillisecond",r[r.TimestampSecond=-15]="TimestampSecond",r[r.TimestampMillisecond=-16]="TimestampMillisecond",r[r.TimestampMicrosecond=-17]="TimestampMicrosecond",r[r.TimestampNanosecond=-18]="TimestampNanosecond",r[r.TimeSecond=-19]="TimeSecond",r[r.TimeMillisecond=-20]="TimeMillisecond",r[r.TimeMicrosecond=-21]="TimeMicrosecond",r[r.TimeNanosecond=-22]="TimeNanosecond",r[r.DenseUnion=-23]="DenseUnion",r[r.SparseUnion=-24]="SparseUnion",r[r.IntervalDayTime=-25]="IntervalDayTime",r[r.IntervalYearMonth=-26]="IntervalYearMonth"})(h||(h={}));var ve;(function(r){r[r.OFFSET=0]="OFFSET",r[r.DATA=1]="DATA",r[r.VALIDITY=2]="VALIDITY",r[r.TYPE=3]="TYPE"})(ve||(ve={}));var Va={};en(Va,{clampIndex:()=>k_,clampRange:()=>hi,createElementComparator:()=>Rr});var Ym=void 0;function Ye(r){if(r===null)return"null";if(r===Ym)return"undefined";switch(typeof r){case"number":return"".concat(r);case"bigint":return"".concat(r);case"string":return'"'.concat(r,'"')}return typeof r[Symbol.toPrimitive]=="function"?r[Symbol.toPrimitive]("string"):ArrayBuffer.isView(r)?r instanceof be||r instanceof ge?"[".concat([...r].map(t=>Ye(t)),"]"):"[".concat(r,"]"):ArrayBuffer.isView(r)?"[".concat(r,"]"):JSON.stringify(r,(t,e)=>typeof e=="bigint"?"".concat(e):e)}var Fa={};en(Fa,{BN:()=>di,bignumToBigInt:()=>dl,bignumToString:()=>li,isArrowBigNumSymbol:()=>ul});var ul=Symbol.for("isArrowBigNum");function Me(r,...t){return t.length===0?Object.setPrototypeOf(Y(this.TypedArray,r),this.constructor.prototype):Object.setPrototypeOf(new this.TypedArray(r,...t),this.constructor.prototype)}Me.prototype[ul]=!0;Me.prototype.toJSON=function(){return'"'.concat(li(this),'"')};Me.prototype.valueOf=function(){return ll(this)};Me.prototype.toString=function(){return li(this)};Me.prototype[Symbol.toPrimitive]=function(r="default"){switch(r){case"number":return ll(this);case"string":return li(this);case"default":return dl(this)}return li(this)};function Bn(...r){return Me.apply(this,r)}function xn(...r){return Me.apply(this,r)}function ui(...r){return Me.apply(this,r)}Object.setPrototypeOf(Bn.prototype,Object.create(Int32Array.prototype));Object.setPrototypeOf(xn.prototype,Object.create(Uint32Array.prototype));Object.setPrototypeOf(ui.prototype,Object.create(Uint32Array.prototype));Object.assign(Bn.prototype,Me.prototype,{constructor:Bn,signed:!0,TypedArray:Int32Array,BigIntArray:be});Object.assign(xn.prototype,Me.prototype,{constructor:xn,signed:!1,TypedArray:Uint32Array,BigIntArray:ge});Object.assign(ui.prototype,Me.prototype,{constructor:ui,signed:!0,TypedArray:Uint32Array,BigIntArray:ge});function ll(r){let{buffer:t,byteOffset:e,length:n,signed:i}=r,s=new ge(t,e,n),o=i&&s[s.length-1]&BigInt(1)<<BigInt(63),a=BigInt(o?1:0),l=BigInt(0);if(o){for(let c of s)a+=~c*(BigInt(1)<<BigInt(32)*l++);a*=BigInt(-1)}else for(let c of s)a+=c*(BigInt(1)<<BigInt(32)*l++);return a}var li=r=>r.byteLength===8?"".concat(new r.BigIntArray(r.buffer,r.byteOffset,1)[0]):fl(r),dl=r=>r.byteLength===8?new r.BigIntArray(r.buffer,r.byteOffset,1)[0]:fl(r);function fl(r){let t="",e=new Uint32Array(2),n=new Uint16Array(r.buffer,r.byteOffset,r.byteLength/2),i=new Uint32Array((n=new Uint16Array(n).reverse()).buffer),s=-1,o=n.length-1;do{for(e[0]=n[s=0];s<o;)n[s++]=e[1]=e[0]/10,e[0]=(e[0]-e[1]*10<<16)+n[s];n[s]=e[1]=e[0]/10,e[0]=e[0]-e[1]*10,t="".concat(e[0]).concat(t)}while(i[0]||i[1]||i[2]||i[3]);return t!=null?t:"0"}var di=class r{static new(t,e){switch(e){case!0:return new Bn(t);case!1:return new xn(t)}switch(t.constructor){case Int8Array:case Int16Array:case Int32Array:case be:return new Bn(t)}return t.byteLength===16?new ui(t):new xn(t)}static signed(t){return new Bn(t)}static unsigned(t){return new xn(t)}static decimal(t){return new ui(t)}constructor(t,e){return r.new(t,e)}};function te(r){if(typeof r=="bigint"&&(r<Number.MIN_SAFE_INTEGER||r>Number.MAX_SAFE_INTEGER))throw new TypeError("".concat(r," is not safe to convert to a number."));return Number(r)}var hl,pl,ml,_l,yl,bl,gl,wl,vl,Sl,Il,Al,Tl,Fl,Bl,xl,Dl,El,Ol,D=class r{static isNull(t){return(t==null?void 0:t.typeId)===h.Null}static isInt(t){return(t==null?void 0:t.typeId)===h.Int}static isFloat(t){return(t==null?void 0:t.typeId)===h.Float}static isBinary(t){return(t==null?void 0:t.typeId)===h.Binary}static isUtf8(t){return(t==null?void 0:t.typeId)===h.Utf8}static isBool(t){return(t==null?void 0:t.typeId)===h.Bool}static isDecimal(t){return(t==null?void 0:t.typeId)===h.Decimal}static isDate(t){return(t==null?void 0:t.typeId)===h.Date}static isTime(t){return(t==null?void 0:t.typeId)===h.Time}static isTimestamp(t){return(t==null?void 0:t.typeId)===h.Timestamp}static isInterval(t){return(t==null?void 0:t.typeId)===h.Interval}static isList(t){return(t==null?void 0:t.typeId)===h.List}static isStruct(t){return(t==null?void 0:t.typeId)===h.Struct}static isUnion(t){return(t==null?void 0:t.typeId)===h.Union}static isFixedSizeBinary(t){return(t==null?void 0:t.typeId)===h.FixedSizeBinary}static isFixedSizeList(t){return(t==null?void 0:t.typeId)===h.FixedSizeList}static isMap(t){return(t==null?void 0:t.typeId)===h.Map}static isDictionary(t){return(t==null?void 0:t.typeId)===h.Dictionary}static isDenseUnion(t){return r.isUnion(t)&&t.mode===St.Dense}static isSparseUnion(t){return r.isUnion(t)&&t.mode===St.Sparse}get typeId(){return h.NONE}};hl=Symbol.toStringTag;D[hl]=(r=>(r.children=null,r.ArrayType=Array,r[Symbol.toStringTag]="DataType"))(D.prototype);var Zt=class extends D{toString(){return"Null"}get typeId(){return h.Null}};pl=Symbol.toStringTag;Zt[pl]=(r=>r[Symbol.toStringTag]="Null")(Zt.prototype);var Tt=class extends D{constructor(t,e){super(),this.isSigned=t,this.bitWidth=e}get typeId(){return h.Int}get ArrayType(){switch(this.bitWidth){case 8:return this.isSigned?Int8Array:Uint8Array;case 16:return this.isSigned?Int16Array:Uint16Array;case 32:return this.isSigned?Int32Array:Uint32Array;case 64:return this.isSigned?be:ge}throw new Error("Unrecognized ".concat(this[Symbol.toStringTag]," type"))}toString(){return"".concat(this.isSigned?"I":"Ui","nt").concat(this.bitWidth)}};ml=Symbol.toStringTag;Tt[ml]=(r=>(r.isSigned=null,r.bitWidth=null,r[Symbol.toStringTag]="Int"))(Tt.prototype);var xs=class extends Tt{constructor(){super(!0,8)}get ArrayType(){return Int8Array}},Ds=class extends Tt{constructor(){super(!0,16)}get ArrayType(){return Int16Array}},Xe=class extends Tt{constructor(){super(!0,32)}get ArrayType(){return Int32Array}},Es=class extends Tt{constructor(){super(!0,64)}get ArrayType(){return be}},Os=class extends Tt{constructor(){super(!1,8)}get ArrayType(){return Uint8Array}},Ms=class extends Tt{constructor(){super(!1,16)}get ArrayType(){return Uint16Array}},Rs=class extends Tt{constructor(){super(!1,32)}get ArrayType(){return Uint32Array}},Us=class extends Tt{constructor(){super(!1,64)}get ArrayType(){return ge}};Object.defineProperty(xs.prototype,"ArrayType",{value:Int8Array});Object.defineProperty(Ds.prototype,"ArrayType",{value:Int16Array});Object.defineProperty(Xe.prototype,"ArrayType",{value:Int32Array});Object.defineProperty(Es.prototype,"ArrayType",{value:be});Object.defineProperty(Os.prototype,"ArrayType",{value:Uint8Array});Object.defineProperty(Ms.prototype,"ArrayType",{value:Uint16Array});Object.defineProperty(Rs.prototype,"ArrayType",{value:Uint32Array});Object.defineProperty(Us.prototype,"ArrayType",{value:ge});var ee=class extends D{constructor(t){super(),this.precision=t}get typeId(){return h.Float}get ArrayType(){switch(this.precision){case _t.HALF:return Uint16Array;case _t.SINGLE:return Float32Array;case _t.DOUBLE:return Float64Array}throw new Error("Unrecognized ".concat(this[Symbol.toStringTag]," type"))}toString(){return"Float".concat(this.precision<<5||16)}};_l=Symbol.toStringTag;ee[_l]=(r=>(r.precision=null,r[Symbol.toStringTag]="Float"))(ee.prototype);var Ls=class extends ee{constructor(){super(_t.HALF)}},ks=class extends ee{constructor(){super(_t.SINGLE)}},Ns=class extends ee{constructor(){super(_t.DOUBLE)}};Object.defineProperty(Ls.prototype,"ArrayType",{value:Uint16Array});Object.defineProperty(ks.prototype,"ArrayType",{value:Float32Array});Object.defineProperty(Ns.prototype,"ArrayType",{value:Float64Array});var ur=class extends D{constructor(){super()}get typeId(){return h.Binary}toString(){return"Binary"}};yl=Symbol.toStringTag;ur[yl]=(r=>(r.ArrayType=Uint8Array,r[Symbol.toStringTag]="Binary"))(ur.prototype);var lr=class extends D{constructor(){super()}get typeId(){return h.Utf8}toString(){return"Utf8"}};bl=Symbol.toStringTag;lr[bl]=(r=>(r.ArrayType=Uint8Array,r[Symbol.toStringTag]="Utf8"))(lr.prototype);var dr=class extends D{constructor(){super()}get typeId(){return h.Bool}toString(){return"Bool"}};gl=Symbol.toStringTag;dr[gl]=(r=>(r.ArrayType=Uint8Array,r[Symbol.toStringTag]="Bool"))(dr.prototype);var fr=class extends D{constructor(t,e,n=128){super(),this.scale=t,this.precision=e,this.bitWidth=n}get typeId(){return h.Decimal}toString(){return"Decimal[".concat(this.precision,"e").concat(this.scale>0?"+":"").concat(this.scale,"]")}};wl=Symbol.toStringTag;fr[wl]=(r=>(r.scale=null,r.precision=null,r.ArrayType=Uint32Array,r[Symbol.toStringTag]="Decimal"))(fr.prototype);var hr=class extends D{constructor(t){super(),this.unit=t}get typeId(){return h.Date}toString(){return"Date".concat((this.unit+1)*32,"<").concat(Vt[this.unit],">")}};vl=Symbol.toStringTag;hr[vl]=(r=>(r.unit=null,r.ArrayType=Int32Array,r[Symbol.toStringTag]="Date"))(hr.prototype);var Re=class extends D{constructor(t,e){super(),this.unit=t,this.bitWidth=e}get typeId(){return h.Time}toString(){return"Time".concat(this.bitWidth,"<").concat(J[this.unit],">")}get ArrayType(){switch(this.bitWidth){case 32:return Int32Array;case 64:return be}throw new Error("Unrecognized ".concat(this[Symbol.toStringTag]," type"))}};Sl=Symbol.toStringTag;Re[Sl]=(r=>(r.unit=null,r.bitWidth=null,r[Symbol.toStringTag]="Time"))(Re.prototype);var pr=class extends D{constructor(t,e){super(),this.unit=t,this.timezone=e}get typeId(){return h.Timestamp}toString(){return"Timestamp<".concat(J[this.unit]).concat(this.timezone?", ".concat(this.timezone):"",">")}};Il=Symbol.toStringTag;pr[Il]=(r=>(r.unit=null,r.timezone=null,r.ArrayType=Int32Array,r[Symbol.toStringTag]="Timestamp"))(pr.prototype);var mr=class extends D{constructor(t){super(),this.unit=t}get typeId(){return h.Interval}toString(){return"Interval<".concat(qt[this.unit],">")}};Al=Symbol.toStringTag;mr[Al]=(r=>(r.unit=null,r.ArrayType=Int32Array,r[Symbol.toStringTag]="Interval"))(mr.prototype);var Ue=class extends D{constructor(t){super(),this.children=[t]}get typeId(){return h.List}toString(){return"List<".concat(this.valueType,">")}get valueType(){return this.children[0].type}get valueField(){return this.children[0]}get ArrayType(){return this.valueType.ArrayType}};Tl=Symbol.toStringTag;Ue[Tl]=(r=>(r.children=null,r[Symbol.toStringTag]="List"))(Ue.prototype);var ft=class extends D{constructor(t){super(),this.children=t}get typeId(){return h.Struct}toString(){return"Struct<{".concat(this.children.map(t=>"".concat(t.name,":").concat(t.type)).join(", "),"}>")}};Fl=Symbol.toStringTag;ft[Fl]=(r=>(r.children=null,r[Symbol.toStringTag]="Struct"))(ft.prototype);var Le=class extends D{constructor(t,e,n){super(),this.mode=t,this.children=n,this.typeIds=e=Int32Array.from(e),this.typeIdToChildIndex=e.reduce((i,s,o)=>(i[s]=o)&&i||i,Object.create(null))}get typeId(){return h.Union}toString(){return"".concat(this[Symbol.toStringTag],"<").concat(this.children.map(t=>"".concat(t.type)).join(" | "),">")}};Bl=Symbol.toStringTag;Le[Bl]=(r=>(r.mode=null,r.typeIds=null,r.children=null,r.typeIdToChildIndex=null,r.ArrayType=Int8Array,r[Symbol.toStringTag]="Union"))(Le.prototype);var _r=class extends D{constructor(t){super(),this.byteWidth=t}get typeId(){return h.FixedSizeBinary}toString(){return"FixedSizeBinary[".concat(this.byteWidth,"]")}};xl=Symbol.toStringTag;_r[xl]=(r=>(r.byteWidth=null,r.ArrayType=Uint8Array,r[Symbol.toStringTag]="FixedSizeBinary"))(_r.prototype);var ke=class extends D{constructor(t,e){super(),this.listSize=t,this.children=[e]}get typeId(){return h.FixedSizeList}get valueType(){return this.children[0].type}get valueField(){return this.children[0]}get ArrayType(){return this.valueType.ArrayType}toString(){return"FixedSizeList[".concat(this.listSize,"]<").concat(this.valueType,">")}};Dl=Symbol.toStringTag;ke[Dl]=(r=>(r.children=null,r.listSize=null,r[Symbol.toStringTag]="FixedSizeList"))(ke.prototype);var Ne=class extends D{constructor(t,e=!1){super(),this.children=[t],this.keysSorted=e}get typeId(){return h.Map}get keyType(){return this.children[0].type.children[0].type}get valueType(){return this.children[0].type.children[1].type}get childType(){return this.children[0].type}toString(){return"Map<{".concat(this.children[0].type.children.map(t=>"".concat(t.name,":").concat(t.type)).join(", "),"}>")}};El=Symbol.toStringTag;Ne[El]=(r=>(r.children=null,r.keysSorted=null,r[Symbol.toStringTag]="Map_"))(Ne.prototype);var Xm=(r=>()=>++r)(-1),le=class extends D{constructor(t,e,n,i){super(),this.indices=e,this.dictionary=t,this.isOrdered=i||!1,this.id=n==null?Xm():te(n)}get typeId(){return h.Dictionary}get children(){return this.dictionary.children}get valueType(){return this.dictionary}get ArrayType(){return this.dictionary.ArrayType}toString(){return"Dictionary<".concat(this.indices,", ").concat(this.dictionary,">")}};Ol=Symbol.toStringTag;le[Ol]=(r=>(r.id=null,r.indices=null,r.isOrdered=null,r.dictionary=null,r[Symbol.toStringTag]="Dictionary"))(le.prototype);function de(r){let t=r;switch(r.typeId){case h.Decimal:return r.bitWidth/32;case h.Timestamp:return 2;case h.Date:return 1+t.unit;case h.Interval:return 1+t.unit;case h.FixedSizeList:return t.listSize;case h.FixedSizeBinary:return t.byteWidth;default:return 1}}var E=class{visitMany(t,...e){return t.map((n,i)=>this.visit(n,...e.map(s=>s[i])))}visit(...t){return this.getVisitFn(t[0],!1).apply(this,t)}getVisitFn(t,e=!0){return Gm(this,t,e)}getVisitFnByTypeId(t,e=!0){return Dn(this,t,e)}visitNull(t,...e){return null}visitBool(t,...e){return null}visitInt(t,...e){return null}visitFloat(t,...e){return null}visitUtf8(t,...e){return null}visitBinary(t,...e){return null}visitFixedSizeBinary(t,...e){return null}visitDate(t,...e){return null}visitTimestamp(t,...e){return null}visitTime(t,...e){return null}visitDecimal(t,...e){return null}visitList(t,...e){return null}visitStruct(t,...e){return null}visitUnion(t,...e){return null}visitDictionary(t,...e){return null}visitInterval(t,...e){return null}visitFixedSizeList(t,...e){return null}visitMap(t,...e){return null}};function Gm(r,t,e=!0){return typeof t=="number"?Dn(r,t,e):typeof t=="string"&&t in h?Dn(r,h[t],e):t&&t instanceof D?Dn(r,Ml(t),e):t!=null&&t.type&&t.type instanceof D?Dn(r,Ml(t.type),e):Dn(r,h.NONE,e)}function Dn(r,t,e=!0){let n=null;switch(t){case h.Null:n=r.visitNull;break;case h.Bool:n=r.visitBool;break;case h.Int:n=r.visitInt;break;case h.Int8:n=r.visitInt8||r.visitInt;break;case h.Int16:n=r.visitInt16||r.visitInt;break;case h.Int32:n=r.visitInt32||r.visitInt;break;case h.Int64:n=r.visitInt64||r.visitInt;break;case h.Uint8:n=r.visitUint8||r.visitInt;break;case h.Uint16:n=r.visitUint16||r.visitInt;break;case h.Uint32:n=r.visitUint32||r.visitInt;break;case h.Uint64:n=r.visitUint64||r.visitInt;break;case h.Float:n=r.visitFloat;break;case h.Float16:n=r.visitFloat16||r.visitFloat;break;case h.Float32:n=r.visitFloat32||r.visitFloat;break;case h.Float64:n=r.visitFloat64||r.visitFloat;break;case h.Utf8:n=r.visitUtf8;break;case h.Binary:n=r.visitBinary;break;case h.FixedSizeBinary:n=r.visitFixedSizeBinary;break;case h.Date:n=r.visitDate;break;case h.DateDay:n=r.visitDateDay||r.visitDate;break;case h.DateMillisecond:n=r.visitDateMillisecond||r.visitDate;break;case h.Timestamp:n=r.visitTimestamp;break;case h.TimestampSecond:n=r.visitTimestampSecond||r.visitTimestamp;break;case h.TimestampMillisecond:n=r.visitTimestampMillisecond||r.visitTimestamp;break;case h.TimestampMicrosecond:n=r.visitTimestampMicrosecond||r.visitTimestamp;break;case h.TimestampNanosecond:n=r.visitTimestampNanosecond||r.visitTimestamp;break;case h.Time:n=r.visitTime;break;case h.TimeSecond:n=r.visitTimeSecond||r.visitTime;break;case h.TimeMillisecond:n=r.visitTimeMillisecond||r.visitTime;break;case h.TimeMicrosecond:n=r.visitTimeMicrosecond||r.visitTime;break;case h.TimeNanosecond:n=r.visitTimeNanosecond||r.visitTime;break;case h.Decimal:n=r.visitDecimal;break;case h.List:n=r.visitList;break;case h.Struct:n=r.visitStruct;break;case h.Union:n=r.visitUnion;break;case h.DenseUnion:n=r.visitDenseUnion||r.visitUnion;break;case h.SparseUnion:n=r.visitSparseUnion||r.visitUnion;break;case h.Dictionary:n=r.visitDictionary;break;case h.Interval:n=r.visitInterval;break;case h.IntervalDayTime:n=r.visitIntervalDayTime||r.visitInterval;break;case h.IntervalYearMonth:n=r.visitIntervalYearMonth||r.visitInterval;break;case h.FixedSizeList:n=r.visitFixedSizeList;break;case h.Map:n=r.visitMap;break}if(typeof n=="function")return n;if(!e)return()=>null;throw new Error("Unrecognized type '".concat(h[t],"'"))}function Ml(r){switch(r.typeId){case h.Null:return h.Null;case h.Int:{let{bitWidth:t,isSigned:e}=r;switch(t){case 8:return e?h.Int8:h.Uint8;case 16:return e?h.Int16:h.Uint16;case 32:return e?h.Int32:h.Uint32;case 64:return e?h.Int64:h.Uint64}return h.Int}case h.Float:switch(r.precision){case _t.HALF:return h.Float16;case _t.SINGLE:return h.Float32;case _t.DOUBLE:return h.Float64}return h.Float;case h.Binary:return h.Binary;case h.Utf8:return h.Utf8;case h.Bool:return h.Bool;case h.Decimal:return h.Decimal;case h.Time:switch(r.unit){case J.SECOND:return h.TimeSecond;case J.MILLISECOND:return h.TimeMillisecond;case J.MICROSECOND:return h.TimeMicrosecond;case J.NANOSECOND:return h.TimeNanosecond}return h.Time;case h.Timestamp:switch(r.unit){case J.SECOND:return h.TimestampSecond;case J.MILLISECOND:return h.TimestampMillisecond;case J.MICROSECOND:return h.TimestampMicrosecond;case J.NANOSECOND:return h.TimestampNanosecond}return h.Timestamp;case h.Date:switch(r.unit){case Vt.DAY:return h.DateDay;case Vt.MILLISECOND:return h.DateMillisecond}return h.Date;case h.Interval:switch(r.unit){case qt.DAY_TIME:return h.IntervalDayTime;case qt.YEAR_MONTH:return h.IntervalYearMonth}return h.Interval;case h.Map:return h.Map;case h.List:return h.List;case h.Struct:return h.Struct;case h.Union:switch(r.mode){case St.Dense:return h.DenseUnion;case St.Sparse:return h.SparseUnion}return h.Union;case h.FixedSizeBinary:return h.FixedSizeBinary;case h.FixedSizeList:return h.FixedSizeList;case h.Dictionary:return h.Dictionary}throw new Error("Unrecognized type '".concat(h[r.typeId],"'"))}E.prototype.visitInt8=null;E.prototype.visitInt16=null;E.prototype.visitInt32=null;E.prototype.visitInt64=null;E.prototype.visitUint8=null;E.prototype.visitUint16=null;E.prototype.visitUint32=null;E.prototype.visitUint64=null;E.prototype.visitFloat16=null;E.prototype.visitFloat32=null;E.prototype.visitFloat64=null;E.prototype.visitDateDay=null;E.prototype.visitDateMillisecond=null;E.prototype.visitTimestampSecond=null;E.prototype.visitTimestampMillisecond=null;E.prototype.visitTimestampMicrosecond=null;E.prototype.visitTimestampNanosecond=null;E.prototype.visitTimeSecond=null;E.prototype.visitTimeMillisecond=null;E.prototype.visitTimeMicrosecond=null;E.prototype.visitTimeNanosecond=null;E.prototype.visitDenseUnion=null;E.prototype.visitSparseUnion=null;E.prototype.visitIntervalDayTime=null;E.prototype.visitIntervalYearMonth=null;var Ba={};en(Ba,{float64ToUint16:()=>fi,uint16ToFloat64:()=>Cs});var Rl=new Float64Array(1),En=new Uint32Array(Rl.buffer);function Cs(r){let t=(r&31744)>>10,e=(r&1023)/1024,n=Math.pow(-1,(r&32768)>>15);switch(t){case 31:return n*(e?Number.NaN:1/0);case 0:return n*(e?6103515625e-14*e:0)}return n*Math.pow(2,t-15)*(1+e)}function fi(r){if(r!==r)return 32256;Rl[0]=r;let t=(En[1]&2147483648)>>16&65535,e=En[1]&2146435072,n=0;return e>=1089470464?En[0]>0?e=31744:(e=(e&2080374784)>>16,n=(En[1]&1048575)>>10):e<=1056964608?(n=1048576+(En[1]&1048575),n=1048576+(n<<(e>>20)-998)>>21,e=0):(e=e-1056964608>>10,n=(En[1]&1048575)+512>>10),t|e|n&65535}var C=class extends E{};function $(r){return(t,e,n)=>{if(t.setValid(e,n!=null))return r(t,e,n)}}var Km=(r,t,e)=>{r[t]=Math.trunc(e/864e5)},xa=(r,t,e)=>{r[t]=Math.trunc(e%4294967296),r[t+1]=Math.trunc(e/4294967296)},Jm=(r,t,e)=>{r[t]=Math.trunc(e*1e3%4294967296),r[t+1]=Math.trunc(e*1e3/4294967296)},qm=(r,t,e)=>{r[t]=Math.trunc(e*1e6%4294967296),r[t+1]=Math.trunc(e*1e6/4294967296)},Ul=(r,t,e,n)=>{if(e+1<t.length){let{[e]:i,[e+1]:s}=t;r.set(n.subarray(0,s-i),i)}},Zm=({offset:r,values:t},e,n)=>{let i=r+e;n?t[i>>3]|=1<<i%8:t[i>>3]&=~(1<<i%8)},yr=({values:r},t,e)=>{r[t]=e},Da=({values:r},t,e)=>{r[t]=e},Ll=({values:r},t,e)=>{r[t]=fi(e)},Qm=(r,t,e)=>{switch(r.type.precision){case _t.HALF:return Ll(r,t,e);case _t.SINGLE:case _t.DOUBLE:return Da(r,t,e)}},Ps=({values:r},t,e)=>{Km(r,t,e.valueOf())},Hs=({values:r},t,e)=>{xa(r,t*2,e.valueOf())},Ea=({stride:r,values:t},e,n)=>{t.set(n.subarray(0,r),r*e)},t_=({values:r,valueOffsets:t},e,n)=>Ul(r,t,e,n),e_=({values:r,valueOffsets:t},e,n)=>{Ul(r,t,e,Er(n))},Oa=(r,t,e)=>{r.type.unit===Vt.DAY?Ps(r,t,e):Hs(r,t,e)},Vs=({values:r},t,e)=>xa(r,t*2,e/1e3),zs=({values:r},t,e)=>xa(r,t*2,e),Ws=({values:r},t,e)=>Jm(r,t*2,e),js=({values:r},t,e)=>qm(r,t*2,e),Ma=(r,t,e)=>{switch(r.type.unit){case J.SECOND:return Vs(r,t,e);case J.MILLISECOND:return zs(r,t,e);case J.MICROSECOND:return Ws(r,t,e);case J.NANOSECOND:return js(r,t,e)}},$s=({values:r},t,e)=>{r[t]=e},Ys=({values:r},t,e)=>{r[t]=e},Xs=({values:r},t,e)=>{r[t]=e},Gs=({values:r},t,e)=>{r[t]=e},Ra=(r,t,e)=>{switch(r.type.unit){case J.SECOND:return $s(r,t,e);case J.MILLISECOND:return Ys(r,t,e);case J.MICROSECOND:return Xs(r,t,e);case J.NANOSECOND:return Gs(r,t,e)}},Ua=({values:r,stride:t},e,n)=>{r.set(n.subarray(0,t),t*e)},r_=(r,t,e)=>{let n=r.children[0],i=r.valueOffsets,s=zt.getVisitFn(n);if(Array.isArray(e))for(let o=-1,a=i[t],l=i[t+1];a<l;)s(n,a++,e[++o]);else for(let o=-1,a=i[t],l=i[t+1];a<l;)s(n,a++,e.get(++o))},n_=(r,t,e)=>{let n=r.children[0],{valueOffsets:i}=r,s=zt.getVisitFn(n),{[t]:o,[t+1]:a}=i,l=e instanceof Map?e.entries():Object.entries(e);for(let c of l)if(s(n,o,c),++o>=a)break},i_=(r,t)=>(e,n,i,s)=>n&&e(n,r,t[s]),s_=(r,t)=>(e,n,i,s)=>n&&e(n,r,t.get(s)),o_=(r,t)=>(e,n,i,s)=>n&&e(n,r,t.get(i.name)),a_=(r,t)=>(e,n,i,s)=>n&&e(n,r,t[i.name]),c_=(r,t,e)=>{let n=r.type.children.map(s=>zt.getVisitFn(s.type)),i=e instanceof Map?o_(t,e):e instanceof q?s_(t,e):Array.isArray(e)?i_(t,e):a_(t,e);r.type.children.forEach((s,o)=>i(n[o],r.children[o],s,o))},u_=(r,t,e)=>{r.type.mode===St.Dense?kl(r,t,e):Nl(r,t,e)},kl=(r,t,e)=>{let n=r.type.typeIdToChildIndex[r.typeIds[t]],i=r.children[n];zt.visit(i,r.valueOffsets[t],e)},Nl=(r,t,e)=>{let n=r.type.typeIdToChildIndex[r.typeIds[t]],i=r.children[n];zt.visit(i,t,e)},l_=(r,t,e)=>{var n;(n=r.dictionary)===null||n===void 0||n.set(r.values[t],e)},La=(r,t,e)=>{r.type.unit===qt.DAY_TIME?Ks(r,t,e):Js(r,t,e)},Ks=({values:r},t,e)=>{r.set(e.subarray(0,2),2*t)},Js=({values:r},t,e)=>{r[t]=e[0]*12+e[1]%12},d_=(r,t,e)=>{let{stride:n}=r,i=r.children[0],s=zt.getVisitFn(i);if(Array.isArray(e))for(let o=-1,a=t*n;++o<n;)s(i,a+o,e[o]);else for(let o=-1,a=t*n;++o<n;)s(i,a+o,e.get(o))};C.prototype.visitBool=$(Zm);C.prototype.visitInt=$(yr);C.prototype.visitInt8=$(yr);C.prototype.visitInt16=$(yr);C.prototype.visitInt32=$(yr);C.prototype.visitInt64=$(yr);C.prototype.visitUint8=$(yr);C.prototype.visitUint16=$(yr);C.prototype.visitUint32=$(yr);C.prototype.visitUint64=$(yr);C.prototype.visitFloat=$(Qm);C.prototype.visitFloat16=$(Ll);C.prototype.visitFloat32=$(Da);C.prototype.visitFloat64=$(Da);C.prototype.visitUtf8=$(e_);C.prototype.visitBinary=$(t_);C.prototype.visitFixedSizeBinary=$(Ea);C.prototype.visitDate=$(Oa);C.prototype.visitDateDay=$(Ps);C.prototype.visitDateMillisecond=$(Hs);C.prototype.visitTimestamp=$(Ma);C.prototype.visitTimestampSecond=$(Vs);C.prototype.visitTimestampMillisecond=$(zs);C.prototype.visitTimestampMicrosecond=$(Ws);C.prototype.visitTimestampNanosecond=$(js);C.prototype.visitTime=$(Ra);C.prototype.visitTimeSecond=$($s);C.prototype.visitTimeMillisecond=$(Ys);C.prototype.visitTimeMicrosecond=$(Xs);C.prototype.visitTimeNanosecond=$(Gs);C.prototype.visitDecimal=$(Ua);C.prototype.visitList=$(r_);C.prototype.visitStruct=$(c_);C.prototype.visitUnion=$(u_);C.prototype.visitDenseUnion=$(kl);C.prototype.visitSparseUnion=$(Nl);C.prototype.visitDictionary=$(l_);C.prototype.visitInterval=$(La);C.prototype.visitIntervalDayTime=$(Ks);C.prototype.visitIntervalYearMonth=$(Js);C.prototype.visitFixedSizeList=$(d_);C.prototype.visitMap=$(n_);var zt=new C;var Ce=Symbol.for("parent"),On=Symbol.for("rowIndex"),Or=class{constructor(t,e){return this[Ce]=t,this[On]=e,new Proxy(this,new Na)}toArray(){return Object.values(this.toJSON())}toJSON(){let t=this[On],e=this[Ce],n=e.type.children,i={};for(let s=-1,o=n.length;++s<o;)i[n[s].name]=Bt.visit(e.children[s],t);return i}toString(){return"{".concat([...this].map(([t,e])=>"".concat(Ye(t),": ").concat(Ye(e))).join(", "),"}")}[Symbol.for("nodejs.util.inspect.custom")](){return this.toString()}[Symbol.iterator](){return new ka(this[Ce],this[On])}},ka=class{constructor(t,e){this.childIndex=0,this.children=t.children,this.rowIndex=e,this.childFields=t.type.children,this.numChildren=this.childFields.length}[Symbol.iterator](){return this}next(){let t=this.childIndex;return t<this.numChildren?(this.childIndex=t+1,{done:!1,value:[this.childFields[t].name,Bt.visit(this.children[t],this.rowIndex)]}):{done:!0,value:null}}};Object.defineProperties(Or.prototype,{[Symbol.toStringTag]:{enumerable:!1,configurable:!1,value:"Row"},[Ce]:{writable:!0,enumerable:!1,configurable:!1,value:null},[On]:{writable:!0,enumerable:!1,configurable:!1,value:-1}});var Na=class{isExtensible(){return!1}deleteProperty(){return!1}preventExtensions(){return!0}ownKeys(t){return t[Ce].type.children.map(e=>e.name)}has(t,e){return t[Ce].type.children.findIndex(n=>n.name===e)!==-1}getOwnPropertyDescriptor(t,e){if(t[Ce].type.children.findIndex(n=>n.name===e)!==-1)return{writable:!0,enumerable:!0,configurable:!0}}get(t,e){if(Reflect.has(t,e))return t[e];let n=t[Ce].type.children.findIndex(i=>i.name===e);if(n!==-1){let i=Bt.visit(t[Ce].children[n],t[On]);return Reflect.set(t,e,i),i}}set(t,e,n){let i=t[Ce].type.children.findIndex(s=>s.name===e);return i!==-1?(zt.visit(t[Ce].children[i],t[On],n),Reflect.set(t,e,n)):Reflect.has(t,e)||typeof e=="symbol"?Reflect.set(t,e,n):!1}};var M=class extends E{};function z(r){return(t,e)=>t.getValid(e)?r(t,e):null}var f_=(r,t)=>864e5*r[t],Ca=(r,t)=>4294967296*r[t+1]+(r[t]>>>0),h_=(r,t)=>4294967296*(r[t+1]/1e3)+(r[t]>>>0)/1e3,p_=(r,t)=>4294967296*(r[t+1]/1e6)+(r[t]>>>0)/1e6,Cl=r=>new Date(r),m_=(r,t)=>Cl(f_(r,t)),__=(r,t)=>Cl(Ca(r,t)),y_=(r,t)=>null,Pl=(r,t,e)=>{if(e+1>=t.length)return null;let n=t[e],i=t[e+1];return r.subarray(n,i)},b_=({offset:r,values:t},e)=>{let n=r+e;return(t[n>>3]&1<<n%8)!==0},Hl=({values:r},t)=>m_(r,t),Vl=({values:r},t)=>__(r,t*2),Mr=({stride:r,values:t},e)=>t[r*e],g_=({stride:r,values:t},e)=>Cs(t[r*e]),zl=({values:r},t)=>r[t],w_=({stride:r,values:t},e)=>t.subarray(r*e,r*(e+1)),v_=({values:r,valueOffsets:t},e)=>Pl(r,t,e),S_=({values:r,valueOffsets:t},e)=>{let n=Pl(r,t,e);return n!==null?oi(n):null},I_=({values:r},t)=>r[t],A_=({type:r,values:t},e)=>r.precision!==_t.HALF?t[e]:Cs(t[e]),T_=(r,t)=>r.type.unit===Vt.DAY?Hl(r,t):Vl(r,t),Wl=({values:r},t)=>1e3*Ca(r,t*2),jl=({values:r},t)=>Ca(r,t*2),$l=({values:r},t)=>h_(r,t*2),Yl=({values:r},t)=>p_(r,t*2),F_=(r,t)=>{switch(r.type.unit){case J.SECOND:return Wl(r,t);case J.MILLISECOND:return jl(r,t);case J.MICROSECOND:return $l(r,t);case J.NANOSECOND:return Yl(r,t)}},Xl=({values:r},t)=>r[t],Gl=({values:r},t)=>r[t],Kl=({values:r},t)=>r[t],Jl=({values:r},t)=>r[t],B_=(r,t)=>{switch(r.type.unit){case J.SECOND:return Xl(r,t);case J.MILLISECOND:return Gl(r,t);case J.MICROSECOND:return Kl(r,t);case J.NANOSECOND:return Jl(r,t)}},x_=({values:r,stride:t},e)=>di.decimal(r.subarray(t*e,t*(e+1))),D_=(r,t)=>{let{valueOffsets:e,stride:n,children:i}=r,{[t*n]:s,[t*n+1]:o}=e,l=i[0].slice(s,o-s);return new q([l])},E_=(r,t)=>{let{valueOffsets:e,children:n}=r,{[t]:i,[t+1]:s}=e,o=n[0];return new Ge(o.slice(i,s-i))},O_=(r,t)=>new Or(r,t),M_=(r,t)=>r.type.mode===St.Dense?ql(r,t):Zl(r,t),ql=(r,t)=>{let e=r.type.typeIdToChildIndex[r.typeIds[t]],n=r.children[e];return Bt.visit(n,r.valueOffsets[t])},Zl=(r,t)=>{let e=r.type.typeIdToChildIndex[r.typeIds[t]],n=r.children[e];return Bt.visit(n,t)},R_=(r,t)=>{var e;return(e=r.dictionary)===null||e===void 0?void 0:e.get(r.values[t])},U_=(r,t)=>r.type.unit===qt.DAY_TIME?Ql(r,t):td(r,t),Ql=({values:r},t)=>r.subarray(2*t,2*(t+1)),td=({values:r},t)=>{let e=r[t],n=new Int32Array(2);return n[0]=Math.trunc(e/12),n[1]=Math.trunc(e%12),n},L_=(r,t)=>{let{stride:e,children:n}=r,s=n[0].slice(t*e,e);return new q([s])};M.prototype.visitNull=z(y_);M.prototype.visitBool=z(b_);M.prototype.visitInt=z(I_);M.prototype.visitInt8=z(Mr);M.prototype.visitInt16=z(Mr);M.prototype.visitInt32=z(Mr);M.prototype.visitInt64=z(zl);M.prototype.visitUint8=z(Mr);M.prototype.visitUint16=z(Mr);M.prototype.visitUint32=z(Mr);M.prototype.visitUint64=z(zl);M.prototype.visitFloat=z(A_);M.prototype.visitFloat16=z(g_);M.prototype.visitFloat32=z(Mr);M.prototype.visitFloat64=z(Mr);M.prototype.visitUtf8=z(S_);M.prototype.visitBinary=z(v_);M.prototype.visitFixedSizeBinary=z(w_);M.prototype.visitDate=z(T_);M.prototype.visitDateDay=z(Hl);M.prototype.visitDateMillisecond=z(Vl);M.prototype.visitTimestamp=z(F_);M.prototype.visitTimestampSecond=z(Wl);M.prototype.visitTimestampMillisecond=z(jl);M.prototype.visitTimestampMicrosecond=z($l);M.prototype.visitTimestampNanosecond=z(Yl);M.prototype.visitTime=z(B_);M.prototype.visitTimeSecond=z(Xl);M.prototype.visitTimeMillisecond=z(Gl);M.prototype.visitTimeMicrosecond=z(Kl);M.prototype.visitTimeNanosecond=z(Jl);M.prototype.visitDecimal=z(x_);M.prototype.visitList=z(D_);M.prototype.visitStruct=z(O_);M.prototype.visitUnion=z(M_);M.prototype.visitDenseUnion=z(ql);M.prototype.visitSparseUnion=z(Zl);M.prototype.visitDictionary=z(R_);M.prototype.visitInterval=z(U_);M.prototype.visitIntervalDayTime=z(Ql);M.prototype.visitIntervalYearMonth=z(td);M.prototype.visitFixedSizeList=z(L_);M.prototype.visitMap=z(E_);var Bt=new M;var Se=Symbol.for("keys"),Mn=Symbol.for("vals"),Ge=class{constructor(t){return this[Se]=new q([t.children[0]]).memoize(),this[Mn]=t.children[1],new Proxy(this,new Ha)}[Symbol.iterator](){return new Pa(this[Se],this[Mn])}get size(){return this[Se].length}toArray(){return Object.values(this.toJSON())}toJSON(){let t=this[Se],e=this[Mn],n={};for(let i=-1,s=t.length;++i<s;)n[t.get(i)]=Bt.visit(e,i);return n}toString(){return"{".concat([...this].map(([t,e])=>"".concat(Ye(t),": ").concat(Ye(e))).join(", "),"}")}[Symbol.for("nodejs.util.inspect.custom")](){return this.toString()}},Pa=class{constructor(t,e){this.keys=t,this.vals=e,this.keyIndex=0,this.numKeys=t.length}[Symbol.iterator](){return this}next(){let t=this.keyIndex;return t===this.numKeys?{done:!0,value:null}:(this.keyIndex++,{done:!1,value:[this.keys.get(t),Bt.visit(this.vals,t)]})}},Ha=class{isExtensible(){return!1}deleteProperty(){return!1}preventExtensions(){return!0}ownKeys(t){return t[Se].toArray().map(String)}has(t,e){return t[Se].includes(e)}getOwnPropertyDescriptor(t,e){if(t[Se].indexOf(e)!==-1)return{writable:!0,enumerable:!0,configurable:!0}}get(t,e){if(Reflect.has(t,e))return t[e];let n=t[Se].indexOf(e);if(n!==-1){let i=Bt.visit(Reflect.get(t,Mn),n);return Reflect.set(t,e,i),i}}set(t,e,n){let i=t[Se].indexOf(e);return i!==-1?(zt.visit(Reflect.get(t,Mn),i,n),Reflect.set(t,e,n)):Reflect.has(t,e)?Reflect.set(t,e,n):!1}};Object.defineProperties(Ge.prototype,{[Symbol.toStringTag]:{enumerable:!1,configurable:!1,value:"Row"},[Se]:{writable:!0,enumerable:!1,configurable:!1,value:null},[Mn]:{writable:!0,enumerable:!1,configurable:!1,value:null}});function k_(r,t,e){let n=r.length,i=t>-1?t:n+t%n;return e?e(r,i):i}var ed;function hi(r,t,e,n){let{length:i=0}=r,s=typeof t!="number"?0:t,o=typeof e!="number"?i:e;return s<0&&(s=(s%i+i)%i),o<0&&(o=(o%i+i)%i),o<s&&(ed=s,s=o,o=ed),o>i&&(o=i),n?n(r,s,o):[s,o]}var rd=r=>r!==r;function Rr(r){if(typeof r!=="object"||r===null)return rd(r)?rd:e=>e===r;if(r instanceof Date){let e=r.valueOf();return n=>n instanceof Date?n.valueOf()===e:!1}return ArrayBuffer.isView(r)?e=>e?Sa(r,e):!1:r instanceof Map?C_(r):Array.isArray(r)?N_(r):r instanceof q?P_(r):H_(r,!0)}function N_(r){let t=[];for(let e=-1,n=r.length;++e<n;)t[e]=Rr(r[e]);return qs(t)}function C_(r){let t=-1,e=[];for(let n of r.values())e[++t]=Rr(n);return qs(e)}function P_(r){let t=[];for(let e=-1,n=r.length;++e<n;)t[e]=Rr(r.get(e));return qs(t)}function H_(r,t=!1){let e=Object.keys(r);if(!t&&e.length===0)return()=>!1;let n=[];for(let i=-1,s=e.length;++i<s;)n[i]=Rr(r[e[i]]);return qs(n,e)}function qs(r,t){return e=>{if(!e||typeof e!="object")return!1;switch(e.constructor){case Array:return V_(r,e);case Map:return nd(r,e,e.keys());case Ge:case Or:case Object:case void 0:return nd(r,e,t||Object.keys(e))}return e instanceof q?z_(r,e):!1}}function V_(r,t){let e=r.length;if(t.length!==e)return!1;for(let n=-1;++n<e;)if(!r[n](t[n]))return!1;return!0}function z_(r,t){let e=r.length;if(t.length!==e)return!1;for(let n=-1;++n<e;)if(!r[n](t.get(n)))return!1;return!0}function nd(r,t,e){let n=e[Symbol.iterator](),i=t instanceof Map?t.keys():Object.keys(t)[Symbol.iterator](),s=t instanceof Map?t.values():Object.values(t)[Symbol.iterator](),o=0,a=r.length,l=s.next(),c=n.next(),m=i.next();for(;o<a&&!c.done&&!m.done&&!l.done&&!(c.value!==m.value||!r[o](l.value));++o,c=n.next(),m=i.next(),l=s.next());return o===a&&c.done&&m.done&&l.done?!0:(n.return&&n.return(),i.return&&i.return(),s.return&&s.return(),!1)}var za={};en(za,{BitIterator:()=>sn,getBit:()=>id,getBool:()=>Qs,packBools:()=>on,popcnt_array:()=>sd,popcnt_bit_range:()=>pi,popcnt_uint32:()=>Zs,setBool:()=>W_,truncateBitmap:()=>Rn});function Qs(r,t,e,n){return(e&1<<n)!==0}function id(r,t,e,n){return(e&1<<n)>>n}function W_(r,t,e){return e?!!(r[t>>3]|=1<<t%8)||!0:!(r[t>>3]&=~(1<<t%8))&&!1}function Rn(r,t,e){let n=e.byteLength+7&-8;if(r>0||e.byteLength<n){let i=new Uint8Array(n);return i.set(r%8===0?e.subarray(r>>3):on(new sn(e,r,t,null,Qs)).subarray(0,n)),i}return e}function on(r){let t=[],e=0,n=0,i=0;for(let o of r)o&&(i|=1<<n),++n===8&&(t[e++]=i,i=n=0);(e===0||n>0)&&(t[e++]=i);let s=new Uint8Array(t.length+7&-8);return s.set(t),s}var sn=class{constructor(t,e,n,i,s){this.bytes=t,this.length=n,this.context=i,this.get=s,this.bit=e%8,this.byteIndex=e>>3,this.byte=t[this.byteIndex++],this.index=0}next(){return this.index<this.length?(this.bit===8&&(this.bit=0,this.byte=this.bytes[this.byteIndex++]),{value:this.get(this.context,this.index++,this.byte,this.bit++)}):{done:!0,value:null}}[Symbol.iterator](){return this}};function pi(r,t,e){if(e-t<=0)return 0;if(e-t<8){let s=0;for(let o of new sn(r,t,e-t,r,id))s+=o;return s}let n=e>>3<<3,i=t+(t%8===0?0:8-t%8);return pi(r,t,i)+pi(r,n,e)+sd(r,i>>3,n-i>>3)}function sd(r,t,e){let n=0,i=Math.trunc(t),s=new DataView(r.buffer,r.byteOffset,r.byteLength),o=e===void 0?r.byteLength:i+e;for(;o-i>=4;)n+=Zs(s.getUint32(i)),i+=4;for(;o-i>=2;)n+=Zs(s.getUint16(i)),i+=2;for(;o-i>=1;)n+=Zs(s.getUint8(i)),i+=1;return n}function Zs(r){let t=Math.trunc(r);return t=t-(t>>>1&1431655765),t=(t&858993459)+(t>>>2&858993459),(t+(t>>>4)&252645135)*16843009>>>24}var j_=-1,ut=class r{get typeId(){return this.type.typeId}get ArrayType(){return this.type.ArrayType}get buffers(){return[this.valueOffsets,this.values,this.nullBitmap,this.typeIds]}get byteLength(){let t=0,{valueOffsets:e,values:n,nullBitmap:i,typeIds:s}=this;return e&&(t+=e.byteLength),n&&(t+=n.byteLength),i&&(t+=i.byteLength),s&&(t+=s.byteLength),this.children.reduce((o,a)=>o+a.byteLength,t)}get nullCount(){let t=this._nullCount,e;return t<=j_&&(e=this.nullBitmap)&&(this._nullCount=t=this.length-pi(e,this.offset,this.offset+this.length)),t}constructor(t,e,n,i,s,o=[],a){this.type=t,this.children=o,this.dictionary=a,this.offset=Math.floor(Math.max(e||0,0)),this.length=Math.floor(Math.max(n||0,0)),this._nullCount=Math.floor(Math.max(i||0,-1));let l;s instanceof r?(this.stride=s.stride,this.values=s.values,this.typeIds=s.typeIds,this.nullBitmap=s.nullBitmap,this.valueOffsets=s.valueOffsets):(this.stride=de(t),s&&((l=s[0])&&(this.valueOffsets=l),(l=s[1])&&(this.values=l),(l=s[2])&&(this.nullBitmap=l),(l=s[3])&&(this.typeIds=l))),this.nullable=this._nullCount!==0&&this.nullBitmap&&this.nullBitmap.byteLength>0}getValid(t){if(this.nullable&&this.nullCount>0){let e=this.offset+t;return(this.nullBitmap[e>>3]&1<<e%8)!==0}return!0}setValid(t,e){if(!this.nullable)return e;if(!this.nullBitmap||this.nullBitmap.byteLength<=t>>3){let{nullBitmap:l}=this._changeLengthAndBackfillNullBitmap(this.length);Object.assign(this,{nullBitmap:l,_nullCount:0})}let{nullBitmap:n,offset:i}=this,s=i+t>>3,o=(i+t)%8,a=n[s]>>o&1;return e?a===0&&(n[s]|=1<<o,this._nullCount=this.nullCount+1):a===1&&(n[s]&=~(1<<o),this._nullCount=this.nullCount-1),e}clone(t=this.type,e=this.offset,n=this.length,i=this._nullCount,s=this,o=this.children){return new r(t,e,n,i,s,o,this.dictionary)}slice(t,e){let{stride:n,typeId:i,children:s}=this,o=+(this._nullCount===0)-1,a=i===16?n:1,l=this._sliceBuffers(t,e,n,i);return this.clone(this.type,this.offset+t,e,o,l,s.length===0||this.valueOffsets?s:this._sliceChildren(s,a*t,a*e))}_changeLengthAndBackfillNullBitmap(t){if(this.typeId===h.Null)return this.clone(this.type,0,t,0);let{length:e,nullCount:n}=this,i=new Uint8Array((t+63&-64)>>3).fill(255,0,e>>3);i[e>>3]=(1<<e-(e&-8))-1,n>0&&i.set(Rn(this.offset,e,this.nullBitmap),0);let s=this.buffers;return s[ve.VALIDITY]=i,this.clone(this.type,0,t,n+(t-e),s)}_sliceBuffers(t,e,n,i){let s,{buffers:o}=this;return(s=o[ve.TYPE])&&(o[ve.TYPE]=s.subarray(t,t+e)),(s=o[ve.OFFSET])&&(o[ve.OFFSET]=s.subarray(t,t+e+1))||(s=o[ve.DATA])&&(o[ve.DATA]=i===6?s:s.subarray(n*t,n*(t+e))),o}_sliceChildren(t,e,n){return t.map(i=>i.slice(e,n))}};ut.prototype.children=Object.freeze([]);var Wa=class r extends E{visit(t){return this.getVisitFn(t.type).call(this,t)}visitNull(t){let{["type"]:e,["offset"]:n=0,["length"]:i=0}=t;return new ut(e,n,i,0)}visitBool(t){let{["type"]:e,["offset"]:n=0}=t,i=N(t.nullBitmap),s=Y(e.ArrayType,t.data),{["length"]:o=s.length>>3,["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ut(e,n,o,a,[void 0,s,i])}visitInt(t){let{["type"]:e,["offset"]:n=0}=t,i=N(t.nullBitmap),s=Y(e.ArrayType,t.data),{["length"]:o=s.length,["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ut(e,n,o,a,[void 0,s,i])}visitFloat(t){let{["type"]:e,["offset"]:n=0}=t,i=N(t.nullBitmap),s=Y(e.ArrayType,t.data),{["length"]:o=s.length,["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ut(e,n,o,a,[void 0,s,i])}visitUtf8(t){let{["type"]:e,["offset"]:n=0}=t,i=N(t.data),s=N(t.nullBitmap),o=nn(t.valueOffsets),{["length"]:a=o.length-1,["nullCount"]:l=t.nullBitmap?-1:0}=t;return new ut(e,n,a,l,[o,i,s])}visitBinary(t){let{["type"]:e,["offset"]:n=0}=t,i=N(t.data),s=N(t.nullBitmap),o=nn(t.valueOffsets),{["length"]:a=o.length-1,["nullCount"]:l=t.nullBitmap?-1:0}=t;return new ut(e,n,a,l,[o,i,s])}visitFixedSizeBinary(t){let{["type"]:e,["offset"]:n=0}=t,i=N(t.nullBitmap),s=Y(e.ArrayType,t.data),{["length"]:o=s.length/de(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ut(e,n,o,a,[void 0,s,i])}visitDate(t){let{["type"]:e,["offset"]:n=0}=t,i=N(t.nullBitmap),s=Y(e.ArrayType,t.data),{["length"]:o=s.length/de(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ut(e,n,o,a,[void 0,s,i])}visitTimestamp(t){let{["type"]:e,["offset"]:n=0}=t,i=N(t.nullBitmap),s=Y(e.ArrayType,t.data),{["length"]:o=s.length/de(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ut(e,n,o,a,[void 0,s,i])}visitTime(t){let{["type"]:e,["offset"]:n=0}=t,i=N(t.nullBitmap),s=Y(e.ArrayType,t.data),{["length"]:o=s.length/de(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ut(e,n,o,a,[void 0,s,i])}visitDecimal(t){let{["type"]:e,["offset"]:n=0}=t,i=N(t.nullBitmap),s=Y(e.ArrayType,t.data),{["length"]:o=s.length/de(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ut(e,n,o,a,[void 0,s,i])}visitList(t){let{["type"]:e,["offset"]:n=0,["child"]:i}=t,s=N(t.nullBitmap),o=nn(t.valueOffsets),{["length"]:a=o.length-1,["nullCount"]:l=t.nullBitmap?-1:0}=t;return new ut(e,n,a,l,[o,void 0,s],[i])}visitStruct(t){let{["type"]:e,["offset"]:n=0,["children"]:i=[]}=t,s=N(t.nullBitmap),{length:o=i.reduce((l,{length:c})=>Math.max(l,c),0),nullCount:a=t.nullBitmap?-1:0}=t;return new ut(e,n,o,a,[void 0,void 0,s],i)}visitUnion(t){let{["type"]:e,["offset"]:n=0,["children"]:i=[]}=t,s=N(t.nullBitmap),o=Y(e.ArrayType,t.typeIds),{["length"]:a=o.length,["nullCount"]:l=t.nullBitmap?-1:0}=t;if(D.isSparseUnion(e))return new ut(e,n,a,l,[void 0,void 0,s,o],i);let c=nn(t.valueOffsets);return new ut(e,n,a,l,[c,void 0,s,o],i)}visitDictionary(t){let{["type"]:e,["offset"]:n=0}=t,i=N(t.nullBitmap),s=Y(e.indices.ArrayType,t.data),{["dictionary"]:o=new q([new r().visit({type:e.dictionary})])}=t,{["length"]:a=s.length,["nullCount"]:l=t.nullBitmap?-1:0}=t;return new ut(e,n,a,l,[void 0,s,i],[],o)}visitInterval(t){let{["type"]:e,["offset"]:n=0}=t,i=N(t.nullBitmap),s=Y(e.ArrayType,t.data),{["length"]:o=s.length/de(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ut(e,n,o,a,[void 0,s,i])}visitFixedSizeList(t){let{["type"]:e,["offset"]:n=0,["child"]:i=new r().visit({type:e.valueType})}=t,s=N(t.nullBitmap),{["length"]:o=i.length/de(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ut(e,n,o,a,[void 0,void 0,s],[i])}visitMap(t){let{["type"]:e,["offset"]:n=0,["child"]:i=new r().visit({type:e.childType})}=t,s=N(t.nullBitmap),o=nn(t.valueOffsets),{["length"]:a=o.length-1,["nullCount"]:l=t.nullBitmap?-1:0}=t;return new ut(e,n,a,l,[o,void 0,s],[i])}};function H(r){return new Wa().visit(r)}var mi=class{constructor(t=0,e){this.numChunks=t,this.getChunkIterator=e,this.chunkIndex=0,this.chunkIterator=this.getChunkIterator(0)}next(){for(;this.chunkIndex<this.numChunks;){let t=this.chunkIterator.next();if(!t.done)return t;++this.chunkIndex<this.numChunks&&(this.chunkIterator=this.getChunkIterator(this.chunkIndex))}return{done:!0,value:null}}[Symbol.iterator](){return this}};function to(r){return r.reduce((t,e)=>t+e.nullCount,0)}function eo(r){return r.reduce((t,e,n)=>(t[n+1]=t[n]+e.length,t),new Uint32Array(r.length+1))}function ro(r,t,e,n){let i=[];for(let s=-1,o=r.length;++s<o;){let a=r[s],l=t[s],{length:c}=a;if(l>=n)break;if(e>=l+c)continue;if(l>=e&&l+c<=n){i.push(a);continue}let m=Math.max(0,e-l),w=Math.min(n-l,c);i.push(a.slice(m,w-m))}return i.length===0&&i.push(r[0].slice(0,0)),i}function ja(r,t,e,n){let i=0,s=0,o=t.length-1;do{if(i>=o-1)return e<t[o]?n(r,i,e-t[i]):null;s=i+Math.trunc((o-i)*.5),e<t[s]?o=s:i=s}while(i<o)}function _i(r,t){return r.getValid(t)}function Ur(r){function t(e,n,i){return r(e[n],i)}return function(e){let n=this.data;return ja(n,this._offsets,e,t)}}function no(r){let t;function e(n,i,s){return r(n[i],s,t)}return function(n,i){let s=this.data;t=i;let o=ja(s,this._offsets,n,e);return t=void 0,o}}function io(r){let t;function e(n,i,s){let o=s,a=0,l=0;for(let c=i-1,m=n.length;++c<m;){let w=n[c];if(~(a=r(w,t,o)))return l+a;o=0,l+=w.length}return-1}return function(n,i){t=n;let s=this.data,o=typeof i!="number"?e(s,0,0):ja(s,this._offsets,i,e);return t=void 0,o}}var R=class extends E{};function $_(r,t){return t===null&&r.length>0?0:-1}function Y_(r,t){let{nullBitmap:e}=r;if(!e||r.nullCount<=0)return-1;let n=0;for(let i of new sn(e,r.offset+(t||0),r.length,e,Qs)){if(!i)return n;++n}return-1}function X(r,t,e){if(t===void 0)return-1;if(t===null)return Y_(r,e);let n=Bt.getVisitFn(r),i=Rr(t);for(let s=(e||0)-1,o=r.length;++s<o;)if(i(n(r,s)))return s;return-1}function od(r,t,e){let n=Bt.getVisitFn(r),i=Rr(t);for(let s=(e||0)-1,o=r.length;++s<o;)if(i(n(r,s)))return s;return-1}R.prototype.visitNull=$_;R.prototype.visitBool=X;R.prototype.visitInt=X;R.prototype.visitInt8=X;R.prototype.visitInt16=X;R.prototype.visitInt32=X;R.prototype.visitInt64=X;R.prototype.visitUint8=X;R.prototype.visitUint16=X;R.prototype.visitUint32=X;R.prototype.visitUint64=X;R.prototype.visitFloat=X;R.prototype.visitFloat16=X;R.prototype.visitFloat32=X;R.prototype.visitFloat64=X;R.prototype.visitUtf8=X;R.prototype.visitBinary=X;R.prototype.visitFixedSizeBinary=X;R.prototype.visitDate=X;R.prototype.visitDateDay=X;R.prototype.visitDateMillisecond=X;R.prototype.visitTimestamp=X;R.prototype.visitTimestampSecond=X;R.prototype.visitTimestampMillisecond=X;R.prototype.visitTimestampMicrosecond=X;R.prototype.visitTimestampNanosecond=X;R.prototype.visitTime=X;R.prototype.visitTimeSecond=X;R.prototype.visitTimeMillisecond=X;R.prototype.visitTimeMicrosecond=X;R.prototype.visitTimeNanosecond=X;R.prototype.visitDecimal=X;R.prototype.visitList=X;R.prototype.visitStruct=X;R.prototype.visitUnion=X;R.prototype.visitDenseUnion=od;R.prototype.visitSparseUnion=od;R.prototype.visitDictionary=X;R.prototype.visitInterval=X;R.prototype.visitIntervalDayTime=X;R.prototype.visitIntervalYearMonth=X;R.prototype.visitFixedSizeList=X;R.prototype.visitMap=X;var an=new R;var U=class extends E{};function W(r){let{type:t}=r;if(r.nullCount===0&&r.stride===1&&(t.typeId===h.Timestamp||t instanceof Tt&&t.bitWidth!==64||t instanceof Re&&t.bitWidth!==64||t instanceof ee&&t.precision!==_t.HALF))return new mi(r.data.length,n=>{let i=r.data[n];return i.values.subarray(0,i.length)[Symbol.iterator]()});let e=0;return new mi(r.data.length,n=>{let s=r.data[n].length,o=r.slice(e,e+s);return e+=s,new $a(o)})}var $a=class{constructor(t){this.vector=t,this.index=0}next(){return this.index<this.vector.length?{value:this.vector.get(this.index++)}:{done:!0,value:null}}[Symbol.iterator](){return this}};U.prototype.visitNull=W;U.prototype.visitBool=W;U.prototype.visitInt=W;U.prototype.visitInt8=W;U.prototype.visitInt16=W;U.prototype.visitInt32=W;U.prototype.visitInt64=W;U.prototype.visitUint8=W;U.prototype.visitUint16=W;U.prototype.visitUint32=W;U.prototype.visitUint64=W;U.prototype.visitFloat=W;U.prototype.visitFloat16=W;U.prototype.visitFloat32=W;U.prototype.visitFloat64=W;U.prototype.visitUtf8=W;U.prototype.visitBinary=W;U.prototype.visitFixedSizeBinary=W;U.prototype.visitDate=W;U.prototype.visitDateDay=W;U.prototype.visitDateMillisecond=W;U.prototype.visitTimestamp=W;U.prototype.visitTimestampSecond=W;U.prototype.visitTimestampMillisecond=W;U.prototype.visitTimestampMicrosecond=W;U.prototype.visitTimestampNanosecond=W;U.prototype.visitTime=W;U.prototype.visitTimeSecond=W;U.prototype.visitTimeMillisecond=W;U.prototype.visitTimeMicrosecond=W;U.prototype.visitTimeNanosecond=W;U.prototype.visitDecimal=W;U.prototype.visitList=W;U.prototype.visitStruct=W;U.prototype.visitUnion=W;U.prototype.visitDenseUnion=W;U.prototype.visitSparseUnion=W;U.prototype.visitDictionary=W;U.prototype.visitInterval=W;U.prototype.visitIntervalDayTime=W;U.prototype.visitIntervalYearMonth=W;U.prototype.visitFixedSizeList=W;U.prototype.visitMap=W;var Un=new U;var X_=(r,t)=>r+t,Ke=class extends E{visitNull(t,e){return 0}visitInt(t,e){return t.type.bitWidth/8}visitFloat(t,e){return t.type.ArrayType.BYTES_PER_ELEMENT}visitBool(t,e){return 1/8}visitDecimal(t,e){return t.type.bitWidth/8}visitDate(t,e){return(t.type.unit+1)*4}visitTime(t,e){return t.type.bitWidth/8}visitTimestamp(t,e){return t.type.unit===J.SECOND?4:8}visitInterval(t,e){return(t.type.unit+1)*4}visitStruct(t,e){return t.children.reduce((n,i)=>n+fe.visit(i,e),0)}visitFixedSizeBinary(t,e){return t.type.byteWidth}visitMap(t,e){return 8+t.children.reduce((n,i)=>n+fe.visit(i,e),0)}visitDictionary(t,e){var n;return t.type.indices.bitWidth/8+(((n=t.dictionary)===null||n===void 0?void 0:n.getByteLength(t.values[e]))||0)}},G_=({valueOffsets:r},t)=>8+(r[t+1]-r[t]),K_=({valueOffsets:r},t)=>8+(r[t+1]-r[t]),J_=({valueOffsets:r,stride:t,children:e},n)=>{let i=e[0],{[n*t]:s}=r,{[n*t+1]:o}=r,a=fe.getVisitFn(i.type),l=i.slice(s,o-s),c=8;for(let m=-1,w=o-s;++m<w;)c+=a(l,m);return c},q_=({stride:r,children:t},e)=>{let n=t[0],i=n.slice(e*r,r),s=fe.getVisitFn(n.type),o=0;for(let a=-1,l=i.length;++a<l;)o+=s(i,a);return o},Z_=(r,t)=>r.type.mode===St.Dense?ad(r,t):cd(r,t),ad=({type:r,children:t,typeIds:e,valueOffsets:n},i)=>{let s=r.typeIdToChildIndex[e[i]];return 8+fe.visit(t[s],n[i])},cd=({children:r},t)=>4+fe.visitMany(r,r.map(()=>t)).reduce(X_,0);Ke.prototype.visitUtf8=G_;Ke.prototype.visitBinary=K_;Ke.prototype.visitList=J_;Ke.prototype.visitFixedSizeList=q_;Ke.prototype.visitUnion=Z_;Ke.prototype.visitDenseUnion=ad;Ke.prototype.visitSparseUnion=cd;var fe=new Ke;var ud,ld={},dd={},q=class r{constructor(t){var e,n,i;let s=t[0]instanceof r?t.flatMap(a=>a.data):t;if(s.length===0||s.some(a=>!(a instanceof ut)))throw new TypeError("Vector constructor expects an Array of Data instances.");let o=(e=s[0])===null||e===void 0?void 0:e.type;switch(s.length){case 0:this._offsets=[0];break;case 1:{let{get:a,set:l,indexOf:c,byteLength:m}=ld[o.typeId],w=s[0];this.isValid=S=>_i(w,S),this.get=S=>a(w,S),this.set=(S,T)=>l(w,S,T),this.indexOf=S=>c(w,S),this.getByteLength=S=>m(w,S),this._offsets=[0,w.length];break}default:Object.setPrototypeOf(this,dd[o.typeId]),this._offsets=eo(s);break}this.data=s,this.type=o,this.stride=de(o),this.numChildren=(i=(n=o.children)===null||n===void 0?void 0:n.length)!==null&&i!==void 0?i:0,this.length=this._offsets[this._offsets.length-1]}get byteLength(){return this._byteLength===-1&&(this._byteLength=this.data.reduce((t,e)=>t+e.byteLength,0)),this._byteLength}get nullCount(){return this._nullCount===-1&&(this._nullCount=to(this.data)),this._nullCount}get ArrayType(){return this.type.ArrayType}get[Symbol.toStringTag](){return"".concat(this.VectorName,"<").concat(this.type[Symbol.toStringTag],">")}get VectorName(){return"".concat(h[this.type.typeId],"Vector")}isValid(t){return!1}get(t){return null}set(t,e){}indexOf(t,e){return-1}includes(t,e){return this.indexOf(t,e)>0}getByteLength(t){return 0}[Symbol.iterator](){return Un.visit(this)}concat(...t){return new r(this.data.concat(t.flatMap(e=>e.data).flat(Number.POSITIVE_INFINITY)))}slice(t,e){return new r(hi(this,t,e,({data:n,_offsets:i},s,o)=>ro(n,i,s,o)))}toJSON(){return[...this]}toArray(){let{type:t,data:e,length:n,stride:i,ArrayType:s}=this;switch(t.typeId){case h.Int:case h.Float:case h.Decimal:case h.Time:case h.Timestamp:switch(e.length){case 0:return new s;case 1:return e[0].values.subarray(0,n*i);default:return e.reduce((o,{values:a,length:l})=>(o.array.set(a.subarray(0,l*i),o.offset),o.offset+=l*i,o),{array:new s(n*i),offset:0}).array}}return[...this]}toString(){return"[".concat([...this].join(","),"]")}getChild(t){var e;return this.getChildAt((e=this.type.children)===null||e===void 0?void 0:e.findIndex(n=>n.name===t))}getChildAt(t){return t>-1&&t<this.numChildren?new r(this.data.map(({children:e})=>e[t])):null}get isMemoized(){return D.isDictionary(this.type)?this.data[0].dictionary.isMemoized:!1}memoize(){if(D.isDictionary(this.type)){let t=new so(this.data[0].dictionary),e=this.data.map(n=>{let i=n.clone();return i.dictionary=t,i});return new r(e)}return new so(this)}unmemoize(){if(D.isDictionary(this.type)&&this.isMemoized){let t=this.data[0].dictionary.unmemoize(),e=this.data.map(n=>{let i=n.clone();return i.dictionary=t,i});return new r(e)}return this}};ud=Symbol.toStringTag;q[ud]=(r=>{r.type=D.prototype,r.data=[],r.length=0,r.stride=1,r.numChildren=0,r._nullCount=-1,r._byteLength=-1,r._offsets=new Uint32Array([0]),r[Symbol.isConcatSpreadable]=!0;let t=Object.keys(h).map(e=>h[e]).filter(e=>typeof e=="number"&&e!==h.NONE);for(let e of t){let n=Bt.getVisitFnByTypeId(e),i=zt.getVisitFnByTypeId(e),s=an.getVisitFnByTypeId(e),o=fe.getVisitFnByTypeId(e);ld[e]={get:n,set:i,indexOf:s,byteLength:o},dd[e]=Object.create(r,{isValid:{value:Ur(_i)},get:{value:Ur(Bt.getVisitFnByTypeId(e))},set:{value:no(zt.getVisitFnByTypeId(e))},indexOf:{value:io(an.getVisitFnByTypeId(e))},getByteLength:{value:Ur(fe.getVisitFnByTypeId(e))}})}return"Vector"})(q.prototype);var so=class r extends q{constructor(t){super(t.data);let e=this.get,n=this.set,i=this.slice,s=new Array(this.length);Object.defineProperty(this,"get",{value(o){let a=s[o];if(a!==void 0)return a;let l=e.call(this,o);return s[o]=l,l}}),Object.defineProperty(this,"set",{value(o,a){n.call(this,o,a),s[o]=a}}),Object.defineProperty(this,"slice",{value:(o,a)=>new r(i.call(this,o,a))}),Object.defineProperty(this,"isMemoized",{value:!0}),Object.defineProperty(this,"unmemoize",{value:()=>new q(this.data)}),Object.defineProperty(this,"memoize",{value:()=>this})}};function fd(r){if(!r||r.length<=0)return function(i){return!0};let t="",e=r.filter(n=>n===n);return e.length>0&&(t="\n    switch (x) {".concat(e.map(n=>"\n        case ".concat(Q_(n),":")).join(""),"\n            return false;\n    }")),r.length!==e.length&&(t="if (x !== x) return false;\n".concat(t)),new Function("x","".concat(t,"\nreturn true;"))}function Q_(r){return typeof r!="bigint"?Ye(r):"".concat(Ye(r),"n")}var Ya=(r,t)=>(Math.ceil(r)*t+63&-64||64)/t,ty=(r,t=0)=>r.length>=t?r.subarray(0,t):Fn(new r.constructor(t),r,0),Lr=class{constructor(t,e=1){this.buffer=t,this.stride=e,this.BYTES_PER_ELEMENT=t.BYTES_PER_ELEMENT,this.ArrayType=t.constructor,this._resize(this.length=Math.ceil(t.length/e))}get byteLength(){return Math.ceil(this.length*this.stride)*this.BYTES_PER_ELEMENT}get reservedLength(){return this.buffer.length/this.stride}get reservedByteLength(){return this.buffer.byteLength}set(t,e){return this}append(t){return this.set(this.length,t)}reserve(t){if(t>0){this.length+=t;let e=this.stride,n=this.length*e,i=this.buffer.length;n>=i&&this._resize(i===0?Ya(n*1,this.BYTES_PER_ELEMENT):Ya(n*2,this.BYTES_PER_ELEMENT))}return this}flush(t=this.length){t=Ya(t*this.stride,this.BYTES_PER_ELEMENT);let e=ty(this.buffer,t);return this.clear(),e}clear(){return this.length=0,this._resize(0),this}_resize(t){return this.buffer=Fn(new this.ArrayType(t),this.buffer)}};Lr.prototype.offset=0;var br=class extends Lr{last(){return this.get(this.length-1)}get(t){return this.buffer[t]}set(t,e){return this.reserve(t-this.length+1),this.buffer[t*this.stride]=e,this}},Ln=class extends br{constructor(t=new Uint8Array(0)){super(t,1/8),this.numValid=0}get numInvalid(){return this.length-this.numValid}get(t){return this.buffer[t>>3]>>t%8&1}set(t,e){let{buffer:n}=this.reserve(t-this.length+1),i=t>>3,s=t%8,o=n[i]>>s&1;return e?o===0&&(n[i]|=1<<s,++this.numValid):o===1&&(n[i]&=~(1<<s),--this.numValid),this}clear(){return this.numValid=0,super.clear()}},kn=class extends br{constructor(t=new Int32Array(1)){super(t,1)}append(t){return this.set(this.length-1,t)}set(t,e){let n=this.length-1,i=this.reserve(t-n+1).buffer;return n<t++&&i.fill(i[n],n,t),i[t]=i[t-1]+e,this}flush(t=this.length-1){return t>this.length&&this.set(t-1,0),super.flush(t+1)}};var yt=class{static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t){throw new Error('"throughDOM" not available in this environment')}constructor({type:t,nullValues:e}){this.length=0,this.finished=!1,this.type=t,this.children=[],this.nullValues=e,this.stride=de(t),this._nulls=new Ln,e&&e.length>0&&(this._isValid=fd(e))}toVector(){return new q([this.flush()])}get ArrayType(){return this.type.ArrayType}get nullCount(){return this._nulls.numInvalid}get numChildren(){return this.children.length}get byteLength(){let t=0,{_offsets:e,_values:n,_nulls:i,_typeIds:s,children:o}=this;return e&&(t+=e.byteLength),n&&(t+=n.byteLength),i&&(t+=i.byteLength),s&&(t+=s.byteLength),o.reduce((a,l)=>a+l.byteLength,t)}get reservedLength(){return this._nulls.reservedLength}get reservedByteLength(){let t=0;return this._offsets&&(t+=this._offsets.reservedByteLength),this._values&&(t+=this._values.reservedByteLength),this._nulls&&(t+=this._nulls.reservedByteLength),this._typeIds&&(t+=this._typeIds.reservedByteLength),this.children.reduce((e,n)=>e+n.reservedByteLength,t)}get valueOffsets(){return this._offsets?this._offsets.buffer:null}get values(){return this._values?this._values.buffer:null}get nullBitmap(){return this._nulls?this._nulls.buffer:null}get typeIds(){return this._typeIds?this._typeIds.buffer:null}append(t){return this.set(this.length,t)}isValid(t){return this._isValid(t)}set(t,e){return this.setValid(t,this.isValid(e))&&this.setValue(t,e),this}setValue(t,e){this._setValue(this,t,e)}setValid(t,e){return this.length=this._nulls.set(t,+e).length,e}addChild(t,e="".concat(this.numChildren)){throw new Error('Cannot append children to non-nested type "'.concat(this.type,'"'))}getChildAt(t){return this.children[t]||null}flush(){let t,e,n,i,{type:s,length:o,nullCount:a,_typeIds:l,_offsets:c,_values:m,_nulls:w}=this;(e=l==null?void 0:l.flush(o))?i=c==null?void 0:c.flush(o):(i=c==null?void 0:c.flush(o))?t=m==null?void 0:m.flush(c.last()):t=m==null?void 0:m.flush(o),a>0&&(n=w==null?void 0:w.flush(o));let S=this.children.map(T=>T.flush());return this.clear(),H({type:s,length:o,nullCount:a,children:S,child:S[0],data:t,typeIds:e,nullBitmap:n,valueOffsets:i})}finish(){this.finished=!0;for(let t of this.children)t.finish();return this}clear(){var t,e,n,i;this.length=0,(t=this._nulls)===null||t===void 0||t.clear(),(e=this._values)===null||e===void 0||e.clear(),(n=this._offsets)===null||n===void 0||n.clear(),(i=this._typeIds)===null||i===void 0||i.clear();for(let s of this.children)s.clear();return this}};yt.prototype.length=1;yt.prototype.stride=1;yt.prototype.children=null;yt.prototype.finished=!1;yt.prototype.nullValues=null;yt.prototype._isValid=()=>!0;var Lt=class extends yt{constructor(t){super(t),this._values=new br(new this.ArrayType(0),this.stride)}setValue(t,e){let n=this._values;return n.reserve(t-n.length+1),super.setValue(t,e)}},Je=class extends yt{constructor(t){super(t),this._pendingLength=0,this._offsets=new kn}setValue(t,e){let n=this._pending||(this._pending=new Map),i=n.get(t);i&&(this._pendingLength-=i.length),this._pendingLength+=e instanceof Ge?e[Se].length:e.length,n.set(t,e)}setValid(t,e){return super.setValid(t,e)?!0:((this._pending||(this._pending=new Map)).set(t,void 0),!1)}clear(){return this._pendingLength=0,this._pending=void 0,super.clear()}flush(){return this._flush(),super.flush()}finish(){return this._flush(),super.finish()}_flush(){let t=this._pending,e=this._pendingLength;return this._pendingLength=0,this._pending=void 0,t&&t.size>0&&this._flushPending(t,e),this}};var cn=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}offset(){return this.bb.readInt64(this.bb_pos)}metaDataLength(){return this.bb.readInt32(this.bb_pos+8)}bodyLength(){return this.bb.readInt64(this.bb_pos+16)}static sizeOf(){return 24}static createBlock(t,e,n,i){return t.prep(8,24),t.writeInt64(BigInt(i!=null?i:0)),t.pad(4),t.writeInt32(n),t.writeInt64(BigInt(e!=null?e:0)),t.offset()}};var qe=new Int32Array(2),oo=new Float32Array(qe.buffer),ao=new Float64Array(qe.buffer),Nn=new Uint16Array(new Uint8Array([1,0]).buffer)[0]===1;var yi;(function(r){r[r.UTF8_BYTES=1]="UTF8_BYTES",r[r.UTF16_STRING=2]="UTF16_STRING"})(yi||(yi={}));var he=class r{constructor(t){this.bytes_=t,this.position_=0,this.text_decoder_=new TextDecoder}static allocate(t){return new r(new Uint8Array(t))}clear(){this.position_=0}bytes(){return this.bytes_}position(){return this.position_}setPosition(t){this.position_=t}capacity(){return this.bytes_.length}readInt8(t){return this.readUint8(t)<<24>>24}readUint8(t){return this.bytes_[t]}readInt16(t){return this.readUint16(t)<<16>>16}readUint16(t){return this.bytes_[t]|this.bytes_[t+1]<<8}readInt32(t){return this.bytes_[t]|this.bytes_[t+1]<<8|this.bytes_[t+2]<<16|this.bytes_[t+3]<<24}readUint32(t){return this.readInt32(t)>>>0}readInt64(t){return BigInt.asIntN(64,BigInt(this.readUint32(t))+(BigInt(this.readUint32(t+4))<<BigInt(32)))}readUint64(t){return BigInt.asUintN(64,BigInt(this.readUint32(t))+(BigInt(this.readUint32(t+4))<<BigInt(32)))}readFloat32(t){return qe[0]=this.readInt32(t),oo[0]}readFloat64(t){return qe[Nn?0:1]=this.readInt32(t),qe[Nn?1:0]=this.readInt32(t+4),ao[0]}writeInt8(t,e){this.bytes_[t]=e}writeUint8(t,e){this.bytes_[t]=e}writeInt16(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8}writeUint16(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8}writeInt32(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24}writeUint32(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24}writeInt64(t,e){this.writeInt32(t,Number(BigInt.asIntN(32,e))),this.writeInt32(t+4,Number(BigInt.asIntN(32,e>>BigInt(32))))}writeUint64(t,e){this.writeUint32(t,Number(BigInt.asUintN(32,e))),this.writeUint32(t+4,Number(BigInt.asUintN(32,e>>BigInt(32))))}writeFloat32(t,e){oo[0]=e,this.writeInt32(t,qe[0])}writeFloat64(t,e){ao[0]=e,this.writeInt32(t,qe[Nn?0:1]),this.writeInt32(t+4,qe[Nn?1:0])}getBufferIdentifier(){if(this.bytes_.length<this.position_+4+4)throw new Error("FlatBuffers: ByteBuffer is too short to contain an identifier.");let t="";for(let e=0;e<4;e++)t+=String.fromCharCode(this.readInt8(this.position_+4+e));return t}__offset(t,e){let n=t-this.readInt32(t);return e<this.readInt16(n)?this.readInt16(n+e):0}__union(t,e){return t.bb_pos=e+this.readInt32(e),t.bb=this,t}__string(t,e){t+=this.readInt32(t);let n=this.readInt32(t);t+=4;let i=this.bytes_.subarray(t,t+n);return e===yi.UTF8_BYTES?i:this.text_decoder_.decode(i)}__union_with_string(t,e){return typeof t=="string"?this.__string(e):this.__union(t,e)}__indirect(t){return t+this.readInt32(t)}__vector(t){return t+this.readInt32(t)+4}__vector_len(t){return this.readInt32(t+this.readInt32(t))}__has_identifier(t){if(t.length!=4)throw new Error("FlatBuffers: file identifier must be length "+4);for(let e=0;e<4;e++)if(t.charCodeAt(e)!=this.readInt8(this.position()+4+e))return!1;return!0}createScalarList(t,e){let n=[];for(let i=0;i<e;++i){let s=t(i);s!==null&&n.push(s)}return n}createObjList(t,e){let n=[];for(let i=0;i<e;++i){let s=t(i);s!==null&&n.push(s.unpack())}return n}};var un=class r{constructor(t){this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1,this.string_maps=null,this.text_encoder=new TextEncoder;let e;t?e=t:e=1024,this.bb=he.allocate(e),this.space=e}clear(){this.bb.clear(),this.space=this.bb.capacity(),this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1,this.string_maps=null}forceDefaults(t){this.force_defaults=t}dataBuffer(){return this.bb}asUint8Array(){return this.bb.bytes().subarray(this.bb.position(),this.bb.position()+this.offset())}prep(t,e){t>this.minalign&&(this.minalign=t);let n=~(this.bb.capacity()-this.space+e)+1&t-1;for(;this.space<n+t+e;){let i=this.bb.capacity();this.bb=r.growByteBuffer(this.bb),this.space+=this.bb.capacity()-i}this.pad(n)}pad(t){for(let e=0;e<t;e++)this.bb.writeInt8(--this.space,0)}writeInt8(t){this.bb.writeInt8(this.space-=1,t)}writeInt16(t){this.bb.writeInt16(this.space-=2,t)}writeInt32(t){this.bb.writeInt32(this.space-=4,t)}writeInt64(t){this.bb.writeInt64(this.space-=8,t)}writeFloat32(t){this.bb.writeFloat32(this.space-=4,t)}writeFloat64(t){this.bb.writeFloat64(this.space-=8,t)}addInt8(t){this.prep(1,0),this.writeInt8(t)}addInt16(t){this.prep(2,0),this.writeInt16(t)}addInt32(t){this.prep(4,0),this.writeInt32(t)}addInt64(t){this.prep(8,0),this.writeInt64(t)}addFloat32(t){this.prep(4,0),this.writeFloat32(t)}addFloat64(t){this.prep(8,0),this.writeFloat64(t)}addFieldInt8(t,e,n){(this.force_defaults||e!=n)&&(this.addInt8(e),this.slot(t))}addFieldInt16(t,e,n){(this.force_defaults||e!=n)&&(this.addInt16(e),this.slot(t))}addFieldInt32(t,e,n){(this.force_defaults||e!=n)&&(this.addInt32(e),this.slot(t))}addFieldInt64(t,e,n){(this.force_defaults||e!==n)&&(this.addInt64(e),this.slot(t))}addFieldFloat32(t,e,n){(this.force_defaults||e!=n)&&(this.addFloat32(e),this.slot(t))}addFieldFloat64(t,e,n){(this.force_defaults||e!=n)&&(this.addFloat64(e),this.slot(t))}addFieldOffset(t,e,n){(this.force_defaults||e!=n)&&(this.addOffset(e),this.slot(t))}addFieldStruct(t,e,n){e!=n&&(this.nested(e),this.slot(t))}nested(t){if(t!=this.offset())throw new Error("FlatBuffers: struct must be serialized inline.")}notNested(){if(this.isNested)throw new Error("FlatBuffers: object serialization must not be nested.")}slot(t){this.vtable!==null&&(this.vtable[t]=this.offset())}offset(){return this.bb.capacity()-this.space}static growByteBuffer(t){let e=t.capacity();if(e&3221225472)throw new Error("FlatBuffers: cannot grow buffer beyond 2 gigabytes.");let n=e<<1,i=he.allocate(n);return i.setPosition(n-e),i.bytes().set(t.bytes(),n-e),i}addOffset(t){this.prep(4,0),this.writeInt32(this.offset()-t+4)}startObject(t){this.notNested(),this.vtable==null&&(this.vtable=[]),this.vtable_in_use=t;for(let e=0;e<t;e++)this.vtable[e]=0;this.isNested=!0,this.object_start=this.offset()}endObject(){if(this.vtable==null||!this.isNested)throw new Error("FlatBuffers: endObject called without startObject");this.addInt32(0);let t=this.offset(),e=this.vtable_in_use-1;for(;e>=0&&this.vtable[e]==0;e--);let n=e+1;for(;e>=0;e--)this.addInt16(this.vtable[e]!=0?t-this.vtable[e]:0);let i=2;this.addInt16(t-this.object_start);let s=(n+i)*2;this.addInt16(s);let o=0,a=this.space;t:for(e=0;e<this.vtables.length;e++){let l=this.bb.capacity()-this.vtables[e];if(s==this.bb.readInt16(l)){for(let c=2;c<s;c+=2)if(this.bb.readInt16(a+c)!=this.bb.readInt16(l+c))continue t;o=this.vtables[e];break}}return o?(this.space=this.bb.capacity()-t,this.bb.writeInt32(this.space,o-t)):(this.vtables.push(this.offset()),this.bb.writeInt32(this.bb.capacity()-t,this.offset()-t)),this.isNested=!1,t}finish(t,e,n){let i=n?4:0;if(e){let s=e;if(this.prep(this.minalign,4+4+i),s.length!=4)throw new Error("FlatBuffers: file identifier must be length "+4);for(let o=4-1;o>=0;o--)this.writeInt8(s.charCodeAt(o))}this.prep(this.minalign,4+i),this.addOffset(t),i&&this.addInt32(this.bb.capacity()-this.space),this.bb.setPosition(this.space)}finishSizePrefixed(t,e){this.finish(t,e,!0)}requiredField(t,e){let n=this.bb.capacity()-t,i=n-this.bb.readInt32(n);if(!(e<this.bb.readInt16(i)&&this.bb.readInt16(i+e)!=0))throw new Error("FlatBuffers: field "+e+" must be set")}startVector(t,e,n){this.notNested(),this.vector_num_elems=e,this.prep(4,t*e),this.prep(n,t*e)}endVector(){return this.writeInt32(this.vector_num_elems),this.offset()}createSharedString(t){if(!t)return 0;if(this.string_maps||(this.string_maps=new Map),this.string_maps.has(t))return this.string_maps.get(t);let e=this.createString(t);return this.string_maps.set(t,e),e}createString(t){if(t==null)return 0;let e;t instanceof Uint8Array?e=t:e=this.text_encoder.encode(t),this.addInt8(0),this.startVector(1,e.length,1),this.bb.setPosition(this.space-=e.length);for(let n=0,i=this.space,s=this.bb.bytes();n<e.length;n++)s[i++]=e[n];return this.endVector()}createObjectOffset(t){return t===null?0:typeof t=="string"?this.createString(t):t.pack(this)}createObjectOffsetList(t){let e=[];for(let n=0;n<t.length;++n){let i=t[n];if(i!==null)e.push(this.createObjectOffset(i));else throw new Error("FlatBuffers: Argument for createObjectOffsetList cannot contain null.")}return e}createStructOffsetList(t,e){return e(this,t.length),this.createObjectOffsetList(t.slice().reverse()),this.endVector()}};var Et=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsKeyValue(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsKeyValue(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}key(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}value(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}static startKeyValue(t){t.startObject(2)}static addKey(t,e){t.addFieldOffset(0,e,0)}static addValue(t,e){t.addFieldOffset(1,e,0)}static endKeyValue(t){return t.endObject()}static createKeyValue(t,e,n){return r.startKeyValue(t),r.addKey(t,e),r.addValue(t,n),r.endKeyValue(t)}};var kr;(function(r){r[r.V1=0]="V1",r[r.V2=1]="V2",r[r.V3=2]="V3",r[r.V4=3]="V4",r[r.V5=4]="V5"})(kr||(kr={}));var Nr;(function(r){r[r.Little=0]="Little",r[r.Big=1]="Big"})(Nr||(Nr={}));var bi;(function(r){r[r.DenseArray=0]="DenseArray"})(bi||(bi={}));var He=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsInt(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsInt(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}bitWidth(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}isSigned(){let t=this.bb.__offset(this.bb_pos,6);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startInt(t){t.startObject(2)}static addBitWidth(t,e){t.addFieldInt32(0,e,0)}static addIsSigned(t,e){t.addFieldInt8(1,+e,0)}static endInt(t){return t.endObject()}static createInt(t,e,n){return r.startInt(t),r.addBitWidth(t,e),r.addIsSigned(t,n),r.endInt(t)}};var Ze=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDictionaryEncoding(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDictionaryEncoding(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}id(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):BigInt("0")}indexType(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new He).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}isOrdered(){let t=this.bb.__offset(this.bb_pos,8);return t?!!this.bb.readInt8(this.bb_pos+t):!1}dictionaryKind(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt16(this.bb_pos+t):bi.DenseArray}static startDictionaryEncoding(t){t.startObject(4)}static addId(t,e){t.addFieldInt64(0,e,BigInt("0"))}static addIndexType(t,e){t.addFieldOffset(1,e,0)}static addIsOrdered(t,e){t.addFieldInt8(2,+e,0)}static addDictionaryKind(t,e){t.addFieldInt16(3,e,bi.DenseArray)}static endDictionaryEncoding(t){return t.endObject()}};var gi=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBinary(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBinary(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static startBinary(t){t.startObject(0)}static endBinary(t){return t.endObject()}static createBinary(t){return r.startBinary(t),r.endBinary(t)}};var wi=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBool(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBool(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static startBool(t){t.startObject(0)}static endBool(t){return t.endObject()}static createBool(t){return r.startBool(t),r.endBool(t)}};var vi;(function(r){r[r.DAY=0]="DAY",r[r.MILLISECOND=1]="MILLISECOND"})(vi||(vi={}));var Cr=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDate(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDate(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):vi.MILLISECOND}static startDate(t){t.startObject(1)}static addUnit(t,e){t.addFieldInt16(0,e,vi.MILLISECOND)}static endDate(t){return t.endObject()}static createDate(t,e){return r.startDate(t),r.addUnit(t,e),r.endDate(t)}};var Qe=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDecimal(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDecimal(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}precision(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}scale(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt32(this.bb_pos+t):0}bitWidth(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readInt32(this.bb_pos+t):128}static startDecimal(t){t.startObject(3)}static addPrecision(t,e){t.addFieldInt32(0,e,0)}static addScale(t,e){t.addFieldInt32(1,e,0)}static addBitWidth(t,e){t.addFieldInt32(2,e,128)}static endDecimal(t){return t.endObject()}static createDecimal(t,e,n,i){return r.startDecimal(t),r.addPrecision(t,e),r.addScale(t,n),r.addBitWidth(t,i),r.endDecimal(t)}};var Pr;(function(r){r[r.SECOND=0]="SECOND",r[r.MILLISECOND=1]="MILLISECOND",r[r.MICROSECOND=2]="MICROSECOND",r[r.NANOSECOND=3]="NANOSECOND"})(Pr||(Pr={}));var Hr=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFixedSizeBinary(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFixedSizeBinary(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}byteWidth(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}static startFixedSizeBinary(t){t.startObject(1)}static addByteWidth(t,e){t.addFieldInt32(0,e,0)}static endFixedSizeBinary(t){return t.endObject()}static createFixedSizeBinary(t,e){return r.startFixedSizeBinary(t),r.addByteWidth(t,e),r.endFixedSizeBinary(t)}};var Vr=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFixedSizeList(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFixedSizeList(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}listSize(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}static startFixedSizeList(t){t.startObject(1)}static addListSize(t,e){t.addFieldInt32(0,e,0)}static endFixedSizeList(t){return t.endObject()}static createFixedSizeList(t,e){return r.startFixedSizeList(t),r.addListSize(t,e),r.endFixedSizeList(t)}};var Si;(function(r){r[r.HALF=0]="HALF",r[r.SINGLE=1]="SINGLE",r[r.DOUBLE=2]="DOUBLE"})(Si||(Si={}));var zr=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFloatingPoint(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFloatingPoint(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}precision(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Si.HALF}static startFloatingPoint(t){t.startObject(1)}static addPrecision(t,e){t.addFieldInt16(0,e,Si.HALF)}static endFloatingPoint(t){return t.endObject()}static createFloatingPoint(t,e){return r.startFloatingPoint(t),r.addPrecision(t,e),r.endFloatingPoint(t)}};var Ii;(function(r){r[r.YEAR_MONTH=0]="YEAR_MONTH",r[r.DAY_TIME=1]="DAY_TIME",r[r.MONTH_DAY_NANO=2]="MONTH_DAY_NANO"})(Ii||(Ii={}));var Wr=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsInterval(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsInterval(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Ii.YEAR_MONTH}static startInterval(t){t.startObject(1)}static addUnit(t,e){t.addFieldInt16(0,e,Ii.YEAR_MONTH)}static endInterval(t){return t.endObject()}static createInterval(t,e){return r.startInterval(t),r.addUnit(t,e),r.endInterval(t)}};var Ai=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsList(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsList(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static startList(t){t.startObject(0)}static endList(t){return t.endObject()}static createList(t){return r.startList(t),r.endList(t)}};var jr=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsMap(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMap(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}keysSorted(){let t=this.bb.__offset(this.bb_pos,4);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startMap(t){t.startObject(1)}static addKeysSorted(t,e){t.addFieldInt8(0,+e,0)}static endMap(t){return t.endObject()}static createMap(t,e){return r.startMap(t),r.addKeysSorted(t,e),r.endMap(t)}};var Ti=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsNull(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsNull(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static startNull(t){t.startObject(0)}static endNull(t){return t.endObject()}static createNull(t){return r.startNull(t),r.endNull(t)}};var Fi=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsStruct_(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsStruct_(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static startStruct_(t){t.startObject(0)}static endStruct_(t){return t.endObject()}static createStruct_(t){return r.startStruct_(t),r.endStruct_(t)}};var gr=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTime(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTime(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Pr.MILLISECOND}bitWidth(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt32(this.bb_pos+t):32}static startTime(t){t.startObject(2)}static addUnit(t,e){t.addFieldInt16(0,e,Pr.MILLISECOND)}static addBitWidth(t,e){t.addFieldInt32(1,e,32)}static endTime(t){return t.endObject()}static createTime(t,e,n){return r.startTime(t),r.addUnit(t,e),r.addBitWidth(t,n),r.endTime(t)}};var wr=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTimestamp(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTimestamp(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Pr.SECOND}timezone(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}static startTimestamp(t){t.startObject(2)}static addUnit(t,e){t.addFieldInt16(0,e,Pr.SECOND)}static addTimezone(t,e){t.addFieldOffset(1,e,0)}static endTimestamp(t){return t.endObject()}static createTimestamp(t,e,n){return r.startTimestamp(t),r.addUnit(t,e),r.addTimezone(t,n),r.endTimestamp(t)}};var Bi;(function(r){r[r.Sparse=0]="Sparse",r[r.Dense=1]="Dense"})(Bi||(Bi={}));var Ve=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsUnion(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsUnion(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}mode(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Bi.Sparse}typeIds(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.readInt32(this.bb.__vector(this.bb_pos+e)+t*4):0}typeIdsLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}typeIdsArray(){let t=this.bb.__offset(this.bb_pos,6);return t?new Int32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}static startUnion(t){t.startObject(2)}static addMode(t,e){t.addFieldInt16(0,e,Bi.Sparse)}static addTypeIds(t,e){t.addFieldOffset(1,e,0)}static createTypeIdsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addInt32(e[n]);return t.endVector()}static startTypeIdsVector(t,e){t.startVector(4,e,4)}static endUnion(t){return t.endObject()}static createUnion(t,e,n){return r.startUnion(t),r.addMode(t,e),r.addTypeIds(t,n),r.endUnion(t)}};var xi=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsUtf8(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsUtf8(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static startUtf8(t){t.startObject(0)}static endUtf8(t){return t.endObject()}static createUtf8(t){return r.startUtf8(t),r.endUtf8(t)}};var bt;(function(r){r[r.NONE=0]="NONE",r[r.Null=1]="Null",r[r.Int=2]="Int",r[r.FloatingPoint=3]="FloatingPoint",r[r.Binary=4]="Binary",r[r.Utf8=5]="Utf8",r[r.Bool=6]="Bool",r[r.Decimal=7]="Decimal",r[r.Date=8]="Date",r[r.Time=9]="Time",r[r.Timestamp=10]="Timestamp",r[r.Interval=11]="Interval",r[r.List=12]="List",r[r.Struct_=13]="Struct_",r[r.Union=14]="Union",r[r.FixedSizeBinary=15]="FixedSizeBinary",r[r.FixedSizeList=16]="FixedSizeList",r[r.Map=17]="Map",r[r.Duration=18]="Duration",r[r.LargeBinary=19]="LargeBinary",r[r.LargeUtf8=20]="LargeUtf8",r[r.LargeList=21]="LargeList",r[r.RunEndEncoded=22]="RunEndEncoded"})(bt||(bt={}));var Yt=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsField(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsField(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}name(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}nullable(){let t=this.bb.__offset(this.bb_pos,6);return t?!!this.bb.readInt8(this.bb_pos+t):!1}typeType(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readUint8(this.bb_pos+t):bt.NONE}type(t){let e=this.bb.__offset(this.bb_pos,10);return e?this.bb.__union(t,this.bb_pos+e):null}dictionary(t){let e=this.bb.__offset(this.bb_pos,12);return e?(t||new Ze).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}children(t,e){let n=this.bb.__offset(this.bb_pos,14);return n?(e||new r).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}childrenLength(){let t=this.bb.__offset(this.bb_pos,14);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,16);return n?(e||new Et).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,16);return t?this.bb.__vector_len(this.bb_pos+t):0}static startField(t){t.startObject(7)}static addName(t,e){t.addFieldOffset(0,e,0)}static addNullable(t,e){t.addFieldInt8(1,+e,0)}static addTypeType(t,e){t.addFieldInt8(2,e,bt.NONE)}static addType(t,e){t.addFieldOffset(3,e,0)}static addDictionary(t,e){t.addFieldOffset(4,e,0)}static addChildren(t,e){t.addFieldOffset(5,e,0)}static createChildrenVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startChildrenVector(t,e){t.startVector(4,e,4)}static addCustomMetadata(t,e){t.addFieldOffset(6,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endField(t){return t.endObject()}};var re=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsSchema(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSchema(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}endianness(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Nr.Little}fields(t,e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new Yt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}fieldsLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new Et).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}features(t){let e=this.bb.__offset(this.bb_pos,10);return e?this.bb.readInt64(this.bb.__vector(this.bb_pos+e)+t*8):BigInt(0)}featuresLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.__vector_len(this.bb_pos+t):0}static startSchema(t){t.startObject(4)}static addEndianness(t,e){t.addFieldInt16(0,e,Nr.Little)}static addFields(t,e){t.addFieldOffset(1,e,0)}static createFieldsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startFieldsVector(t,e){t.startVector(4,e,4)}static addCustomMetadata(t,e){t.addFieldOffset(2,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static addFeatures(t,e){t.addFieldOffset(3,e,0)}static createFeaturesVector(t,e){t.startVector(8,e.length,8);for(let n=e.length-1;n>=0;n--)t.addInt64(e[n]);return t.endVector()}static startFeaturesVector(t,e){t.startVector(8,e,8)}static endSchema(t){return t.endObject()}static finishSchemaBuffer(t,e){t.finish(e)}static finishSizePrefixedSchemaBuffer(t,e){t.finish(e,void 0,!0)}static createSchema(t,e,n,i,s){return r.startSchema(t),r.addEndianness(t,e),r.addFields(t,n),r.addCustomMetadata(t,i),r.addFeatures(t,s),r.endSchema(t)}};var pe=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFooter(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFooter(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}version(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):kr.V1}schema(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new re).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}dictionaries(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new cn).__init(this.bb.__vector(this.bb_pos+n)+t*24,this.bb):null}dictionariesLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}recordBatches(t,e){let n=this.bb.__offset(this.bb_pos,10);return n?(e||new cn).__init(this.bb.__vector(this.bb_pos+n)+t*24,this.bb):null}recordBatchesLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,12);return n?(e||new Et).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}static startFooter(t){t.startObject(5)}static addVersion(t,e){t.addFieldInt16(0,e,kr.V1)}static addSchema(t,e){t.addFieldOffset(1,e,0)}static addDictionaries(t,e){t.addFieldOffset(2,e,0)}static startDictionariesVector(t,e){t.startVector(24,e,8)}static addRecordBatches(t,e){t.addFieldOffset(3,e,0)}static startRecordBatchesVector(t,e){t.startVector(24,e,8)}static addCustomMetadata(t,e){t.addFieldOffset(4,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endFooter(t){return t.endObject()}static finishFooterBuffer(t,e){t.finish(e)}static finishSizePrefixedFooterBuffer(t,e){t.finish(e,void 0,!0)}};var ot=class r{constructor(t=[],e,n){this.fields=t||[],this.metadata=e||new Map,n||(n=Xa(t)),this.dictionaries=n}get[Symbol.toStringTag](){return"Schema"}get names(){return this.fields.map(t=>t.name)}toString(){return"Schema<{ ".concat(this.fields.map((t,e)=>"".concat(e,": ").concat(t)).join(", ")," }>")}select(t){let e=new Set(t),n=this.fields.filter(i=>e.has(i.name));return new r(n,this.metadata)}selectAt(t){let e=t.map(n=>this.fields[n]).filter(Boolean);return new r(e,this.metadata)}assign(...t){let e=t[0]instanceof r?t[0]:Array.isArray(t[0])?new r(t[0]):new r(t),n=[...this.fields],i=uo(uo(new Map,this.metadata),e.metadata),s=e.fields.filter(a=>{let l=n.findIndex(c=>c.name===a.name);return~l?(n[l]=a.clone({metadata:uo(uo(new Map,n[l].metadata),a.metadata)}))&&!1:!0}),o=Xa(s,new Map);return new r([...n,...s],i,new Map([...this.dictionaries,...o]))}};ot.prototype.fields=null;ot.prototype.metadata=null;ot.prototype.dictionaries=null;var G=class r{static new(...t){let[e,n,i,s]=t;return t[0]&&typeof t[0]=="object"&&({name:e}=t[0],n===void 0&&(n=t[0].type),i===void 0&&(i=t[0].nullable),s===void 0&&(s=t[0].metadata)),new r("".concat(e),n,i,s)}constructor(t,e,n=!1,i){this.name=t,this.type=e,this.nullable=n,this.metadata=i||new Map}get typeId(){return this.type.typeId}get[Symbol.toStringTag](){return"Field"}toString(){return"".concat(this.name,": ").concat(this.type)}clone(...t){let[e,n,i,s]=t;return!t[0]||typeof t[0]!="object"?[e=this.name,n=this.type,i=this.nullable,s=this.metadata]=t:{name:e=this.name,type:n=this.type,nullable:i=this.nullable,metadata:s=this.metadata}=t[0],r.new(e,n,i,s)}};G.prototype.type=null;G.prototype.name=null;G.prototype.nullable=null;G.prototype.metadata=null;function uo(r,t){return new Map([...r||new Map,...t||new Map])}function Xa(r,t=new Map){for(let e=-1,n=r.length;++e<n;){let s=r[e].type;if(D.isDictionary(s)){if(!t.has(s.id))t.set(s.id,s.dictionary);else if(t.get(s.id)!==s.dictionary)throw new Error("Cannot create Schema containing two different dictionaries with the same Id")}s.children&&s.children.length>0&&Xa(s.children,t)}return t}var ey=un,ry=he,vr=class{static decode(t){t=new ry(N(t));let e=pe.getRootAsFooter(t),n=ot.decode(e.schema());return new Ga(n,e)}static encode(t){let e=new ey,n=ot.encode(e,t.schema);pe.startRecordBatchesVector(e,t.numRecordBatches);for(let o of[...t.recordBatches()].slice().reverse())Sr.encode(e,o);let i=e.endVector();pe.startDictionariesVector(e,t.numDictionaries);for(let o of[...t.dictionaryBatches()].slice().reverse())Sr.encode(e,o);let s=e.endVector();return pe.startFooter(e),pe.addSchema(e,n),pe.addVersion(e,Ut.V4),pe.addRecordBatches(e,i),pe.addDictionaries(e,s),pe.finishFooterBuffer(e,pe.endFooter(e)),e.asUint8Array()}get numRecordBatches(){return this._recordBatches.length}get numDictionaries(){return this._dictionaryBatches.length}constructor(t,e=Ut.V4,n,i){this.schema=t,this.version=e,n&&(this._recordBatches=n),i&&(this._dictionaryBatches=i)}*recordBatches(){for(let t,e=-1,n=this.numRecordBatches;++e<n;)(t=this.getRecordBatch(e))&&(yield t)}*dictionaryBatches(){for(let t,e=-1,n=this.numDictionaries;++e<n;)(t=this.getDictionaryBatch(e))&&(yield t)}getRecordBatch(t){return t>=0&&t<this.numRecordBatches&&this._recordBatches[t]||null}getDictionaryBatch(t){return t>=0&&t<this.numDictionaries&&this._dictionaryBatches[t]||null}};var Ga=class extends vr{get numRecordBatches(){return this._footer.recordBatchesLength()}get numDictionaries(){return this._footer.dictionariesLength()}constructor(t,e){super(t,e.version()),this._footer=e}getRecordBatch(t){if(t>=0&&t<this.numRecordBatches){let e=this._footer.recordBatches(t);if(e)return Sr.decode(e)}return null}getDictionaryBatch(t){if(t>=0&&t<this.numDictionaries){let e=this._footer.dictionaries(t);if(e)return Sr.decode(e)}return null}},Sr=class r{static decode(t){return new r(t.metaDataLength(),t.bodyLength(),t.offset())}static encode(t,e){let{metaDataLength:n}=e,i=BigInt(e.offset),s=BigInt(e.bodyLength);return cn.createBlock(t,i,n,s)}constructor(t,e,n){this.metaDataLength=t,this.offset=te(n),this.bodyLength=te(e)}};var ht=Object.freeze({done:!0,value:void 0}),Di=class{constructor(t){this._json=t}get schema(){return this._json.schema}get batches(){return this._json.batches||[]}get dictionaries(){return this._json.dictionaries||[]}},ln=class{tee(){return this._getDOMStream().tee()}pipe(t,e){return this._getNodeStream().pipe(t,e)}pipeTo(t,e){return this._getDOMStream().pipeTo(t,e)}pipeThrough(t,e){return this._getDOMStream().pipeThrough(t,e)}_getDOMStream(){return this._DOMStream||(this._DOMStream=this.toDOMStream())}_getNodeStream(){return this._nodeStream||(this._nodeStream=this.toNodeStream())}},lo=class extends ln{constructor(){super(),this._values=[],this.resolvers=[],this._closedPromise=new Promise(t=>this._closedPromiseResolve=t)}get closed(){return this._closedPromise}cancel(t){return A(this,void 0,void 0,function*(){yield this.return(t)})}write(t){this._ensureOpen()&&(this.resolvers.length<=0?this._values.push(t):this.resolvers.shift().resolve({done:!1,value:t}))}abort(t){this._closedPromiseResolve&&(this.resolvers.length<=0?this._error={error:t}:this.resolvers.shift().reject({done:!0,value:t}))}close(){if(this._closedPromiseResolve){let{resolvers:t}=this;for(;t.length>0;)t.shift().resolve(ht);this._closedPromiseResolve(),this._closedPromiseResolve=void 0}}[Symbol.asyncIterator](){return this}toDOMStream(t){return Ht.toDOMStream(this._closedPromiseResolve||this._error?this:this._values,t)}toNodeStream(t){return Ht.toNodeStream(this._closedPromiseResolve||this._error?this:this._values,t)}throw(t){return A(this,void 0,void 0,function*(){return yield this.abort(t),ht})}return(t){return A(this,void 0,void 0,function*(){return yield this.close(),ht})}read(t){return A(this,void 0,void 0,function*(){return(yield this.next(t,"read")).value})}peek(t){return A(this,void 0,void 0,function*(){return(yield this.next(t,"peek")).value})}next(...t){return this._values.length>0?Promise.resolve({done:!1,value:this._values.shift()}):this._error?Promise.reject({done:!0,value:this._error.error}):this._closedPromiseResolve?new Promise((e,n)=>{this.resolvers.push({resolve:e,reject:n})}):Promise.resolve(ht)}_ensureOpen(){if(this._closedPromiseResolve)return!0;throw new Error("AsyncQueue is closed")}};var tr=class extends lo{write(t){if((t=N(t)).byteLength>0)return super.write(t)}toString(t=!1){return t?oi(this.toUint8Array(!0)):this.toUint8Array(!1).then(oi)}toUint8Array(t=!1){return t?ue(this._values)[0]:(()=>A(this,void 0,void 0,function*(){var e,n,i,s;let o=[],a=0;try{for(var l=!0,c=xe(this),m;m=yield c.next(),e=m.done,!e;){s=m.value,l=!1;try{let w=s;o.push(w),a+=w.byteLength}finally{l=!0}}}catch(w){n={error:w}}finally{try{!l&&!e&&(i=c.return)&&(yield i.call(c))}finally{if(n)throw n.error}}return ue(o,a)[0]}))()}},er=class{constructor(t){t&&(this.source=new Ka(Ht.fromIterable(t)))}[Symbol.iterator](){return this}next(t){return this.source.next(t)}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}peek(t){return this.source.peek(t)}read(t){return this.source.read(t)}},Ae=class r{constructor(t){t instanceof r?this.source=t.source:t instanceof tr?this.source=new Ir(Ht.fromAsyncIterable(t)):Fs(t)?this.source=new Ir(Ht.fromNodeStream(t)):ai(t)?this.source=new Ir(Ht.fromDOMStream(t)):As(t)?this.source=new Ir(Ht.fromDOMStream(t.body)):Ee(t)?this.source=new Ir(Ht.fromIterable(t)):De(t)?this.source=new Ir(Ht.fromAsyncIterable(t)):we(t)&&(this.source=new Ir(Ht.fromAsyncIterable(t)))}[Symbol.asyncIterator](){return this}next(t){return this.source.next(t)}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}get closed(){return this.source.closed}cancel(t){return this.source.cancel(t)}peek(t){return this.source.peek(t)}read(t){return this.source.read(t)}},Ka=class{constructor(t){this.source=t}cancel(t){this.return(t)}peek(t){return this.next(t,"peek").value}read(t){return this.next(t,"read").value}next(t,e="read"){return this.source.next({cmd:e,size:t})}throw(t){return Object.create(this.source.throw&&this.source.throw(t)||ht)}return(t){return Object.create(this.source.return&&this.source.return(t)||ht)}},Ir=class{constructor(t){this.source=t,this._closedPromise=new Promise(e=>this._closedPromiseResolve=e)}cancel(t){return A(this,void 0,void 0,function*(){yield this.return(t)})}get closed(){return this._closedPromise}read(t){return A(this,void 0,void 0,function*(){return(yield this.next(t,"read")).value})}peek(t){return A(this,void 0,void 0,function*(){return(yield this.next(t,"peek")).value})}next(t,e="read"){return A(this,void 0,void 0,function*(){return yield this.source.next({cmd:e,size:t})})}throw(t){return A(this,void 0,void 0,function*(){let e=this.source.throw&&(yield this.source.throw(t))||ht;return this._closedPromiseResolve&&this._closedPromiseResolve(),this._closedPromiseResolve=void 0,Object.create(e)})}return(t){return A(this,void 0,void 0,function*(){let e=this.source.return&&(yield this.source.return(t))||ht;return this._closedPromiseResolve&&this._closedPromiseResolve(),this._closedPromiseResolve=void 0,Object.create(e)})}};var Ei=class extends er{constructor(t,e){super(),this.position=0,this.buffer=N(t),this.size=e===void 0?this.buffer.byteLength:e}readInt32(t){let{buffer:e,byteOffset:n}=this.readAt(t,4);return new DataView(e,n).getInt32(0,!0)}seek(t){return this.position=Math.min(t,this.size),t<this.size}read(t){let{buffer:e,size:n,position:i}=this;return e&&i<n?(typeof t!="number"&&(t=Number.POSITIVE_INFINITY),this.position=Math.min(n,i+Math.min(n-i,t)),e.subarray(i,this.position)):null}readAt(t,e){let n=this.buffer,i=Math.min(this.size,t+e);return n?n.subarray(t,i):new Uint8Array(e)}close(){this.buffer&&(this.buffer=null)}throw(t){return this.close(),{done:!0,value:t}}return(t){return this.close(),{done:!0,value:t}}},$r=class extends Ae{constructor(t,e){super(),this.position=0,this._handle=t,typeof e=="number"?this.size=e:this._pending=(()=>A(this,void 0,void 0,function*(){this.size=(yield t.stat()).size,delete this._pending}))()}readInt32(t){return A(this,void 0,void 0,function*(){let{buffer:e,byteOffset:n}=yield this.readAt(t,4);return new DataView(e,n).getInt32(0,!0)})}seek(t){return A(this,void 0,void 0,function*(){return this._pending&&(yield this._pending),this.position=Math.min(t,this.size),t<this.size})}read(t){return A(this,void 0,void 0,function*(){this._pending&&(yield this._pending);let{_handle:e,size:n,position:i}=this;if(e&&i<n){typeof t!="number"&&(t=Number.POSITIVE_INFINITY);let s=i,o=0,a=0,l=Math.min(n,s+Math.min(n-s,t)),c=new Uint8Array(Math.max(0,(this.position=l)-s));for(;(s+=a)<l&&(o+=a)<c.byteLength;)({bytesRead:a}=yield e.read(c,o,c.byteLength-o,s));return c}return null})}readAt(t,e){return A(this,void 0,void 0,function*(){this._pending&&(yield this._pending);let{_handle:n,size:i}=this;if(n&&t+e<i){let s=Math.min(i,t+e),o=new Uint8Array(s-t);return(yield n.read(o,0,e,t)).buffer}return new Uint8Array(e)})}close(){return A(this,void 0,void 0,function*(){let t=this._handle;this._handle=null,t&&(yield t.close())})}throw(t){return A(this,void 0,void 0,function*(){return yield this.close(),{done:!0,value:t}})}return(t){return A(this,void 0,void 0,function*(){return yield this.close(),{done:!0,value:t}})}};var qa={};en(qa,{BaseInt64:()=>Oi,Int128:()=>Mi,Int64:()=>Ar,Uint64:()=>It});function Cn(r){return r<0&&(r=4294967295+r+1),"0x".concat(r.toString(16))}var Pn=8,Ja=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8],Oi=class{constructor(t){this.buffer=t}high(){return this.buffer[1]}low(){return this.buffer[0]}_times(t){let e=new Uint32Array([this.buffer[1]>>>16,this.buffer[1]&65535,this.buffer[0]>>>16,this.buffer[0]&65535]),n=new Uint32Array([t.buffer[1]>>>16,t.buffer[1]&65535,t.buffer[0]>>>16,t.buffer[0]&65535]),i=e[3]*n[3];this.buffer[0]=i&65535;let s=i>>>16;return i=e[2]*n[3],s+=i,i=e[3]*n[2]>>>0,s+=i,this.buffer[0]+=s<<16,this.buffer[1]=s>>>0<i?65536:0,this.buffer[1]+=s>>>16,this.buffer[1]+=e[1]*n[3]+e[2]*n[2]+e[3]*n[1],this.buffer[1]+=e[0]*n[3]+e[1]*n[2]+e[2]*n[1]+e[3]*n[0]<<16,this}_plus(t){let e=this.buffer[0]+t.buffer[0]>>>0;this.buffer[1]+=t.buffer[1],e<this.buffer[0]>>>0&&++this.buffer[1],this.buffer[0]=e}lessThan(t){return this.buffer[1]<t.buffer[1]||this.buffer[1]===t.buffer[1]&&this.buffer[0]<t.buffer[0]}equals(t){return this.buffer[1]===t.buffer[1]&&this.buffer[0]==t.buffer[0]}greaterThan(t){return t.lessThan(this)}hex(){return"".concat(Cn(this.buffer[1])," ").concat(Cn(this.buffer[0]))}},It=class r extends Oi{times(t){return this._times(t),this}plus(t){return this._plus(t),this}static from(t,e=new Uint32Array(2)){return r.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(2)){return r.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(2)){let n=t.length,i=new r(e);for(let s=0;s<n;){let o=Pn<n-s?Pn:n-s,a=new r(new Uint32Array([Number.parseInt(t.slice(s,s+o),10),0])),l=new r(new Uint32Array([Ja[o],0]));i.times(l),i.plus(a),s+=o}return i}static convertArray(t){let e=new Uint32Array(t.length*2);for(let n=-1,i=t.length;++n<i;)r.from(t[n],new Uint32Array(e.buffer,e.byteOffset+2*n*4,2));return e}static multiply(t,e){return new r(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new r(new Uint32Array(t.buffer)).plus(e)}},Ar=class r extends Oi{negate(){return this.buffer[0]=~this.buffer[0]+1,this.buffer[1]=~this.buffer[1],this.buffer[0]==0&&++this.buffer[1],this}times(t){return this._times(t),this}plus(t){return this._plus(t),this}lessThan(t){let e=this.buffer[1]<<0,n=t.buffer[1]<<0;return e<n||e===n&&this.buffer[0]<t.buffer[0]}static from(t,e=new Uint32Array(2)){return r.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(2)){return r.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(2)){let n=t.startsWith("-"),i=t.length,s=new r(e);for(let o=n?1:0;o<i;){let a=Pn<i-o?Pn:i-o,l=new r(new Uint32Array([Number.parseInt(t.slice(o,o+a),10),0])),c=new r(new Uint32Array([Ja[a],0]));s.times(c),s.plus(l),o+=a}return n?s.negate():s}static convertArray(t){let e=new Uint32Array(t.length*2);for(let n=-1,i=t.length;++n<i;)r.from(t[n],new Uint32Array(e.buffer,e.byteOffset+2*n*4,2));return e}static multiply(t,e){return new r(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new r(new Uint32Array(t.buffer)).plus(e)}},Mi=class r{constructor(t){this.buffer=t}high(){return new Ar(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset+8,2))}low(){return new Ar(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset,2))}negate(){return this.buffer[0]=~this.buffer[0]+1,this.buffer[1]=~this.buffer[1],this.buffer[2]=~this.buffer[2],this.buffer[3]=~this.buffer[3],this.buffer[0]==0&&++this.buffer[1],this.buffer[1]==0&&++this.buffer[2],this.buffer[2]==0&&++this.buffer[3],this}times(t){let e=new It(new Uint32Array([this.buffer[3],0])),n=new It(new Uint32Array([this.buffer[2],0])),i=new It(new Uint32Array([this.buffer[1],0])),s=new It(new Uint32Array([this.buffer[0],0])),o=new It(new Uint32Array([t.buffer[3],0])),a=new It(new Uint32Array([t.buffer[2],0])),l=new It(new Uint32Array([t.buffer[1],0])),c=new It(new Uint32Array([t.buffer[0],0])),m=It.multiply(s,c);this.buffer[0]=m.low();let w=new It(new Uint32Array([m.high(),0]));return m=It.multiply(i,c),w.plus(m),m=It.multiply(s,l),w.plus(m),this.buffer[1]=w.low(),this.buffer[3]=w.lessThan(m)?1:0,this.buffer[2]=w.high(),new It(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset+8,2)).plus(It.multiply(n,c)).plus(It.multiply(i,l)).plus(It.multiply(s,a)),this.buffer[3]+=It.multiply(e,c).plus(It.multiply(n,l)).plus(It.multiply(i,a)).plus(It.multiply(s,o)).low(),this}plus(t){let e=new Uint32Array(4);return e[3]=this.buffer[3]+t.buffer[3]>>>0,e[2]=this.buffer[2]+t.buffer[2]>>>0,e[1]=this.buffer[1]+t.buffer[1]>>>0,e[0]=this.buffer[0]+t.buffer[0]>>>0,e[0]<this.buffer[0]>>>0&&++e[1],e[1]<this.buffer[1]>>>0&&++e[2],e[2]<this.buffer[2]>>>0&&++e[3],this.buffer[3]=e[3],this.buffer[2]=e[2],this.buffer[1]=e[1],this.buffer[0]=e[0],this}hex(){return"".concat(Cn(this.buffer[3])," ").concat(Cn(this.buffer[2])," ").concat(Cn(this.buffer[1])," ").concat(Cn(this.buffer[0]))}static multiply(t,e){return new r(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new r(new Uint32Array(t.buffer)).plus(e)}static from(t,e=new Uint32Array(4)){return r.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(4)){return r.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(4)){let n=t.startsWith("-"),i=t.length,s=new r(e);for(let o=n?1:0;o<i;){let a=Pn<i-o?Pn:i-o,l=new r(new Uint32Array([Number.parseInt(t.slice(o,o+a),10),0,0,0])),c=new r(new Uint32Array([Ja[a],0,0,0]));s.times(c),s.plus(l),o+=a}return n?s.negate():s}static convertArray(t){let e=new Uint32Array(t.length*4);for(let n=-1,i=t.length;++n<i;)r.from(t[n],new Uint32Array(e.buffer,e.byteOffset+4*4*n,4));return e}};var Ri=class extends E{constructor(t,e,n,i){super(),this.nodesIndex=-1,this.buffersIndex=-1,this.bytes=t,this.nodes=e,this.buffers=n,this.dictionaries=i}visit(t){return super.visit(t instanceof G?t.type:t)}visitNull(t,{length:e}=this.nextFieldNode()){return H({type:t,length:e})}visitBool(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitInt(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitFloat(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitUtf8(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),data:this.readData(t)})}visitBinary(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),data:this.readData(t)})}visitFixedSizeBinary(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitDate(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitTimestamp(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitTime(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitDecimal(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitList(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),child:this.visit(t.children[0])})}visitStruct(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),children:this.visitMany(t.children)})}visitUnion(t){return t.mode===St.Sparse?this.visitSparseUnion(t):this.visitDenseUnion(t)}visitDenseUnion(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),typeIds:this.readTypeIds(t),valueOffsets:this.readOffsets(t),children:this.visitMany(t.children)})}visitSparseUnion(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),typeIds:this.readTypeIds(t),children:this.visitMany(t.children)})}visitDictionary(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t.indices),dictionary:this.readDictionary(t)})}visitInterval(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitFixedSizeList(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),child:this.visit(t.children[0])})}visitMap(t,{length:e,nullCount:n}=this.nextFieldNode()){return H({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),child:this.visit(t.children[0])})}nextFieldNode(){return this.nodes[++this.nodesIndex]}nextBufferRange(){return this.buffers[++this.buffersIndex]}readNullBitmap(t,e,n=this.nextBufferRange()){return e>0&&this.readData(t,n)||new Uint8Array(0)}readOffsets(t,e){return this.readData(t,e)}readTypeIds(t,e){return this.readData(t,e)}readData(t,{length:e,offset:n}=this.nextBufferRange()){return this.bytes.subarray(n,n+e)}readDictionary(t){return this.dictionaries.get(t.id)}},fo=class extends Ri{constructor(t,e,n,i){super(new Uint8Array(0),e,n,i),this.sources=t}readNullBitmap(t,e,{offset:n}=this.nextBufferRange()){return e<=0?new Uint8Array(0):on(this.sources[n])}readOffsets(t,{offset:e}=this.nextBufferRange()){return Y(Uint8Array,Y(Int32Array,this.sources[e]))}readTypeIds(t,{offset:e}=this.nextBufferRange()){return Y(Uint8Array,Y(t.ArrayType,this.sources[e]))}readData(t,{offset:e}=this.nextBufferRange()){let{sources:n}=this;return D.isTimestamp(t)?Y(Uint8Array,Ar.convertArray(n[e])):(D.isInt(t)||D.isTime(t))&&t.bitWidth===64?Y(Uint8Array,Ar.convertArray(n[e])):D.isDate(t)&&t.unit===Vt.MILLISECOND?Y(Uint8Array,Ar.convertArray(n[e])):D.isDecimal(t)?Y(Uint8Array,Mi.convertArray(n[e])):D.isBinary(t)||D.isFixedSizeBinary(t)?ny(n[e]):D.isBool(t)?on(n[e]):D.isUtf8(t)?Er(n[e].join("")):Y(Uint8Array,Y(t.ArrayType,n[e].map(i=>+i)))}};function ny(r){let t=r.join(""),e=new Uint8Array(t.length/2);for(let n=0;n<t.length;n+=2)e[n>>1]=Number.parseInt(t.slice(n,n+2),16);return e}var Hn=class extends Je{constructor(t){super(t),this._values=new Lr(new Uint8Array(0))}get byteLength(){let t=this._pendingLength+this.length*4;return this._offsets&&(t+=this._offsets.byteLength),this._values&&(t+=this._values.byteLength),this._nulls&&(t+=this._nulls.byteLength),t}setValue(t,e){return super.setValue(t,N(e))}_flushPending(t,e){let n=this._offsets,i=this._values.reserve(e).buffer,s=0;for(let[o,a]of t)if(a===void 0)n.set(o,0);else{let l=a.length;i.set(a,s),n.set(o,l),s+=l}}};var ho=class extends yt{constructor(t){super(t),this._values=new Ln}setValue(t,e){this._values.set(t,+e)}};var dn=class extends Lt{};dn.prototype._setValue=Oa;var Ui=class extends dn{};Ui.prototype._setValue=Ps;var Li=class extends dn{};Li.prototype._setValue=Hs;var ki=class extends Lt{};ki.prototype._setValue=Ua;var po=class extends yt{constructor({type:t,nullValues:e,dictionaryHashFunction:n}){super({type:new le(t.dictionary,t.indices,t.id,t.isOrdered)}),this._nulls=null,this._dictionaryOffset=0,this._keysToIndices=Object.create(null),this.indices=fn({type:this.type.indices,nullValues:e}),this.dictionary=fn({type:this.type.dictionary,nullValues:null}),typeof n=="function"&&(this.valueToKey=n)}get values(){return this.indices.values}get nullCount(){return this.indices.nullCount}get nullBitmap(){return this.indices.nullBitmap}get byteLength(){return this.indices.byteLength+this.dictionary.byteLength}get reservedLength(){return this.indices.reservedLength+this.dictionary.reservedLength}get reservedByteLength(){return this.indices.reservedByteLength+this.dictionary.reservedByteLength}isValid(t){return this.indices.isValid(t)}setValid(t,e){let n=this.indices;return e=n.setValid(t,e),this.length=n.length,e}setValue(t,e){let n=this._keysToIndices,i=this.valueToKey(e),s=n[i];return s===void 0&&(n[i]=s=this._dictionaryOffset+this.dictionary.append(e).length-1),this.indices.setValue(t,s)}flush(){let t=this.type,e=this._dictionary,n=this.dictionary.toVector(),i=this.indices.flush().clone(t);return i.dictionary=e?e.concat(n):n,this.finished||(this._dictionaryOffset+=n.length),this._dictionary=i.dictionary,this.clear(),i}finish(){return this.indices.finish(),this.dictionary.finish(),this._dictionaryOffset=0,this._keysToIndices=Object.create(null),super.finish()}clear(){return this.indices.clear(),this.dictionary.clear(),super.clear()}valueToKey(t){return typeof t=="string"?t:"".concat(t)}};var Ni=class extends Lt{};Ni.prototype._setValue=Ea;var mo=class extends yt{setValue(t,e){let[n]=this.children,i=t*this.stride;for(let s=-1,o=e.length;++s<o;)n.set(i+s,e[s])}addChild(t,e="0"){if(this.numChildren>0)throw new Error("FixedSizeListBuilder can only have one child.");let n=this.children.push(t);return this.type=new ke(this.type.listSize,new G(e,t.type,!0)),n}};var hn=class extends Lt{setValue(t,e){this._values.set(t,e)}},_o=class extends hn{setValue(t,e){super.setValue(t,fi(e))}},yo=class extends hn{},bo=class extends hn{};var pn=class extends Lt{};pn.prototype._setValue=La;var Ci=class extends pn{};Ci.prototype._setValue=Ks;var Pi=class extends pn{};Pi.prototype._setValue=Js;var Te=class extends Lt{setValue(t,e){this._values.set(t,e)}},go=class extends Te{},wo=class extends Te{},vo=class extends Te{},So=class extends Te{},Io=class extends Te{},Ao=class extends Te{},To=class extends Te{},Fo=class extends Te{};var Bo=class extends Je{constructor(t){super(t),this._offsets=new kn}addChild(t,e="0"){if(this.numChildren>0)throw new Error("ListBuilder can only have one child.");return this.children[this.numChildren]=t,this.type=new Ue(new G(e,t.type,!0)),this.numChildren-1}_flushPending(t){let e=this._offsets,[n]=this.children;for(let[i,s]of t)if(typeof s>"u")e.set(i,0);else{let o=s.length,a=e.set(i,o).buffer[i];for(let l=-1;++l<o;)n.set(a+l,s[l])}}};var xo=class extends Je{set(t,e){return super.set(t,e)}setValue(t,e){let n=e instanceof Map?e:new Map(Object.entries(e)),i=this._pending||(this._pending=new Map),s=i.get(t);s&&(this._pendingLength-=s.size),this._pendingLength+=n.size,i.set(t,n)}addChild(t,e="".concat(this.numChildren)){if(this.numChildren>0)throw new Error("ListBuilder can only have one child.");return this.children[this.numChildren]=t,this.type=new Ne(new G(e,t.type,!0),this.type.keysSorted),this.numChildren-1}_flushPending(t){let e=this._offsets,[n]=this.children;for(let[i,s]of t)if(s===void 0)e.set(i,0);else{let{[i]:o,[i+1]:a}=e.set(i,s.size).buffer;for(let l of s.entries())if(n.set(o,l),++o>=a)break}}};var Do=class extends yt{setValue(t,e){}setValid(t,e){return this.length=Math.max(t+1,this.length),e}};var Eo=class extends yt{setValue(t,e){let{children:n,type:i}=this;switch(Array.isArray(e)||e.constructor){case!0:return i.children.forEach((s,o)=>n[o].set(t,e[o]));case Map:return i.children.forEach((s,o)=>n[o].set(t,e.get(s.name)));default:return i.children.forEach((s,o)=>n[o].set(t,e[s.name]))}}setValid(t,e){return super.setValid(t,e)||this.children.forEach(n=>n.setValid(t,e)),e}addChild(t,e="".concat(this.numChildren)){let n=this.children.push(t);return this.type=new ft([...this.type.children,new G(e,t.type,!0)]),n}};var Tr=class extends Lt{};Tr.prototype._setValue=Ma;var Hi=class extends Tr{};Hi.prototype._setValue=Vs;var Vi=class extends Tr{};Vi.prototype._setValue=zs;var zi=class extends Tr{};zi.prototype._setValue=Ws;var Wi=class extends Tr{};Wi.prototype._setValue=js;var Fr=class extends Lt{};Fr.prototype._setValue=Ra;var ji=class extends Fr{};ji.prototype._setValue=$s;var $i=class extends Fr{};$i.prototype._setValue=Ys;var Yi=class extends Fr{};Yi.prototype._setValue=Xs;var Xi=class extends Fr{};Xi.prototype._setValue=Gs;var Vn=class extends yt{constructor(t){super(t),this._typeIds=new br(new Int8Array(0),1),typeof t.valueToChildTypeId=="function"&&(this._valueToChildTypeId=t.valueToChildTypeId)}get typeIdToChildIndex(){return this.type.typeIdToChildIndex}append(t,e){return this.set(this.length,t,e)}set(t,e,n){return n===void 0&&(n=this._valueToChildTypeId(this,e,t)),this.setValid(t,this.isValid(e))&&this.setValue(t,e,n),this}setValue(t,e,n){this._typeIds.set(t,n);let i=this.type.typeIdToChildIndex[n],s=this.children[i];s==null||s.set(t,e)}addChild(t,e="".concat(this.children.length)){let n=this.children.push(t),{type:{children:i,mode:s,typeIds:o}}=this,a=[...i,new G(e,t.type)];return this.type=new Le(s,[...o,n],a),n}_valueToChildTypeId(t,e,n){throw new Error("Cannot map UnionBuilder value to child typeId. Pass the `childTypeId` as the second argument to unionBuilder.append(), or supply a `valueToChildTypeId` function as part of the UnionBuilder constructor options.")}},Oo=class extends Vn{},Mo=class extends Vn{constructor(t){super(t),this._offsets=new br(new Int32Array(0))}setValue(t,e,n){let i=this._typeIds.set(t,n).buffer[t],s=this.getChildAt(this.type.typeIdToChildIndex[i]),o=this._offsets.set(t,s.length).buffer[t];s==null||s.set(o,e)}};var Gi=class extends Je{constructor(t){super(t),this._values=new Lr(new Uint8Array(0))}get byteLength(){let t=this._pendingLength+this.length*4;return this._offsets&&(t+=this._offsets.byteLength),this._values&&(t+=this._values.byteLength),this._nulls&&(t+=this._nulls.byteLength),t}setValue(t,e){return super.setValue(t,Er(e))}_flushPending(t,e){}};Gi.prototype._flushPending=Hn.prototype._flushPending;var Za=class extends E{visitNull(){return Do}visitBool(){return ho}visitInt(){return Te}visitInt8(){return go}visitInt16(){return wo}visitInt32(){return vo}visitInt64(){return So}visitUint8(){return Io}visitUint16(){return Ao}visitUint32(){return To}visitUint64(){return Fo}visitFloat(){return hn}visitFloat16(){return _o}visitFloat32(){return yo}visitFloat64(){return bo}visitUtf8(){return Gi}visitBinary(){return Hn}visitFixedSizeBinary(){return Ni}visitDate(){return dn}visitDateDay(){return Ui}visitDateMillisecond(){return Li}visitTimestamp(){return Tr}visitTimestampSecond(){return Hi}visitTimestampMillisecond(){return Vi}visitTimestampMicrosecond(){return zi}visitTimestampNanosecond(){return Wi}visitTime(){return Fr}visitTimeSecond(){return ji}visitTimeMillisecond(){return $i}visitTimeMicrosecond(){return Yi}visitTimeNanosecond(){return Xi}visitDecimal(){return ki}visitList(){return Bo}visitStruct(){return Eo}visitUnion(){return Vn}visitDenseUnion(){return Mo}visitSparseUnion(){return Oo}visitDictionary(){return po}visitInterval(){return pn}visitIntervalDayTime(){return Ci}visitIntervalYearMonth(){return Pi}visitFixedSizeList(){return mo}visitMap(){return xo}},hd=new Za;var L=class extends E{compareSchemas(t,e){return t===e||e instanceof t.constructor&&this.compareManyFields(t.fields,e.fields)}compareManyFields(t,e){return t===e||Array.isArray(t)&&Array.isArray(e)&&t.length===e.length&&t.every((n,i)=>this.compareFields(n,e[i]))}compareFields(t,e){return t===e||e instanceof t.constructor&&t.name===e.name&&t.nullable===e.nullable&&this.visit(t.type,e.type)}};function ne(r,t){return t instanceof r.constructor}function Ki(r,t){return r===t||ne(r,t)}function Br(r,t){return r===t||ne(r,t)&&r.bitWidth===t.bitWidth&&r.isSigned===t.isSigned}function Ro(r,t){return r===t||ne(r,t)&&r.precision===t.precision}function iy(r,t){return r===t||ne(r,t)&&r.byteWidth===t.byteWidth}function Qa(r,t){return r===t||ne(r,t)&&r.unit===t.unit}function Ji(r,t){return r===t||ne(r,t)&&r.unit===t.unit&&r.timezone===t.timezone}function qi(r,t){return r===t||ne(r,t)&&r.unit===t.unit&&r.bitWidth===t.bitWidth}function sy(r,t){return r===t||ne(r,t)&&r.children.length===t.children.length&&rr.compareManyFields(r.children,t.children)}function oy(r,t){return r===t||ne(r,t)&&r.children.length===t.children.length&&rr.compareManyFields(r.children,t.children)}function tc(r,t){return r===t||ne(r,t)&&r.mode===t.mode&&r.typeIds.every((e,n)=>e===t.typeIds[n])&&rr.compareManyFields(r.children,t.children)}function ay(r,t){return r===t||ne(r,t)&&r.id===t.id&&r.isOrdered===t.isOrdered&&rr.visit(r.indices,t.indices)&&rr.visit(r.dictionary,t.dictionary)}function ec(r,t){return r===t||ne(r,t)&&r.unit===t.unit}function cy(r,t){return r===t||ne(r,t)&&r.listSize===t.listSize&&r.children.length===t.children.length&&rr.compareManyFields(r.children,t.children)}function uy(r,t){return r===t||ne(r,t)&&r.keysSorted===t.keysSorted&&r.children.length===t.children.length&&rr.compareManyFields(r.children,t.children)}L.prototype.visitNull=Ki;L.prototype.visitBool=Ki;L.prototype.visitInt=Br;L.prototype.visitInt8=Br;L.prototype.visitInt16=Br;L.prototype.visitInt32=Br;L.prototype.visitInt64=Br;L.prototype.visitUint8=Br;L.prototype.visitUint16=Br;L.prototype.visitUint32=Br;L.prototype.visitUint64=Br;L.prototype.visitFloat=Ro;L.prototype.visitFloat16=Ro;L.prototype.visitFloat32=Ro;L.prototype.visitFloat64=Ro;L.prototype.visitUtf8=Ki;L.prototype.visitBinary=Ki;L.prototype.visitFixedSizeBinary=iy;L.prototype.visitDate=Qa;L.prototype.visitDateDay=Qa;L.prototype.visitDateMillisecond=Qa;L.prototype.visitTimestamp=Ji;L.prototype.visitTimestampSecond=Ji;L.prototype.visitTimestampMillisecond=Ji;L.prototype.visitTimestampMicrosecond=Ji;L.prototype.visitTimestampNanosecond=Ji;L.prototype.visitTime=qi;L.prototype.visitTimeSecond=qi;L.prototype.visitTimeMillisecond=qi;L.prototype.visitTimeMicrosecond=qi;L.prototype.visitTimeNanosecond=qi;L.prototype.visitDecimal=Ki;L.prototype.visitList=sy;L.prototype.visitStruct=oy;L.prototype.visitUnion=tc;L.prototype.visitDenseUnion=tc;L.prototype.visitSparseUnion=tc;L.prototype.visitDictionary=ay;L.prototype.visitInterval=ec;L.prototype.visitIntervalDayTime=ec;L.prototype.visitIntervalYearMonth=ec;L.prototype.visitFixedSizeList=cy;L.prototype.visitMap=uy;var rr=new L;function mn(r,t){return rr.compareSchemas(r,t)}function pd(r,t){return rr.compareFields(r,t)}function md(r,t){return rr.visit(r,t)}function fn(r){let t=r.type,e=new(hd.getVisitFn(t)())(r);if(t.children&&t.children.length>0){let n=r.children||[],i={nullValues:r.nullValues},s=Array.isArray(n)?(o,a)=>n[a]||i:({name:o})=>n[o]||i;for(let[o,a]of t.children.entries()){let{type:l}=a,c=s(a,o);e.children.push(fn(Object.assign(Object.assign({},c),{type:l})))}}return e}function Uo(r,t){return ly(r,t.map(e=>e.data.concat()))}function ly(r,t){let e=[...r.fields],n=[],i={numBatches:t.reduce((w,S)=>Math.max(w,S.length),0)},s=0,o=0,a=-1,l=t.length,c,m=[];for(;i.numBatches-- >0;){for(o=Number.POSITIVE_INFINITY,a=-1;++a<l;)m[a]=c=t[a].shift(),o=Math.min(o,c?c.length:o);Number.isFinite(o)&&(m=dy(e,o,m,t,i),o>0&&(n[s++]=H({type:new ft(e),length:o,nullCount:0,children:m.slice()})))}return[r=r.assign(e),n.map(w=>new At(r,w))]}function dy(r,t,e,n,i){var s;let o=(t+63&-64)>>3;for(let a=-1,l=n.length;++a<l;){let c=e[a],m=c==null?void 0:c.length;if(m>=t)m===t?e[a]=c:(e[a]=c.slice(0,t),i.numBatches=Math.max(i.numBatches,n[a].unshift(c.slice(t,m-t))));else{let w=r[a];r[a]=w.clone({nullable:!0}),e[a]=(s=c==null?void 0:c._changeLengthAndBackfillNullBitmap(t))!==null&&s!==void 0?s:H({type:w.type,length:t,nullCount:t,nullBitmap:new Uint8Array(o)})}}return e}var _d,Qt=class r{constructor(...t){var e,n;if(t.length===0)return this.batches=[],this.schema=new ot([]),this._offsets=[0],this;let i,s;t[0]instanceof ot&&(i=t.shift()),t[t.length-1]instanceof Uint32Array&&(s=t.pop());let o=l=>{if(l){if(l instanceof At)return[l];if(l instanceof r)return l.batches;if(l instanceof ut){if(l.type instanceof ft)return[new At(new ot(l.type.children),l)]}else{if(Array.isArray(l))return l.flatMap(c=>o(c));if(typeof l[Symbol.iterator]=="function")return[...l].flatMap(c=>o(c));if(typeof l=="object"){let c=Object.keys(l),m=c.map(T=>new q([l[T]])),w=new ot(c.map((T,tt)=>new G(String(T),m[tt].type))),[,S]=Uo(w,m);return S.length===0?[new At(l)]:S}}}return[]},a=t.flatMap(l=>o(l));if(i=(n=i!=null?i:(e=a[0])===null||e===void 0?void 0:e.schema)!==null&&n!==void 0?n:new ot([]),!(i instanceof ot))throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");for(let l of a){if(!(l instanceof At))throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");if(!mn(i,l.schema))throw new TypeError("Table and inner RecordBatch schemas must be equivalent.")}this.schema=i,this.batches=a,this._offsets=s!=null?s:eo(this.data)}get data(){return this.batches.map(({data:t})=>t)}get numCols(){return this.schema.fields.length}get numRows(){return this.data.reduce((t,e)=>t+e.length,0)}get nullCount(){return this._nullCount===-1&&(this._nullCount=to(this.data)),this._nullCount}isValid(t){return!1}get(t){return null}set(t,e){}indexOf(t,e){return-1}getByteLength(t){return 0}[Symbol.iterator](){return this.batches.length>0?Un.visit(new q(this.data)):new Array(0)[Symbol.iterator]()}toArray(){return[...this]}toString(){return"[\n  ".concat(this.toArray().join(",\n  "),"\n]")}concat(...t){let e=this.schema,n=this.data.concat(t.flatMap(({data:i})=>i));return new r(e,n.map(i=>new At(e,i)))}slice(t,e){let n=this.schema;[t,e]=hi({length:this.numRows},t,e);let i=ro(this.data,this._offsets,t,e);return new r(n,i.map(s=>new At(n,s)))}getChild(t){return this.getChildAt(this.schema.fields.findIndex(e=>e.name===t))}getChildAt(t){if(t>-1&&t<this.schema.fields.length){let e=this.data.map(n=>n.children[t]);if(e.length===0){let{type:n}=this.schema.fields[t],i=H({type:n,length:0,nullCount:0});e.push(i._changeLengthAndBackfillNullBitmap(this.numRows))}return new q(e)}return null}setChild(t,e){var n;return this.setChildAt((n=this.schema.fields)===null||n===void 0?void 0:n.findIndex(i=>i.name===t),e)}setChildAt(t,e){let n=this.schema,i=[...this.batches];if(t>-1&&t<this.numCols){e||(e=new q([H({type:new Zt,length:this.numRows})]));let s=n.fields.slice(),o=s[t].clone({type:e.type}),a=this.schema.fields.map((l,c)=>this.getChildAt(c));[s[t],a[t]]=[o,e],[n,i]=Uo(n,a)}return new r(n,i)}select(t){let e=this.schema.fields.reduce((n,i,s)=>n.set(i.name,s),new Map);return this.selectAt(t.map(n=>e.get(n)).filter(n=>n>-1))}selectAt(t){let e=this.schema.selectAt(t),n=this.batches.map(i=>i.selectAt(t));return new r(e,n)}assign(t){let e=this.schema.fields,[n,i]=t.schema.fields.reduce((a,l,c)=>{let[m,w]=a,S=e.findIndex(T=>T.name===l.name);return~S?w[S]=c:m.push(c),a},[[],[]]),s=this.schema.assign(t.schema),o=[...e.map((a,l)=>[l,i[l]]).map(([a,l])=>l===void 0?this.getChildAt(a):t.getChildAt(l)),...n.map(a=>t.getChildAt(a))].filter(Boolean);return new r(...Uo(s,o))}};_d=Symbol.toStringTag;Qt[_d]=(r=>(r.schema=null,r.batches=[],r._offsets=new Uint32Array([0]),r._nullCount=-1,r[Symbol.isConcatSpreadable]=!0,r.isValid=Ur(_i),r.get=Ur(Bt.getVisitFn(h.Struct)),r.set=no(zt.getVisitFn(h.Struct)),r.indexOf=io(an.getVisitFn(h.Struct)),r.getByteLength=Ur(fe.getVisitFn(h.Struct)),"Table"))(Qt.prototype);var bd,At=class r{constructor(...t){switch(t.length){case 2:{if([this.schema]=t,!(this.schema instanceof ot))throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");if([,this.data=H({nullCount:0,type:new ft(this.schema.fields),children:this.schema.fields.map(e=>H({type:e.type,nullCount:0}))})]=t,!(this.data instanceof ut))throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");[this.schema,this.data]=yd(this.schema,this.data.children);break}case 1:{let[e]=t,{fields:n,children:i,length:s}=Object.keys(e).reduce((l,c,m)=>(l.children[m]=e[c],l.length=Math.max(l.length,e[c].length),l.fields[m]=G.new({name:c,type:e[c].type,nullable:!0}),l),{length:0,fields:new Array,children:new Array}),o=new ot(n),a=H({type:new ft(n),length:s,children:i,nullCount:0});[this.schema,this.data]=yd(o,a.children,s);break}default:throw new TypeError("RecordBatch constructor expects an Object mapping names to child Data, or a [Schema, Data] pair.")}}get dictionaries(){return this._dictionaries||(this._dictionaries=gd(this.schema.fields,this.data.children))}get numCols(){return this.schema.fields.length}get numRows(){return this.data.length}get nullCount(){return this.data.nullCount}isValid(t){return this.data.getValid(t)}get(t){return Bt.visit(this.data,t)}set(t,e){return zt.visit(this.data,t,e)}indexOf(t,e){return an.visit(this.data,t,e)}getByteLength(t){return fe.visit(this.data,t)}[Symbol.iterator](){return Un.visit(new q([this.data]))}toArray(){return[...this]}concat(...t){return new Qt(this.schema,[this,...t])}slice(t,e){let[n]=new q([this.data]).slice(t,e).data;return new r(this.schema,n)}getChild(t){var e;return this.getChildAt((e=this.schema.fields)===null||e===void 0?void 0:e.findIndex(n=>n.name===t))}getChildAt(t){return t>-1&&t<this.schema.fields.length?new q([this.data.children[t]]):null}setChild(t,e){var n;return this.setChildAt((n=this.schema.fields)===null||n===void 0?void 0:n.findIndex(i=>i.name===t),e)}setChildAt(t,e){let n=this.schema,i=this.data;if(t>-1&&t<this.numCols){e||(e=new q([H({type:new Zt,length:this.numRows})]));let s=n.fields.slice(),o=i.children.slice(),a=s[t].clone({type:e.type});[s[t],o[t]]=[a,e.data[0]],n=new ot(s,new Map(this.schema.metadata)),i=H({type:new ft(s),children:o})}return new r(n,i)}select(t){let e=this.schema.select(t),n=new ft(e.fields),i=[];for(let s of t){let o=this.schema.fields.findIndex(a=>a.name===s);~o&&(i[o]=this.data.children[o])}return new r(e,H({type:n,length:this.numRows,children:i}))}selectAt(t){let e=this.schema.selectAt(t),n=t.map(s=>this.data.children[s]).filter(Boolean),i=H({type:new ft(e.fields),length:this.numRows,children:n});return new r(e,i)}};bd=Symbol.toStringTag;At[bd]=(r=>(r._nullCount=-1,r[Symbol.isConcatSpreadable]=!0,"RecordBatch"))(At.prototype);function yd(r,t,e=t.reduce((n,i)=>Math.max(n,i.length),0)){var n;let i=[...r.fields],s=[...t],o=(e+63&-64)>>3;for(let[a,l]of r.fields.entries()){let c=t[a];(!c||c.length!==e)&&(i[a]=l.clone({nullable:!0}),s[a]=(n=c==null?void 0:c._changeLengthAndBackfillNullBitmap(e))!==null&&n!==void 0?n:H({type:l.type,length:e,nullCount:e,nullBitmap:new Uint8Array(o)}))}return[r.assign(i),H({type:new ft(i),length:e,children:s})]}function gd(r,t,e=new Map){for(let n=-1,i=r.length;++n<i;){let o=r[n].type,a=t[n];if(D.isDictionary(o)){if(!e.has(o.id))a.dictionary&&e.set(o.id,a.dictionary);else if(e.get(o.id)!==a.dictionary)throw new Error("Cannot create Schema containing two different dictionaries with the same Id")}o.children&&o.children.length>0&&gd(o.children,a.children,e)}return e}var _n=class extends At{constructor(t){let e=t.fields.map(i=>H({type:i.type})),n=H({type:new ft(t.fields),nullCount:0,children:e});super(t,n)}};var Zi;(function(r){r[r.BUFFER=0]="BUFFER"})(Zi||(Zi={}));var Qi;(function(r){r[r.LZ4_FRAME=0]="LZ4_FRAME",r[r.ZSTD=1]="ZSTD"})(Qi||(Qi={}));var Lo=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBodyCompression(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBodyCompression(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}codec(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt8(this.bb_pos+t):Qi.LZ4_FRAME}method(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt8(this.bb_pos+t):Zi.BUFFER}static startBodyCompression(t){t.startObject(2)}static addCodec(t,e){t.addFieldInt8(0,e,Qi.LZ4_FRAME)}static addMethod(t,e){t.addFieldInt8(1,e,Zi.BUFFER)}static endBodyCompression(t){return t.endObject()}static createBodyCompression(t,e,n){return r.startBodyCompression(t),r.addCodec(t,e),r.addMethod(t,n),r.endBodyCompression(t)}};var zn=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}offset(){return this.bb.readInt64(this.bb_pos)}length(){return this.bb.readInt64(this.bb_pos+8)}static sizeOf(){return 16}static createBuffer(t,e,n){return t.prep(8,16),t.writeInt64(BigInt(n!=null?n:0)),t.writeInt64(BigInt(e!=null?e:0)),t.offset()}};var Wn=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}length(){return this.bb.readInt64(this.bb_pos)}nullCount(){return this.bb.readInt64(this.bb_pos+8)}static sizeOf(){return 16}static createFieldNode(t,e,n){return t.prep(8,16),t.writeInt64(BigInt(n!=null?n:0)),t.writeInt64(BigInt(e!=null?e:0)),t.offset()}};var me=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsRecordBatch(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsRecordBatch(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}length(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):BigInt("0")}nodes(t,e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new Wn).__init(this.bb.__vector(this.bb_pos+n)+t*16,this.bb):null}nodesLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}buffers(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new zn).__init(this.bb.__vector(this.bb_pos+n)+t*16,this.bb):null}buffersLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}compression(t){let e=this.bb.__offset(this.bb_pos,10);return e?(t||new Lo).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}static startRecordBatch(t){t.startObject(4)}static addLength(t,e){t.addFieldInt64(0,e,BigInt("0"))}static addNodes(t,e){t.addFieldOffset(1,e,0)}static startNodesVector(t,e){t.startVector(16,e,8)}static addBuffers(t,e){t.addFieldOffset(2,e,0)}static startBuffersVector(t,e){t.startVector(16,e,8)}static addCompression(t,e){t.addFieldOffset(3,e,0)}static endRecordBatch(t){return t.endObject()}};var xr=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDictionaryBatch(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDictionaryBatch(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}id(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):BigInt("0")}data(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new me).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}isDelta(){let t=this.bb.__offset(this.bb_pos,8);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startDictionaryBatch(t){t.startObject(3)}static addId(t,e){t.addFieldInt64(0,e,BigInt("0"))}static addData(t,e){t.addFieldOffset(1,e,0)}static addIsDelta(t,e){t.addFieldInt8(2,+e,0)}static endDictionaryBatch(t){return t.endObject()}};var jn;(function(r){r[r.NONE=0]="NONE",r[r.Schema=1]="Schema",r[r.DictionaryBatch=2]="DictionaryBatch",r[r.RecordBatch=3]="RecordBatch",r[r.Tensor=4]="Tensor",r[r.SparseTensor=5]="SparseTensor"})(jn||(jn={}));var ze=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsMessage(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMessage(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}version(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):kr.V1}headerType(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readUint8(this.bb_pos+t):jn.NONE}header(t){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.__union(t,this.bb_pos+e):null}bodyLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt64(this.bb_pos+t):BigInt("0")}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,12);return n?(e||new Et).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}static startMessage(t){t.startObject(5)}static addVersion(t,e){t.addFieldInt16(0,e,kr.V1)}static addHeaderType(t,e){t.addFieldInt8(1,e,jn.NONE)}static addHeader(t,e){t.addFieldOffset(2,e,0)}static addBodyLength(t,e){t.addFieldInt64(3,e,BigInt("0"))}static addCustomMetadata(t,e){t.addFieldOffset(4,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endMessage(t){return t.endObject()}static finishMessageBuffer(t,e){t.finish(e)}static finishSizePrefixedMessageBuffer(t,e){t.finish(e,void 0,!0)}static createMessage(t,e,n,i,s,o){return r.startMessage(t),r.addVersion(t,e),r.addHeaderType(t,n),r.addHeader(t,i),r.addBodyLength(t,s),r.addCustomMetadata(t,o),r.endMessage(t)}};var rc=class extends E{visit(t,e){return t==null||e==null?void 0:super.visit(t,e)}visitNull(t,e){return Ti.startNull(e),Ti.endNull(e)}visitInt(t,e){return He.startInt(e),He.addBitWidth(e,t.bitWidth),He.addIsSigned(e,t.isSigned),He.endInt(e)}visitFloat(t,e){return zr.startFloatingPoint(e),zr.addPrecision(e,t.precision),zr.endFloatingPoint(e)}visitBinary(t,e){return gi.startBinary(e),gi.endBinary(e)}visitBool(t,e){return wi.startBool(e),wi.endBool(e)}visitUtf8(t,e){return xi.startUtf8(e),xi.endUtf8(e)}visitDecimal(t,e){return Qe.startDecimal(e),Qe.addScale(e,t.scale),Qe.addPrecision(e,t.precision),Qe.addBitWidth(e,t.bitWidth),Qe.endDecimal(e)}visitDate(t,e){return Cr.startDate(e),Cr.addUnit(e,t.unit),Cr.endDate(e)}visitTime(t,e){return gr.startTime(e),gr.addUnit(e,t.unit),gr.addBitWidth(e,t.bitWidth),gr.endTime(e)}visitTimestamp(t,e){let n=t.timezone&&e.createString(t.timezone)||void 0;return wr.startTimestamp(e),wr.addUnit(e,t.unit),n!==void 0&&wr.addTimezone(e,n),wr.endTimestamp(e)}visitInterval(t,e){return Wr.startInterval(e),Wr.addUnit(e,t.unit),Wr.endInterval(e)}visitList(t,e){return Ai.startList(e),Ai.endList(e)}visitStruct(t,e){return Fi.startStruct_(e),Fi.endStruct_(e)}visitUnion(t,e){Ve.startTypeIdsVector(e,t.typeIds.length);let n=Ve.createTypeIdsVector(e,t.typeIds);return Ve.startUnion(e),Ve.addMode(e,t.mode),Ve.addTypeIds(e,n),Ve.endUnion(e)}visitDictionary(t,e){let n=this.visit(t.indices,e);return Ze.startDictionaryEncoding(e),Ze.addId(e,BigInt(t.id)),Ze.addIsOrdered(e,t.isOrdered),n!==void 0&&Ze.addIndexType(e,n),Ze.endDictionaryEncoding(e)}visitFixedSizeBinary(t,e){return Hr.startFixedSizeBinary(e),Hr.addByteWidth(e,t.byteWidth),Hr.endFixedSizeBinary(e)}visitFixedSizeList(t,e){return Vr.startFixedSizeList(e),Vr.addListSize(e,t.listSize),Vr.endFixedSizeList(e)}visitMap(t,e){return jr.startMap(e),jr.addKeysSorted(e,t.keysSorted),jr.endMap(e)}},ko=new rc;function Id(r,t=new Map){return new ot(hy(r,t),No(r.customMetadata),t)}function nc(r){return new Wt(r.count,Td(r.columns),Fd(r.columns))}function Ad(r){return new se(nc(r.data),r.id,r.isDelta)}function hy(r,t){return(r.fields||[]).filter(Boolean).map(e=>G.fromJSON(e,t))}function wd(r,t){return(r.children||[]).filter(Boolean).map(e=>G.fromJSON(e,t))}function Td(r){return(r||[]).reduce((t,e)=>[...t,new We(e.count,py(e.VALIDITY)),...Td(e.children)],[])}function Fd(r,t=[]){for(let e=-1,n=(r||[]).length;++e<n;){let i=r[e];i.VALIDITY&&t.push(new ie(t.length,i.VALIDITY.length)),i.TYPE&&t.push(new ie(t.length,i.TYPE.length)),i.OFFSET&&t.push(new ie(t.length,i.OFFSET.length)),i.DATA&&t.push(new ie(t.length,i.DATA.length)),t=Fd(i.children,t)}return t}function py(r){return(r||[]).reduce((t,e)=>t+ +(e===0),0)}function Bd(r,t){let e,n,i,s,o,a;return!t||!(s=r.dictionary)?(o=Sd(r,wd(r,t)),i=new G(r.name,o,r.nullable,No(r.customMetadata))):t.has(e=s.id)?(n=(n=s.indexType)?vd(n):new Xe,a=new le(t.get(e),n,e,s.isOrdered),i=new G(r.name,a,r.nullable,No(r.customMetadata))):(n=(n=s.indexType)?vd(n):new Xe,t.set(e,o=Sd(r,wd(r,t))),a=new le(o,n,e,s.isOrdered),i=new G(r.name,a,r.nullable,No(r.customMetadata))),i||null}function No(r){return new Map(Object.entries(r||{}))}function vd(r){return new Tt(r.isSigned,r.bitWidth)}function Sd(r,t){let e=r.type.name;switch(e){case"NONE":return new Zt;case"null":return new Zt;case"binary":return new ur;case"utf8":return new lr;case"bool":return new dr;case"list":return new Ue((t||[])[0]);case"struct":return new ft(t||[]);case"struct_":return new ft(t||[])}switch(e){case"int":{let n=r.type;return new Tt(n.isSigned,n.bitWidth)}case"floatingpoint":{let n=r.type;return new ee(_t[n.precision])}case"decimal":{let n=r.type;return new fr(n.scale,n.precision,n.bitWidth)}case"date":{let n=r.type;return new hr(Vt[n.unit])}case"time":{let n=r.type;return new Re(J[n.unit],n.bitWidth)}case"timestamp":{let n=r.type;return new pr(J[n.unit],n.timezone)}case"interval":{let n=r.type;return new mr(qt[n.unit])}case"union":{let n=r.type;return new Le(St[n.mode],n.typeIds||[],t||[])}case"fixedsizebinary":{let n=r.type;return new _r(n.byteWidth)}case"fixedsizelist":{let n=r.type;return new ke(n.listSize,(t||[])[0])}case"map":{let n=r.type;return new Ne((t||[])[0],n.keysSorted)}}throw new Error('Unrecognized type: "'.concat(e,'"'))}var my=un,_y=he,oe=class r{static fromJSON(t,e){let n=new r(0,Ut.V4,e);return n._createHeader=yy(t,e),n}static decode(t){t=new _y(N(t));let e=ze.getRootAsMessage(t),n=e.bodyLength(),i=e.version(),s=e.headerType(),o=new r(n,i,s);return o._createHeader=by(e,s),o}static encode(t){let e=new my,n=-1;return t.isSchema()?n=ot.encode(e,t.header()):t.isRecordBatch()?n=Wt.encode(e,t.header()):t.isDictionaryBatch()&&(n=se.encode(e,t.header())),ze.startMessage(e),ze.addVersion(e,Ut.V4),ze.addHeader(e,n),ze.addHeaderType(e,t.headerType),ze.addBodyLength(e,BigInt(t.bodyLength)),ze.finishMessageBuffer(e,ze.endMessage(e)),e.asUint8Array()}static from(t,e=0){if(t instanceof ot)return new r(0,Ut.V4,rt.Schema,t);if(t instanceof Wt)return new r(e,Ut.V4,rt.RecordBatch,t);if(t instanceof se)return new r(e,Ut.V4,rt.DictionaryBatch,t);throw new Error("Unrecognized Message header: ".concat(t))}get type(){return this.headerType}get version(){return this._version}get headerType(){return this._headerType}get bodyLength(){return this._bodyLength}header(){return this._createHeader()}isSchema(){return this.headerType===rt.Schema}isRecordBatch(){return this.headerType===rt.RecordBatch}isDictionaryBatch(){return this.headerType===rt.DictionaryBatch}constructor(t,e,n,i){this._version=e,this._headerType=n,this.body=new Uint8Array(0),i&&(this._createHeader=()=>i),this._bodyLength=te(t)}},Wt=class{get nodes(){return this._nodes}get length(){return this._length}get buffers(){return this._buffers}constructor(t,e,n){this._nodes=e,this._buffers=n,this._length=te(t)}},se=class{get id(){return this._id}get data(){return this._data}get isDelta(){return this._isDelta}get length(){return this.data.length}get nodes(){return this.data.nodes}get buffers(){return this.data.buffers}constructor(t,e,n=!1){this._data=t,this._isDelta=n,this._id=te(e)}},ie=class{constructor(t,e){this.offset=te(t),this.length=te(e)}},We=class{constructor(t,e){this.length=te(t),this.nullCount=te(e)}};function yy(r,t){return()=>{switch(t){case rt.Schema:return ot.fromJSON(r);case rt.RecordBatch:return Wt.fromJSON(r);case rt.DictionaryBatch:return se.fromJSON(r)}throw new Error("Unrecognized Message type: { name: ".concat(rt[t],", type: ").concat(t," }"))}}function by(r,t){return()=>{switch(t){case rt.Schema:return ot.decode(r.header(new re));case rt.RecordBatch:return Wt.decode(r.header(new me),r.version());case rt.DictionaryBatch:return se.decode(r.header(new xr),r.version())}throw new Error("Unrecognized Message type: { name: ".concat(rt[t],", type: ").concat(t," }"))}}G.encode=Dy;G.decode=By;G.fromJSON=Bd;ot.encode=xy;ot.decode=gy;ot.fromJSON=Id;Wt.encode=Ey;Wt.decode=wy;Wt.fromJSON=nc;se.encode=Oy;se.decode=vy;se.fromJSON=Ad;We.encode=My;We.decode=Iy;ie.encode=Ry;ie.decode=Sy;function gy(r,t=new Map){let e=Fy(r,t);return new ot(e,Co(r),t)}function wy(r,t=Ut.V4){if(r.compression()!==null)throw new Error("Record batch compression not implemented");return new Wt(r.length(),Ay(r),Ty(r,t))}function vy(r,t=Ut.V4){return new se(Wt.decode(r.data(),t),r.id(),r.isDelta())}function Sy(r){return new ie(r.offset(),r.length())}function Iy(r){return new We(r.length(),r.nullCount())}function Ay(r){let t=[];for(let e,n=-1,i=-1,s=r.nodesLength();++n<s;)(e=r.nodes(n))&&(t[++i]=We.decode(e));return t}function Ty(r,t){let e=[];for(let n,i=-1,s=-1,o=r.buffersLength();++i<o;)(n=r.buffers(i))&&(t<Ut.V4&&(n.bb_pos+=8*(i+1)),e[++s]=ie.decode(n));return e}function Fy(r,t){let e=[];for(let n,i=-1,s=-1,o=r.fieldsLength();++i<o;)(n=r.fields(i))&&(e[++s]=G.decode(n,t));return e}function xd(r,t){let e=[];for(let n,i=-1,s=-1,o=r.childrenLength();++i<o;)(n=r.children(i))&&(e[++s]=G.decode(n,t));return e}function By(r,t){let e,n,i,s,o,a;return!t||!(a=r.dictionary())?(i=Ed(r,xd(r,t)),n=new G(r.name(),i,r.nullable(),Co(r))):t.has(e=te(a.id()))?(s=(s=a.indexType())?Dd(s):new Xe,o=new le(t.get(e),s,e,a.isOrdered()),n=new G(r.name(),o,r.nullable(),Co(r))):(s=(s=a.indexType())?Dd(s):new Xe,t.set(e,i=Ed(r,xd(r,t))),o=new le(i,s,e,a.isOrdered()),n=new G(r.name(),o,r.nullable(),Co(r))),n||null}function Co(r){let t=new Map;if(r)for(let e,n,i=-1,s=Math.trunc(r.customMetadataLength());++i<s;)(e=r.customMetadata(i))&&(n=e.key())!=null&&t.set(n,e.value());return t}function Dd(r){return new Tt(r.isSigned(),r.bitWidth())}function Ed(r,t){let e=r.typeType();switch(e){case bt.NONE:return new Zt;case bt.Null:return new Zt;case bt.Binary:return new ur;case bt.Utf8:return new lr;case bt.Bool:return new dr;case bt.List:return new Ue((t||[])[0]);case bt.Struct_:return new ft(t||[])}switch(e){case bt.Int:{let n=r.type(new He);return new Tt(n.isSigned(),n.bitWidth())}case bt.FloatingPoint:{let n=r.type(new zr);return new ee(n.precision())}case bt.Decimal:{let n=r.type(new Qe);return new fr(n.scale(),n.precision(),n.bitWidth())}case bt.Date:{let n=r.type(new Cr);return new hr(n.unit())}case bt.Time:{let n=r.type(new gr);return new Re(n.unit(),n.bitWidth())}case bt.Timestamp:{let n=r.type(new wr);return new pr(n.unit(),n.timezone())}case bt.Interval:{let n=r.type(new Wr);return new mr(n.unit())}case bt.Union:{let n=r.type(new Ve);return new Le(n.mode(),n.typeIdsArray()||[],t||[])}case bt.FixedSizeBinary:{let n=r.type(new Hr);return new _r(n.byteWidth())}case bt.FixedSizeList:{let n=r.type(new Vr);return new ke(n.listSize(),(t||[])[0])}case bt.Map:{let n=r.type(new jr);return new Ne((t||[])[0],n.keysSorted())}}throw new Error('Unrecognized type: "'.concat(bt[e],'" (').concat(e,")"))}function xy(r,t){let e=t.fields.map(s=>G.encode(r,s));re.startFieldsVector(r,e.length);let n=re.createFieldsVector(r,e),i=t.metadata&&t.metadata.size>0?re.createCustomMetadataVector(r,[...t.metadata].map(([s,o])=>{let a=r.createString("".concat(s)),l=r.createString("".concat(o));return Et.startKeyValue(r),Et.addKey(r,a),Et.addValue(r,l),Et.endKeyValue(r)})):-1;return re.startSchema(r),re.addFields(r,n),re.addEndianness(r,Uy?Nr.Little:Nr.Big),i!==-1&&re.addCustomMetadata(r,i),re.endSchema(r)}function Dy(r,t){let e=-1,n=-1,i=-1,s=t.type,o=t.typeId;D.isDictionary(s)?(o=s.dictionary.typeId,i=ko.visit(s,r),n=ko.visit(s.dictionary,r)):n=ko.visit(s,r);let a=(s.children||[]).map(m=>G.encode(r,m)),l=Yt.createChildrenVector(r,a),c=t.metadata&&t.metadata.size>0?Yt.createCustomMetadataVector(r,[...t.metadata].map(([m,w])=>{let S=r.createString("".concat(m)),T=r.createString("".concat(w));return Et.startKeyValue(r),Et.addKey(r,S),Et.addValue(r,T),Et.endKeyValue(r)})):-1;return t.name&&(e=r.createString(t.name)),Yt.startField(r),Yt.addType(r,n),Yt.addTypeType(r,o),Yt.addChildren(r,l),Yt.addNullable(r,!!t.nullable),e!==-1&&Yt.addName(r,e),i!==-1&&Yt.addDictionary(r,i),c!==-1&&Yt.addCustomMetadata(r,c),Yt.endField(r)}function Ey(r,t){let e=t.nodes||[],n=t.buffers||[];me.startNodesVector(r,e.length);for(let o of e.slice().reverse())We.encode(r,o);let i=r.endVector();me.startBuffersVector(r,n.length);for(let o of n.slice().reverse())ie.encode(r,o);let s=r.endVector();return me.startRecordBatch(r),me.addLength(r,BigInt(t.length)),me.addNodes(r,i),me.addBuffers(r,s),me.endRecordBatch(r)}function Oy(r,t){let e=Wt.encode(r,t.data);return xr.startDictionaryBatch(r),xr.addId(r,BigInt(t.id)),xr.addIsDelta(r,t.isDelta),xr.addData(r,e),xr.endDictionaryBatch(r)}function My(r,t){return Wn.createFieldNode(r,BigInt(t.length),BigInt(t.nullCount))}function Ry(r,t){return zn.createBuffer(r,BigInt(t.offset),BigInt(t.length))}var Uy=(()=>{let r=new ArrayBuffer(2);return new DataView(r).setInt16(0,256,!0),new Int16Array(r)[0]===256})();var sc=r=>"Expected ".concat(rt[r]," Message in stream, but was null or length 0."),oc=r=>"Header pointer of flatbuffer-encoded ".concat(rt[r]," Message is null or length 0."),Od=(r,t)=>"Expected to read ".concat(r," metadata bytes, but only read ").concat(t,"."),Md=(r,t)=>"Expected to read ".concat(r," bytes for message body, but only read ").concat(t,"."),$n=class{constructor(t){this.source=t instanceof er?t:new er(t)}[Symbol.iterator](){return this}next(){let t;return(t=this.readMetadataLength()).done?ht:t.value===-1&&(t=this.readMetadataLength()).done?ht:(t=this.readMetadata(t.value)).done?ht:t}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}readMessage(t){let e;if((e=this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(sc(t));return e.value}readMessageBody(t){if(t<=0)return new Uint8Array(0);let e=N(this.source.read(t));if(e.byteLength<t)throw new Error(Md(t,e.byteLength));return e.byteOffset%8===0&&e.byteOffset+e.byteLength<=e.buffer.byteLength?e:e.slice()}readSchema(t=!1){let e=rt.Schema,n=this.readMessage(e),i=n==null?void 0:n.header();if(t&&!i)throw new Error(oc(e));return i}readMetadataLength(){let t=this.source.read(Po),e=t&&new he(t),n=(e==null?void 0:e.readInt32(0))||0;return{done:n===0,value:n}}readMetadata(t){let e=this.source.read(t);if(!e)return ht;if(e.byteLength<t)throw new Error(Od(t,e.byteLength));return{done:!1,value:oe.decode(e)}}},ts=class{constructor(t,e){this.source=t instanceof Ae?t:Is(t)?new $r(t,e):new Ae(t)}[Symbol.asyncIterator](){return this}next(){return A(this,void 0,void 0,function*(){let t;return(t=yield this.readMetadataLength()).done?ht:t.value===-1&&(t=yield this.readMetadataLength()).done?ht:(t=yield this.readMetadata(t.value)).done?ht:t})}throw(t){return A(this,void 0,void 0,function*(){return yield this.source.throw(t)})}return(t){return A(this,void 0,void 0,function*(){return yield this.source.return(t)})}readMessage(t){return A(this,void 0,void 0,function*(){let e;if((e=yield this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(sc(t));return e.value})}readMessageBody(t){return A(this,void 0,void 0,function*(){if(t<=0)return new Uint8Array(0);let e=N(yield this.source.read(t));if(e.byteLength<t)throw new Error(Md(t,e.byteLength));return e.byteOffset%8===0&&e.byteOffset+e.byteLength<=e.buffer.byteLength?e:e.slice()})}readSchema(t=!1){return A(this,void 0,void 0,function*(){let e=rt.Schema,n=yield this.readMessage(e),i=n==null?void 0:n.header();if(t&&!i)throw new Error(oc(e));return i})}readMetadataLength(){return A(this,void 0,void 0,function*(){let t=yield this.source.read(Po),e=t&&new he(t),n=(e==null?void 0:e.readInt32(0))||0;return{done:n===0,value:n}})}readMetadata(t){return A(this,void 0,void 0,function*(){let e=yield this.source.read(t);if(!e)return ht;if(e.byteLength<t)throw new Error(Od(t,e.byteLength));return{done:!1,value:oe.decode(e)}})}},es=class extends $n{constructor(t){super(new Uint8Array(0)),this._schema=!1,this._body=[],this._batchIndex=0,this._dictionaryIndex=0,this._json=t instanceof Di?t:new Di(t)}next(){let{_json:t}=this;if(!this._schema)return this._schema=!0,{done:!1,value:oe.fromJSON(t.schema,rt.Schema)};if(this._dictionaryIndex<t.dictionaries.length){let e=t.dictionaries[this._dictionaryIndex++];return this._body=e.data.columns,{done:!1,value:oe.fromJSON(e,rt.DictionaryBatch)}}if(this._batchIndex<t.batches.length){let e=t.batches[this._batchIndex++];return this._body=e.columns,{done:!1,value:oe.fromJSON(e,rt.RecordBatch)}}return this._body=[],ht}readMessageBody(t){return e(this._body);function e(n){return(n||[]).reduce((i,s)=>[...i,...s.VALIDITY&&[s.VALIDITY]||[],...s.TYPE&&[s.TYPE]||[],...s.OFFSET&&[s.OFFSET]||[],...s.DATA&&[s.DATA]||[],...e(s.children)],[])}}readMessage(t){let e;if((e=this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(sc(t));return e.value}readSchema(){let t=rt.Schema,e=this.readMessage(t),n=e==null?void 0:e.header();if(!e||!n)throw new Error(oc(t));return n}},Po=4,ic="ARROW1",Yn=new Uint8Array(ic.length);for(let r=0;r<ic.length;r+=1)Yn[r]=ic.codePointAt(r);function Ho(r,t=0){for(let e=-1,n=Yn.length;++e<n;)if(Yn[e]!==r[t+e])return!1;return!0}var Xn=Yn.length,ac=Xn+Po,Rd=Xn*2+Po;var jt=class r extends ln{constructor(t){super(),this._impl=t}get closed(){return this._impl.closed}get schema(){return this._impl.schema}get autoDestroy(){return this._impl.autoDestroy}get dictionaries(){return this._impl.dictionaries}get numDictionaries(){return this._impl.numDictionaries}get numRecordBatches(){return this._impl.numRecordBatches}get footer(){return this._impl.isFile()?this._impl.footer:null}isSync(){return this._impl.isSync()}isAsync(){return this._impl.isAsync()}isFile(){return this._impl.isFile()}isStream(){return this._impl.isStream()}next(){return this._impl.next()}throw(t){return this._impl.throw(t)}return(t){return this._impl.return(t)}cancel(){return this._impl.cancel()}reset(t){return this._impl.reset(t),this._DOMStream=void 0,this._nodeStream=void 0,this}open(t){let e=this._impl.open(t);return De(e)?e.then(()=>this):this}readRecordBatch(t){return this._impl.isFile()?this._impl.readRecordBatch(t):null}[Symbol.iterator](){return this._impl[Symbol.iterator]()}[Symbol.asyncIterator](){return this._impl[Symbol.asyncIterator]()}toDOMStream(){return Ht.toDOMStream(this.isSync()?{[Symbol.iterator]:()=>this}:{[Symbol.asyncIterator]:()=>this})}toNodeStream(){return Ht.toNodeStream(this.isSync()?{[Symbol.iterator]:()=>this}:{[Symbol.asyncIterator]:()=>this},{objectMode:!0})}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t,e){throw new Error('"throughDOM" not available in this environment')}static from(t){return t instanceof r?t:vs(t)?ky(t):Is(t)?Py(t):De(t)?(()=>A(this,void 0,void 0,function*(){return yield r.from(yield t)}))():As(t)||ai(t)||Fs(t)||we(t)?Cy(new Ae(t)):Ny(new er(t))}static readAll(t){return t instanceof r?t.isSync()?Ud(t):Ld(t):vs(t)||ArrayBuffer.isView(t)||Ee(t)||Ss(t)?Ud(t):Ld(t)}},nr=class extends jt{constructor(t){super(t),this._impl=t}readAll(){return[...this]}[Symbol.iterator](){return this._impl[Symbol.iterator]()}[Symbol.asyncIterator](){return ce(this,arguments,function*(){yield P(yield*rn(Tn(xe(this[Symbol.iterator]()))))})}},Yr=class extends jt{constructor(t){super(t),this._impl=t}readAll(){var t,e,n,i;return A(this,void 0,void 0,function*(){let s=new Array;try{for(var o=!0,a=xe(this),l;l=yield a.next(),t=l.done,!t;){i=l.value,o=!1;try{let c=i;s.push(c)}finally{o=!0}}}catch(c){e={error:c}}finally{try{!o&&!t&&(n=a.return)&&(yield n.call(a))}finally{if(e)throw e.error}}return s})}[Symbol.iterator](){throw new Error("AsyncRecordBatchStreamReader is not Iterable")}[Symbol.asyncIterator](){return this._impl[Symbol.asyncIterator]()}},Xr=class extends nr{constructor(t){super(t),this._impl=t}},rs=class extends Yr{constructor(t){super(t),this._impl=t}},Vo=class{get numDictionaries(){return this._dictionaryIndex}get numRecordBatches(){return this._recordBatchIndex}constructor(t=new Map){this.closed=!1,this.autoDestroy=!0,this._dictionaryIndex=0,this._recordBatchIndex=0,this.dictionaries=t}isSync(){return!1}isAsync(){return!1}isFile(){return!1}isStream(){return!1}reset(t){return this._dictionaryIndex=0,this._recordBatchIndex=0,this.schema=t,this.dictionaries=new Map,this}_loadRecordBatch(t,e){let n=this._loadVectors(t,e,this.schema.fields),i=H({type:new ft(this.schema.fields),length:t.length,children:n});return new At(this.schema,i)}_loadDictionaryBatch(t,e){let{id:n,isDelta:i}=t,{dictionaries:s,schema:o}=this,a=s.get(n);if(i||!a){let l=o.dictionaries.get(n),c=this._loadVectors(t.data,e,[l]);return(a&&i?a.concat(new q(c)):new q(c)).memoize()}return a.memoize()}_loadVectors(t,e,n){return new Ri(e,t.nodes,t.buffers,this.dictionaries).visitMany(n)}},Gn=class extends Vo{constructor(t,e){super(e),this._reader=vs(t)?new es(this._handle=t):new $n(this._handle=t)}isSync(){return!0}isStream(){return!0}[Symbol.iterator](){return this}cancel(){!this.closed&&(this.closed=!0)&&(this.reset()._reader.return(),this._reader=null,this.dictionaries=null)}open(t){return this.closed||(this.autoDestroy=kd(this,t),this.schema||(this.schema=this._reader.readSchema())||this.cancel()),this}throw(t){return!this.closed&&this.autoDestroy&&(this.closed=!0)?this.reset()._reader.throw(t):ht}return(t){return!this.closed&&this.autoDestroy&&(this.closed=!0)?this.reset()._reader.return(t):ht}next(){if(this.closed)return ht;let t,{_reader:e}=this;for(;t=this._readNextMessageAndValidate();)if(t.isSchema())this.reset(t.header());else if(t.isRecordBatch()){this._recordBatchIndex++;let n=t.header(),i=e.readMessageBody(t.bodyLength);return{done:!1,value:this._loadRecordBatch(n,i)}}else if(t.isDictionaryBatch()){this._dictionaryIndex++;let n=t.header(),i=e.readMessageBody(t.bodyLength),s=this._loadDictionaryBatch(n,i);this.dictionaries.set(n.id,s)}return this.schema&&this._recordBatchIndex===0?(this._recordBatchIndex++,{done:!1,value:new _n(this.schema)}):this.return()}_readNextMessageAndValidate(t){return this._reader.readMessage(t)}},Kn=class extends Vo{constructor(t,e){super(e),this._reader=new ts(this._handle=t)}isAsync(){return!0}isStream(){return!0}[Symbol.asyncIterator](){return this}cancel(){return A(this,void 0,void 0,function*(){!this.closed&&(this.closed=!0)&&(yield this.reset()._reader.return(),this._reader=null,this.dictionaries=null)})}open(t){return A(this,void 0,void 0,function*(){return this.closed||(this.autoDestroy=kd(this,t),this.schema||(this.schema=yield this._reader.readSchema())||(yield this.cancel())),this})}throw(t){return A(this,void 0,void 0,function*(){return!this.closed&&this.autoDestroy&&(this.closed=!0)?yield this.reset()._reader.throw(t):ht})}return(t){return A(this,void 0,void 0,function*(){return!this.closed&&this.autoDestroy&&(this.closed=!0)?yield this.reset()._reader.return(t):ht})}next(){return A(this,void 0,void 0,function*(){if(this.closed)return ht;let t,{_reader:e}=this;for(;t=yield this._readNextMessageAndValidate();)if(t.isSchema())yield this.reset(t.header());else if(t.isRecordBatch()){this._recordBatchIndex++;let n=t.header(),i=yield e.readMessageBody(t.bodyLength);return{done:!1,value:this._loadRecordBatch(n,i)}}else if(t.isDictionaryBatch()){this._dictionaryIndex++;let n=t.header(),i=yield e.readMessageBody(t.bodyLength),s=this._loadDictionaryBatch(n,i);this.dictionaries.set(n.id,s)}return this.schema&&this._recordBatchIndex===0?(this._recordBatchIndex++,{done:!1,value:new _n(this.schema)}):yield this.return()})}_readNextMessageAndValidate(t){return A(this,void 0,void 0,function*(){return yield this._reader.readMessage(t)})}},zo=class extends Gn{get footer(){return this._footer}get numDictionaries(){return this._footer?this._footer.numDictionaries:0}get numRecordBatches(){return this._footer?this._footer.numRecordBatches:0}constructor(t,e){super(t instanceof Ei?t:new Ei(t),e)}isSync(){return!0}isFile(){return!0}open(t){if(!this.closed&&!this._footer){this.schema=(this._footer=this._readFooter()).schema;for(let e of this._footer.dictionaryBatches())e&&this._readDictionaryBatch(this._dictionaryIndex++)}return super.open(t)}readRecordBatch(t){var e;if(this.closed)return null;this._footer||this.open();let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(t);if(n&&this._handle.seek(n.offset)){let i=this._reader.readMessage(rt.RecordBatch);if(i!=null&&i.isRecordBatch()){let s=i.header(),o=this._reader.readMessageBody(i.bodyLength);return this._loadRecordBatch(s,o)}}return null}_readDictionaryBatch(t){var e;let n=(e=this._footer)===null||e===void 0?void 0:e.getDictionaryBatch(t);if(n&&this._handle.seek(n.offset)){let i=this._reader.readMessage(rt.DictionaryBatch);if(i!=null&&i.isDictionaryBatch()){let s=i.header(),o=this._reader.readMessageBody(i.bodyLength),a=this._loadDictionaryBatch(s,o);this.dictionaries.set(s.id,a)}}}_readFooter(){let{_handle:t}=this,e=t.size-ac,n=t.readInt32(e),i=t.readAt(e-n,n);return vr.decode(i)}_readNextMessageAndValidate(t){var e;if(this._footer||this.open(),this._footer&&this._recordBatchIndex<this.numRecordBatches){let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(this._recordBatchIndex);if(n&&this._handle.seek(n.offset))return this._reader.readMessage(t)}return null}},cc=class extends Kn{get footer(){return this._footer}get numDictionaries(){return this._footer?this._footer.numDictionaries:0}get numRecordBatches(){return this._footer?this._footer.numRecordBatches:0}constructor(t,...e){let n=typeof e[0]!="number"?e.shift():void 0,i=e[0]instanceof Map?e.shift():void 0;super(t instanceof $r?t:new $r(t,n),i)}isFile(){return!0}isAsync(){return!0}open(t){let e=Object.create(null,{open:{get:()=>super.open}});return A(this,void 0,void 0,function*(){if(!this.closed&&!this._footer){this.schema=(this._footer=yield this._readFooter()).schema;for(let n of this._footer.dictionaryBatches())n&&(yield this._readDictionaryBatch(this._dictionaryIndex++))}return yield e.open.call(this,t)})}readRecordBatch(t){var e;return A(this,void 0,void 0,function*(){if(this.closed)return null;this._footer||(yield this.open());let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(t);if(n&&(yield this._handle.seek(n.offset))){let i=yield this._reader.readMessage(rt.RecordBatch);if(i!=null&&i.isRecordBatch()){let s=i.header(),o=yield this._reader.readMessageBody(i.bodyLength);return this._loadRecordBatch(s,o)}}return null})}_readDictionaryBatch(t){var e;return A(this,void 0,void 0,function*(){let n=(e=this._footer)===null||e===void 0?void 0:e.getDictionaryBatch(t);if(n&&(yield this._handle.seek(n.offset))){let i=yield this._reader.readMessage(rt.DictionaryBatch);if(i!=null&&i.isDictionaryBatch()){let s=i.header(),o=yield this._reader.readMessageBody(i.bodyLength),a=this._loadDictionaryBatch(s,o);this.dictionaries.set(s.id,a)}}})}_readFooter(){return A(this,void 0,void 0,function*(){let{_handle:t}=this;t._pending&&(yield t._pending);let e=t.size-ac,n=yield t.readInt32(e),i=yield t.readAt(e-n,n);return vr.decode(i)})}_readNextMessageAndValidate(t){return A(this,void 0,void 0,function*(){if(this._footer||(yield this.open()),this._footer&&this._recordBatchIndex<this.numRecordBatches){let e=this._footer.getRecordBatch(this._recordBatchIndex);if(e&&(yield this._handle.seek(e.offset)))return yield this._reader.readMessage(t)}return null})}},uc=class extends Gn{constructor(t,e){super(t,e)}_loadVectors(t,e,n){return new fo(e,t.nodes,t.buffers,this.dictionaries).visitMany(n)}};function kd(r,t){return t&&typeof t.autoDestroy=="boolean"?t.autoDestroy:r.autoDestroy}function*Ud(r){let t=jt.from(r);try{if(!t.open({autoDestroy:!1}).closed)do yield t;while(!t.reset().open().closed)}finally{t.cancel()}}function Ld(r){return ce(this,arguments,function*(){let e=yield P(jt.from(r));try{if(!(yield P(e.open({autoDestroy:!1}))).closed)do yield yield P(e);while(!(yield P(e.reset().open())).closed)}finally{yield P(e.cancel())}})}function ky(r){return new nr(new uc(r))}function Ny(r){let t=r.peek(Xn+7&-8);return t&&t.byteLength>=4?Ho(t)?new Xr(new zo(r.read())):new nr(new Gn(r)):new nr(new Gn(function*(){}()))}function Cy(r){return A(this,void 0,void 0,function*(){let t=yield r.peek(Xn+7&-8);return t&&t.byteLength>=4?Ho(t)?new Xr(new zo(yield r.read())):new Yr(new Kn(r)):new Yr(new Kn(function(){return ce(this,arguments,function*(){})}()))})}function Py(r){return A(this,void 0,void 0,function*(){let{size:t}=yield r.stat(),e=new $r(r,t);return t>=Rd&&Ho(yield e.readAt(0,Xn+7&-8))?new rs(new cc(e)):new Yr(new Kn(e))})}var Ft=class r extends E{static assemble(...t){let e=i=>i.flatMap(s=>Array.isArray(s)?e(s):s instanceof At?s.data.children:s.data),n=new r;return n.visitMany(e(t)),n}constructor(){super(),this._byteLength=0,this._nodes=[],this._buffers=[],this._bufferRegions=[]}visit(t){if(t instanceof q)return this.visitMany(t.data),this;let{type:e}=t;if(!D.isDictionary(e)){let{length:n,nullCount:i}=t;if(n>2147483647)throw new RangeError("Cannot write arrays larger than 2^31 - 1 in length");D.isNull(e)||je.call(this,i<=0?new Uint8Array(0):Rn(t.offset,n,t.nullBitmap)),this.nodes.push(new We(n,i))}return super.visit(t)}visitNull(t){return this}visitDictionary(t){return this.visit(t.clone(t.type.indices))}get nodes(){return this._nodes}get buffers(){return this._buffers}get byteLength(){return this._byteLength}get bufferRegions(){return this._bufferRegions}};function je(r){let t=r.byteLength+7&-8;return this.buffers.push(r),this.bufferRegions.push(new ie(this._byteLength,t)),this._byteLength+=t,this}function Hy(r){let{type:t,length:e,typeIds:n,valueOffsets:i}=r;if(je.call(this,n),t.mode===St.Sparse)return lc.call(this,r);if(t.mode===St.Dense){if(r.offset<=0)return je.call(this,i),lc.call(this,r);{let s=n.reduce((m,w)=>Math.max(m,w),n[0]),o=new Int32Array(s+1),a=new Int32Array(s+1).fill(-1),l=new Int32Array(e),c=ci(-i[0],e,i);for(let m,w,S=-1;++S<e;)(w=a[m=n[S]])===-1&&(w=a[m]=c[m]),l[S]=c[S]-w,++o[m];je.call(this,l);for(let m,w=-1,S=t.children.length;++w<S;)if(m=r.children[w]){let T=t.typeIds[w],tt=Math.min(e,o[T]);this.visit(m.slice(a[T],tt))}}}return this}function Vy(r){let t;return r.nullCount>=r.length?je.call(this,new Uint8Array(0)):(t=r.values)instanceof Uint8Array?je.call(this,Rn(r.offset,r.length,t)):je.call(this,on(r.values))}function Gr(r){return je.call(this,r.values.subarray(0,r.length*r.stride))}function Nd(r){let{length:t,values:e,valueOffsets:n}=r,i=n[0],s=n[t],o=Math.min(s-i,e.byteLength-i);return je.call(this,ci(-n[0],t,n)),je.call(this,e.subarray(i,i+o)),this}function dc(r){let{length:t,valueOffsets:e}=r;return e&&je.call(this,ci(e[0],t,e)),this.visit(r.children[0])}function lc(r){return this.visitMany(r.type.children.map((t,e)=>r.children[e]).filter(Boolean))[0]}Ft.prototype.visitBool=Vy;Ft.prototype.visitInt=Gr;Ft.prototype.visitFloat=Gr;Ft.prototype.visitUtf8=Nd;Ft.prototype.visitBinary=Nd;Ft.prototype.visitFixedSizeBinary=Gr;Ft.prototype.visitDate=Gr;Ft.prototype.visitTimestamp=Gr;Ft.prototype.visitTime=Gr;Ft.prototype.visitDecimal=Gr;Ft.prototype.visitList=dc;Ft.prototype.visitStruct=lc;Ft.prototype.visitUnion=Hy;Ft.prototype.visitInterval=Gr;Ft.prototype.visitFixedSizeList=dc;Ft.prototype.visitMap=dc;var yn=class extends ln{static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t,e){throw new Error('"throughDOM" not available in this environment')}constructor(t){super(),this._position=0,this._started=!1,this._sink=new tr,this._schema=null,this._dictionaryBlocks=[],this._recordBatchBlocks=[],this._dictionaryDeltaOffsets=new Map,Jt(t)||(t={autoDestroy:!0,writeLegacyIpcFormat:!1}),this._autoDestroy=typeof t.autoDestroy=="boolean"?t.autoDestroy:!0,this._writeLegacyIpcFormat=typeof t.writeLegacyIpcFormat=="boolean"?t.writeLegacyIpcFormat:!1}toString(t=!1){return this._sink.toString(t)}toUint8Array(t=!1){return this._sink.toUint8Array(t)}writeAll(t){return De(t)?t.then(e=>this.writeAll(e)):we(t)?hc(this,t):fc(this,t)}get closed(){return this._sink.closed}[Symbol.asyncIterator](){return this._sink[Symbol.asyncIterator]()}toDOMStream(t){return this._sink.toDOMStream(t)}toNodeStream(t){return this._sink.toNodeStream(t)}close(){return this.reset()._sink.close()}abort(t){return this.reset()._sink.abort(t)}finish(){return this._autoDestroy?this.close():this.reset(this._sink,this._schema),this}reset(t=this._sink,e=null){return t===this._sink||t instanceof tr?this._sink=t:(this._sink=new tr,t&&ol(t)?this.toDOMStream({type:"bytes"}).pipeTo(t):t&&al(t)&&this.toNodeStream({objectMode:!1}).pipe(t)),this._started&&this._schema&&this._writeFooter(this._schema),this._started=!1,this._dictionaryBlocks=[],this._recordBatchBlocks=[],this._dictionaryDeltaOffsets=new Map,(!e||!mn(e,this._schema))&&(e==null?(this._position=0,this._schema=null):(this._started=!0,this._schema=e,this._writeSchema(e))),this}write(t){let e=null;if(this._sink){if(t==null)return this.finish()&&void 0;if(t instanceof Qt&&!(e=t.schema))return this.finish()&&void 0;if(t instanceof At&&!(e=t.schema))return this.finish()&&void 0}else throw new Error("RecordBatchWriter is closed");if(e&&!mn(e,this._schema)){if(this._started&&this._autoDestroy)return this.close();this.reset(this._sink,e)}t instanceof At?t instanceof _n||this._writeRecordBatch(t):t instanceof Qt?this.writeAll(t.batches):Ee(t)&&this.writeAll(t)}_writeMessage(t,e=8){let n=e-1,i=oe.encode(t),s=i.byteLength,o=this._writeLegacyIpcFormat?4:8,a=s+o+n&~n,l=a-s-o;return t.headerType===rt.RecordBatch?this._recordBatchBlocks.push(new Sr(a,t.bodyLength,this._position)):t.headerType===rt.DictionaryBatch&&this._dictionaryBlocks.push(new Sr(a,t.bodyLength,this._position)),this._writeLegacyIpcFormat||this._write(Int32Array.of(-1)),this._write(Int32Array.of(a-o)),s>0&&this._write(i),this._writePadding(l)}_write(t){if(this._started){let e=N(t);e&&e.byteLength>0&&(this._sink.write(e),this._position+=e.byteLength)}return this}_writeSchema(t){return this._writeMessage(oe.from(t))}_writeFooter(t){return this._writeLegacyIpcFormat?this._write(Int32Array.of(0)):this._write(Int32Array.of(-1,0))}_writeMagic(){return this._write(Yn)}_writePadding(t){return t>0?this._write(new Uint8Array(t)):this}_writeRecordBatch(t){let{byteLength:e,nodes:n,bufferRegions:i,buffers:s}=Ft.assemble(t),o=new Wt(t.numRows,n,i),a=oe.from(o,e);return this._writeDictionaries(t)._writeMessage(a)._writeBodyBuffers(s)}_writeDictionaryBatch(t,e,n=!1){this._dictionaryDeltaOffsets.set(e,t.length+(this._dictionaryDeltaOffsets.get(e)||0));let{byteLength:i,nodes:s,bufferRegions:o,buffers:a}=Ft.assemble(new q([t])),l=new Wt(t.length,s,o),c=new se(l,e,n),m=oe.from(c,i);return this._writeMessage(m)._writeBodyBuffers(a)}_writeBodyBuffers(t){let e,n,i;for(let s=-1,o=t.length;++s<o;)(e=t[s])&&(n=e.byteLength)>0&&(this._write(e),(i=(n+7&-8)-n)>0&&this._writePadding(i));return this}_writeDictionaries(t){for(let[e,n]of t.dictionaries){let i=this._dictionaryDeltaOffsets.get(e)||0;if(i===0||(n=n==null?void 0:n.slice(i)).length>0)for(let s of n.data)this._writeDictionaryBatch(s,e,i>0),i+=s.length}return this}},bn=class r extends yn{static writeAll(t,e){let n=new r(e);return De(t)?t.then(i=>n.writeAll(i)):we(t)?hc(n,t):fc(n,t)}},gn=class r extends yn{static writeAll(t){let e=new r;return De(t)?t.then(n=>e.writeAll(n)):we(t)?hc(e,t):fc(e,t)}constructor(){super(),this._autoDestroy=!0}_writeSchema(t){return this._writeMagic()._writePadding(2)}_writeFooter(t){let e=vr.encode(new vr(t,Ut.V4,this._recordBatchBlocks,this._dictionaryBlocks));return super._writeFooter(t)._write(e)._write(Int32Array.of(e.byteLength))._writeMagic()}};function fc(r,t){let e=t;t instanceof Qt&&(e=t.batches,r.reset(void 0,t.schema));for(let n of e)r.write(n);return r.finish()}function hc(r,t){var e,n,i,s,o,a,l;return A(this,void 0,void 0,function*(){try{for(e=!0,n=xe(t);i=yield n.next(),s=i.done,!s;){l=i.value,e=!1;try{let c=l;r.write(c)}finally{e=!0}}}catch(c){o={error:c}}finally{try{!e&&!s&&(a=n.return)&&(yield a.call(n))}finally{if(o)throw o.error}}return r.finish()})}function Cd(r,t){if(we(r))return Wy(r,t);if(Ee(r))return zy(r,t);throw new Error("toDOMStream() must be called with an Iterable or AsyncIterable")}function zy(r,t){let e=null,n=(t==null?void 0:t.type)==="bytes"||!1,i=(t==null?void 0:t.highWaterMark)||Math.pow(2,24);return new ReadableStream(Object.assign(Object.assign({},t),{start(o){s(o,e||(e=r[Symbol.iterator]()))},pull(o){e?s(o,e):o.close()},cancel(){(e!=null&&e.return&&e.return()||!0)&&(e=null)}}),Object.assign({highWaterMark:n?i:void 0},t));function s(o,a){let l,c=null,m=o.desiredSize||null;for(;!(c=a.next(n?m:null)).done;)if(ArrayBuffer.isView(c.value)&&(l=N(c.value))&&(m!=null&&n&&(m=m-l.byteLength+1),c.value=l),o.enqueue(c.value),m!=null&&--m<=0)return;o.close()}}function Wy(r,t){let e=null,n=(t==null?void 0:t.type)==="bytes"||!1,i=(t==null?void 0:t.highWaterMark)||Math.pow(2,24);return new ReadableStream(Object.assign(Object.assign({},t),{start(o){return A(this,void 0,void 0,function*(){yield s(o,e||(e=r[Symbol.asyncIterator]()))})},pull(o){return A(this,void 0,void 0,function*(){e?yield s(o,e):o.close()})},cancel(){return A(this,void 0,void 0,function*(){(e!=null&&e.return&&(yield e.return())||!0)&&(e=null)})}}),Object.assign({highWaterMark:n?i:void 0},t));function s(o,a){return A(this,void 0,void 0,function*(){let l,c=null,m=o.desiredSize||null;for(;!(c=yield a.next(n?m:null)).done;)if(ArrayBuffer.isView(c.value)&&(l=N(c.value))&&(m!=null&&n&&(m=m-l.byteLength+1),c.value=l),o.enqueue(c.value),m!=null&&--m<=0)return;o.close()})}}function Vd(r){return new pc(r)}var pc=class{constructor(t){this._numChunks=0,this._finished=!1,this._bufferedSize=0;let{["readableStrategy"]:e,["writableStrategy"]:n,["queueingStrategy"]:i="count"}=t,s=il(t,["readableStrategy","writableStrategy","queueingStrategy"]);this._controller=null,this._builder=fn(s),this._getSize=i!=="bytes"?Pd:Hd;let{["highWaterMark"]:o=i==="bytes"?Math.pow(2,14):1e3}=Object.assign({},e),{["highWaterMark"]:a=i==="bytes"?Math.pow(2,14):1e3}=Object.assign({},n);this.readable=new ReadableStream({cancel:()=>{this._builder.clear()},pull:l=>{this._maybeFlush(this._builder,this._controller=l)},start:l=>{this._maybeFlush(this._builder,this._controller=l)}},{highWaterMark:o,size:i!=="bytes"?Pd:Hd}),this.writable=new WritableStream({abort:()=>{this._builder.clear()},write:()=>{this._maybeFlush(this._builder,this._controller)},close:()=>{this._maybeFlush(this._builder.finish(),this._controller)}},{highWaterMark:a,size:l=>this._writeValueAndReturnChunkSize(l)})}_writeValueAndReturnChunkSize(t){let e=this._bufferedSize;return this._bufferedSize=this._getSize(this._builder.append(t)),this._bufferedSize-e}_maybeFlush(t,e){e!=null&&(this._bufferedSize>=e.desiredSize&&++this._numChunks&&this._enqueue(e,t.toVector()),t.finished&&((t.length>0||this._numChunks===0)&&++this._numChunks&&this._enqueue(e,t.toVector()),!this._finished&&(this._finished=!0)&&this._enqueue(e,null)))}_enqueue(t,e){this._bufferedSize=0,this._controller=null,e==null?t.close():t.enqueue(e)}},Pd=r=>{var t;return(t=r==null?void 0:r.length)!==null&&t!==void 0?t:0},Hd=r=>{var t;return(t=r==null?void 0:r.byteLength)!==null&&t!==void 0?t:0};function Wo(r,t){let e=new tr,n=null,i=new ReadableStream({cancel(){return A(this,void 0,void 0,function*(){yield e.close()})},start(a){return A(this,void 0,void 0,function*(){yield o(a,n||(n=yield s()))})},pull(a){return A(this,void 0,void 0,function*(){n?yield o(a,n):a.close()})}});return{writable:new WritableStream(e,Object.assign({highWaterMark:Math.pow(2,14)},r)),readable:i};function s(){return A(this,void 0,void 0,function*(){return yield(yield jt.from(e)).open(t)})}function o(a,l){return A(this,void 0,void 0,function*(){let c=a.desiredSize,m=null;for(;!(m=yield l.next()).done;)if(a.enqueue(m.value),c!=null&&--c<=0)return;a.close()})}}function jo(r,t){let e=new this(r),n=new Ae(e),i=new ReadableStream({cancel(){return A(this,void 0,void 0,function*(){yield n.cancel()})},pull(o){return A(this,void 0,void 0,function*(){yield s(o)})},start(o){return A(this,void 0,void 0,function*(){yield s(o)})}},Object.assign({highWaterMark:Math.pow(2,14)},t));return{writable:new WritableStream(e,r),readable:i};function s(o){return A(this,void 0,void 0,function*(){let a=null,l=o.desiredSize;for(;a=yield n.read(l||null);)if(o.enqueue(a),l!=null&&(l-=a.byteLength)<=0)return;o.close()})}}function $o(r,t="stream"){return(t==="stream"?bn:gn).writeAll(r).toUint8Array(!0)}var Xy=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},Fa),qa),za),Ba),Ia),Va),{compareSchemas:mn,compareFields:pd,compareTypes:md});Ht.toDOMStream=Cd;yt.throughDOM=Vd;jt.throughDOM=Wo;Xr.throughDOM=Wo;nr.throughDOM=Wo;yn.throughDOM=jo;gn.throughDOM=jo;bn.throughDOM=jo;function Jn(r){switch(r.typeId){case h.Binary:return{sqlType:"binary"};case h.Bool:return{sqlType:"bool"};case h.Date:return{sqlType:"date"};case h.DateDay:return{sqlType:"date32[d]"};case h.DateMillisecond:return{sqlType:"date64[ms]"};case h.Decimal:{let t=r;return{sqlType:"decimal",precision:t.precision,scale:t.scale}}case h.Float:return{sqlType:"float"};case h.Float16:return{sqlType:"float16"};case h.Float32:return{sqlType:"float32"};case h.Float64:return{sqlType:"float64"};case h.Int:return{sqlType:"int32"};case h.Int16:return{sqlType:"int16"};case h.Int32:return{sqlType:"int32"};case h.Int64:return{sqlType:"int64"};case h.Uint16:return{sqlType:"uint16"};case h.Uint32:return{sqlType:"uint32"};case h.Uint64:return{sqlType:"uint64"};case h.Uint8:return{sqlType:"uint8"};case h.IntervalDayTime:return{sqlType:"interval[dt]"};case h.IntervalYearMonth:return{sqlType:"interval[m]"};case h.List:return{sqlType:"list",valueType:Jn(r.valueType)};case h.FixedSizeBinary:return{sqlType:"fixedsizebinary",byteWidth:r.byteWidth};case h.Null:return{sqlType:"null"};case h.Utf8:return{sqlType:"utf8"};case h.Struct:return{sqlType:"struct",fields:r.children.map(e=>Yo(e.name,e.type))};case h.Map:{let t=r;return{sqlType:"map",keyType:Jn(t.keyType),valueType:Jn(t.valueType)}}case h.Time:return{sqlType:"time[s]"};case h.TimeMicrosecond:return{sqlType:"time[us]"};case h.TimeMillisecond:return{sqlType:"time[ms]"};case h.TimeNanosecond:return{sqlType:"time[ns]"};case h.TimeSecond:return{sqlType:"time[s]"};case h.Timestamp:return{sqlType:"timestamp",timezone:r.timezone||void 0};case h.TimestampSecond:return{sqlType:"timestamp[s]",timezone:r.timezone||void 0};case h.TimestampMicrosecond:return{sqlType:"timestamp[us]",timezone:r.timezone||void 0};case h.TimestampNanosecond:return{sqlType:"timestamp[ns]",timezone:r.timezone||void 0};case h.TimestampMillisecond:return{sqlType:"timestamp[ms]",timezone:r.timezone||void 0}}throw new Error("unsupported arrow type: ".concat(r.toString()))}function Yo(r,t){let e=Jn(t);return e.name=r,e}var Xo=class{constructor(){this._bindings=null;this._nextMessageId=0}log(t){this.postMessage({messageId:this._nextMessageId++,requestId:0,type:"LOG",data:t},[])}sendOK(t){this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"OK",data:null},[])}failWith(t,e){let n={name:e.name,message:e.message,stack:e.stack||void 0};this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"ERROR",data:n},[])}async onMessage(t){switch(t.type){case"PING":this.sendOK(t);return;case"INSTANTIATE":this._bindings!=null&&this.failWith(t,new Error("duckdb already initialized"));try{this._bindings=await this.instantiate(t.data[0],t.data[1],e=>{this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"INSTANTIATE_PROGRESS",data:e},[])}),this.sendOK(t)}catch(e){console.log(e),this._bindings=null,this.failWith(t,e)}return;default:break}if(!this._bindings)return this.failWith(t,new Error("duckdb is not initialized"));try{switch(t.type){case"GET_VERSION":this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"VERSION_STRING",data:this._bindings.getVersion()},[]);break;case"GET_FEATURE_FLAGS":this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FEATURE_FLAGS",data:this._bindings.getFeatureFlags()},[]);break;case"RESET":this._bindings.reset(),this.sendOK(t);break;case"OPEN":this._bindings.open(t.data),this.sendOK(t);break;case"DROP_FILE":this._bindings.dropFile(t.data),this.sendOK(t);break;case"DROP_FILES":this._bindings.dropFiles(),this.sendOK(t);break;case"FLUSH_FILES":this._bindings.flushFiles(),this.sendOK(t);break;case"CONNECT":{let e=this._bindings.connect();this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"CONNECTION_INFO",data:e.useUnsafe((n,i)=>i)},[]);break}case"DISCONNECT":this._bindings.disconnect(t.data),this.sendOK(t);break;case"CREATE_PREPARED":{let e=this._bindings.createPrepared(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"PREPARED_STATEMENT_ID",data:e},[]);break}case"CLOSE_PREPARED":{this._bindings.closePrepared(t.data[0],t.data[1]),this.sendOK(t);break}case"RUN_PREPARED":{let e=this._bindings.runPrepared(t.data[0],t.data[1],t.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT",data:e},[e.buffer]);break}case"RUN_QUERY":{let e=this._bindings.runQuery(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT",data:e},[e.buffer]);break}case"SEND_PREPARED":{let e=this._bindings.sendPrepared(t.data[0],t.data[1],t.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER",data:e},[e.buffer]);break}case"START_PENDING_QUERY":{let e=this._bindings.startPendingQuery(t.data[0],t.data[1]),n=[];e&&n.push(e.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:e},n);break}case"POLL_PENDING_QUERY":{let e=this._bindings.pollPendingQuery(t.data),n=[];e&&n.push(e.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:e},n);break}case"CANCEL_PENDING_QUERY":{let e=this._bindings.cancelPendingQuery(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"SUCCESS",data:e},[]);break}case"FETCH_QUERY_RESULTS":{let e=this._bindings.fetchQueryResults(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_CHUNK",data:e},[e.buffer]);break}case"GET_TABLE_NAMES":{let e=this._bindings.getTableNames(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"TABLE_NAMES",data:e},[]);break}case"GLOB_FILE_INFOS":{let e=this._bindings.globFiles(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_INFOS",data:e},[]);break}case"REGISTER_FILE_URL":this._bindings.registerFileURL(t.data[0],t.data[1],t.data[2],t.data[3]),this.sendOK(t);break;case"REGISTER_FILE_BUFFER":this._bindings.registerFileBuffer(t.data[0],t.data[1]),this.sendOK(t);break;case"REGISTER_FILE_HANDLE":this._bindings.registerFileHandle(t.data[0],t.data[1],t.data[2],t.data[3]),this.sendOK(t);break;case"COPY_FILE_TO_PATH":this._bindings.copyFileToPath(t.data[0],t.data[1]),this.sendOK(t);break;case"COPY_FILE_TO_BUFFER":{let e=this._bindings.copyFileToBuffer(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_BUFFER",data:e},[]);break}case"COLLECT_FILE_STATISTICS":this._bindings.collectFileStatistics(t.data[0],t.data[1]),this.sendOK(t);break;case"EXPORT_FILE_STATISTICS":{this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_STATISTICS",data:this._bindings.exportFileStatistics(t.data)},[]);break}case"INSERT_ARROW_FROM_IPC_STREAM":{this._bindings.insertArrowFromIPCStream(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"IMPORT_CSV_FROM_PATH":{this._bindings.insertCSVFromPath(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"IMPORT_JSON_FROM_PATH":{this._bindings.insertJSONFromPath(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"TOKENIZE":{let e=this._bindings.tokenize(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"SCRIPT_TOKENS",data:e},[]);break}}}catch(e){return console.log(e),this.failWith(t,e)}}};var Zd=rl(Xd());var Ko=class{constructor(t,e){this._bindings=t,this._conn=e}close(){this._bindings.disconnect(this._conn)}useUnsafe(t){return t(this._bindings,this._conn)}query(t){let e=this._bindings.runQuery(this._conn,t),n=jt.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new Qt(n)}async send(t){let e=this._bindings.startPendingQuery(this._conn,t);for(;e==null;)e=await new Promise((s,o)=>{try{s(this._bindings.pollPendingQuery(this._conn))}catch(a){console.log(a),o(a)}});let n=new Jo(this._bindings,this._conn,e),i=jt.from(n);return console.assert(i.isSync()),console.assert(i.isStream()),i}cancelSent(){return this._bindings.cancelPendingQuery(this._conn)}getTableNames(t){return this._bindings.getTableNames(this._conn,t)}prepare(t){let e=this._bindings.createPrepared(this._conn,t);return new bc(this._bindings,this._conn,e)}createScalarFunction(t,e,n){this._bindings.createScalarFunction(this._conn,t,e,n)}insertArrowTable(t,e){let n=$o(t,"stream");this.insertArrowFromIPCStream(n,e)}insertArrowFromIPCStream(t,e){this._bindings.insertArrowFromIPCStream(this._conn,t,e)}insertCSVFromPath(t,e){this._bindings.insertCSVFromPath(this._conn,t,e)}insertJSONFromPath(t,e){this._bindings.insertJSONFromPath(this._conn,t,e)}},Jo=class{constructor(t,e,n){this.bindings=t;this.conn=e;this.header=n;this._first=!0,this._depleted=!1}next(){if(this._first)return this._first=!1,{done:!1,value:this.header};if(this._depleted)return{done:!0,value:null};let t=this.bindings.fetchQueryResults(this.conn);return this._depleted=t.length==0,{done:this._depleted,value:t}}[Symbol.iterator](){return this}},bc=class{constructor(t,e,n){this.bindings=t,this.connectionId=e,this.statementId=n}close(){this.bindings.closePrepared(this.connectionId,this.statementId)}query(...t){let e=this.bindings.runPrepared(this.connectionId,this.statementId,t),n=jt.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new Qt(n)}send(...t){let e=this.bindings.sendPrepared(this.connectionId,this.statementId,t),n=new Jo(this.bindings,this.connectionId,e),i=jt.from(n);return console.assert(i.isSync()),console.assert(i.isStream()),i}};var Jd=new TextEncoder,Gd=new TextDecoder("utf-8");function gc(r,t,e){let n=Jd.encode(e),i=r._malloc(n.byteLength),s=r.HEAPU8.subarray(i,i+n.byteLength);s.set(n),r.HEAPF64[(t>>3)+0]=1,r.HEAPF64[(t>>3)+1]=i,r.HEAPF64[(t>>3)+2]=s.byteLength}function vc(r){switch(r){case"UINT8":case"INT8":return 1;case"INT32":case"FLOAT":return 4;case"INT64":case"UINT64":case"DOUBLE":case"VARCHAR":return 8;default:return 0}}function wc(r,t,e,n){let i=r.HEAPU8.subarray(t,t+n*vc(e));switch(e){case"UINT8":return new Uint8Array(i.buffer,i.byteOffset,n);case"INT8":return new Int8Array(i.buffer,i.byteOffset,n);case"INT32":return new Int32Array(i.buffer,i.byteOffset,n);case"FLOAT":return new Float32Array(i.buffer,i.byteOffset,n);case"DOUBLE":return new Float64Array(i.buffer,i.byteOffset,n);case"VARCHAR":return new Float64Array(i.buffer,i.byteOffset,n);default:return new Array(0)}}function Kd(r,t,e){let n=r.HEAPU8.subarray(t,t+e);return new Uint8Array(n.buffer,n.byteOffset,e)}function qo(r,t,e){let n=r.HEAPU8.subarray(t,t+e*8);return new Float64Array(n.buffer,n.byteOffset,e)}function qd(r,t,e,n,i,s,o,a){try{let l=r._udfFunctions.get(n);if(!l){gc(t,e,"Unknown UDF with id: "+n);return}let c=Gd.decode(t.HEAPU8.subarray(i,i+s)),m=JSON.parse(c),w=qo(t,o,a/8),S=et=>{var Xt;let Ot=null;switch(et.validityBuffer!==void 0&&(Ot=Kd(t,w[et.validityBuffer],m.rows)),et.physicalType){case"VARCHAR":{if(et.dataBuffer===null||et.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for VARCHAR argument");if(et.lengthBuffer===null||et.lengthBuffer===void 0)throw new Error("malformed data view, expected data length buffer for VARCHAR argument");let Gt=wc(t,w[et.dataBuffer],et.physicalType,m.rows),Nt=[],Mt=qo(t,w[et.lengthBuffer],m.rows);for(let I=0;I<m.rows;++I){if(Ot!=null&&!Ot[I]){Nt.push(null);continue}let Ct=t.HEAPU8.subarray(Gt[I],Gt[I]+Mt[I]),Jr=Gd.decode(Ct);Nt.push(Jr)}return I=>Nt[I]}case"STRUCT":{let Gt={},Nt=[];for(let Mt=0;Mt<(((Xt=et.children)==null?void 0:Xt.length)||0);++Mt){let I=et.children[Mt],Ct=S(I);Nt.push(Jr=>{Gt[I.name]=Ct(Jr)})}return Ot!=null?Mt=>{if(!Ot[Mt])return null;for(let I of Nt)I(Mt);return Gt}:Mt=>{for(let I of Nt)I(Mt);return Gt}}default:{if(et.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for argument of type: "+et.physicalType);let Gt=wc(t,w[et.dataBuffer],et.physicalType,m.rows);return Ot!=null?Nt=>Ot[Nt]?Gt[Nt]:null:Nt=>Gt[Nt]}}},T=[];for(let et=0;et<m.args.length;++et)T.push(S(m.args[et]));let tt=m.rows*vc(m.ret.physicalType),wt=t._malloc(tt),xt=wc(t,wt,m.ret.physicalType,m.rows),vt=t._malloc(m.rows),mt=Kd(t,vt,m.rows);if(xt.length==0||mt.length==0){gc(t,e,"Can't create physical arrays for result");return}let F=xt;m.ret.physicalType=="VARCHAR"&&(F=new Array(m.rows));let kt=[];for(let et=0;et<m.args.length;++et)kt.push(null);for(let et=0;et<m.rows;++et){for(let Xt=0;Xt<m.args.length;++Xt)kt[Xt]=T[Xt](et);let Ot=l.func(...kt);F[et]=Ot,mt[et]=Ot==null?0:1}let vn=0;switch(m.ret.physicalType){case"VARCHAR":{let et=new Array(0);vn=t._malloc(m.rows*vc("DOUBLE"));let Ot=qo(t,vn,m.rows),Xt=0;for(let I=0;I<m.rows;++I){let Ct=Jd.encode(F[I]||"");et.push(Ct),Ot[I]=Ct.length,Xt+=Ct.length}let Gt=t._malloc(Xt),Nt=t.HEAPU8.subarray(Gt,Gt+Xt),Mt=0;for(let I=0;I<m.rows;++I){xt[I]=Mt;let Ct=et[I];Nt.subarray(Mt,Mt+Ct.length).set(Ct),Mt+=Ct.length}}}let qn=3*8,Zn=t._malloc(qn),Dr=qo(t,Zn,3);Dr[0]=wt,Dr[1]=vt,Dr[2]=vn,t.HEAPF64[(e>>3)+0]=0,t.HEAPF64[(e>>3)+1]=Zn,t.HEAPF64[(e>>3)+2]=0}catch(l){gc(t,e,l.toString())}}function Ky(){let r=new TextDecoder;return t=>(typeof SharedArrayBuffer<"u"&&t.buffer instanceof SharedArrayBuffer&&(t=new Uint8Array(t)),r.decode(t))}var Jy=Ky();function Fe(r,t){console.error("FAIL WITH: ".concat(t)),r.ccall("duckdb_web_fail_with",null,["string"],[t])}function wn(r,t,e){let n=r.HEAPU8.subarray(t,t+e),i=new Uint8Array(new ArrayBuffer(n.byteLength));return i.set(n),i}function j(r,t,e){return Jy(r.HEAPU8.subarray(t,t+e))}function at(r,t,e,n){let i=r.stackSave(),s=r.stackAlloc(3*8);e.unshift("number"),n.unshift(s),r.ccall(t,null,e,n);let o=r.HEAPF64[(s>>3)+0],a=r.HEAPF64[(s>>3)+1],l=r.HEAPF64[(s>>3)+2];return r.stackRestore(i),[o,a,l]}function pt(r){r.ccall("duckdb_web_clear_response",null,[],[])}var Zo=class{constructor(t){let e=new Float64Array(t.buffer,t.byteOffset,t.byteLength/8),n=new Uint8Array(new ArrayBuffer(t.byteLength));n.set(t.subarray(7*8)),this.totalFileReadsCold=e[0],this.totalFileReadsAhead=e[1],this.totalFileReadsCached=e[2],this.totalFileWrites=e[3],this.totalPageAccesses=e[4],this.totalPageLoads=e[5],this.blockSize=e[6],this.blockStats=n}getBlockStats(t,e){return e=e||{file_reads_cold:0,file_reads_ahead:0,file_reads_cached:0,file_writes:0,page_accesses:0,page_loads:0},e.file_writes=this.blockStats[t*3+0]&15,e.file_reads_cold=this.blockStats[t*3+0]>>4,e.file_reads_ahead=this.blockStats[t*3+1]&15,e.file_reads_cached=this.blockStats[t*3+1]>>4,e.page_accesses=this.blockStats[t*3+1]&15,e.page_loads=this.blockStats[t*3+1]>>4,e}};var qy=new TextEncoder;var Qo=class{constructor(t,e){this._instance=null;this._initPromise=null;this._initPromiseResolver=()=>{};this.onInstantiationProgress=[];this._logger=t,this._runtime=e,this._nextUDFId=1}get logger(){return this._logger}get mod(){return this._instance}get pthread(){return this.mod.PThread||null}async instantiate(t=e=>{}){return this._instance!=null?this:(this._initPromise!=null&&(this.onInstantiationProgress.push(t),await this._initPromise),this._initPromise=new Promise(e=>{this._initPromiseResolver=e}),this.onInstantiationProgress=[t],this._instance=await this.instantiateImpl({print:console.log.bind(console),printErr:console.log.bind(console),onRuntimeInitialized:this._initPromiseResolver}),await this._initPromise,this._initPromise=null,this.onInstantiationProgress=this.onInstantiationProgress.filter(e=>e!=t),this)}open(t){let[e,n,i]=at(this.mod,"duckdb_web_open",["string"],[JSON.stringify(t)]);if(e!==0)throw new Error(j(this.mod,n,i));pt(this.mod)}reset(){let[t,e,n]=at(this.mod,"duckdb_web_reset",[],[]);if(t!==0)throw new Error(j(this.mod,e,n));pt(this.mod)}getVersion(){let[t,e,n]=at(this.mod,"duckdb_web_get_version",[],[]);if(t!==0)throw new Error(j(this.mod,e,n));let i=j(this.mod,e,n);return pt(this.mod),i}getFeatureFlags(){return this.mod.ccall("duckdb_web_get_feature_flags","number",[],[])}tokenize(t){let[e,n,i]=at(this.mod,"duckdb_web_tokenize",["string"],[t]);if(e!==0)throw new Error(j(this.mod,n,i));let s=j(this.mod,n,i);return pt(this.mod),JSON.parse(s)}connect(){let t=this.mod.ccall("duckdb_web_connect","number",[],[]);return new Ko(this,t)}disconnect(t){if(this.mod.ccall("duckdb_web_disconnect",null,["number"],[t]),this.pthread)for(let e of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])e.postMessage({cmd:"dropUDFFunctions",connectionId:t})}runQuery(t,e){let[n,i,s]=at(this.mod,"duckdb_web_query_run",["number","string"],[t,e]);if(n!==0)throw new Error(j(this.mod,i,s));let o=wn(this.mod,i,s);return pt(this.mod),o}startPendingQuery(t,e){let[n,i,s]=at(this.mod,"duckdb_web_pending_query_start",["number","string"],[t,e]);if(n!==0)throw new Error(j(this.mod,i,s));if(i==0)return null;let o=wn(this.mod,i,s);return pt(this.mod),o}pollPendingQuery(t){let[e,n,i]=at(this.mod,"duckdb_web_pending_query_poll",["number"],[t]);if(e!==0)throw new Error(j(this.mod,n,i));if(n==0)return null;let s=wn(this.mod,n,i);return pt(this.mod),s}cancelPendingQuery(t){return this.mod.ccall("duckdb_web_pending_query_cancel","boolean",["number"],[t])}fetchQueryResults(t){let[e,n,i]=at(this.mod,"duckdb_web_query_fetch_results",["number"],[t]);if(e!==0)throw new Error(j(this.mod,n,i));let s=wn(this.mod,n,i);return pt(this.mod),s}getTableNames(t,e){let[n,i,s]=at(this.mod,"duckdb_web_get_tablenames",["number","string"],[t,e]);if(n!==0)throw new Error(j(this.mod,i,s));let o=j(this.mod,i,s);return pt(this.mod),JSON.parse(o)}createScalarFunction(t,e,n,i){let s={functionId:this._nextUDFId,name:e,returnType:Jn(n)},o={functionId:s.functionId,connectionId:t,name:e,returnType:n,func:i};this._nextUDFId+=1;let[a,l,c]=at(this.mod,"duckdb_web_udf_scalar_create",["number","string"],[t,JSON.stringify(s)]);if(a!==0)throw new Error(j(this.mod,l,c));if(pt(this.mod),globalThis.DUCKDB_RUNTIME._udfFunctions=(globalThis.DUCKDB_RUNTIME._udfFunctions||new Map).set(o.functionId,o),this.pthread)for(let m of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])m.postMessage({cmd:"registerUDFFunction",udf:o})}createPrepared(t,e){let[n,i,s]=at(this.mod,"duckdb_web_prepared_create",["number","string"],[t,e]);if(n!==0)throw new Error(j(this.mod,i,s));return pt(this.mod),i}closePrepared(t,e){let[n,i,s]=at(this.mod,"duckdb_web_prepared_close",["number","number"],[t,e]);if(n!==0)throw new Error(j(this.mod,i,s));pt(this.mod)}runPrepared(t,e,n){let[i,s,o]=at(this.mod,"duckdb_web_prepared_run",["number","number","string"],[t,e,JSON.stringify(n)]);if(i!==0)throw new Error(j(this.mod,s,o));let a=wn(this.mod,s,o);return pt(this.mod),a}sendPrepared(t,e,n){let[i,s,o]=at(this.mod,"duckdb_web_prepared_send",["number","number","string"],[t,e,JSON.stringify(n)]);if(i!==0)throw new Error(j(this.mod,s,o));let a=wn(this.mod,s,o);return pt(this.mod),a}insertArrowFromIPCStream(t,e,n){if(e.length==0)return;let i=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(i,i+e.length).set(e);let o=n?JSON.stringify(n):"",[a,l,c]=at(this.mod,"duckdb_web_insert_arrow_from_ipc_stream",["number","number","number","string"],[t,i,e.length,o]);if(a!==0)throw new Error(j(this.mod,l,c))}insertCSVFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let c in n.columns)n.columnsFlat.push(Yo(c,n.columns[c]))}let i={...n};i.columns=i.columnsFlat,delete i.columnsFlat;let s=JSON.stringify(i),[o,a,l]=at(this.mod,"duckdb_web_insert_csv_from_path",["number","string","string"],[t,e,s]);if(o!==0)throw new Error(j(this.mod,a,l))}insertJSONFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let c in n.columns)n.columnsFlat.push(Yo(c,n.columns[c]))}let i={...n};i.columns=i.columnsFlat,delete i.columnsFlat;let s=JSON.stringify(i),[o,a,l]=at(this.mod,"duckdb_web_insert_json_from_path",["number","string","string"],[t,e,s]);if(o!==0)throw new Error(j(this.mod,a,l))}globFiles(t){let[e,n,i]=at(this.mod,"duckdb_web_fs_glob_file_infos",["string"],[t]);if(e!==0)throw new Error(j(this.mod,n,i));let s=j(this.mod,n,i);pt(this.mod);let o=JSON.parse(s);return o==null?[]:o}registerFileURL(t,e,n,i=!1){e===void 0&&(e=t);let[s,o,a]=at(this.mod,"duckdb_web_fs_register_file_url",["string","string"],[t,e,n,i]);if(s!==0)throw new Error(j(this.mod,o,a));pt(this.mod)}registerFileText(t,e){let n=qy.encode(e);this.registerFileBuffer(t,n)}registerFileBuffer(t,e){let n=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(n,n+e.length).set(e);let[s,o,a]=at(this.mod,"duckdb_web_fs_register_file_buffer",["string","number","number"],[t,n,e.length]);if(s!==0)throw new Error(j(this.mod,o,a));pt(this.mod)}registerFileHandle(t,e,n,i){let[s,o,a]=at(this.mod,"duckdb_web_fs_register_file_url",["string","string","number","boolean"],[t,t,n,i]);if(s!==0)throw new Error(j(this.mod,o,a));if(pt(this.mod),globalThis.DUCKDB_RUNTIME._files=(globalThis.DUCKDB_RUNTIME._files||new Map).set(t,e),this.pthread){for(let l of this.pthread.runningWorkers)l.postMessage({cmd:"registerFileHandle",fileName:t,fileHandle:e});for(let l of this.pthread.unusedWorkers)l.postMessage({cmd:"dropFileHandle",fileName:t})}}dropFile(t){let[e,n,i]=at(this.mod,"duckdb_web_fs_drop_file",["string"],[t]);if(e!==0)throw new Error(j(this.mod,n,i));pt(this.mod)}dropFiles(){let[t,e,n]=at(this.mod,"duckdb_web_fs_drop_files",[],[]);if(t!==0)throw new Error(j(this.mod,e,n));pt(this.mod)}flushFiles(){this.mod.ccall("duckdb_web_flush_files",null,[],[])}copyFileToPath(t,e){let[n,i,s]=at(this.mod,"duckdb_web_copy_file_to_path",["string","string"],[t,e]);if(n!==0)throw new Error(j(this.mod,i,s));pt(this.mod)}copyFileToBuffer(t){let[e,n,i]=at(this.mod,"duckdb_web_copy_file_to_buffer",["string"],[t]);if(e!==0)throw new Error(j(this.mod,n,i));let s=this.mod.HEAPU8.subarray(n,n+i),o=new Uint8Array(s.length);return o.set(s),pt(this.mod),o}collectFileStatistics(t,e){let[n,i,s]=at(this.mod,"duckdb_web_collect_file_stats",["string","boolean"],[t,e]);if(n!==0)throw new Error(j(this.mod,i,s))}exportFileStatistics(t){let[e,n,i]=at(this.mod,"duckdb_web_export_file_stats",["string"],[t]);if(e!==0)throw new Error(j(this.mod,n,i));return new Zo(this.mod.HEAPU8.subarray(n,n+i))}};var ta=class extends Qo{constructor(e,n,i,s){super(e,n);this.mainModuleURL=i,this.pthreadWorkerURL=s}locateFile(e,n){if(e.endsWith(".wasm"))return this.mainModuleURL;if(e.endsWith(".worker.js")){if(!this.pthreadWorkerURL)throw new Error("Missing DuckDB worker URL!");return this.pthreadWorkerURL}throw new Error("WASM instantiation requested unexpected file: prefix=".concat(n," path=").concat(e))}instantiateWasm(e,n){globalThis.DUCKDB_RUNTIME=this._runtime;let i=this.onInstantiationProgress;if(WebAssembly.instantiateStreaming)if(typeof TransformStream=="function"){let o=(async()=>{var wt;let a=new Request(this.mainModuleURL),l=await fetch(a),c=l.headers.get("content-length"),m=c&&parseInt(c,10)||0,w=new Date,S={startedAt:w,updatedAt:w,bytesTotal:m||0,bytesLoaded:0},T={transform(xt,vt){S.bytesLoaded+=xt.byteLength;let mt=new Date;if(mt.getTime()-S.updatedAt.getTime()<20){S.updatedAt=mt,vt.enqueue(xt);return}for(let F of i)F(S);vt.enqueue(xt)}},tt=new TransformStream(T);return new Response((wt=l.body)==null?void 0:wt.pipeThrough(tt),l)})();WebAssembly.instantiateStreaming(o,e).then(a=>{n(a.instance,a.module)})}else{console.warn("instantiating without progress handler since transform streams are unavailable");let s=new Request(this.mainModuleURL);WebAssembly.instantiateStreaming(fetch(s),e).then(o=>{n(o.instance,o.module)})}else if(typeof XMLHttpRequest=="function"){let s=new XMLHttpRequest,o=this.mainModuleURL,a=new Date,l={startedAt:a,updatedAt:a,bytesTotal:0,bytesLoaded:0};s.open("GET",o),s.responseType="arraybuffer",s.onerror=c=>{throw this.logger.log({timestamp:new Date,level:4,origin:3,topic:5,event:2,value:"Failed to load WASM: "+c}),new Error(c.toString())},s.onprogress=c=>{l.bytesTotal=c.total,l.bytesLoaded=c.loaded;let m=new Date;if(m.getTime()-l.updatedAt.getTime()<20){l.updatedAt=m;return}for(let w of i)w(l)},s.onload=()=>{WebAssembly.instantiate(s.response,e).then(c=>{n(c.instance,c.module)}).catch(c=>{throw this.logger.log({timestamp:new Date,level:4,origin:3,topic:5,event:2,value:"Failed to instantiate WASM: "+c}),new Error(c)})},s.send()}else console.warn("instantiating with manual fetch since streaming instantiation and xhrs are unavailable"),(async()=>{let o=new Request(this.mainModuleURL),l=await(await fetch(o)).arrayBuffer();WebAssembly.instantiate(l,e).then(c=>{n(c.instance,c.module)})})();return[]}};var ea=class extends ta{constructor(t,e,n,i=null){super(t,e,n,i)}instantiateImpl(t){return(0,Zd.default)({...t,instantiateWasm:this.instantiateWasm.bind(this),locateFile:this.locateFile.bind(this)})}};var Kr=rl(Qd()),tf=function(r,t,e){var n;if((n=r==null?void 0:r.endpoint)!=null&&n.startsWith("http")){let i="".concat(r==null?void 0:r.endpoint),s=i.indexOf("://")+3;return i.substring(s)}else return r!=null&&r.endpoint?"".concat(e,".").concat(r==null?void 0:r.endpoint):"".concat(e,".s3.amazonaws.com")};function Zy(r,t,e){var s,o,a,l;let n=ef(t),i=n.path;return rf(r)&&(i="/".concat(n.bucket).concat(i)),{url:i,query:"",host:tf(r,t,n.bucket),region:(s=r==null?void 0:r.region)!=null?s:"",service:"s3",method:e,accessKeyId:(o=r==null?void 0:r.accessKeyId)!=null?o:"",secretAccessKey:(a=r==null?void 0:r.secretAccessKey)!=null?a:"",sessionToken:(l=r==null?void 0:r.sessionToken)!=null?l:"",dateNow:new Date().toISOString().replace(/-/g,"").split("T")[0],datetimeNow:new Date().toISOString().replace(/-/g,"").replace(/:/g,"").split(".")[0]+"Z"}}function Qy(r,t=!1){let e="0123456789ABCDEF",n="";for(let i=0;i<r.length;i++){let s=r[i];s>="A"&&s<="Z"||s>="a"&&s<="z"||s>="0"&&s<="9"||s=="_"||s=="-"||s=="~"||s=="."?n+=s:s=="/"?t?n+="%2F":n+=s:(n+="%",n+=e[s.charCodeAt(0)>>4],n+=e[s.charCodeAt(0)&15])}return n}function tb(r,t=null){var tt;let e=(tt=t==null?void 0:t.contentHash)!=null?tt:"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",n=new Map;n.set("x-amz-date",r.datetimeNow),n.set("x-amz-content-sha256",e),r.sessionToken&&n.set("x-amz-security-token",r.sessionToken);let i="";t!=null&&t.contentType&&(i+="content-type;"),i+="host;x-amz-content-sha256;x-amz-date",r.sessionToken&&(i+=";x-amz-security-token");let s=r.method+"\n"+Qy(r.url)+"\n"+r.query;t!=null&&t.contentType&&(s+="\ncontent-type:"+(t==null?void 0:t.contentType)),s+="\nhost:"+r.host+"\nx-amz-content-sha256:"+e+"\nx-amz-date:"+r.datetimeNow,r.sessionToken&&r.sessionToken.length>0&&(s+="\nx-amz-security-token:"+r.sessionToken),s+="\n\n"+i+"\n"+e;let o=(0,Kr.sha256)(s),a="AWS4-HMAC-SHA256\n"+r.datetimeNow+"\n"+r.dateNow+"/"+r.region+"/"+r.service+"/aws4_request\n"+o,l="AWS4"+r.secretAccessKey,c=Kr.sha256.hmac.arrayBuffer(l,r.dateNow),m=Kr.sha256.hmac.arrayBuffer(c,r.region),w=Kr.sha256.hmac.arrayBuffer(m,r.service),S=Kr.sha256.hmac.arrayBuffer(w,"aws4_request"),T=Kr.sha256.hmac(S,a);return n.set("Authorization","AWS4-HMAC-SHA256 Credential="+r.accessKeyId+"/"+r.dateNow+"/"+r.region+"/"+r.service+"/aws4_request, SignedHeaders="+i+", Signature="+T),n}var eb=function(r,t,e,n=null,i=null){let s=Zy(r,t,e),o={contentType:n,contentHash:i?Kr.sha256.hex(i):null};return tb(s,o)};function ir(r,t,e,n,i=null,s=null){(t!=null&&t.accessKeyId||t!=null&&t.sessionToken)&&(eb(t,e,n,i,s).forEach((a,l)=>{r.setRequestHeader(l,a)}),i&&r.setRequestHeader("content-type",i))}function ef(r){if(r.indexOf("s3://")!=0)throw new Error("URL needs to start with s3://");let t=r.indexOf("/",5);if(t==-1)throw new Error("URL needs to contain a '/' after the host");let e=r.substring(5,t);if(!e)throw new Error("URL needs to contain a bucket name");let n=r.substring(t);if(!n)throw new Error("URL needs to contain key");return{bucket:e,path:n}}function rf(r){var t;return!!((t=r==null?void 0:r.endpoint)!=null&&t.startsWith("http"))}function sr(r,t){let e=ef(t);return rf(r)?"".concat(r==null?void 0:r.endpoint,"/").concat(e.bucket)+e.path:"https://"+tf(r,t,e.bucket)+e.path}var it={_files:new Map,_fileInfoCache:new Map,_udfFunctions:new Map,_globalFileInfo:null,getFileInfo(r,t){try{let e=it._fileInfoCache.get(t),[n,i,s]=at(r,"duckdb_web_fs_get_file_info_by_id",["number","number"],[t,(e==null?void 0:e.cacheEpoch)||0]);if(n!==0)return null;if(s===0)return e;let o=j(r,i,s);pt(r);let a=JSON.parse(o);if(a==null)return null;let l={...a,blob:null};return it._fileInfoCache.set(t,l),l}catch(e){return console.log(e),null}},getGlobalFileInfo(r){var t;try{let[e,n,i]=at(r,"duckdb_web_get_global_file_info",["number"],[((t=it._globalFileInfo)==null?void 0:t.cacheEpoch)||0]);if(e!==0)return null;if(i===0)return it._globalFileInfo;let s=j(r,n,i);pt(r);let o=JSON.parse(s);return o==null?null:(it._globalFileInfo={...o,blob:null},it._globalFileInfo)}catch(e){return console.log(e),null}},testPlatformFeature:(r,t)=>{switch(t){case 1:return typeof BigInt64Array<"u";default:return console.warn("test for unknown feature: ".concat(t)),!1}},getDefaultDataProtocol(r){return 2},openFile:(r,t,e)=>{var n;try{it._fileInfoCache.delete(t);let i=it.getFileInfo(r,t);switch(i==null?void 0:i.dataProtocol){case 4:case 5:{if(e&1&&e&2)throw new Error("Opening file ".concat(i.fileName," failed: cannot open file with both read and write flags set"));if(e&32)throw new Error("Opening file ".concat(i.fileName," failed: appending to HTTP/S3 files is not supported"));if(e&2){let a=new XMLHttpRequest;if(i.dataProtocol==5?(a.open("HEAD",sr(i.s3Config,i.dataUrl),!1),ir(a,i.s3Config,i.dataUrl,"HEAD")):a.open("HEAD",i.dataUrl,!1),a.send(null),a.status!=200&&a.status!=404)throw new Error("Opening file ".concat(i.fileName," failed: Unexpected return status from server (").concat(a.status,")"));if(a.status==404&&!(e&8||e&16))throw new Error("Opening file ".concat(i.fileName," failed: Cannot write to non-existent file without FILE_FLAGS_FILE_CREATE or FILE_FLAGS_FILE_CREATE_NEW flag."));let l=r._malloc(1),c=new Uint8Array;r.HEAPU8.set(c,l);let m=r._malloc(2*8);return r.HEAPF64[(m>>3)+0]=1,r.HEAPF64[(m>>3)+1]=l,m}else if(e!=1)throw new Error("Opening file ".concat(i.fileName," failed: unsupported file flags: ").concat(e));let s=null,o=null;try{let a=new XMLHttpRequest;if(i.dataProtocol==5?(a.open("HEAD",sr(i.s3Config,i.dataUrl),!1),ir(a,i.s3Config,i.dataUrl,"HEAD")):a.open("HEAD",i.dataUrl,!1),a.setRequestHeader("Range","bytes=0-"),a.send(null),s=a.getResponseHeader("Content-Length"),s!==null&&a.status==206){let l=r._malloc(16);return r.HEAPF64[(l>>3)+0]=+s,r.HEAPF64[(l>>3)+1]=0,l}}catch(a){o=a,console.warn("HEAD request with range header failed: ".concat(a))}if(i.allowFullHttpReads){if(s!==null&&+s>1){let l=new XMLHttpRequest;i.dataProtocol==5?(l.open("GET",sr(i.s3Config,i.dataUrl),!1),ir(l,i.s3Config,i.dataUrl,"GET")):l.open("GET",i.dataUrl,!1),l.setRequestHeader("Range","bytes=0-0"),l.send(null);let c=l.getResponseHeader("Content-Length");if(l.status==206&&c!==null&&+c==1){let m=r._malloc(16);return r.HEAPF64[(m>>3)+0]=+s,r.HEAPF64[(m>>3)+1]=0,m}if(l.status==200&&c!==null&&+c==+s){console.warn("fall back to full HTTP read for: ".concat(i.dataUrl));let m=r._malloc(l.response.byteLength),w=new Uint8Array(l.response,0,l.response.byteLength);r.HEAPU8.set(w,m);let S=r._malloc(2*8);return r.HEAPF64[(S>>3)+0]=l.response.byteLength,r.HEAPF64[(S>>3)+1]=m,S}}console.warn("falling back to full HTTP read for: ".concat(i.dataUrl));let a=new XMLHttpRequest;if(i.dataProtocol==5?(a.open("GET",sr(i.s3Config,i.dataUrl),!1),ir(a,i.s3Config,i.dataUrl,"GET")):a.open("GET",i.dataUrl,!1),a.responseType="arraybuffer",a.send(null),a.status==200){let l=r._malloc(a.response.byteLength),c=new Uint8Array(a.response,0,a.response.byteLength);r.HEAPU8.set(c,l);let m=r._malloc(2*8);return r.HEAPF64[(m>>3)+0]=a.response.byteLength,r.HEAPF64[(m>>3)+1]=l,m}}if(o!=null)throw new Error("Reading file ".concat(i.fileName," failed with error: ").concat(o));return 0}case 2:{let s=(n=it._files)==null?void 0:n.get(i.fileName);if(s){let l=r._malloc(16);return r.HEAPF64[(l>>3)+0]=s.size,r.HEAPF64[(l>>3)+1]=0,l}console.warn("Buffering missing file: ".concat(i.fileName));let o=r._malloc(2*8),a=r._malloc(1);return r.HEAPF64[(o>>3)+0]=1,r.HEAPF64[(o>>3)+1]=a,o}}}catch(i){console.error(i.toString()),Fe(r,i.toString())}return 0},glob:(r,t,e)=>{var n;try{let i=j(r,t,e);if(i.startsWith("http")||i.startsWith("s3://")){let s=new XMLHttpRequest;if(i.startsWith("s3://")){let o=it.getGlobalFileInfo(r);s.open("HEAD",sr(o==null?void 0:o.s3Config,i),!1),ir(s,o==null?void 0:o.s3Config,i,"HEAD")}else s.open("HEAD",i,!1);if(s.send(null),s.status!=200&&s.status!==206){if(!((n=it.getGlobalFileInfo(r))!=null&&n.allowFullHttpReads)){Fe(r,"HEAD request failed: ".concat(i,", with full http reads are disabled"));return}let o=new XMLHttpRequest;if(i.startsWith("s3://")){let l=it.getGlobalFileInfo(r);o.open("GET",sr(l==null?void 0:l.s3Config,i),!1),ir(o,l==null?void 0:l.s3Config,i,"HEAD")}else o.open("GET",i,!1);if(o.setRequestHeader("Range","bytes=0-0"),o.send(null),o.status!=200&&o.status!==206){Fe(r,"HEAD and GET requests failed: ".concat(i));return}let a=o.getResponseHeader("Content-Length");a&&+a>1&&console.warn("Range request for ".concat(i," did not return a partial response: ").concat(o.status,' "').concat(o.statusText,'"'))}r.ccall("duckdb_web_fs_glob_add_path",null,["string"],[i])}}catch(i){return console.log(i),Fe(r,i.toString()),0}},checkFile:(r,t,e)=>{try{let n=j(r,t,e);if(n.startsWith("http")||n.startsWith("s3://")){let i=new XMLHttpRequest;if(n.startsWith("s3://")){let s=it.getGlobalFileInfo(r);i.open("HEAD",sr(s==null?void 0:s.s3Config,n),!1),ir(i,s==null?void 0:s.s3Config,n,"HEAD")}else i.open("HEAD",n,!1);return i.send(null),i.status==206||i.status==200}}catch(n){return console.log(n),!1}return!1},syncFile:(r,t)=>{},closeFile:(r,t)=>{var n;let e=it.getFileInfo(r,t);switch(it._fileInfoCache.delete(t),e==null?void 0:e.dataProtocol){case 0:case 4:case 5:break;case 1:case 2:return;case 3:{let i=(n=it._files)==null?void 0:n.get(e.fileName);if(!i)throw new Error("No OPFS access handle registered with name: ".concat(e.fileName));return i.flush()}}},truncateFile:(r,t,e)=>{var i;let n=it.getFileInfo(r,t);switch(n==null?void 0:n.dataProtocol){case 4:Fe(r,"Cannot truncate a http file");return;case 5:Fe(r,"Cannot truncate an s3 file");return;case 0:case 1:case 2:Fe(r,"truncateFile not implemented");return;case 3:{let s=(i=it._files)==null?void 0:i.get(n.fileName);if(!s)throw new Error("No OPFS access handle registered with name: ".concat(n.fileName));return s.truncate(e)}}return 0},readFile(r,t,e,n,i){var s,o;if(n==0)return 0;try{let a=it.getFileInfo(r,t);switch(a==null?void 0:a.dataProtocol){case 4:case 5:{if(!a.dataUrl)throw new Error("Missing data URL for file ".concat(t));try{let l=new XMLHttpRequest;if(a.dataProtocol==5?(l.open("GET",sr(a==null?void 0:a.s3Config,a.dataUrl),!1),ir(l,a==null?void 0:a.s3Config,a.dataUrl,"GET")):l.open("GET",a.dataUrl,!1),l.responseType="arraybuffer",l.setRequestHeader("Range","bytes=".concat(i,"-").concat(i+n-1)),l.send(null),l.status==206||l.status==200&&n==l.response.byteLength&&i==0){let c=new Uint8Array(l.response,0,Math.min(l.response.byteLength,n));return r.HEAPU8.set(c,e),c.byteLength}else if(l.status==200){console.warn("Range request for ".concat(a.dataUrl," did not return a partial response: ").concat(l.status,' "').concat(l.statusText,'"'));let c=new Uint8Array(l.response,i,Math.min(l.response.byteLength-i,n));return r.HEAPU8.set(c,e),c.byteLength}else throw new Error("Range request for ".concat(a.dataUrl," did returned non-success status: ").concat(l.status,' "').concat(l.statusText,'"'))}catch(l){throw console.log(l),new Error("Range request for ".concat(a.dataUrl," failed with error: ").concat(l,'"'))}}case 2:{let l=(s=it._files)==null?void 0:s.get(a.fileName);if(!l)throw new Error("No HTML5 file registered with name: ".concat(a.fileName));let c=l.slice(i,i+n),m=new Uint8Array(new FileReaderSync().readAsArrayBuffer(c));return r.HEAPU8.set(m,e),m.byteLength}case 3:{let l=(o=it._files)==null?void 0:o.get(a.fileName);if(!l)throw new Error("No OPFS access handle registered with name: ".concat(a.fileName));let c=r.HEAPU8.subarray(e,e+n);return l.read(c,{at:i})}}return 0}catch(a){return console.log(a),Fe(r,a.toString()),0}},writeFile:(r,t,e,n,i)=>{var o;let s=it.getFileInfo(r,t);switch(s==null?void 0:s.dataProtocol){case 4:return Fe(r,"Cannot write to HTTP file"),0;case 5:{let a=r.HEAPU8.subarray(e,e+n),l=new XMLHttpRequest;return l.open("PUT",sr(s==null?void 0:s.s3Config,s.dataUrl),!1),ir(l,s==null?void 0:s.s3Config,s.dataUrl,"PUT","",a),l.send(a),l.status!==200?(Fe(r,"Failed writing file: HTTP "+l.status),0):n}case 2:return Fe(r,"cannot write using the html5 file reader api"),0;case 3:{let a=(o=it._files)==null?void 0:o.get(s.fileName);if(!a)throw new Error("No OPFS access handle registered with name: ".concat(s.fileName));let l=r.HEAPU8.subarray(e,e+n);return a.write(l,{at:i})}}return 0},getLastFileModificationTime:(r,t)=>{var n;let e=it.getFileInfo(r,t);switch(e==null?void 0:e.dataProtocol){case 2:{if(!((n=it._files)==null?void 0:n.get(e.fileName)))throw Error("No handle available for file: ".concat(e.fileName));return 0}case 4:case 5:return new Date().getTime()}return 0},checkDirectory:(r,t,e)=>{let n=j(r,t,e);return console.log("checkDirectory: ".concat(n)),!1},createDirectory:(r,t,e)=>{let n=j(r,t,e);console.log("createDirectory: ".concat(n))},removeDirectory:(r,t,e)=>{let n=j(r,t,e);console.log("removeDirectory: ".concat(n))},listDirectoryEntries:(r,t,e)=>{let n=j(r,t,e);return console.log("listDirectoryEntries: ".concat(n)),!1},moveFile:(r,t,e,n,i)=>{var l,c;let s=j(r,t,e),o=j(r,n,i),a=(l=it._files)==null?void 0:l.get(s);a!==void 0&&(it._files.delete(a),it._files.set(o,a));for(let[m,w]of((c=it._fileInfoCache)==null?void 0:c.entries())||[])if(w.dataUrl==s){it._fileInfoCache.delete(m);break}return!0},removeFile:(r,t,e)=>{},callScalarUDF:(r,t,e,n,i,s,o)=>{qd(it,r,t,e,n,i,s,o)}};var Sc=class extends Xo{postMessage(t,e){globalThis.postMessage(t,e)}async instantiate(t,e,n){return await new ea(this,it,t,e).instantiate(n)}};function nf(){let r=new Sc;globalThis.onmessage=async t=>{await r.onMessage(t.data)}}nf();return dm(rb);})();
/*! Bundled license information:

js-sha256/src/sha256.js:
  (**
   * [js-sha256]{@link https://github.com/emn178/js-sha256}
   *
   * @version 0.9.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2014-2017
   * @license MIT
   *)
*/
//# sourceMappingURL=data:application/json;base64,
