"use strict";var duckdb=(()=>{var sp=Object.create;var ss=Object.defineProperty;var op=Object.getOwnPropertyDescriptor;var ap=Object.getOwnPropertyNames;var cp=Object.getPrototypeOf,lp=Object.prototype.hasOwnProperty;var Jo=(r,t)=>{if(t=Symbol[r])return t;throw Error("Symbol."+r+" is not defined")};var up=(r=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(r,{get:(t,e)=>(typeof require<"u"?require:t)[e]}):r)(function(r){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+r+'" is not supported')});var Jn=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),Kr=(r,t)=>{for(var e in t)ss(r,e,{get:t[e],enumerable:!0})},Rc=(r,t,e,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of ap(t))!lp.call(r,i)&&i!==e&&ss(r,i,{get:()=>t[i],enumerable:!(n=op(t,i))||n.enumerable});return r};var Mc=(r,t,e)=>(e=r!=null?sp(cp(r)):{},Rc(t||!r||!r.__esModule?ss(e,"default",{value:r,enumerable:!0}):e,r)),dp=r=>Rc(ss({},"__esModule",{value:!0}),r);var fp=function(r,t){this[0]=r,this[1]=t};var Jr=r=>{var t=r[Jo("asyncIterator")],e=!1,n,i={};return t==null?(t=r[Jo("iterator")](),n=s=>i[s]=o=>t[s](o)):(t=t.call(r),n=s=>i[s]=o=>{if(e){if(e=!1,s==="throw")throw o;return o}return e=!0,{done:!1,value:new fp(new Promise(a=>{var c=t[s](o);if(!(c instanceof Object))throw TypeError("Object expected");a(c)}),1)}}),i[Jo("iterator")]=()=>i,n("next"),"throw"in t?n("throw"):i.throw=s=>{throw s},"return"in t&&n("return"),i};var wu=Jn(()=>{});var vu=Jn(()=>{});var Su=Jn(()=>{});var Iu=Jn((Mo,Ka)=>{"use strict";var Ga=(()=>{var r=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(r=r||__filename),function(t={}){var e=typeof t<"u"?t:{},n,i;e.ready=new Promise((l,u)=>{n=l,i=u});var s=Object.assign({},e),o=[],a="./this.program",c=(l,u)=>{throw u},f=typeof window=="object",p=typeof importScripts=="function",y=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",w="";function B(l){return e.locateFile?e.locateFile(l,w):w+l}var Q,Bt,xt,Rt;if(y){var Kt=wu(),Jt=vu();p?w=Jt.dirname(w)+"/":w=__dirname+"/",Q=(l,u)=>(l=oc(l)?new URL(l):Jt.normalize(l),Kt.readFileSync(l,u?void 0:"utf8")),xt=l=>{var u=Q(l,!0);return u.buffer||(u=new Uint8Array(u)),u},Bt=(l,u,d,m=!0)=>{l=oc(l)?new URL(l):Jt.normalize(l),Kt.readFile(l,m?void 0:"utf8",(_,I)=>{_?d(_):u(m?I.buffer:I)})},!e.thisProgram&&process.argv.length>1&&(a=process.argv[1].replace(/\\/g,"/")),o=process.argv.slice(2),c=(l,u)=>{throw process.exitCode=l,u},e.inspect=()=>"[Emscripten Module object]"}else(f||p)&&(p?w=self.location.href:typeof document<"u"&&document.currentScript&&(w=document.currentScript.src),r&&(w=r),w.indexOf("blob:")!==0?w=w.substr(0,w.replace(/[?#].*/,"").lastIndexOf("/")+1):w="",Q=l=>{var u=new XMLHttpRequest;return u.open("GET",l,!1),u.send(null),u.responseText},p&&(xt=l=>{var u=new XMLHttpRequest;return u.open("GET",l,!1),u.responseType="arraybuffer",u.send(null),new Uint8Array(u.response)}),Bt=(l,u,d)=>{var m=new XMLHttpRequest;m.open("GET",l,!0),m.responseType="arraybuffer",m.onload=()=>{if(m.status==200||m.status==0&&m.response){u(m.response);return}d()},m.onerror=d,m.send(null)},Rt=l=>document.title=l);var Wn=e.print||console.log.bind(console),N=e.printErr||console.error.bind(console);Object.assign(e,s),s=null,e.arguments&&(o=e.arguments),e.thisProgram&&(a=e.thisProgram),e.quit&&(c=e.quit);var Yr;e.wasmBinary&&(Yr=e.wasmBinary);var Gi=e.noExitRuntime||!0;typeof WebAssembly!="object"&&V("no native wasm support detected");var Br,Z=!1,Mt;function qt(l,u){l||V(u)}var St,bt,It,lt,v,ot,Uu,Nu;function ec(){var l=Br.buffer;e.HEAP8=St=new Int8Array(l),e.HEAP16=It=new Int16Array(l),e.HEAP32=v=new Int32Array(l),e.HEAPU8=bt=new Uint8Array(l),e.HEAPU16=lt=new Uint16Array(l),e.HEAPU32=ot=new Uint32Array(l),e.HEAPF32=Uu=new Float32Array(l),e.HEAPF64=Nu=new Float64Array(l)}var Lu,rc=[],nc=[],ku=[],ic=[],Cu=!1,Pu=0;function Vu(){return Gi||Pu>0}function Hu(){if(e.preRun)for(typeof e.preRun=="function"&&(e.preRun=[e.preRun]);e.preRun.length;)$u(e.preRun.shift());Ki(rc)}function zu(){Cu=!0,Ki(nc)}function ju(){Ki(ku)}function Wu(){if(e.postRun)for(typeof e.postRun=="function"&&(e.postRun=[e.postRun]);e.postRun.length;)Xu(e.postRun.shift());Ki(ic)}function $u(l){rc.unshift(l)}function Yu(l){nc.unshift(l)}function Xu(l){ic.unshift(l)}var Xr=0,Ho=null,$n=null;function Gu(l){Xr++,e.monitorRunDependencies&&e.monitorRunDependencies(Xr)}function Ku(l){if(Xr--,e.monitorRunDependencies&&e.monitorRunDependencies(Xr),Xr==0&&(Ho!==null&&(clearInterval(Ho),Ho=null),$n)){var u=$n;$n=null,u()}}function V(l){e.onAbort&&e.onAbort(l),l="Aborted("+l+")",N(l),Z=!0,Mt=1,l+=". Build with -sASSERTIONS for more info.";var u=new WebAssembly.RuntimeError(l);throw i(u),u}var Ju="data:application/octet-stream;base64,";function sc(l){return l.startsWith(Ju)}function oc(l){return l.startsWith("file://")}var mn;mn="./duckdb-mvp.wasm",sc(mn)||(mn=B(mn));function ac(l){try{if(l==mn&&Yr)return new Uint8Array(Yr);if(xt)return xt(l);throw"both async and sync fetching of the wasm failed"}catch(u){V(u)}}function qu(l){return!Yr&&(f||p)&&typeof fetch=="function"?fetch(l,{credentials:"same-origin"}).then(u=>{if(!u.ok)throw"failed to load wasm binary file at '"+l+"'";return u.arrayBuffer()}).catch(()=>ac(l)):Promise.resolve().then(()=>ac(l))}function cc(l,u,d){return qu(l).then(m=>WebAssembly.instantiate(m,u)).then(m=>m).then(d,m=>{N("failed to asynchronously prepare wasm: "+m),V(m)})}function Zu(l,u,d,m){return!l&&typeof WebAssembly.instantiateStreaming=="function"&&!sc(u)&&!y&&typeof fetch=="function"?fetch(u,{credentials:"same-origin"}).then(_=>{var I=WebAssembly.instantiateStreaming(_,d);return I.then(m,function(b){return N("wasm streaming compile failed: "+b),N("falling back to ArrayBuffer instantiation"),cc(u,d,m)})}):cc(u,d,m)}function Qu(){var l={a:hh};function u(m,_){var I=m.exports;return e.asm=I,Br=e.asm.Ra,ec(),Lu=e.asm.Ua,Yu(e.asm.Sa),Ku("wasm-instantiate"),I}Gu("wasm-instantiate");function d(m){u(m.instance)}if(e.instantiateWasm)try{return e.instantiateWasm(l,u)}catch(m){N("Module.instantiateWasm callback failed with error: "+m),i(m)}return Zu(Yr,mn,l,d).catch(i),{}}var pe,_n;function lc(l){this.name="ExitStatus",this.message="Program terminated with exit(".concat(l,")"),this.status=l}function Ki(l){for(;l.length>0;)l.shift()(e)}function td(){N("missing function: XML_GetBuffer"),V(-1)}function ed(){N("missing function: XML_GetErrorCode"),V(-1)}function rd(){N("missing function: XML_Parse"),V(-1)}function nd(){N("missing function: XML_ParseBuffer"),V(-1)}function id(){N("missing function: XML_ParserCreate"),V(-1)}function sd(){N("missing function: XML_ParserFree"),V(-1)}function od(){N("missing function: XML_ResumeParser"),V(-1)}function ad(){N("missing function: XML_SetCharacterDataHandler"),V(-1)}function cd(){N("missing function: XML_SetElementHandler"),V(-1)}function ld(){N("missing function: XML_SetUserData"),V(-1)}function ud(){N("missing function: XML_StopParser"),V(-1)}function dd(l){this.excPtr=l,this.ptr=l-24,this.set_type=function(u){ot[this.ptr+4>>>2]=u},this.get_type=function(){return ot[this.ptr+4>>>2]},this.set_destructor=function(u){ot[this.ptr+8>>>2]=u},this.get_destructor=function(){return ot[this.ptr+8>>>2]},this.set_caught=function(u){u=u?1:0,St[this.ptr+12>>>0]=u},this.get_caught=function(){return St[this.ptr+12>>>0]!=0},this.set_rethrown=function(u){u=u?1:0,St[this.ptr+13>>>0]=u},this.get_rethrown=function(){return St[this.ptr+13>>>0]!=0},this.init=function(u,d){this.set_adjusted_ptr(0),this.set_type(u),this.set_destructor(d)},this.set_adjusted_ptr=function(u){ot[this.ptr+16>>>2]=u},this.get_adjusted_ptr=function(){return ot[this.ptr+16>>>2]},this.get_exception_ptr=function(){var u=xc(this.get_type());if(u)return ot[this.excPtr>>>2];var d=this.get_adjusted_ptr();return d!==0?d:this.excPtr}}var uc=0,fd=0;function hd(l,u,d){var m=new dd(l);throw m.init(u,d),uc=l,fd++,uc}var dc="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function pd(l,u,d){V(dc)}var fc=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function hc(l,u,d){u>>>=0;for(var m=u+d,_=u;l[_]&&!(_>=m);)++_;if(_-u>16&&l.buffer&&fc)return fc.decode(l.subarray(u,_));for(var I="";u<_;){var b=l[u++];if(!(b&128)){I+=String.fromCharCode(b);continue}var S=l[u++]&63;if((b&224)==192){I+=String.fromCharCode((b&31)<<6|S);continue}var A=l[u++]&63;if((b&240)==224?b=(b&15)<<12|S<<6|A:b=(b&7)<<18|S<<12|A<<6|l[u++]&63,b<65536)I+=String.fromCharCode(b);else{var q=b-65536;I+=String.fromCharCode(55296|q>>10,56320|q&1023)}}return I}function yn(l,u){return l>>>=0,l?hc(bt,l,u):""}var Gr={varargs:void 0,get:function(){Gr.varargs+=4;var l=v[Gr.varargs-4>>>2];return l},getStr:function(l){var u=yn(l);return u}};function md(l,u,d,m,_){for(var I=0,b=u?v[u>>>2]:0,S=u?v[u+4>>>2]:0,A=d?v[d>>>2]:0,q=d?v[d+4>>>2]:0,et=m?v[m>>>2]:0,zt=m?v[m+4>>>2]:0,nt=0,se=0,gt=0,Lt=0,Be=0,ir=0,g=(u?v[u>>>2]:0)|(d?v[d>>>2]:0)|(m?v[m>>>2]:0),E=(u?v[u+4>>>2]:0)|(d?v[d+4>>>2]:0)|(m?v[m+4>>>2]:0),ut=function(rp,np,ip,Oc){return rp<32?np&Oc:ip&Oc},at=0;at<l;at++){var Wt=1<<at%32;if(ut(at,g,E,Wt)){var Kn=Gr.getStreamFromFD(at),is=Gr.DEFAULT_POLLMASK;Kn.stream_ops.poll&&(is=Kn.stream_ops.poll(Kn)),is&1&&ut(at,b,S,Wt)&&(at<32?nt=nt|Wt:se=se|Wt,I++),is&4&&ut(at,A,q,Wt)&&(at<32?gt=gt|Wt:Lt=Lt|Wt,I++),is&2&&ut(at,et,zt,Wt)&&(at<32?Be=Be|Wt:ir=ir|Wt,I++)}}return u&&(v[u>>>2]=nt,v[u+4>>>2]=se),d&&(v[d>>>2]=gt,v[d+4>>>2]=Lt),m&&(v[m>>>2]=Be,v[m+4>>>2]=ir),I}function _d(){N("missing function: $SOCKFS"),V(-1)}function pc(){N("missing function: $FS"),V(-1)}function Yn(l){var u=_d.getSocket(l);if(!u)throw new pc.ErrnoError(8);return u}function zo(l){return(l&255)+"."+(l>>8&255)+"."+(l>>16&255)+"."+(l>>24&255)}function mc(l){var u="",d=0,m=0,_=0,I=0,b=0,S=0,A=[l[0]&65535,l[0]>>16,l[1]&65535,l[1]>>16,l[2]&65535,l[2]>>16,l[3]&65535,l[3]>>16],q=!0,et="";for(S=0;S<5;S++)if(A[S]!==0){q=!1;break}if(q){if(et=zo(A[6]|A[7]<<16),A[5]===-1)return u="::ffff:",u+=et,u;if(A[5]===0)return u="::",et==="0.0.0.0"&&(et=""),et==="0.0.0.1"&&(et="1"),u+=et,u}for(d=0;d<8;d++)A[d]===0&&(d-_>1&&(b=0),_=d,b++),b>m&&(m=b,I=d-m+1);for(d=0;d<8;d++){if(m>1&&A[d]===0&&d>=I&&d<I+m){d===I&&(u+=":",I===0&&(u+=":"));continue}u+=Number(Xo(A[d]&65535)).toString(16),u+=d<7?":":""}return u}function _c(l,u){var d=It[l>>>1],m=Xo(lt[l+2>>>1]),_;switch(d){case 2:if(u!==16)return{errno:28};_=v[l+4>>>2],_=zo(_);break;case 10:if(u!==28)return{errno:28};_=[v[l+8>>>2],v[l+12>>>2],v[l+16>>>2],v[l+20>>>2]],_=mc(_);break;default:return{errno:5}}return{family:d,addr:_,port:m}}function Ji(l){for(var u=l.split("."),d=0;d<4;d++){var m=Number(u[d]);if(isNaN(m))return null;u[d]=m}return(u[0]|u[1]<<8|u[2]<<16|u[3]<<24)>>>0}function qi(l){return parseInt(l)}function jo(l){var u,d,m,_,I=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,b=[];if(!I.test(l))return null;if(l==="::")return[0,0,0,0,0,0,0,0];for(l.startsWith("::")?l=l.replace("::","Z:"):l=l.replace("::",":Z:"),l.indexOf(".")>0?(l=l.replace(new RegExp("[.]","g"),":"),u=l.split(":"),u[u.length-4]=qi(u[u.length-4])+qi(u[u.length-3])*256,u[u.length-3]=qi(u[u.length-2])+qi(u[u.length-1])*256,u=u.slice(0,u.length-2)):u=l.split(":"),m=0,_=0,d=0;d<u.length;d++)if(typeof u[d]=="string")if(u[d]==="Z"){for(_=0;_<8-u.length+1;_++)b[d+_]=0;m=_-1}else b[d+m]=ts(parseInt(u[d],16));else b[d+m]=u[d];return[b[1]<<16|b[0],b[3]<<16|b[2],b[5]<<16|b[4],b[7]<<16|b[6]]}var me={address_map:{id:1,addrs:{},names:{}},lookup_name:function(l){var u=Ji(l);if(u!==null||(u=jo(l),u!==null))return l;var d;if(me.address_map.addrs[l])d=me.address_map.addrs[l];else{var m=me.address_map.id++;qt(m<65535,"exceeded max address mappings of 65535"),d="172.29."+(m&255)+"."+(m&65280),me.address_map.names[d]=l,me.address_map.addrs[l]=d}return d},lookup_addr:function(l){return me.address_map.names[l]?me.address_map.names[l]:null}};function yc(l,u,d){if(d&&l===0)return null;var m=_c(l,u);if(m.errno)throw new pc.ErrnoError(m.errno);return m.addr=me.lookup_addr(m.addr)||m.addr,m}function yd(l,u,d,m,_,I){var b=Yn(l),S=yc(u,d);return b.sock_ops.bind(b,S.addr,S.port),0}function bd(l,u,d,m,_,I){var b=Yn(l),S=yc(u,d);return b.sock_ops.connect(b,S.addr,S.port),0}function gd(l,u,d,m){}function wd(l,u,d){return Gr.varargs=d,0}function vd(l,u){}function Sd(l,u,d){}function bc(l,u,d,m){if(d>>>=0,!(m>0))return 0;for(var _=d,I=d+m-1,b=0;b<l.length;++b){var S=l.charCodeAt(b);if(S>=55296&&S<=57343){var A=l.charCodeAt(++b);S=65536+((S&1023)<<10)|A&1023}if(S<=127){if(d>=I)break;u[d++>>>0]=S}else if(S<=2047){if(d+1>=I)break;u[d++>>>0]=192|S>>6,u[d++>>>0]=128|S&63}else if(S<=65535){if(d+2>=I)break;u[d++>>>0]=224|S>>12,u[d++>>>0]=128|S>>6&63,u[d++>>>0]=128|S&63}else{if(d+3>=I)break;u[d++>>>0]=240|S>>18,u[d++>>>0]=128|S>>12&63,u[d++>>>0]=128|S>>6&63,u[d++>>>0]=128|S&63}}return u[d>>>0]=0,d-_}function Zi(l,u,d){return bc(l,bt,u,d)}function Id(l,u,d){}function gc(l,u){return bt.fill(0,l,l+u),l}function Wo(l,u,d,m,_){switch(u){case 2:d=Ji(d),gc(l,16),_&&(v[_>>>2]=16),It[l>>>1]=u,v[l+4>>>2]=d,It[l+2>>>1]=ts(m);break;case 10:d=jo(d),gc(l,28),_&&(v[_>>>2]=28),v[l>>>2]=u,v[l+8>>>2]=d[0],v[l+12>>>2]=d[1],v[l+16>>>2]=d[2],v[l+20>>>2]=d[3],It[l+2>>>1]=ts(m);break;default:return 5}return 0}function Fd(l,u,d,m,_,I){var b=Yn(l);if(!b.daddr)return-53;var S=Wo(u,b.family,me.lookup_name(b.daddr),b.dport,d);return 0}function Bd(l,u,d,m,_,I){var b=Yn(l);return u===1&&d===4?(v[m>>>2]=b.error,v[_>>>2]=4,b.error=null,0):-50}function Ad(l,u,d){return Gr.varargs=d,0}function Td(l,u){}function xd(l,u,d){}function Dd(l,u,d,m){}function Ed(l,u,d,m){Gr.varargs=m}function Od(l,u,d,m,_,I){var b=Yn(l),S=b.sock_ops.recvmsg(b,d);if(!S)return 0;if(_)var A=Wo(_,b.family,me.lookup_name(S.addr),S.port,I);return bt.set(S.buffer,u>>>0),S.buffer.byteLength}function Rd(l,u,d,m){}function Md(l){}function Ud(l,u,d,m,_,I){}function Nd(l,u,d){}function Ld(l,u){}function kd(l,u,d){}var Cd=!0;function Pd(){return Cd}function Vd(l){return ot[l>>>2]+v[l+4>>>2]*4294967296}function Xn(l){return l%4===0&&(l%100!==0||l%400===0)}var Hd=[0,31,60,91,121,152,182,213,244,274,305,335],zd=[0,31,59,90,120,151,181,212,243,273,304,334];function jd(l){var u=Xn(l.getFullYear()),d=u?Hd:zd,m=d[l.getMonth()]+l.getDate()-1;return m}function Wd(l,u){var d=new Date(Vd(l)*1e3);v[u>>>2]=d.getSeconds(),v[u+4>>>2]=d.getMinutes(),v[u+8>>>2]=d.getHours(),v[u+12>>>2]=d.getDate(),v[u+16>>>2]=d.getMonth(),v[u+20>>>2]=d.getFullYear()-1900,v[u+24>>>2]=d.getDay();var m=jd(d)|0;v[u+28>>>2]=m,v[u+36>>>2]=-(d.getTimezoneOffset()*60);var _=new Date(d.getFullYear(),0,1),I=new Date(d.getFullYear(),6,1).getTimezoneOffset(),b=_.getTimezoneOffset(),S=(I!=b&&d.getTimezoneOffset()==Math.min(b,I))|0;v[u+32>>>2]=S}function $o(l){for(var u=0,d=0;d<l.length;++d){var m=l.charCodeAt(d);m<=127?u++:m<=2047?u+=2:m>=55296&&m<=57343?(u+=4,++d):u+=3}return u}function wc(l){var u=$o(l)+1,d=es(u);return d&&Zi(l,d,u),d}function $d(l,u,d){var m=new Date().getFullYear(),_=new Date(m,0,1),I=new Date(m,6,1),b=_.getTimezoneOffset(),S=I.getTimezoneOffset(),A=Math.max(b,S);ot[l>>>2]=A*60,v[u>>>2]=+(b!=S);function q(gt){var Lt=gt.toTimeString().match(/\(([A-Za-z ]+)\)$/);return Lt?Lt[1]:"GMT"}var et=q(_),zt=q(I),nt=wc(et),se=wc(zt);S<b?(ot[d>>>2]=nt,ot[d+4>>>2]=se):(ot[d>>>2]=se,ot[d+4>>>2]=nt)}function Yd(){V("")}function Xd(l,u){V(dc)}function Gd(l,u){return globalThis.DUCKDB_RUNTIME.createDirectory(e,l,u)}function Kd(l,u){return globalThis.DUCKDB_RUNTIME.checkDirectory(e,l,u)}function Jd(l,u){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(e,l,u)}function qd(l,u){return globalThis.DUCKDB_RUNTIME.removeDirectory(e,l,u)}function Zd(l){return globalThis.DUCKDB_RUNTIME.closeFile(e,l)}function Qd(l,u){return globalThis.DUCKDB_RUNTIME.checkFile(e,l,u)}function tf(l){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(e,l)}function ef(l,u,d,m){return globalThis.DUCKDB_RUNTIME.moveFile(e,l,u,d,m)}function rf(l,u){return globalThis.DUCKDB_RUNTIME.openFile(e,l,u)}function nf(l,u,d,m){return globalThis.DUCKDB_RUNTIME.readFile(e,l,u,d,m)}function sf(l,u){return globalThis.DUCKDB_RUNTIME.truncateFile(e,l,u)}function of(l,u,d,m){return globalThis.DUCKDB_RUNTIME.writeFile(e,l,u,d,m)}function af(l){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(l)}function cf(l,u){return globalThis.DUCKDB_RUNTIME.glob(e,l,u)}function lf(l){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(e,l)}function uf(l,u,d,m,_,I){return globalThis.DUCKDB_RUNTIME.callScalarUDF(e,l,u,d,m,_,I)}function df(){return Date.now()}function vc(){return 4294901760}function ff(){return vc()}var Sc;y&&(global.performance=Su().performance),Sc=()=>performance.now();function hf(l,u,d){bt.copyWithin(l>>>0,u>>>0,u+d>>>0)}function pf(l){var u=Br.buffer,d=l-u.byteLength+65535>>>16;try{return Br.grow(d),ec(),1}catch(m){}}function mf(l){var u=bt.length;l=l>>>0;var d=vc();if(l>d)return!1;for(var m=(A,q)=>A+(q-A%q)%q,_=1;_<=4;_*=2){var I=u*(1+.2/_);I=Math.min(I,l+100663296);var b=Math.min(d,m(Math.max(l,I),65536)),S=pf(b);if(S)return!0}return!1}var Yo={};function _f(){return a||"./this.program"}function Gn(){if(!Gn.strings){var l=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",u={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:l,_:_f()};for(var d in Yo)Yo[d]===void 0?delete u[d]:u[d]=Yo[d];var m=[];for(var d in u)m.push("".concat(d,"=").concat(u[d]));Gn.strings=m}return Gn.strings}function yf(l,u){for(var d=0;d<l.length;++d)St[u++>>>0]=l.charCodeAt(d);St[u>>>0]=0}function bf(l,u){var d=0;return Gn().forEach(function(m,_){var I=u+d;ot[l+_*4>>>2]=I,yf(m,I),d+=m.length+1}),0}function gf(l,u){var d=Gn();ot[l>>>2]=d.length;var m=0;return d.forEach(function(_){m+=_.length+1}),ot[u>>>2]=m,0}function wf(l){return 52}function vf(l,u){var d=0,m=0,_=0;{var I=2;l==0?d=2:(l==1||l==2)&&(d=64),_=1}return St[u>>>0]=I,It[u+2>>>1]=_,_n=[d>>>0,(pe=d,+Math.abs(pe)>=1?pe>0?+Math.floor(pe/4294967296)>>>0:~~+Math.ceil((pe-+(~~pe>>>0))/4294967296)>>>0:0)],v[u+8>>>2]=_n[0],v[u+12>>>2]=_n[1],_n=[m>>>0,(pe=m,+Math.abs(pe)>=1?pe>0?+Math.floor(pe/4294967296)>>>0:~~+Math.ceil((pe-+(~~pe>>>0))/4294967296)>>>0:0)],v[u+16>>>2]=_n[0],v[u+20>>>2]=_n[1],0}function Sf(l,u,d,m,_,I){return 52}function If(l,u,d,m,_,I){return 52}function Ff(l,u,d,m){return 52}function Bf(l,u,d,m,_){return 70}function Af(l){return 52}var Tf=[null,[],[]];function xf(l,u){var d=Tf[l];u===0||u===10?((l===1?Wn:N)(hc(d,0)),d.length=0):d.push(u)}function Df(l,u,d,m){for(var _=0,I=0;I<d;I++){var b=ot[u>>>2],S=ot[u+4>>>2];u+=8;for(var A=0;A<S;A++)xf(l,bt[b+A>>>0]);_+=S}return ot[m>>>2]=_,0}function Ef(l,u,d,m){var _=0,I=0,b=0,S=0,A=0,q=0,et;function zt(nt,se,gt,Lt,Be,ir){var g,E,ut,at;return E=nt===10?28:16,Be=nt===10?mc(Be):zo(Be),g=es(E),at=Wo(g,nt,Be,ir),qt(!at),ut=es(32),v[ut+4>>>2]=nt,v[ut+8>>>2]=se,v[ut+12>>>2]=gt,ot[ut+24>>>2]=Lt,ot[ut+20>>>2]=g,nt===10?v[ut+16>>>2]=28:v[ut+16>>>2]=16,v[ut+28>>>2]=0,ut}if(d&&(b=v[d>>>2],S=v[d+4>>>2],A=v[d+8>>>2],q=v[d+12>>>2]),A&&!q&&(q=A===2?17:6),!A&&q&&(A=q===17?2:1),q===0&&(q=6),A===0&&(A=1),!l&&!u)return-2;if(b&-1088||d!==0&&v[d>>>2]&2&&!l)return-1;if(b&32)return-2;if(A!==0&&A!==1&&A!==2)return-7;if(S!==0&&S!==2&&S!==10)return-6;if(u&&(u=yn(u),I=parseInt(u,10),isNaN(I)))return b&1024?-2:-8;if(!l)return S===0&&(S=2),b&1||(S===2?_=Qi(2130706433):_=[0,0,0,1]),et=zt(S,A,q,null,_,I),ot[m>>>2]=et,0;if(l=yn(l),_=Ji(l),_!==null)if(S===0||S===2)S=2;else if(S===10&&b&8)_=[0,0,Qi(65535),_],S=10;else return-2;else if(_=jo(l),_!==null)if(S===0||S===10)S=10;else return-2;return _!=null?(et=zt(S,A,q,l,_,I),ot[m>>>2]=et,0):b&4?-2:(l=me.lookup_name(l),_=Ji(l),S===0?S=2:S===10&&(_=[0,0,Qi(65535),_]),et=zt(S,A,q,null,_,I),ot[m>>>2]=et,0)}function Of(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return m=>crypto.getRandomValues(m);if(y)try{var l=up("crypto"),u=l.randomFillSync;if(u)return m=>l.randomFillSync(m);var d=l.randomBytes;return m=>(m.set(d(m.byteLength)),m)}catch(m){}V("initRandomDevice")}function Ic(l){return(Ic=Of())(l)}function Rf(l,u){return Ic(bt.subarray(l>>>0,l+u>>>0)),0}function Mf(l,u,d,m,_,I,b){var S=_c(l,u);if(S.errno)return-6;var A=S.port,q=S.addr,et=!1;if(d&&m){var zt;if(b&1||!(zt=me.lookup_addr(q))){if(b&8)return-2}else q=zt;var nt=Zi(q,d,m);nt+1>=m&&(et=!0)}if(_&&I){A=""+A;var nt=Zi(A,_,I);nt+1>=I&&(et=!0)}return et?-12:0}function Uf(l,u){for(var d=0,m=0;m<=u;d+=l[m++]);return d}var Fc=[31,29,31,30,31,30,31,31,30,31,30,31],Bc=[31,28,31,30,31,30,31,31,30,31,30,31];function Nf(l,u){for(var d=new Date(l.getTime());u>0;){var m=Xn(d.getFullYear()),_=d.getMonth(),I=(m?Fc:Bc)[_];if(u>I-d.getDate())u-=I-d.getDate()+1,d.setDate(1),_<11?d.setMonth(_+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else return d.setDate(d.getDate()+u),d}return d}function Lf(l,u,d){var m=d>0?d:$o(l)+1,_=new Array(m),I=bc(l,_,0,_.length);return u&&(_.length=I),_}function Ac(l,u){St.set(l,u>>>0)}function kf(l,u,d,m){var _=v[m+40>>>2],I={tm_sec:v[m>>>2],tm_min:v[m+4>>>2],tm_hour:v[m+8>>>2],tm_mday:v[m+12>>>2],tm_mon:v[m+16>>>2],tm_year:v[m+20>>>2],tm_wday:v[m+24>>>2],tm_yday:v[m+28>>>2],tm_isdst:v[m+32>>>2],tm_gmtoff:v[m+36>>>2],tm_zone:_?yn(_):""},b=yn(d),S={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var A in S)b=b.replace(new RegExp(A,"g"),S[A]);var q=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],et=["January","February","March","April","May","June","July","August","September","October","November","December"];function zt(g,E,ut){for(var at=typeof g=="number"?g.toString():g||"";at.length<E;)at=ut[0]+at;return at}function nt(g,E){return zt(g,E,"0")}function se(g,E){function ut(Wt){return Wt<0?-1:Wt>0?1:0}var at;return(at=ut(g.getFullYear()-E.getFullYear()))===0&&(at=ut(g.getMonth()-E.getMonth()))===0&&(at=ut(g.getDate()-E.getDate())),at}function gt(g){switch(g.getDay()){case 0:return new Date(g.getFullYear()-1,11,29);case 1:return g;case 2:return new Date(g.getFullYear(),0,3);case 3:return new Date(g.getFullYear(),0,2);case 4:return new Date(g.getFullYear(),0,1);case 5:return new Date(g.getFullYear()-1,11,31);case 6:return new Date(g.getFullYear()-1,11,30)}}function Lt(g){var E=Nf(new Date(g.tm_year+1900,0,1),g.tm_yday),ut=new Date(E.getFullYear(),0,4),at=new Date(E.getFullYear()+1,0,4),Wt=gt(ut),Kn=gt(at);return se(Wt,E)<=0?se(Kn,E)<=0?E.getFullYear()+1:E.getFullYear():E.getFullYear()-1}var Be={"%a":function(g){return q[g.tm_wday].substring(0,3)},"%A":function(g){return q[g.tm_wday]},"%b":function(g){return et[g.tm_mon].substring(0,3)},"%B":function(g){return et[g.tm_mon]},"%C":function(g){var E=g.tm_year+1900;return nt(E/100|0,2)},"%d":function(g){return nt(g.tm_mday,2)},"%e":function(g){return zt(g.tm_mday,2," ")},"%g":function(g){return Lt(g).toString().substring(2)},"%G":function(g){return Lt(g)},"%H":function(g){return nt(g.tm_hour,2)},"%I":function(g){var E=g.tm_hour;return E==0?E=12:E>12&&(E-=12),nt(E,2)},"%j":function(g){return nt(g.tm_mday+Uf(Xn(g.tm_year+1900)?Fc:Bc,g.tm_mon-1),3)},"%m":function(g){return nt(g.tm_mon+1,2)},"%M":function(g){return nt(g.tm_min,2)},"%n":function(){return"\n"},"%p":function(g){return g.tm_hour>=0&&g.tm_hour<12?"AM":"PM"},"%S":function(g){return nt(g.tm_sec,2)},"%t":function(){return"	"},"%u":function(g){return g.tm_wday||7},"%U":function(g){var E=g.tm_yday+7-g.tm_wday;return nt(Math.floor(E/7),2)},"%V":function(g){var E=Math.floor((g.tm_yday+7-(g.tm_wday+6)%7)/7);if((g.tm_wday+371-g.tm_yday-2)%7<=2&&E++,E){if(E==53){var at=(g.tm_wday+371-g.tm_yday)%7;at!=4&&(at!=3||!Xn(g.tm_year))&&(E=1)}}else{E=52;var ut=(g.tm_wday+7-g.tm_yday-1)%7;(ut==4||ut==5&&Xn(g.tm_year%400-1))&&E++}return nt(E,2)},"%w":function(g){return g.tm_wday},"%W":function(g){var E=g.tm_yday+7-(g.tm_wday+6)%7;return nt(Math.floor(E/7),2)},"%y":function(g){return(g.tm_year+1900).toString().substring(2)},"%Y":function(g){return g.tm_year+1900},"%z":function(g){var E=g.tm_gmtoff,ut=E>=0;return E=Math.abs(E)/60,E=E/60*100+E%60,(ut?"+":"-")+("0000"+E).slice(-4)},"%Z":function(g){return g.tm_zone},"%%":function(){return"%"}};b=b.replace(/%%/g,"\0\0");for(var A in Be)b.includes(A)&&(b=b.replace(new RegExp(A,"g"),Be[A](I)));b=b.replace(/\0\0/g,"%");var ir=Lf(b,!1);return ir.length>u?0:(Ac(ir,l),ir.length-1)}function Cf(l,u,d,m,_){return kf(l,u,d,m)}function Pf(){N("missing function: ucnv_close_64"),V(-1)}function Vf(){N("missing function: ucnv_convertEx_64"),V(-1)}function Hf(){N("missing function: ucnv_open_64"),V(-1)}function zf(){N("missing function: ucnv_toAlgorithmic_64"),V(-1)}function jf(){N("missing function: ucsdet_close_64"),V(-1)}function Wf(){N("missing function: ucsdet_detect_64"),V(-1)}function $f(){N("missing function: ucsdet_getConfidence_64"),V(-1)}function Yf(){N("missing function: ucsdet_getName_64"),V(-1)}function Xf(){N("missing function: ucsdet_open_64"),V(-1)}function Gf(){N("missing function: ucsdet_setText_64"),V(-1)}function Kf(){N("missing function: unzClose"),V(-1)}function Jf(){N("missing function: unzCloseCurrentFile"),V(-1)}function qf(){N("missing function: unzGetCurrentFileInfo"),V(-1)}function Zf(){N("missing function: unzGetCurrentFileInfo64"),V(-1)}function Qf(){N("missing function: unzGetGlobalInfo"),V(-1)}function th(){N("missing function: unzGoToFirstFile"),V(-1)}function eh(){N("missing function: unzGoToNextFile"),V(-1)}function rh(){N("missing function: unzLocateFile"),V(-1)}function nh(){N("missing function: unzOpen"),V(-1)}function ih(){N("missing function: unzOpen2"),V(-1)}function sh(){N("missing function: unzOpenCurrentFile"),V(-1)}function oh(){N("missing function: unzReadCurrentFile"),V(-1)}function ah(l){Mt=l,Vu()||(e.onExit&&e.onExit(l),Z=!0),c(l,new lc(l))}function ch(l,u){Mt=l,ah(l)}function lh(l){if(l instanceof lc||l=="unwind")return Mt;c(1,l)}function uh(l){var u=e["_"+l];return u}function dh(l){var u=$o(l)+1,d=rs(u);return Zi(l,d,u),d}function fh(l,u,d,m,_){var I={string:gt=>{var Lt=0;return gt!=null&&gt!==0&&(Lt=dh(gt)),Lt},array:gt=>{var Lt=rs(gt.length);return Ac(gt,Lt),Lt}};function b(gt){return u==="string"?yn(gt):u==="boolean"?!!gt:gt}var S=uh(l),A=[],q=0;if(m)for(var et=0;et<m.length;et++){var zt=I[d[et]];zt?(q===0&&(q=Go()),A[et]=zt(m[et])):A[et]=m[et]}var nt=S.apply(null,A);function se(gt){return q!==0&&Ko(q),b(gt)}return nt=se(nt),nt}var hh={g:td,V:ed,da:rd,n:nd,p:id,d:sd,B:od,f:ad,b:cd,o:ld,h:ud,a:hd,La:pd,Fa:md,Ja:yd,Ia:bd,Ba:gd,e:wd,Aa:vd,O:Sd,va:Id,Da:Fd,Ea:Bd,K:Ad,xa:Td,wa:xd,ya:Dd,L:Ed,Ga:Od,ta:Rd,F:Md,Ha:Ud,H:Nd,za:Ld,G:kd,Na:Pd,fa:Wd,ga:$d,j:Yd,Ma:Xd,ma:Gd,na:Kd,ka:Jd,la:qd,D:Zd,ia:Qd,N:tf,ja:ef,pa:rf,q:nf,oa:sf,E:of,qa:af,ha:cf,C:lf,ra:uf,M:df,Oa:ff,i:Sc,Ka:hf,Qa:mf,T:bf,W:gf,l:wf,ea:vf,Q:Sf,P:If,J:Ff,R:Bf,ua:Af,w:Df,I:Ef,sa:Rf,Ca:Mf,Pa:Cf,c:Pf,X:Vf,v:Hf,Z:zf,Y:jf,aa:Wf,$:$f,_:Yf,ca:Xf,ba:Gf,k:Kf,u:Jf,z:qf,r:Zf,U:Qf,A:th,y:eh,t:rh,x:nh,S:ih,s:sh,m:oh},ny=Qu(),ph=function(){return(ph=e.asm.Sa).apply(null,arguments)},Tc=e._main=function(){return(Tc=e._main=e.asm.Ta).apply(null,arguments)},mh=e._duckdb_web_fs_glob_add_path=function(){return(mh=e._duckdb_web_fs_glob_add_path=e.asm.Va).apply(null,arguments)},_h=e._duckdb_web_clear_response=function(){return(_h=e._duckdb_web_clear_response=e.asm.Wa).apply(null,arguments)},yh=e._duckdb_web_fail_with=function(){return(yh=e._duckdb_web_fail_with=e.asm.Xa).apply(null,arguments)},bh=e._duckdb_web_reset=function(){return(bh=e._duckdb_web_reset=e.asm.Ya).apply(null,arguments)},gh=e._duckdb_web_connect=function(){return(gh=e._duckdb_web_connect=e.asm.Za).apply(null,arguments)},wh=e._duckdb_web_disconnect=function(){return(wh=e._duckdb_web_disconnect=e.asm._a).apply(null,arguments)},vh=e._duckdb_web_flush_files=function(){return(vh=e._duckdb_web_flush_files=e.asm.$a).apply(null,arguments)},Sh=e._duckdb_web_flush_file=function(){return(Sh=e._duckdb_web_flush_file=e.asm.ab).apply(null,arguments)},Ih=e._duckdb_web_open=function(){return(Ih=e._duckdb_web_open=e.asm.bb).apply(null,arguments)},Fh=e._duckdb_web_get_global_file_info=function(){return(Fh=e._duckdb_web_get_global_file_info=e.asm.cb).apply(null,arguments)},Bh=e._duckdb_web_collect_file_stats=function(){return(Bh=e._duckdb_web_collect_file_stats=e.asm.db).apply(null,arguments)},Ah=e._duckdb_web_export_file_stats=function(){return(Ah=e._duckdb_web_export_file_stats=e.asm.eb).apply(null,arguments)},Th=e._duckdb_web_fs_drop_file=function(){return(Th=e._duckdb_web_fs_drop_file=e.asm.fb).apply(null,arguments)},xh=e._duckdb_web_fs_drop_files=function(){return(xh=e._duckdb_web_fs_drop_files=e.asm.gb).apply(null,arguments)},Dh=e._duckdb_web_fs_glob_file_infos=function(){return(Dh=e._duckdb_web_fs_glob_file_infos=e.asm.hb).apply(null,arguments)},Eh=e._duckdb_web_fs_get_file_info_by_id=function(){return(Eh=e._duckdb_web_fs_get_file_info_by_id=e.asm.ib).apply(null,arguments)},Oh=e._duckdb_web_fs_get_file_info_by_name=function(){return(Oh=e._duckdb_web_fs_get_file_info_by_name=e.asm.jb).apply(null,arguments)},Rh=e._duckdb_web_fs_register_file_url=function(){return(Rh=e._duckdb_web_fs_register_file_url=e.asm.kb).apply(null,arguments)},Mh=e._duckdb_web_fs_register_file_buffer=function(){return(Mh=e._duckdb_web_fs_register_file_buffer=e.asm.lb).apply(null,arguments)},Uh=e._duckdb_web_copy_file_to_buffer=function(){return(Uh=e._duckdb_web_copy_file_to_buffer=e.asm.mb).apply(null,arguments)},Nh=e._duckdb_web_copy_file_to_path=function(){return(Nh=e._duckdb_web_copy_file_to_path=e.asm.nb).apply(null,arguments)},Lh=e._duckdb_web_get_version=function(){return(Lh=e._duckdb_web_get_version=e.asm.ob).apply(null,arguments)},kh=e._duckdb_web_get_feature_flags=function(){return(kh=e._duckdb_web_get_feature_flags=e.asm.pb).apply(null,arguments)},Ch=e._duckdb_web_tokenize=function(){return(Ch=e._duckdb_web_tokenize=e.asm.qb).apply(null,arguments)},Ph=e._duckdb_web_udf_scalar_create=function(){return(Ph=e._duckdb_web_udf_scalar_create=e.asm.rb).apply(null,arguments)},Vh=e._duckdb_web_prepared_create=function(){return(Vh=e._duckdb_web_prepared_create=e.asm.sb).apply(null,arguments)},Hh=e._duckdb_web_prepared_close=function(){return(Hh=e._duckdb_web_prepared_close=e.asm.tb).apply(null,arguments)},zh=e._duckdb_web_prepared_run=function(){return(zh=e._duckdb_web_prepared_run=e.asm.ub).apply(null,arguments)},jh=e._duckdb_web_prepared_send=function(){return(jh=e._duckdb_web_prepared_send=e.asm.vb).apply(null,arguments)},Wh=e._duckdb_web_query_run=function(){return(Wh=e._duckdb_web_query_run=e.asm.wb).apply(null,arguments)},$h=e._duckdb_web_pending_query_start=function(){return($h=e._duckdb_web_pending_query_start=e.asm.xb).apply(null,arguments)},Yh=e._duckdb_web_pending_query_poll=function(){return(Yh=e._duckdb_web_pending_query_poll=e.asm.yb).apply(null,arguments)},Xh=e._duckdb_web_pending_query_cancel=function(){return(Xh=e._duckdb_web_pending_query_cancel=e.asm.zb).apply(null,arguments)},Gh=e._duckdb_web_query_fetch_results=function(){return(Gh=e._duckdb_web_query_fetch_results=e.asm.Ab).apply(null,arguments)},Kh=e._duckdb_web_get_tablenames=function(){return(Kh=e._duckdb_web_get_tablenames=e.asm.Bb).apply(null,arguments)},Jh=e._duckdb_web_insert_arrow_from_ipc_stream=function(){return(Jh=e._duckdb_web_insert_arrow_from_ipc_stream=e.asm.Cb).apply(null,arguments)},qh=e._duckdb_web_insert_csv_from_path=function(){return(qh=e._duckdb_web_insert_csv_from_path=e.asm.Db).apply(null,arguments)},Zh=e._duckdb_web_insert_json_from_path=function(){return(Zh=e._duckdb_web_insert_json_from_path=e.asm.Eb).apply(null,arguments)},Qh=function(){return(Qh=e.asm.__errno_location).apply(null,arguments)},Qi=function(){return(Qi=e.asm.Fb).apply(null,arguments)},ts=function(){return(ts=e.asm.Gb).apply(null,arguments)},Xo=function(){return(Xo=e.asm.Hb).apply(null,arguments)},es=e._malloc=function(){return(es=e._malloc=e.asm.Ib).apply(null,arguments)},tp=e._free=function(){return(tp=e._free=e.asm.Jb).apply(null,arguments)},Go=function(){return(Go=e.asm.Kb).apply(null,arguments)},Ko=function(){return(Ko=e.asm.Lb).apply(null,arguments)},rs=function(){return(rs=e.asm.Mb).apply(null,arguments)},xc=function(){return(xc=e.asm.Nb).apply(null,arguments)};e.stackAlloc=rs,e.stackSave=Go,e.stackRestore=Ko,e.ccall=fh;var ns;$n=function l(){ns||Dc(),ns||($n=l)};function ep(){var l=Tc,u=0,d=0;try{var m=l(u,d);return ch(m,!0),m}catch(_){return lh(_)}}function Dc(){if(Xr>0||(Hu(),Xr>0))return;function l(){ns||(ns=!0,e.calledRun=!0,!Z&&(zu(),ju(),n(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),Ec&&ep(),Wu()))}e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1),l()},1)):l()}if(e.preInit)for(typeof e.preInit=="function"&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();var Ec=!0;return e.noInitialRun&&(Ec=!1),Dc(),t.ready}})();typeof Mo=="object"&&typeof Ka=="object"?Ka.exports=Ga:typeof define=="function"&&define.amd?define([],function(){return Ga}):typeof Mo=="object"&&(Mo.DuckDB=Ga)});var Du=Jn((exports,module)=>{(function(){"use strict";var ERROR="input is invalid type",WINDOW=typeof window=="object",root=WINDOW?window:{};root.JS_SHA256_NO_WINDOW&&(WINDOW=!1);var WEB_WORKER=!WINDOW&&typeof self=="object",NODE_JS=!root.JS_SHA256_NO_NODE_JS&&typeof process=="object"&&process.versions&&process.versions.node;NODE_JS?root=global:WEB_WORKER&&(root=self);var COMMON_JS=!root.JS_SHA256_NO_COMMON_JS&&typeof module=="object"&&module.exports,AMD=typeof define=="function"&&define.amd,ARRAY_BUFFER=!root.JS_SHA256_NO_ARRAY_BUFFER&&typeof ArrayBuffer<"u",HEX_CHARS="0123456789abcdef".split(""),EXTRA=[-2147483648,8388608,32768,128],SHIFT=[24,16,8,0],K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],OUTPUT_TYPES=["hex","array","digest","arrayBuffer"],blocks=[];(root.JS_SHA256_NO_NODE_JS||!Array.isArray)&&(Array.isArray=function(r){return Object.prototype.toString.call(r)==="[object Array]"}),ARRAY_BUFFER&&(root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW||!ArrayBuffer.isView)&&(ArrayBuffer.isView=function(r){return typeof r=="object"&&r.buffer&&r.buffer.constructor===ArrayBuffer});var createOutputMethod=function(r,t){return function(e){return new Sha256(t,!0).update(e)[r]()}},createMethod=function(r){var t=createOutputMethod("hex",r);NODE_JS&&(t=nodeWrap(t,r)),t.create=function(){return new Sha256(r)},t.update=function(i){return t.create().update(i)};for(var e=0;e<OUTPUT_TYPES.length;++e){var n=OUTPUT_TYPES[e];t[n]=createOutputMethod(n,r)}return t},nodeWrap=function(method,is224){var crypto=eval("require('crypto')"),Buffer=eval("require('buffer').Buffer"),algorithm=is224?"sha224":"sha256",nodeMethod=function(r){if(typeof r=="string")return crypto.createHash(algorithm).update(r,"utf8").digest("hex");if(r==null)throw new Error(ERROR);return r.constructor===ArrayBuffer&&(r=new Uint8Array(r)),Array.isArray(r)||ArrayBuffer.isView(r)||r.constructor===Buffer?crypto.createHash(algorithm).update(new Buffer(r)).digest("hex"):method(r)};return nodeMethod},createHmacOutputMethod=function(r,t){return function(e,n){return new HmacSha256(e,t,!0).update(n)[r]()}},createHmacMethod=function(r){var t=createHmacOutputMethod("hex",r);t.create=function(i){return new HmacSha256(i,r)},t.update=function(i,s){return t.create(i).update(s)};for(var e=0;e<OUTPUT_TYPES.length;++e){var n=OUTPUT_TYPES[e];t[n]=createHmacOutputMethod(n,r)}return t};function Sha256(r,t){t?(blocks[0]=blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0,this.blocks=blocks):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],r?(this.h0=3238371032,this.h1=914150663,this.h2=812702999,this.h3=4144912697,this.h4=4290775857,this.h5=1750603025,this.h6=1694076839,this.h7=3204075428):(this.h0=1779033703,this.h1=3144134277,this.h2=1013904242,this.h3=2773480762,this.h4=1359893119,this.h5=2600822924,this.h6=528734635,this.h7=1541459225),this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0,this.is224=r}Sha256.prototype.update=function(r){if(!this.finalized){var t,e=typeof r;if(e!=="string"){if(e==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);t=!0}for(var n,i=0,s,o=r.length,a=this.blocks;i<o;){if(this.hashed&&(this.hashed=!1,a[0]=this.block,a[16]=a[1]=a[2]=a[3]=a[4]=a[5]=a[6]=a[7]=a[8]=a[9]=a[10]=a[11]=a[12]=a[13]=a[14]=a[15]=0),t)for(s=this.start;i<o&&s<64;++i)a[s>>2]|=r[i]<<SHIFT[s++&3];else for(s=this.start;i<o&&s<64;++i)n=r.charCodeAt(i),n<128?a[s>>2]|=n<<SHIFT[s++&3]:n<2048?(a[s>>2]|=(192|n>>6)<<SHIFT[s++&3],a[s>>2]|=(128|n&63)<<SHIFT[s++&3]):n<55296||n>=57344?(a[s>>2]|=(224|n>>12)<<SHIFT[s++&3],a[s>>2]|=(128|n>>6&63)<<SHIFT[s++&3],a[s>>2]|=(128|n&63)<<SHIFT[s++&3]):(n=65536+((n&1023)<<10|r.charCodeAt(++i)&1023),a[s>>2]|=(240|n>>18)<<SHIFT[s++&3],a[s>>2]|=(128|n>>12&63)<<SHIFT[s++&3],a[s>>2]|=(128|n>>6&63)<<SHIFT[s++&3],a[s>>2]|=(128|n&63)<<SHIFT[s++&3]);this.lastByteIndex=s,this.bytes+=s-this.start,s>=64?(this.block=a[16],this.start=s-64,this.hash(),this.hashed=!0):this.start=s}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},Sha256.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var r=this.blocks,t=this.lastByteIndex;r[16]=this.block,r[t>>2]|=EXTRA[t&3],this.block=r[16],t>=56&&(this.hashed||this.hash(),r[0]=this.block,r[16]=r[1]=r[2]=r[3]=r[4]=r[5]=r[6]=r[7]=r[8]=r[9]=r[10]=r[11]=r[12]=r[13]=r[14]=r[15]=0),r[14]=this.hBytes<<3|this.bytes>>>29,r[15]=this.bytes<<3,this.hash()}},Sha256.prototype.hash=function(){var r=this.h0,t=this.h1,e=this.h2,n=this.h3,i=this.h4,s=this.h5,o=this.h6,a=this.h7,c=this.blocks,f,p,y,w,B,Q,Bt,xt,Rt,Kt,Jt;for(f=16;f<64;++f)B=c[f-15],p=(B>>>7|B<<25)^(B>>>18|B<<14)^B>>>3,B=c[f-2],y=(B>>>17|B<<15)^(B>>>19|B<<13)^B>>>10,c[f]=c[f-16]+p+c[f-7]+y<<0;for(Jt=t&e,f=0;f<64;f+=4)this.first?(this.is224?(xt=300032,B=c[0]-1413257819,a=B-150054599<<0,n=B+24177077<<0):(xt=704751109,B=c[0]-210244248,a=B-1521486534<<0,n=B+143694565<<0),this.first=!1):(p=(r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10),y=(i>>>6|i<<26)^(i>>>11|i<<21)^(i>>>25|i<<7),xt=r&t,w=xt^r&e^Jt,Bt=i&s^~i&o,B=a+y+Bt+K[f]+c[f],Q=p+w,a=n+B<<0,n=B+Q<<0),p=(n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10),y=(a>>>6|a<<26)^(a>>>11|a<<21)^(a>>>25|a<<7),Rt=n&r,w=Rt^n&t^xt,Bt=a&i^~a&s,B=o+y+Bt+K[f+1]+c[f+1],Q=p+w,o=e+B<<0,e=B+Q<<0,p=(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10),y=(o>>>6|o<<26)^(o>>>11|o<<21)^(o>>>25|o<<7),Kt=e&n,w=Kt^e&r^Rt,Bt=o&a^~o&i,B=s+y+Bt+K[f+2]+c[f+2],Q=p+w,s=t+B<<0,t=B+Q<<0,p=(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10),y=(s>>>6|s<<26)^(s>>>11|s<<21)^(s>>>25|s<<7),Jt=t&e,w=Jt^t&n^Kt,Bt=s&o^~s&a,B=i+y+Bt+K[f+3]+c[f+3],Q=p+w,i=r+B<<0,r=B+Q<<0;this.h0=this.h0+r<<0,this.h1=this.h1+t<<0,this.h2=this.h2+e<<0,this.h3=this.h3+n<<0,this.h4=this.h4+i<<0,this.h5=this.h5+s<<0,this.h6=this.h6+o<<0,this.h7=this.h7+a<<0},Sha256.prototype.hex=function(){this.finalize();var r=this.h0,t=this.h1,e=this.h2,n=this.h3,i=this.h4,s=this.h5,o=this.h6,a=this.h7,c=HEX_CHARS[r>>28&15]+HEX_CHARS[r>>24&15]+HEX_CHARS[r>>20&15]+HEX_CHARS[r>>16&15]+HEX_CHARS[r>>12&15]+HEX_CHARS[r>>8&15]+HEX_CHARS[r>>4&15]+HEX_CHARS[r&15]+HEX_CHARS[t>>28&15]+HEX_CHARS[t>>24&15]+HEX_CHARS[t>>20&15]+HEX_CHARS[t>>16&15]+HEX_CHARS[t>>12&15]+HEX_CHARS[t>>8&15]+HEX_CHARS[t>>4&15]+HEX_CHARS[t&15]+HEX_CHARS[e>>28&15]+HEX_CHARS[e>>24&15]+HEX_CHARS[e>>20&15]+HEX_CHARS[e>>16&15]+HEX_CHARS[e>>12&15]+HEX_CHARS[e>>8&15]+HEX_CHARS[e>>4&15]+HEX_CHARS[e&15]+HEX_CHARS[n>>28&15]+HEX_CHARS[n>>24&15]+HEX_CHARS[n>>20&15]+HEX_CHARS[n>>16&15]+HEX_CHARS[n>>12&15]+HEX_CHARS[n>>8&15]+HEX_CHARS[n>>4&15]+HEX_CHARS[n&15]+HEX_CHARS[i>>28&15]+HEX_CHARS[i>>24&15]+HEX_CHARS[i>>20&15]+HEX_CHARS[i>>16&15]+HEX_CHARS[i>>12&15]+HEX_CHARS[i>>8&15]+HEX_CHARS[i>>4&15]+HEX_CHARS[i&15]+HEX_CHARS[s>>28&15]+HEX_CHARS[s>>24&15]+HEX_CHARS[s>>20&15]+HEX_CHARS[s>>16&15]+HEX_CHARS[s>>12&15]+HEX_CHARS[s>>8&15]+HEX_CHARS[s>>4&15]+HEX_CHARS[s&15]+HEX_CHARS[o>>28&15]+HEX_CHARS[o>>24&15]+HEX_CHARS[o>>20&15]+HEX_CHARS[o>>16&15]+HEX_CHARS[o>>12&15]+HEX_CHARS[o>>8&15]+HEX_CHARS[o>>4&15]+HEX_CHARS[o&15];return this.is224||(c+=HEX_CHARS[a>>28&15]+HEX_CHARS[a>>24&15]+HEX_CHARS[a>>20&15]+HEX_CHARS[a>>16&15]+HEX_CHARS[a>>12&15]+HEX_CHARS[a>>8&15]+HEX_CHARS[a>>4&15]+HEX_CHARS[a&15]),c},Sha256.prototype.toString=Sha256.prototype.hex,Sha256.prototype.digest=function(){this.finalize();var r=this.h0,t=this.h1,e=this.h2,n=this.h3,i=this.h4,s=this.h5,o=this.h6,a=this.h7,c=[r>>24&255,r>>16&255,r>>8&255,r&255,t>>24&255,t>>16&255,t>>8&255,t&255,e>>24&255,e>>16&255,e>>8&255,e&255,n>>24&255,n>>16&255,n>>8&255,n&255,i>>24&255,i>>16&255,i>>8&255,i&255,s>>24&255,s>>16&255,s>>8&255,s&255,o>>24&255,o>>16&255,o>>8&255,o&255];return this.is224||c.push(a>>24&255,a>>16&255,a>>8&255,a&255),c},Sha256.prototype.array=Sha256.prototype.digest,Sha256.prototype.arrayBuffer=function(){this.finalize();var r=new ArrayBuffer(this.is224?28:32),t=new DataView(r);return t.setUint32(0,this.h0),t.setUint32(4,this.h1),t.setUint32(8,this.h2),t.setUint32(12,this.h3),t.setUint32(16,this.h4),t.setUint32(20,this.h5),t.setUint32(24,this.h6),this.is224||t.setUint32(28,this.h7),r};function HmacSha256(r,t,e){var n,i=typeof r;if(i==="string"){var s=[],o=r.length,a=0,c;for(n=0;n<o;++n)c=r.charCodeAt(n),c<128?s[a++]=c:c<2048?(s[a++]=192|c>>6,s[a++]=128|c&63):c<55296||c>=57344?(s[a++]=224|c>>12,s[a++]=128|c>>6&63,s[a++]=128|c&63):(c=65536+((c&1023)<<10|r.charCodeAt(++n)&1023),s[a++]=240|c>>18,s[a++]=128|c>>12&63,s[a++]=128|c>>6&63,s[a++]=128|c&63);r=s}else if(i==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);r.length>64&&(r=new Sha256(t,!0).update(r).array());var f=[],p=[];for(n=0;n<64;++n){var y=r[n]||0;f[n]=92^y,p[n]=54^y}Sha256.call(this,t,e),this.update(p),this.oKeyPad=f,this.inner=!0,this.sharedMemory=e}HmacSha256.prototype=new Sha256,HmacSha256.prototype.finalize=function(){if(Sha256.prototype.finalize.call(this),this.inner){this.inner=!1;var r=this.array();Sha256.call(this,this.is224,this.sharedMemory),this.update(this.oKeyPad),this.update(r),Sha256.prototype.finalize.call(this)}};var exports=createMethod();exports.sha256=exports,exports.sha224=createMethod(!0),exports.sha256.hmac=createHmacMethod(),exports.sha224.hmac=createHmacMethod(!0),COMMON_JS?module.exports=exports:(root.sha256=exports.sha256,root.sha224=exports.sha224,AMD&&define(function(){return exports}))})()});var ry={};Kr(ry,{registerWorker:()=>Mu});function Nc(r,t){var e={};for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&t.indexOf(n)<0&&(e[n]=r[n]);if(r!=null&&typeof Object.getOwnPropertySymbols=="function")for(var i=0,n=Object.getOwnPropertySymbols(r);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(r,n[i])&&(e[n[i]]=r[n[i]]);return e}function F(r,t,e,n){function i(s){return s instanceof e?s:new e(function(o){o(s)})}return new(e||(e=Promise))(function(s,o){function a(p){try{f(n.next(p))}catch(y){o(y)}}function c(p){try{f(n.throw(p))}catch(y){o(y)}}function f(p){p.done?s(p.value):i(p.value).then(a,c)}f((n=n.apply(r,t||[])).next())})}function Uc(r){var t=typeof Symbol=="function"&&Symbol.iterator,e=t&&r[t],n=0;if(e)return e.call(r);if(r&&typeof r.length=="number")return{next:function(){return r&&n>=r.length&&(r=void 0),{value:r&&r[n++],done:!r}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function C(r){return this instanceof C?(this.v=r,this):new C(r)}function oe(r,t,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n=e.apply(r,t||[]),i,s=[];return i={},o("next"),o("throw"),o("return"),i[Symbol.asyncIterator]=function(){return this},i;function o(w){n[w]&&(i[w]=function(B){return new Promise(function(Q,Bt){s.push([w,B,Q,Bt])>1||a(w,B)})})}function a(w,B){try{c(n[w](B))}catch(Q){y(s[0][3],Q)}}function c(w){w.value instanceof C?Promise.resolve(w.value.v).then(f,p):y(s[0][2],w)}function f(w){a("next",w)}function p(w){a("throw",w)}function y(w,B){w(B),s.shift(),s.length&&a(s[0][0],s[0][1])}}function bn(r){var t,e;return t={},n("next"),n("throw",function(i){throw i}),n("return"),t[Symbol.iterator]=function(){return this},t;function n(i,s){t[i]=r[i]?function(o){return(e=!e)?{value:C(r[i](o)),done:!1}:s?s(o):o}:s}}function Ae(r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t=r[Symbol.asyncIterator],e;return t?t.call(r):(r=typeof Uc=="function"?Uc(r):r[Symbol.iterator](),e={},n("next"),n("throw"),n("return"),e[Symbol.asyncIterator]=function(){return this},e);function n(s){e[s]=r[s]&&function(o){return new Promise(function(a,c){o=r[s](o),i(a,c,o.done,o.value)})}}function i(s,o,a,c){Promise.resolve(c).then(function(f){s({value:f,done:a})},o)}}var ra={};Kr(ra,{compareArrayLike:()=>ea,joinUint8Arrays:()=>ae,memcpy:()=>gn,rebaseValueOffsets:()=>Qn,toArrayBufferView:()=>$,toArrayBufferViewAsyncIterator:()=>De,toArrayBufferViewIterator:()=>je,toBigInt64Array:()=>gp,toBigUint64Array:()=>Sp,toFloat32Array:()=>Ip,toFloat32ArrayAsyncIterator:()=>Pp,toFloat32ArrayIterator:()=>Op,toFloat64Array:()=>Fp,toFloat64ArrayAsyncIterator:()=>Vp,toFloat64ArrayIterator:()=>Rp,toInt16Array:()=>bp,toInt16ArrayAsyncIterator:()=>Np,toInt16ArrayIterator:()=>Tp,toInt32Array:()=>qr,toInt32ArrayAsyncIterator:()=>Lp,toInt32ArrayIterator:()=>xp,toInt8Array:()=>yp,toInt8ArrayAsyncIterator:()=>Up,toInt8ArrayIterator:()=>Ap,toUint16Array:()=>wp,toUint16ArrayAsyncIterator:()=>kp,toUint16ArrayIterator:()=>Dp,toUint32Array:()=>vp,toUint32ArrayAsyncIterator:()=>Cp,toUint32ArrayIterator:()=>Ep,toUint8Array:()=>L,toUint8ArrayAsyncIterator:()=>ta,toUint8ArrayIterator:()=>Qo,toUint8ClampedArray:()=>Bp,toUint8ClampedArrayAsyncIterator:()=>Hp,toUint8ClampedArrayIterator:()=>Mp});var hp=new TextDecoder("utf-8"),qn=r=>hp.decode(r),pp=new TextEncoder,Ar=r=>pp.encode(r);var[_e,ay]=(()=>{let r=()=>{throw new Error("BigInt64Array is not available in this environment")};class t{static get BYTES_PER_ELEMENT(){return 8}static of(){throw r()}static from(){throw r()}constructor(){throw r()}}return typeof BigInt64Array<"u"?[BigInt64Array,!0]:[t,!1]})(),[ye,cy]=(()=>{let r=()=>{throw new Error("BigUint64Array is not available in this environment")};class t{static get BYTES_PER_ELEMENT(){return 8}static of(){throw r()}static from(){throw r()}constructor(){throw r()}}return typeof BigUint64Array<"u"?[BigUint64Array,!0]:[t,!1]})();var mp=r=>typeof r=="number",Lc=r=>typeof r=="boolean",Et=r=>typeof r=="function",$t=r=>r!=null&&Object(r)===r,Te=r=>$t(r)&&Et(r.then);var xe=r=>$t(r)&&Et(r[Symbol.iterator]),be=r=>$t(r)&&Et(r[Symbol.asyncIterator]),os=r=>$t(r)&&$t(r.schema);var as=r=>$t(r)&&"done"in r&&"value"in r;var cs=r=>$t(r)&&Et(r.stat)&&mp(r.fd);var ls=r=>$t(r)&&Zn(r.body),us=r=>"_getDOMStream"in r&&"_getNodeStream"in r,kc=r=>$t(r)&&Et(r.abort)&&Et(r.getWriter)&&!us(r),Zn=r=>$t(r)&&Et(r.cancel)&&Et(r.getReader)&&!us(r),Cc=r=>$t(r)&&Et(r.end)&&Et(r.write)&&Lc(r.writable)&&!us(r),ds=r=>$t(r)&&Et(r.read)&&Et(r.pipe)&&Lc(r.readable)&&!us(r),Pc=r=>$t(r)&&Et(r.clear)&&Et(r.bytes)&&Et(r.position)&&Et(r.setPosition)&&Et(r.capacity)&&Et(r.getBufferIdentifier)&&Et(r.createLong);var Zo=typeof SharedArrayBuffer<"u"?SharedArrayBuffer:ArrayBuffer;function _p(r){let t=r[0]?[r[0]]:[],e,n,i,s;for(let o,a,c=0,f=0,p=r.length;++c<p;){if(o=t[f],a=r[c],!o||!a||o.buffer!==a.buffer||a.byteOffset<o.byteOffset){a&&(t[++f]=a);continue}if({byteOffset:e,byteLength:i}=o,{byteOffset:n,byteLength:s}=a,e+i<n||n+s<e){a&&(t[++f]=a);continue}t[f]=new Uint8Array(o.buffer,e,n-e+s)}return t}function gn(r,t,e=0,n=t.byteLength){let i=r.byteLength,s=new Uint8Array(r.buffer,r.byteOffset,i),o=new Uint8Array(t.buffer,t.byteOffset,Math.min(n,i));return s.set(o,e),r}function ae(r,t){let e=_p(r),n=e.reduce((p,y)=>p+y.byteLength,0),i,s,o,a=0,c=-1,f=Math.min(t||Number.POSITIVE_INFINITY,n);for(let p=e.length;++c<p;){if(i=e[c],s=i.subarray(0,Math.min(i.length,f-a)),f<=a+s.length){s.length<i.length?e[c]=i.subarray(s.length):s.length===i.length&&c++,o?gn(o,s,a):o=s;break}gn(o||(o=new Uint8Array(f)),s,a),a+=s.length}return[o||new Uint8Array(0),e.slice(c),n-(o?o.byteLength:0)]}function $(r,t){let e=as(t)?t.value:t;return e instanceof r?r===Uint8Array?new r(e.buffer,e.byteOffset,e.byteLength):e:e?(typeof e=="string"&&(e=Ar(e)),e instanceof ArrayBuffer?new r(e):e instanceof Zo?new r(e):Pc(e)?$(r,e.bytes()):ArrayBuffer.isView(e)?e.byteLength<=0?new r(0):new r(e.buffer,e.byteOffset,e.byteLength/r.BYTES_PER_ELEMENT):r.from(e)):new r(0)}var yp=r=>$(Int8Array,r),bp=r=>$(Int16Array,r),qr=r=>$(Int32Array,r),gp=r=>$(_e,r),L=r=>$(Uint8Array,r),wp=r=>$(Uint16Array,r),vp=r=>$(Uint32Array,r),Sp=r=>$(ye,r),Ip=r=>$(Float32Array,r),Fp=r=>$(Float64Array,r),Bp=r=>$(Uint8ClampedArray,r),qo=r=>(r.next(),r);function*je(r,t){let e=function*(i){yield i},n=typeof t=="string"||ArrayBuffer.isView(t)||t instanceof ArrayBuffer||t instanceof Zo?e(t):xe(t)?t:e(t);return yield*Jr(qo(function*(i){let s=null;do s=i.next(yield $(r,s));while(!s.done)}(n[Symbol.iterator]()))),new r}var Ap=r=>je(Int8Array,r),Tp=r=>je(Int16Array,r),xp=r=>je(Int32Array,r),Qo=r=>je(Uint8Array,r),Dp=r=>je(Uint16Array,r),Ep=r=>je(Uint32Array,r),Op=r=>je(Float32Array,r),Rp=r=>je(Float64Array,r),Mp=r=>je(Uint8ClampedArray,r);function De(r,t){return oe(this,arguments,function*(){if(Te(t))return yield C(yield C(yield*Jr(bn(Ae(De(r,yield C(t)))))));let n=function(o){return oe(this,arguments,function*(){yield yield C(yield C(o))})},i=function(o){return oe(this,arguments,function*(){yield C(yield*Jr(bn(Ae(qo(function*(a){let c=null;do c=a.next(yield c==null?void 0:c.value);while(!c.done)}(o[Symbol.iterator]()))))))})},s=typeof t=="string"||ArrayBuffer.isView(t)||t instanceof ArrayBuffer||t instanceof Zo?n(t):xe(t)?i(t):be(t)?t:n(t);return yield C(yield*Jr(bn(Ae(qo(function(o){return oe(this,arguments,function*(){let a=null;do a=yield C(o.next(yield yield C($(r,a))));while(!a.done)})}(s[Symbol.asyncIterator]())))))),yield C(new r)})}var Up=r=>De(Int8Array,r),Np=r=>De(Int16Array,r),Lp=r=>De(Int32Array,r),ta=r=>De(Uint8Array,r),kp=r=>De(Uint16Array,r),Cp=r=>De(Uint32Array,r),Pp=r=>De(Float32Array,r),Vp=r=>De(Float64Array,r),Hp=r=>De(Uint8ClampedArray,r);function Qn(r,t,e){if(r!==0){e=e.slice(0,t+1);for(let n=-1;++n<=t;)e[n]+=r}return e}function ea(r,t){let e=0,n=r.length;if(n!==t.length)return!1;if(n>0)do if(r[e]!==t[e])return!1;while(++e<n);return!0}var kt={fromIterable(r){return fs(zp(r))},fromAsyncIterable(r){return fs(jp(r))},fromDOMStream(r){return fs(Wp(r))},fromNodeStream(r){return fs($p(r))},toDOMStream(r,t){throw new Error('"toDOMStream" not available in this environment')},toNodeStream(r,t){throw new Error('"toNodeStream" not available in this environment')}},fs=r=>(r.next(),r);function*zp(r){let t,e=!1,n=[],i,s,o,a=0;function c(){return s==="peek"?ae(n,o)[0]:([i,n,a]=ae(n,o),i)}({cmd:s,size:o}=yield null);let f=Qo(r)[Symbol.iterator]();try{do if({done:t,value:i}=Number.isNaN(o-a)?f.next():f.next(o-a),!t&&i.byteLength>0&&(n.push(i),a+=i.byteLength),t||o<=a)do({cmd:s,size:o}=yield c());while(o<a);while(!t)}catch(p){(e=!0)&&typeof f.throw=="function"&&f.throw(p)}finally{e===!1&&typeof f.return=="function"&&f.return(null)}return null}function jp(r){return oe(this,arguments,function*(){let e,n=!1,i=[],s,o,a,c=0;function f(){return o==="peek"?ae(i,a)[0]:([s,i,c]=ae(i,a),s)}({cmd:o,size:a}=yield yield C(null));let p=ta(r)[Symbol.asyncIterator]();try{do if({done:e,value:s}=Number.isNaN(a-c)?yield C(p.next()):yield C(p.next(a-c)),!e&&s.byteLength>0&&(i.push(s),c+=s.byteLength),e||a<=c)do({cmd:o,size:a}=yield yield C(f()));while(a<c);while(!e)}catch(y){(n=!0)&&typeof p.throw=="function"&&(yield C(p.throw(y)))}finally{n===!1&&typeof p.return=="function"&&(yield C(p.return(new Uint8Array(0))))}return yield C(null)})}function Wp(r){return oe(this,arguments,function*(){let e=!1,n=!1,i=[],s,o,a,c=0;function f(){return o==="peek"?ae(i,a)[0]:([s,i,c]=ae(i,a),s)}({cmd:o,size:a}=yield yield C(null));let p=new ia(r);try{do if({done:e,value:s}=Number.isNaN(a-c)?yield C(p.read()):yield C(p.read(a-c)),!e&&s.byteLength>0&&(i.push(L(s)),c+=s.byteLength),e||a<=c)do({cmd:o,size:a}=yield yield C(f()));while(a<c);while(!e)}catch(y){(n=!0)&&(yield C(p.cancel(y)))}finally{n===!1?yield C(p.cancel()):r.locked&&p.releaseLock()}return yield C(null)})}var ia=class{constructor(t){this.source=t,this.reader=null,this.reader=this.source.getReader(),this.reader.closed.catch(()=>{})}get closed(){return this.reader?this.reader.closed.catch(()=>{}):Promise.resolve()}releaseLock(){this.reader&&this.reader.releaseLock(),this.reader=null}cancel(t){return F(this,void 0,void 0,function*(){let{reader:e,source:n}=this;e&&(yield e.cancel(t).catch(()=>{})),n&&n.locked&&this.releaseLock()})}read(t){return F(this,void 0,void 0,function*(){if(t===0)return{done:this.reader==null,value:new Uint8Array(0)};let e=yield this.reader.read();return!e.done&&(e.value=L(e)),e})}},na=(r,t)=>{let e=i=>n([t,i]),n;return[t,e,new Promise(i=>(n=i)&&r.once(t,e))]};function $p(r){return oe(this,arguments,function*(){let e=[],n="error",i=!1,s=null,o,a,c=0,f=[],p;function y(){return o==="peek"?ae(f,a)[0]:([p,f,c]=ae(f,a),p)}if({cmd:o,size:a}=yield yield C(null),r.isTTY)return yield yield C(new Uint8Array(0)),yield C(null);try{e[0]=na(r,"end"),e[1]=na(r,"error");do{if(e[2]=na(r,"readable"),[n,s]=yield C(Promise.race(e.map(B=>B[2]))),n==="error")break;if((i=n==="end")||(Number.isFinite(a-c)?(p=L(r.read(a-c)),p.byteLength<a-c&&(p=L(r.read()))):p=L(r.read()),p.byteLength>0&&(f.push(p),c+=p.byteLength)),i||a<=c)do({cmd:o,size:a}=yield yield C(y()));while(a<c)}while(!i)}finally{yield C(w(e,n==="error"?s:null))}return yield C(null);function w(B,Q){return p=f=null,new Promise((Bt,xt)=>{for(let[Rt,Kt]of B)r.off(Rt,Kt);try{let Rt=r.destroy;Rt&&Rt.call(r,Q),Q=void 0}catch(Rt){Q=Rt||Q}finally{Q!=null?xt(Q):Bt()}})}})}var Ut;(function(r){r[r.V1=0]="V1",r[r.V2=1]="V2",r[r.V3=2]="V3",r[r.V4=3]="V4",r[r.V5=4]="V5"})(Ut||(Ut={}));var wt;(function(r){r[r.Sparse=0]="Sparse",r[r.Dense=1]="Dense"})(wt||(wt={}));var mt;(function(r){r[r.HALF=0]="HALF",r[r.SINGLE=1]="SINGLE",r[r.DOUBLE=2]="DOUBLE"})(mt||(mt={}));var Ct;(function(r){r[r.DAY=0]="DAY",r[r.MILLISECOND=1]="MILLISECOND"})(Ct||(Ct={}));var G;(function(r){r[r.SECOND=0]="SECOND",r[r.MILLISECOND=1]="MILLISECOND",r[r.MICROSECOND=2]="MICROSECOND",r[r.NANOSECOND=3]="NANOSECOND"})(G||(G={}));var Yt;(function(r){r[r.YEAR_MONTH=0]="YEAR_MONTH",r[r.DAY_TIME=1]="DAY_TIME",r[r.MONTH_DAY_NANO=2]="MONTH_DAY_NANO"})(Yt||(Yt={}));var tt;(function(r){r[r.NONE=0]="NONE",r[r.Schema=1]="Schema",r[r.DictionaryBatch=2]="DictionaryBatch",r[r.RecordBatch=3]="RecordBatch",r[r.Tensor=4]="Tensor",r[r.SparseTensor=5]="SparseTensor"})(tt||(tt={}));var h;(function(r){r[r.NONE=0]="NONE",r[r.Null=1]="Null",r[r.Int=2]="Int",r[r.Float=3]="Float",r[r.Binary=4]="Binary",r[r.Utf8=5]="Utf8",r[r.Bool=6]="Bool",r[r.Decimal=7]="Decimal",r[r.Date=8]="Date",r[r.Time=9]="Time",r[r.Timestamp=10]="Timestamp",r[r.Interval=11]="Interval",r[r.List=12]="List",r[r.Struct=13]="Struct",r[r.Union=14]="Union",r[r.FixedSizeBinary=15]="FixedSizeBinary",r[r.FixedSizeList=16]="FixedSizeList",r[r.Map=17]="Map",r[r.Dictionary=-1]="Dictionary",r[r.Int8=-2]="Int8",r[r.Int16=-3]="Int16",r[r.Int32=-4]="Int32",r[r.Int64=-5]="Int64",r[r.Uint8=-6]="Uint8",r[r.Uint16=-7]="Uint16",r[r.Uint32=-8]="Uint32",r[r.Uint64=-9]="Uint64",r[r.Float16=-10]="Float16",r[r.Float32=-11]="Float32",r[r.Float64=-12]="Float64",r[r.DateDay=-13]="DateDay",r[r.DateMillisecond=-14]="DateMillisecond",r[r.TimestampSecond=-15]="TimestampSecond",r[r.TimestampMillisecond=-16]="TimestampMillisecond",r[r.TimestampMicrosecond=-17]="TimestampMicrosecond",r[r.TimestampNanosecond=-18]="TimestampNanosecond",r[r.TimeSecond=-19]="TimeSecond",r[r.TimeMillisecond=-20]="TimeMillisecond",r[r.TimeMicrosecond=-21]="TimeMicrosecond",r[r.TimeNanosecond=-22]="TimeNanosecond",r[r.DenseUnion=-23]="DenseUnion",r[r.SparseUnion=-24]="SparseUnion",r[r.IntervalDayTime=-25]="IntervalDayTime",r[r.IntervalYearMonth=-26]="IntervalYearMonth"})(h||(h={}));var ge;(function(r){r[r.OFFSET=0]="OFFSET",r[r.DATA=1]="DATA",r[r.VALIDITY=2]="VALIDITY",r[r.TYPE=3]="TYPE"})(ge||(ge={}));var wa={};Kr(wa,{clampIndex:()=>Lm,clampRange:()=>ii,createElementComparator:()=>Dr});var Yp=void 0;function We(r){if(r===null)return"null";if(r===Yp)return"undefined";switch(typeof r){case"number":return"".concat(r);case"bigint":return"".concat(r);case"string":return'"'.concat(r,'"')}return typeof r[Symbol.toPrimitive]=="function"?r[Symbol.toPrimitive]("string"):ArrayBuffer.isView(r)?r instanceof _e||r instanceof ye?"[".concat([...r].map(t=>We(t)),"]"):"[".concat(r,"]"):ArrayBuffer.isView(r)?"[".concat(r,"]"):JSON.stringify(r,(t,e)=>typeof e=="bigint"?"".concat(e):e)}var sa={};Kr(sa,{BN:()=>ri,bignumToBigInt:()=>zc,bignumToString:()=>ei,isArrowBigNumSymbol:()=>Vc});var Vc=Symbol.for("isArrowBigNum");function Ee(r,...t){return t.length===0?Object.setPrototypeOf($(this.TypedArray,r),this.constructor.prototype):Object.setPrototypeOf(new this.TypedArray(r,...t),this.constructor.prototype)}Ee.prototype[Vc]=!0;Ee.prototype.toJSON=function(){return'"'.concat(ei(this),'"')};Ee.prototype.valueOf=function(){return Hc(this)};Ee.prototype.toString=function(){return ei(this)};Ee.prototype[Symbol.toPrimitive]=function(r="default"){switch(r){case"number":return Hc(this);case"string":return ei(this);case"default":return zc(this)}return ei(this)};function wn(...r){return Ee.apply(this,r)}function vn(...r){return Ee.apply(this,r)}function ti(...r){return Ee.apply(this,r)}Object.setPrototypeOf(wn.prototype,Object.create(Int32Array.prototype));Object.setPrototypeOf(vn.prototype,Object.create(Uint32Array.prototype));Object.setPrototypeOf(ti.prototype,Object.create(Uint32Array.prototype));Object.assign(wn.prototype,Ee.prototype,{constructor:wn,signed:!0,TypedArray:Int32Array,BigIntArray:_e});Object.assign(vn.prototype,Ee.prototype,{constructor:vn,signed:!1,TypedArray:Uint32Array,BigIntArray:ye});Object.assign(ti.prototype,Ee.prototype,{constructor:ti,signed:!0,TypedArray:Uint32Array,BigIntArray:ye});function Hc(r){let{buffer:t,byteOffset:e,length:n,signed:i}=r,s=new ye(t,e,n),o=i&&s[s.length-1]&BigInt(1)<<BigInt(63),a=BigInt(o?1:0),c=BigInt(0);if(o){for(let f of s)a+=~f*(BigInt(1)<<BigInt(32)*c++);a*=BigInt(-1)}else for(let f of s)a+=f*(BigInt(1)<<BigInt(32)*c++);return a}var ei=r=>r.byteLength===8?"".concat(new r.BigIntArray(r.buffer,r.byteOffset,1)[0]):jc(r),zc=r=>r.byteLength===8?new r.BigIntArray(r.buffer,r.byteOffset,1)[0]:jc(r);function jc(r){let t="",e=new Uint32Array(2),n=new Uint16Array(r.buffer,r.byteOffset,r.byteLength/2),i=new Uint32Array((n=new Uint16Array(n).reverse()).buffer),s=-1,o=n.length-1;do{for(e[0]=n[s=0];s<o;)n[s++]=e[1]=e[0]/10,e[0]=(e[0]-e[1]*10<<16)+n[s];n[s]=e[1]=e[0]/10,e[0]=e[0]-e[1]*10,t="".concat(e[0]).concat(t)}while(i[0]||i[1]||i[2]||i[3]);return t!=null?t:"0"}var ri=class r{static new(t,e){switch(e){case!0:return new wn(t);case!1:return new vn(t)}switch(t.constructor){case Int8Array:case Int16Array:case Int32Array:case _e:return new wn(t)}return t.byteLength===16?new ti(t):new vn(t)}static signed(t){return new wn(t)}static unsigned(t){return new vn(t)}static decimal(t){return new ti(t)}constructor(t,e){return r.new(t,e)}};function Zt(r){if(typeof r=="bigint"&&(r<Number.MIN_SAFE_INTEGER||r>Number.MAX_SAFE_INTEGER))throw new TypeError("".concat(r," is not safe to convert to a number."));return Number(r)}var Wc,$c,Yc,Xc,Gc,Kc,Jc,qc,Zc,Qc,tl,el,rl,nl,il,sl,ol,al,cl,x=class r{static isNull(t){return(t==null?void 0:t.typeId)===h.Null}static isInt(t){return(t==null?void 0:t.typeId)===h.Int}static isFloat(t){return(t==null?void 0:t.typeId)===h.Float}static isBinary(t){return(t==null?void 0:t.typeId)===h.Binary}static isUtf8(t){return(t==null?void 0:t.typeId)===h.Utf8}static isBool(t){return(t==null?void 0:t.typeId)===h.Bool}static isDecimal(t){return(t==null?void 0:t.typeId)===h.Decimal}static isDate(t){return(t==null?void 0:t.typeId)===h.Date}static isTime(t){return(t==null?void 0:t.typeId)===h.Time}static isTimestamp(t){return(t==null?void 0:t.typeId)===h.Timestamp}static isInterval(t){return(t==null?void 0:t.typeId)===h.Interval}static isList(t){return(t==null?void 0:t.typeId)===h.List}static isStruct(t){return(t==null?void 0:t.typeId)===h.Struct}static isUnion(t){return(t==null?void 0:t.typeId)===h.Union}static isFixedSizeBinary(t){return(t==null?void 0:t.typeId)===h.FixedSizeBinary}static isFixedSizeList(t){return(t==null?void 0:t.typeId)===h.FixedSizeList}static isMap(t){return(t==null?void 0:t.typeId)===h.Map}static isDictionary(t){return(t==null?void 0:t.typeId)===h.Dictionary}static isDenseUnion(t){return r.isUnion(t)&&t.mode===wt.Dense}static isSparseUnion(t){return r.isUnion(t)&&t.mode===wt.Sparse}get typeId(){return h.NONE}};Wc=Symbol.toStringTag;x[Wc]=(r=>(r.children=null,r.ArrayType=Array,r[Symbol.toStringTag]="DataType"))(x.prototype);var Xt=class extends x{toString(){return"Null"}get typeId(){return h.Null}};$c=Symbol.toStringTag;Xt[$c]=(r=>r[Symbol.toStringTag]="Null")(Xt.prototype);var At=class extends x{constructor(t,e){super(),this.isSigned=t,this.bitWidth=e}get typeId(){return h.Int}get ArrayType(){switch(this.bitWidth){case 8:return this.isSigned?Int8Array:Uint8Array;case 16:return this.isSigned?Int16Array:Uint16Array;case 32:return this.isSigned?Int32Array:Uint32Array;case 64:return this.isSigned?_e:ye}throw new Error("Unrecognized ".concat(this[Symbol.toStringTag]," type"))}toString(){return"".concat(this.isSigned?"I":"Ui","nt").concat(this.bitWidth)}};Yc=Symbol.toStringTag;At[Yc]=(r=>(r.isSigned=null,r.bitWidth=null,r[Symbol.toStringTag]="Int"))(At.prototype);var hs=class extends At{constructor(){super(!0,8)}get ArrayType(){return Int8Array}},ps=class extends At{constructor(){super(!0,16)}get ArrayType(){return Int16Array}},$e=class extends At{constructor(){super(!0,32)}get ArrayType(){return Int32Array}},ms=class extends At{constructor(){super(!0,64)}get ArrayType(){return _e}},_s=class extends At{constructor(){super(!1,8)}get ArrayType(){return Uint8Array}},ys=class extends At{constructor(){super(!1,16)}get ArrayType(){return Uint16Array}},bs=class extends At{constructor(){super(!1,32)}get ArrayType(){return Uint32Array}},gs=class extends At{constructor(){super(!1,64)}get ArrayType(){return ye}};Object.defineProperty(hs.prototype,"ArrayType",{value:Int8Array});Object.defineProperty(ps.prototype,"ArrayType",{value:Int16Array});Object.defineProperty($e.prototype,"ArrayType",{value:Int32Array});Object.defineProperty(ms.prototype,"ArrayType",{value:_e});Object.defineProperty(_s.prototype,"ArrayType",{value:Uint8Array});Object.defineProperty(ys.prototype,"ArrayType",{value:Uint16Array});Object.defineProperty(bs.prototype,"ArrayType",{value:Uint32Array});Object.defineProperty(gs.prototype,"ArrayType",{value:ye});var Qt=class extends x{constructor(t){super(),this.precision=t}get typeId(){return h.Float}get ArrayType(){switch(this.precision){case mt.HALF:return Uint16Array;case mt.SINGLE:return Float32Array;case mt.DOUBLE:return Float64Array}throw new Error("Unrecognized ".concat(this[Symbol.toStringTag]," type"))}toString(){return"Float".concat(this.precision<<5||16)}};Xc=Symbol.toStringTag;Qt[Xc]=(r=>(r.precision=null,r[Symbol.toStringTag]="Float"))(Qt.prototype);var ws=class extends Qt{constructor(){super(mt.HALF)}},vs=class extends Qt{constructor(){super(mt.SINGLE)}},Ss=class extends Qt{constructor(){super(mt.DOUBLE)}};Object.defineProperty(ws.prototype,"ArrayType",{value:Uint16Array});Object.defineProperty(vs.prototype,"ArrayType",{value:Float32Array});Object.defineProperty(Ss.prototype,"ArrayType",{value:Float64Array});var sr=class extends x{constructor(){super()}get typeId(){return h.Binary}toString(){return"Binary"}};Gc=Symbol.toStringTag;sr[Gc]=(r=>(r.ArrayType=Uint8Array,r[Symbol.toStringTag]="Binary"))(sr.prototype);var or=class extends x{constructor(){super()}get typeId(){return h.Utf8}toString(){return"Utf8"}};Kc=Symbol.toStringTag;or[Kc]=(r=>(r.ArrayType=Uint8Array,r[Symbol.toStringTag]="Utf8"))(or.prototype);var ar=class extends x{constructor(){super()}get typeId(){return h.Bool}toString(){return"Bool"}};Jc=Symbol.toStringTag;ar[Jc]=(r=>(r.ArrayType=Uint8Array,r[Symbol.toStringTag]="Bool"))(ar.prototype);var cr=class extends x{constructor(t,e,n=128){super(),this.scale=t,this.precision=e,this.bitWidth=n}get typeId(){return h.Decimal}toString(){return"Decimal[".concat(this.precision,"e").concat(this.scale>0?"+":"").concat(this.scale,"]")}};qc=Symbol.toStringTag;cr[qc]=(r=>(r.scale=null,r.precision=null,r.ArrayType=Uint32Array,r[Symbol.toStringTag]="Decimal"))(cr.prototype);var lr=class extends x{constructor(t){super(),this.unit=t}get typeId(){return h.Date}toString(){return"Date".concat((this.unit+1)*32,"<").concat(Ct[this.unit],">")}};Zc=Symbol.toStringTag;lr[Zc]=(r=>(r.unit=null,r.ArrayType=Int32Array,r[Symbol.toStringTag]="Date"))(lr.prototype);var Oe=class extends x{constructor(t,e){super(),this.unit=t,this.bitWidth=e}get typeId(){return h.Time}toString(){return"Time".concat(this.bitWidth,"<").concat(G[this.unit],">")}get ArrayType(){switch(this.bitWidth){case 32:return Int32Array;case 64:return _e}throw new Error("Unrecognized ".concat(this[Symbol.toStringTag]," type"))}};Qc=Symbol.toStringTag;Oe[Qc]=(r=>(r.unit=null,r.bitWidth=null,r[Symbol.toStringTag]="Time"))(Oe.prototype);var ur=class extends x{constructor(t,e){super(),this.unit=t,this.timezone=e}get typeId(){return h.Timestamp}toString(){return"Timestamp<".concat(G[this.unit]).concat(this.timezone?", ".concat(this.timezone):"",">")}};tl=Symbol.toStringTag;ur[tl]=(r=>(r.unit=null,r.timezone=null,r.ArrayType=Int32Array,r[Symbol.toStringTag]="Timestamp"))(ur.prototype);var dr=class extends x{constructor(t){super(),this.unit=t}get typeId(){return h.Interval}toString(){return"Interval<".concat(Yt[this.unit],">")}};el=Symbol.toStringTag;dr[el]=(r=>(r.unit=null,r.ArrayType=Int32Array,r[Symbol.toStringTag]="Interval"))(dr.prototype);var Re=class extends x{constructor(t){super(),this.children=[t]}get typeId(){return h.List}toString(){return"List<".concat(this.valueType,">")}get valueType(){return this.children[0].type}get valueField(){return this.children[0]}get ArrayType(){return this.valueType.ArrayType}};rl=Symbol.toStringTag;Re[rl]=(r=>(r.children=null,r[Symbol.toStringTag]="List"))(Re.prototype);var ft=class extends x{constructor(t){super(),this.children=t}get typeId(){return h.Struct}toString(){return"Struct<{".concat(this.children.map(t=>"".concat(t.name,":").concat(t.type)).join(", "),"}>")}};nl=Symbol.toStringTag;ft[nl]=(r=>(r.children=null,r[Symbol.toStringTag]="Struct"))(ft.prototype);var Me=class extends x{constructor(t,e,n){super(),this.mode=t,this.children=n,this.typeIds=e=Int32Array.from(e),this.typeIdToChildIndex=e.reduce((i,s,o)=>(i[s]=o)&&i||i,Object.create(null))}get typeId(){return h.Union}toString(){return"".concat(this[Symbol.toStringTag],"<").concat(this.children.map(t=>"".concat(t.type)).join(" | "),">")}};il=Symbol.toStringTag;Me[il]=(r=>(r.mode=null,r.typeIds=null,r.children=null,r.typeIdToChildIndex=null,r.ArrayType=Int8Array,r[Symbol.toStringTag]="Union"))(Me.prototype);var fr=class extends x{constructor(t){super(),this.byteWidth=t}get typeId(){return h.FixedSizeBinary}toString(){return"FixedSizeBinary[".concat(this.byteWidth,"]")}};sl=Symbol.toStringTag;fr[sl]=(r=>(r.byteWidth=null,r.ArrayType=Uint8Array,r[Symbol.toStringTag]="FixedSizeBinary"))(fr.prototype);var Ue=class extends x{constructor(t,e){super(),this.listSize=t,this.children=[e]}get typeId(){return h.FixedSizeList}get valueType(){return this.children[0].type}get valueField(){return this.children[0]}get ArrayType(){return this.valueType.ArrayType}toString(){return"FixedSizeList[".concat(this.listSize,"]<").concat(this.valueType,">")}};ol=Symbol.toStringTag;Ue[ol]=(r=>(r.children=null,r.listSize=null,r[Symbol.toStringTag]="FixedSizeList"))(Ue.prototype);var Ne=class extends x{constructor(t,e=!1){super(),this.children=[t],this.keysSorted=e}get typeId(){return h.Map}get keyType(){return this.children[0].type.children[0].type}get valueType(){return this.children[0].type.children[1].type}get childType(){return this.children[0].type}toString(){return"Map<{".concat(this.children[0].type.children.map(t=>"".concat(t.name,":").concat(t.type)).join(", "),"}>")}};al=Symbol.toStringTag;Ne[al]=(r=>(r.children=null,r.keysSorted=null,r[Symbol.toStringTag]="Map_"))(Ne.prototype);var Xp=(r=>()=>++r)(-1),ce=class extends x{constructor(t,e,n,i){super(),this.indices=e,this.dictionary=t,this.isOrdered=i||!1,this.id=n==null?Xp():Zt(n)}get typeId(){return h.Dictionary}get children(){return this.dictionary.children}get valueType(){return this.dictionary}get ArrayType(){return this.dictionary.ArrayType}toString(){return"Dictionary<".concat(this.indices,", ").concat(this.dictionary,">")}};cl=Symbol.toStringTag;ce[cl]=(r=>(r.id=null,r.indices=null,r.isOrdered=null,r.dictionary=null,r[Symbol.toStringTag]="Dictionary"))(ce.prototype);function le(r){let t=r;switch(r.typeId){case h.Decimal:return r.bitWidth/32;case h.Timestamp:return 2;case h.Date:return 1+t.unit;case h.Interval:return 1+t.unit;case h.FixedSizeList:return t.listSize;case h.FixedSizeBinary:return t.byteWidth;default:return 1}}var D=class{visitMany(t,...e){return t.map((n,i)=>this.visit(n,...e.map(s=>s[i])))}visit(...t){return this.getVisitFn(t[0],!1).apply(this,t)}getVisitFn(t,e=!0){return Gp(this,t,e)}getVisitFnByTypeId(t,e=!0){return Sn(this,t,e)}visitNull(t,...e){return null}visitBool(t,...e){return null}visitInt(t,...e){return null}visitFloat(t,...e){return null}visitUtf8(t,...e){return null}visitBinary(t,...e){return null}visitFixedSizeBinary(t,...e){return null}visitDate(t,...e){return null}visitTimestamp(t,...e){return null}visitTime(t,...e){return null}visitDecimal(t,...e){return null}visitList(t,...e){return null}visitStruct(t,...e){return null}visitUnion(t,...e){return null}visitDictionary(t,...e){return null}visitInterval(t,...e){return null}visitFixedSizeList(t,...e){return null}visitMap(t,...e){return null}};function Gp(r,t,e=!0){return typeof t=="number"?Sn(r,t,e):typeof t=="string"&&t in h?Sn(r,h[t],e):t&&t instanceof x?Sn(r,ll(t),e):t!=null&&t.type&&t.type instanceof x?Sn(r,ll(t.type),e):Sn(r,h.NONE,e)}function Sn(r,t,e=!0){let n=null;switch(t){case h.Null:n=r.visitNull;break;case h.Bool:n=r.visitBool;break;case h.Int:n=r.visitInt;break;case h.Int8:n=r.visitInt8||r.visitInt;break;case h.Int16:n=r.visitInt16||r.visitInt;break;case h.Int32:n=r.visitInt32||r.visitInt;break;case h.Int64:n=r.visitInt64||r.visitInt;break;case h.Uint8:n=r.visitUint8||r.visitInt;break;case h.Uint16:n=r.visitUint16||r.visitInt;break;case h.Uint32:n=r.visitUint32||r.visitInt;break;case h.Uint64:n=r.visitUint64||r.visitInt;break;case h.Float:n=r.visitFloat;break;case h.Float16:n=r.visitFloat16||r.visitFloat;break;case h.Float32:n=r.visitFloat32||r.visitFloat;break;case h.Float64:n=r.visitFloat64||r.visitFloat;break;case h.Utf8:n=r.visitUtf8;break;case h.Binary:n=r.visitBinary;break;case h.FixedSizeBinary:n=r.visitFixedSizeBinary;break;case h.Date:n=r.visitDate;break;case h.DateDay:n=r.visitDateDay||r.visitDate;break;case h.DateMillisecond:n=r.visitDateMillisecond||r.visitDate;break;case h.Timestamp:n=r.visitTimestamp;break;case h.TimestampSecond:n=r.visitTimestampSecond||r.visitTimestamp;break;case h.TimestampMillisecond:n=r.visitTimestampMillisecond||r.visitTimestamp;break;case h.TimestampMicrosecond:n=r.visitTimestampMicrosecond||r.visitTimestamp;break;case h.TimestampNanosecond:n=r.visitTimestampNanosecond||r.visitTimestamp;break;case h.Time:n=r.visitTime;break;case h.TimeSecond:n=r.visitTimeSecond||r.visitTime;break;case h.TimeMillisecond:n=r.visitTimeMillisecond||r.visitTime;break;case h.TimeMicrosecond:n=r.visitTimeMicrosecond||r.visitTime;break;case h.TimeNanosecond:n=r.visitTimeNanosecond||r.visitTime;break;case h.Decimal:n=r.visitDecimal;break;case h.List:n=r.visitList;break;case h.Struct:n=r.visitStruct;break;case h.Union:n=r.visitUnion;break;case h.DenseUnion:n=r.visitDenseUnion||r.visitUnion;break;case h.SparseUnion:n=r.visitSparseUnion||r.visitUnion;break;case h.Dictionary:n=r.visitDictionary;break;case h.Interval:n=r.visitInterval;break;case h.IntervalDayTime:n=r.visitIntervalDayTime||r.visitInterval;break;case h.IntervalYearMonth:n=r.visitIntervalYearMonth||r.visitInterval;break;case h.FixedSizeList:n=r.visitFixedSizeList;break;case h.Map:n=r.visitMap;break}if(typeof n=="function")return n;if(!e)return()=>null;throw new Error("Unrecognized type '".concat(h[t],"'"))}function ll(r){switch(r.typeId){case h.Null:return h.Null;case h.Int:{let{bitWidth:t,isSigned:e}=r;switch(t){case 8:return e?h.Int8:h.Uint8;case 16:return e?h.Int16:h.Uint16;case 32:return e?h.Int32:h.Uint32;case 64:return e?h.Int64:h.Uint64}return h.Int}case h.Float:switch(r.precision){case mt.HALF:return h.Float16;case mt.SINGLE:return h.Float32;case mt.DOUBLE:return h.Float64}return h.Float;case h.Binary:return h.Binary;case h.Utf8:return h.Utf8;case h.Bool:return h.Bool;case h.Decimal:return h.Decimal;case h.Time:switch(r.unit){case G.SECOND:return h.TimeSecond;case G.MILLISECOND:return h.TimeMillisecond;case G.MICROSECOND:return h.TimeMicrosecond;case G.NANOSECOND:return h.TimeNanosecond}return h.Time;case h.Timestamp:switch(r.unit){case G.SECOND:return h.TimestampSecond;case G.MILLISECOND:return h.TimestampMillisecond;case G.MICROSECOND:return h.TimestampMicrosecond;case G.NANOSECOND:return h.TimestampNanosecond}return h.Timestamp;case h.Date:switch(r.unit){case Ct.DAY:return h.DateDay;case Ct.MILLISECOND:return h.DateMillisecond}return h.Date;case h.Interval:switch(r.unit){case Yt.DAY_TIME:return h.IntervalDayTime;case Yt.YEAR_MONTH:return h.IntervalYearMonth}return h.Interval;case h.Map:return h.Map;case h.List:return h.List;case h.Struct:return h.Struct;case h.Union:switch(r.mode){case wt.Dense:return h.DenseUnion;case wt.Sparse:return h.SparseUnion}return h.Union;case h.FixedSizeBinary:return h.FixedSizeBinary;case h.FixedSizeList:return h.FixedSizeList;case h.Dictionary:return h.Dictionary}throw new Error("Unrecognized type '".concat(h[r.typeId],"'"))}D.prototype.visitInt8=null;D.prototype.visitInt16=null;D.prototype.visitInt32=null;D.prototype.visitInt64=null;D.prototype.visitUint8=null;D.prototype.visitUint16=null;D.prototype.visitUint32=null;D.prototype.visitUint64=null;D.prototype.visitFloat16=null;D.prototype.visitFloat32=null;D.prototype.visitFloat64=null;D.prototype.visitDateDay=null;D.prototype.visitDateMillisecond=null;D.prototype.visitTimestampSecond=null;D.prototype.visitTimestampMillisecond=null;D.prototype.visitTimestampMicrosecond=null;D.prototype.visitTimestampNanosecond=null;D.prototype.visitTimeSecond=null;D.prototype.visitTimeMillisecond=null;D.prototype.visitTimeMicrosecond=null;D.prototype.visitTimeNanosecond=null;D.prototype.visitDenseUnion=null;D.prototype.visitSparseUnion=null;D.prototype.visitIntervalDayTime=null;D.prototype.visitIntervalYearMonth=null;var oa={};Kr(oa,{float64ToUint16:()=>ni,uint16ToFloat64:()=>Is});var ul=new Float64Array(1),In=new Uint32Array(ul.buffer);function Is(r){let t=(r&31744)>>10,e=(r&1023)/1024,n=Math.pow(-1,(r&32768)>>15);switch(t){case 31:return n*(e?Number.NaN:1/0);case 0:return n*(e?6103515625e-14*e:0)}return n*Math.pow(2,t-15)*(1+e)}function ni(r){if(r!==r)return 32256;ul[0]=r;let t=(In[1]&2147483648)>>16&65535,e=In[1]&2146435072,n=0;return e>=1089470464?In[0]>0?e=31744:(e=(e&2080374784)>>16,n=(In[1]&1048575)>>10):e<=1056964608?(n=1048576+(In[1]&1048575),n=1048576+(n<<(e>>20)-998)>>21,e=0):(e=e-1056964608>>10,n=(In[1]&1048575)+512>>10),t|e|n&65535}var k=class extends D{};function W(r){return(t,e,n)=>{if(t.setValid(e,n!=null))return r(t,e,n)}}var Kp=(r,t,e)=>{r[t]=Math.trunc(e/864e5)},aa=(r,t,e)=>{r[t]=Math.trunc(e%4294967296),r[t+1]=Math.trunc(e/4294967296)},Jp=(r,t,e)=>{r[t]=Math.trunc(e*1e3%4294967296),r[t+1]=Math.trunc(e*1e3/4294967296)},qp=(r,t,e)=>{r[t]=Math.trunc(e*1e6%4294967296),r[t+1]=Math.trunc(e*1e6/4294967296)},dl=(r,t,e,n)=>{if(e+1<t.length){let{[e]:i,[e+1]:s}=t;r.set(n.subarray(0,s-i),i)}},Zp=({offset:r,values:t},e,n)=>{let i=r+e;n?t[i>>3]|=1<<i%8:t[i>>3]&=~(1<<i%8)},hr=({values:r},t,e)=>{r[t]=e},ca=({values:r},t,e)=>{r[t]=e},fl=({values:r},t,e)=>{r[t]=ni(e)},Qp=(r,t,e)=>{switch(r.type.precision){case mt.HALF:return fl(r,t,e);case mt.SINGLE:case mt.DOUBLE:return ca(r,t,e)}},Fs=({values:r},t,e)=>{Kp(r,t,e.valueOf())},Bs=({values:r},t,e)=>{aa(r,t*2,e.valueOf())},la=({stride:r,values:t},e,n)=>{t.set(n.subarray(0,r),r*e)},tm=({values:r,valueOffsets:t},e,n)=>dl(r,t,e,n),em=({values:r,valueOffsets:t},e,n)=>{dl(r,t,e,Ar(n))},ua=(r,t,e)=>{r.type.unit===Ct.DAY?Fs(r,t,e):Bs(r,t,e)},As=({values:r},t,e)=>aa(r,t*2,e/1e3),Ts=({values:r},t,e)=>aa(r,t*2,e),xs=({values:r},t,e)=>Jp(r,t*2,e),Ds=({values:r},t,e)=>qp(r,t*2,e),da=(r,t,e)=>{switch(r.type.unit){case G.SECOND:return As(r,t,e);case G.MILLISECOND:return Ts(r,t,e);case G.MICROSECOND:return xs(r,t,e);case G.NANOSECOND:return Ds(r,t,e)}},Es=({values:r},t,e)=>{r[t]=e},Os=({values:r},t,e)=>{r[t]=e},Rs=({values:r},t,e)=>{r[t]=e},Ms=({values:r},t,e)=>{r[t]=e},fa=(r,t,e)=>{switch(r.type.unit){case G.SECOND:return Es(r,t,e);case G.MILLISECOND:return Os(r,t,e);case G.MICROSECOND:return Rs(r,t,e);case G.NANOSECOND:return Ms(r,t,e)}},ha=({values:r,stride:t},e,n)=>{r.set(n.subarray(0,t),t*e)},rm=(r,t,e)=>{let n=r.children[0],i=r.valueOffsets,s=Pt.getVisitFn(n);if(Array.isArray(e))for(let o=-1,a=i[t],c=i[t+1];a<c;)s(n,a++,e[++o]);else for(let o=-1,a=i[t],c=i[t+1];a<c;)s(n,a++,e.get(++o))},nm=(r,t,e)=>{let n=r.children[0],{valueOffsets:i}=r,s=Pt.getVisitFn(n),{[t]:o,[t+1]:a}=i,c=e instanceof Map?e.entries():Object.entries(e);for(let f of c)if(s(n,o,f),++o>=a)break},im=(r,t)=>(e,n,i,s)=>n&&e(n,r,t[s]),sm=(r,t)=>(e,n,i,s)=>n&&e(n,r,t.get(s)),om=(r,t)=>(e,n,i,s)=>n&&e(n,r,t.get(i.name)),am=(r,t)=>(e,n,i,s)=>n&&e(n,r,t[i.name]),cm=(r,t,e)=>{let n=r.type.children.map(s=>Pt.getVisitFn(s.type)),i=e instanceof Map?om(t,e):e instanceof J?sm(t,e):Array.isArray(e)?im(t,e):am(t,e);r.type.children.forEach((s,o)=>i(n[o],r.children[o],s,o))},lm=(r,t,e)=>{r.type.mode===wt.Dense?hl(r,t,e):pl(r,t,e)},hl=(r,t,e)=>{let n=r.type.typeIdToChildIndex[r.typeIds[t]],i=r.children[n];Pt.visit(i,r.valueOffsets[t],e)},pl=(r,t,e)=>{let n=r.type.typeIdToChildIndex[r.typeIds[t]],i=r.children[n];Pt.visit(i,t,e)},um=(r,t,e)=>{var n;(n=r.dictionary)===null||n===void 0||n.set(r.values[t],e)},pa=(r,t,e)=>{r.type.unit===Yt.DAY_TIME?Us(r,t,e):Ns(r,t,e)},Us=({values:r},t,e)=>{r.set(e.subarray(0,2),2*t)},Ns=({values:r},t,e)=>{r[t]=e[0]*12+e[1]%12},dm=(r,t,e)=>{let{stride:n}=r,i=r.children[0],s=Pt.getVisitFn(i);if(Array.isArray(e))for(let o=-1,a=t*n;++o<n;)s(i,a+o,e[o]);else for(let o=-1,a=t*n;++o<n;)s(i,a+o,e.get(o))};k.prototype.visitBool=W(Zp);k.prototype.visitInt=W(hr);k.prototype.visitInt8=W(hr);k.prototype.visitInt16=W(hr);k.prototype.visitInt32=W(hr);k.prototype.visitInt64=W(hr);k.prototype.visitUint8=W(hr);k.prototype.visitUint16=W(hr);k.prototype.visitUint32=W(hr);k.prototype.visitUint64=W(hr);k.prototype.visitFloat=W(Qp);k.prototype.visitFloat16=W(fl);k.prototype.visitFloat32=W(ca);k.prototype.visitFloat64=W(ca);k.prototype.visitUtf8=W(em);k.prototype.visitBinary=W(tm);k.prototype.visitFixedSizeBinary=W(la);k.prototype.visitDate=W(ua);k.prototype.visitDateDay=W(Fs);k.prototype.visitDateMillisecond=W(Bs);k.prototype.visitTimestamp=W(da);k.prototype.visitTimestampSecond=W(As);k.prototype.visitTimestampMillisecond=W(Ts);k.prototype.visitTimestampMicrosecond=W(xs);k.prototype.visitTimestampNanosecond=W(Ds);k.prototype.visitTime=W(fa);k.prototype.visitTimeSecond=W(Es);k.prototype.visitTimeMillisecond=W(Os);k.prototype.visitTimeMicrosecond=W(Rs);k.prototype.visitTimeNanosecond=W(Ms);k.prototype.visitDecimal=W(ha);k.prototype.visitList=W(rm);k.prototype.visitStruct=W(cm);k.prototype.visitUnion=W(lm);k.prototype.visitDenseUnion=W(hl);k.prototype.visitSparseUnion=W(pl);k.prototype.visitDictionary=W(um);k.prototype.visitInterval=W(pa);k.prototype.visitIntervalDayTime=W(Us);k.prototype.visitIntervalYearMonth=W(Ns);k.prototype.visitFixedSizeList=W(dm);k.prototype.visitMap=W(nm);var Pt=new k;var Le=Symbol.for("parent"),Fn=Symbol.for("rowIndex"),Tr=class{constructor(t,e){return this[Le]=t,this[Fn]=e,new Proxy(this,new _a)}toArray(){return Object.values(this.toJSON())}toJSON(){let t=this[Fn],e=this[Le],n=e.type.children,i={};for(let s=-1,o=n.length;++s<o;)i[n[s].name]=Dt.visit(e.children[s],t);return i}toString(){return"{".concat([...this].map(([t,e])=>"".concat(We(t),": ").concat(We(e))).join(", "),"}")}[Symbol.for("nodejs.util.inspect.custom")](){return this.toString()}[Symbol.iterator](){return new ma(this[Le],this[Fn])}},ma=class{constructor(t,e){this.childIndex=0,this.children=t.children,this.rowIndex=e,this.childFields=t.type.children,this.numChildren=this.childFields.length}[Symbol.iterator](){return this}next(){let t=this.childIndex;return t<this.numChildren?(this.childIndex=t+1,{done:!1,value:[this.childFields[t].name,Dt.visit(this.children[t],this.rowIndex)]}):{done:!0,value:null}}};Object.defineProperties(Tr.prototype,{[Symbol.toStringTag]:{enumerable:!1,configurable:!1,value:"Row"},[Le]:{writable:!0,enumerable:!1,configurable:!1,value:null},[Fn]:{writable:!0,enumerable:!1,configurable:!1,value:-1}});var _a=class{isExtensible(){return!1}deleteProperty(){return!1}preventExtensions(){return!0}ownKeys(t){return t[Le].type.children.map(e=>e.name)}has(t,e){return t[Le].type.children.findIndex(n=>n.name===e)!==-1}getOwnPropertyDescriptor(t,e){if(t[Le].type.children.findIndex(n=>n.name===e)!==-1)return{writable:!0,enumerable:!0,configurable:!0}}get(t,e){if(Reflect.has(t,e))return t[e];let n=t[Le].type.children.findIndex(i=>i.name===e);if(n!==-1){let i=Dt.visit(t[Le].children[n],t[Fn]);return Reflect.set(t,e,i),i}}set(t,e,n){let i=t[Le].type.children.findIndex(s=>s.name===e);return i!==-1?(Pt.visit(t[Le].children[i],t[Fn],n),Reflect.set(t,e,n)):Reflect.has(t,e)||typeof e=="symbol"?Reflect.set(t,e,n):!1}};var O=class extends D{};function H(r){return(t,e)=>t.getValid(e)?r(t,e):null}var fm=(r,t)=>864e5*r[t],ya=(r,t)=>4294967296*r[t+1]+(r[t]>>>0),hm=(r,t)=>4294967296*(r[t+1]/1e3)+(r[t]>>>0)/1e3,pm=(r,t)=>4294967296*(r[t+1]/1e6)+(r[t]>>>0)/1e6,ml=r=>new Date(r),mm=(r,t)=>ml(fm(r,t)),_m=(r,t)=>ml(ya(r,t)),ym=(r,t)=>null,_l=(r,t,e)=>{if(e+1>=t.length)return null;let n=t[e],i=t[e+1];return r.subarray(n,i)},bm=({offset:r,values:t},e)=>{let n=r+e;return(t[n>>3]&1<<n%8)!==0},yl=({values:r},t)=>mm(r,t),bl=({values:r},t)=>_m(r,t*2),xr=({stride:r,values:t},e)=>t[r*e],gm=({stride:r,values:t},e)=>Is(t[r*e]),gl=({values:r},t)=>r[t],wm=({stride:r,values:t},e)=>t.subarray(r*e,r*(e+1)),vm=({values:r,valueOffsets:t},e)=>_l(r,t,e),Sm=({values:r,valueOffsets:t},e)=>{let n=_l(r,t,e);return n!==null?qn(n):null},Im=({values:r},t)=>r[t],Fm=({type:r,values:t},e)=>r.precision!==mt.HALF?t[e]:Is(t[e]),Bm=(r,t)=>r.type.unit===Ct.DAY?yl(r,t):bl(r,t),wl=({values:r},t)=>1e3*ya(r,t*2),vl=({values:r},t)=>ya(r,t*2),Sl=({values:r},t)=>hm(r,t*2),Il=({values:r},t)=>pm(r,t*2),Am=(r,t)=>{switch(r.type.unit){case G.SECOND:return wl(r,t);case G.MILLISECOND:return vl(r,t);case G.MICROSECOND:return Sl(r,t);case G.NANOSECOND:return Il(r,t)}},Fl=({values:r},t)=>r[t],Bl=({values:r},t)=>r[t],Al=({values:r},t)=>r[t],Tl=({values:r},t)=>r[t],Tm=(r,t)=>{switch(r.type.unit){case G.SECOND:return Fl(r,t);case G.MILLISECOND:return Bl(r,t);case G.MICROSECOND:return Al(r,t);case G.NANOSECOND:return Tl(r,t)}},xm=({values:r,stride:t},e)=>ri.decimal(r.subarray(t*e,t*(e+1))),Dm=(r,t)=>{let{valueOffsets:e,stride:n,children:i}=r,{[t*n]:s,[t*n+1]:o}=e,c=i[0].slice(s,o-s);return new J([c])},Em=(r,t)=>{let{valueOffsets:e,children:n}=r,{[t]:i,[t+1]:s}=e,o=n[0];return new Ye(o.slice(i,s-i))},Om=(r,t)=>new Tr(r,t),Rm=(r,t)=>r.type.mode===wt.Dense?xl(r,t):Dl(r,t),xl=(r,t)=>{let e=r.type.typeIdToChildIndex[r.typeIds[t]],n=r.children[e];return Dt.visit(n,r.valueOffsets[t])},Dl=(r,t)=>{let e=r.type.typeIdToChildIndex[r.typeIds[t]],n=r.children[e];return Dt.visit(n,t)},Mm=(r,t)=>{var e;return(e=r.dictionary)===null||e===void 0?void 0:e.get(r.values[t])},Um=(r,t)=>r.type.unit===Yt.DAY_TIME?El(r,t):Ol(r,t),El=({values:r},t)=>r.subarray(2*t,2*(t+1)),Ol=({values:r},t)=>{let e=r[t],n=new Int32Array(2);return n[0]=Math.trunc(e/12),n[1]=Math.trunc(e%12),n},Nm=(r,t)=>{let{stride:e,children:n}=r,s=n[0].slice(t*e,e);return new J([s])};O.prototype.visitNull=H(ym);O.prototype.visitBool=H(bm);O.prototype.visitInt=H(Im);O.prototype.visitInt8=H(xr);O.prototype.visitInt16=H(xr);O.prototype.visitInt32=H(xr);O.prototype.visitInt64=H(gl);O.prototype.visitUint8=H(xr);O.prototype.visitUint16=H(xr);O.prototype.visitUint32=H(xr);O.prototype.visitUint64=H(gl);O.prototype.visitFloat=H(Fm);O.prototype.visitFloat16=H(gm);O.prototype.visitFloat32=H(xr);O.prototype.visitFloat64=H(xr);O.prototype.visitUtf8=H(Sm);O.prototype.visitBinary=H(vm);O.prototype.visitFixedSizeBinary=H(wm);O.prototype.visitDate=H(Bm);O.prototype.visitDateDay=H(yl);O.prototype.visitDateMillisecond=H(bl);O.prototype.visitTimestamp=H(Am);O.prototype.visitTimestampSecond=H(wl);O.prototype.visitTimestampMillisecond=H(vl);O.prototype.visitTimestampMicrosecond=H(Sl);O.prototype.visitTimestampNanosecond=H(Il);O.prototype.visitTime=H(Tm);O.prototype.visitTimeSecond=H(Fl);O.prototype.visitTimeMillisecond=H(Bl);O.prototype.visitTimeMicrosecond=H(Al);O.prototype.visitTimeNanosecond=H(Tl);O.prototype.visitDecimal=H(xm);O.prototype.visitList=H(Dm);O.prototype.visitStruct=H(Om);O.prototype.visitUnion=H(Rm);O.prototype.visitDenseUnion=H(xl);O.prototype.visitSparseUnion=H(Dl);O.prototype.visitDictionary=H(Mm);O.prototype.visitInterval=H(Um);O.prototype.visitIntervalDayTime=H(El);O.prototype.visitIntervalYearMonth=H(Ol);O.prototype.visitFixedSizeList=H(Nm);O.prototype.visitMap=H(Em);var Dt=new O;var we=Symbol.for("keys"),Bn=Symbol.for("vals"),Ye=class{constructor(t){return this[we]=new J([t.children[0]]).memoize(),this[Bn]=t.children[1],new Proxy(this,new ga)}[Symbol.iterator](){return new ba(this[we],this[Bn])}get size(){return this[we].length}toArray(){return Object.values(this.toJSON())}toJSON(){let t=this[we],e=this[Bn],n={};for(let i=-1,s=t.length;++i<s;)n[t.get(i)]=Dt.visit(e,i);return n}toString(){return"{".concat([...this].map(([t,e])=>"".concat(We(t),": ").concat(We(e))).join(", "),"}")}[Symbol.for("nodejs.util.inspect.custom")](){return this.toString()}},ba=class{constructor(t,e){this.keys=t,this.vals=e,this.keyIndex=0,this.numKeys=t.length}[Symbol.iterator](){return this}next(){let t=this.keyIndex;return t===this.numKeys?{done:!0,value:null}:(this.keyIndex++,{done:!1,value:[this.keys.get(t),Dt.visit(this.vals,t)]})}},ga=class{isExtensible(){return!1}deleteProperty(){return!1}preventExtensions(){return!0}ownKeys(t){return t[we].toArray().map(String)}has(t,e){return t[we].includes(e)}getOwnPropertyDescriptor(t,e){if(t[we].indexOf(e)!==-1)return{writable:!0,enumerable:!0,configurable:!0}}get(t,e){if(Reflect.has(t,e))return t[e];let n=t[we].indexOf(e);if(n!==-1){let i=Dt.visit(Reflect.get(t,Bn),n);return Reflect.set(t,e,i),i}}set(t,e,n){let i=t[we].indexOf(e);return i!==-1?(Pt.visit(Reflect.get(t,Bn),i,n),Reflect.set(t,e,n)):Reflect.has(t,e)?Reflect.set(t,e,n):!1}};Object.defineProperties(Ye.prototype,{[Symbol.toStringTag]:{enumerable:!1,configurable:!1,value:"Row"},[we]:{writable:!0,enumerable:!1,configurable:!1,value:null},[Bn]:{writable:!0,enumerable:!1,configurable:!1,value:null}});function Lm(r,t,e){let n=r.length,i=t>-1?t:n+t%n;return e?e(r,i):i}var Rl;function ii(r,t,e,n){let{length:i=0}=r,s=typeof t!="number"?0:t,o=typeof e!="number"?i:e;return s<0&&(s=(s%i+i)%i),o<0&&(o=(o%i+i)%i),o<s&&(Rl=s,s=o,o=Rl),o>i&&(o=i),n?n(r,s,o):[s,o]}var Ml=r=>r!==r;function Dr(r){if(typeof r!=="object"||r===null)return Ml(r)?Ml:e=>e===r;if(r instanceof Date){let e=r.valueOf();return n=>n instanceof Date?n.valueOf()===e:!1}return ArrayBuffer.isView(r)?e=>e?ea(r,e):!1:r instanceof Map?Cm(r):Array.isArray(r)?km(r):r instanceof J?Pm(r):Vm(r,!0)}function km(r){let t=[];for(let e=-1,n=r.length;++e<n;)t[e]=Dr(r[e]);return Ls(t)}function Cm(r){let t=-1,e=[];for(let n of r.values())e[++t]=Dr(n);return Ls(e)}function Pm(r){let t=[];for(let e=-1,n=r.length;++e<n;)t[e]=Dr(r.get(e));return Ls(t)}function Vm(r,t=!1){let e=Object.keys(r);if(!t&&e.length===0)return()=>!1;let n=[];for(let i=-1,s=e.length;++i<s;)n[i]=Dr(r[e[i]]);return Ls(n,e)}function Ls(r,t){return e=>{if(!e||typeof e!="object")return!1;switch(e.constructor){case Array:return Hm(r,e);case Map:return Ul(r,e,e.keys());case Ye:case Tr:case Object:case void 0:return Ul(r,e,t||Object.keys(e))}return e instanceof J?zm(r,e):!1}}function Hm(r,t){let e=r.length;if(t.length!==e)return!1;for(let n=-1;++n<e;)if(!r[n](t[n]))return!1;return!0}function zm(r,t){let e=r.length;if(t.length!==e)return!1;for(let n=-1;++n<e;)if(!r[n](t.get(n)))return!1;return!0}function Ul(r,t,e){let n=e[Symbol.iterator](),i=t instanceof Map?t.keys():Object.keys(t)[Symbol.iterator](),s=t instanceof Map?t.values():Object.values(t)[Symbol.iterator](),o=0,a=r.length,c=s.next(),f=n.next(),p=i.next();for(;o<a&&!f.done&&!p.done&&!c.done&&!(f.value!==p.value||!r[o](c.value));++o,f=n.next(),p=i.next(),c=s.next());return o===a&&f.done&&p.done&&c.done?!0:(n.return&&n.return(),i.return&&i.return(),s.return&&s.return(),!1)}var va={};Kr(va,{BitIterator:()=>Zr,getBit:()=>Nl,getBool:()=>Cs,packBools:()=>Qr,popcnt_array:()=>Ll,popcnt_bit_range:()=>si,popcnt_uint32:()=>ks,setBool:()=>jm,truncateBitmap:()=>An});function Cs(r,t,e,n){return(e&1<<n)!==0}function Nl(r,t,e,n){return(e&1<<n)>>n}function jm(r,t,e){return e?!!(r[t>>3]|=1<<t%8)||!0:!(r[t>>3]&=~(1<<t%8))&&!1}function An(r,t,e){let n=e.byteLength+7&-8;if(r>0||e.byteLength<n){let i=new Uint8Array(n);return i.set(r%8===0?e.subarray(r>>3):Qr(new Zr(e,r,t,null,Cs)).subarray(0,n)),i}return e}function Qr(r){let t=[],e=0,n=0,i=0;for(let o of r)o&&(i|=1<<n),++n===8&&(t[e++]=i,i=n=0);(e===0||n>0)&&(t[e++]=i);let s=new Uint8Array(t.length+7&-8);return s.set(t),s}var Zr=class{constructor(t,e,n,i,s){this.bytes=t,this.length=n,this.context=i,this.get=s,this.bit=e%8,this.byteIndex=e>>3,this.byte=t[this.byteIndex++],this.index=0}next(){return this.index<this.length?(this.bit===8&&(this.bit=0,this.byte=this.bytes[this.byteIndex++]),{value:this.get(this.context,this.index++,this.byte,this.bit++)}):{done:!0,value:null}}[Symbol.iterator](){return this}};function si(r,t,e){if(e-t<=0)return 0;if(e-t<8){let s=0;for(let o of new Zr(r,t,e-t,r,Nl))s+=o;return s}let n=e>>3<<3,i=t+(t%8===0?0:8-t%8);return si(r,t,i)+si(r,n,e)+Ll(r,i>>3,n-i>>3)}function Ll(r,t,e){let n=0,i=Math.trunc(t),s=new DataView(r.buffer,r.byteOffset,r.byteLength),o=e===void 0?r.byteLength:i+e;for(;o-i>=4;)n+=ks(s.getUint32(i)),i+=4;for(;o-i>=2;)n+=ks(s.getUint16(i)),i+=2;for(;o-i>=1;)n+=ks(s.getUint8(i)),i+=1;return n}function ks(r){let t=Math.trunc(r);return t=t-(t>>>1&1431655765),t=(t&858993459)+(t>>>2&858993459),(t+(t>>>4)&252645135)*16843009>>>24}var Wm=-1,ct=class r{get typeId(){return this.type.typeId}get ArrayType(){return this.type.ArrayType}get buffers(){return[this.valueOffsets,this.values,this.nullBitmap,this.typeIds]}get byteLength(){let t=0,{valueOffsets:e,values:n,nullBitmap:i,typeIds:s}=this;return e&&(t+=e.byteLength),n&&(t+=n.byteLength),i&&(t+=i.byteLength),s&&(t+=s.byteLength),this.children.reduce((o,a)=>o+a.byteLength,t)}get nullCount(){let t=this._nullCount,e;return t<=Wm&&(e=this.nullBitmap)&&(this._nullCount=t=this.length-si(e,this.offset,this.offset+this.length)),t}constructor(t,e,n,i,s,o=[],a){this.type=t,this.children=o,this.dictionary=a,this.offset=Math.floor(Math.max(e||0,0)),this.length=Math.floor(Math.max(n||0,0)),this._nullCount=Math.floor(Math.max(i||0,-1));let c;s instanceof r?(this.stride=s.stride,this.values=s.values,this.typeIds=s.typeIds,this.nullBitmap=s.nullBitmap,this.valueOffsets=s.valueOffsets):(this.stride=le(t),s&&((c=s[0])&&(this.valueOffsets=c),(c=s[1])&&(this.values=c),(c=s[2])&&(this.nullBitmap=c),(c=s[3])&&(this.typeIds=c))),this.nullable=this._nullCount!==0&&this.nullBitmap&&this.nullBitmap.byteLength>0}getValid(t){if(this.nullable&&this.nullCount>0){let e=this.offset+t;return(this.nullBitmap[e>>3]&1<<e%8)!==0}return!0}setValid(t,e){if(!this.nullable)return e;if(!this.nullBitmap||this.nullBitmap.byteLength<=t>>3){let{nullBitmap:c}=this._changeLengthAndBackfillNullBitmap(this.length);Object.assign(this,{nullBitmap:c,_nullCount:0})}let{nullBitmap:n,offset:i}=this,s=i+t>>3,o=(i+t)%8,a=n[s]>>o&1;return e?a===0&&(n[s]|=1<<o,this._nullCount=this.nullCount+1):a===1&&(n[s]&=~(1<<o),this._nullCount=this.nullCount-1),e}clone(t=this.type,e=this.offset,n=this.length,i=this._nullCount,s=this,o=this.children){return new r(t,e,n,i,s,o,this.dictionary)}slice(t,e){let{stride:n,typeId:i,children:s}=this,o=+(this._nullCount===0)-1,a=i===16?n:1,c=this._sliceBuffers(t,e,n,i);return this.clone(this.type,this.offset+t,e,o,c,s.length===0||this.valueOffsets?s:this._sliceChildren(s,a*t,a*e))}_changeLengthAndBackfillNullBitmap(t){if(this.typeId===h.Null)return this.clone(this.type,0,t,0);let{length:e,nullCount:n}=this,i=new Uint8Array((t+63&-64)>>3).fill(255,0,e>>3);i[e>>3]=(1<<e-(e&-8))-1,n>0&&i.set(An(this.offset,e,this.nullBitmap),0);let s=this.buffers;return s[ge.VALIDITY]=i,this.clone(this.type,0,t,n+(t-e),s)}_sliceBuffers(t,e,n,i){let s,{buffers:o}=this;return(s=o[ge.TYPE])&&(o[ge.TYPE]=s.subarray(t,t+e)),(s=o[ge.OFFSET])&&(o[ge.OFFSET]=s.subarray(t,t+e+1))||(s=o[ge.DATA])&&(o[ge.DATA]=i===6?s:s.subarray(n*t,n*(t+e))),o}_sliceChildren(t,e,n){return t.map(i=>i.slice(e,n))}};ct.prototype.children=Object.freeze([]);var Sa=class r extends D{visit(t){return this.getVisitFn(t.type).call(this,t)}visitNull(t){let{["type"]:e,["offset"]:n=0,["length"]:i=0}=t;return new ct(e,n,i,0)}visitBool(t){let{["type"]:e,["offset"]:n=0}=t,i=L(t.nullBitmap),s=$(e.ArrayType,t.data),{["length"]:o=s.length>>3,["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,s,i])}visitInt(t){let{["type"]:e,["offset"]:n=0}=t,i=L(t.nullBitmap),s=$(e.ArrayType,t.data),{["length"]:o=s.length,["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,s,i])}visitFloat(t){let{["type"]:e,["offset"]:n=0}=t,i=L(t.nullBitmap),s=$(e.ArrayType,t.data),{["length"]:o=s.length,["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,s,i])}visitUtf8(t){let{["type"]:e,["offset"]:n=0}=t,i=L(t.data),s=L(t.nullBitmap),o=qr(t.valueOffsets),{["length"]:a=o.length-1,["nullCount"]:c=t.nullBitmap?-1:0}=t;return new ct(e,n,a,c,[o,i,s])}visitBinary(t){let{["type"]:e,["offset"]:n=0}=t,i=L(t.data),s=L(t.nullBitmap),o=qr(t.valueOffsets),{["length"]:a=o.length-1,["nullCount"]:c=t.nullBitmap?-1:0}=t;return new ct(e,n,a,c,[o,i,s])}visitFixedSizeBinary(t){let{["type"]:e,["offset"]:n=0}=t,i=L(t.nullBitmap),s=$(e.ArrayType,t.data),{["length"]:o=s.length/le(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,s,i])}visitDate(t){let{["type"]:e,["offset"]:n=0}=t,i=L(t.nullBitmap),s=$(e.ArrayType,t.data),{["length"]:o=s.length/le(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,s,i])}visitTimestamp(t){let{["type"]:e,["offset"]:n=0}=t,i=L(t.nullBitmap),s=$(e.ArrayType,t.data),{["length"]:o=s.length/le(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,s,i])}visitTime(t){let{["type"]:e,["offset"]:n=0}=t,i=L(t.nullBitmap),s=$(e.ArrayType,t.data),{["length"]:o=s.length/le(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,s,i])}visitDecimal(t){let{["type"]:e,["offset"]:n=0}=t,i=L(t.nullBitmap),s=$(e.ArrayType,t.data),{["length"]:o=s.length/le(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,s,i])}visitList(t){let{["type"]:e,["offset"]:n=0,["child"]:i}=t,s=L(t.nullBitmap),o=qr(t.valueOffsets),{["length"]:a=o.length-1,["nullCount"]:c=t.nullBitmap?-1:0}=t;return new ct(e,n,a,c,[o,void 0,s],[i])}visitStruct(t){let{["type"]:e,["offset"]:n=0,["children"]:i=[]}=t,s=L(t.nullBitmap),{length:o=i.reduce((c,{length:f})=>Math.max(c,f),0),nullCount:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,void 0,s],i)}visitUnion(t){let{["type"]:e,["offset"]:n=0,["children"]:i=[]}=t,s=L(t.nullBitmap),o=$(e.ArrayType,t.typeIds),{["length"]:a=o.length,["nullCount"]:c=t.nullBitmap?-1:0}=t;if(x.isSparseUnion(e))return new ct(e,n,a,c,[void 0,void 0,s,o],i);let f=qr(t.valueOffsets);return new ct(e,n,a,c,[f,void 0,s,o],i)}visitDictionary(t){let{["type"]:e,["offset"]:n=0}=t,i=L(t.nullBitmap),s=$(e.indices.ArrayType,t.data),{["dictionary"]:o=new J([new r().visit({type:e.dictionary})])}=t,{["length"]:a=s.length,["nullCount"]:c=t.nullBitmap?-1:0}=t;return new ct(e,n,a,c,[void 0,s,i],[],o)}visitInterval(t){let{["type"]:e,["offset"]:n=0}=t,i=L(t.nullBitmap),s=$(e.ArrayType,t.data),{["length"]:o=s.length/le(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,s,i])}visitFixedSizeList(t){let{["type"]:e,["offset"]:n=0,["child"]:i=new r().visit({type:e.valueType})}=t,s=L(t.nullBitmap),{["length"]:o=i.length/le(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,void 0,s],[i])}visitMap(t){let{["type"]:e,["offset"]:n=0,["child"]:i=new r().visit({type:e.childType})}=t,s=L(t.nullBitmap),o=qr(t.valueOffsets),{["length"]:a=o.length-1,["nullCount"]:c=t.nullBitmap?-1:0}=t;return new ct(e,n,a,c,[o,void 0,s],[i])}};function P(r){return new Sa().visit(r)}var oi=class{constructor(t=0,e){this.numChunks=t,this.getChunkIterator=e,this.chunkIndex=0,this.chunkIterator=this.getChunkIterator(0)}next(){for(;this.chunkIndex<this.numChunks;){let t=this.chunkIterator.next();if(!t.done)return t;++this.chunkIndex<this.numChunks&&(this.chunkIterator=this.getChunkIterator(this.chunkIndex))}return{done:!0,value:null}}[Symbol.iterator](){return this}};function Ps(r){return r.reduce((t,e)=>t+e.nullCount,0)}function Vs(r){return r.reduce((t,e,n)=>(t[n+1]=t[n]+e.length,t),new Uint32Array(r.length+1))}function Hs(r,t,e,n){let i=[];for(let s=-1,o=r.length;++s<o;){let a=r[s],c=t[s],{length:f}=a;if(c>=n)break;if(e>=c+f)continue;if(c>=e&&c+f<=n){i.push(a);continue}let p=Math.max(0,e-c),y=Math.min(n-c,f);i.push(a.slice(p,y-p))}return i.length===0&&i.push(r[0].slice(0,0)),i}function Ia(r,t,e,n){let i=0,s=0,o=t.length-1;do{if(i>=o-1)return e<t[o]?n(r,i,e-t[i]):null;s=i+Math.trunc((o-i)*.5),e<t[s]?o=s:i=s}while(i<o)}function ai(r,t){return r.getValid(t)}function Er(r){function t(e,n,i){return r(e[n],i)}return function(e){let n=this.data;return Ia(n,this._offsets,e,t)}}function zs(r){let t;function e(n,i,s){return r(n[i],s,t)}return function(n,i){let s=this.data;t=i;let o=Ia(s,this._offsets,n,e);return t=void 0,o}}function js(r){let t;function e(n,i,s){let o=s,a=0,c=0;for(let f=i-1,p=n.length;++f<p;){let y=n[f];if(~(a=r(y,t,o)))return c+a;o=0,c+=y.length}return-1}return function(n,i){t=n;let s=this.data,o=typeof i!="number"?e(s,0,0):Ia(s,this._offsets,i,e);return t=void 0,o}}var R=class extends D{};function $m(r,t){return t===null&&r.length>0?0:-1}function Ym(r,t){let{nullBitmap:e}=r;if(!e||r.nullCount<=0)return-1;let n=0;for(let i of new Zr(e,r.offset+(t||0),r.length,e,Cs)){if(!i)return n;++n}return-1}function Y(r,t,e){if(t===void 0)return-1;if(t===null)return Ym(r,e);let n=Dt.getVisitFn(r),i=Dr(t);for(let s=(e||0)-1,o=r.length;++s<o;)if(i(n(r,s)))return s;return-1}function kl(r,t,e){let n=Dt.getVisitFn(r),i=Dr(t);for(let s=(e||0)-1,o=r.length;++s<o;)if(i(n(r,s)))return s;return-1}R.prototype.visitNull=$m;R.prototype.visitBool=Y;R.prototype.visitInt=Y;R.prototype.visitInt8=Y;R.prototype.visitInt16=Y;R.prototype.visitInt32=Y;R.prototype.visitInt64=Y;R.prototype.visitUint8=Y;R.prototype.visitUint16=Y;R.prototype.visitUint32=Y;R.prototype.visitUint64=Y;R.prototype.visitFloat=Y;R.prototype.visitFloat16=Y;R.prototype.visitFloat32=Y;R.prototype.visitFloat64=Y;R.prototype.visitUtf8=Y;R.prototype.visitBinary=Y;R.prototype.visitFixedSizeBinary=Y;R.prototype.visitDate=Y;R.prototype.visitDateDay=Y;R.prototype.visitDateMillisecond=Y;R.prototype.visitTimestamp=Y;R.prototype.visitTimestampSecond=Y;R.prototype.visitTimestampMillisecond=Y;R.prototype.visitTimestampMicrosecond=Y;R.prototype.visitTimestampNanosecond=Y;R.prototype.visitTime=Y;R.prototype.visitTimeSecond=Y;R.prototype.visitTimeMillisecond=Y;R.prototype.visitTimeMicrosecond=Y;R.prototype.visitTimeNanosecond=Y;R.prototype.visitDecimal=Y;R.prototype.visitList=Y;R.prototype.visitStruct=Y;R.prototype.visitUnion=Y;R.prototype.visitDenseUnion=kl;R.prototype.visitSparseUnion=kl;R.prototype.visitDictionary=Y;R.prototype.visitInterval=Y;R.prototype.visitIntervalDayTime=Y;R.prototype.visitIntervalYearMonth=Y;R.prototype.visitFixedSizeList=Y;R.prototype.visitMap=Y;var tn=new R;var M=class extends D{};function z(r){let{type:t}=r;if(r.nullCount===0&&r.stride===1&&(t.typeId===h.Timestamp||t instanceof At&&t.bitWidth!==64||t instanceof Oe&&t.bitWidth!==64||t instanceof Qt&&t.precision!==mt.HALF))return new oi(r.data.length,n=>{let i=r.data[n];return i.values.subarray(0,i.length)[Symbol.iterator]()});let e=0;return new oi(r.data.length,n=>{let s=r.data[n].length,o=r.slice(e,e+s);return e+=s,new Fa(o)})}var Fa=class{constructor(t){this.vector=t,this.index=0}next(){return this.index<this.vector.length?{value:this.vector.get(this.index++)}:{done:!0,value:null}}[Symbol.iterator](){return this}};M.prototype.visitNull=z;M.prototype.visitBool=z;M.prototype.visitInt=z;M.prototype.visitInt8=z;M.prototype.visitInt16=z;M.prototype.visitInt32=z;M.prototype.visitInt64=z;M.prototype.visitUint8=z;M.prototype.visitUint16=z;M.prototype.visitUint32=z;M.prototype.visitUint64=z;M.prototype.visitFloat=z;M.prototype.visitFloat16=z;M.prototype.visitFloat32=z;M.prototype.visitFloat64=z;M.prototype.visitUtf8=z;M.prototype.visitBinary=z;M.prototype.visitFixedSizeBinary=z;M.prototype.visitDate=z;M.prototype.visitDateDay=z;M.prototype.visitDateMillisecond=z;M.prototype.visitTimestamp=z;M.prototype.visitTimestampSecond=z;M.prototype.visitTimestampMillisecond=z;M.prototype.visitTimestampMicrosecond=z;M.prototype.visitTimestampNanosecond=z;M.prototype.visitTime=z;M.prototype.visitTimeSecond=z;M.prototype.visitTimeMillisecond=z;M.prototype.visitTimeMicrosecond=z;M.prototype.visitTimeNanosecond=z;M.prototype.visitDecimal=z;M.prototype.visitList=z;M.prototype.visitStruct=z;M.prototype.visitUnion=z;M.prototype.visitDenseUnion=z;M.prototype.visitSparseUnion=z;M.prototype.visitDictionary=z;M.prototype.visitInterval=z;M.prototype.visitIntervalDayTime=z;M.prototype.visitIntervalYearMonth=z;M.prototype.visitFixedSizeList=z;M.prototype.visitMap=z;var Tn=new M;var Xm=(r,t)=>r+t,Xe=class extends D{visitNull(t,e){return 0}visitInt(t,e){return t.type.bitWidth/8}visitFloat(t,e){return t.type.ArrayType.BYTES_PER_ELEMENT}visitBool(t,e){return 1/8}visitDecimal(t,e){return t.type.bitWidth/8}visitDate(t,e){return(t.type.unit+1)*4}visitTime(t,e){return t.type.bitWidth/8}visitTimestamp(t,e){return t.type.unit===G.SECOND?4:8}visitInterval(t,e){return(t.type.unit+1)*4}visitStruct(t,e){return t.children.reduce((n,i)=>n+ue.visit(i,e),0)}visitFixedSizeBinary(t,e){return t.type.byteWidth}visitMap(t,e){return 8+t.children.reduce((n,i)=>n+ue.visit(i,e),0)}visitDictionary(t,e){var n;return t.type.indices.bitWidth/8+(((n=t.dictionary)===null||n===void 0?void 0:n.getByteLength(t.values[e]))||0)}},Gm=({valueOffsets:r},t)=>8+(r[t+1]-r[t]),Km=({valueOffsets:r},t)=>8+(r[t+1]-r[t]),Jm=({valueOffsets:r,stride:t,children:e},n)=>{let i=e[0],{[n*t]:s}=r,{[n*t+1]:o}=r,a=ue.getVisitFn(i.type),c=i.slice(s,o-s),f=8;for(let p=-1,y=o-s;++p<y;)f+=a(c,p);return f},qm=({stride:r,children:t},e)=>{let n=t[0],i=n.slice(e*r,r),s=ue.getVisitFn(n.type),o=0;for(let a=-1,c=i.length;++a<c;)o+=s(i,a);return o},Zm=(r,t)=>r.type.mode===wt.Dense?Cl(r,t):Pl(r,t),Cl=({type:r,children:t,typeIds:e,valueOffsets:n},i)=>{let s=r.typeIdToChildIndex[e[i]];return 8+ue.visit(t[s],n[i])},Pl=({children:r},t)=>4+ue.visitMany(r,r.map(()=>t)).reduce(Xm,0);Xe.prototype.visitUtf8=Gm;Xe.prototype.visitBinary=Km;Xe.prototype.visitList=Jm;Xe.prototype.visitFixedSizeList=qm;Xe.prototype.visitUnion=Zm;Xe.prototype.visitDenseUnion=Cl;Xe.prototype.visitSparseUnion=Pl;var ue=new Xe;var Vl,Hl={},zl={},J=class r{constructor(t){var e,n,i;let s=t[0]instanceof r?t.flatMap(a=>a.data):t;if(s.length===0||s.some(a=>!(a instanceof ct)))throw new TypeError("Vector constructor expects an Array of Data instances.");let o=(e=s[0])===null||e===void 0?void 0:e.type;switch(s.length){case 0:this._offsets=[0];break;case 1:{let{get:a,set:c,indexOf:f,byteLength:p}=Hl[o.typeId],y=s[0];this.isValid=w=>ai(y,w),this.get=w=>a(y,w),this.set=(w,B)=>c(y,w,B),this.indexOf=w=>f(y,w),this.getByteLength=w=>p(y,w),this._offsets=[0,y.length];break}default:Object.setPrototypeOf(this,zl[o.typeId]),this._offsets=Vs(s);break}this.data=s,this.type=o,this.stride=le(o),this.numChildren=(i=(n=o.children)===null||n===void 0?void 0:n.length)!==null&&i!==void 0?i:0,this.length=this._offsets[this._offsets.length-1]}get byteLength(){return this._byteLength===-1&&(this._byteLength=this.data.reduce((t,e)=>t+e.byteLength,0)),this._byteLength}get nullCount(){return this._nullCount===-1&&(this._nullCount=Ps(this.data)),this._nullCount}get ArrayType(){return this.type.ArrayType}get[Symbol.toStringTag](){return"".concat(this.VectorName,"<").concat(this.type[Symbol.toStringTag],">")}get VectorName(){return"".concat(h[this.type.typeId],"Vector")}isValid(t){return!1}get(t){return null}set(t,e){}indexOf(t,e){return-1}includes(t,e){return this.indexOf(t,e)>0}getByteLength(t){return 0}[Symbol.iterator](){return Tn.visit(this)}concat(...t){return new r(this.data.concat(t.flatMap(e=>e.data).flat(Number.POSITIVE_INFINITY)))}slice(t,e){return new r(ii(this,t,e,({data:n,_offsets:i},s,o)=>Hs(n,i,s,o)))}toJSON(){return[...this]}toArray(){let{type:t,data:e,length:n,stride:i,ArrayType:s}=this;switch(t.typeId){case h.Int:case h.Float:case h.Decimal:case h.Time:case h.Timestamp:switch(e.length){case 0:return new s;case 1:return e[0].values.subarray(0,n*i);default:return e.reduce((o,{values:a,length:c})=>(o.array.set(a.subarray(0,c*i),o.offset),o.offset+=c*i,o),{array:new s(n*i),offset:0}).array}}return[...this]}toString(){return"[".concat([...this].join(","),"]")}getChild(t){var e;return this.getChildAt((e=this.type.children)===null||e===void 0?void 0:e.findIndex(n=>n.name===t))}getChildAt(t){return t>-1&&t<this.numChildren?new r(this.data.map(({children:e})=>e[t])):null}get isMemoized(){return x.isDictionary(this.type)?this.data[0].dictionary.isMemoized:!1}memoize(){if(x.isDictionary(this.type)){let t=new Ws(this.data[0].dictionary),e=this.data.map(n=>{let i=n.clone();return i.dictionary=t,i});return new r(e)}return new Ws(this)}unmemoize(){if(x.isDictionary(this.type)&&this.isMemoized){let t=this.data[0].dictionary.unmemoize(),e=this.data.map(n=>{let i=n.clone();return i.dictionary=t,i});return new r(e)}return this}};Vl=Symbol.toStringTag;J[Vl]=(r=>{r.type=x.prototype,r.data=[],r.length=0,r.stride=1,r.numChildren=0,r._nullCount=-1,r._byteLength=-1,r._offsets=new Uint32Array([0]),r[Symbol.isConcatSpreadable]=!0;let t=Object.keys(h).map(e=>h[e]).filter(e=>typeof e=="number"&&e!==h.NONE);for(let e of t){let n=Dt.getVisitFnByTypeId(e),i=Pt.getVisitFnByTypeId(e),s=tn.getVisitFnByTypeId(e),o=ue.getVisitFnByTypeId(e);Hl[e]={get:n,set:i,indexOf:s,byteLength:o},zl[e]=Object.create(r,{isValid:{value:Er(ai)},get:{value:Er(Dt.getVisitFnByTypeId(e))},set:{value:zs(Pt.getVisitFnByTypeId(e))},indexOf:{value:js(tn.getVisitFnByTypeId(e))},getByteLength:{value:Er(ue.getVisitFnByTypeId(e))}})}return"Vector"})(J.prototype);var Ws=class r extends J{constructor(t){super(t.data);let e=this.get,n=this.set,i=this.slice,s=new Array(this.length);Object.defineProperty(this,"get",{value(o){let a=s[o];if(a!==void 0)return a;let c=e.call(this,o);return s[o]=c,c}}),Object.defineProperty(this,"set",{value(o,a){n.call(this,o,a),s[o]=a}}),Object.defineProperty(this,"slice",{value:(o,a)=>new r(i.call(this,o,a))}),Object.defineProperty(this,"isMemoized",{value:!0}),Object.defineProperty(this,"unmemoize",{value:()=>new J(this.data)}),Object.defineProperty(this,"memoize",{value:()=>this})}};function jl(r){if(!r||r.length<=0)return function(i){return!0};let t="",e=r.filter(n=>n===n);return e.length>0&&(t="\n    switch (x) {".concat(e.map(n=>"\n        case ".concat(Qm(n),":")).join(""),"\n            return false;\n    }")),r.length!==e.length&&(t="if (x !== x) return false;\n".concat(t)),new Function("x","".concat(t,"\nreturn true;"))}function Qm(r){return typeof r!="bigint"?We(r):"".concat(We(r),"n")}var Ba=(r,t)=>(Math.ceil(r)*t+63&-64||64)/t,t_=(r,t=0)=>r.length>=t?r.subarray(0,t):gn(new r.constructor(t),r,0),Or=class{constructor(t,e=1){this.buffer=t,this.stride=e,this.BYTES_PER_ELEMENT=t.BYTES_PER_ELEMENT,this.ArrayType=t.constructor,this._resize(this.length=Math.ceil(t.length/e))}get byteLength(){return Math.ceil(this.length*this.stride)*this.BYTES_PER_ELEMENT}get reservedLength(){return this.buffer.length/this.stride}get reservedByteLength(){return this.buffer.byteLength}set(t,e){return this}append(t){return this.set(this.length,t)}reserve(t){if(t>0){this.length+=t;let e=this.stride,n=this.length*e,i=this.buffer.length;n>=i&&this._resize(i===0?Ba(n*1,this.BYTES_PER_ELEMENT):Ba(n*2,this.BYTES_PER_ELEMENT))}return this}flush(t=this.length){t=Ba(t*this.stride,this.BYTES_PER_ELEMENT);let e=t_(this.buffer,t);return this.clear(),e}clear(){return this.length=0,this._resize(0),this}_resize(t){return this.buffer=gn(new this.ArrayType(t),this.buffer)}};Or.prototype.offset=0;var pr=class extends Or{last(){return this.get(this.length-1)}get(t){return this.buffer[t]}set(t,e){return this.reserve(t-this.length+1),this.buffer[t*this.stride]=e,this}},xn=class extends pr{constructor(t=new Uint8Array(0)){super(t,1/8),this.numValid=0}get numInvalid(){return this.length-this.numValid}get(t){return this.buffer[t>>3]>>t%8&1}set(t,e){let{buffer:n}=this.reserve(t-this.length+1),i=t>>3,s=t%8,o=n[i]>>s&1;return e?o===0&&(n[i]|=1<<s,++this.numValid):o===1&&(n[i]&=~(1<<s),--this.numValid),this}clear(){return this.numValid=0,super.clear()}},Dn=class extends pr{constructor(t=new Int32Array(1)){super(t,1)}append(t){return this.set(this.length-1,t)}set(t,e){let n=this.length-1,i=this.reserve(t-n+1).buffer;return n<t++&&i.fill(i[n],n,t),i[t]=i[t-1]+e,this}flush(t=this.length-1){return t>this.length&&this.set(t-1,0),super.flush(t+1)}};var _t=class{static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t){throw new Error('"throughDOM" not available in this environment')}constructor({type:t,nullValues:e}){this.length=0,this.finished=!1,this.type=t,this.children=[],this.nullValues=e,this.stride=le(t),this._nulls=new xn,e&&e.length>0&&(this._isValid=jl(e))}toVector(){return new J([this.flush()])}get ArrayType(){return this.type.ArrayType}get nullCount(){return this._nulls.numInvalid}get numChildren(){return this.children.length}get byteLength(){let t=0,{_offsets:e,_values:n,_nulls:i,_typeIds:s,children:o}=this;return e&&(t+=e.byteLength),n&&(t+=n.byteLength),i&&(t+=i.byteLength),s&&(t+=s.byteLength),o.reduce((a,c)=>a+c.byteLength,t)}get reservedLength(){return this._nulls.reservedLength}get reservedByteLength(){let t=0;return this._offsets&&(t+=this._offsets.reservedByteLength),this._values&&(t+=this._values.reservedByteLength),this._nulls&&(t+=this._nulls.reservedByteLength),this._typeIds&&(t+=this._typeIds.reservedByteLength),this.children.reduce((e,n)=>e+n.reservedByteLength,t)}get valueOffsets(){return this._offsets?this._offsets.buffer:null}get values(){return this._values?this._values.buffer:null}get nullBitmap(){return this._nulls?this._nulls.buffer:null}get typeIds(){return this._typeIds?this._typeIds.buffer:null}append(t){return this.set(this.length,t)}isValid(t){return this._isValid(t)}set(t,e){return this.setValid(t,this.isValid(e))&&this.setValue(t,e),this}setValue(t,e){this._setValue(this,t,e)}setValid(t,e){return this.length=this._nulls.set(t,+e).length,e}addChild(t,e="".concat(this.numChildren)){throw new Error('Cannot append children to non-nested type "'.concat(this.type,'"'))}getChildAt(t){return this.children[t]||null}flush(){let t,e,n,i,{type:s,length:o,nullCount:a,_typeIds:c,_offsets:f,_values:p,_nulls:y}=this;(e=c==null?void 0:c.flush(o))?i=f==null?void 0:f.flush(o):(i=f==null?void 0:f.flush(o))?t=p==null?void 0:p.flush(f.last()):t=p==null?void 0:p.flush(o),a>0&&(n=y==null?void 0:y.flush(o));let w=this.children.map(B=>B.flush());return this.clear(),P({type:s,length:o,nullCount:a,children:w,child:w[0],data:t,typeIds:e,nullBitmap:n,valueOffsets:i})}finish(){this.finished=!0;for(let t of this.children)t.finish();return this}clear(){var t,e,n,i;this.length=0,(t=this._nulls)===null||t===void 0||t.clear(),(e=this._values)===null||e===void 0||e.clear(),(n=this._offsets)===null||n===void 0||n.clear(),(i=this._typeIds)===null||i===void 0||i.clear();for(let s of this.children)s.clear();return this}};_t.prototype.length=1;_t.prototype.stride=1;_t.prototype.children=null;_t.prototype.finished=!1;_t.prototype.nullValues=null;_t.prototype._isValid=()=>!0;var Nt=class extends _t{constructor(t){super(t),this._values=new pr(new this.ArrayType(0),this.stride)}setValue(t,e){let n=this._values;return n.reserve(t-n.length+1),super.setValue(t,e)}},Ge=class extends _t{constructor(t){super(t),this._pendingLength=0,this._offsets=new Dn}setValue(t,e){let n=this._pending||(this._pending=new Map),i=n.get(t);i&&(this._pendingLength-=i.length),this._pendingLength+=e instanceof Ye?e[we].length:e.length,n.set(t,e)}setValid(t,e){return super.setValid(t,e)?!0:((this._pending||(this._pending=new Map)).set(t,void 0),!1)}clear(){return this._pendingLength=0,this._pending=void 0,super.clear()}flush(){return this._flush(),super.flush()}finish(){return this._flush(),super.finish()}_flush(){let t=this._pending,e=this._pendingLength;return this._pendingLength=0,this._pending=void 0,t&&t.size>0&&this._flushPending(t,e),this}};var en=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}offset(){return this.bb.readInt64(this.bb_pos)}metaDataLength(){return this.bb.readInt32(this.bb_pos+8)}bodyLength(){return this.bb.readInt64(this.bb_pos+16)}static sizeOf(){return 24}static createBlock(t,e,n,i){return t.prep(8,24),t.writeInt64(BigInt(i!=null?i:0)),t.pad(4),t.writeInt32(n),t.writeInt64(BigInt(e!=null?e:0)),t.offset()}};var Ke=new Int32Array(2),$s=new Float32Array(Ke.buffer),Ys=new Float64Array(Ke.buffer),En=new Uint16Array(new Uint8Array([1,0]).buffer)[0]===1;var ci;(function(r){r[r.UTF8_BYTES=1]="UTF8_BYTES",r[r.UTF16_STRING=2]="UTF16_STRING"})(ci||(ci={}));var de=class r{constructor(t){this.bytes_=t,this.position_=0,this.text_decoder_=new TextDecoder}static allocate(t){return new r(new Uint8Array(t))}clear(){this.position_=0}bytes(){return this.bytes_}position(){return this.position_}setPosition(t){this.position_=t}capacity(){return this.bytes_.length}readInt8(t){return this.readUint8(t)<<24>>24}readUint8(t){return this.bytes_[t]}readInt16(t){return this.readUint16(t)<<16>>16}readUint16(t){return this.bytes_[t]|this.bytes_[t+1]<<8}readInt32(t){return this.bytes_[t]|this.bytes_[t+1]<<8|this.bytes_[t+2]<<16|this.bytes_[t+3]<<24}readUint32(t){return this.readInt32(t)>>>0}readInt64(t){return BigInt.asIntN(64,BigInt(this.readUint32(t))+(BigInt(this.readUint32(t+4))<<BigInt(32)))}readUint64(t){return BigInt.asUintN(64,BigInt(this.readUint32(t))+(BigInt(this.readUint32(t+4))<<BigInt(32)))}readFloat32(t){return Ke[0]=this.readInt32(t),$s[0]}readFloat64(t){return Ke[En?0:1]=this.readInt32(t),Ke[En?1:0]=this.readInt32(t+4),Ys[0]}writeInt8(t,e){this.bytes_[t]=e}writeUint8(t,e){this.bytes_[t]=e}writeInt16(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8}writeUint16(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8}writeInt32(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24}writeUint32(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24}writeInt64(t,e){this.writeInt32(t,Number(BigInt.asIntN(32,e))),this.writeInt32(t+4,Number(BigInt.asIntN(32,e>>BigInt(32))))}writeUint64(t,e){this.writeUint32(t,Number(BigInt.asUintN(32,e))),this.writeUint32(t+4,Number(BigInt.asUintN(32,e>>BigInt(32))))}writeFloat32(t,e){$s[0]=e,this.writeInt32(t,Ke[0])}writeFloat64(t,e){Ys[0]=e,this.writeInt32(t,Ke[En?0:1]),this.writeInt32(t+4,Ke[En?1:0])}getBufferIdentifier(){if(this.bytes_.length<this.position_+4+4)throw new Error("FlatBuffers: ByteBuffer is too short to contain an identifier.");let t="";for(let e=0;e<4;e++)t+=String.fromCharCode(this.readInt8(this.position_+4+e));return t}__offset(t,e){let n=t-this.readInt32(t);return e<this.readInt16(n)?this.readInt16(n+e):0}__union(t,e){return t.bb_pos=e+this.readInt32(e),t.bb=this,t}__string(t,e){t+=this.readInt32(t);let n=this.readInt32(t);t+=4;let i=this.bytes_.subarray(t,t+n);return e===ci.UTF8_BYTES?i:this.text_decoder_.decode(i)}__union_with_string(t,e){return typeof t=="string"?this.__string(e):this.__union(t,e)}__indirect(t){return t+this.readInt32(t)}__vector(t){return t+this.readInt32(t)+4}__vector_len(t){return this.readInt32(t+this.readInt32(t))}__has_identifier(t){if(t.length!=4)throw new Error("FlatBuffers: file identifier must be length "+4);for(let e=0;e<4;e++)if(t.charCodeAt(e)!=this.readInt8(this.position()+4+e))return!1;return!0}createScalarList(t,e){let n=[];for(let i=0;i<e;++i){let s=t(i);s!==null&&n.push(s)}return n}createObjList(t,e){let n=[];for(let i=0;i<e;++i){let s=t(i);s!==null&&n.push(s.unpack())}return n}};var rn=class r{constructor(t){this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1,this.string_maps=null,this.text_encoder=new TextEncoder;let e;t?e=t:e=1024,this.bb=de.allocate(e),this.space=e}clear(){this.bb.clear(),this.space=this.bb.capacity(),this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1,this.string_maps=null}forceDefaults(t){this.force_defaults=t}dataBuffer(){return this.bb}asUint8Array(){return this.bb.bytes().subarray(this.bb.position(),this.bb.position()+this.offset())}prep(t,e){t>this.minalign&&(this.minalign=t);let n=~(this.bb.capacity()-this.space+e)+1&t-1;for(;this.space<n+t+e;){let i=this.bb.capacity();this.bb=r.growByteBuffer(this.bb),this.space+=this.bb.capacity()-i}this.pad(n)}pad(t){for(let e=0;e<t;e++)this.bb.writeInt8(--this.space,0)}writeInt8(t){this.bb.writeInt8(this.space-=1,t)}writeInt16(t){this.bb.writeInt16(this.space-=2,t)}writeInt32(t){this.bb.writeInt32(this.space-=4,t)}writeInt64(t){this.bb.writeInt64(this.space-=8,t)}writeFloat32(t){this.bb.writeFloat32(this.space-=4,t)}writeFloat64(t){this.bb.writeFloat64(this.space-=8,t)}addInt8(t){this.prep(1,0),this.writeInt8(t)}addInt16(t){this.prep(2,0),this.writeInt16(t)}addInt32(t){this.prep(4,0),this.writeInt32(t)}addInt64(t){this.prep(8,0),this.writeInt64(t)}addFloat32(t){this.prep(4,0),this.writeFloat32(t)}addFloat64(t){this.prep(8,0),this.writeFloat64(t)}addFieldInt8(t,e,n){(this.force_defaults||e!=n)&&(this.addInt8(e),this.slot(t))}addFieldInt16(t,e,n){(this.force_defaults||e!=n)&&(this.addInt16(e),this.slot(t))}addFieldInt32(t,e,n){(this.force_defaults||e!=n)&&(this.addInt32(e),this.slot(t))}addFieldInt64(t,e,n){(this.force_defaults||e!==n)&&(this.addInt64(e),this.slot(t))}addFieldFloat32(t,e,n){(this.force_defaults||e!=n)&&(this.addFloat32(e),this.slot(t))}addFieldFloat64(t,e,n){(this.force_defaults||e!=n)&&(this.addFloat64(e),this.slot(t))}addFieldOffset(t,e,n){(this.force_defaults||e!=n)&&(this.addOffset(e),this.slot(t))}addFieldStruct(t,e,n){e!=n&&(this.nested(e),this.slot(t))}nested(t){if(t!=this.offset())throw new Error("FlatBuffers: struct must be serialized inline.")}notNested(){if(this.isNested)throw new Error("FlatBuffers: object serialization must not be nested.")}slot(t){this.vtable!==null&&(this.vtable[t]=this.offset())}offset(){return this.bb.capacity()-this.space}static growByteBuffer(t){let e=t.capacity();if(e&3221225472)throw new Error("FlatBuffers: cannot grow buffer beyond 2 gigabytes.");let n=e<<1,i=de.allocate(n);return i.setPosition(n-e),i.bytes().set(t.bytes(),n-e),i}addOffset(t){this.prep(4,0),this.writeInt32(this.offset()-t+4)}startObject(t){this.notNested(),this.vtable==null&&(this.vtable=[]),this.vtable_in_use=t;for(let e=0;e<t;e++)this.vtable[e]=0;this.isNested=!0,this.object_start=this.offset()}endObject(){if(this.vtable==null||!this.isNested)throw new Error("FlatBuffers: endObject called without startObject");this.addInt32(0);let t=this.offset(),e=this.vtable_in_use-1;for(;e>=0&&this.vtable[e]==0;e--);let n=e+1;for(;e>=0;e--)this.addInt16(this.vtable[e]!=0?t-this.vtable[e]:0);let i=2;this.addInt16(t-this.object_start);let s=(n+i)*2;this.addInt16(s);let o=0,a=this.space;t:for(e=0;e<this.vtables.length;e++){let c=this.bb.capacity()-this.vtables[e];if(s==this.bb.readInt16(c)){for(let f=2;f<s;f+=2)if(this.bb.readInt16(a+f)!=this.bb.readInt16(c+f))continue t;o=this.vtables[e];break}}return o?(this.space=this.bb.capacity()-t,this.bb.writeInt32(this.space,o-t)):(this.vtables.push(this.offset()),this.bb.writeInt32(this.bb.capacity()-t,this.offset()-t)),this.isNested=!1,t}finish(t,e,n){let i=n?4:0;if(e){let s=e;if(this.prep(this.minalign,4+4+i),s.length!=4)throw new Error("FlatBuffers: file identifier must be length "+4);for(let o=4-1;o>=0;o--)this.writeInt8(s.charCodeAt(o))}this.prep(this.minalign,4+i),this.addOffset(t),i&&this.addInt32(this.bb.capacity()-this.space),this.bb.setPosition(this.space)}finishSizePrefixed(t,e){this.finish(t,e,!0)}requiredField(t,e){let n=this.bb.capacity()-t,i=n-this.bb.readInt32(n);if(!(e<this.bb.readInt16(i)&&this.bb.readInt16(i+e)!=0))throw new Error("FlatBuffers: field "+e+" must be set")}startVector(t,e,n){this.notNested(),this.vector_num_elems=e,this.prep(4,t*e),this.prep(n,t*e)}endVector(){return this.writeInt32(this.vector_num_elems),this.offset()}createSharedString(t){if(!t)return 0;if(this.string_maps||(this.string_maps=new Map),this.string_maps.has(t))return this.string_maps.get(t);let e=this.createString(t);return this.string_maps.set(t,e),e}createString(t){if(t==null)return 0;let e;t instanceof Uint8Array?e=t:e=this.text_encoder.encode(t),this.addInt8(0),this.startVector(1,e.length,1),this.bb.setPosition(this.space-=e.length);for(let n=0,i=this.space,s=this.bb.bytes();n<e.length;n++)s[i++]=e[n];return this.endVector()}createObjectOffset(t){return t===null?0:typeof t=="string"?this.createString(t):t.pack(this)}createObjectOffsetList(t){let e=[];for(let n=0;n<t.length;++n){let i=t[n];if(i!==null)e.push(this.createObjectOffset(i));else throw new Error("FlatBuffers: Argument for createObjectOffsetList cannot contain null.")}return e}createStructOffsetList(t,e){return e(this,t.length),this.createObjectOffsetList(t.slice().reverse()),this.endVector()}};var Ot=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsKeyValue(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsKeyValue(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}key(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}value(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}static startKeyValue(t){t.startObject(2)}static addKey(t,e){t.addFieldOffset(0,e,0)}static addValue(t,e){t.addFieldOffset(1,e,0)}static endKeyValue(t){return t.endObject()}static createKeyValue(t,e,n){return r.startKeyValue(t),r.addKey(t,e),r.addValue(t,n),r.endKeyValue(t)}};var Rr;(function(r){r[r.V1=0]="V1",r[r.V2=1]="V2",r[r.V3=2]="V3",r[r.V4=3]="V4",r[r.V5=4]="V5"})(Rr||(Rr={}));var Mr;(function(r){r[r.Little=0]="Little",r[r.Big=1]="Big"})(Mr||(Mr={}));var li;(function(r){r[r.DenseArray=0]="DenseArray"})(li||(li={}));var Ce=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsInt(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsInt(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}bitWidth(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}isSigned(){let t=this.bb.__offset(this.bb_pos,6);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startInt(t){t.startObject(2)}static addBitWidth(t,e){t.addFieldInt32(0,e,0)}static addIsSigned(t,e){t.addFieldInt8(1,+e,0)}static endInt(t){return t.endObject()}static createInt(t,e,n){return r.startInt(t),r.addBitWidth(t,e),r.addIsSigned(t,n),r.endInt(t)}};var Je=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDictionaryEncoding(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDictionaryEncoding(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}id(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):BigInt("0")}indexType(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new Ce).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}isOrdered(){let t=this.bb.__offset(this.bb_pos,8);return t?!!this.bb.readInt8(this.bb_pos+t):!1}dictionaryKind(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt16(this.bb_pos+t):li.DenseArray}static startDictionaryEncoding(t){t.startObject(4)}static addId(t,e){t.addFieldInt64(0,e,BigInt("0"))}static addIndexType(t,e){t.addFieldOffset(1,e,0)}static addIsOrdered(t,e){t.addFieldInt8(2,+e,0)}static addDictionaryKind(t,e){t.addFieldInt16(3,e,li.DenseArray)}static endDictionaryEncoding(t){return t.endObject()}};var ui=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBinary(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBinary(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static startBinary(t){t.startObject(0)}static endBinary(t){return t.endObject()}static createBinary(t){return r.startBinary(t),r.endBinary(t)}};var di=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBool(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBool(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static startBool(t){t.startObject(0)}static endBool(t){return t.endObject()}static createBool(t){return r.startBool(t),r.endBool(t)}};var fi;(function(r){r[r.DAY=0]="DAY",r[r.MILLISECOND=1]="MILLISECOND"})(fi||(fi={}));var Ur=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDate(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDate(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):fi.MILLISECOND}static startDate(t){t.startObject(1)}static addUnit(t,e){t.addFieldInt16(0,e,fi.MILLISECOND)}static endDate(t){return t.endObject()}static createDate(t,e){return r.startDate(t),r.addUnit(t,e),r.endDate(t)}};var qe=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDecimal(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDecimal(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}precision(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}scale(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt32(this.bb_pos+t):0}bitWidth(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readInt32(this.bb_pos+t):128}static startDecimal(t){t.startObject(3)}static addPrecision(t,e){t.addFieldInt32(0,e,0)}static addScale(t,e){t.addFieldInt32(1,e,0)}static addBitWidth(t,e){t.addFieldInt32(2,e,128)}static endDecimal(t){return t.endObject()}static createDecimal(t,e,n,i){return r.startDecimal(t),r.addPrecision(t,e),r.addScale(t,n),r.addBitWidth(t,i),r.endDecimal(t)}};var Nr;(function(r){r[r.SECOND=0]="SECOND",r[r.MILLISECOND=1]="MILLISECOND",r[r.MICROSECOND=2]="MICROSECOND",r[r.NANOSECOND=3]="NANOSECOND"})(Nr||(Nr={}));var Lr=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFixedSizeBinary(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFixedSizeBinary(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}byteWidth(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}static startFixedSizeBinary(t){t.startObject(1)}static addByteWidth(t,e){t.addFieldInt32(0,e,0)}static endFixedSizeBinary(t){return t.endObject()}static createFixedSizeBinary(t,e){return r.startFixedSizeBinary(t),r.addByteWidth(t,e),r.endFixedSizeBinary(t)}};var kr=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFixedSizeList(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFixedSizeList(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}listSize(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}static startFixedSizeList(t){t.startObject(1)}static addListSize(t,e){t.addFieldInt32(0,e,0)}static endFixedSizeList(t){return t.endObject()}static createFixedSizeList(t,e){return r.startFixedSizeList(t),r.addListSize(t,e),r.endFixedSizeList(t)}};var hi;(function(r){r[r.HALF=0]="HALF",r[r.SINGLE=1]="SINGLE",r[r.DOUBLE=2]="DOUBLE"})(hi||(hi={}));var Cr=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFloatingPoint(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFloatingPoint(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}precision(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):hi.HALF}static startFloatingPoint(t){t.startObject(1)}static addPrecision(t,e){t.addFieldInt16(0,e,hi.HALF)}static endFloatingPoint(t){return t.endObject()}static createFloatingPoint(t,e){return r.startFloatingPoint(t),r.addPrecision(t,e),r.endFloatingPoint(t)}};var pi;(function(r){r[r.YEAR_MONTH=0]="YEAR_MONTH",r[r.DAY_TIME=1]="DAY_TIME",r[r.MONTH_DAY_NANO=2]="MONTH_DAY_NANO"})(pi||(pi={}));var Pr=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsInterval(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsInterval(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):pi.YEAR_MONTH}static startInterval(t){t.startObject(1)}static addUnit(t,e){t.addFieldInt16(0,e,pi.YEAR_MONTH)}static endInterval(t){return t.endObject()}static createInterval(t,e){return r.startInterval(t),r.addUnit(t,e),r.endInterval(t)}};var mi=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsList(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsList(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static startList(t){t.startObject(0)}static endList(t){return t.endObject()}static createList(t){return r.startList(t),r.endList(t)}};var Vr=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsMap(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMap(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}keysSorted(){let t=this.bb.__offset(this.bb_pos,4);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startMap(t){t.startObject(1)}static addKeysSorted(t,e){t.addFieldInt8(0,+e,0)}static endMap(t){return t.endObject()}static createMap(t,e){return r.startMap(t),r.addKeysSorted(t,e),r.endMap(t)}};var _i=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsNull(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsNull(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static startNull(t){t.startObject(0)}static endNull(t){return t.endObject()}static createNull(t){return r.startNull(t),r.endNull(t)}};var yi=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsStruct_(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsStruct_(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static startStruct_(t){t.startObject(0)}static endStruct_(t){return t.endObject()}static createStruct_(t){return r.startStruct_(t),r.endStruct_(t)}};var mr=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTime(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTime(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Nr.MILLISECOND}bitWidth(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt32(this.bb_pos+t):32}static startTime(t){t.startObject(2)}static addUnit(t,e){t.addFieldInt16(0,e,Nr.MILLISECOND)}static addBitWidth(t,e){t.addFieldInt32(1,e,32)}static endTime(t){return t.endObject()}static createTime(t,e,n){return r.startTime(t),r.addUnit(t,e),r.addBitWidth(t,n),r.endTime(t)}};var _r=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTimestamp(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTimestamp(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Nr.SECOND}timezone(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}static startTimestamp(t){t.startObject(2)}static addUnit(t,e){t.addFieldInt16(0,e,Nr.SECOND)}static addTimezone(t,e){t.addFieldOffset(1,e,0)}static endTimestamp(t){return t.endObject()}static createTimestamp(t,e,n){return r.startTimestamp(t),r.addUnit(t,e),r.addTimezone(t,n),r.endTimestamp(t)}};var bi;(function(r){r[r.Sparse=0]="Sparse",r[r.Dense=1]="Dense"})(bi||(bi={}));var Pe=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsUnion(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsUnion(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}mode(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):bi.Sparse}typeIds(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.readInt32(this.bb.__vector(this.bb_pos+e)+t*4):0}typeIdsLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}typeIdsArray(){let t=this.bb.__offset(this.bb_pos,6);return t?new Int32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}static startUnion(t){t.startObject(2)}static addMode(t,e){t.addFieldInt16(0,e,bi.Sparse)}static addTypeIds(t,e){t.addFieldOffset(1,e,0)}static createTypeIdsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addInt32(e[n]);return t.endVector()}static startTypeIdsVector(t,e){t.startVector(4,e,4)}static endUnion(t){return t.endObject()}static createUnion(t,e,n){return r.startUnion(t),r.addMode(t,e),r.addTypeIds(t,n),r.endUnion(t)}};var gi=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsUtf8(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsUtf8(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static startUtf8(t){t.startObject(0)}static endUtf8(t){return t.endObject()}static createUtf8(t){return r.startUtf8(t),r.endUtf8(t)}};var yt;(function(r){r[r.NONE=0]="NONE",r[r.Null=1]="Null",r[r.Int=2]="Int",r[r.FloatingPoint=3]="FloatingPoint",r[r.Binary=4]="Binary",r[r.Utf8=5]="Utf8",r[r.Bool=6]="Bool",r[r.Decimal=7]="Decimal",r[r.Date=8]="Date",r[r.Time=9]="Time",r[r.Timestamp=10]="Timestamp",r[r.Interval=11]="Interval",r[r.List=12]="List",r[r.Struct_=13]="Struct_",r[r.Union=14]="Union",r[r.FixedSizeBinary=15]="FixedSizeBinary",r[r.FixedSizeList=16]="FixedSizeList",r[r.Map=17]="Map",r[r.Duration=18]="Duration",r[r.LargeBinary=19]="LargeBinary",r[r.LargeUtf8=20]="LargeUtf8",r[r.LargeList=21]="LargeList",r[r.RunEndEncoded=22]="RunEndEncoded"})(yt||(yt={}));var jt=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsField(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsField(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}name(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}nullable(){let t=this.bb.__offset(this.bb_pos,6);return t?!!this.bb.readInt8(this.bb_pos+t):!1}typeType(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readUint8(this.bb_pos+t):yt.NONE}type(t){let e=this.bb.__offset(this.bb_pos,10);return e?this.bb.__union(t,this.bb_pos+e):null}dictionary(t){let e=this.bb.__offset(this.bb_pos,12);return e?(t||new Je).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}children(t,e){let n=this.bb.__offset(this.bb_pos,14);return n?(e||new r).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}childrenLength(){let t=this.bb.__offset(this.bb_pos,14);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,16);return n?(e||new Ot).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,16);return t?this.bb.__vector_len(this.bb_pos+t):0}static startField(t){t.startObject(7)}static addName(t,e){t.addFieldOffset(0,e,0)}static addNullable(t,e){t.addFieldInt8(1,+e,0)}static addTypeType(t,e){t.addFieldInt8(2,e,yt.NONE)}static addType(t,e){t.addFieldOffset(3,e,0)}static addDictionary(t,e){t.addFieldOffset(4,e,0)}static addChildren(t,e){t.addFieldOffset(5,e,0)}static createChildrenVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startChildrenVector(t,e){t.startVector(4,e,4)}static addCustomMetadata(t,e){t.addFieldOffset(6,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endField(t){return t.endObject()}};var te=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsSchema(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSchema(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}endianness(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Mr.Little}fields(t,e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new jt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}fieldsLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new Ot).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}features(t){let e=this.bb.__offset(this.bb_pos,10);return e?this.bb.readInt64(this.bb.__vector(this.bb_pos+e)+t*8):BigInt(0)}featuresLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.__vector_len(this.bb_pos+t):0}static startSchema(t){t.startObject(4)}static addEndianness(t,e){t.addFieldInt16(0,e,Mr.Little)}static addFields(t,e){t.addFieldOffset(1,e,0)}static createFieldsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startFieldsVector(t,e){t.startVector(4,e,4)}static addCustomMetadata(t,e){t.addFieldOffset(2,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static addFeatures(t,e){t.addFieldOffset(3,e,0)}static createFeaturesVector(t,e){t.startVector(8,e.length,8);for(let n=e.length-1;n>=0;n--)t.addInt64(e[n]);return t.endVector()}static startFeaturesVector(t,e){t.startVector(8,e,8)}static endSchema(t){return t.endObject()}static finishSchemaBuffer(t,e){t.finish(e)}static finishSizePrefixedSchemaBuffer(t,e){t.finish(e,void 0,!0)}static createSchema(t,e,n,i,s){return r.startSchema(t),r.addEndianness(t,e),r.addFields(t,n),r.addCustomMetadata(t,i),r.addFeatures(t,s),r.endSchema(t)}};var fe=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFooter(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFooter(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}version(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Rr.V1}schema(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new te).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}dictionaries(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new en).__init(this.bb.__vector(this.bb_pos+n)+t*24,this.bb):null}dictionariesLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}recordBatches(t,e){let n=this.bb.__offset(this.bb_pos,10);return n?(e||new en).__init(this.bb.__vector(this.bb_pos+n)+t*24,this.bb):null}recordBatchesLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,12);return n?(e||new Ot).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}static startFooter(t){t.startObject(5)}static addVersion(t,e){t.addFieldInt16(0,e,Rr.V1)}static addSchema(t,e){t.addFieldOffset(1,e,0)}static addDictionaries(t,e){t.addFieldOffset(2,e,0)}static startDictionariesVector(t,e){t.startVector(24,e,8)}static addRecordBatches(t,e){t.addFieldOffset(3,e,0)}static startRecordBatchesVector(t,e){t.startVector(24,e,8)}static addCustomMetadata(t,e){t.addFieldOffset(4,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endFooter(t){return t.endObject()}static finishFooterBuffer(t,e){t.finish(e)}static finishSizePrefixedFooterBuffer(t,e){t.finish(e,void 0,!0)}};var it=class r{constructor(t=[],e,n){this.fields=t||[],this.metadata=e||new Map,n||(n=Aa(t)),this.dictionaries=n}get[Symbol.toStringTag](){return"Schema"}get names(){return this.fields.map(t=>t.name)}toString(){return"Schema<{ ".concat(this.fields.map((t,e)=>"".concat(e,": ").concat(t)).join(", ")," }>")}select(t){let e=new Set(t),n=this.fields.filter(i=>e.has(i.name));return new r(n,this.metadata)}selectAt(t){let e=t.map(n=>this.fields[n]).filter(Boolean);return new r(e,this.metadata)}assign(...t){let e=t[0]instanceof r?t[0]:Array.isArray(t[0])?new r(t[0]):new r(t),n=[...this.fields],i=Gs(Gs(new Map,this.metadata),e.metadata),s=e.fields.filter(a=>{let c=n.findIndex(f=>f.name===a.name);return~c?(n[c]=a.clone({metadata:Gs(Gs(new Map,n[c].metadata),a.metadata)}))&&!1:!0}),o=Aa(s,new Map);return new r([...n,...s],i,new Map([...this.dictionaries,...o]))}};it.prototype.fields=null;it.prototype.metadata=null;it.prototype.dictionaries=null;var X=class r{static new(...t){let[e,n,i,s]=t;return t[0]&&typeof t[0]=="object"&&({name:e}=t[0],n===void 0&&(n=t[0].type),i===void 0&&(i=t[0].nullable),s===void 0&&(s=t[0].metadata)),new r("".concat(e),n,i,s)}constructor(t,e,n=!1,i){this.name=t,this.type=e,this.nullable=n,this.metadata=i||new Map}get typeId(){return this.type.typeId}get[Symbol.toStringTag](){return"Field"}toString(){return"".concat(this.name,": ").concat(this.type)}clone(...t){let[e,n,i,s]=t;return!t[0]||typeof t[0]!="object"?[e=this.name,n=this.type,i=this.nullable,s=this.metadata]=t:{name:e=this.name,type:n=this.type,nullable:i=this.nullable,metadata:s=this.metadata}=t[0],r.new(e,n,i,s)}};X.prototype.type=null;X.prototype.name=null;X.prototype.nullable=null;X.prototype.metadata=null;function Gs(r,t){return new Map([...r||new Map,...t||new Map])}function Aa(r,t=new Map){for(let e=-1,n=r.length;++e<n;){let s=r[e].type;if(x.isDictionary(s)){if(!t.has(s.id))t.set(s.id,s.dictionary);else if(t.get(s.id)!==s.dictionary)throw new Error("Cannot create Schema containing two different dictionaries with the same Id")}s.children&&s.children.length>0&&Aa(s.children,t)}return t}var e_=rn,r_=de,yr=class{static decode(t){t=new r_(L(t));let e=fe.getRootAsFooter(t),n=it.decode(e.schema());return new Ta(n,e)}static encode(t){let e=new e_,n=it.encode(e,t.schema);fe.startRecordBatchesVector(e,t.numRecordBatches);for(let o of[...t.recordBatches()].slice().reverse())br.encode(e,o);let i=e.endVector();fe.startDictionariesVector(e,t.numDictionaries);for(let o of[...t.dictionaryBatches()].slice().reverse())br.encode(e,o);let s=e.endVector();return fe.startFooter(e),fe.addSchema(e,n),fe.addVersion(e,Ut.V4),fe.addRecordBatches(e,i),fe.addDictionaries(e,s),fe.finishFooterBuffer(e,fe.endFooter(e)),e.asUint8Array()}get numRecordBatches(){return this._recordBatches.length}get numDictionaries(){return this._dictionaryBatches.length}constructor(t,e=Ut.V4,n,i){this.schema=t,this.version=e,n&&(this._recordBatches=n),i&&(this._dictionaryBatches=i)}*recordBatches(){for(let t,e=-1,n=this.numRecordBatches;++e<n;)(t=this.getRecordBatch(e))&&(yield t)}*dictionaryBatches(){for(let t,e=-1,n=this.numDictionaries;++e<n;)(t=this.getDictionaryBatch(e))&&(yield t)}getRecordBatch(t){return t>=0&&t<this.numRecordBatches&&this._recordBatches[t]||null}getDictionaryBatch(t){return t>=0&&t<this.numDictionaries&&this._dictionaryBatches[t]||null}};var Ta=class extends yr{get numRecordBatches(){return this._footer.recordBatchesLength()}get numDictionaries(){return this._footer.dictionariesLength()}constructor(t,e){super(t,e.version()),this._footer=e}getRecordBatch(t){if(t>=0&&t<this.numRecordBatches){let e=this._footer.recordBatches(t);if(e)return br.decode(e)}return null}getDictionaryBatch(t){if(t>=0&&t<this.numDictionaries){let e=this._footer.dictionaries(t);if(e)return br.decode(e)}return null}},br=class r{static decode(t){return new r(t.metaDataLength(),t.bodyLength(),t.offset())}static encode(t,e){let{metaDataLength:n}=e,i=BigInt(e.offset),s=BigInt(e.bodyLength);return en.createBlock(t,i,n,s)}constructor(t,e,n){this.metaDataLength=t,this.offset=Zt(n),this.bodyLength=Zt(e)}};var ht=Object.freeze({done:!0,value:void 0}),wi=class{constructor(t){this._json=t}get schema(){return this._json.schema}get batches(){return this._json.batches||[]}get dictionaries(){return this._json.dictionaries||[]}},nn=class{tee(){return this._getDOMStream().tee()}pipe(t,e){return this._getNodeStream().pipe(t,e)}pipeTo(t,e){return this._getDOMStream().pipeTo(t,e)}pipeThrough(t,e){return this._getDOMStream().pipeThrough(t,e)}_getDOMStream(){return this._DOMStream||(this._DOMStream=this.toDOMStream())}_getNodeStream(){return this._nodeStream||(this._nodeStream=this.toNodeStream())}},Ks=class extends nn{constructor(){super(),this._values=[],this.resolvers=[],this._closedPromise=new Promise(t=>this._closedPromiseResolve=t)}get closed(){return this._closedPromise}cancel(t){return F(this,void 0,void 0,function*(){yield this.return(t)})}write(t){this._ensureOpen()&&(this.resolvers.length<=0?this._values.push(t):this.resolvers.shift().resolve({done:!1,value:t}))}abort(t){this._closedPromiseResolve&&(this.resolvers.length<=0?this._error={error:t}:this.resolvers.shift().reject({done:!0,value:t}))}close(){if(this._closedPromiseResolve){let{resolvers:t}=this;for(;t.length>0;)t.shift().resolve(ht);this._closedPromiseResolve(),this._closedPromiseResolve=void 0}}[Symbol.asyncIterator](){return this}toDOMStream(t){return kt.toDOMStream(this._closedPromiseResolve||this._error?this:this._values,t)}toNodeStream(t){return kt.toNodeStream(this._closedPromiseResolve||this._error?this:this._values,t)}throw(t){return F(this,void 0,void 0,function*(){return yield this.abort(t),ht})}return(t){return F(this,void 0,void 0,function*(){return yield this.close(),ht})}read(t){return F(this,void 0,void 0,function*(){return(yield this.next(t,"read")).value})}peek(t){return F(this,void 0,void 0,function*(){return(yield this.next(t,"peek")).value})}next(...t){return this._values.length>0?Promise.resolve({done:!1,value:this._values.shift()}):this._error?Promise.reject({done:!0,value:this._error.error}):this._closedPromiseResolve?new Promise((e,n)=>{this.resolvers.push({resolve:e,reject:n})}):Promise.resolve(ht)}_ensureOpen(){if(this._closedPromiseResolve)return!0;throw new Error("AsyncQueue is closed")}};var Ze=class extends Ks{write(t){if((t=L(t)).byteLength>0)return super.write(t)}toString(t=!1){return t?qn(this.toUint8Array(!0)):this.toUint8Array(!1).then(qn)}toUint8Array(t=!1){return t?ae(this._values)[0]:(()=>F(this,void 0,void 0,function*(){var e,n,i,s;let o=[],a=0;try{for(var c=!0,f=Ae(this),p;p=yield f.next(),e=p.done,!e;){s=p.value,c=!1;try{let y=s;o.push(y),a+=y.byteLength}finally{c=!0}}}catch(y){n={error:y}}finally{try{!c&&!e&&(i=f.return)&&(yield i.call(f))}finally{if(n)throw n.error}}return ae(o,a)[0]}))()}},Qe=class{constructor(t){t&&(this.source=new xa(kt.fromIterable(t)))}[Symbol.iterator](){return this}next(t){return this.source.next(t)}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}peek(t){return this.source.peek(t)}read(t){return this.source.read(t)}},Se=class r{constructor(t){t instanceof r?this.source=t.source:t instanceof Ze?this.source=new gr(kt.fromAsyncIterable(t)):ds(t)?this.source=new gr(kt.fromNodeStream(t)):Zn(t)?this.source=new gr(kt.fromDOMStream(t)):ls(t)?this.source=new gr(kt.fromDOMStream(t.body)):xe(t)?this.source=new gr(kt.fromIterable(t)):Te(t)?this.source=new gr(kt.fromAsyncIterable(t)):be(t)&&(this.source=new gr(kt.fromAsyncIterable(t)))}[Symbol.asyncIterator](){return this}next(t){return this.source.next(t)}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}get closed(){return this.source.closed}cancel(t){return this.source.cancel(t)}peek(t){return this.source.peek(t)}read(t){return this.source.read(t)}},xa=class{constructor(t){this.source=t}cancel(t){this.return(t)}peek(t){return this.next(t,"peek").value}read(t){return this.next(t,"read").value}next(t,e="read"){return this.source.next({cmd:e,size:t})}throw(t){return Object.create(this.source.throw&&this.source.throw(t)||ht)}return(t){return Object.create(this.source.return&&this.source.return(t)||ht)}},gr=class{constructor(t){this.source=t,this._closedPromise=new Promise(e=>this._closedPromiseResolve=e)}cancel(t){return F(this,void 0,void 0,function*(){yield this.return(t)})}get closed(){return this._closedPromise}read(t){return F(this,void 0,void 0,function*(){return(yield this.next(t,"read")).value})}peek(t){return F(this,void 0,void 0,function*(){return(yield this.next(t,"peek")).value})}next(t,e="read"){return F(this,void 0,void 0,function*(){return yield this.source.next({cmd:e,size:t})})}throw(t){return F(this,void 0,void 0,function*(){let e=this.source.throw&&(yield this.source.throw(t))||ht;return this._closedPromiseResolve&&this._closedPromiseResolve(),this._closedPromiseResolve=void 0,Object.create(e)})}return(t){return F(this,void 0,void 0,function*(){let e=this.source.return&&(yield this.source.return(t))||ht;return this._closedPromiseResolve&&this._closedPromiseResolve(),this._closedPromiseResolve=void 0,Object.create(e)})}};var vi=class extends Qe{constructor(t,e){super(),this.position=0,this.buffer=L(t),this.size=e===void 0?this.buffer.byteLength:e}readInt32(t){let{buffer:e,byteOffset:n}=this.readAt(t,4);return new DataView(e,n).getInt32(0,!0)}seek(t){return this.position=Math.min(t,this.size),t<this.size}read(t){let{buffer:e,size:n,position:i}=this;return e&&i<n?(typeof t!="number"&&(t=Number.POSITIVE_INFINITY),this.position=Math.min(n,i+Math.min(n-i,t)),e.subarray(i,this.position)):null}readAt(t,e){let n=this.buffer,i=Math.min(this.size,t+e);return n?n.subarray(t,i):new Uint8Array(e)}close(){this.buffer&&(this.buffer=null)}throw(t){return this.close(),{done:!0,value:t}}return(t){return this.close(),{done:!0,value:t}}},Hr=class extends Se{constructor(t,e){super(),this.position=0,this._handle=t,typeof e=="number"?this.size=e:this._pending=(()=>F(this,void 0,void 0,function*(){this.size=(yield t.stat()).size,delete this._pending}))()}readInt32(t){return F(this,void 0,void 0,function*(){let{buffer:e,byteOffset:n}=yield this.readAt(t,4);return new DataView(e,n).getInt32(0,!0)})}seek(t){return F(this,void 0,void 0,function*(){return this._pending&&(yield this._pending),this.position=Math.min(t,this.size),t<this.size})}read(t){return F(this,void 0,void 0,function*(){this._pending&&(yield this._pending);let{_handle:e,size:n,position:i}=this;if(e&&i<n){typeof t!="number"&&(t=Number.POSITIVE_INFINITY);let s=i,o=0,a=0,c=Math.min(n,s+Math.min(n-s,t)),f=new Uint8Array(Math.max(0,(this.position=c)-s));for(;(s+=a)<c&&(o+=a)<f.byteLength;)({bytesRead:a}=yield e.read(f,o,f.byteLength-o,s));return f}return null})}readAt(t,e){return F(this,void 0,void 0,function*(){this._pending&&(yield this._pending);let{_handle:n,size:i}=this;if(n&&t+e<i){let s=Math.min(i,t+e),o=new Uint8Array(s-t);return(yield n.read(o,0,e,t)).buffer}return new Uint8Array(e)})}close(){return F(this,void 0,void 0,function*(){let t=this._handle;this._handle=null,t&&(yield t.close())})}throw(t){return F(this,void 0,void 0,function*(){return yield this.close(),{done:!0,value:t}})}return(t){return F(this,void 0,void 0,function*(){return yield this.close(),{done:!0,value:t}})}};var Ea={};Kr(Ea,{BaseInt64:()=>Si,Int128:()=>Ii,Int64:()=>wr,Uint64:()=>vt});function On(r){return r<0&&(r=4294967295+r+1),"0x".concat(r.toString(16))}var Rn=8,Da=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8],Si=class{constructor(t){this.buffer=t}high(){return this.buffer[1]}low(){return this.buffer[0]}_times(t){let e=new Uint32Array([this.buffer[1]>>>16,this.buffer[1]&65535,this.buffer[0]>>>16,this.buffer[0]&65535]),n=new Uint32Array([t.buffer[1]>>>16,t.buffer[1]&65535,t.buffer[0]>>>16,t.buffer[0]&65535]),i=e[3]*n[3];this.buffer[0]=i&65535;let s=i>>>16;return i=e[2]*n[3],s+=i,i=e[3]*n[2]>>>0,s+=i,this.buffer[0]+=s<<16,this.buffer[1]=s>>>0<i?65536:0,this.buffer[1]+=s>>>16,this.buffer[1]+=e[1]*n[3]+e[2]*n[2]+e[3]*n[1],this.buffer[1]+=e[0]*n[3]+e[1]*n[2]+e[2]*n[1]+e[3]*n[0]<<16,this}_plus(t){let e=this.buffer[0]+t.buffer[0]>>>0;this.buffer[1]+=t.buffer[1],e<this.buffer[0]>>>0&&++this.buffer[1],this.buffer[0]=e}lessThan(t){return this.buffer[1]<t.buffer[1]||this.buffer[1]===t.buffer[1]&&this.buffer[0]<t.buffer[0]}equals(t){return this.buffer[1]===t.buffer[1]&&this.buffer[0]==t.buffer[0]}greaterThan(t){return t.lessThan(this)}hex(){return"".concat(On(this.buffer[1])," ").concat(On(this.buffer[0]))}},vt=class r extends Si{times(t){return this._times(t),this}plus(t){return this._plus(t),this}static from(t,e=new Uint32Array(2)){return r.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(2)){return r.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(2)){let n=t.length,i=new r(e);for(let s=0;s<n;){let o=Rn<n-s?Rn:n-s,a=new r(new Uint32Array([Number.parseInt(t.slice(s,s+o),10),0])),c=new r(new Uint32Array([Da[o],0]));i.times(c),i.plus(a),s+=o}return i}static convertArray(t){let e=new Uint32Array(t.length*2);for(let n=-1,i=t.length;++n<i;)r.from(t[n],new Uint32Array(e.buffer,e.byteOffset+2*n*4,2));return e}static multiply(t,e){return new r(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new r(new Uint32Array(t.buffer)).plus(e)}},wr=class r extends Si{negate(){return this.buffer[0]=~this.buffer[0]+1,this.buffer[1]=~this.buffer[1],this.buffer[0]==0&&++this.buffer[1],this}times(t){return this._times(t),this}plus(t){return this._plus(t),this}lessThan(t){let e=this.buffer[1]<<0,n=t.buffer[1]<<0;return e<n||e===n&&this.buffer[0]<t.buffer[0]}static from(t,e=new Uint32Array(2)){return r.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(2)){return r.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(2)){let n=t.startsWith("-"),i=t.length,s=new r(e);for(let o=n?1:0;o<i;){let a=Rn<i-o?Rn:i-o,c=new r(new Uint32Array([Number.parseInt(t.slice(o,o+a),10),0])),f=new r(new Uint32Array([Da[a],0]));s.times(f),s.plus(c),o+=a}return n?s.negate():s}static convertArray(t){let e=new Uint32Array(t.length*2);for(let n=-1,i=t.length;++n<i;)r.from(t[n],new Uint32Array(e.buffer,e.byteOffset+2*n*4,2));return e}static multiply(t,e){return new r(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new r(new Uint32Array(t.buffer)).plus(e)}},Ii=class r{constructor(t){this.buffer=t}high(){return new wr(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset+8,2))}low(){return new wr(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset,2))}negate(){return this.buffer[0]=~this.buffer[0]+1,this.buffer[1]=~this.buffer[1],this.buffer[2]=~this.buffer[2],this.buffer[3]=~this.buffer[3],this.buffer[0]==0&&++this.buffer[1],this.buffer[1]==0&&++this.buffer[2],this.buffer[2]==0&&++this.buffer[3],this}times(t){let e=new vt(new Uint32Array([this.buffer[3],0])),n=new vt(new Uint32Array([this.buffer[2],0])),i=new vt(new Uint32Array([this.buffer[1],0])),s=new vt(new Uint32Array([this.buffer[0],0])),o=new vt(new Uint32Array([t.buffer[3],0])),a=new vt(new Uint32Array([t.buffer[2],0])),c=new vt(new Uint32Array([t.buffer[1],0])),f=new vt(new Uint32Array([t.buffer[0],0])),p=vt.multiply(s,f);this.buffer[0]=p.low();let y=new vt(new Uint32Array([p.high(),0]));return p=vt.multiply(i,f),y.plus(p),p=vt.multiply(s,c),y.plus(p),this.buffer[1]=y.low(),this.buffer[3]=y.lessThan(p)?1:0,this.buffer[2]=y.high(),new vt(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset+8,2)).plus(vt.multiply(n,f)).plus(vt.multiply(i,c)).plus(vt.multiply(s,a)),this.buffer[3]+=vt.multiply(e,f).plus(vt.multiply(n,c)).plus(vt.multiply(i,a)).plus(vt.multiply(s,o)).low(),this}plus(t){let e=new Uint32Array(4);return e[3]=this.buffer[3]+t.buffer[3]>>>0,e[2]=this.buffer[2]+t.buffer[2]>>>0,e[1]=this.buffer[1]+t.buffer[1]>>>0,e[0]=this.buffer[0]+t.buffer[0]>>>0,e[0]<this.buffer[0]>>>0&&++e[1],e[1]<this.buffer[1]>>>0&&++e[2],e[2]<this.buffer[2]>>>0&&++e[3],this.buffer[3]=e[3],this.buffer[2]=e[2],this.buffer[1]=e[1],this.buffer[0]=e[0],this}hex(){return"".concat(On(this.buffer[3])," ").concat(On(this.buffer[2])," ").concat(On(this.buffer[1])," ").concat(On(this.buffer[0]))}static multiply(t,e){return new r(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new r(new Uint32Array(t.buffer)).plus(e)}static from(t,e=new Uint32Array(4)){return r.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(4)){return r.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(4)){let n=t.startsWith("-"),i=t.length,s=new r(e);for(let o=n?1:0;o<i;){let a=Rn<i-o?Rn:i-o,c=new r(new Uint32Array([Number.parseInt(t.slice(o,o+a),10),0,0,0])),f=new r(new Uint32Array([Da[a],0,0,0]));s.times(f),s.plus(c),o+=a}return n?s.negate():s}static convertArray(t){let e=new Uint32Array(t.length*4);for(let n=-1,i=t.length;++n<i;)r.from(t[n],new Uint32Array(e.buffer,e.byteOffset+4*4*n,4));return e}};var Fi=class extends D{constructor(t,e,n,i){super(),this.nodesIndex=-1,this.buffersIndex=-1,this.bytes=t,this.nodes=e,this.buffers=n,this.dictionaries=i}visit(t){return super.visit(t instanceof X?t.type:t)}visitNull(t,{length:e}=this.nextFieldNode()){return P({type:t,length:e})}visitBool(t,{length:e,nullCount:n}=this.nextFieldNode()){return P({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitInt(t,{length:e,nullCount:n}=this.nextFieldNode()){return P({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitFloat(t,{length:e,nullCount:n}=this.nextFieldNode()){return P({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitUtf8(t,{length:e,nullCount:n}=this.nextFieldNode()){return P({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),data:this.readData(t)})}visitBinary(t,{length:e,nullCount:n}=this.nextFieldNode()){return P({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),data:this.readData(t)})}visitFixedSizeBinary(t,{length:e,nullCount:n}=this.nextFieldNode()){return P({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitDate(t,{length:e,nullCount:n}=this.nextFieldNode()){return P({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitTimestamp(t,{length:e,nullCount:n}=this.nextFieldNode()){return P({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitTime(t,{length:e,nullCount:n}=this.nextFieldNode()){return P({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitDecimal(t,{length:e,nullCount:n}=this.nextFieldNode()){return P({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitList(t,{length:e,nullCount:n}=this.nextFieldNode()){return P({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),child:this.visit(t.children[0])})}visitStruct(t,{length:e,nullCount:n}=this.nextFieldNode()){return P({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),children:this.visitMany(t.children)})}visitUnion(t){return t.mode===wt.Sparse?this.visitSparseUnion(t):this.visitDenseUnion(t)}visitDenseUnion(t,{length:e,nullCount:n}=this.nextFieldNode()){return P({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),typeIds:this.readTypeIds(t),valueOffsets:this.readOffsets(t),children:this.visitMany(t.children)})}visitSparseUnion(t,{length:e,nullCount:n}=this.nextFieldNode()){return P({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),typeIds:this.readTypeIds(t),children:this.visitMany(t.children)})}visitDictionary(t,{length:e,nullCount:n}=this.nextFieldNode()){return P({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t.indices),dictionary:this.readDictionary(t)})}visitInterval(t,{length:e,nullCount:n}=this.nextFieldNode()){return P({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitFixedSizeList(t,{length:e,nullCount:n}=this.nextFieldNode()){return P({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),child:this.visit(t.children[0])})}visitMap(t,{length:e,nullCount:n}=this.nextFieldNode()){return P({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),child:this.visit(t.children[0])})}nextFieldNode(){return this.nodes[++this.nodesIndex]}nextBufferRange(){return this.buffers[++this.buffersIndex]}readNullBitmap(t,e,n=this.nextBufferRange()){return e>0&&this.readData(t,n)||new Uint8Array(0)}readOffsets(t,e){return this.readData(t,e)}readTypeIds(t,e){return this.readData(t,e)}readData(t,{length:e,offset:n}=this.nextBufferRange()){return this.bytes.subarray(n,n+e)}readDictionary(t){return this.dictionaries.get(t.id)}},Js=class extends Fi{constructor(t,e,n,i){super(new Uint8Array(0),e,n,i),this.sources=t}readNullBitmap(t,e,{offset:n}=this.nextBufferRange()){return e<=0?new Uint8Array(0):Qr(this.sources[n])}readOffsets(t,{offset:e}=this.nextBufferRange()){return $(Uint8Array,$(Int32Array,this.sources[e]))}readTypeIds(t,{offset:e}=this.nextBufferRange()){return $(Uint8Array,$(t.ArrayType,this.sources[e]))}readData(t,{offset:e}=this.nextBufferRange()){let{sources:n}=this;return x.isTimestamp(t)?$(Uint8Array,wr.convertArray(n[e])):(x.isInt(t)||x.isTime(t))&&t.bitWidth===64?$(Uint8Array,wr.convertArray(n[e])):x.isDate(t)&&t.unit===Ct.MILLISECOND?$(Uint8Array,wr.convertArray(n[e])):x.isDecimal(t)?$(Uint8Array,Ii.convertArray(n[e])):x.isBinary(t)||x.isFixedSizeBinary(t)?n_(n[e]):x.isBool(t)?Qr(n[e]):x.isUtf8(t)?Ar(n[e].join("")):$(Uint8Array,$(t.ArrayType,n[e].map(i=>+i)))}};function n_(r){let t=r.join(""),e=new Uint8Array(t.length/2);for(let n=0;n<t.length;n+=2)e[n>>1]=Number.parseInt(t.slice(n,n+2),16);return e}var Mn=class extends Ge{constructor(t){super(t),this._values=new Or(new Uint8Array(0))}get byteLength(){let t=this._pendingLength+this.length*4;return this._offsets&&(t+=this._offsets.byteLength),this._values&&(t+=this._values.byteLength),this._nulls&&(t+=this._nulls.byteLength),t}setValue(t,e){return super.setValue(t,L(e))}_flushPending(t,e){let n=this._offsets,i=this._values.reserve(e).buffer,s=0;for(let[o,a]of t)if(a===void 0)n.set(o,0);else{let c=a.length;i.set(a,s),n.set(o,c),s+=c}}};var qs=class extends _t{constructor(t){super(t),this._values=new xn}setValue(t,e){this._values.set(t,+e)}};var sn=class extends Nt{};sn.prototype._setValue=ua;var Bi=class extends sn{};Bi.prototype._setValue=Fs;var Ai=class extends sn{};Ai.prototype._setValue=Bs;var Ti=class extends Nt{};Ti.prototype._setValue=ha;var Zs=class extends _t{constructor({type:t,nullValues:e,dictionaryHashFunction:n}){super({type:new ce(t.dictionary,t.indices,t.id,t.isOrdered)}),this._nulls=null,this._dictionaryOffset=0,this._keysToIndices=Object.create(null),this.indices=on({type:this.type.indices,nullValues:e}),this.dictionary=on({type:this.type.dictionary,nullValues:null}),typeof n=="function"&&(this.valueToKey=n)}get values(){return this.indices.values}get nullCount(){return this.indices.nullCount}get nullBitmap(){return this.indices.nullBitmap}get byteLength(){return this.indices.byteLength+this.dictionary.byteLength}get reservedLength(){return this.indices.reservedLength+this.dictionary.reservedLength}get reservedByteLength(){return this.indices.reservedByteLength+this.dictionary.reservedByteLength}isValid(t){return this.indices.isValid(t)}setValid(t,e){let n=this.indices;return e=n.setValid(t,e),this.length=n.length,e}setValue(t,e){let n=this._keysToIndices,i=this.valueToKey(e),s=n[i];return s===void 0&&(n[i]=s=this._dictionaryOffset+this.dictionary.append(e).length-1),this.indices.setValue(t,s)}flush(){let t=this.type,e=this._dictionary,n=this.dictionary.toVector(),i=this.indices.flush().clone(t);return i.dictionary=e?e.concat(n):n,this.finished||(this._dictionaryOffset+=n.length),this._dictionary=i.dictionary,this.clear(),i}finish(){return this.indices.finish(),this.dictionary.finish(),this._dictionaryOffset=0,this._keysToIndices=Object.create(null),super.finish()}clear(){return this.indices.clear(),this.dictionary.clear(),super.clear()}valueToKey(t){return typeof t=="string"?t:"".concat(t)}};var xi=class extends Nt{};xi.prototype._setValue=la;var Qs=class extends _t{setValue(t,e){let[n]=this.children,i=t*this.stride;for(let s=-1,o=e.length;++s<o;)n.set(i+s,e[s])}addChild(t,e="0"){if(this.numChildren>0)throw new Error("FixedSizeListBuilder can only have one child.");let n=this.children.push(t);return this.type=new Ue(this.type.listSize,new X(e,t.type,!0)),n}};var an=class extends Nt{setValue(t,e){this._values.set(t,e)}},to=class extends an{setValue(t,e){super.setValue(t,ni(e))}},eo=class extends an{},ro=class extends an{};var cn=class extends Nt{};cn.prototype._setValue=pa;var Di=class extends cn{};Di.prototype._setValue=Us;var Ei=class extends cn{};Ei.prototype._setValue=Ns;var Ie=class extends Nt{setValue(t,e){this._values.set(t,e)}},no=class extends Ie{},io=class extends Ie{},so=class extends Ie{},oo=class extends Ie{},ao=class extends Ie{},co=class extends Ie{},lo=class extends Ie{},uo=class extends Ie{};var fo=class extends Ge{constructor(t){super(t),this._offsets=new Dn}addChild(t,e="0"){if(this.numChildren>0)throw new Error("ListBuilder can only have one child.");return this.children[this.numChildren]=t,this.type=new Re(new X(e,t.type,!0)),this.numChildren-1}_flushPending(t){let e=this._offsets,[n]=this.children;for(let[i,s]of t)if(typeof s>"u")e.set(i,0);else{let o=s.length,a=e.set(i,o).buffer[i];for(let c=-1;++c<o;)n.set(a+c,s[c])}}};var ho=class extends Ge{set(t,e){return super.set(t,e)}setValue(t,e){let n=e instanceof Map?e:new Map(Object.entries(e)),i=this._pending||(this._pending=new Map),s=i.get(t);s&&(this._pendingLength-=s.size),this._pendingLength+=n.size,i.set(t,n)}addChild(t,e="".concat(this.numChildren)){if(this.numChildren>0)throw new Error("ListBuilder can only have one child.");return this.children[this.numChildren]=t,this.type=new Ne(new X(e,t.type,!0),this.type.keysSorted),this.numChildren-1}_flushPending(t){let e=this._offsets,[n]=this.children;for(let[i,s]of t)if(s===void 0)e.set(i,0);else{let{[i]:o,[i+1]:a}=e.set(i,s.size).buffer;for(let c of s.entries())if(n.set(o,c),++o>=a)break}}};var po=class extends _t{setValue(t,e){}setValid(t,e){return this.length=Math.max(t+1,this.length),e}};var mo=class extends _t{setValue(t,e){let{children:n,type:i}=this;switch(Array.isArray(e)||e.constructor){case!0:return i.children.forEach((s,o)=>n[o].set(t,e[o]));case Map:return i.children.forEach((s,o)=>n[o].set(t,e.get(s.name)));default:return i.children.forEach((s,o)=>n[o].set(t,e[s.name]))}}setValid(t,e){return super.setValid(t,e)||this.children.forEach(n=>n.setValid(t,e)),e}addChild(t,e="".concat(this.numChildren)){let n=this.children.push(t);return this.type=new ft([...this.type.children,new X(e,t.type,!0)]),n}};var vr=class extends Nt{};vr.prototype._setValue=da;var Oi=class extends vr{};Oi.prototype._setValue=As;var Ri=class extends vr{};Ri.prototype._setValue=Ts;var Mi=class extends vr{};Mi.prototype._setValue=xs;var Ui=class extends vr{};Ui.prototype._setValue=Ds;var Sr=class extends Nt{};Sr.prototype._setValue=fa;var Ni=class extends Sr{};Ni.prototype._setValue=Es;var Li=class extends Sr{};Li.prototype._setValue=Os;var ki=class extends Sr{};ki.prototype._setValue=Rs;var Ci=class extends Sr{};Ci.prototype._setValue=Ms;var Un=class extends _t{constructor(t){super(t),this._typeIds=new pr(new Int8Array(0),1),typeof t.valueToChildTypeId=="function"&&(this._valueToChildTypeId=t.valueToChildTypeId)}get typeIdToChildIndex(){return this.type.typeIdToChildIndex}append(t,e){return this.set(this.length,t,e)}set(t,e,n){return n===void 0&&(n=this._valueToChildTypeId(this,e,t)),this.setValid(t,this.isValid(e))&&this.setValue(t,e,n),this}setValue(t,e,n){this._typeIds.set(t,n);let i=this.type.typeIdToChildIndex[n],s=this.children[i];s==null||s.set(t,e)}addChild(t,e="".concat(this.children.length)){let n=this.children.push(t),{type:{children:i,mode:s,typeIds:o}}=this,a=[...i,new X(e,t.type)];return this.type=new Me(s,[...o,n],a),n}_valueToChildTypeId(t,e,n){throw new Error("Cannot map UnionBuilder value to child typeId. Pass the `childTypeId` as the second argument to unionBuilder.append(), or supply a `valueToChildTypeId` function as part of the UnionBuilder constructor options.")}},_o=class extends Un{},yo=class extends Un{constructor(t){super(t),this._offsets=new pr(new Int32Array(0))}setValue(t,e,n){let i=this._typeIds.set(t,n).buffer[t],s=this.getChildAt(this.type.typeIdToChildIndex[i]),o=this._offsets.set(t,s.length).buffer[t];s==null||s.set(o,e)}};var Pi=class extends Ge{constructor(t){super(t),this._values=new Or(new Uint8Array(0))}get byteLength(){let t=this._pendingLength+this.length*4;return this._offsets&&(t+=this._offsets.byteLength),this._values&&(t+=this._values.byteLength),this._nulls&&(t+=this._nulls.byteLength),t}setValue(t,e){return super.setValue(t,Ar(e))}_flushPending(t,e){}};Pi.prototype._flushPending=Mn.prototype._flushPending;var Oa=class extends D{visitNull(){return po}visitBool(){return qs}visitInt(){return Ie}visitInt8(){return no}visitInt16(){return io}visitInt32(){return so}visitInt64(){return oo}visitUint8(){return ao}visitUint16(){return co}visitUint32(){return lo}visitUint64(){return uo}visitFloat(){return an}visitFloat16(){return to}visitFloat32(){return eo}visitFloat64(){return ro}visitUtf8(){return Pi}visitBinary(){return Mn}visitFixedSizeBinary(){return xi}visitDate(){return sn}visitDateDay(){return Bi}visitDateMillisecond(){return Ai}visitTimestamp(){return vr}visitTimestampSecond(){return Oi}visitTimestampMillisecond(){return Ri}visitTimestampMicrosecond(){return Mi}visitTimestampNanosecond(){return Ui}visitTime(){return Sr}visitTimeSecond(){return Ni}visitTimeMillisecond(){return Li}visitTimeMicrosecond(){return ki}visitTimeNanosecond(){return Ci}visitDecimal(){return Ti}visitList(){return fo}visitStruct(){return mo}visitUnion(){return Un}visitDenseUnion(){return yo}visitSparseUnion(){return _o}visitDictionary(){return Zs}visitInterval(){return cn}visitIntervalDayTime(){return Di}visitIntervalYearMonth(){return Ei}visitFixedSizeList(){return Qs}visitMap(){return ho}},Wl=new Oa;var U=class extends D{compareSchemas(t,e){return t===e||e instanceof t.constructor&&this.compareManyFields(t.fields,e.fields)}compareManyFields(t,e){return t===e||Array.isArray(t)&&Array.isArray(e)&&t.length===e.length&&t.every((n,i)=>this.compareFields(n,e[i]))}compareFields(t,e){return t===e||e instanceof t.constructor&&t.name===e.name&&t.nullable===e.nullable&&this.visit(t.type,e.type)}};function ee(r,t){return t instanceof r.constructor}function Vi(r,t){return r===t||ee(r,t)}function Ir(r,t){return r===t||ee(r,t)&&r.bitWidth===t.bitWidth&&r.isSigned===t.isSigned}function bo(r,t){return r===t||ee(r,t)&&r.precision===t.precision}function i_(r,t){return r===t||ee(r,t)&&r.byteWidth===t.byteWidth}function Ra(r,t){return r===t||ee(r,t)&&r.unit===t.unit}function Hi(r,t){return r===t||ee(r,t)&&r.unit===t.unit&&r.timezone===t.timezone}function zi(r,t){return r===t||ee(r,t)&&r.unit===t.unit&&r.bitWidth===t.bitWidth}function s_(r,t){return r===t||ee(r,t)&&r.children.length===t.children.length&&tr.compareManyFields(r.children,t.children)}function o_(r,t){return r===t||ee(r,t)&&r.children.length===t.children.length&&tr.compareManyFields(r.children,t.children)}function Ma(r,t){return r===t||ee(r,t)&&r.mode===t.mode&&r.typeIds.every((e,n)=>e===t.typeIds[n])&&tr.compareManyFields(r.children,t.children)}function a_(r,t){return r===t||ee(r,t)&&r.id===t.id&&r.isOrdered===t.isOrdered&&tr.visit(r.indices,t.indices)&&tr.visit(r.dictionary,t.dictionary)}function Ua(r,t){return r===t||ee(r,t)&&r.unit===t.unit}function c_(r,t){return r===t||ee(r,t)&&r.listSize===t.listSize&&r.children.length===t.children.length&&tr.compareManyFields(r.children,t.children)}function l_(r,t){return r===t||ee(r,t)&&r.keysSorted===t.keysSorted&&r.children.length===t.children.length&&tr.compareManyFields(r.children,t.children)}U.prototype.visitNull=Vi;U.prototype.visitBool=Vi;U.prototype.visitInt=Ir;U.prototype.visitInt8=Ir;U.prototype.visitInt16=Ir;U.prototype.visitInt32=Ir;U.prototype.visitInt64=Ir;U.prototype.visitUint8=Ir;U.prototype.visitUint16=Ir;U.prototype.visitUint32=Ir;U.prototype.visitUint64=Ir;U.prototype.visitFloat=bo;U.prototype.visitFloat16=bo;U.prototype.visitFloat32=bo;U.prototype.visitFloat64=bo;U.prototype.visitUtf8=Vi;U.prototype.visitBinary=Vi;U.prototype.visitFixedSizeBinary=i_;U.prototype.visitDate=Ra;U.prototype.visitDateDay=Ra;U.prototype.visitDateMillisecond=Ra;U.prototype.visitTimestamp=Hi;U.prototype.visitTimestampSecond=Hi;U.prototype.visitTimestampMillisecond=Hi;U.prototype.visitTimestampMicrosecond=Hi;U.prototype.visitTimestampNanosecond=Hi;U.prototype.visitTime=zi;U.prototype.visitTimeSecond=zi;U.prototype.visitTimeMillisecond=zi;U.prototype.visitTimeMicrosecond=zi;U.prototype.visitTimeNanosecond=zi;U.prototype.visitDecimal=Vi;U.prototype.visitList=s_;U.prototype.visitStruct=o_;U.prototype.visitUnion=Ma;U.prototype.visitDenseUnion=Ma;U.prototype.visitSparseUnion=Ma;U.prototype.visitDictionary=a_;U.prototype.visitInterval=Ua;U.prototype.visitIntervalDayTime=Ua;U.prototype.visitIntervalYearMonth=Ua;U.prototype.visitFixedSizeList=c_;U.prototype.visitMap=l_;var tr=new U;function ln(r,t){return tr.compareSchemas(r,t)}function $l(r,t){return tr.compareFields(r,t)}function Yl(r,t){return tr.visit(r,t)}function on(r){let t=r.type,e=new(Wl.getVisitFn(t)())(r);if(t.children&&t.children.length>0){let n=r.children||[],i={nullValues:r.nullValues},s=Array.isArray(n)?(o,a)=>n[a]||i:({name:o})=>n[o]||i;for(let[o,a]of t.children.entries()){let{type:c}=a,f=s(a,o);e.children.push(on(Object.assign(Object.assign({},f),{type:c})))}}return e}function go(r,t){return u_(r,t.map(e=>e.data.concat()))}function u_(r,t){let e=[...r.fields],n=[],i={numBatches:t.reduce((y,w)=>Math.max(y,w.length),0)},s=0,o=0,a=-1,c=t.length,f,p=[];for(;i.numBatches-- >0;){for(o=Number.POSITIVE_INFINITY,a=-1;++a<c;)p[a]=f=t[a].shift(),o=Math.min(o,f?f.length:o);Number.isFinite(o)&&(p=d_(e,o,p,t,i),o>0&&(n[s++]=P({type:new ft(e),length:o,nullCount:0,children:p.slice()})))}return[r=r.assign(e),n.map(y=>new Ft(r,y))]}function d_(r,t,e,n,i){var s;let o=(t+63&-64)>>3;for(let a=-1,c=n.length;++a<c;){let f=e[a],p=f==null?void 0:f.length;if(p>=t)p===t?e[a]=f:(e[a]=f.slice(0,t),i.numBatches=Math.max(i.numBatches,n[a].unshift(f.slice(t,p-t))));else{let y=r[a];r[a]=y.clone({nullable:!0}),e[a]=(s=f==null?void 0:f._changeLengthAndBackfillNullBitmap(t))!==null&&s!==void 0?s:P({type:y.type,length:t,nullCount:t,nullBitmap:new Uint8Array(o)})}}return e}var Xl,Gt=class r{constructor(...t){var e,n;if(t.length===0)return this.batches=[],this.schema=new it([]),this._offsets=[0],this;let i,s;t[0]instanceof it&&(i=t.shift()),t[t.length-1]instanceof Uint32Array&&(s=t.pop());let o=c=>{if(c){if(c instanceof Ft)return[c];if(c instanceof r)return c.batches;if(c instanceof ct){if(c.type instanceof ft)return[new Ft(new it(c.type.children),c)]}else{if(Array.isArray(c))return c.flatMap(f=>o(f));if(typeof c[Symbol.iterator]=="function")return[...c].flatMap(f=>o(f));if(typeof c=="object"){let f=Object.keys(c),p=f.map(B=>new J([c[B]])),y=new it(f.map((B,Q)=>new X(String(B),p[Q].type))),[,w]=go(y,p);return w.length===0?[new Ft(c)]:w}}}return[]},a=t.flatMap(c=>o(c));if(i=(n=i!=null?i:(e=a[0])===null||e===void 0?void 0:e.schema)!==null&&n!==void 0?n:new it([]),!(i instanceof it))throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");for(let c of a){if(!(c instanceof Ft))throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");if(!ln(i,c.schema))throw new TypeError("Table and inner RecordBatch schemas must be equivalent.")}this.schema=i,this.batches=a,this._offsets=s!=null?s:Vs(this.data)}get data(){return this.batches.map(({data:t})=>t)}get numCols(){return this.schema.fields.length}get numRows(){return this.data.reduce((t,e)=>t+e.length,0)}get nullCount(){return this._nullCount===-1&&(this._nullCount=Ps(this.data)),this._nullCount}isValid(t){return!1}get(t){return null}set(t,e){}indexOf(t,e){return-1}getByteLength(t){return 0}[Symbol.iterator](){return this.batches.length>0?Tn.visit(new J(this.data)):new Array(0)[Symbol.iterator]()}toArray(){return[...this]}toString(){return"[\n  ".concat(this.toArray().join(",\n  "),"\n]")}concat(...t){let e=this.schema,n=this.data.concat(t.flatMap(({data:i})=>i));return new r(e,n.map(i=>new Ft(e,i)))}slice(t,e){let n=this.schema;[t,e]=ii({length:this.numRows},t,e);let i=Hs(this.data,this._offsets,t,e);return new r(n,i.map(s=>new Ft(n,s)))}getChild(t){return this.getChildAt(this.schema.fields.findIndex(e=>e.name===t))}getChildAt(t){if(t>-1&&t<this.schema.fields.length){let e=this.data.map(n=>n.children[t]);if(e.length===0){let{type:n}=this.schema.fields[t],i=P({type:n,length:0,nullCount:0});e.push(i._changeLengthAndBackfillNullBitmap(this.numRows))}return new J(e)}return null}setChild(t,e){var n;return this.setChildAt((n=this.schema.fields)===null||n===void 0?void 0:n.findIndex(i=>i.name===t),e)}setChildAt(t,e){let n=this.schema,i=[...this.batches];if(t>-1&&t<this.numCols){e||(e=new J([P({type:new Xt,length:this.numRows})]));let s=n.fields.slice(),o=s[t].clone({type:e.type}),a=this.schema.fields.map((c,f)=>this.getChildAt(f));[s[t],a[t]]=[o,e],[n,i]=go(n,a)}return new r(n,i)}select(t){let e=this.schema.fields.reduce((n,i,s)=>n.set(i.name,s),new Map);return this.selectAt(t.map(n=>e.get(n)).filter(n=>n>-1))}selectAt(t){let e=this.schema.selectAt(t),n=this.batches.map(i=>i.selectAt(t));return new r(e,n)}assign(t){let e=this.schema.fields,[n,i]=t.schema.fields.reduce((a,c,f)=>{let[p,y]=a,w=e.findIndex(B=>B.name===c.name);return~w?y[w]=f:p.push(f),a},[[],[]]),s=this.schema.assign(t.schema),o=[...e.map((a,c)=>[c,i[c]]).map(([a,c])=>c===void 0?this.getChildAt(a):t.getChildAt(c)),...n.map(a=>t.getChildAt(a))].filter(Boolean);return new r(...go(s,o))}};Xl=Symbol.toStringTag;Gt[Xl]=(r=>(r.schema=null,r.batches=[],r._offsets=new Uint32Array([0]),r._nullCount=-1,r[Symbol.isConcatSpreadable]=!0,r.isValid=Er(ai),r.get=Er(Dt.getVisitFn(h.Struct)),r.set=zs(Pt.getVisitFn(h.Struct)),r.indexOf=js(tn.getVisitFn(h.Struct)),r.getByteLength=Er(ue.getVisitFn(h.Struct)),"Table"))(Gt.prototype);var Kl,Ft=class r{constructor(...t){switch(t.length){case 2:{if([this.schema]=t,!(this.schema instanceof it))throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");if([,this.data=P({nullCount:0,type:new ft(this.schema.fields),children:this.schema.fields.map(e=>P({type:e.type,nullCount:0}))})]=t,!(this.data instanceof ct))throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");[this.schema,this.data]=Gl(this.schema,this.data.children);break}case 1:{let[e]=t,{fields:n,children:i,length:s}=Object.keys(e).reduce((c,f,p)=>(c.children[p]=e[f],c.length=Math.max(c.length,e[f].length),c.fields[p]=X.new({name:f,type:e[f].type,nullable:!0}),c),{length:0,fields:new Array,children:new Array}),o=new it(n),a=P({type:new ft(n),length:s,children:i,nullCount:0});[this.schema,this.data]=Gl(o,a.children,s);break}default:throw new TypeError("RecordBatch constructor expects an Object mapping names to child Data, or a [Schema, Data] pair.")}}get dictionaries(){return this._dictionaries||(this._dictionaries=Jl(this.schema.fields,this.data.children))}get numCols(){return this.schema.fields.length}get numRows(){return this.data.length}get nullCount(){return this.data.nullCount}isValid(t){return this.data.getValid(t)}get(t){return Dt.visit(this.data,t)}set(t,e){return Pt.visit(this.data,t,e)}indexOf(t,e){return tn.visit(this.data,t,e)}getByteLength(t){return ue.visit(this.data,t)}[Symbol.iterator](){return Tn.visit(new J([this.data]))}toArray(){return[...this]}concat(...t){return new Gt(this.schema,[this,...t])}slice(t,e){let[n]=new J([this.data]).slice(t,e).data;return new r(this.schema,n)}getChild(t){var e;return this.getChildAt((e=this.schema.fields)===null||e===void 0?void 0:e.findIndex(n=>n.name===t))}getChildAt(t){return t>-1&&t<this.schema.fields.length?new J([this.data.children[t]]):null}setChild(t,e){var n;return this.setChildAt((n=this.schema.fields)===null||n===void 0?void 0:n.findIndex(i=>i.name===t),e)}setChildAt(t,e){let n=this.schema,i=this.data;if(t>-1&&t<this.numCols){e||(e=new J([P({type:new Xt,length:this.numRows})]));let s=n.fields.slice(),o=i.children.slice(),a=s[t].clone({type:e.type});[s[t],o[t]]=[a,e.data[0]],n=new it(s,new Map(this.schema.metadata)),i=P({type:new ft(s),children:o})}return new r(n,i)}select(t){let e=this.schema.select(t),n=new ft(e.fields),i=[];for(let s of t){let o=this.schema.fields.findIndex(a=>a.name===s);~o&&(i[o]=this.data.children[o])}return new r(e,P({type:n,length:this.numRows,children:i}))}selectAt(t){let e=this.schema.selectAt(t),n=t.map(s=>this.data.children[s]).filter(Boolean),i=P({type:new ft(e.fields),length:this.numRows,children:n});return new r(e,i)}};Kl=Symbol.toStringTag;Ft[Kl]=(r=>(r._nullCount=-1,r[Symbol.isConcatSpreadable]=!0,"RecordBatch"))(Ft.prototype);function Gl(r,t,e=t.reduce((n,i)=>Math.max(n,i.length),0)){var n;let i=[...r.fields],s=[...t],o=(e+63&-64)>>3;for(let[a,c]of r.fields.entries()){let f=t[a];(!f||f.length!==e)&&(i[a]=c.clone({nullable:!0}),s[a]=(n=f==null?void 0:f._changeLengthAndBackfillNullBitmap(e))!==null&&n!==void 0?n:P({type:c.type,length:e,nullCount:e,nullBitmap:new Uint8Array(o)}))}return[r.assign(i),P({type:new ft(i),length:e,children:s})]}function Jl(r,t,e=new Map){for(let n=-1,i=r.length;++n<i;){let o=r[n].type,a=t[n];if(x.isDictionary(o)){if(!e.has(o.id))a.dictionary&&e.set(o.id,a.dictionary);else if(e.get(o.id)!==a.dictionary)throw new Error("Cannot create Schema containing two different dictionaries with the same Id")}o.children&&o.children.length>0&&Jl(o.children,a.children,e)}return e}var un=class extends Ft{constructor(t){let e=t.fields.map(i=>P({type:i.type})),n=P({type:new ft(t.fields),nullCount:0,children:e});super(t,n)}};var ji;(function(r){r[r.BUFFER=0]="BUFFER"})(ji||(ji={}));var Wi;(function(r){r[r.LZ4_FRAME=0]="LZ4_FRAME",r[r.ZSTD=1]="ZSTD"})(Wi||(Wi={}));var wo=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBodyCompression(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBodyCompression(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}codec(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt8(this.bb_pos+t):Wi.LZ4_FRAME}method(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt8(this.bb_pos+t):ji.BUFFER}static startBodyCompression(t){t.startObject(2)}static addCodec(t,e){t.addFieldInt8(0,e,Wi.LZ4_FRAME)}static addMethod(t,e){t.addFieldInt8(1,e,ji.BUFFER)}static endBodyCompression(t){return t.endObject()}static createBodyCompression(t,e,n){return r.startBodyCompression(t),r.addCodec(t,e),r.addMethod(t,n),r.endBodyCompression(t)}};var Nn=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}offset(){return this.bb.readInt64(this.bb_pos)}length(){return this.bb.readInt64(this.bb_pos+8)}static sizeOf(){return 16}static createBuffer(t,e,n){return t.prep(8,16),t.writeInt64(BigInt(n!=null?n:0)),t.writeInt64(BigInt(e!=null?e:0)),t.offset()}};var Ln=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}length(){return this.bb.readInt64(this.bb_pos)}nullCount(){return this.bb.readInt64(this.bb_pos+8)}static sizeOf(){return 16}static createFieldNode(t,e,n){return t.prep(8,16),t.writeInt64(BigInt(n!=null?n:0)),t.writeInt64(BigInt(e!=null?e:0)),t.offset()}};var he=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsRecordBatch(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsRecordBatch(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}length(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):BigInt("0")}nodes(t,e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new Ln).__init(this.bb.__vector(this.bb_pos+n)+t*16,this.bb):null}nodesLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}buffers(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new Nn).__init(this.bb.__vector(this.bb_pos+n)+t*16,this.bb):null}buffersLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}compression(t){let e=this.bb.__offset(this.bb_pos,10);return e?(t||new wo).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}static startRecordBatch(t){t.startObject(4)}static addLength(t,e){t.addFieldInt64(0,e,BigInt("0"))}static addNodes(t,e){t.addFieldOffset(1,e,0)}static startNodesVector(t,e){t.startVector(16,e,8)}static addBuffers(t,e){t.addFieldOffset(2,e,0)}static startBuffersVector(t,e){t.startVector(16,e,8)}static addCompression(t,e){t.addFieldOffset(3,e,0)}static endRecordBatch(t){return t.endObject()}};var Fr=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDictionaryBatch(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDictionaryBatch(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}id(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):BigInt("0")}data(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new he).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}isDelta(){let t=this.bb.__offset(this.bb_pos,8);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startDictionaryBatch(t){t.startObject(3)}static addId(t,e){t.addFieldInt64(0,e,BigInt("0"))}static addData(t,e){t.addFieldOffset(1,e,0)}static addIsDelta(t,e){t.addFieldInt8(2,+e,0)}static endDictionaryBatch(t){return t.endObject()}};var kn;(function(r){r[r.NONE=0]="NONE",r[r.Schema=1]="Schema",r[r.DictionaryBatch=2]="DictionaryBatch",r[r.RecordBatch=3]="RecordBatch",r[r.Tensor=4]="Tensor",r[r.SparseTensor=5]="SparseTensor"})(kn||(kn={}));var Ve=class r{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsMessage(t,e){return(e||new r).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMessage(t,e){return t.setPosition(t.position()+4),(e||new r).__init(t.readInt32(t.position())+t.position(),t)}version(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Rr.V1}headerType(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readUint8(this.bb_pos+t):kn.NONE}header(t){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.__union(t,this.bb_pos+e):null}bodyLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt64(this.bb_pos+t):BigInt("0")}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,12);return n?(e||new Ot).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}static startMessage(t){t.startObject(5)}static addVersion(t,e){t.addFieldInt16(0,e,Rr.V1)}static addHeaderType(t,e){t.addFieldInt8(1,e,kn.NONE)}static addHeader(t,e){t.addFieldOffset(2,e,0)}static addBodyLength(t,e){t.addFieldInt64(3,e,BigInt("0"))}static addCustomMetadata(t,e){t.addFieldOffset(4,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endMessage(t){return t.endObject()}static finishMessageBuffer(t,e){t.finish(e)}static finishSizePrefixedMessageBuffer(t,e){t.finish(e,void 0,!0)}static createMessage(t,e,n,i,s,o){return r.startMessage(t),r.addVersion(t,e),r.addHeaderType(t,n),r.addHeader(t,i),r.addBodyLength(t,s),r.addCustomMetadata(t,o),r.endMessage(t)}};var Na=class extends D{visit(t,e){return t==null||e==null?void 0:super.visit(t,e)}visitNull(t,e){return _i.startNull(e),_i.endNull(e)}visitInt(t,e){return Ce.startInt(e),Ce.addBitWidth(e,t.bitWidth),Ce.addIsSigned(e,t.isSigned),Ce.endInt(e)}visitFloat(t,e){return Cr.startFloatingPoint(e),Cr.addPrecision(e,t.precision),Cr.endFloatingPoint(e)}visitBinary(t,e){return ui.startBinary(e),ui.endBinary(e)}visitBool(t,e){return di.startBool(e),di.endBool(e)}visitUtf8(t,e){return gi.startUtf8(e),gi.endUtf8(e)}visitDecimal(t,e){return qe.startDecimal(e),qe.addScale(e,t.scale),qe.addPrecision(e,t.precision),qe.addBitWidth(e,t.bitWidth),qe.endDecimal(e)}visitDate(t,e){return Ur.startDate(e),Ur.addUnit(e,t.unit),Ur.endDate(e)}visitTime(t,e){return mr.startTime(e),mr.addUnit(e,t.unit),mr.addBitWidth(e,t.bitWidth),mr.endTime(e)}visitTimestamp(t,e){let n=t.timezone&&e.createString(t.timezone)||void 0;return _r.startTimestamp(e),_r.addUnit(e,t.unit),n!==void 0&&_r.addTimezone(e,n),_r.endTimestamp(e)}visitInterval(t,e){return Pr.startInterval(e),Pr.addUnit(e,t.unit),Pr.endInterval(e)}visitList(t,e){return mi.startList(e),mi.endList(e)}visitStruct(t,e){return yi.startStruct_(e),yi.endStruct_(e)}visitUnion(t,e){Pe.startTypeIdsVector(e,t.typeIds.length);let n=Pe.createTypeIdsVector(e,t.typeIds);return Pe.startUnion(e),Pe.addMode(e,t.mode),Pe.addTypeIds(e,n),Pe.endUnion(e)}visitDictionary(t,e){let n=this.visit(t.indices,e);return Je.startDictionaryEncoding(e),Je.addId(e,BigInt(t.id)),Je.addIsOrdered(e,t.isOrdered),n!==void 0&&Je.addIndexType(e,n),Je.endDictionaryEncoding(e)}visitFixedSizeBinary(t,e){return Lr.startFixedSizeBinary(e),Lr.addByteWidth(e,t.byteWidth),Lr.endFixedSizeBinary(e)}visitFixedSizeList(t,e){return kr.startFixedSizeList(e),kr.addListSize(e,t.listSize),kr.endFixedSizeList(e)}visitMap(t,e){return Vr.startMap(e),Vr.addKeysSorted(e,t.keysSorted),Vr.endMap(e)}},vo=new Na;function tu(r,t=new Map){return new it(h_(r,t),So(r.customMetadata),t)}function La(r){return new Vt(r.count,ru(r.columns),nu(r.columns))}function eu(r){return new ne(La(r.data),r.id,r.isDelta)}function h_(r,t){return(r.fields||[]).filter(Boolean).map(e=>X.fromJSON(e,t))}function ql(r,t){return(r.children||[]).filter(Boolean).map(e=>X.fromJSON(e,t))}function ru(r){return(r||[]).reduce((t,e)=>[...t,new He(e.count,p_(e.VALIDITY)),...ru(e.children)],[])}function nu(r,t=[]){for(let e=-1,n=(r||[]).length;++e<n;){let i=r[e];i.VALIDITY&&t.push(new re(t.length,i.VALIDITY.length)),i.TYPE&&t.push(new re(t.length,i.TYPE.length)),i.OFFSET&&t.push(new re(t.length,i.OFFSET.length)),i.DATA&&t.push(new re(t.length,i.DATA.length)),t=nu(i.children,t)}return t}function p_(r){return(r||[]).reduce((t,e)=>t+ +(e===0),0)}function iu(r,t){let e,n,i,s,o,a;return!t||!(s=r.dictionary)?(o=Ql(r,ql(r,t)),i=new X(r.name,o,r.nullable,So(r.customMetadata))):t.has(e=s.id)?(n=(n=s.indexType)?Zl(n):new $e,a=new ce(t.get(e),n,e,s.isOrdered),i=new X(r.name,a,r.nullable,So(r.customMetadata))):(n=(n=s.indexType)?Zl(n):new $e,t.set(e,o=Ql(r,ql(r,t))),a=new ce(o,n,e,s.isOrdered),i=new X(r.name,a,r.nullable,So(r.customMetadata))),i||null}function So(r){return new Map(Object.entries(r||{}))}function Zl(r){return new At(r.isSigned,r.bitWidth)}function Ql(r,t){let e=r.type.name;switch(e){case"NONE":return new Xt;case"null":return new Xt;case"binary":return new sr;case"utf8":return new or;case"bool":return new ar;case"list":return new Re((t||[])[0]);case"struct":return new ft(t||[]);case"struct_":return new ft(t||[])}switch(e){case"int":{let n=r.type;return new At(n.isSigned,n.bitWidth)}case"floatingpoint":{let n=r.type;return new Qt(mt[n.precision])}case"decimal":{let n=r.type;return new cr(n.scale,n.precision,n.bitWidth)}case"date":{let n=r.type;return new lr(Ct[n.unit])}case"time":{let n=r.type;return new Oe(G[n.unit],n.bitWidth)}case"timestamp":{let n=r.type;return new ur(G[n.unit],n.timezone)}case"interval":{let n=r.type;return new dr(Yt[n.unit])}case"union":{let n=r.type;return new Me(wt[n.mode],n.typeIds||[],t||[])}case"fixedsizebinary":{let n=r.type;return new fr(n.byteWidth)}case"fixedsizelist":{let n=r.type;return new Ue(n.listSize,(t||[])[0])}case"map":{let n=r.type;return new Ne((t||[])[0],n.keysSorted)}}throw new Error('Unrecognized type: "'.concat(e,'"'))}var m_=rn,__=de,ie=class r{static fromJSON(t,e){let n=new r(0,Ut.V4,e);return n._createHeader=y_(t,e),n}static decode(t){t=new __(L(t));let e=Ve.getRootAsMessage(t),n=e.bodyLength(),i=e.version(),s=e.headerType(),o=new r(n,i,s);return o._createHeader=b_(e,s),o}static encode(t){let e=new m_,n=-1;return t.isSchema()?n=it.encode(e,t.header()):t.isRecordBatch()?n=Vt.encode(e,t.header()):t.isDictionaryBatch()&&(n=ne.encode(e,t.header())),Ve.startMessage(e),Ve.addVersion(e,Ut.V4),Ve.addHeader(e,n),Ve.addHeaderType(e,t.headerType),Ve.addBodyLength(e,BigInt(t.bodyLength)),Ve.finishMessageBuffer(e,Ve.endMessage(e)),e.asUint8Array()}static from(t,e=0){if(t instanceof it)return new r(0,Ut.V4,tt.Schema,t);if(t instanceof Vt)return new r(e,Ut.V4,tt.RecordBatch,t);if(t instanceof ne)return new r(e,Ut.V4,tt.DictionaryBatch,t);throw new Error("Unrecognized Message header: ".concat(t))}get type(){return this.headerType}get version(){return this._version}get headerType(){return this._headerType}get bodyLength(){return this._bodyLength}header(){return this._createHeader()}isSchema(){return this.headerType===tt.Schema}isRecordBatch(){return this.headerType===tt.RecordBatch}isDictionaryBatch(){return this.headerType===tt.DictionaryBatch}constructor(t,e,n,i){this._version=e,this._headerType=n,this.body=new Uint8Array(0),i&&(this._createHeader=()=>i),this._bodyLength=Zt(t)}},Vt=class{get nodes(){return this._nodes}get length(){return this._length}get buffers(){return this._buffers}constructor(t,e,n){this._nodes=e,this._buffers=n,this._length=Zt(t)}},ne=class{get id(){return this._id}get data(){return this._data}get isDelta(){return this._isDelta}get length(){return this.data.length}get nodes(){return this.data.nodes}get buffers(){return this.data.buffers}constructor(t,e,n=!1){this._data=t,this._isDelta=n,this._id=Zt(e)}},re=class{constructor(t,e){this.offset=Zt(t),this.length=Zt(e)}},He=class{constructor(t,e){this.length=Zt(t),this.nullCount=Zt(e)}};function y_(r,t){return()=>{switch(t){case tt.Schema:return it.fromJSON(r);case tt.RecordBatch:return Vt.fromJSON(r);case tt.DictionaryBatch:return ne.fromJSON(r)}throw new Error("Unrecognized Message type: { name: ".concat(tt[t],", type: ").concat(t," }"))}}function b_(r,t){return()=>{switch(t){case tt.Schema:return it.decode(r.header(new te));case tt.RecordBatch:return Vt.decode(r.header(new he),r.version());case tt.DictionaryBatch:return ne.decode(r.header(new Fr),r.version())}throw new Error("Unrecognized Message type: { name: ".concat(tt[t],", type: ").concat(t," }"))}}X.encode=D_;X.decode=T_;X.fromJSON=iu;it.encode=x_;it.decode=g_;it.fromJSON=tu;Vt.encode=E_;Vt.decode=w_;Vt.fromJSON=La;ne.encode=O_;ne.decode=v_;ne.fromJSON=eu;He.encode=R_;He.decode=I_;re.encode=M_;re.decode=S_;function g_(r,t=new Map){let e=A_(r,t);return new it(e,Io(r),t)}function w_(r,t=Ut.V4){if(r.compression()!==null)throw new Error("Record batch compression not implemented");return new Vt(r.length(),F_(r),B_(r,t))}function v_(r,t=Ut.V4){return new ne(Vt.decode(r.data(),t),r.id(),r.isDelta())}function S_(r){return new re(r.offset(),r.length())}function I_(r){return new He(r.length(),r.nullCount())}function F_(r){let t=[];for(let e,n=-1,i=-1,s=r.nodesLength();++n<s;)(e=r.nodes(n))&&(t[++i]=He.decode(e));return t}function B_(r,t){let e=[];for(let n,i=-1,s=-1,o=r.buffersLength();++i<o;)(n=r.buffers(i))&&(t<Ut.V4&&(n.bb_pos+=8*(i+1)),e[++s]=re.decode(n));return e}function A_(r,t){let e=[];for(let n,i=-1,s=-1,o=r.fieldsLength();++i<o;)(n=r.fields(i))&&(e[++s]=X.decode(n,t));return e}function su(r,t){let e=[];for(let n,i=-1,s=-1,o=r.childrenLength();++i<o;)(n=r.children(i))&&(e[++s]=X.decode(n,t));return e}function T_(r,t){let e,n,i,s,o,a;return!t||!(a=r.dictionary())?(i=au(r,su(r,t)),n=new X(r.name(),i,r.nullable(),Io(r))):t.has(e=Zt(a.id()))?(s=(s=a.indexType())?ou(s):new $e,o=new ce(t.get(e),s,e,a.isOrdered()),n=new X(r.name(),o,r.nullable(),Io(r))):(s=(s=a.indexType())?ou(s):new $e,t.set(e,i=au(r,su(r,t))),o=new ce(i,s,e,a.isOrdered()),n=new X(r.name(),o,r.nullable(),Io(r))),n||null}function Io(r){let t=new Map;if(r)for(let e,n,i=-1,s=Math.trunc(r.customMetadataLength());++i<s;)(e=r.customMetadata(i))&&(n=e.key())!=null&&t.set(n,e.value());return t}function ou(r){return new At(r.isSigned(),r.bitWidth())}function au(r,t){let e=r.typeType();switch(e){case yt.NONE:return new Xt;case yt.Null:return new Xt;case yt.Binary:return new sr;case yt.Utf8:return new or;case yt.Bool:return new ar;case yt.List:return new Re((t||[])[0]);case yt.Struct_:return new ft(t||[])}switch(e){case yt.Int:{let n=r.type(new Ce);return new At(n.isSigned(),n.bitWidth())}case yt.FloatingPoint:{let n=r.type(new Cr);return new Qt(n.precision())}case yt.Decimal:{let n=r.type(new qe);return new cr(n.scale(),n.precision(),n.bitWidth())}case yt.Date:{let n=r.type(new Ur);return new lr(n.unit())}case yt.Time:{let n=r.type(new mr);return new Oe(n.unit(),n.bitWidth())}case yt.Timestamp:{let n=r.type(new _r);return new ur(n.unit(),n.timezone())}case yt.Interval:{let n=r.type(new Pr);return new dr(n.unit())}case yt.Union:{let n=r.type(new Pe);return new Me(n.mode(),n.typeIdsArray()||[],t||[])}case yt.FixedSizeBinary:{let n=r.type(new Lr);return new fr(n.byteWidth())}case yt.FixedSizeList:{let n=r.type(new kr);return new Ue(n.listSize(),(t||[])[0])}case yt.Map:{let n=r.type(new Vr);return new Ne((t||[])[0],n.keysSorted())}}throw new Error('Unrecognized type: "'.concat(yt[e],'" (').concat(e,")"))}function x_(r,t){let e=t.fields.map(s=>X.encode(r,s));te.startFieldsVector(r,e.length);let n=te.createFieldsVector(r,e),i=t.metadata&&t.metadata.size>0?te.createCustomMetadataVector(r,[...t.metadata].map(([s,o])=>{let a=r.createString("".concat(s)),c=r.createString("".concat(o));return Ot.startKeyValue(r),Ot.addKey(r,a),Ot.addValue(r,c),Ot.endKeyValue(r)})):-1;return te.startSchema(r),te.addFields(r,n),te.addEndianness(r,U_?Mr.Little:Mr.Big),i!==-1&&te.addCustomMetadata(r,i),te.endSchema(r)}function D_(r,t){let e=-1,n=-1,i=-1,s=t.type,o=t.typeId;x.isDictionary(s)?(o=s.dictionary.typeId,i=vo.visit(s,r),n=vo.visit(s.dictionary,r)):n=vo.visit(s,r);let a=(s.children||[]).map(p=>X.encode(r,p)),c=jt.createChildrenVector(r,a),f=t.metadata&&t.metadata.size>0?jt.createCustomMetadataVector(r,[...t.metadata].map(([p,y])=>{let w=r.createString("".concat(p)),B=r.createString("".concat(y));return Ot.startKeyValue(r),Ot.addKey(r,w),Ot.addValue(r,B),Ot.endKeyValue(r)})):-1;return t.name&&(e=r.createString(t.name)),jt.startField(r),jt.addType(r,n),jt.addTypeType(r,o),jt.addChildren(r,c),jt.addNullable(r,!!t.nullable),e!==-1&&jt.addName(r,e),i!==-1&&jt.addDictionary(r,i),f!==-1&&jt.addCustomMetadata(r,f),jt.endField(r)}function E_(r,t){let e=t.nodes||[],n=t.buffers||[];he.startNodesVector(r,e.length);for(let o of e.slice().reverse())He.encode(r,o);let i=r.endVector();he.startBuffersVector(r,n.length);for(let o of n.slice().reverse())re.encode(r,o);let s=r.endVector();return he.startRecordBatch(r),he.addLength(r,BigInt(t.length)),he.addNodes(r,i),he.addBuffers(r,s),he.endRecordBatch(r)}function O_(r,t){let e=Vt.encode(r,t.data);return Fr.startDictionaryBatch(r),Fr.addId(r,BigInt(t.id)),Fr.addIsDelta(r,t.isDelta),Fr.addData(r,e),Fr.endDictionaryBatch(r)}function R_(r,t){return Ln.createFieldNode(r,BigInt(t.length),BigInt(t.nullCount))}function M_(r,t){return Nn.createBuffer(r,BigInt(t.offset),BigInt(t.length))}var U_=(()=>{let r=new ArrayBuffer(2);return new DataView(r).setInt16(0,256,!0),new Int16Array(r)[0]===256})();var Ca=r=>"Expected ".concat(tt[r]," Message in stream, but was null or length 0."),Pa=r=>"Header pointer of flatbuffer-encoded ".concat(tt[r]," Message is null or length 0."),cu=(r,t)=>"Expected to read ".concat(r," metadata bytes, but only read ").concat(t,"."),lu=(r,t)=>"Expected to read ".concat(r," bytes for message body, but only read ").concat(t,"."),Cn=class{constructor(t){this.source=t instanceof Qe?t:new Qe(t)}[Symbol.iterator](){return this}next(){let t;return(t=this.readMetadataLength()).done?ht:t.value===-1&&(t=this.readMetadataLength()).done?ht:(t=this.readMetadata(t.value)).done?ht:t}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}readMessage(t){let e;if((e=this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(Ca(t));return e.value}readMessageBody(t){if(t<=0)return new Uint8Array(0);let e=L(this.source.read(t));if(e.byteLength<t)throw new Error(lu(t,e.byteLength));return e.byteOffset%8===0&&e.byteOffset+e.byteLength<=e.buffer.byteLength?e:e.slice()}readSchema(t=!1){let e=tt.Schema,n=this.readMessage(e),i=n==null?void 0:n.header();if(t&&!i)throw new Error(Pa(e));return i}readMetadataLength(){let t=this.source.read(Fo),e=t&&new de(t),n=(e==null?void 0:e.readInt32(0))||0;return{done:n===0,value:n}}readMetadata(t){let e=this.source.read(t);if(!e)return ht;if(e.byteLength<t)throw new Error(cu(t,e.byteLength));return{done:!1,value:ie.decode(e)}}},$i=class{constructor(t,e){this.source=t instanceof Se?t:cs(t)?new Hr(t,e):new Se(t)}[Symbol.asyncIterator](){return this}next(){return F(this,void 0,void 0,function*(){let t;return(t=yield this.readMetadataLength()).done?ht:t.value===-1&&(t=yield this.readMetadataLength()).done?ht:(t=yield this.readMetadata(t.value)).done?ht:t})}throw(t){return F(this,void 0,void 0,function*(){return yield this.source.throw(t)})}return(t){return F(this,void 0,void 0,function*(){return yield this.source.return(t)})}readMessage(t){return F(this,void 0,void 0,function*(){let e;if((e=yield this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(Ca(t));return e.value})}readMessageBody(t){return F(this,void 0,void 0,function*(){if(t<=0)return new Uint8Array(0);let e=L(yield this.source.read(t));if(e.byteLength<t)throw new Error(lu(t,e.byteLength));return e.byteOffset%8===0&&e.byteOffset+e.byteLength<=e.buffer.byteLength?e:e.slice()})}readSchema(t=!1){return F(this,void 0,void 0,function*(){let e=tt.Schema,n=yield this.readMessage(e),i=n==null?void 0:n.header();if(t&&!i)throw new Error(Pa(e));return i})}readMetadataLength(){return F(this,void 0,void 0,function*(){let t=yield this.source.read(Fo),e=t&&new de(t),n=(e==null?void 0:e.readInt32(0))||0;return{done:n===0,value:n}})}readMetadata(t){return F(this,void 0,void 0,function*(){let e=yield this.source.read(t);if(!e)return ht;if(e.byteLength<t)throw new Error(cu(t,e.byteLength));return{done:!1,value:ie.decode(e)}})}},Yi=class extends Cn{constructor(t){super(new Uint8Array(0)),this._schema=!1,this._body=[],this._batchIndex=0,this._dictionaryIndex=0,this._json=t instanceof wi?t:new wi(t)}next(){let{_json:t}=this;if(!this._schema)return this._schema=!0,{done:!1,value:ie.fromJSON(t.schema,tt.Schema)};if(this._dictionaryIndex<t.dictionaries.length){let e=t.dictionaries[this._dictionaryIndex++];return this._body=e.data.columns,{done:!1,value:ie.fromJSON(e,tt.DictionaryBatch)}}if(this._batchIndex<t.batches.length){let e=t.batches[this._batchIndex++];return this._body=e.columns,{done:!1,value:ie.fromJSON(e,tt.RecordBatch)}}return this._body=[],ht}readMessageBody(t){return e(this._body);function e(n){return(n||[]).reduce((i,s)=>[...i,...s.VALIDITY&&[s.VALIDITY]||[],...s.TYPE&&[s.TYPE]||[],...s.OFFSET&&[s.OFFSET]||[],...s.DATA&&[s.DATA]||[],...e(s.children)],[])}}readMessage(t){let e;if((e=this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(Ca(t));return e.value}readSchema(){let t=tt.Schema,e=this.readMessage(t),n=e==null?void 0:e.header();if(!e||!n)throw new Error(Pa(t));return n}},Fo=4,ka="ARROW1",Pn=new Uint8Array(ka.length);for(let r=0;r<ka.length;r+=1)Pn[r]=ka.codePointAt(r);function Bo(r,t=0){for(let e=-1,n=Pn.length;++e<n;)if(Pn[e]!==r[t+e])return!1;return!0}var Vn=Pn.length,Va=Vn+Fo,uu=Vn*2+Fo;var Ht=class r extends nn{constructor(t){super(),this._impl=t}get closed(){return this._impl.closed}get schema(){return this._impl.schema}get autoDestroy(){return this._impl.autoDestroy}get dictionaries(){return this._impl.dictionaries}get numDictionaries(){return this._impl.numDictionaries}get numRecordBatches(){return this._impl.numRecordBatches}get footer(){return this._impl.isFile()?this._impl.footer:null}isSync(){return this._impl.isSync()}isAsync(){return this._impl.isAsync()}isFile(){return this._impl.isFile()}isStream(){return this._impl.isStream()}next(){return this._impl.next()}throw(t){return this._impl.throw(t)}return(t){return this._impl.return(t)}cancel(){return this._impl.cancel()}reset(t){return this._impl.reset(t),this._DOMStream=void 0,this._nodeStream=void 0,this}open(t){let e=this._impl.open(t);return Te(e)?e.then(()=>this):this}readRecordBatch(t){return this._impl.isFile()?this._impl.readRecordBatch(t):null}[Symbol.iterator](){return this._impl[Symbol.iterator]()}[Symbol.asyncIterator](){return this._impl[Symbol.asyncIterator]()}toDOMStream(){return kt.toDOMStream(this.isSync()?{[Symbol.iterator]:()=>this}:{[Symbol.asyncIterator]:()=>this})}toNodeStream(){return kt.toNodeStream(this.isSync()?{[Symbol.iterator]:()=>this}:{[Symbol.asyncIterator]:()=>this},{objectMode:!0})}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t,e){throw new Error('"throughDOM" not available in this environment')}static from(t){return t instanceof r?t:os(t)?L_(t):cs(t)?P_(t):Te(t)?(()=>F(this,void 0,void 0,function*(){return yield r.from(yield t)}))():ls(t)||Zn(t)||ds(t)||be(t)?C_(new Se(t)):k_(new Qe(t))}static readAll(t){return t instanceof r?t.isSync()?du(t):fu(t):os(t)||ArrayBuffer.isView(t)||xe(t)||as(t)?du(t):fu(t)}},er=class extends Ht{constructor(t){super(t),this._impl=t}readAll(){return[...this]}[Symbol.iterator](){return this._impl[Symbol.iterator]()}[Symbol.asyncIterator](){return oe(this,arguments,function*(){yield C(yield*Jr(bn(Ae(this[Symbol.iterator]()))))})}},zr=class extends Ht{constructor(t){super(t),this._impl=t}readAll(){var t,e,n,i;return F(this,void 0,void 0,function*(){let s=new Array;try{for(var o=!0,a=Ae(this),c;c=yield a.next(),t=c.done,!t;){i=c.value,o=!1;try{let f=i;s.push(f)}finally{o=!0}}}catch(f){e={error:f}}finally{try{!o&&!t&&(n=a.return)&&(yield n.call(a))}finally{if(e)throw e.error}}return s})}[Symbol.iterator](){throw new Error("AsyncRecordBatchStreamReader is not Iterable")}[Symbol.asyncIterator](){return this._impl[Symbol.asyncIterator]()}},jr=class extends er{constructor(t){super(t),this._impl=t}},Xi=class extends zr{constructor(t){super(t),this._impl=t}},Ao=class{get numDictionaries(){return this._dictionaryIndex}get numRecordBatches(){return this._recordBatchIndex}constructor(t=new Map){this.closed=!1,this.autoDestroy=!0,this._dictionaryIndex=0,this._recordBatchIndex=0,this.dictionaries=t}isSync(){return!1}isAsync(){return!1}isFile(){return!1}isStream(){return!1}reset(t){return this._dictionaryIndex=0,this._recordBatchIndex=0,this.schema=t,this.dictionaries=new Map,this}_loadRecordBatch(t,e){let n=this._loadVectors(t,e,this.schema.fields),i=P({type:new ft(this.schema.fields),length:t.length,children:n});return new Ft(this.schema,i)}_loadDictionaryBatch(t,e){let{id:n,isDelta:i}=t,{dictionaries:s,schema:o}=this,a=s.get(n);if(i||!a){let c=o.dictionaries.get(n),f=this._loadVectors(t.data,e,[c]);return(a&&i?a.concat(new J(f)):new J(f)).memoize()}return a.memoize()}_loadVectors(t,e,n){return new Fi(e,t.nodes,t.buffers,this.dictionaries).visitMany(n)}},Hn=class extends Ao{constructor(t,e){super(e),this._reader=os(t)?new Yi(this._handle=t):new Cn(this._handle=t)}isSync(){return!0}isStream(){return!0}[Symbol.iterator](){return this}cancel(){!this.closed&&(this.closed=!0)&&(this.reset()._reader.return(),this._reader=null,this.dictionaries=null)}open(t){return this.closed||(this.autoDestroy=hu(this,t),this.schema||(this.schema=this._reader.readSchema())||this.cancel()),this}throw(t){return!this.closed&&this.autoDestroy&&(this.closed=!0)?this.reset()._reader.throw(t):ht}return(t){return!this.closed&&this.autoDestroy&&(this.closed=!0)?this.reset()._reader.return(t):ht}next(){if(this.closed)return ht;let t,{_reader:e}=this;for(;t=this._readNextMessageAndValidate();)if(t.isSchema())this.reset(t.header());else if(t.isRecordBatch()){this._recordBatchIndex++;let n=t.header(),i=e.readMessageBody(t.bodyLength);return{done:!1,value:this._loadRecordBatch(n,i)}}else if(t.isDictionaryBatch()){this._dictionaryIndex++;let n=t.header(),i=e.readMessageBody(t.bodyLength),s=this._loadDictionaryBatch(n,i);this.dictionaries.set(n.id,s)}return this.schema&&this._recordBatchIndex===0?(this._recordBatchIndex++,{done:!1,value:new un(this.schema)}):this.return()}_readNextMessageAndValidate(t){return this._reader.readMessage(t)}},zn=class extends Ao{constructor(t,e){super(e),this._reader=new $i(this._handle=t)}isAsync(){return!0}isStream(){return!0}[Symbol.asyncIterator](){return this}cancel(){return F(this,void 0,void 0,function*(){!this.closed&&(this.closed=!0)&&(yield this.reset()._reader.return(),this._reader=null,this.dictionaries=null)})}open(t){return F(this,void 0,void 0,function*(){return this.closed||(this.autoDestroy=hu(this,t),this.schema||(this.schema=yield this._reader.readSchema())||(yield this.cancel())),this})}throw(t){return F(this,void 0,void 0,function*(){return!this.closed&&this.autoDestroy&&(this.closed=!0)?yield this.reset()._reader.throw(t):ht})}return(t){return F(this,void 0,void 0,function*(){return!this.closed&&this.autoDestroy&&(this.closed=!0)?yield this.reset()._reader.return(t):ht})}next(){return F(this,void 0,void 0,function*(){if(this.closed)return ht;let t,{_reader:e}=this;for(;t=yield this._readNextMessageAndValidate();)if(t.isSchema())yield this.reset(t.header());else if(t.isRecordBatch()){this._recordBatchIndex++;let n=t.header(),i=yield e.readMessageBody(t.bodyLength);return{done:!1,value:this._loadRecordBatch(n,i)}}else if(t.isDictionaryBatch()){this._dictionaryIndex++;let n=t.header(),i=yield e.readMessageBody(t.bodyLength),s=this._loadDictionaryBatch(n,i);this.dictionaries.set(n.id,s)}return this.schema&&this._recordBatchIndex===0?(this._recordBatchIndex++,{done:!1,value:new un(this.schema)}):yield this.return()})}_readNextMessageAndValidate(t){return F(this,void 0,void 0,function*(){return yield this._reader.readMessage(t)})}},To=class extends Hn{get footer(){return this._footer}get numDictionaries(){return this._footer?this._footer.numDictionaries:0}get numRecordBatches(){return this._footer?this._footer.numRecordBatches:0}constructor(t,e){super(t instanceof vi?t:new vi(t),e)}isSync(){return!0}isFile(){return!0}open(t){if(!this.closed&&!this._footer){this.schema=(this._footer=this._readFooter()).schema;for(let e of this._footer.dictionaryBatches())e&&this._readDictionaryBatch(this._dictionaryIndex++)}return super.open(t)}readRecordBatch(t){var e;if(this.closed)return null;this._footer||this.open();let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(t);if(n&&this._handle.seek(n.offset)){let i=this._reader.readMessage(tt.RecordBatch);if(i!=null&&i.isRecordBatch()){let s=i.header(),o=this._reader.readMessageBody(i.bodyLength);return this._loadRecordBatch(s,o)}}return null}_readDictionaryBatch(t){var e;let n=(e=this._footer)===null||e===void 0?void 0:e.getDictionaryBatch(t);if(n&&this._handle.seek(n.offset)){let i=this._reader.readMessage(tt.DictionaryBatch);if(i!=null&&i.isDictionaryBatch()){let s=i.header(),o=this._reader.readMessageBody(i.bodyLength),a=this._loadDictionaryBatch(s,o);this.dictionaries.set(s.id,a)}}}_readFooter(){let{_handle:t}=this,e=t.size-Va,n=t.readInt32(e),i=t.readAt(e-n,n);return yr.decode(i)}_readNextMessageAndValidate(t){var e;if(this._footer||this.open(),this._footer&&this._recordBatchIndex<this.numRecordBatches){let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(this._recordBatchIndex);if(n&&this._handle.seek(n.offset))return this._reader.readMessage(t)}return null}},Ha=class extends zn{get footer(){return this._footer}get numDictionaries(){return this._footer?this._footer.numDictionaries:0}get numRecordBatches(){return this._footer?this._footer.numRecordBatches:0}constructor(t,...e){let n=typeof e[0]!="number"?e.shift():void 0,i=e[0]instanceof Map?e.shift():void 0;super(t instanceof Hr?t:new Hr(t,n),i)}isFile(){return!0}isAsync(){return!0}open(t){let e=Object.create(null,{open:{get:()=>super.open}});return F(this,void 0,void 0,function*(){if(!this.closed&&!this._footer){this.schema=(this._footer=yield this._readFooter()).schema;for(let n of this._footer.dictionaryBatches())n&&(yield this._readDictionaryBatch(this._dictionaryIndex++))}return yield e.open.call(this,t)})}readRecordBatch(t){var e;return F(this,void 0,void 0,function*(){if(this.closed)return null;this._footer||(yield this.open());let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(t);if(n&&(yield this._handle.seek(n.offset))){let i=yield this._reader.readMessage(tt.RecordBatch);if(i!=null&&i.isRecordBatch()){let s=i.header(),o=yield this._reader.readMessageBody(i.bodyLength);return this._loadRecordBatch(s,o)}}return null})}_readDictionaryBatch(t){var e;return F(this,void 0,void 0,function*(){let n=(e=this._footer)===null||e===void 0?void 0:e.getDictionaryBatch(t);if(n&&(yield this._handle.seek(n.offset))){let i=yield this._reader.readMessage(tt.DictionaryBatch);if(i!=null&&i.isDictionaryBatch()){let s=i.header(),o=yield this._reader.readMessageBody(i.bodyLength),a=this._loadDictionaryBatch(s,o);this.dictionaries.set(s.id,a)}}})}_readFooter(){return F(this,void 0,void 0,function*(){let{_handle:t}=this;t._pending&&(yield t._pending);let e=t.size-Va,n=yield t.readInt32(e),i=yield t.readAt(e-n,n);return yr.decode(i)})}_readNextMessageAndValidate(t){return F(this,void 0,void 0,function*(){if(this._footer||(yield this.open()),this._footer&&this._recordBatchIndex<this.numRecordBatches){let e=this._footer.getRecordBatch(this._recordBatchIndex);if(e&&(yield this._handle.seek(e.offset)))return yield this._reader.readMessage(t)}return null})}},za=class extends Hn{constructor(t,e){super(t,e)}_loadVectors(t,e,n){return new Js(e,t.nodes,t.buffers,this.dictionaries).visitMany(n)}};function hu(r,t){return t&&typeof t.autoDestroy=="boolean"?t.autoDestroy:r.autoDestroy}function*du(r){let t=Ht.from(r);try{if(!t.open({autoDestroy:!1}).closed)do yield t;while(!t.reset().open().closed)}finally{t.cancel()}}function fu(r){return oe(this,arguments,function*(){let e=yield C(Ht.from(r));try{if(!(yield C(e.open({autoDestroy:!1}))).closed)do yield yield C(e);while(!(yield C(e.reset().open())).closed)}finally{yield C(e.cancel())}})}function L_(r){return new er(new za(r))}function k_(r){let t=r.peek(Vn+7&-8);return t&&t.byteLength>=4?Bo(t)?new jr(new To(r.read())):new er(new Hn(r)):new er(new Hn(function*(){}()))}function C_(r){return F(this,void 0,void 0,function*(){let t=yield r.peek(Vn+7&-8);return t&&t.byteLength>=4?Bo(t)?new jr(new To(yield r.read())):new zr(new zn(r)):new zr(new zn(function(){return oe(this,arguments,function*(){})}()))})}function P_(r){return F(this,void 0,void 0,function*(){let{size:t}=yield r.stat(),e=new Hr(r,t);return t>=uu&&Bo(yield e.readAt(0,Vn+7&-8))?new Xi(new Ha(e)):new zr(new zn(e))})}var Tt=class r extends D{static assemble(...t){let e=i=>i.flatMap(s=>Array.isArray(s)?e(s):s instanceof Ft?s.data.children:s.data),n=new r;return n.visitMany(e(t)),n}constructor(){super(),this._byteLength=0,this._nodes=[],this._buffers=[],this._bufferRegions=[]}visit(t){if(t instanceof J)return this.visitMany(t.data),this;let{type:e}=t;if(!x.isDictionary(e)){let{length:n,nullCount:i}=t;if(n>2147483647)throw new RangeError("Cannot write arrays larger than 2^31 - 1 in length");x.isNull(e)||ze.call(this,i<=0?new Uint8Array(0):An(t.offset,n,t.nullBitmap)),this.nodes.push(new He(n,i))}return super.visit(t)}visitNull(t){return this}visitDictionary(t){return this.visit(t.clone(t.type.indices))}get nodes(){return this._nodes}get buffers(){return this._buffers}get byteLength(){return this._byteLength}get bufferRegions(){return this._bufferRegions}};function ze(r){let t=r.byteLength+7&-8;return this.buffers.push(r),this.bufferRegions.push(new re(this._byteLength,t)),this._byteLength+=t,this}function V_(r){let{type:t,length:e,typeIds:n,valueOffsets:i}=r;if(ze.call(this,n),t.mode===wt.Sparse)return ja.call(this,r);if(t.mode===wt.Dense){if(r.offset<=0)return ze.call(this,i),ja.call(this,r);{let s=n.reduce((p,y)=>Math.max(p,y),n[0]),o=new Int32Array(s+1),a=new Int32Array(s+1).fill(-1),c=new Int32Array(e),f=Qn(-i[0],e,i);for(let p,y,w=-1;++w<e;)(y=a[p=n[w]])===-1&&(y=a[p]=f[p]),c[w]=f[w]-y,++o[p];ze.call(this,c);for(let p,y=-1,w=t.children.length;++y<w;)if(p=r.children[y]){let B=t.typeIds[y],Q=Math.min(e,o[B]);this.visit(p.slice(a[B],Q))}}}return this}function H_(r){let t;return r.nullCount>=r.length?ze.call(this,new Uint8Array(0)):(t=r.values)instanceof Uint8Array?ze.call(this,An(r.offset,r.length,t)):ze.call(this,Qr(r.values))}function Wr(r){return ze.call(this,r.values.subarray(0,r.length*r.stride))}function pu(r){let{length:t,values:e,valueOffsets:n}=r,i=n[0],s=n[t],o=Math.min(s-i,e.byteLength-i);return ze.call(this,Qn(-n[0],t,n)),ze.call(this,e.subarray(i,i+o)),this}function Wa(r){let{length:t,valueOffsets:e}=r;return e&&ze.call(this,Qn(e[0],t,e)),this.visit(r.children[0])}function ja(r){return this.visitMany(r.type.children.map((t,e)=>r.children[e]).filter(Boolean))[0]}Tt.prototype.visitBool=H_;Tt.prototype.visitInt=Wr;Tt.prototype.visitFloat=Wr;Tt.prototype.visitUtf8=pu;Tt.prototype.visitBinary=pu;Tt.prototype.visitFixedSizeBinary=Wr;Tt.prototype.visitDate=Wr;Tt.prototype.visitTimestamp=Wr;Tt.prototype.visitTime=Wr;Tt.prototype.visitDecimal=Wr;Tt.prototype.visitList=Wa;Tt.prototype.visitStruct=ja;Tt.prototype.visitUnion=V_;Tt.prototype.visitInterval=Wr;Tt.prototype.visitFixedSizeList=Wa;Tt.prototype.visitMap=Wa;var dn=class extends nn{static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t,e){throw new Error('"throughDOM" not available in this environment')}constructor(t){super(),this._position=0,this._started=!1,this._sink=new Ze,this._schema=null,this._dictionaryBlocks=[],this._recordBatchBlocks=[],this._dictionaryDeltaOffsets=new Map,$t(t)||(t={autoDestroy:!0,writeLegacyIpcFormat:!1}),this._autoDestroy=typeof t.autoDestroy=="boolean"?t.autoDestroy:!0,this._writeLegacyIpcFormat=typeof t.writeLegacyIpcFormat=="boolean"?t.writeLegacyIpcFormat:!1}toString(t=!1){return this._sink.toString(t)}toUint8Array(t=!1){return this._sink.toUint8Array(t)}writeAll(t){return Te(t)?t.then(e=>this.writeAll(e)):be(t)?Ya(this,t):$a(this,t)}get closed(){return this._sink.closed}[Symbol.asyncIterator](){return this._sink[Symbol.asyncIterator]()}toDOMStream(t){return this._sink.toDOMStream(t)}toNodeStream(t){return this._sink.toNodeStream(t)}close(){return this.reset()._sink.close()}abort(t){return this.reset()._sink.abort(t)}finish(){return this._autoDestroy?this.close():this.reset(this._sink,this._schema),this}reset(t=this._sink,e=null){return t===this._sink||t instanceof Ze?this._sink=t:(this._sink=new Ze,t&&kc(t)?this.toDOMStream({type:"bytes"}).pipeTo(t):t&&Cc(t)&&this.toNodeStream({objectMode:!1}).pipe(t)),this._started&&this._schema&&this._writeFooter(this._schema),this._started=!1,this._dictionaryBlocks=[],this._recordBatchBlocks=[],this._dictionaryDeltaOffsets=new Map,(!e||!ln(e,this._schema))&&(e==null?(this._position=0,this._schema=null):(this._started=!0,this._schema=e,this._writeSchema(e))),this}write(t){let e=null;if(this._sink){if(t==null)return this.finish()&&void 0;if(t instanceof Gt&&!(e=t.schema))return this.finish()&&void 0;if(t instanceof Ft&&!(e=t.schema))return this.finish()&&void 0}else throw new Error("RecordBatchWriter is closed");if(e&&!ln(e,this._schema)){if(this._started&&this._autoDestroy)return this.close();this.reset(this._sink,e)}t instanceof Ft?t instanceof un||this._writeRecordBatch(t):t instanceof Gt?this.writeAll(t.batches):xe(t)&&this.writeAll(t)}_writeMessage(t,e=8){let n=e-1,i=ie.encode(t),s=i.byteLength,o=this._writeLegacyIpcFormat?4:8,a=s+o+n&~n,c=a-s-o;return t.headerType===tt.RecordBatch?this._recordBatchBlocks.push(new br(a,t.bodyLength,this._position)):t.headerType===tt.DictionaryBatch&&this._dictionaryBlocks.push(new br(a,t.bodyLength,this._position)),this._writeLegacyIpcFormat||this._write(Int32Array.of(-1)),this._write(Int32Array.of(a-o)),s>0&&this._write(i),this._writePadding(c)}_write(t){if(this._started){let e=L(t);e&&e.byteLength>0&&(this._sink.write(e),this._position+=e.byteLength)}return this}_writeSchema(t){return this._writeMessage(ie.from(t))}_writeFooter(t){return this._writeLegacyIpcFormat?this._write(Int32Array.of(0)):this._write(Int32Array.of(-1,0))}_writeMagic(){return this._write(Pn)}_writePadding(t){return t>0?this._write(new Uint8Array(t)):this}_writeRecordBatch(t){let{byteLength:e,nodes:n,bufferRegions:i,buffers:s}=Tt.assemble(t),o=new Vt(t.numRows,n,i),a=ie.from(o,e);return this._writeDictionaries(t)._writeMessage(a)._writeBodyBuffers(s)}_writeDictionaryBatch(t,e,n=!1){this._dictionaryDeltaOffsets.set(e,t.length+(this._dictionaryDeltaOffsets.get(e)||0));let{byteLength:i,nodes:s,bufferRegions:o,buffers:a}=Tt.assemble(new J([t])),c=new Vt(t.length,s,o),f=new ne(c,e,n),p=ie.from(f,i);return this._writeMessage(p)._writeBodyBuffers(a)}_writeBodyBuffers(t){let e,n,i;for(let s=-1,o=t.length;++s<o;)(e=t[s])&&(n=e.byteLength)>0&&(this._write(e),(i=(n+7&-8)-n)>0&&this._writePadding(i));return this}_writeDictionaries(t){for(let[e,n]of t.dictionaries){let i=this._dictionaryDeltaOffsets.get(e)||0;if(i===0||(n=n==null?void 0:n.slice(i)).length>0)for(let s of n.data)this._writeDictionaryBatch(s,e,i>0),i+=s.length}return this}},fn=class r extends dn{static writeAll(t,e){let n=new r(e);return Te(t)?t.then(i=>n.writeAll(i)):be(t)?Ya(n,t):$a(n,t)}},hn=class r extends dn{static writeAll(t){let e=new r;return Te(t)?t.then(n=>e.writeAll(n)):be(t)?Ya(e,t):$a(e,t)}constructor(){super(),this._autoDestroy=!0}_writeSchema(t){return this._writeMagic()._writePadding(2)}_writeFooter(t){let e=yr.encode(new yr(t,Ut.V4,this._recordBatchBlocks,this._dictionaryBlocks));return super._writeFooter(t)._write(e)._write(Int32Array.of(e.byteLength))._writeMagic()}};function $a(r,t){let e=t;t instanceof Gt&&(e=t.batches,r.reset(void 0,t.schema));for(let n of e)r.write(n);return r.finish()}function Ya(r,t){var e,n,i,s,o,a,c;return F(this,void 0,void 0,function*(){try{for(e=!0,n=Ae(t);i=yield n.next(),s=i.done,!s;){c=i.value,e=!1;try{let f=c;r.write(f)}finally{e=!0}}}catch(f){o={error:f}}finally{try{!e&&!s&&(a=n.return)&&(yield a.call(n))}finally{if(o)throw o.error}}return r.finish()})}function mu(r,t){if(be(r))return j_(r,t);if(xe(r))return z_(r,t);throw new Error("toDOMStream() must be called with an Iterable or AsyncIterable")}function z_(r,t){let e=null,n=(t==null?void 0:t.type)==="bytes"||!1,i=(t==null?void 0:t.highWaterMark)||Math.pow(2,24);return new ReadableStream(Object.assign(Object.assign({},t),{start(o){s(o,e||(e=r[Symbol.iterator]()))},pull(o){e?s(o,e):o.close()},cancel(){(e!=null&&e.return&&e.return()||!0)&&(e=null)}}),Object.assign({highWaterMark:n?i:void 0},t));function s(o,a){let c,f=null,p=o.desiredSize||null;for(;!(f=a.next(n?p:null)).done;)if(ArrayBuffer.isView(f.value)&&(c=L(f.value))&&(p!=null&&n&&(p=p-c.byteLength+1),f.value=c),o.enqueue(f.value),p!=null&&--p<=0)return;o.close()}}function j_(r,t){let e=null,n=(t==null?void 0:t.type)==="bytes"||!1,i=(t==null?void 0:t.highWaterMark)||Math.pow(2,24);return new ReadableStream(Object.assign(Object.assign({},t),{start(o){return F(this,void 0,void 0,function*(){yield s(o,e||(e=r[Symbol.asyncIterator]()))})},pull(o){return F(this,void 0,void 0,function*(){e?yield s(o,e):o.close()})},cancel(){return F(this,void 0,void 0,function*(){(e!=null&&e.return&&(yield e.return())||!0)&&(e=null)})}}),Object.assign({highWaterMark:n?i:void 0},t));function s(o,a){return F(this,void 0,void 0,function*(){let c,f=null,p=o.desiredSize||null;for(;!(f=yield a.next(n?p:null)).done;)if(ArrayBuffer.isView(f.value)&&(c=L(f.value))&&(p!=null&&n&&(p=p-c.byteLength+1),f.value=c),o.enqueue(f.value),p!=null&&--p<=0)return;o.close()})}}function bu(r){return new Xa(r)}var Xa=class{constructor(t){this._numChunks=0,this._finished=!1,this._bufferedSize=0;let{["readableStrategy"]:e,["writableStrategy"]:n,["queueingStrategy"]:i="count"}=t,s=Nc(t,["readableStrategy","writableStrategy","queueingStrategy"]);this._controller=null,this._builder=on(s),this._getSize=i!=="bytes"?_u:yu;let{["highWaterMark"]:o=i==="bytes"?Math.pow(2,14):1e3}=Object.assign({},e),{["highWaterMark"]:a=i==="bytes"?Math.pow(2,14):1e3}=Object.assign({},n);this.readable=new ReadableStream({cancel:()=>{this._builder.clear()},pull:c=>{this._maybeFlush(this._builder,this._controller=c)},start:c=>{this._maybeFlush(this._builder,this._controller=c)}},{highWaterMark:o,size:i!=="bytes"?_u:yu}),this.writable=new WritableStream({abort:()=>{this._builder.clear()},write:()=>{this._maybeFlush(this._builder,this._controller)},close:()=>{this._maybeFlush(this._builder.finish(),this._controller)}},{highWaterMark:a,size:c=>this._writeValueAndReturnChunkSize(c)})}_writeValueAndReturnChunkSize(t){let e=this._bufferedSize;return this._bufferedSize=this._getSize(this._builder.append(t)),this._bufferedSize-e}_maybeFlush(t,e){e!=null&&(this._bufferedSize>=e.desiredSize&&++this._numChunks&&this._enqueue(e,t.toVector()),t.finished&&((t.length>0||this._numChunks===0)&&++this._numChunks&&this._enqueue(e,t.toVector()),!this._finished&&(this._finished=!0)&&this._enqueue(e,null)))}_enqueue(t,e){this._bufferedSize=0,this._controller=null,e==null?t.close():t.enqueue(e)}},_u=r=>{var t;return(t=r==null?void 0:r.length)!==null&&t!==void 0?t:0},yu=r=>{var t;return(t=r==null?void 0:r.byteLength)!==null&&t!==void 0?t:0};function xo(r,t){let e=new Ze,n=null,i=new ReadableStream({cancel(){return F(this,void 0,void 0,function*(){yield e.close()})},start(a){return F(this,void 0,void 0,function*(){yield o(a,n||(n=yield s()))})},pull(a){return F(this,void 0,void 0,function*(){n?yield o(a,n):a.close()})}});return{writable:new WritableStream(e,Object.assign({highWaterMark:Math.pow(2,14)},r)),readable:i};function s(){return F(this,void 0,void 0,function*(){return yield(yield Ht.from(e)).open(t)})}function o(a,c){return F(this,void 0,void 0,function*(){let f=a.desiredSize,p=null;for(;!(p=yield c.next()).done;)if(a.enqueue(p.value),f!=null&&--f<=0)return;a.close()})}}function Do(r,t){let e=new this(r),n=new Se(e),i=new ReadableStream({cancel(){return F(this,void 0,void 0,function*(){yield n.cancel()})},pull(o){return F(this,void 0,void 0,function*(){yield s(o)})},start(o){return F(this,void 0,void 0,function*(){yield s(o)})}},Object.assign({highWaterMark:Math.pow(2,14)},t));return{writable:new WritableStream(e,r),readable:i};function s(o){return F(this,void 0,void 0,function*(){let a=null,c=o.desiredSize;for(;a=yield n.read(c||null);)if(o.enqueue(a),c!=null&&(c-=a.byteLength)<=0)return;o.close()})}}function Eo(r,t="stream"){return(t==="stream"?fn:hn).writeAll(r).toUint8Array(!0)}var X_=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},sa),Ea),va),oa),ra),wa),{compareSchemas:ln,compareFields:$l,compareTypes:Yl});kt.toDOMStream=mu;_t.throughDOM=bu;Ht.throughDOM=xo;jr.throughDOM=xo;er.throughDOM=xo;dn.throughDOM=Do;hn.throughDOM=Do;fn.throughDOM=Do;function jn(r){switch(r.typeId){case h.Binary:return{sqlType:"binary"};case h.Bool:return{sqlType:"bool"};case h.Date:return{sqlType:"date"};case h.DateDay:return{sqlType:"date32[d]"};case h.DateMillisecond:return{sqlType:"date64[ms]"};case h.Decimal:{let t=r;return{sqlType:"decimal",precision:t.precision,scale:t.scale}}case h.Float:return{sqlType:"float"};case h.Float16:return{sqlType:"float16"};case h.Float32:return{sqlType:"float32"};case h.Float64:return{sqlType:"float64"};case h.Int:return{sqlType:"int32"};case h.Int16:return{sqlType:"int16"};case h.Int32:return{sqlType:"int32"};case h.Int64:return{sqlType:"int64"};case h.Uint16:return{sqlType:"uint16"};case h.Uint32:return{sqlType:"uint32"};case h.Uint64:return{sqlType:"uint64"};case h.Uint8:return{sqlType:"uint8"};case h.IntervalDayTime:return{sqlType:"interval[dt]"};case h.IntervalYearMonth:return{sqlType:"interval[m]"};case h.List:return{sqlType:"list",valueType:jn(r.valueType)};case h.FixedSizeBinary:return{sqlType:"fixedsizebinary",byteWidth:r.byteWidth};case h.Null:return{sqlType:"null"};case h.Utf8:return{sqlType:"utf8"};case h.Struct:return{sqlType:"struct",fields:r.children.map(e=>Oo(e.name,e.type))};case h.Map:{let t=r;return{sqlType:"map",keyType:jn(t.keyType),valueType:jn(t.valueType)}}case h.Time:return{sqlType:"time[s]"};case h.TimeMicrosecond:return{sqlType:"time[us]"};case h.TimeMillisecond:return{sqlType:"time[ms]"};case h.TimeNanosecond:return{sqlType:"time[ns]"};case h.TimeSecond:return{sqlType:"time[s]"};case h.Timestamp:return{sqlType:"timestamp",timezone:r.timezone||void 0};case h.TimestampSecond:return{sqlType:"timestamp[s]",timezone:r.timezone||void 0};case h.TimestampMicrosecond:return{sqlType:"timestamp[us]",timezone:r.timezone||void 0};case h.TimestampNanosecond:return{sqlType:"timestamp[ns]",timezone:r.timezone||void 0};case h.TimestampMillisecond:return{sqlType:"timestamp[ms]",timezone:r.timezone||void 0}}throw new Error("unsupported arrow type: ".concat(r.toString()))}function Oo(r,t){let e=jn(t);return e.name=r,e}var Ro=class{constructor(){this._bindings=null;this._nextMessageId=0}log(t){this.postMessage({messageId:this._nextMessageId++,requestId:0,type:"LOG",data:t},[])}sendOK(t){this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"OK",data:null},[])}failWith(t,e){let n={name:e.name,message:e.message,stack:e.stack||void 0};this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"ERROR",data:n},[])}async onMessage(t){switch(t.type){case"PING":this.sendOK(t);return;case"INSTANTIATE":this._bindings!=null&&this.failWith(t,new Error("duckdb already initialized"));try{this._bindings=await this.instantiate(t.data[0],t.data[1],e=>{this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"INSTANTIATE_PROGRESS",data:e},[])}),this.sendOK(t)}catch(e){console.log(e),this._bindings=null,this.failWith(t,e)}return;default:break}if(!this._bindings)return this.failWith(t,new Error("duckdb is not initialized"));try{switch(t.type){case"GET_VERSION":this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"VERSION_STRING",data:this._bindings.getVersion()},[]);break;case"GET_FEATURE_FLAGS":this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FEATURE_FLAGS",data:this._bindings.getFeatureFlags()},[]);break;case"RESET":this._bindings.reset(),this.sendOK(t);break;case"OPEN":this._bindings.open(t.data),this.sendOK(t);break;case"DROP_FILE":this._bindings.dropFile(t.data),this.sendOK(t);break;case"DROP_FILES":this._bindings.dropFiles(),this.sendOK(t);break;case"FLUSH_FILES":this._bindings.flushFiles(),this.sendOK(t);break;case"CONNECT":{let e=this._bindings.connect();this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"CONNECTION_INFO",data:e.useUnsafe((n,i)=>i)},[]);break}case"DISCONNECT":this._bindings.disconnect(t.data),this.sendOK(t);break;case"CREATE_PREPARED":{let e=this._bindings.createPrepared(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"PREPARED_STATEMENT_ID",data:e},[]);break}case"CLOSE_PREPARED":{this._bindings.closePrepared(t.data[0],t.data[1]),this.sendOK(t);break}case"RUN_PREPARED":{let e=this._bindings.runPrepared(t.data[0],t.data[1],t.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT",data:e},[e.buffer]);break}case"RUN_QUERY":{let e=this._bindings.runQuery(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT",data:e},[e.buffer]);break}case"SEND_PREPARED":{let e=this._bindings.sendPrepared(t.data[0],t.data[1],t.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER",data:e},[e.buffer]);break}case"START_PENDING_QUERY":{let e=this._bindings.startPendingQuery(t.data[0],t.data[1]),n=[];e&&n.push(e.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:e},n);break}case"POLL_PENDING_QUERY":{let e=this._bindings.pollPendingQuery(t.data),n=[];e&&n.push(e.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:e},n);break}case"CANCEL_PENDING_QUERY":{let e=this._bindings.cancelPendingQuery(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"SUCCESS",data:e},[]);break}case"FETCH_QUERY_RESULTS":{let e=this._bindings.fetchQueryResults(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_CHUNK",data:e},[e.buffer]);break}case"GET_TABLE_NAMES":{let e=this._bindings.getTableNames(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"TABLE_NAMES",data:e},[]);break}case"GLOB_FILE_INFOS":{let e=this._bindings.globFiles(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_INFOS",data:e},[]);break}case"REGISTER_FILE_URL":this._bindings.registerFileURL(t.data[0],t.data[1],t.data[2],t.data[3]),this.sendOK(t);break;case"REGISTER_FILE_BUFFER":this._bindings.registerFileBuffer(t.data[0],t.data[1]),this.sendOK(t);break;case"REGISTER_FILE_HANDLE":this._bindings.registerFileHandle(t.data[0],t.data[1],t.data[2],t.data[3]),this.sendOK(t);break;case"COPY_FILE_TO_PATH":this._bindings.copyFileToPath(t.data[0],t.data[1]),this.sendOK(t);break;case"COPY_FILE_TO_BUFFER":{let e=this._bindings.copyFileToBuffer(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_BUFFER",data:e},[]);break}case"COLLECT_FILE_STATISTICS":this._bindings.collectFileStatistics(t.data[0],t.data[1]),this.sendOK(t);break;case"EXPORT_FILE_STATISTICS":{this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_STATISTICS",data:this._bindings.exportFileStatistics(t.data)},[]);break}case"INSERT_ARROW_FROM_IPC_STREAM":{this._bindings.insertArrowFromIPCStream(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"IMPORT_CSV_FROM_PATH":{this._bindings.insertCSVFromPath(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"IMPORT_JSON_FROM_PATH":{this._bindings.insertJSONFromPath(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"TOKENIZE":{let e=this._bindings.tokenize(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"SCRIPT_TOKENS",data:e},[]);break}}}catch(e){return console.log(e),this.failWith(t,e)}}};var xu=Mc(Iu());var Uo=class{constructor(t,e){this._bindings=t,this._conn=e}close(){this._bindings.disconnect(this._conn)}useUnsafe(t){return t(this._bindings,this._conn)}query(t){let e=this._bindings.runQuery(this._conn,t),n=Ht.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new Gt(n)}async send(t){let e=this._bindings.startPendingQuery(this._conn,t);for(;e==null;)e=await new Promise((s,o)=>{try{s(this._bindings.pollPendingQuery(this._conn))}catch(a){console.log(a),o(a)}});let n=new No(this._bindings,this._conn,e),i=Ht.from(n);return console.assert(i.isSync()),console.assert(i.isStream()),i}cancelSent(){return this._bindings.cancelPendingQuery(this._conn)}getTableNames(t){return this._bindings.getTableNames(this._conn,t)}prepare(t){let e=this._bindings.createPrepared(this._conn,t);return new Ja(this._bindings,this._conn,e)}createScalarFunction(t,e,n){this._bindings.createScalarFunction(this._conn,t,e,n)}insertArrowTable(t,e){let n=Eo(t,"stream");this.insertArrowFromIPCStream(n,e)}insertArrowFromIPCStream(t,e){this._bindings.insertArrowFromIPCStream(this._conn,t,e)}insertCSVFromPath(t,e){this._bindings.insertCSVFromPath(this._conn,t,e)}insertJSONFromPath(t,e){this._bindings.insertJSONFromPath(this._conn,t,e)}},No=class{constructor(t,e,n){this.bindings=t;this.conn=e;this.header=n;this._first=!0,this._depleted=!1}next(){if(this._first)return this._first=!1,{done:!1,value:this.header};if(this._depleted)return{done:!0,value:null};let t=this.bindings.fetchQueryResults(this.conn);return this._depleted=t.length==0,{done:this._depleted,value:t}}[Symbol.iterator](){return this}},Ja=class{constructor(t,e,n){this.bindings=t,this.connectionId=e,this.statementId=n}close(){this.bindings.closePrepared(this.connectionId,this.statementId)}query(...t){let e=this.bindings.runPrepared(this.connectionId,this.statementId,t),n=Ht.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new Gt(n)}send(...t){let e=this.bindings.sendPrepared(this.connectionId,this.statementId,t),n=new No(this.bindings,this.connectionId,e),i=Ht.from(n);return console.assert(i.isSync()),console.assert(i.isStream()),i}};var Au=new TextEncoder,Fu=new TextDecoder("utf-8");function qa(r,t,e){let n=Au.encode(e),i=r._malloc(n.byteLength),s=r.HEAPU8.subarray(i,i+n.byteLength);s.set(n),r.HEAPF64[(t>>3)+0]=1,r.HEAPF64[(t>>3)+1]=i,r.HEAPF64[(t>>3)+2]=s.byteLength}function Qa(r){switch(r){case"UINT8":case"INT8":return 1;case"INT32":case"FLOAT":return 4;case"INT64":case"UINT64":case"DOUBLE":case"VARCHAR":return 8;default:return 0}}function Za(r,t,e,n){let i=r.HEAPU8.subarray(t,t+n*Qa(e));switch(e){case"UINT8":return new Uint8Array(i.buffer,i.byteOffset,n);case"INT8":return new Int8Array(i.buffer,i.byteOffset,n);case"INT32":return new Int32Array(i.buffer,i.byteOffset,n);case"FLOAT":return new Float32Array(i.buffer,i.byteOffset,n);case"DOUBLE":return new Float64Array(i.buffer,i.byteOffset,n);case"VARCHAR":return new Float64Array(i.buffer,i.byteOffset,n);default:return new Array(0)}}function Bu(r,t,e){let n=r.HEAPU8.subarray(t,t+e);return new Uint8Array(n.buffer,n.byteOffset,e)}function Lo(r,t,e){let n=r.HEAPU8.subarray(t,t+e*8);return new Float64Array(n.buffer,n.byteOffset,e)}function Tu(r,t,e,n,i,s,o,a){try{let c=r._udfFunctions.get(n);if(!c){qa(t,e,"Unknown UDF with id: "+n);return}let f=Fu.decode(t.HEAPU8.subarray(i,i+s)),p=JSON.parse(f),y=Lo(t,o,a/8),w=Z=>{var qt;let Mt=null;switch(Z.validityBuffer!==void 0&&(Mt=Bu(t,y[Z.validityBuffer],p.rows)),Z.physicalType){case"VARCHAR":{if(Z.dataBuffer===null||Z.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for VARCHAR argument");if(Z.lengthBuffer===null||Z.lengthBuffer===void 0)throw new Error("malformed data view, expected data length buffer for VARCHAR argument");let St=Za(t,y[Z.dataBuffer],Z.physicalType,p.rows),bt=[],It=Lo(t,y[Z.lengthBuffer],p.rows);for(let lt=0;lt<p.rows;++lt){if(Mt!=null&&!Mt[lt]){bt.push(null);continue}let v=t.HEAPU8.subarray(St[lt],St[lt]+It[lt]),ot=Fu.decode(v);bt.push(ot)}return lt=>bt[lt]}case"STRUCT":{let St={},bt=[];for(let It=0;It<(((qt=Z.children)==null?void 0:qt.length)||0);++It){let lt=Z.children[It],v=w(lt);bt.push(ot=>{St[lt.name]=v(ot)})}return Mt!=null?It=>{if(!Mt[It])return null;for(let lt of bt)lt(It);return St}:It=>{for(let lt of bt)lt(It);return St}}default:{if(Z.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for argument of type: "+Z.physicalType);let St=Za(t,y[Z.dataBuffer],Z.physicalType,p.rows);return Mt!=null?bt=>Mt[bt]?St[bt]:null:bt=>St[bt]}}},B=[];for(let Z=0;Z<p.args.length;++Z)B.push(w(p.args[Z]));let Q=p.rows*Qa(p.ret.physicalType),Bt=t._malloc(Q),xt=Za(t,Bt,p.ret.physicalType,p.rows),Rt=t._malloc(p.rows),Kt=Bu(t,Rt,p.rows);if(xt.length==0||Kt.length==0){qa(t,e,"Can't create physical arrays for result");return}let Jt=xt;p.ret.physicalType=="VARCHAR"&&(Jt=new Array(p.rows));let Wn=[];for(let Z=0;Z<p.args.length;++Z)Wn.push(null);for(let Z=0;Z<p.rows;++Z){for(let qt=0;qt<p.args.length;++qt)Wn[qt]=B[qt](Z);let Mt=c.func(...Wn);Jt[Z]=Mt,Kt[Z]=Mt==null?0:1}let N=0;switch(p.ret.physicalType){case"VARCHAR":{let Z=new Array(0);N=t._malloc(p.rows*Qa("DOUBLE"));let Mt=Lo(t,N,p.rows),qt=0;for(let lt=0;lt<p.rows;++lt){let v=Au.encode(Jt[lt]||"");Z.push(v),Mt[lt]=v.length,qt+=v.length}let St=t._malloc(qt),bt=t.HEAPU8.subarray(St,St+qt),It=0;for(let lt=0;lt<p.rows;++lt){xt[lt]=It;let v=Z[lt];bt.subarray(It,It+v.length).set(v),It+=v.length}}}let Yr=3*8,Gi=t._malloc(Yr),Br=Lo(t,Gi,3);Br[0]=Bt,Br[1]=Rt,Br[2]=N,t.HEAPF64[(e>>3)+0]=0,t.HEAPF64[(e>>3)+1]=Gi,t.HEAPF64[(e>>3)+2]=0}catch(c){qa(t,e,c.toString())}}function K_(){let r=new TextDecoder;return t=>(typeof SharedArrayBuffer<"u"&&t.buffer instanceof SharedArrayBuffer&&(t=new Uint8Array(t)),r.decode(t))}var J_=K_();function Fe(r,t){console.error("FAIL WITH: ".concat(t)),r.ccall("duckdb_web_fail_with",null,["string"],[t])}function pn(r,t,e){let n=r.HEAPU8.subarray(t,t+e),i=new Uint8Array(new ArrayBuffer(n.byteLength));return i.set(n),i}function j(r,t,e){return J_(r.HEAPU8.subarray(t,t+e))}function st(r,t,e,n){let i=r.stackSave(),s=r.stackAlloc(3*8);e.unshift("number"),n.unshift(s),r.ccall(t,null,e,n);let o=r.HEAPF64[(s>>3)+0],a=r.HEAPF64[(s>>3)+1],c=r.HEAPF64[(s>>3)+2];return r.stackRestore(i),[o,a,c]}function pt(r){r.ccall("duckdb_web_clear_response",null,[],[])}var ko=class{constructor(t){let e=new Float64Array(t.buffer,t.byteOffset,t.byteLength/8),n=new Uint8Array(new ArrayBuffer(t.byteLength));n.set(t.subarray(7*8)),this.totalFileReadsCold=e[0],this.totalFileReadsAhead=e[1],this.totalFileReadsCached=e[2],this.totalFileWrites=e[3],this.totalPageAccesses=e[4],this.totalPageLoads=e[5],this.blockSize=e[6],this.blockStats=n}getBlockStats(t,e){return e=e||{file_reads_cold:0,file_reads_ahead:0,file_reads_cached:0,file_writes:0,page_accesses:0,page_loads:0},e.file_writes=this.blockStats[t*3+0]&15,e.file_reads_cold=this.blockStats[t*3+0]>>4,e.file_reads_ahead=this.blockStats[t*3+1]&15,e.file_reads_cached=this.blockStats[t*3+1]>>4,e.page_accesses=this.blockStats[t*3+1]&15,e.page_loads=this.blockStats[t*3+1]>>4,e}};var q_=new TextEncoder;var Co=class{constructor(t,e){this._instance=null;this._initPromise=null;this._initPromiseResolver=()=>{};this.onInstantiationProgress=[];this._logger=t,this._runtime=e,this._nextUDFId=1}get logger(){return this._logger}get mod(){return this._instance}get pthread(){return this.mod.PThread||null}async instantiate(t=e=>{}){return this._instance!=null?this:(this._initPromise!=null&&(this.onInstantiationProgress.push(t),await this._initPromise),this._initPromise=new Promise(e=>{this._initPromiseResolver=e}),this.onInstantiationProgress=[t],this._instance=await this.instantiateImpl({print:console.log.bind(console),printErr:console.log.bind(console),onRuntimeInitialized:this._initPromiseResolver}),await this._initPromise,this._initPromise=null,this.onInstantiationProgress=this.onInstantiationProgress.filter(e=>e!=t),this)}open(t){let[e,n,i]=st(this.mod,"duckdb_web_open",["string"],[JSON.stringify(t)]);if(e!==0)throw new Error(j(this.mod,n,i));pt(this.mod)}reset(){let[t,e,n]=st(this.mod,"duckdb_web_reset",[],[]);if(t!==0)throw new Error(j(this.mod,e,n));pt(this.mod)}getVersion(){let[t,e,n]=st(this.mod,"duckdb_web_get_version",[],[]);if(t!==0)throw new Error(j(this.mod,e,n));let i=j(this.mod,e,n);return pt(this.mod),i}getFeatureFlags(){return this.mod.ccall("duckdb_web_get_feature_flags","number",[],[])}tokenize(t){let[e,n,i]=st(this.mod,"duckdb_web_tokenize",["string"],[t]);if(e!==0)throw new Error(j(this.mod,n,i));let s=j(this.mod,n,i);return pt(this.mod),JSON.parse(s)}connect(){let t=this.mod.ccall("duckdb_web_connect","number",[],[]);return new Uo(this,t)}disconnect(t){if(this.mod.ccall("duckdb_web_disconnect",null,["number"],[t]),this.pthread)for(let e of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])e.postMessage({cmd:"dropUDFFunctions",connectionId:t})}runQuery(t,e){let[n,i,s]=st(this.mod,"duckdb_web_query_run",["number","string"],[t,e]);if(n!==0)throw new Error(j(this.mod,i,s));let o=pn(this.mod,i,s);return pt(this.mod),o}startPendingQuery(t,e){let[n,i,s]=st(this.mod,"duckdb_web_pending_query_start",["number","string"],[t,e]);if(n!==0)throw new Error(j(this.mod,i,s));if(i==0)return null;let o=pn(this.mod,i,s);return pt(this.mod),o}pollPendingQuery(t){let[e,n,i]=st(this.mod,"duckdb_web_pending_query_poll",["number"],[t]);if(e!==0)throw new Error(j(this.mod,n,i));if(n==0)return null;let s=pn(this.mod,n,i);return pt(this.mod),s}cancelPendingQuery(t){return this.mod.ccall("duckdb_web_pending_query_cancel","boolean",["number"],[t])}fetchQueryResults(t){let[e,n,i]=st(this.mod,"duckdb_web_query_fetch_results",["number"],[t]);if(e!==0)throw new Error(j(this.mod,n,i));let s=pn(this.mod,n,i);return pt(this.mod),s}getTableNames(t,e){let[n,i,s]=st(this.mod,"duckdb_web_get_tablenames",["number","string"],[t,e]);if(n!==0)throw new Error(j(this.mod,i,s));let o=j(this.mod,i,s);return pt(this.mod),JSON.parse(o)}createScalarFunction(t,e,n,i){let s={functionId:this._nextUDFId,name:e,returnType:jn(n)},o={functionId:s.functionId,connectionId:t,name:e,returnType:n,func:i};this._nextUDFId+=1;let[a,c,f]=st(this.mod,"duckdb_web_udf_scalar_create",["number","string"],[t,JSON.stringify(s)]);if(a!==0)throw new Error(j(this.mod,c,f));if(pt(this.mod),globalThis.DUCKDB_RUNTIME._udfFunctions=(globalThis.DUCKDB_RUNTIME._udfFunctions||new Map).set(o.functionId,o),this.pthread)for(let p of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])p.postMessage({cmd:"registerUDFFunction",udf:o})}createPrepared(t,e){let[n,i,s]=st(this.mod,"duckdb_web_prepared_create",["number","string"],[t,e]);if(n!==0)throw new Error(j(this.mod,i,s));return pt(this.mod),i}closePrepared(t,e){let[n,i,s]=st(this.mod,"duckdb_web_prepared_close",["number","number"],[t,e]);if(n!==0)throw new Error(j(this.mod,i,s));pt(this.mod)}runPrepared(t,e,n){let[i,s,o]=st(this.mod,"duckdb_web_prepared_run",["number","number","string"],[t,e,JSON.stringify(n)]);if(i!==0)throw new Error(j(this.mod,s,o));let a=pn(this.mod,s,o);return pt(this.mod),a}sendPrepared(t,e,n){let[i,s,o]=st(this.mod,"duckdb_web_prepared_send",["number","number","string"],[t,e,JSON.stringify(n)]);if(i!==0)throw new Error(j(this.mod,s,o));let a=pn(this.mod,s,o);return pt(this.mod),a}insertArrowFromIPCStream(t,e,n){if(e.length==0)return;let i=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(i,i+e.length).set(e);let o=n?JSON.stringify(n):"",[a,c,f]=st(this.mod,"duckdb_web_insert_arrow_from_ipc_stream",["number","number","number","string"],[t,i,e.length,o]);if(a!==0)throw new Error(j(this.mod,c,f))}insertCSVFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let f in n.columns)n.columnsFlat.push(Oo(f,n.columns[f]))}let i={...n};i.columns=i.columnsFlat,delete i.columnsFlat;let s=JSON.stringify(i),[o,a,c]=st(this.mod,"duckdb_web_insert_csv_from_path",["number","string","string"],[t,e,s]);if(o!==0)throw new Error(j(this.mod,a,c))}insertJSONFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let f in n.columns)n.columnsFlat.push(Oo(f,n.columns[f]))}let i={...n};i.columns=i.columnsFlat,delete i.columnsFlat;let s=JSON.stringify(i),[o,a,c]=st(this.mod,"duckdb_web_insert_json_from_path",["number","string","string"],[t,e,s]);if(o!==0)throw new Error(j(this.mod,a,c))}globFiles(t){let[e,n,i]=st(this.mod,"duckdb_web_fs_glob_file_infos",["string"],[t]);if(e!==0)throw new Error(j(this.mod,n,i));let s=j(this.mod,n,i);pt(this.mod);let o=JSON.parse(s);return o==null?[]:o}registerFileURL(t,e,n,i=!1){e===void 0&&(e=t);let[s,o,a]=st(this.mod,"duckdb_web_fs_register_file_url",["string","string"],[t,e,n,i]);if(s!==0)throw new Error(j(this.mod,o,a));pt(this.mod)}registerFileText(t,e){let n=q_.encode(e);this.registerFileBuffer(t,n)}registerFileBuffer(t,e){let n=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(n,n+e.length).set(e);let[s,o,a]=st(this.mod,"duckdb_web_fs_register_file_buffer",["string","number","number"],[t,n,e.length]);if(s!==0)throw new Error(j(this.mod,o,a));pt(this.mod)}registerFileHandle(t,e,n,i){let[s,o,a]=st(this.mod,"duckdb_web_fs_register_file_url",["string","string","number","boolean"],[t,t,n,i]);if(s!==0)throw new Error(j(this.mod,o,a));if(pt(this.mod),globalThis.DUCKDB_RUNTIME._files=(globalThis.DUCKDB_RUNTIME._files||new Map).set(t,e),this.pthread){for(let c of this.pthread.runningWorkers)c.postMessage({cmd:"registerFileHandle",fileName:t,fileHandle:e});for(let c of this.pthread.unusedWorkers)c.postMessage({cmd:"dropFileHandle",fileName:t})}}dropFile(t){let[e,n,i]=st(this.mod,"duckdb_web_fs_drop_file",["string"],[t]);if(e!==0)throw new Error(j(this.mod,n,i));pt(this.mod)}dropFiles(){let[t,e,n]=st(this.mod,"duckdb_web_fs_drop_files",[],[]);if(t!==0)throw new Error(j(this.mod,e,n));pt(this.mod)}flushFiles(){this.mod.ccall("duckdb_web_flush_files",null,[],[])}copyFileToPath(t,e){let[n,i,s]=st(this.mod,"duckdb_web_copy_file_to_path",["string","string"],[t,e]);if(n!==0)throw new Error(j(this.mod,i,s));pt(this.mod)}copyFileToBuffer(t){let[e,n,i]=st(this.mod,"duckdb_web_copy_file_to_buffer",["string"],[t]);if(e!==0)throw new Error(j(this.mod,n,i));let s=this.mod.HEAPU8.subarray(n,n+i),o=new Uint8Array(s.length);return o.set(s),pt(this.mod),o}collectFileStatistics(t,e){let[n,i,s]=st(this.mod,"duckdb_web_collect_file_stats",["string","boolean"],[t,e]);if(n!==0)throw new Error(j(this.mod,i,s))}exportFileStatistics(t){let[e,n,i]=st(this.mod,"duckdb_web_export_file_stats",["string"],[t]);if(e!==0)throw new Error(j(this.mod,n,i));return new ko(this.mod.HEAPU8.subarray(n,n+i))}};var Po=class extends Co{constructor(e,n,i,s){super(e,n);this.mainModuleURL=i,this.pthreadWorkerURL=s}locateFile(e,n){if(e.endsWith(".wasm"))return this.mainModuleURL;if(e.endsWith(".worker.js")){if(!this.pthreadWorkerURL)throw new Error("Missing DuckDB worker URL!");return this.pthreadWorkerURL}throw new Error("WASM instantiation requested unexpected file: prefix=".concat(n," path=").concat(e))}instantiateWasm(e,n){globalThis.DUCKDB_RUNTIME=this._runtime;let i=this.onInstantiationProgress;if(WebAssembly.instantiateStreaming)if(typeof TransformStream=="function"){let o=(async()=>{var Bt;let a=new Request(this.mainModuleURL),c=await fetch(a),f=c.headers.get("content-length"),p=f&&parseInt(f,10)||0,y=new Date,w={startedAt:y,updatedAt:y,bytesTotal:p||0,bytesLoaded:0},B={transform(xt,Rt){w.bytesLoaded+=xt.byteLength;let Kt=new Date;if(Kt.getTime()-w.updatedAt.getTime()<20){w.updatedAt=Kt,Rt.enqueue(xt);return}for(let Jt of i)Jt(w);Rt.enqueue(xt)}},Q=new TransformStream(B);return new Response((Bt=c.body)==null?void 0:Bt.pipeThrough(Q),c)})();WebAssembly.instantiateStreaming(o,e).then(a=>{n(a.instance,a.module)})}else{console.warn("instantiating without progress handler since transform streams are unavailable");let s=new Request(this.mainModuleURL);WebAssembly.instantiateStreaming(fetch(s),e).then(o=>{n(o.instance,o.module)})}else if(typeof XMLHttpRequest=="function"){let s=new XMLHttpRequest,o=this.mainModuleURL,a=new Date,c={startedAt:a,updatedAt:a,bytesTotal:0,bytesLoaded:0};s.open("GET",o),s.responseType="arraybuffer",s.onerror=f=>{throw this.logger.log({timestamp:new Date,level:4,origin:3,topic:5,event:2,value:"Failed to load WASM: "+f}),new Error(f.toString())},s.onprogress=f=>{c.bytesTotal=f.total,c.bytesLoaded=f.loaded;let p=new Date;if(p.getTime()-c.updatedAt.getTime()<20){c.updatedAt=p;return}for(let y of i)y(c)},s.onload=()=>{WebAssembly.instantiate(s.response,e).then(f=>{n(f.instance,f.module)}).catch(f=>{throw this.logger.log({timestamp:new Date,level:4,origin:3,topic:5,event:2,value:"Failed to instantiate WASM: "+f}),new Error(f)})},s.send()}else console.warn("instantiating with manual fetch since streaming instantiation and xhrs are unavailable"),(async()=>{let o=new Request(this.mainModuleURL),c=await(await fetch(o)).arrayBuffer();WebAssembly.instantiate(c,e).then(f=>{n(f.instance,f.module)})})();return[]}};var Vo=class extends Po{constructor(t,e,n,i=null){super(t,e,n,i)}instantiateImpl(t){return(0,xu.default)({...t,instantiateWasm:this.instantiateWasm.bind(this),locateFile:this.locateFile.bind(this)})}};var $r=Mc(Du()),Eu=function(r,t,e){var n;if((n=r==null?void 0:r.endpoint)!=null&&n.startsWith("http")){let i="".concat(r==null?void 0:r.endpoint),s=i.indexOf("://")+3;return i.substring(s)}else return r!=null&&r.endpoint?"".concat(e,".").concat(r==null?void 0:r.endpoint):"".concat(e,".s3.amazonaws.com")};function Z_(r,t,e){var s,o,a,c;let n=Ou(t),i=n.path;return Ru(r)&&(i="/".concat(n.bucket).concat(i)),{url:i,query:"",host:Eu(r,t,n.bucket),region:(s=r==null?void 0:r.region)!=null?s:"",service:"s3",method:e,accessKeyId:(o=r==null?void 0:r.accessKeyId)!=null?o:"",secretAccessKey:(a=r==null?void 0:r.secretAccessKey)!=null?a:"",sessionToken:(c=r==null?void 0:r.sessionToken)!=null?c:"",dateNow:new Date().toISOString().replace(/-/g,"").split("T")[0],datetimeNow:new Date().toISOString().replace(/-/g,"").replace(/:/g,"").split(".")[0]+"Z"}}function Q_(r,t=!1){let e="0123456789ABCDEF",n="";for(let i=0;i<r.length;i++){let s=r[i];s>="A"&&s<="Z"||s>="a"&&s<="z"||s>="0"&&s<="9"||s=="_"||s=="-"||s=="~"||s=="."?n+=s:s=="/"?t?n+="%2F":n+=s:(n+="%",n+=e[s.charCodeAt(0)>>4],n+=e[s.charCodeAt(0)&15])}return n}function ty(r,t=null){var Q;let e=(Q=t==null?void 0:t.contentHash)!=null?Q:"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",n=new Map;n.set("x-amz-date",r.datetimeNow),n.set("x-amz-content-sha256",e),r.sessionToken&&n.set("x-amz-security-token",r.sessionToken);let i="";t!=null&&t.contentType&&(i+="content-type;"),i+="host;x-amz-content-sha256;x-amz-date",r.sessionToken&&(i+=";x-amz-security-token");let s=r.method+"\n"+Q_(r.url)+"\n"+r.query;t!=null&&t.contentType&&(s+="\ncontent-type:"+(t==null?void 0:t.contentType)),s+="\nhost:"+r.host+"\nx-amz-content-sha256:"+e+"\nx-amz-date:"+r.datetimeNow,r.sessionToken&&r.sessionToken.length>0&&(s+="\nx-amz-security-token:"+r.sessionToken),s+="\n\n"+i+"\n"+e;let o=(0,$r.sha256)(s),a="AWS4-HMAC-SHA256\n"+r.datetimeNow+"\n"+r.dateNow+"/"+r.region+"/"+r.service+"/aws4_request\n"+o,c="AWS4"+r.secretAccessKey,f=$r.sha256.hmac.arrayBuffer(c,r.dateNow),p=$r.sha256.hmac.arrayBuffer(f,r.region),y=$r.sha256.hmac.arrayBuffer(p,r.service),w=$r.sha256.hmac.arrayBuffer(y,"aws4_request"),B=$r.sha256.hmac(w,a);return n.set("Authorization","AWS4-HMAC-SHA256 Credential="+r.accessKeyId+"/"+r.dateNow+"/"+r.region+"/"+r.service+"/aws4_request, SignedHeaders="+i+", Signature="+B),n}var ey=function(r,t,e,n=null,i=null){let s=Z_(r,t,e),o={contentType:n,contentHash:i?$r.sha256.hex(i):null};return ty(s,o)};function rr(r,t,e,n,i=null,s=null){(t!=null&&t.accessKeyId||t!=null&&t.sessionToken)&&(ey(t,e,n,i,s).forEach((a,c)=>{r.setRequestHeader(c,a)}),i&&r.setRequestHeader("content-type",i))}function Ou(r){if(r.indexOf("s3://")!=0)throw new Error("URL needs to start with s3://");let t=r.indexOf("/",5);if(t==-1)throw new Error("URL needs to contain a '/' after the host");let e=r.substring(5,t);if(!e)throw new Error("URL needs to contain a bucket name");let n=r.substring(t);if(!n)throw new Error("URL needs to contain key");return{bucket:e,path:n}}function Ru(r){var t;return!!((t=r==null?void 0:r.endpoint)!=null&&t.startsWith("http"))}function nr(r,t){let e=Ou(t);return Ru(r)?"".concat(r==null?void 0:r.endpoint,"/").concat(e.bucket)+e.path:"https://"+Eu(r,t,e.bucket)+e.path}var rt={_files:new Map,_fileInfoCache:new Map,_udfFunctions:new Map,_globalFileInfo:null,getFileInfo(r,t){try{let e=rt._fileInfoCache.get(t),[n,i,s]=st(r,"duckdb_web_fs_get_file_info_by_id",["number","number"],[t,(e==null?void 0:e.cacheEpoch)||0]);if(n!==0)return null;if(s===0)return e;let o=j(r,i,s);pt(r);let a=JSON.parse(o);if(a==null)return null;let c={...a,blob:null};return rt._fileInfoCache.set(t,c),c}catch(e){return console.log(e),null}},getGlobalFileInfo(r){var t;try{let[e,n,i]=st(r,"duckdb_web_get_global_file_info",["number"],[((t=rt._globalFileInfo)==null?void 0:t.cacheEpoch)||0]);if(e!==0)return null;if(i===0)return rt._globalFileInfo;let s=j(r,n,i);pt(r);let o=JSON.parse(s);return o==null?null:(rt._globalFileInfo={...o,blob:null},rt._globalFileInfo)}catch(e){return console.log(e),null}},testPlatformFeature:(r,t)=>{switch(t){case 1:return typeof BigInt64Array<"u";default:return console.warn("test for unknown feature: ".concat(t)),!1}},getDefaultDataProtocol(r){return 2},openFile:(r,t,e)=>{var n;try{rt._fileInfoCache.delete(t);let i=rt.getFileInfo(r,t);switch(i==null?void 0:i.dataProtocol){case 4:case 5:{if(e&1&&e&2)throw new Error("Opening file ".concat(i.fileName," failed: cannot open file with both read and write flags set"));if(e&32)throw new Error("Opening file ".concat(i.fileName," failed: appending to HTTP/S3 files is not supported"));if(e&2){let a=new XMLHttpRequest;if(i.dataProtocol==5?(a.open("HEAD",nr(i.s3Config,i.dataUrl),!1),rr(a,i.s3Config,i.dataUrl,"HEAD")):a.open("HEAD",i.dataUrl,!1),a.send(null),a.status!=200&&a.status!=404)throw new Error("Opening file ".concat(i.fileName," failed: Unexpected return status from server (").concat(a.status,")"));if(a.status==404&&!(e&8||e&16))throw new Error("Opening file ".concat(i.fileName," failed: Cannot write to non-existent file without FILE_FLAGS_FILE_CREATE or FILE_FLAGS_FILE_CREATE_NEW flag."));let c=r._malloc(1),f=new Uint8Array;r.HEAPU8.set(f,c);let p=r._malloc(2*8);return r.HEAPF64[(p>>3)+0]=1,r.HEAPF64[(p>>3)+1]=c,p}else if(e!=1)throw new Error("Opening file ".concat(i.fileName," failed: unsupported file flags: ").concat(e));let s=null,o=null;try{let a=new XMLHttpRequest;if(i.dataProtocol==5?(a.open("HEAD",nr(i.s3Config,i.dataUrl),!1),rr(a,i.s3Config,i.dataUrl,"HEAD")):a.open("HEAD",i.dataUrl,!1),a.setRequestHeader("Range","bytes=0-"),a.send(null),s=a.getResponseHeader("Content-Length"),s!==null&&a.status==206){let c=r._malloc(16);return r.HEAPF64[(c>>3)+0]=+s,r.HEAPF64[(c>>3)+1]=0,c}}catch(a){o=a,console.warn("HEAD request with range header failed: ".concat(a))}if(i.allowFullHttpReads){if(s!==null&&+s>1){let c=new XMLHttpRequest;i.dataProtocol==5?(c.open("GET",nr(i.s3Config,i.dataUrl),!1),rr(c,i.s3Config,i.dataUrl,"GET")):c.open("GET",i.dataUrl,!1),c.setRequestHeader("Range","bytes=0-0"),c.send(null);let f=c.getResponseHeader("Content-Length");if(c.status==206&&f!==null&&+f==1){let p=r._malloc(16);return r.HEAPF64[(p>>3)+0]=+s,r.HEAPF64[(p>>3)+1]=0,p}if(c.status==200&&f!==null&&+f==+s){console.warn("fall back to full HTTP read for: ".concat(i.dataUrl));let p=r._malloc(c.response.byteLength),y=new Uint8Array(c.response,0,c.response.byteLength);r.HEAPU8.set(y,p);let w=r._malloc(2*8);return r.HEAPF64[(w>>3)+0]=c.response.byteLength,r.HEAPF64[(w>>3)+1]=p,w}}console.warn("falling back to full HTTP read for: ".concat(i.dataUrl));let a=new XMLHttpRequest;if(i.dataProtocol==5?(a.open("GET",nr(i.s3Config,i.dataUrl),!1),rr(a,i.s3Config,i.dataUrl,"GET")):a.open("GET",i.dataUrl,!1),a.responseType="arraybuffer",a.send(null),a.status==200){let c=r._malloc(a.response.byteLength),f=new Uint8Array(a.response,0,a.response.byteLength);r.HEAPU8.set(f,c);let p=r._malloc(2*8);return r.HEAPF64[(p>>3)+0]=a.response.byteLength,r.HEAPF64[(p>>3)+1]=c,p}}if(o!=null)throw new Error("Reading file ".concat(i.fileName," failed with error: ").concat(o));return 0}case 2:{let s=(n=rt._files)==null?void 0:n.get(i.fileName);if(s){let c=r._malloc(16);return r.HEAPF64[(c>>3)+0]=s.size,r.HEAPF64[(c>>3)+1]=0,c}console.warn("Buffering missing file: ".concat(i.fileName));let o=r._malloc(2*8),a=r._malloc(1);return r.HEAPF64[(o>>3)+0]=1,r.HEAPF64[(o>>3)+1]=a,o}}}catch(i){console.error(i.toString()),Fe(r,i.toString())}return 0},glob:(r,t,e)=>{var n;try{let i=j(r,t,e);if(i.startsWith("http")||i.startsWith("s3://")){let s=new XMLHttpRequest;if(i.startsWith("s3://")){let o=rt.getGlobalFileInfo(r);s.open("HEAD",nr(o==null?void 0:o.s3Config,i),!1),rr(s,o==null?void 0:o.s3Config,i,"HEAD")}else s.open("HEAD",i,!1);if(s.send(null),s.status!=200&&s.status!==206){if(!((n=rt.getGlobalFileInfo(r))!=null&&n.allowFullHttpReads)){Fe(r,"HEAD request failed: ".concat(i,", with full http reads are disabled"));return}let o=new XMLHttpRequest;if(i.startsWith("s3://")){let c=rt.getGlobalFileInfo(r);o.open("GET",nr(c==null?void 0:c.s3Config,i),!1),rr(o,c==null?void 0:c.s3Config,i,"HEAD")}else o.open("GET",i,!1);if(o.setRequestHeader("Range","bytes=0-0"),o.send(null),o.status!=200&&o.status!==206){Fe(r,"HEAD and GET requests failed: ".concat(i));return}let a=o.getResponseHeader("Content-Length");a&&+a>1&&console.warn("Range request for ".concat(i," did not return a partial response: ").concat(o.status,' "').concat(o.statusText,'"'))}r.ccall("duckdb_web_fs_glob_add_path",null,["string"],[i])}}catch(i){return console.log(i),Fe(r,i.toString()),0}},checkFile:(r,t,e)=>{try{let n=j(r,t,e);if(n.startsWith("http")||n.startsWith("s3://")){let i=new XMLHttpRequest;if(n.startsWith("s3://")){let s=rt.getGlobalFileInfo(r);i.open("HEAD",nr(s==null?void 0:s.s3Config,n),!1),rr(i,s==null?void 0:s.s3Config,n,"HEAD")}else i.open("HEAD",n,!1);return i.send(null),i.status==206||i.status==200}}catch(n){return console.log(n),!1}return!1},syncFile:(r,t)=>{},closeFile:(r,t)=>{var n;let e=rt.getFileInfo(r,t);switch(rt._fileInfoCache.delete(t),e==null?void 0:e.dataProtocol){case 0:case 4:case 5:break;case 1:case 2:return;case 3:{let i=(n=rt._files)==null?void 0:n.get(e.fileName);if(!i)throw new Error("No OPFS access handle registered with name: ".concat(e.fileName));return i.flush()}}},truncateFile:(r,t,e)=>{var i;let n=rt.getFileInfo(r,t);switch(n==null?void 0:n.dataProtocol){case 4:Fe(r,"Cannot truncate a http file");return;case 5:Fe(r,"Cannot truncate an s3 file");return;case 0:case 1:case 2:Fe(r,"truncateFile not implemented");return;case 3:{let s=(i=rt._files)==null?void 0:i.get(n.fileName);if(!s)throw new Error("No OPFS access handle registered with name: ".concat(n.fileName));return s.truncate(e)}}return 0},readFile(r,t,e,n,i){var s,o;if(n==0)return 0;try{let a=rt.getFileInfo(r,t);switch(a==null?void 0:a.dataProtocol){case 4:case 5:{if(!a.dataUrl)throw new Error("Missing data URL for file ".concat(t));try{let c=new XMLHttpRequest;if(a.dataProtocol==5?(c.open("GET",nr(a==null?void 0:a.s3Config,a.dataUrl),!1),rr(c,a==null?void 0:a.s3Config,a.dataUrl,"GET")):c.open("GET",a.dataUrl,!1),c.responseType="arraybuffer",c.setRequestHeader("Range","bytes=".concat(i,"-").concat(i+n-1)),c.send(null),c.status==206||c.status==200&&n==c.response.byteLength&&i==0){let f=new Uint8Array(c.response,0,Math.min(c.response.byteLength,n));return r.HEAPU8.set(f,e),f.byteLength}else if(c.status==200){console.warn("Range request for ".concat(a.dataUrl," did not return a partial response: ").concat(c.status,' "').concat(c.statusText,'"'));let f=new Uint8Array(c.response,i,Math.min(c.response.byteLength-i,n));return r.HEAPU8.set(f,e),f.byteLength}else throw new Error("Range request for ".concat(a.dataUrl," did returned non-success status: ").concat(c.status,' "').concat(c.statusText,'"'))}catch(c){throw console.log(c),new Error("Range request for ".concat(a.dataUrl," failed with error: ").concat(c,'"'))}}case 2:{let c=(s=rt._files)==null?void 0:s.get(a.fileName);if(!c)throw new Error("No HTML5 file registered with name: ".concat(a.fileName));let f=c.slice(i,i+n),p=new Uint8Array(new FileReaderSync().readAsArrayBuffer(f));return r.HEAPU8.set(p,e),p.byteLength}case 3:{let c=(o=rt._files)==null?void 0:o.get(a.fileName);if(!c)throw new Error("No OPFS access handle registered with name: ".concat(a.fileName));let f=r.HEAPU8.subarray(e,e+n);return c.read(f,{at:i})}}return 0}catch(a){return console.log(a),Fe(r,a.toString()),0}},writeFile:(r,t,e,n,i)=>{var o;let s=rt.getFileInfo(r,t);switch(s==null?void 0:s.dataProtocol){case 4:return Fe(r,"Cannot write to HTTP file"),0;case 5:{let a=r.HEAPU8.subarray(e,e+n),c=new XMLHttpRequest;return c.open("PUT",nr(s==null?void 0:s.s3Config,s.dataUrl),!1),rr(c,s==null?void 0:s.s3Config,s.dataUrl,"PUT","",a),c.send(a),c.status!==200?(Fe(r,"Failed writing file: HTTP "+c.status),0):n}case 2:return Fe(r,"cannot write using the html5 file reader api"),0;case 3:{let a=(o=rt._files)==null?void 0:o.get(s.fileName);if(!a)throw new Error("No OPFS access handle registered with name: ".concat(s.fileName));let c=r.HEAPU8.subarray(e,e+n);return a.write(c,{at:i})}}return 0},getLastFileModificationTime:(r,t)=>{var n;let e=rt.getFileInfo(r,t);switch(e==null?void 0:e.dataProtocol){case 2:{if(!((n=rt._files)==null?void 0:n.get(e.fileName)))throw Error("No handle available for file: ".concat(e.fileName));return 0}case 4:case 5:return new Date().getTime()}return 0},checkDirectory:(r,t,e)=>{let n=j(r,t,e);return console.log("checkDirectory: ".concat(n)),!1},createDirectory:(r,t,e)=>{let n=j(r,t,e);console.log("createDirectory: ".concat(n))},removeDirectory:(r,t,e)=>{let n=j(r,t,e);console.log("removeDirectory: ".concat(n))},listDirectoryEntries:(r,t,e)=>{let n=j(r,t,e);return console.log("listDirectoryEntries: ".concat(n)),!1},moveFile:(r,t,e,n,i)=>{var c,f;let s=j(r,t,e),o=j(r,n,i),a=(c=rt._files)==null?void 0:c.get(s);a!==void 0&&(rt._files.delete(a),rt._files.set(o,a));for(let[p,y]of((f=rt._fileInfoCache)==null?void 0:f.entries())||[])if(y.dataUrl==s){rt._fileInfoCache.delete(p);break}return!0},removeFile:(r,t,e)=>{},callScalarUDF:(r,t,e,n,i,s,o)=>{Tu(rt,r,t,e,n,i,s,o)}};var tc=class extends Ro{postMessage(t,e){globalThis.postMessage(t,e)}async instantiate(t,e,n){return await new Vo(this,rt,t,e).instantiate(n)}};function Mu(){let r=new tc;globalThis.onmessage=async t=>{await r.onMessage(t.data)}}Mu();return dp(ry);})();
/*! Bundled license information:

js-sha256/src/sha256.js:
  (**
   * [js-sha256]{@link https://github.com/emn178/js-sha256}
   *
   * @version 0.9.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2014-2017
   * @license MIT
   *)
*/
//# sourceMappingURL=data:application/json;base64,
