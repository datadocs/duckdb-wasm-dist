"use strict";var duckdb=(()=>{var vp=Object.create;var gs=Object.defineProperty;var Sp=Object.getOwnPropertyDescriptor;var Ip=Object.getOwnPropertyNames;var Fp=Object.getPrototypeOf,Tp=Object.prototype.hasOwnProperty;var Ap=(r=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(r,{get:(t,e)=>(typeof require<"u"?require:t)[e]}):r)(function(r){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+r+'" is not supported')});var uc=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),Sn=(r,t)=>{for(var e in t)gs(r,e,{get:t[e],enumerable:!0})},dc=(r,t,e,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of Ip(t))!Tp.call(r,i)&&i!==e&&gs(r,i,{get:()=>t[i],enumerable:!(n=Sp(t,i))||n.enumerable});return r};var Sa=(r,t,e)=>(e=r!=null?vp(Fp(r)):{},dc(t||!r||!r.__esModule?gs(e,"default",{value:r,enumerable:!0}):e,r)),Ep=r=>dc(gs({},"__esModule",{value:!0}),r);var Rc=uc((Og,Ss)=>{var fc,hc,pc,_c,mc,yc,bc,gc,wc,ws,Ia,vc,Sc,Ic,Vn,Fc,Tc,Ac,Ec,xc,Dc,Bc,Oc,Mc,vs;(function(r){var t=typeof global=="object"?global:typeof self=="object"?self:typeof this=="object"?this:{};typeof define=="function"&&define.amd?define("tslib",["exports"],function(n){r(e(t,e(n)))}):typeof Ss=="object"&&typeof Ss.exports=="object"?r(e(t,e(Ss.exports))):r(e(t));function e(n,i){return n!==t&&(typeof Object.create=="function"?Object.defineProperty(n,"__esModule",{value:!0}):n.__esModule=!0),function(s,o){return n[s]=i?i(s,o):o}}})(function(r){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(n[s]=i[s])};fc=function(n,i){if(typeof i!="function"&&i!==null)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");t(n,i);function s(){this.constructor=n}n.prototype=i===null?Object.create(i):(s.prototype=i.prototype,new s)},hc=Object.assign||function(n){for(var i,s=1,o=arguments.length;s<o;s++){i=arguments[s];for(var a in i)Object.prototype.hasOwnProperty.call(i,a)&&(n[a]=i[a])}return n},pc=function(n,i){var s={};for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&i.indexOf(o)<0&&(s[o]=n[o]);if(n!=null&&typeof Object.getOwnPropertySymbols=="function")for(var a=0,o=Object.getOwnPropertySymbols(n);a<o.length;a++)i.indexOf(o[a])<0&&Object.prototype.propertyIsEnumerable.call(n,o[a])&&(s[o[a]]=n[o[a]]);return s},_c=function(n,i,s,o){var a=arguments.length,c=a<3?i:o===null?o=Object.getOwnPropertyDescriptor(i,s):o,f;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")c=Reflect.decorate(n,i,s,o);else for(var p=n.length-1;p>=0;p--)(f=n[p])&&(c=(a<3?f(c):a>3?f(i,s,c):f(i,s))||c);return a>3&&c&&Object.defineProperty(i,s,c),c},mc=function(n,i){return function(s,o){i(s,o,n)}},yc=function(n,i){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(n,i)},bc=function(n,i,s,o){function a(c){return c instanceof s?c:new s(function(f){f(c)})}return new(s||(s=Promise))(function(c,f){function p(S){try{w(o.next(S))}catch(it){f(it)}}function y(S){try{w(o.throw(S))}catch(it){f(it)}}function w(S){S.done?c(S.value):a(S.value).then(p,y)}w((o=o.apply(n,i||[])).next())})},gc=function(n,i){var s={label:0,sent:function(){if(c[0]&1)throw c[1];return c[1]},trys:[],ops:[]},o,a,c,f;return f={next:p(0),throw:p(1),return:p(2)},typeof Symbol=="function"&&(f[Symbol.iterator]=function(){return this}),f;function p(w){return function(S){return y([w,S])}}function y(w){if(o)throw new TypeError("Generator is already executing.");for(;s;)try{if(o=1,a&&(c=w[0]&2?a.return:w[0]?a.throw||((c=a.return)&&c.call(a),0):a.next)&&!(c=c.call(a,w[1])).done)return c;switch(a=0,c&&(w=[w[0]&2,c.value]),w[0]){case 0:case 1:c=w;break;case 4:return s.label++,{value:w[1],done:!1};case 5:s.label++,a=w[1],w=[0];continue;case 7:w=s.ops.pop(),s.trys.pop();continue;default:if(c=s.trys,!(c=c.length>0&&c[c.length-1])&&(w[0]===6||w[0]===2)){s=0;continue}if(w[0]===3&&(!c||w[1]>c[0]&&w[1]<c[3])){s.label=w[1];break}if(w[0]===6&&s.label<c[1]){s.label=c[1],c=w;break}if(c&&s.label<c[2]){s.label=c[2],s.ops.push(w);break}c[2]&&s.ops.pop(),s.trys.pop();continue}w=i.call(n,s)}catch(S){w=[6,S],a=0}finally{o=c=0}if(w[0]&5)throw w[1];return{value:w[0]?w[1]:void 0,done:!0}}},wc=function(n,i){for(var s in n)s!=="default"&&!Object.prototype.hasOwnProperty.call(i,s)&&vs(i,n,s)},vs=Object.create?function(n,i,s,o){o===void 0&&(o=s);var a=Object.getOwnPropertyDescriptor(i,s);(!a||("get"in a?!i.__esModule:a.writable||a.configurable))&&(a={enumerable:!0,get:function(){return i[s]}}),Object.defineProperty(n,o,a)}:function(n,i,s,o){o===void 0&&(o=s),n[o]=i[s]},ws=function(n){var i=typeof Symbol=="function"&&Symbol.iterator,s=i&&n[i],o=0;if(s)return s.call(n);if(n&&typeof n.length=="number")return{next:function(){return n&&o>=n.length&&(n=void 0),{value:n&&n[o++],done:!n}}};throw new TypeError(i?"Object is not iterable.":"Symbol.iterator is not defined.")},Ia=function(n,i){var s=typeof Symbol=="function"&&n[Symbol.iterator];if(!s)return n;var o=s.call(n),a,c=[],f;try{for(;(i===void 0||i-- >0)&&!(a=o.next()).done;)c.push(a.value)}catch(p){f={error:p}}finally{try{a&&!a.done&&(s=o.return)&&s.call(o)}finally{if(f)throw f.error}}return c},vc=function(){for(var n=[],i=0;i<arguments.length;i++)n=n.concat(Ia(arguments[i]));return n},Sc=function(){for(var n=0,i=0,s=arguments.length;i<s;i++)n+=arguments[i].length;for(var o=Array(n),a=0,i=0;i<s;i++)for(var c=arguments[i],f=0,p=c.length;f<p;f++,a++)o[a]=c[f];return o},Ic=function(n,i,s){if(s||arguments.length===2)for(var o=0,a=i.length,c;o<a;o++)(c||!(o in i))&&(c||(c=Array.prototype.slice.call(i,0,o)),c[o]=i[o]);return n.concat(c||Array.prototype.slice.call(i))},Vn=function(n){return this instanceof Vn?(this.v=n,this):new Vn(n)},Fc=function(n,i,s){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var o=s.apply(n,i||[]),a,c=[];return a={},f("next"),f("throw"),f("return"),a[Symbol.asyncIterator]=function(){return this},a;function f(et){o[et]&&(a[et]=function(yt){return new Promise(function(_t,ie){c.push([et,yt,_t,ie])>1||p(et,yt)})})}function p(et,yt){try{y(o[et](yt))}catch(_t){it(c[0][3],_t)}}function y(et){et.value instanceof Vn?Promise.resolve(et.value.v).then(w,S):it(c[0][2],et)}function w(et){p("next",et)}function S(et){p("throw",et)}function it(et,yt){et(yt),c.shift(),c.length&&p(c[0][0],c[0][1])}},Tc=function(n){var i,s;return i={},o("next"),o("throw",function(a){throw a}),o("return"),i[Symbol.iterator]=function(){return this},i;function o(a,c){i[a]=n[a]?function(f){return(s=!s)?{value:Vn(n[a](f)),done:a==="return"}:c?c(f):f}:c}},Ac=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i=n[Symbol.asyncIterator],s;return i?i.call(n):(n=typeof ws=="function"?ws(n):n[Symbol.iterator](),s={},o("next"),o("throw"),o("return"),s[Symbol.asyncIterator]=function(){return this},s);function o(c){s[c]=n[c]&&function(f){return new Promise(function(p,y){f=n[c](f),a(p,y,f.done,f.value)})}}function a(c,f,p,y){Promise.resolve(y).then(function(w){c({value:w,done:p})},f)}},Ec=function(n,i){return Object.defineProperty?Object.defineProperty(n,"raw",{value:i}):n.raw=i,n};var e=Object.create?function(n,i){Object.defineProperty(n,"default",{enumerable:!0,value:i})}:function(n,i){n.default=i};xc=function(n){if(n&&n.__esModule)return n;var i={};if(n!=null)for(var s in n)s!=="default"&&Object.prototype.hasOwnProperty.call(n,s)&&vs(i,n,s);return e(i,n),i},Dc=function(n){return n&&n.__esModule?n:{default:n}},Bc=function(n,i,s,o){if(s==="a"&&!o)throw new TypeError("Private accessor was defined without a getter");if(typeof i=="function"?n!==i||!o:!i.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return s==="m"?o:s==="a"?o.call(n):o?o.value:i.get(n)},Oc=function(n,i,s,o,a){if(o==="m")throw new TypeError("Private method is not writable");if(o==="a"&&!a)throw new TypeError("Private accessor was defined without a setter");if(typeof i=="function"?n!==i||!a:!i.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return o==="a"?a.call(n,s):a?a.value=s:i.set(n,s),s},Mc=function(n,i){if(i===null||typeof i!="object"&&typeof i!="function")throw new TypeError("Cannot use 'in' operator on non-object");return typeof n=="function"?i===n:n.has(i)},r("__extends",fc),r("__assign",hc),r("__rest",pc),r("__decorate",_c),r("__param",mc),r("__metadata",yc),r("__awaiter",bc),r("__generator",gc),r("__exportStar",wc),r("__createBinding",vs),r("__values",ws),r("__read",Ia),r("__spread",vc),r("__spreadArrays",Sc),r("__spreadArray",Ic),r("__await",Vn),r("__asyncGenerator",Fc),r("__asyncDelegator",Tc),r("__asyncValues",Ac),r("__makeTemplateObject",Ec),r("__importStar",xc),r("__importDefault",Dc),r("__classPrivateFieldGet",Bc),r("__classPrivateFieldSet",Oc),r("__classPrivateFieldIn",Mc)})});var Fd=uc((exports,module)=>{(function(){"use strict";var ERROR="input is invalid type",WINDOW=typeof window=="object",root=WINDOW?window:{};root.JS_SHA256_NO_WINDOW&&(WINDOW=!1);var WEB_WORKER=!WINDOW&&typeof self=="object",NODE_JS=!root.JS_SHA256_NO_NODE_JS&&typeof process=="object"&&process.versions&&process.versions.node;NODE_JS?root=global:WEB_WORKER&&(root=self);var COMMON_JS=!root.JS_SHA256_NO_COMMON_JS&&typeof module=="object"&&module.exports,AMD=typeof define=="function"&&define.amd,ARRAY_BUFFER=!root.JS_SHA256_NO_ARRAY_BUFFER&&typeof ArrayBuffer<"u",HEX_CHARS="0123456789abcdef".split(""),EXTRA=[-2147483648,8388608,32768,128],SHIFT=[24,16,8,0],K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],OUTPUT_TYPES=["hex","array","digest","arrayBuffer"],blocks=[];(root.JS_SHA256_NO_NODE_JS||!Array.isArray)&&(Array.isArray=function(r){return Object.prototype.toString.call(r)==="[object Array]"}),ARRAY_BUFFER&&(root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW||!ArrayBuffer.isView)&&(ArrayBuffer.isView=function(r){return typeof r=="object"&&r.buffer&&r.buffer.constructor===ArrayBuffer});var createOutputMethod=function(r,t){return function(e){return new Sha256(t,!0).update(e)[r]()}},createMethod=function(r){var t=createOutputMethod("hex",r);NODE_JS&&(t=nodeWrap(t,r)),t.create=function(){return new Sha256(r)},t.update=function(i){return t.create().update(i)};for(var e=0;e<OUTPUT_TYPES.length;++e){var n=OUTPUT_TYPES[e];t[n]=createOutputMethod(n,r)}return t},nodeWrap=function(method,is224){var crypto=eval("require('crypto')"),Buffer=eval("require('buffer').Buffer"),algorithm=is224?"sha224":"sha256",nodeMethod=function(r){if(typeof r=="string")return crypto.createHash(algorithm).update(r,"utf8").digest("hex");if(r==null)throw new Error(ERROR);return r.constructor===ArrayBuffer&&(r=new Uint8Array(r)),Array.isArray(r)||ArrayBuffer.isView(r)||r.constructor===Buffer?crypto.createHash(algorithm).update(new Buffer(r)).digest("hex"):method(r)};return nodeMethod},createHmacOutputMethod=function(r,t){return function(e,n){return new HmacSha256(e,t,!0).update(n)[r]()}},createHmacMethod=function(r){var t=createHmacOutputMethod("hex",r);t.create=function(i){return new HmacSha256(i,r)},t.update=function(i,s){return t.create(i).update(s)};for(var e=0;e<OUTPUT_TYPES.length;++e){var n=OUTPUT_TYPES[e];t[n]=createHmacOutputMethod(n,r)}return t};function Sha256(r,t){t?(blocks[0]=blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0,this.blocks=blocks):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],r?(this.h0=3238371032,this.h1=914150663,this.h2=812702999,this.h3=4144912697,this.h4=4290775857,this.h5=1750603025,this.h6=1694076839,this.h7=3204075428):(this.h0=1779033703,this.h1=3144134277,this.h2=1013904242,this.h3=2773480762,this.h4=1359893119,this.h5=2600822924,this.h6=528734635,this.h7=1541459225),this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0,this.is224=r}Sha256.prototype.update=function(r){if(!this.finalized){var t,e=typeof r;if(e!=="string"){if(e==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);t=!0}for(var n,i=0,s,o=r.length,a=this.blocks;i<o;){if(this.hashed&&(this.hashed=!1,a[0]=this.block,a[16]=a[1]=a[2]=a[3]=a[4]=a[5]=a[6]=a[7]=a[8]=a[9]=a[10]=a[11]=a[12]=a[13]=a[14]=a[15]=0),t)for(s=this.start;i<o&&s<64;++i)a[s>>2]|=r[i]<<SHIFT[s++&3];else for(s=this.start;i<o&&s<64;++i)n=r.charCodeAt(i),n<128?a[s>>2]|=n<<SHIFT[s++&3]:n<2048?(a[s>>2]|=(192|n>>6)<<SHIFT[s++&3],a[s>>2]|=(128|n&63)<<SHIFT[s++&3]):n<55296||n>=57344?(a[s>>2]|=(224|n>>12)<<SHIFT[s++&3],a[s>>2]|=(128|n>>6&63)<<SHIFT[s++&3],a[s>>2]|=(128|n&63)<<SHIFT[s++&3]):(n=65536+((n&1023)<<10|r.charCodeAt(++i)&1023),a[s>>2]|=(240|n>>18)<<SHIFT[s++&3],a[s>>2]|=(128|n>>12&63)<<SHIFT[s++&3],a[s>>2]|=(128|n>>6&63)<<SHIFT[s++&3],a[s>>2]|=(128|n&63)<<SHIFT[s++&3]);this.lastByteIndex=s,this.bytes+=s-this.start,s>=64?(this.block=a[16],this.start=s-64,this.hash(),this.hashed=!0):this.start=s}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},Sha256.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var r=this.blocks,t=this.lastByteIndex;r[16]=this.block,r[t>>2]|=EXTRA[t&3],this.block=r[16],t>=56&&(this.hashed||this.hash(),r[0]=this.block,r[16]=r[1]=r[2]=r[3]=r[4]=r[5]=r[6]=r[7]=r[8]=r[9]=r[10]=r[11]=r[12]=r[13]=r[14]=r[15]=0),r[14]=this.hBytes<<3|this.bytes>>>29,r[15]=this.bytes<<3,this.hash()}},Sha256.prototype.hash=function(){var r=this.h0,t=this.h1,e=this.h2,n=this.h3,i=this.h4,s=this.h5,o=this.h6,a=this.h7,c=this.blocks,f,p,y,w,S,it,et,yt,_t,ie,Ie;for(f=16;f<64;++f)S=c[f-15],p=(S>>>7|S<<25)^(S>>>18|S<<14)^S>>>3,S=c[f-2],y=(S>>>17|S<<15)^(S>>>19|S<<13)^S>>>10,c[f]=c[f-16]+p+c[f-7]+y<<0;for(Ie=t&e,f=0;f<64;f+=4)this.first?(this.is224?(yt=300032,S=c[0]-1413257819,a=S-150054599<<0,n=S+24177077<<0):(yt=704751109,S=c[0]-210244248,a=S-1521486534<<0,n=S+143694565<<0),this.first=!1):(p=(r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10),y=(i>>>6|i<<26)^(i>>>11|i<<21)^(i>>>25|i<<7),yt=r&t,w=yt^r&e^Ie,et=i&s^~i&o,S=a+y+et+K[f]+c[f],it=p+w,a=n+S<<0,n=S+it<<0),p=(n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10),y=(a>>>6|a<<26)^(a>>>11|a<<21)^(a>>>25|a<<7),_t=n&r,w=_t^n&t^yt,et=a&i^~a&s,S=o+y+et+K[f+1]+c[f+1],it=p+w,o=e+S<<0,e=S+it<<0,p=(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10),y=(o>>>6|o<<26)^(o>>>11|o<<21)^(o>>>25|o<<7),ie=e&n,w=ie^e&r^_t,et=o&a^~o&i,S=s+y+et+K[f+2]+c[f+2],it=p+w,s=t+S<<0,t=S+it<<0,p=(t>>>2|t<<30)^(t>>>13|t<<19)^(t>>>22|t<<10),y=(s>>>6|s<<26)^(s>>>11|s<<21)^(s>>>25|s<<7),Ie=t&e,w=Ie^t&n^ie,et=s&o^~s&a,S=i+y+et+K[f+3]+c[f+3],it=p+w,i=r+S<<0,r=S+it<<0;this.h0=this.h0+r<<0,this.h1=this.h1+t<<0,this.h2=this.h2+e<<0,this.h3=this.h3+n<<0,this.h4=this.h4+i<<0,this.h5=this.h5+s<<0,this.h6=this.h6+o<<0,this.h7=this.h7+a<<0},Sha256.prototype.hex=function(){this.finalize();var r=this.h0,t=this.h1,e=this.h2,n=this.h3,i=this.h4,s=this.h5,o=this.h6,a=this.h7,c=HEX_CHARS[r>>28&15]+HEX_CHARS[r>>24&15]+HEX_CHARS[r>>20&15]+HEX_CHARS[r>>16&15]+HEX_CHARS[r>>12&15]+HEX_CHARS[r>>8&15]+HEX_CHARS[r>>4&15]+HEX_CHARS[r&15]+HEX_CHARS[t>>28&15]+HEX_CHARS[t>>24&15]+HEX_CHARS[t>>20&15]+HEX_CHARS[t>>16&15]+HEX_CHARS[t>>12&15]+HEX_CHARS[t>>8&15]+HEX_CHARS[t>>4&15]+HEX_CHARS[t&15]+HEX_CHARS[e>>28&15]+HEX_CHARS[e>>24&15]+HEX_CHARS[e>>20&15]+HEX_CHARS[e>>16&15]+HEX_CHARS[e>>12&15]+HEX_CHARS[e>>8&15]+HEX_CHARS[e>>4&15]+HEX_CHARS[e&15]+HEX_CHARS[n>>28&15]+HEX_CHARS[n>>24&15]+HEX_CHARS[n>>20&15]+HEX_CHARS[n>>16&15]+HEX_CHARS[n>>12&15]+HEX_CHARS[n>>8&15]+HEX_CHARS[n>>4&15]+HEX_CHARS[n&15]+HEX_CHARS[i>>28&15]+HEX_CHARS[i>>24&15]+HEX_CHARS[i>>20&15]+HEX_CHARS[i>>16&15]+HEX_CHARS[i>>12&15]+HEX_CHARS[i>>8&15]+HEX_CHARS[i>>4&15]+HEX_CHARS[i&15]+HEX_CHARS[s>>28&15]+HEX_CHARS[s>>24&15]+HEX_CHARS[s>>20&15]+HEX_CHARS[s>>16&15]+HEX_CHARS[s>>12&15]+HEX_CHARS[s>>8&15]+HEX_CHARS[s>>4&15]+HEX_CHARS[s&15]+HEX_CHARS[o>>28&15]+HEX_CHARS[o>>24&15]+HEX_CHARS[o>>20&15]+HEX_CHARS[o>>16&15]+HEX_CHARS[o>>12&15]+HEX_CHARS[o>>8&15]+HEX_CHARS[o>>4&15]+HEX_CHARS[o&15];return this.is224||(c+=HEX_CHARS[a>>28&15]+HEX_CHARS[a>>24&15]+HEX_CHARS[a>>20&15]+HEX_CHARS[a>>16&15]+HEX_CHARS[a>>12&15]+HEX_CHARS[a>>8&15]+HEX_CHARS[a>>4&15]+HEX_CHARS[a&15]),c},Sha256.prototype.toString=Sha256.prototype.hex,Sha256.prototype.digest=function(){this.finalize();var r=this.h0,t=this.h1,e=this.h2,n=this.h3,i=this.h4,s=this.h5,o=this.h6,a=this.h7,c=[r>>24&255,r>>16&255,r>>8&255,r&255,t>>24&255,t>>16&255,t>>8&255,t&255,e>>24&255,e>>16&255,e>>8&255,e&255,n>>24&255,n>>16&255,n>>8&255,n&255,i>>24&255,i>>16&255,i>>8&255,i&255,s>>24&255,s>>16&255,s>>8&255,s&255,o>>24&255,o>>16&255,o>>8&255,o&255];return this.is224||c.push(a>>24&255,a>>16&255,a>>8&255,a&255),c},Sha256.prototype.array=Sha256.prototype.digest,Sha256.prototype.arrayBuffer=function(){this.finalize();var r=new ArrayBuffer(this.is224?28:32),t=new DataView(r);return t.setUint32(0,this.h0),t.setUint32(4,this.h1),t.setUint32(8,this.h2),t.setUint32(12,this.h3),t.setUint32(16,this.h4),t.setUint32(20,this.h5),t.setUint32(24,this.h6),this.is224||t.setUint32(28,this.h7),r};function HmacSha256(r,t,e){var n,i=typeof r;if(i==="string"){var s=[],o=r.length,a=0,c;for(n=0;n<o;++n)c=r.charCodeAt(n),c<128?s[a++]=c:c<2048?(s[a++]=192|c>>6,s[a++]=128|c&63):c<55296||c>=57344?(s[a++]=224|c>>12,s[a++]=128|c>>6&63,s[a++]=128|c&63):(c=65536+((c&1023)<<10|r.charCodeAt(++n)&1023),s[a++]=240|c>>18,s[a++]=128|c>>12&63,s[a++]=128|c>>6&63,s[a++]=128|c&63);r=s}else if(i==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);r.length>64&&(r=new Sha256(t,!0).update(r).array());var f=[],p=[];for(n=0;n<64;++n){var y=r[n]||0;f[n]=92^y,p[n]=54^y}Sha256.call(this,t,e),this.update(p),this.oKeyPad=f,this.inner=!0,this.sharedMemory=e}HmacSha256.prototype=new Sha256,HmacSha256.prototype.finalize=function(){if(Sha256.prototype.finalize.call(this),this.inner){this.inner=!1;var r=this.array();Sha256.call(this,this.is224,this.sharedMemory),this.update(this.oKeyPad),this.update(r),Sha256.prototype.finalize.call(this)}};var exports=createMethod();exports.sha256=exports,exports.sha224=createMethod(!0),exports.sha256.hmac=createHmacMethod(),exports.sha224.hmac=createHmacMethod(!0),COMMON_JS?module.exports=exports:(root.sha256=exports.sha256,root.sha224=exports.sha224,AMD&&define(function(){return exports}))})()});var gy={};Sn(gy,{registerWorker:()=>xd});var Cc=Sa(Rc(),1),{__extends:Mg,__assign:Rg,__rest:Lc,__decorate:Cg,__param:Lg,__metadata:Ug,__awaiter:x,__generator:kg,__exportStar:Ng,__createBinding:jg,__values:Pg,__read:Hg,__spread:Vg,__spreadArrays:zg,__spreadArray:Wg,__await:J,__asyncGenerator:ue,__asyncDelegator:zn,__asyncValues:Ue,__makeTemplateObject:Yg,__importStar:Gg,__importDefault:$g,__classPrivateFieldGet:Xg,__classPrivateFieldSet:Kg,__classPrivateFieldIn:Jg}=Cc.default;var Da={};Sn(Da,{compareArrayLike:()=>xa,joinUint8Arrays:()=>Ee,memcpy:()=>Wn,rebaseValueOffsets:()=>Ai,toArrayBufferView:()=>Q,toArrayBufferViewAsyncIterator:()=>$e,toArrayBufferViewIterator:()=>ur,toBigInt64Array:()=>Cp,toBigUint64Array:()=>kp,toFloat32Array:()=>Np,toFloat32ArrayAsyncIterator:()=>t_,toFloat32ArrayIterator:()=>Gp,toFloat64Array:()=>jp,toFloat64ArrayAsyncIterator:()=>e_,toFloat64ArrayIterator:()=>$p,toInt16Array:()=>Rp,toInt16ArrayAsyncIterator:()=>Jp,toInt16ArrayIterator:()=>Vp,toInt32Array:()=>In,toInt32ArrayAsyncIterator:()=>qp,toInt32ArrayIterator:()=>zp,toInt8Array:()=>Mp,toInt8ArrayAsyncIterator:()=>Kp,toInt8ArrayIterator:()=>Hp,toUint16Array:()=>Lp,toUint16ArrayAsyncIterator:()=>Qp,toUint16ArrayIterator:()=>Wp,toUint32Array:()=>Up,toUint32ArrayAsyncIterator:()=>Zp,toUint32ArrayIterator:()=>Yp,toUint8Array:()=>P,toUint8ArrayAsyncIterator:()=>Ea,toUint8ArrayIterator:()=>Aa,toUint8ClampedArray:()=>Pp,toUint8ClampedArrayAsyncIterator:()=>r_,toUint8ClampedArrayIterator:()=>Xp});var xp=new TextDecoder("utf-8"),Fi=r=>xp.decode(r),Dp=new TextEncoder,rn=r=>Dp.encode(r);var[Zg,Is]=(()=>{let r=()=>{throw new Error("BigInt is not available in this environment")};function t(){throw r()}return t.asIntN=()=>{throw r()},t.asUintN=()=>{throw r()},typeof BigInt<"u"?[BigInt,!0]:[t,!1]})(),[ke,t0]=(()=>{let r=()=>{throw new Error("BigInt64Array is not available in this environment")};class t{static get BYTES_PER_ELEMENT(){return 8}static of(){throw r()}static from(){throw r()}constructor(){throw r()}}return typeof BigInt64Array<"u"?[BigInt64Array,!0]:[t,!1]})(),[Ne,e0]=(()=>{let r=()=>{throw new Error("BigUint64Array is not available in this environment")};class t{static get BYTES_PER_ELEMENT(){return 8}static of(){throw r()}static from(){throw r()}constructor(){throw r()}}return typeof BigUint64Array<"u"?[BigUint64Array,!0]:[t,!1]})();var Bp=r=>typeof r=="number",Uc=r=>typeof r=="boolean",Pt=r=>typeof r=="function",oe=r=>r!=null&&Object(r)===r,Ye=r=>oe(r)&&Pt(r.then);var Ge=r=>oe(r)&&Pt(r[Symbol.iterator]),je=r=>oe(r)&&Pt(r[Symbol.asyncIterator]),Fs=r=>oe(r)&&oe(r.schema);var Ts=r=>oe(r)&&"done"in r&&"value"in r;var As=r=>oe(r)&&Pt(r.stat)&&Bp(r.fd);var Es=r=>oe(r)&&Ti(r.body),xs=r=>"_getDOMStream"in r&&"_getNodeStream"in r,kc=r=>oe(r)&&Pt(r.abort)&&Pt(r.getWriter)&&!xs(r),Ti=r=>oe(r)&&Pt(r.cancel)&&Pt(r.getReader)&&!xs(r),Nc=r=>oe(r)&&Pt(r.end)&&Pt(r.write)&&Uc(r.writable)&&!xs(r),Ds=r=>oe(r)&&Pt(r.read)&&Pt(r.pipe)&&Uc(r.readable)&&!xs(r),jc=r=>oe(r)&&Pt(r.clear)&&Pt(r.bytes)&&Pt(r.position)&&Pt(r.setPosition)&&Pt(r.capacity)&&Pt(r.getBufferIdentifier)&&Pt(r.createLong);var Ta=typeof SharedArrayBuffer<"u"?SharedArrayBuffer:ArrayBuffer;function Op(r){let t=r[0]?[r[0]]:[],e,n,i,s;for(let o,a,c=0,f=0,p=r.length;++c<p;){if(o=t[f],a=r[c],!o||!a||o.buffer!==a.buffer||a.byteOffset<o.byteOffset){a&&(t[++f]=a);continue}if({byteOffset:e,byteLength:i}=o,{byteOffset:n,byteLength:s}=a,e+i<n||n+s<e){a&&(t[++f]=a);continue}t[f]=new Uint8Array(o.buffer,e,n-e+s)}return t}function Wn(r,t,e=0,n=t.byteLength){let i=r.byteLength,s=new Uint8Array(r.buffer,r.byteOffset,i),o=new Uint8Array(t.buffer,t.byteOffset,Math.min(n,i));return s.set(o,e),r}function Ee(r,t){let e=Op(r),n=e.reduce((p,y)=>p+y.byteLength,0),i,s,o,a=0,c=-1,f=Math.min(t||Number.POSITIVE_INFINITY,n);for(let p=e.length;++c<p;){if(i=e[c],s=i.subarray(0,Math.min(i.length,f-a)),f<=a+s.length){s.length<i.length?e[c]=i.subarray(s.length):s.length===i.length&&c++,o?Wn(o,s,a):o=s;break}Wn(o||(o=new Uint8Array(f)),s,a),a+=s.length}return[o||new Uint8Array(0),e.slice(c),n-(o?o.byteLength:0)]}function Q(r,t){let e=Ts(t)?t.value:t;return e instanceof r?r===Uint8Array?new r(e.buffer,e.byteOffset,e.byteLength):e:e?(typeof e=="string"&&(e=rn(e)),e instanceof ArrayBuffer?new r(e):e instanceof Ta?new r(e):jc(e)?Q(r,e.bytes()):ArrayBuffer.isView(e)?e.byteLength<=0?new r(0):new r(e.buffer,e.byteOffset,e.byteLength/r.BYTES_PER_ELEMENT):r.from(e)):new r(0)}var Mp=r=>Q(Int8Array,r),Rp=r=>Q(Int16Array,r),In=r=>Q(Int32Array,r),Cp=r=>Q(ke,r),P=r=>Q(Uint8Array,r),Lp=r=>Q(Uint16Array,r),Up=r=>Q(Uint32Array,r),kp=r=>Q(Ne,r),Np=r=>Q(Float32Array,r),jp=r=>Q(Float64Array,r),Pp=r=>Q(Uint8ClampedArray,r),Fa=r=>(r.next(),r);function*ur(r,t){let e=function*(i){yield i},n=typeof t=="string"||ArrayBuffer.isView(t)||t instanceof ArrayBuffer||t instanceof Ta?e(t):Ge(t)?t:e(t);return yield*Fa(function*(i){let s=null;do s=i.next(yield Q(r,s));while(!s.done)}(n[Symbol.iterator]())),new r}var Hp=r=>ur(Int8Array,r),Vp=r=>ur(Int16Array,r),zp=r=>ur(Int32Array,r),Aa=r=>ur(Uint8Array,r),Wp=r=>ur(Uint16Array,r),Yp=r=>ur(Uint32Array,r),Gp=r=>ur(Float32Array,r),$p=r=>ur(Float64Array,r),Xp=r=>ur(Uint8ClampedArray,r);function $e(r,t){return ue(this,arguments,function*(){if(Ye(t))return yield J(yield J(yield*zn(Ue($e(r,yield J(t))))));let n=function(o){return ue(this,arguments,function*(){yield yield J(yield J(o))})},i=function(o){return ue(this,arguments,function*(){yield J(yield*zn(Ue(Fa(function*(a){let c=null;do c=a.next(yield c==null?void 0:c.value);while(!c.done)}(o[Symbol.iterator]())))))})},s=typeof t=="string"||ArrayBuffer.isView(t)||t instanceof ArrayBuffer||t instanceof Ta?n(t):Ge(t)?i(t):je(t)?t:n(t);return yield J(yield*zn(Ue(Fa(function(o){return ue(this,arguments,function*(){let a=null;do a=yield J(o.next(yield yield J(Q(r,a))));while(!a.done)})}(s[Symbol.asyncIterator]()))))),yield J(new r)})}var Kp=r=>$e(Int8Array,r),Jp=r=>$e(Int16Array,r),qp=r=>$e(Int32Array,r),Ea=r=>$e(Uint8Array,r),Qp=r=>$e(Uint16Array,r),Zp=r=>$e(Uint32Array,r),t_=r=>$e(Float32Array,r),e_=r=>$e(Float64Array,r),r_=r=>$e(Uint8ClampedArray,r);function Ai(r,t,e){if(r!==0){e=e.slice(0,t+1);for(let n=-1;++n<=t;)e[n]+=r}return e}function xa(r,t){let e=0,n=r.length;if(n!==t.length)return!1;if(n>0)do if(r[e]!==t[e])return!1;while(++e<n);return!0}var Xt={fromIterable(r){return Bs(n_(r))},fromAsyncIterable(r){return Bs(i_(r))},fromDOMStream(r){return Bs(s_(r))},fromNodeStream(r){return Bs(o_(r))},toDOMStream(r,t){throw new Error('"toDOMStream" not available in this environment')},toNodeStream(r,t){throw new Error('"toNodeStream" not available in this environment')}},Bs=r=>(r.next(),r);function*n_(r){let t,e=!1,n=[],i,s,o,a=0;function c(){return s==="peek"?Ee(n,o)[0]:([i,n,a]=Ee(n,o),i)}({cmd:s,size:o}=yield null);let f=Aa(r)[Symbol.iterator]();try{do if({done:t,value:i}=Number.isNaN(o-a)?f.next():f.next(o-a),!t&&i.byteLength>0&&(n.push(i),a+=i.byteLength),t||o<=a)do({cmd:s,size:o}=yield c());while(o<a);while(!t)}catch(p){(e=!0)&&typeof f.throw=="function"&&f.throw(p)}finally{e===!1&&typeof f.return=="function"&&f.return(null)}return null}function i_(r){return ue(this,arguments,function*(){let e,n=!1,i=[],s,o,a,c=0;function f(){return o==="peek"?Ee(i,a)[0]:([s,i,c]=Ee(i,a),s)}({cmd:o,size:a}=yield yield J(null));let p=Ea(r)[Symbol.asyncIterator]();try{do if({done:e,value:s}=Number.isNaN(a-c)?yield J(p.next()):yield J(p.next(a-c)),!e&&s.byteLength>0&&(i.push(s),c+=s.byteLength),e||a<=c)do({cmd:o,size:a}=yield yield J(f()));while(a<c);while(!e)}catch(y){(n=!0)&&typeof p.throw=="function"&&(yield J(p.throw(y)))}finally{n===!1&&typeof p.return=="function"&&(yield J(p.return(new Uint8Array(0))))}return yield J(null)})}function s_(r){return ue(this,arguments,function*(){let e=!1,n=!1,i=[],s,o,a,c=0;function f(){return o==="peek"?Ee(i,a)[0]:([s,i,c]=Ee(i,a),s)}({cmd:o,size:a}=yield yield J(null));let p=new Oa(r);try{do if({done:e,value:s}=Number.isNaN(a-c)?yield J(p.read()):yield J(p.read(a-c)),!e&&s.byteLength>0&&(i.push(P(s)),c+=s.byteLength),e||a<=c)do({cmd:o,size:a}=yield yield J(f()));while(a<c);while(!e)}catch(y){(n=!0)&&(yield J(p.cancel(y)))}finally{n===!1?yield J(p.cancel()):r.locked&&p.releaseLock()}return yield J(null)})}var Oa=class{constructor(t){this.source=t,this.reader=null,this.reader=this.source.getReader(),this.reader.closed.catch(()=>{})}get closed(){return this.reader?this.reader.closed.catch(()=>{}):Promise.resolve()}releaseLock(){this.reader&&this.reader.releaseLock(),this.reader=null}cancel(t){return x(this,void 0,void 0,function*(){let{reader:e,source:n}=this;e&&(yield e.cancel(t).catch(()=>{})),n&&n.locked&&this.releaseLock()})}read(t){return x(this,void 0,void 0,function*(){if(t===0)return{done:this.reader==null,value:new Uint8Array(0)};let e=yield this.reader.read();return!e.done&&(e.value=P(e)),e})}},Ba=(r,t)=>{let e=i=>n([t,i]),n;return[t,e,new Promise(i=>(n=i)&&r.once(t,e))]};function o_(r){return ue(this,arguments,function*(){let e=[],n="error",i=!1,s=null,o,a,c=0,f=[],p;function y(){return o==="peek"?Ee(f,a)[0]:([p,f,c]=Ee(f,a),p)}if({cmd:o,size:a}=yield yield J(null),r.isTTY)return yield yield J(new Uint8Array(0)),yield J(null);try{e[0]=Ba(r,"end"),e[1]=Ba(r,"error");do{if(e[2]=Ba(r,"readable"),[n,s]=yield J(Promise.race(e.map(S=>S[2]))),n==="error")break;if((i=n==="end")||(Number.isFinite(a-c)?(p=P(r.read(a-c)),p.byteLength<a-c&&(p=P(r.read()))):p=P(r.read()),p.byteLength>0&&(f.push(p),c+=p.byteLength)),i||a<=c)do({cmd:o,size:a}=yield yield J(y()));while(a<c)}while(!i)}finally{yield J(w(e,n==="error"?s:null))}return yield J(null);function w(S,it){return p=f=null,new Promise((et,yt)=>{for(let[_t,ie]of S)r.off(_t,ie);try{let _t=r.destroy;_t&&_t.call(r,it),it=void 0}catch(_t){it=_t||it}finally{it!=null?yt(it):et()}})}})}var Vt;(function(r){r[r.V1=0]="V1",r[r.V2=1]="V2",r[r.V3=2]="V3",r[r.V4=3]="V4",r[r.V5=4]="V5"})(Vt||(Vt={}));var Et;(function(r){r[r.Sparse=0]="Sparse",r[r.Dense=1]="Dense"})(Et||(Et={}));var It;(function(r){r[r.HALF=0]="HALF",r[r.SINGLE=1]="SINGLE",r[r.DOUBLE=2]="DOUBLE"})(It||(It={}));var Kt;(function(r){r[r.DAY=0]="DAY",r[r.MILLISECOND=1]="MILLISECOND"})(Kt||(Kt={}));var tt;(function(r){r[r.SECOND=0]="SECOND",r[r.MILLISECOND=1]="MILLISECOND",r[r.MICROSECOND=2]="MICROSECOND",r[r.NANOSECOND=3]="NANOSECOND"})(tt||(tt={}));var ae;(function(r){r[r.YEAR_MONTH=0]="YEAR_MONTH",r[r.DAY_TIME=1]="DAY_TIME",r[r.MONTH_DAY_NANO=2]="MONTH_DAY_NANO"})(ae||(ae={}));var st;(function(r){r[r.NONE=0]="NONE",r[r.Schema=1]="Schema",r[r.DictionaryBatch=2]="DictionaryBatch",r[r.RecordBatch=3]="RecordBatch",r[r.Tensor=4]="Tensor",r[r.SparseTensor=5]="SparseTensor"})(st||(st={}));var h;(function(r){r[r.NONE=0]="NONE",r[r.Null=1]="Null",r[r.Int=2]="Int",r[r.Float=3]="Float",r[r.Binary=4]="Binary",r[r.Utf8=5]="Utf8",r[r.Bool=6]="Bool",r[r.Decimal=7]="Decimal",r[r.Date=8]="Date",r[r.Time=9]="Time",r[r.Timestamp=10]="Timestamp",r[r.Interval=11]="Interval",r[r.List=12]="List",r[r.Struct=13]="Struct",r[r.Union=14]="Union",r[r.FixedSizeBinary=15]="FixedSizeBinary",r[r.FixedSizeList=16]="FixedSizeList",r[r.Map=17]="Map",r[r.Dictionary=-1]="Dictionary",r[r.Int8=-2]="Int8",r[r.Int16=-3]="Int16",r[r.Int32=-4]="Int32",r[r.Int64=-5]="Int64",r[r.Uint8=-6]="Uint8",r[r.Uint16=-7]="Uint16",r[r.Uint32=-8]="Uint32",r[r.Uint64=-9]="Uint64",r[r.Float16=-10]="Float16",r[r.Float32=-11]="Float32",r[r.Float64=-12]="Float64",r[r.DateDay=-13]="DateDay",r[r.DateMillisecond=-14]="DateMillisecond",r[r.TimestampSecond=-15]="TimestampSecond",r[r.TimestampMillisecond=-16]="TimestampMillisecond",r[r.TimestampMicrosecond=-17]="TimestampMicrosecond",r[r.TimestampNanosecond=-18]="TimestampNanosecond",r[r.TimeSecond=-19]="TimeSecond",r[r.TimeMillisecond=-20]="TimeMillisecond",r[r.TimeMicrosecond=-21]="TimeMicrosecond",r[r.TimeNanosecond=-22]="TimeNanosecond",r[r.DenseUnion=-23]="DenseUnion",r[r.SparseUnion=-24]="SparseUnion",r[r.IntervalDayTime=-25]="IntervalDayTime",r[r.IntervalYearMonth=-26]="IntervalYearMonth"})(h||(h={}));var Pe;(function(r){r[r.OFFSET=0]="OFFSET",r[r.DATA=1]="DATA",r[r.VALIDITY=2]="VALIDITY",r[r.TYPE=3]="TYPE"})(Pe||(Pe={}));var Xa={};Sn(Xa,{clampIndex:()=>q_,clampRange:()=>Di,createElementComparator:()=>an});var a_=void 0;function Xe(r){if(r===null)return"null";if(r===a_)return"undefined";switch(typeof r){case"number":return`${r}`;case"bigint":return`${r}`;case"string":return`"${r}"`}return typeof r[Symbol.toPrimitive]=="function"?r[Symbol.toPrimitive]("string"):ArrayBuffer.isView(r)?r instanceof ke||r instanceof Ne?`[${[...r].map(t=>Xe(t))}]`:`[${r}]`:ArrayBuffer.isView(r)?`[${r}]`:JSON.stringify(r,(t,e)=>typeof e=="bigint"?`${e}`:e)}var Ra={};Sn(Ra,{BN:()=>Fn,bignumToBigInt:()=>Os,bignumToString:()=>nn,isArrowBigNumSymbol:()=>Pc});var Pc=Symbol.for("isArrowBigNum");function Ke(r,...t){return t.length===0?Object.setPrototypeOf(Q(this.TypedArray,r),this.constructor.prototype):Object.setPrototypeOf(new this.TypedArray(r,...t),this.constructor.prototype)}Ke.prototype[Pc]=!0;Ke.prototype.toJSON=function(){return`"${nn(this)}"`};Ke.prototype.valueOf=function(){return Hc(this)};Ke.prototype.toString=function(){return nn(this)};Ke.prototype[Symbol.toPrimitive]=function(r="default"){switch(r){case"number":return Hc(this);case"string":return nn(this);case"default":return Os(this)}return nn(this)};function Yn(...r){return Ke.apply(this,r)}function Gn(...r){return Ke.apply(this,r)}function Ei(...r){return Ke.apply(this,r)}Object.setPrototypeOf(Yn.prototype,Object.create(Int32Array.prototype));Object.setPrototypeOf(Gn.prototype,Object.create(Uint32Array.prototype));Object.setPrototypeOf(Ei.prototype,Object.create(Uint32Array.prototype));Object.assign(Yn.prototype,Ke.prototype,{constructor:Yn,signed:!0,TypedArray:Int32Array,BigIntArray:ke});Object.assign(Gn.prototype,Ke.prototype,{constructor:Gn,signed:!1,TypedArray:Uint32Array,BigIntArray:Ne});Object.assign(Ei.prototype,Ke.prototype,{constructor:Ei,signed:!0,TypedArray:Uint32Array,BigIntArray:Ne});function Hc(r){let{buffer:t,byteOffset:e,length:n,signed:i}=r,s=new Ne(t,e,n),o=i&&s[s.length-1]&BigInt(1)<<BigInt(63),a=BigInt(o?1:0),c=BigInt(0);if(o){for(let f of s)a+=~f*(BigInt(1)<<BigInt(32)*c++);a*=BigInt(-1)}else for(let f of s)a+=f*(BigInt(1)<<BigInt(32)*c++);return a}var nn,Os;Is?(Os=r=>r.byteLength===8?new r.BigIntArray(r.buffer,r.byteOffset,1)[0]:Ma(r),nn=r=>r.byteLength===8?`${new r.BigIntArray(r.buffer,r.byteOffset,1)[0]}`:Ma(r)):(nn=Ma,Os=nn);function Ma(r){let t="",e=new Uint32Array(2),n=new Uint16Array(r.buffer,r.byteOffset,r.byteLength/2),i=new Uint32Array((n=new Uint16Array(n).reverse()).buffer),s=-1,o=n.length-1;do{for(e[0]=n[s=0];s<o;)n[s++]=e[1]=e[0]/10,e[0]=(e[0]-e[1]*10<<16)+n[s];n[s]=e[1]=e[0]/10,e[0]=e[0]-e[1]*10,t=`${e[0]}${t}`}while(i[0]||i[1]||i[2]||i[3]);return t!=null?t:"0"}var Fn=class{static new(t,e){switch(e){case!0:return new Yn(t);case!1:return new Gn(t)}switch(t.constructor){case Int8Array:case Int16Array:case Int32Array:case ke:return new Yn(t)}return t.byteLength===16?new Ei(t):new Gn(t)}static signed(t){return new Yn(t)}static unsigned(t){return new Gn(t)}static decimal(t){return new Ei(t)}constructor(t,e){return Fn.new(t,e)}};var Vc,zc,Wc,Yc,Gc,$c,Xc,Kc,Jc,qc,Qc,Zc,tu,eu,ru,nu,iu,su,ou,D=class{static isNull(t){return(t==null?void 0:t.typeId)===h.Null}static isInt(t){return(t==null?void 0:t.typeId)===h.Int}static isFloat(t){return(t==null?void 0:t.typeId)===h.Float}static isBinary(t){return(t==null?void 0:t.typeId)===h.Binary}static isUtf8(t){return(t==null?void 0:t.typeId)===h.Utf8}static isBool(t){return(t==null?void 0:t.typeId)===h.Bool}static isDecimal(t){return(t==null?void 0:t.typeId)===h.Decimal}static isDate(t){return(t==null?void 0:t.typeId)===h.Date}static isTime(t){return(t==null?void 0:t.typeId)===h.Time}static isTimestamp(t){return(t==null?void 0:t.typeId)===h.Timestamp}static isInterval(t){return(t==null?void 0:t.typeId)===h.Interval}static isList(t){return(t==null?void 0:t.typeId)===h.List}static isStruct(t){return(t==null?void 0:t.typeId)===h.Struct}static isUnion(t){return(t==null?void 0:t.typeId)===h.Union}static isFixedSizeBinary(t){return(t==null?void 0:t.typeId)===h.FixedSizeBinary}static isFixedSizeList(t){return(t==null?void 0:t.typeId)===h.FixedSizeList}static isMap(t){return(t==null?void 0:t.typeId)===h.Map}static isDictionary(t){return(t==null?void 0:t.typeId)===h.Dictionary}static isDenseUnion(t){return D.isUnion(t)&&t.mode===Et.Dense}static isSparseUnion(t){return D.isUnion(t)&&t.mode===Et.Sparse}get typeId(){return h.NONE}};Vc=Symbol.toStringTag;D[Vc]=(r=>(r.children=null,r.ArrayType=Array,r[Symbol.toStringTag]="DataType"))(D.prototype);var le=class extends D{toString(){return"Null"}get typeId(){return h.Null}};zc=Symbol.toStringTag;le[zc]=(r=>r[Symbol.toStringTag]="Null")(le.prototype);var Mt=class extends D{constructor(t,e){super(),this.isSigned=t,this.bitWidth=e}get typeId(){return h.Int}get ArrayType(){switch(this.bitWidth){case 8:return this.isSigned?Int8Array:Uint8Array;case 16:return this.isSigned?Int16Array:Uint16Array;case 32:return this.isSigned?Int32Array:Uint32Array;case 64:return this.isSigned?ke:Ne}throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`)}toString(){return`${this.isSigned?"I":"Ui"}nt${this.bitWidth}`}};Wc=Symbol.toStringTag;Mt[Wc]=(r=>(r.isSigned=null,r.bitWidth=null,r[Symbol.toStringTag]="Int"))(Mt.prototype);var Ms=class extends Mt{constructor(){super(!0,8)}get ArrayType(){return Int8Array}},Rs=class extends Mt{constructor(){super(!0,16)}get ArrayType(){return Int16Array}},dr=class extends Mt{constructor(){super(!0,32)}get ArrayType(){return Int32Array}},Cs=class extends Mt{constructor(){super(!0,64)}get ArrayType(){return ke}},Ls=class extends Mt{constructor(){super(!1,8)}get ArrayType(){return Uint8Array}},Us=class extends Mt{constructor(){super(!1,16)}get ArrayType(){return Uint16Array}},ks=class extends Mt{constructor(){super(!1,32)}get ArrayType(){return Uint32Array}},Ns=class extends Mt{constructor(){super(!1,64)}get ArrayType(){return Ne}};Object.defineProperty(Ms.prototype,"ArrayType",{value:Int8Array});Object.defineProperty(Rs.prototype,"ArrayType",{value:Int16Array});Object.defineProperty(dr.prototype,"ArrayType",{value:Int32Array});Object.defineProperty(Cs.prototype,"ArrayType",{value:ke});Object.defineProperty(Ls.prototype,"ArrayType",{value:Uint8Array});Object.defineProperty(Us.prototype,"ArrayType",{value:Uint16Array});Object.defineProperty(ks.prototype,"ArrayType",{value:Uint32Array});Object.defineProperty(Ns.prototype,"ArrayType",{value:Ne});var de=class extends D{constructor(t){super(),this.precision=t}get typeId(){return h.Float}get ArrayType(){switch(this.precision){case It.HALF:return Uint16Array;case It.SINGLE:return Float32Array;case It.DOUBLE:return Float64Array}throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`)}toString(){return`Float${this.precision<<5||16}`}};Yc=Symbol.toStringTag;de[Yc]=(r=>(r.precision=null,r[Symbol.toStringTag]="Float"))(de.prototype);var js=class extends de{constructor(){super(It.HALF)}},Ps=class extends de{constructor(){super(It.SINGLE)}},Hs=class extends de{constructor(){super(It.DOUBLE)}};Object.defineProperty(js.prototype,"ArrayType",{value:Uint16Array});Object.defineProperty(Ps.prototype,"ArrayType",{value:Float32Array});Object.defineProperty(Hs.prototype,"ArrayType",{value:Float64Array});var Rr=class extends D{constructor(){super()}get typeId(){return h.Binary}toString(){return"Binary"}};Gc=Symbol.toStringTag;Rr[Gc]=(r=>(r.ArrayType=Uint8Array,r[Symbol.toStringTag]="Binary"))(Rr.prototype);var Cr=class extends D{constructor(){super()}get typeId(){return h.Utf8}toString(){return"Utf8"}};$c=Symbol.toStringTag;Cr[$c]=(r=>(r.ArrayType=Uint8Array,r[Symbol.toStringTag]="Utf8"))(Cr.prototype);var Lr=class extends D{constructor(){super()}get typeId(){return h.Bool}toString(){return"Bool"}};Xc=Symbol.toStringTag;Lr[Xc]=(r=>(r.ArrayType=Uint8Array,r[Symbol.toStringTag]="Bool"))(Lr.prototype);var Ur=class extends D{constructor(t,e,n=128){super(),this.scale=t,this.precision=e,this.bitWidth=n}get typeId(){return h.Decimal}toString(){return`Decimal[${this.precision}e${this.scale>0?"+":""}${this.scale}]`}};Kc=Symbol.toStringTag;Ur[Kc]=(r=>(r.scale=null,r.precision=null,r.ArrayType=Uint32Array,r[Symbol.toStringTag]="Decimal"))(Ur.prototype);var kr=class extends D{constructor(t){super(),this.unit=t}get typeId(){return h.Date}toString(){return`Date${(this.unit+1)*32}<${Kt[this.unit]}>`}};Jc=Symbol.toStringTag;kr[Jc]=(r=>(r.unit=null,r.ArrayType=Int32Array,r[Symbol.toStringTag]="Date"))(kr.prototype);var Je=class extends D{constructor(t,e){super(),this.unit=t,this.bitWidth=e}get typeId(){return h.Time}toString(){return`Time${this.bitWidth}<${tt[this.unit]}>`}get ArrayType(){switch(this.bitWidth){case 32:return Int32Array;case 64:return ke}throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`)}};qc=Symbol.toStringTag;Je[qc]=(r=>(r.unit=null,r.bitWidth=null,r[Symbol.toStringTag]="Time"))(Je.prototype);var Nr=class extends D{constructor(t,e){super(),this.unit=t,this.timezone=e}get typeId(){return h.Timestamp}toString(){return`Timestamp<${tt[this.unit]}${this.timezone?`, ${this.timezone}`:""}>`}};Qc=Symbol.toStringTag;Nr[Qc]=(r=>(r.unit=null,r.timezone=null,r.ArrayType=Int32Array,r[Symbol.toStringTag]="Timestamp"))(Nr.prototype);var jr=class extends D{constructor(t){super(),this.unit=t}get typeId(){return h.Interval}toString(){return`Interval<${ae[this.unit]}>`}};Zc=Symbol.toStringTag;jr[Zc]=(r=>(r.unit=null,r.ArrayType=Int32Array,r[Symbol.toStringTag]="Interval"))(jr.prototype);var qe=class extends D{constructor(t){super(),this.children=[t]}get typeId(){return h.List}toString(){return`List<${this.valueType}>`}get valueType(){return this.children[0].type}get valueField(){return this.children[0]}get ArrayType(){return this.valueType.ArrayType}};tu=Symbol.toStringTag;qe[tu]=(r=>(r.children=null,r[Symbol.toStringTag]="List"))(qe.prototype);var gt=class extends D{constructor(t){super(),this.children=t}get typeId(){return h.Struct}toString(){return`Struct<{${this.children.map(t=>`${t.name}:${t.type}`).join(", ")}}>`}};eu=Symbol.toStringTag;gt[eu]=(r=>(r.children=null,r[Symbol.toStringTag]="Struct"))(gt.prototype);var Qe=class extends D{constructor(t,e,n){super(),this.mode=t,this.children=n,this.typeIds=e=Int32Array.from(e),this.typeIdToChildIndex=e.reduce((i,s,o)=>(i[s]=o)&&i||i,Object.create(null))}get typeId(){return h.Union}toString(){return`${this[Symbol.toStringTag]}<${this.children.map(t=>`${t.type}`).join(" | ")}>`}};ru=Symbol.toStringTag;Qe[ru]=(r=>(r.mode=null,r.typeIds=null,r.children=null,r.typeIdToChildIndex=null,r.ArrayType=Int8Array,r[Symbol.toStringTag]="Union"))(Qe.prototype);var Pr=class extends D{constructor(t){super(),this.byteWidth=t}get typeId(){return h.FixedSizeBinary}toString(){return`FixedSizeBinary[${this.byteWidth}]`}};nu=Symbol.toStringTag;Pr[nu]=(r=>(r.byteWidth=null,r.ArrayType=Uint8Array,r[Symbol.toStringTag]="FixedSizeBinary"))(Pr.prototype);var Ze=class extends D{constructor(t,e){super(),this.listSize=t,this.children=[e]}get typeId(){return h.FixedSizeList}get valueType(){return this.children[0].type}get valueField(){return this.children[0]}get ArrayType(){return this.valueType.ArrayType}toString(){return`FixedSizeList[${this.listSize}]<${this.valueType}>`}};iu=Symbol.toStringTag;Ze[iu]=(r=>(r.children=null,r.listSize=null,r[Symbol.toStringTag]="FixedSizeList"))(Ze.prototype);var tr=class extends D{constructor(t,e=!1){super(),this.children=[t],this.keysSorted=e}get typeId(){return h.Map}get keyType(){return this.children[0].type.children[0].type}get valueType(){return this.children[0].type.children[1].type}get childType(){return this.children[0].type}toString(){return`Map<{${this.children[0].type.children.map(t=>`${t.name}:${t.type}`).join(", ")}}>`}};su=Symbol.toStringTag;tr[su]=(r=>(r.children=null,r.keysSorted=null,r[Symbol.toStringTag]="Map_"))(tr.prototype);var l_=(r=>()=>++r)(-1),xe=class extends D{constructor(t,e,n,i){super(),this.indices=e,this.dictionary=t,this.isOrdered=i||!1,this.id=n==null?l_():typeof n=="number"?n:n.low}get typeId(){return h.Dictionary}get children(){return this.dictionary.children}get valueType(){return this.dictionary}get ArrayType(){return this.dictionary.ArrayType}toString(){return`Dictionary<${this.indices}, ${this.dictionary}>`}};ou=Symbol.toStringTag;xe[ou]=(r=>(r.id=null,r.indices=null,r.isOrdered=null,r.dictionary=null,r[Symbol.toStringTag]="Dictionary"))(xe.prototype);function De(r){let t=r;switch(r.typeId){case h.Decimal:return r.bitWidth/32;case h.Timestamp:return 2;case h.Date:return 1+t.unit;case h.Interval:return 1+t.unit;case h.FixedSizeList:return t.listSize;case h.FixedSizeBinary:return t.byteWidth;default:return 1}}var R=class{visitMany(t,...e){return t.map((n,i)=>this.visit(n,...e.map(s=>s[i])))}visit(...t){return this.getVisitFn(t[0],!1).apply(this,t)}getVisitFn(t,e=!0){return c_(this,t,e)}getVisitFnByTypeId(t,e=!0){return $n(this,t,e)}visitNull(t,...e){return null}visitBool(t,...e){return null}visitInt(t,...e){return null}visitFloat(t,...e){return null}visitUtf8(t,...e){return null}visitBinary(t,...e){return null}visitFixedSizeBinary(t,...e){return null}visitDate(t,...e){return null}visitTimestamp(t,...e){return null}visitTime(t,...e){return null}visitDecimal(t,...e){return null}visitList(t,...e){return null}visitStruct(t,...e){return null}visitUnion(t,...e){return null}visitDictionary(t,...e){return null}visitInterval(t,...e){return null}visitFixedSizeList(t,...e){return null}visitMap(t,...e){return null}};function c_(r,t,e=!0){return typeof t=="number"?$n(r,t,e):typeof t=="string"&&t in h?$n(r,h[t],e):t&&t instanceof D?$n(r,au(t),e):(t==null?void 0:t.type)&&t.type instanceof D?$n(r,au(t.type),e):$n(r,h.NONE,e)}function $n(r,t,e=!0){let n=null;switch(t){case h.Null:n=r.visitNull;break;case h.Bool:n=r.visitBool;break;case h.Int:n=r.visitInt;break;case h.Int8:n=r.visitInt8||r.visitInt;break;case h.Int16:n=r.visitInt16||r.visitInt;break;case h.Int32:n=r.visitInt32||r.visitInt;break;case h.Int64:n=r.visitInt64||r.visitInt;break;case h.Uint8:n=r.visitUint8||r.visitInt;break;case h.Uint16:n=r.visitUint16||r.visitInt;break;case h.Uint32:n=r.visitUint32||r.visitInt;break;case h.Uint64:n=r.visitUint64||r.visitInt;break;case h.Float:n=r.visitFloat;break;case h.Float16:n=r.visitFloat16||r.visitFloat;break;case h.Float32:n=r.visitFloat32||r.visitFloat;break;case h.Float64:n=r.visitFloat64||r.visitFloat;break;case h.Utf8:n=r.visitUtf8;break;case h.Binary:n=r.visitBinary;break;case h.FixedSizeBinary:n=r.visitFixedSizeBinary;break;case h.Date:n=r.visitDate;break;case h.DateDay:n=r.visitDateDay||r.visitDate;break;case h.DateMillisecond:n=r.visitDateMillisecond||r.visitDate;break;case h.Timestamp:n=r.visitTimestamp;break;case h.TimestampSecond:n=r.visitTimestampSecond||r.visitTimestamp;break;case h.TimestampMillisecond:n=r.visitTimestampMillisecond||r.visitTimestamp;break;case h.TimestampMicrosecond:n=r.visitTimestampMicrosecond||r.visitTimestamp;break;case h.TimestampNanosecond:n=r.visitTimestampNanosecond||r.visitTimestamp;break;case h.Time:n=r.visitTime;break;case h.TimeSecond:n=r.visitTimeSecond||r.visitTime;break;case h.TimeMillisecond:n=r.visitTimeMillisecond||r.visitTime;break;case h.TimeMicrosecond:n=r.visitTimeMicrosecond||r.visitTime;break;case h.TimeNanosecond:n=r.visitTimeNanosecond||r.visitTime;break;case h.Decimal:n=r.visitDecimal;break;case h.List:n=r.visitList;break;case h.Struct:n=r.visitStruct;break;case h.Union:n=r.visitUnion;break;case h.DenseUnion:n=r.visitDenseUnion||r.visitUnion;break;case h.SparseUnion:n=r.visitSparseUnion||r.visitUnion;break;case h.Dictionary:n=r.visitDictionary;break;case h.Interval:n=r.visitInterval;break;case h.IntervalDayTime:n=r.visitIntervalDayTime||r.visitInterval;break;case h.IntervalYearMonth:n=r.visitIntervalYearMonth||r.visitInterval;break;case h.FixedSizeList:n=r.visitFixedSizeList;break;case h.Map:n=r.visitMap;break}if(typeof n=="function")return n;if(!e)return()=>null;throw new Error(`Unrecognized type '${h[t]}'`)}function au(r){switch(r.typeId){case h.Null:return h.Null;case h.Int:{let{bitWidth:t,isSigned:e}=r;switch(t){case 8:return e?h.Int8:h.Uint8;case 16:return e?h.Int16:h.Uint16;case 32:return e?h.Int32:h.Uint32;case 64:return e?h.Int64:h.Uint64}return h.Int}case h.Float:switch(r.precision){case It.HALF:return h.Float16;case It.SINGLE:return h.Float32;case It.DOUBLE:return h.Float64}return h.Float;case h.Binary:return h.Binary;case h.Utf8:return h.Utf8;case h.Bool:return h.Bool;case h.Decimal:return h.Decimal;case h.Time:switch(r.unit){case tt.SECOND:return h.TimeSecond;case tt.MILLISECOND:return h.TimeMillisecond;case tt.MICROSECOND:return h.TimeMicrosecond;case tt.NANOSECOND:return h.TimeNanosecond}return h.Time;case h.Timestamp:switch(r.unit){case tt.SECOND:return h.TimestampSecond;case tt.MILLISECOND:return h.TimestampMillisecond;case tt.MICROSECOND:return h.TimestampMicrosecond;case tt.NANOSECOND:return h.TimestampNanosecond}return h.Timestamp;case h.Date:switch(r.unit){case Kt.DAY:return h.DateDay;case Kt.MILLISECOND:return h.DateMillisecond}return h.Date;case h.Interval:switch(r.unit){case ae.DAY_TIME:return h.IntervalDayTime;case ae.YEAR_MONTH:return h.IntervalYearMonth}return h.Interval;case h.Map:return h.Map;case h.List:return h.List;case h.Struct:return h.Struct;case h.Union:switch(r.mode){case Et.Dense:return h.DenseUnion;case Et.Sparse:return h.SparseUnion}return h.Union;case h.FixedSizeBinary:return h.FixedSizeBinary;case h.FixedSizeList:return h.FixedSizeList;case h.Dictionary:return h.Dictionary}throw new Error(`Unrecognized type '${h[r.typeId]}'`)}R.prototype.visitInt8=null;R.prototype.visitInt16=null;R.prototype.visitInt32=null;R.prototype.visitInt64=null;R.prototype.visitUint8=null;R.prototype.visitUint16=null;R.prototype.visitUint32=null;R.prototype.visitUint64=null;R.prototype.visitFloat16=null;R.prototype.visitFloat32=null;R.prototype.visitFloat64=null;R.prototype.visitDateDay=null;R.prototype.visitDateMillisecond=null;R.prototype.visitTimestampSecond=null;R.prototype.visitTimestampMillisecond=null;R.prototype.visitTimestampMicrosecond=null;R.prototype.visitTimestampNanosecond=null;R.prototype.visitTimeSecond=null;R.prototype.visitTimeMillisecond=null;R.prototype.visitTimeMicrosecond=null;R.prototype.visitTimeNanosecond=null;R.prototype.visitDenseUnion=null;R.prototype.visitSparseUnion=null;R.prototype.visitIntervalDayTime=null;R.prototype.visitIntervalYearMonth=null;var Ca={};Sn(Ca,{float64ToUint16:()=>xi,uint16ToFloat64:()=>Vs});var lu=new Float64Array(1),Xn=new Uint32Array(lu.buffer);function Vs(r){let t=(r&31744)>>10,e=(r&1023)/1024,n=Math.pow(-1,(r&32768)>>15);switch(t){case 31:return n*(e?Number.NaN:1/0);case 0:return n*(e?6103515625e-14*e:0)}return n*Math.pow(2,t-15)*(1+e)}function xi(r){if(r!==r)return 32256;lu[0]=r;let t=(Xn[1]&2147483648)>>16&65535,e=Xn[1]&2146435072,n=0;return e>=1089470464?Xn[0]>0?e=31744:(e=(e&2080374784)>>16,n=(Xn[1]&1048575)>>10):e<=1056964608?(n=1048576+(Xn[1]&1048575),n=1048576+(n<<(e>>20)-998)>>21,e=0):(e=e-1056964608>>10,n=(Xn[1]&1048575)+512>>10),t|e|n&65535}var H=class extends R{};function X(r){return(t,e,n)=>{if(t.setValid(e,n!=null))return r(t,e,n)}}var u_=(r,t,e)=>{r[t]=Math.trunc(e/864e5)},La=(r,t,e)=>{r[t]=Math.trunc(e%4294967296),r[t+1]=Math.trunc(e/4294967296)},d_=(r,t,e)=>{r[t]=Math.trunc(e*1e3%4294967296),r[t+1]=Math.trunc(e*1e3/4294967296)},f_=(r,t,e)=>{r[t]=Math.trunc(e*1e6%4294967296),r[t+1]=Math.trunc(e*1e6/4294967296)},cu=(r,t,e,n)=>{if(e+1<t.length){let{[e]:i,[e+1]:s}=t;r.set(n.subarray(0,s-i),i)}},h_=({offset:r,values:t},e,n)=>{let i=r+e;n?t[i>>3]|=1<<i%8:t[i>>3]&=~(1<<i%8)},Hr=({values:r},t,e)=>{r[t]=e},Ua=({values:r},t,e)=>{r[t]=e},uu=({values:r},t,e)=>{r[t]=xi(e)},p_=(r,t,e)=>{switch(r.type.precision){case It.HALF:return uu(r,t,e);case It.SINGLE:case It.DOUBLE:return Ua(r,t,e)}},zs=({values:r},t,e)=>{u_(r,t,e.valueOf())},Ws=({values:r},t,e)=>{La(r,t*2,e.valueOf())},ka=({stride:r,values:t},e,n)=>{t.set(n.subarray(0,r),r*e)},__=({values:r,valueOffsets:t},e,n)=>cu(r,t,e,n),m_=({values:r,valueOffsets:t},e,n)=>{cu(r,t,e,rn(n))},Na=(r,t,e)=>{r.type.unit===Kt.DAY?zs(r,t,e):Ws(r,t,e)},Ys=({values:r},t,e)=>La(r,t*2,e/1e3),Gs=({values:r},t,e)=>La(r,t*2,e),$s=({values:r},t,e)=>d_(r,t*2,e),Xs=({values:r},t,e)=>f_(r,t*2,e),ja=(r,t,e)=>{switch(r.type.unit){case tt.SECOND:return Ys(r,t,e);case tt.MILLISECOND:return Gs(r,t,e);case tt.MICROSECOND:return $s(r,t,e);case tt.NANOSECOND:return Xs(r,t,e)}},Ks=({values:r},t,e)=>{r[t]=e},Js=({values:r},t,e)=>{r[t]=e},qs=({values:r},t,e)=>{r[t]=e},Qs=({values:r},t,e)=>{r[t]=e},Pa=(r,t,e)=>{switch(r.type.unit){case tt.SECOND:return Ks(r,t,e);case tt.MILLISECOND:return Js(r,t,e);case tt.MICROSECOND:return qs(r,t,e);case tt.NANOSECOND:return Qs(r,t,e)}},Ha=({values:r,stride:t},e,n)=>{r.set(n.subarray(0,t),t*e)},y_=(r,t,e)=>{let n=r.children[0],i=r.valueOffsets,s=Jt.getVisitFn(n);if(Array.isArray(e))for(let o=-1,a=i[t],c=i[t+1];a<c;)s(n,a++,e[++o]);else for(let o=-1,a=i[t],c=i[t+1];a<c;)s(n,a++,e.get(++o))},b_=(r,t,e)=>{let n=r.children[0],{valueOffsets:i}=r,s=Jt.getVisitFn(n),{[t]:o,[t+1]:a}=i,c=e instanceof Map?e.entries():Object.entries(e);for(let f of c)if(s(n,o,f),++o>=a)break},g_=(r,t)=>(e,n,i,s)=>n&&e(n,r,t[s]),w_=(r,t)=>(e,n,i,s)=>n&&e(n,r,t.get(s)),v_=(r,t)=>(e,n,i,s)=>n&&e(n,r,t.get(i.name)),S_=(r,t)=>(e,n,i,s)=>n&&e(n,r,t[i.name]),I_=(r,t,e)=>{let n=r.type.children.map(s=>Jt.getVisitFn(s.type)),i=e instanceof Map?v_(t,e):e instanceof V?w_(t,e):Array.isArray(e)?g_(t,e):S_(t,e);r.type.children.forEach((s,o)=>i(n[o],r.children[o],s,o))},F_=(r,t,e)=>{r.type.mode===Et.Dense?du(r,t,e):fu(r,t,e)},du=(r,t,e)=>{let n=r.type.typeIdToChildIndex[r.typeIds[t]],i=r.children[n];Jt.visit(i,r.valueOffsets[t],e)},fu=(r,t,e)=>{let n=r.type.typeIdToChildIndex[r.typeIds[t]],i=r.children[n];Jt.visit(i,t,e)},T_=(r,t,e)=>{var n;(n=r.dictionary)===null||n===void 0||n.set(r.values[t],e)},Va=(r,t,e)=>{r.type.unit===ae.DAY_TIME?Zs(r,t,e):to(r,t,e)},Zs=({values:r},t,e)=>{r.set(e.subarray(0,2),2*t)},to=({values:r},t,e)=>{r[t]=e[0]*12+e[1]%12},A_=(r,t,e)=>{let{stride:n}=r,i=r.children[0],s=Jt.getVisitFn(i);if(Array.isArray(e))for(let o=-1,a=t*n;++o<n;)s(i,a+o,e[o]);else for(let o=-1,a=t*n;++o<n;)s(i,a+o,e.get(o))};H.prototype.visitBool=X(h_);H.prototype.visitInt=X(Hr);H.prototype.visitInt8=X(Hr);H.prototype.visitInt16=X(Hr);H.prototype.visitInt32=X(Hr);H.prototype.visitInt64=X(Hr);H.prototype.visitUint8=X(Hr);H.prototype.visitUint16=X(Hr);H.prototype.visitUint32=X(Hr);H.prototype.visitUint64=X(Hr);H.prototype.visitFloat=X(p_);H.prototype.visitFloat16=X(uu);H.prototype.visitFloat32=X(Ua);H.prototype.visitFloat64=X(Ua);H.prototype.visitUtf8=X(m_);H.prototype.visitBinary=X(__);H.prototype.visitFixedSizeBinary=X(ka);H.prototype.visitDate=X(Na);H.prototype.visitDateDay=X(zs);H.prototype.visitDateMillisecond=X(Ws);H.prototype.visitTimestamp=X(ja);H.prototype.visitTimestampSecond=X(Ys);H.prototype.visitTimestampMillisecond=X(Gs);H.prototype.visitTimestampMicrosecond=X($s);H.prototype.visitTimestampNanosecond=X(Xs);H.prototype.visitTime=X(Pa);H.prototype.visitTimeSecond=X(Ks);H.prototype.visitTimeMillisecond=X(Js);H.prototype.visitTimeMicrosecond=X(qs);H.prototype.visitTimeNanosecond=X(Qs);H.prototype.visitDecimal=X(Ha);H.prototype.visitList=X(y_);H.prototype.visitStruct=X(I_);H.prototype.visitUnion=X(F_);H.prototype.visitDenseUnion=X(du);H.prototype.visitSparseUnion=X(fu);H.prototype.visitDictionary=X(T_);H.prototype.visitInterval=X(Va);H.prototype.visitIntervalDayTime=X(Zs);H.prototype.visitIntervalYearMonth=X(to);H.prototype.visitFixedSizeList=X(A_);H.prototype.visitMap=X(b_);var Jt=new H;var er=Symbol.for("parent"),Kn=Symbol.for("rowIndex"),sn=class{constructor(t,e){return this[er]=t,this[Kn]=e,new Proxy(this,new Wa)}toArray(){return Object.values(this.toJSON())}toJSON(){let t=this[Kn],e=this[er],n=e.type.children,i={};for(let s=-1,o=n.length;++s<o;)i[n[s].name]=Lt.visit(e.children[s],t);return i}toString(){return`{${[...this].map(([t,e])=>`${Xe(t)}: ${Xe(e)}`).join(", ")}}`}[Symbol.for("nodejs.util.inspect.custom")](){return this.toString()}[Symbol.iterator](){return new za(this[er],this[Kn])}},za=class{constructor(t,e){this.childIndex=0,this.children=t.children,this.rowIndex=e,this.childFields=t.type.children,this.numChildren=this.childFields.length}[Symbol.iterator](){return this}next(){let t=this.childIndex;return t<this.numChildren?(this.childIndex=t+1,{done:!1,value:[this.childFields[t].name,Lt.visit(this.children[t],this.rowIndex)]}):{done:!0,value:null}}};Object.defineProperties(sn.prototype,{[Symbol.toStringTag]:{enumerable:!1,configurable:!1,value:"Row"},[er]:{writable:!0,enumerable:!1,configurable:!1,value:null},[Kn]:{writable:!0,enumerable:!1,configurable:!1,value:-1}});var Wa=class{isExtensible(){return!1}deleteProperty(){return!1}preventExtensions(){return!0}ownKeys(t){return t[er].type.children.map(e=>e.name)}has(t,e){return t[er].type.children.findIndex(n=>n.name===e)!==-1}getOwnPropertyDescriptor(t,e){if(t[er].type.children.findIndex(n=>n.name===e)!==-1)return{writable:!0,enumerable:!0,configurable:!0}}get(t,e){if(Reflect.has(t,e))return t[e];let n=t[er].type.children.findIndex(i=>i.name===e);if(n!==-1){let i=Lt.visit(t[er].children[n],t[Kn]);return Reflect.set(t,e,i),i}}set(t,e,n){let i=t[er].type.children.findIndex(s=>s.name===e);return i!==-1?(Jt.visit(t[er].children[i],t[Kn],n),Reflect.set(t,e,n)):Reflect.has(t,e)||typeof e=="symbol"?Reflect.set(t,e,n):!1}};var U=class extends R{};function W(r){return(t,e)=>t.getValid(e)?r(t,e):null}var E_=(r,t)=>864e5*r[t],Ya=(r,t)=>4294967296*r[t+1]+(r[t]>>>0),x_=(r,t)=>4294967296*(r[t+1]/1e3)+(r[t]>>>0)/1e3,D_=(r,t)=>4294967296*(r[t+1]/1e6)+(r[t]>>>0)/1e6,hu=r=>new Date(r),B_=(r,t)=>hu(E_(r,t)),O_=(r,t)=>hu(Ya(r,t)),M_=(r,t)=>null,pu=(r,t,e)=>{if(e+1>=t.length)return null;let n=t[e],i=t[e+1];return r.subarray(n,i)},R_=({offset:r,values:t},e)=>{let n=r+e;return(t[n>>3]&1<<n%8)!==0},_u=({values:r},t)=>B_(r,t),mu=({values:r},t)=>O_(r,t*2),on=({stride:r,values:t},e)=>t[r*e],C_=({stride:r,values:t},e)=>Vs(t[r*e]),yu=({values:r},t)=>r[t],L_=({stride:r,values:t},e)=>t.subarray(r*e,r*(e+1)),U_=({values:r,valueOffsets:t},e)=>pu(r,t,e),k_=({values:r,valueOffsets:t},e)=>{let n=pu(r,t,e);return n!==null?Fi(n):null},N_=({values:r},t)=>r[t],j_=({type:r,values:t},e)=>r.precision!==It.HALF?t[e]:Vs(t[e]),P_=(r,t)=>r.type.unit===Kt.DAY?_u(r,t):mu(r,t),bu=({values:r},t)=>1e3*Ya(r,t*2),gu=({values:r},t)=>Ya(r,t*2),wu=({values:r},t)=>x_(r,t*2),vu=({values:r},t)=>D_(r,t*2),H_=(r,t)=>{switch(r.type.unit){case tt.SECOND:return bu(r,t);case tt.MILLISECOND:return gu(r,t);case tt.MICROSECOND:return wu(r,t);case tt.NANOSECOND:return vu(r,t)}},Su=({values:r},t)=>r[t],Iu=({values:r},t)=>r[t],Fu=({values:r},t)=>r[t],Tu=({values:r},t)=>r[t],V_=(r,t)=>{switch(r.type.unit){case tt.SECOND:return Su(r,t);case tt.MILLISECOND:return Iu(r,t);case tt.MICROSECOND:return Fu(r,t);case tt.NANOSECOND:return Tu(r,t)}},z_=({values:r,stride:t},e)=>Fn.decimal(r.subarray(t*e,t*(e+1))),W_=(r,t)=>{let{valueOffsets:e,stride:n,children:i}=r,{[t*n]:s,[t*n+1]:o}=e,c=i[0].slice(s,o-s);return new V([c])},Y_=(r,t)=>{let{valueOffsets:e,children:n}=r,{[t]:i,[t+1]:s}=e,o=n[0];return new fr(o.slice(i,s-i))},G_=(r,t)=>new sn(r,t),$_=(r,t)=>r.type.mode===Et.Dense?Au(r,t):Eu(r,t),Au=(r,t)=>{let e=r.type.typeIdToChildIndex[r.typeIds[t]],n=r.children[e];return Lt.visit(n,r.valueOffsets[t])},Eu=(r,t)=>{let e=r.type.typeIdToChildIndex[r.typeIds[t]],n=r.children[e];return Lt.visit(n,t)},X_=(r,t)=>{var e;return(e=r.dictionary)===null||e===void 0?void 0:e.get(r.values[t])},K_=(r,t)=>r.type.unit===ae.DAY_TIME?xu(r,t):Du(r,t),xu=({values:r},t)=>r.subarray(2*t,2*(t+1)),Du=({values:r},t)=>{let e=r[t],n=new Int32Array(2);return n[0]=Math.trunc(e/12),n[1]=Math.trunc(e%12),n},J_=(r,t)=>{let{stride:e,children:n}=r,s=n[0].slice(t*e,e);return new V([s])};U.prototype.visitNull=W(M_);U.prototype.visitBool=W(R_);U.prototype.visitInt=W(N_);U.prototype.visitInt8=W(on);U.prototype.visitInt16=W(on);U.prototype.visitInt32=W(on);U.prototype.visitInt64=W(yu);U.prototype.visitUint8=W(on);U.prototype.visitUint16=W(on);U.prototype.visitUint32=W(on);U.prototype.visitUint64=W(yu);U.prototype.visitFloat=W(j_);U.prototype.visitFloat16=W(C_);U.prototype.visitFloat32=W(on);U.prototype.visitFloat64=W(on);U.prototype.visitUtf8=W(k_);U.prototype.visitBinary=W(U_);U.prototype.visitFixedSizeBinary=W(L_);U.prototype.visitDate=W(P_);U.prototype.visitDateDay=W(_u);U.prototype.visitDateMillisecond=W(mu);U.prototype.visitTimestamp=W(H_);U.prototype.visitTimestampSecond=W(bu);U.prototype.visitTimestampMillisecond=W(gu);U.prototype.visitTimestampMicrosecond=W(wu);U.prototype.visitTimestampNanosecond=W(vu);U.prototype.visitTime=W(V_);U.prototype.visitTimeSecond=W(Su);U.prototype.visitTimeMillisecond=W(Iu);U.prototype.visitTimeMicrosecond=W(Fu);U.prototype.visitTimeNanosecond=W(Tu);U.prototype.visitDecimal=W(z_);U.prototype.visitList=W(W_);U.prototype.visitStruct=W(G_);U.prototype.visitUnion=W($_);U.prototype.visitDenseUnion=W(Au);U.prototype.visitSparseUnion=W(Eu);U.prototype.visitDictionary=W(X_);U.prototype.visitInterval=W(K_);U.prototype.visitIntervalDayTime=W(xu);U.prototype.visitIntervalYearMonth=W(Du);U.prototype.visitFixedSizeList=W(J_);U.prototype.visitMap=W(Y_);var Lt=new U;var He=Symbol.for("keys"),Jn=Symbol.for("vals"),fr=class{constructor(t){return this[He]=new V([t.children[0]]).memoize(),this[Jn]=t.children[1],new Proxy(this,new $a)}[Symbol.iterator](){return new Ga(this[He],this[Jn])}get size(){return this[He].length}toArray(){return Object.values(this.toJSON())}toJSON(){let t=this[He],e=this[Jn],n={};for(let i=-1,s=t.length;++i<s;)n[t.get(i)]=Lt.visit(e,i);return n}toString(){return`{${[...this].map(([t,e])=>`${Xe(t)}: ${Xe(e)}`).join(", ")}}`}[Symbol.for("nodejs.util.inspect.custom")](){return this.toString()}},Ga=class{constructor(t,e){this.keys=t,this.vals=e,this.keyIndex=0,this.numKeys=t.length}[Symbol.iterator](){return this}next(){let t=this.keyIndex;return t===this.numKeys?{done:!0,value:null}:(this.keyIndex++,{done:!1,value:[this.keys.get(t),Lt.visit(this.vals,t)]})}},$a=class{isExtensible(){return!1}deleteProperty(){return!1}preventExtensions(){return!0}ownKeys(t){return t[He].toArray().map(String)}has(t,e){return t[He].includes(e)}getOwnPropertyDescriptor(t,e){if(t[He].indexOf(e)!==-1)return{writable:!0,enumerable:!0,configurable:!0}}get(t,e){if(Reflect.has(t,e))return t[e];let n=t[He].indexOf(e);if(n!==-1){let i=Lt.visit(Reflect.get(t,Jn),n);return Reflect.set(t,e,i),i}}set(t,e,n){let i=t[He].indexOf(e);return i!==-1?(Jt.visit(Reflect.get(t,Jn),i,n),Reflect.set(t,e,n)):Reflect.has(t,e)?Reflect.set(t,e,n):!1}};Object.defineProperties(fr.prototype,{[Symbol.toStringTag]:{enumerable:!1,configurable:!1,value:"Row"},[He]:{writable:!0,enumerable:!1,configurable:!1,value:null},[Jn]:{writable:!0,enumerable:!1,configurable:!1,value:null}});function q_(r,t,e){let n=r.length,i=t>-1?t:n+t%n;return e?e(r,i):i}var Bu;function Di(r,t,e,n){let{length:i=0}=r,s=typeof t!="number"?0:t,o=typeof e!="number"?i:e;return s<0&&(s=(s%i+i)%i),o<0&&(o=(o%i+i)%i),o<s&&(Bu=s,s=o,o=Bu),o>i&&(o=i),n?n(r,s,o):[s,o]}var Ou=r=>r!==r;function an(r){if(typeof r!=="object"||r===null)return Ou(r)?Ou:e=>e===r;if(r instanceof Date){let e=r.valueOf();return n=>n instanceof Date?n.valueOf()===e:!1}return ArrayBuffer.isView(r)?e=>e?xa(r,e):!1:r instanceof Map?Z_(r):Array.isArray(r)?Q_(r):r instanceof V?tm(r):em(r,!0)}function Q_(r){let t=[];for(let e=-1,n=r.length;++e<n;)t[e]=an(r[e]);return eo(t)}function Z_(r){let t=-1,e=[];for(let n of r.values())e[++t]=an(n);return eo(e)}function tm(r){let t=[];for(let e=-1,n=r.length;++e<n;)t[e]=an(r.get(e));return eo(t)}function em(r,t=!1){let e=Object.keys(r);if(!t&&e.length===0)return()=>!1;let n=[];for(let i=-1,s=e.length;++i<s;)n[i]=an(r[e[i]]);return eo(n,e)}function eo(r,t){return e=>{if(!e||typeof e!="object")return!1;switch(e.constructor){case Array:return rm(r,e);case Map:return Mu(r,e,e.keys());case fr:case sn:case Object:case void 0:return Mu(r,e,t||Object.keys(e))}return e instanceof V?nm(r,e):!1}}function rm(r,t){let e=r.length;if(t.length!==e)return!1;for(let n=-1;++n<e;)if(!r[n](t[n]))return!1;return!0}function nm(r,t){let e=r.length;if(t.length!==e)return!1;for(let n=-1;++n<e;)if(!r[n](t.get(n)))return!1;return!0}function Mu(r,t,e){let n=e[Symbol.iterator](),i=t instanceof Map?t.keys():Object.keys(t)[Symbol.iterator](),s=t instanceof Map?t.values():Object.values(t)[Symbol.iterator](),o=0,a=r.length,c=s.next(),f=n.next(),p=i.next();for(;o<a&&!f.done&&!p.done&&!c.done&&!(f.value!==p.value||!r[o](c.value));++o,f=n.next(),p=i.next(),c=s.next());return o===a&&f.done&&p.done&&c.done?!0:(n.return&&n.return(),i.return&&i.return(),s.return&&s.return(),!1)}var Ka={};Sn(Ka,{BitIterator:()=>Tn,getBit:()=>Ru,getBool:()=>no,packBools:()=>An,popcnt_array:()=>Cu,popcnt_bit_range:()=>Bi,popcnt_uint32:()=>ro,setBool:()=>im,truncateBitmap:()=>qn});function no(r,t,e,n){return(e&1<<n)!==0}function Ru(r,t,e,n){return(e&1<<n)>>n}function im(r,t,e){return e?!!(r[t>>3]|=1<<t%8)||!0:!(r[t>>3]&=~(1<<t%8))&&!1}function qn(r,t,e){let n=e.byteLength+7&-8;if(r>0||e.byteLength<n){let i=new Uint8Array(n);return i.set(r%8===0?e.subarray(r>>3):An(new Tn(e,r,t,null,no)).subarray(0,n)),i}return e}function An(r){let t=[],e=0,n=0,i=0;for(let o of r)o&&(i|=1<<n),++n===8&&(t[e++]=i,i=n=0);(e===0||n>0)&&(t[e++]=i);let s=new Uint8Array(t.length+7&-8);return s.set(t),s}var Tn=class{constructor(t,e,n,i,s){this.bytes=t,this.length=n,this.context=i,this.get=s,this.bit=e%8,this.byteIndex=e>>3,this.byte=t[this.byteIndex++],this.index=0}next(){return this.index<this.length?(this.bit===8&&(this.bit=0,this.byte=this.bytes[this.byteIndex++]),{value:this.get(this.context,this.index++,this.byte,this.bit++)}):{done:!0,value:null}}[Symbol.iterator](){return this}};function Bi(r,t,e){if(e-t<=0)return 0;if(e-t<8){let s=0;for(let o of new Tn(r,t,e-t,r,Ru))s+=o;return s}let n=e>>3<<3,i=t+(t%8===0?0:8-t%8);return Bi(r,t,i)+Bi(r,n,e)+Cu(r,i>>3,n-i>>3)}function Cu(r,t,e){let n=0,i=Math.trunc(t),s=new DataView(r.buffer,r.byteOffset,r.byteLength),o=e===void 0?r.byteLength:i+e;for(;o-i>=4;)n+=ro(s.getUint32(i)),i+=4;for(;o-i>=2;)n+=ro(s.getUint16(i)),i+=2;for(;o-i>=1;)n+=ro(s.getUint8(i)),i+=1;return n}function ro(r){let t=Math.trunc(r);return t=t-(t>>>1&1431655765),t=(t&858993459)+(t>>>2&858993459),(t+(t>>>4)&252645135)*16843009>>>24}var sm=-1,ct=class{constructor(t,e,n,i,s,o=[],a){this.type=t,this.children=o,this.dictionary=a,this.offset=Math.floor(Math.max(e||0,0)),this.length=Math.floor(Math.max(n||0,0)),this._nullCount=Math.floor(Math.max(i||0,-1));let c;s instanceof ct?(this.stride=s.stride,this.values=s.values,this.typeIds=s.typeIds,this.nullBitmap=s.nullBitmap,this.valueOffsets=s.valueOffsets):(this.stride=De(t),s&&((c=s[0])&&(this.valueOffsets=c),(c=s[1])&&(this.values=c),(c=s[2])&&(this.nullBitmap=c),(c=s[3])&&(this.typeIds=c))),this.nullable=this._nullCount!==0&&this.nullBitmap&&this.nullBitmap.byteLength>0}get typeId(){return this.type.typeId}get ArrayType(){return this.type.ArrayType}get buffers(){return[this.valueOffsets,this.values,this.nullBitmap,this.typeIds]}get byteLength(){let t=0,{valueOffsets:e,values:n,nullBitmap:i,typeIds:s}=this;return e&&(t+=e.byteLength),n&&(t+=n.byteLength),i&&(t+=i.byteLength),s&&(t+=s.byteLength),this.children.reduce((o,a)=>o+a.byteLength,t)}get nullCount(){let t=this._nullCount,e;return t<=sm&&(e=this.nullBitmap)&&(this._nullCount=t=this.length-Bi(e,this.offset,this.offset+this.length)),t}getValid(t){if(this.nullable&&this.nullCount>0){let e=this.offset+t;return(this.nullBitmap[e>>3]&1<<e%8)!==0}return!0}setValid(t,e){if(!this.nullable)return e;if(!this.nullBitmap||this.nullBitmap.byteLength<=t>>3){let{nullBitmap:c}=this._changeLengthAndBackfillNullBitmap(this.length);Object.assign(this,{nullBitmap:c,_nullCount:0})}let{nullBitmap:n,offset:i}=this,s=i+t>>3,o=(i+t)%8,a=n[s]>>o&1;return e?a===0&&(n[s]|=1<<o,this._nullCount=this.nullCount+1):a===1&&(n[s]&=~(1<<o),this._nullCount=this.nullCount-1),e}clone(t=this.type,e=this.offset,n=this.length,i=this._nullCount,s=this,o=this.children){return new ct(t,e,n,i,s,o,this.dictionary)}slice(t,e){let{stride:n,typeId:i,children:s}=this,o=+(this._nullCount===0)-1,a=i===16?n:1,c=this._sliceBuffers(t,e,n,i);return this.clone(this.type,this.offset+t,e,o,c,s.length===0||this.valueOffsets?s:this._sliceChildren(s,a*t,a*e))}_changeLengthAndBackfillNullBitmap(t){if(this.typeId===h.Null)return this.clone(this.type,0,t,0);let{length:e,nullCount:n}=this,i=new Uint8Array((t+63&-64)>>3).fill(255,0,e>>3);i[e>>3]=(1<<e-(e&-8))-1,n>0&&i.set(qn(this.offset,e,this.nullBitmap),0);let s=this.buffers;return s[Pe.VALIDITY]=i,this.clone(this.type,0,t,n+(t-e),s)}_sliceBuffers(t,e,n,i){let s,{buffers:o}=this;return(s=o[Pe.TYPE])&&(o[Pe.TYPE]=s.subarray(t,t+e)),(s=o[Pe.OFFSET])&&(o[Pe.OFFSET]=s.subarray(t,t+e+1))||(s=o[Pe.DATA])&&(o[Pe.DATA]=i===6?s:s.subarray(n*t,n*(t+e))),o}_sliceChildren(t,e,n){return t.map(i=>i.slice(e,n))}};ct.prototype.children=Object.freeze([]);var En=class extends R{visit(t){return this.getVisitFn(t.type).call(this,t)}visitNull(t){let{["type"]:e,["offset"]:n=0,["length"]:i=0}=t;return new ct(e,n,i,0)}visitBool(t){let{["type"]:e,["offset"]:n=0}=t,i=P(t.nullBitmap),s=Q(e.ArrayType,t.data),{["length"]:o=s.length>>3,["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,s,i])}visitInt(t){let{["type"]:e,["offset"]:n=0}=t,i=P(t.nullBitmap),s=Q(e.ArrayType,t.data),{["length"]:o=s.length,["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,s,i])}visitFloat(t){let{["type"]:e,["offset"]:n=0}=t,i=P(t.nullBitmap),s=Q(e.ArrayType,t.data),{["length"]:o=s.length,["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,s,i])}visitUtf8(t){let{["type"]:e,["offset"]:n=0}=t,i=P(t.data),s=P(t.nullBitmap),o=In(t.valueOffsets),{["length"]:a=o.length-1,["nullCount"]:c=t.nullBitmap?-1:0}=t;return new ct(e,n,a,c,[o,i,s])}visitBinary(t){let{["type"]:e,["offset"]:n=0}=t,i=P(t.data),s=P(t.nullBitmap),o=In(t.valueOffsets),{["length"]:a=o.length-1,["nullCount"]:c=t.nullBitmap?-1:0}=t;return new ct(e,n,a,c,[o,i,s])}visitFixedSizeBinary(t){let{["type"]:e,["offset"]:n=0}=t,i=P(t.nullBitmap),s=Q(e.ArrayType,t.data),{["length"]:o=s.length/De(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,s,i])}visitDate(t){let{["type"]:e,["offset"]:n=0}=t,i=P(t.nullBitmap),s=Q(e.ArrayType,t.data),{["length"]:o=s.length/De(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,s,i])}visitTimestamp(t){let{["type"]:e,["offset"]:n=0}=t,i=P(t.nullBitmap),s=Q(e.ArrayType,t.data),{["length"]:o=s.length/De(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,s,i])}visitTime(t){let{["type"]:e,["offset"]:n=0}=t,i=P(t.nullBitmap),s=Q(e.ArrayType,t.data),{["length"]:o=s.length/De(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,s,i])}visitDecimal(t){let{["type"]:e,["offset"]:n=0}=t,i=P(t.nullBitmap),s=Q(e.ArrayType,t.data),{["length"]:o=s.length/De(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,s,i])}visitList(t){let{["type"]:e,["offset"]:n=0,["child"]:i}=t,s=P(t.nullBitmap),o=In(t.valueOffsets),{["length"]:a=o.length-1,["nullCount"]:c=t.nullBitmap?-1:0}=t;return new ct(e,n,a,c,[o,void 0,s],[i])}visitStruct(t){let{["type"]:e,["offset"]:n=0,["children"]:i=[]}=t,s=P(t.nullBitmap),{length:o=i.reduce((c,{length:f})=>Math.max(c,f),0),nullCount:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,void 0,s],i)}visitUnion(t){let{["type"]:e,["offset"]:n=0,["children"]:i=[]}=t,s=P(t.nullBitmap),o=Q(e.ArrayType,t.typeIds),{["length"]:a=o.length,["nullCount"]:c=t.nullBitmap?-1:0}=t;if(D.isSparseUnion(e))return new ct(e,n,a,c,[void 0,void 0,s,o],i);let f=In(t.valueOffsets);return new ct(e,n,a,c,[f,void 0,s,o],i)}visitDictionary(t){let{["type"]:e,["offset"]:n=0}=t,i=P(t.nullBitmap),s=Q(e.indices.ArrayType,t.data),{["dictionary"]:o=new V([new En().visit({type:e.dictionary})])}=t,{["length"]:a=s.length,["nullCount"]:c=t.nullBitmap?-1:0}=t;return new ct(e,n,a,c,[void 0,s,i],[],o)}visitInterval(t){let{["type"]:e,["offset"]:n=0}=t,i=P(t.nullBitmap),s=Q(e.ArrayType,t.data),{["length"]:o=s.length/De(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,s,i])}visitFixedSizeList(t){let{["type"]:e,["offset"]:n=0,["child"]:i=new En().visit({type:e.valueType})}=t,s=P(t.nullBitmap),{["length"]:o=i.length/De(e),["nullCount"]:a=t.nullBitmap?-1:0}=t;return new ct(e,n,o,a,[void 0,void 0,s],[i])}visitMap(t){let{["type"]:e,["offset"]:n=0,["child"]:i=new En().visit({type:e.childType})}=t,s=P(t.nullBitmap),o=In(t.valueOffsets),{["length"]:a=o.length-1,["nullCount"]:c=t.nullBitmap?-1:0}=t;return new ct(e,n,a,c,[o,void 0,s],[i])}};function z(r){return new En().visit(r)}var Oi=class{constructor(t=0,e){this.numChunks=t,this.getChunkIterator=e,this.chunkIndex=0,this.chunkIterator=this.getChunkIterator(0)}next(){for(;this.chunkIndex<this.numChunks;){let t=this.chunkIterator.next();if(!t.done)return t;++this.chunkIndex<this.numChunks&&(this.chunkIterator=this.getChunkIterator(this.chunkIndex))}return{done:!0,value:null}}[Symbol.iterator](){return this}};function io(r){return r.reduce((t,e)=>t+e.nullCount,0)}function so(r){return r.reduce((t,e,n)=>(t[n+1]=t[n]+e.length,t),new Uint32Array(r.length+1))}function oo(r,t,e,n){let i=[];for(let s=-1,o=r.length;++s<o;){let a=r[s],c=t[s],{length:f}=a;if(c>=n)break;if(e>=c+f)continue;if(c>=e&&c+f<=n){i.push(a);continue}let p=Math.max(0,e-c),y=Math.min(n-c,f);i.push(a.slice(p,y-p))}return i.length===0&&i.push(r[0].slice(0,0)),i}function Ja(r,t,e,n){let i=0,s=0,o=t.length-1;do{if(i>=o-1)return e<t[o]?n(r,i,e-t[i]):null;s=i+Math.trunc((o-i)*.5),e<t[s]?o=s:i=s}while(i<o)}function Mi(r,t){return r.getValid(t)}function ln(r){function t(e,n,i){return r(e[n],i)}return function(e){let n=this.data;return Ja(n,this._offsets,e,t)}}function ao(r){let t;function e(n,i,s){return r(n[i],s,t)}return function(n,i){let s=this.data;t=i;let o=Ja(s,this._offsets,n,e);return t=void 0,o}}function lo(r){let t;function e(n,i,s){let o=s,a=0,c=0;for(let f=i-1,p=n.length;++f<p;){let y=n[f];if(~(a=r(y,t,o)))return c+a;o=0,c+=y.length}return-1}return function(n,i){t=n;let s=this.data,o=typeof i!="number"?e(s,0,0):Ja(s,this._offsets,i,e);return t=void 0,o}}var k=class extends R{};function om(r,t){return t===null&&r.length>0?0:-1}function am(r,t){let{nullBitmap:e}=r;if(!e||r.nullCount<=0)return-1;let n=0;for(let i of new Tn(e,r.offset+(t||0),r.length,e,no)){if(!i)return n;++n}return-1}function Z(r,t,e){if(t===void 0)return-1;if(t===null)return am(r,e);let n=Lt.getVisitFn(r),i=an(t);for(let s=(e||0)-1,o=r.length;++s<o;)if(i(n(r,s)))return s;return-1}function Lu(r,t,e){let n=Lt.getVisitFn(r),i=an(t);for(let s=(e||0)-1,o=r.length;++s<o;)if(i(n(r,s)))return s;return-1}k.prototype.visitNull=om;k.prototype.visitBool=Z;k.prototype.visitInt=Z;k.prototype.visitInt8=Z;k.prototype.visitInt16=Z;k.prototype.visitInt32=Z;k.prototype.visitInt64=Z;k.prototype.visitUint8=Z;k.prototype.visitUint16=Z;k.prototype.visitUint32=Z;k.prototype.visitUint64=Z;k.prototype.visitFloat=Z;k.prototype.visitFloat16=Z;k.prototype.visitFloat32=Z;k.prototype.visitFloat64=Z;k.prototype.visitUtf8=Z;k.prototype.visitBinary=Z;k.prototype.visitFixedSizeBinary=Z;k.prototype.visitDate=Z;k.prototype.visitDateDay=Z;k.prototype.visitDateMillisecond=Z;k.prototype.visitTimestamp=Z;k.prototype.visitTimestampSecond=Z;k.prototype.visitTimestampMillisecond=Z;k.prototype.visitTimestampMicrosecond=Z;k.prototype.visitTimestampNanosecond=Z;k.prototype.visitTime=Z;k.prototype.visitTimeSecond=Z;k.prototype.visitTimeMillisecond=Z;k.prototype.visitTimeMicrosecond=Z;k.prototype.visitTimeNanosecond=Z;k.prototype.visitDecimal=Z;k.prototype.visitList=Z;k.prototype.visitStruct=Z;k.prototype.visitUnion=Z;k.prototype.visitDenseUnion=Lu;k.prototype.visitSparseUnion=Lu;k.prototype.visitDictionary=Z;k.prototype.visitInterval=Z;k.prototype.visitIntervalDayTime=Z;k.prototype.visitIntervalYearMonth=Z;k.prototype.visitFixedSizeList=Z;k.prototype.visitMap=Z;var xn=new k;var N=class extends R{};function Y(r){let{type:t}=r;if(r.nullCount===0&&r.stride===1&&(t.typeId===h.Timestamp||t instanceof Mt&&t.bitWidth!==64||t instanceof Je&&t.bitWidth!==64||t instanceof de&&t.precision!==It.HALF))return new Oi(r.data.length,n=>{let i=r.data[n];return i.values.subarray(0,i.length)[Symbol.iterator]()});let e=0;return new Oi(r.data.length,n=>{let s=r.data[n].length,o=r.slice(e,e+s);return e+=s,new qa(o)})}var qa=class{constructor(t){this.vector=t,this.index=0}next(){return this.index<this.vector.length?{value:this.vector.get(this.index++)}:{done:!0,value:null}}[Symbol.iterator](){return this}};N.prototype.visitNull=Y;N.prototype.visitBool=Y;N.prototype.visitInt=Y;N.prototype.visitInt8=Y;N.prototype.visitInt16=Y;N.prototype.visitInt32=Y;N.prototype.visitInt64=Y;N.prototype.visitUint8=Y;N.prototype.visitUint16=Y;N.prototype.visitUint32=Y;N.prototype.visitUint64=Y;N.prototype.visitFloat=Y;N.prototype.visitFloat16=Y;N.prototype.visitFloat32=Y;N.prototype.visitFloat64=Y;N.prototype.visitUtf8=Y;N.prototype.visitBinary=Y;N.prototype.visitFixedSizeBinary=Y;N.prototype.visitDate=Y;N.prototype.visitDateDay=Y;N.prototype.visitDateMillisecond=Y;N.prototype.visitTimestamp=Y;N.prototype.visitTimestampSecond=Y;N.prototype.visitTimestampMillisecond=Y;N.prototype.visitTimestampMicrosecond=Y;N.prototype.visitTimestampNanosecond=Y;N.prototype.visitTime=Y;N.prototype.visitTimeSecond=Y;N.prototype.visitTimeMillisecond=Y;N.prototype.visitTimeMicrosecond=Y;N.prototype.visitTimeNanosecond=Y;N.prototype.visitDecimal=Y;N.prototype.visitList=Y;N.prototype.visitStruct=Y;N.prototype.visitUnion=Y;N.prototype.visitDenseUnion=Y;N.prototype.visitSparseUnion=Y;N.prototype.visitDictionary=Y;N.prototype.visitInterval=Y;N.prototype.visitIntervalDayTime=Y;N.prototype.visitIntervalYearMonth=Y;N.prototype.visitFixedSizeList=Y;N.prototype.visitMap=Y;var Qn=new N;var lm=(r,t)=>r+t,hr=class extends R{visitNull(t,e){return 0}visitInt(t,e){return t.type.bitWidth/8}visitFloat(t,e){return t.type.ArrayType.BYTES_PER_ELEMENT}visitBool(t,e){return 1/8}visitDecimal(t,e){return t.type.bitWidth/8}visitDate(t,e){return(t.type.unit+1)*4}visitTime(t,e){return t.type.bitWidth/8}visitTimestamp(t,e){return t.type.unit===tt.SECOND?4:8}visitInterval(t,e){return(t.type.unit+1)*4}visitStruct(t,e){return t.children.reduce((n,i)=>n+Be.visit(i,e),0)}visitFixedSizeBinary(t,e){return t.type.byteWidth}visitMap(t,e){return 8+t.children.reduce((n,i)=>n+Be.visit(i,e),0)}visitDictionary(t,e){var n;return t.type.indices.bitWidth/8+(((n=t.dictionary)===null||n===void 0?void 0:n.getByteLength(t.values[e]))||0)}},cm=({valueOffsets:r},t)=>8+(r[t+1]-r[t]),um=({valueOffsets:r},t)=>8+(r[t+1]-r[t]),dm=({valueOffsets:r,stride:t,children:e},n)=>{let i=e[0],{[n*t]:s}=r,{[n*t+1]:o}=r,a=Be.getVisitFn(i.type),c=i.slice(s,o-s),f=8;for(let p=-1,y=o-s;++p<y;)f+=a(c,p);return f},fm=({stride:r,children:t},e)=>{let n=t[0],i=n.slice(e*r,r),s=Be.getVisitFn(n.type),o=0;for(let a=-1,c=i.length;++a<c;)o+=s(i,a);return o},hm=(r,t)=>r.type.mode===Et.Dense?Uu(r,t):ku(r,t),Uu=({type:r,children:t,typeIds:e,valueOffsets:n},i)=>{let s=r.typeIdToChildIndex[e[i]];return 8+Be.visit(t[s],n[i])},ku=({children:r},t)=>4+Be.visitMany(r,r.map(()=>t)).reduce(lm,0);hr.prototype.visitUtf8=cm;hr.prototype.visitBinary=um;hr.prototype.visitList=dm;hr.prototype.visitFixedSizeList=fm;hr.prototype.visitUnion=hm;hr.prototype.visitDenseUnion=Uu;hr.prototype.visitSparseUnion=ku;var Be=new hr;var Nu,ju={},Pu={},V=class{constructor(t){var e,n,i;let s=t[0]instanceof V?t.flatMap(a=>a.data):t;if(s.length===0||s.some(a=>!(a instanceof ct)))throw new TypeError("Vector constructor expects an Array of Data instances.");let o=(e=s[0])===null||e===void 0?void 0:e.type;switch(s.length){case 0:this._offsets=[0];break;case 1:{let{get:a,set:c,indexOf:f,byteLength:p}=ju[o.typeId],y=s[0];this.isValid=w=>Mi(y,w),this.get=w=>a(y,w),this.set=(w,S)=>c(y,w,S),this.indexOf=w=>f(y,w),this.getByteLength=w=>p(y,w),this._offsets=[0,y.length];break}default:Object.setPrototypeOf(this,Pu[o.typeId]),this._offsets=so(s);break}this.data=s,this.type=o,this.stride=De(o),this.numChildren=(i=(n=o.children)===null||n===void 0?void 0:n.length)!==null&&i!==void 0?i:0,this.length=this._offsets[this._offsets.length-1]}get byteLength(){return this._byteLength===-1&&(this._byteLength=this.data.reduce((t,e)=>t+e.byteLength,0)),this._byteLength}get nullCount(){return this._nullCount===-1&&(this._nullCount=io(this.data)),this._nullCount}get ArrayType(){return this.type.ArrayType}get[Symbol.toStringTag](){return`${this.VectorName}<${this.type[Symbol.toStringTag]}>`}get VectorName(){return`${h[this.type.typeId]}Vector`}isValid(t){return!1}get(t){return null}set(t,e){}indexOf(t,e){return-1}includes(t,e){return this.indexOf(t,e)>0}getByteLength(t){return 0}[Symbol.iterator](){return Qn.visit(this)}concat(...t){return new V(this.data.concat(t.flatMap(e=>e.data).flat(Number.POSITIVE_INFINITY)))}slice(t,e){return new V(Di(this,t,e,({data:n,_offsets:i},s,o)=>oo(n,i,s,o)))}toJSON(){return[...this]}toArray(){let{type:t,data:e,length:n,stride:i,ArrayType:s}=this;switch(t.typeId){case h.Int:case h.Float:case h.Decimal:case h.Time:case h.Timestamp:switch(e.length){case 0:return new s;case 1:return e[0].values.subarray(0,n*i);default:return e.reduce((o,{values:a,length:c})=>(o.array.set(a.subarray(0,c*i),o.offset),o.offset+=c*i,o),{array:new s(n*i),offset:0}).array}}return[...this]}toString(){return`[${[...this].join(",")}]`}getChild(t){var e;return this.getChildAt((e=this.type.children)===null||e===void 0?void 0:e.findIndex(n=>n.name===t))}getChildAt(t){return t>-1&&t<this.numChildren?new V(this.data.map(({children:e})=>e[t])):null}get isMemoized(){return D.isDictionary(this.type)?this.data[0].dictionary.isMemoized:!1}memoize(){if(D.isDictionary(this.type)){let t=new Zn(this.data[0].dictionary),e=this.data.map(n=>{let i=n.clone();return i.dictionary=t,i});return new V(e)}return new Zn(this)}unmemoize(){if(D.isDictionary(this.type)&&this.isMemoized){let t=this.data[0].dictionary.unmemoize(),e=this.data.map(n=>{let i=n.clone();return i.dictionary=t,i});return new V(e)}return this}};Nu=Symbol.toStringTag;V[Nu]=(r=>{r.type=D.prototype,r.data=[],r.length=0,r.stride=1,r.numChildren=0,r._nullCount=-1,r._byteLength=-1,r._offsets=new Uint32Array([0]),r[Symbol.isConcatSpreadable]=!0;let t=Object.keys(h).map(e=>h[e]).filter(e=>typeof e=="number"&&e!==h.NONE);for(let e of t){let n=Lt.getVisitFnByTypeId(e),i=Jt.getVisitFnByTypeId(e),s=xn.getVisitFnByTypeId(e),o=Be.getVisitFnByTypeId(e);ju[e]={get:n,set:i,indexOf:s,byteLength:o},Pu[e]=Object.create(r,{isValid:{value:ln(Mi)},get:{value:ln(Lt.getVisitFnByTypeId(e))},set:{value:ao(Jt.getVisitFnByTypeId(e))},indexOf:{value:lo(xn.getVisitFnByTypeId(e))},getByteLength:{value:ln(Be.getVisitFnByTypeId(e))}})}return"Vector"})(V.prototype);var Zn=class extends V{constructor(t){super(t.data);let e=this.get,n=this.set,i=this.slice,s=new Array(this.length);Object.defineProperty(this,"get",{value(o){let a=s[o];if(a!==void 0)return a;let c=e.call(this,o);return s[o]=c,c}}),Object.defineProperty(this,"set",{value(o,a){n.call(this,o,a),s[o]=a}}),Object.defineProperty(this,"slice",{value:(o,a)=>new Zn(i.call(this,o,a))}),Object.defineProperty(this,"isMemoized",{value:!0}),Object.defineProperty(this,"unmemoize",{value:()=>new V(this.data)}),Object.defineProperty(this,"memoize",{value:()=>this})}};function Hu(r){if(!r||r.length<=0)return function(i){return!0};let t="",e=r.filter(n=>n===n);return e.length>0&&(t=`
    switch (x) {${e.map(n=>`
        case ${pm(n)}:`).join("")}
            return false;
    }`),r.length!==e.length&&(t=`if (x !== x) return false;
${t}`),new Function("x",`${t}
return true;`)}function pm(r){return typeof r!="bigint"?Xe(r):Is?`${Xe(r)}n`:`"${Xe(r)}"`}var Qa=(r,t)=>(Math.ceil(r)*t+63&-64||64)/t,_m=(r,t=0)=>r.length>=t?r.subarray(0,t):Wn(new r.constructor(t),r,0),cn=class{constructor(t,e=1){this.buffer=t,this.stride=e,this.BYTES_PER_ELEMENT=t.BYTES_PER_ELEMENT,this.ArrayType=t.constructor,this._resize(this.length=Math.ceil(t.length/e))}get byteLength(){return Math.ceil(this.length*this.stride)*this.BYTES_PER_ELEMENT}get reservedLength(){return this.buffer.length/this.stride}get reservedByteLength(){return this.buffer.byteLength}set(t,e){return this}append(t){return this.set(this.length,t)}reserve(t){if(t>0){this.length+=t;let e=this.stride,n=this.length*e,i=this.buffer.length;n>=i&&this._resize(i===0?Qa(n*1,this.BYTES_PER_ELEMENT):Qa(n*2,this.BYTES_PER_ELEMENT))}return this}flush(t=this.length){t=Qa(t*this.stride,this.BYTES_PER_ELEMENT);let e=_m(this.buffer,t);return this.clear(),e}clear(){return this.length=0,this._resize(0),this}_resize(t){return this.buffer=Wn(new this.ArrayType(t),this.buffer)}};cn.prototype.offset=0;var Vr=class extends cn{last(){return this.get(this.length-1)}get(t){return this.buffer[t]}set(t,e){return this.reserve(t-this.length+1),this.buffer[t*this.stride]=e,this}},ti=class extends Vr{constructor(t=new Uint8Array(0)){super(t,1/8),this.numValid=0}get numInvalid(){return this.length-this.numValid}get(t){return this.buffer[t>>3]>>t%8&1}set(t,e){let{buffer:n}=this.reserve(t-this.length+1),i=t>>3,s=t%8,o=n[i]>>s&1;return e?o===0&&(n[i]|=1<<s,++this.numValid):o===1&&(n[i]&=~(1<<s),--this.numValid),this}clear(){return this.numValid=0,super.clear()}},ei=class extends Vr{constructor(t=new Int32Array(1)){super(t,1)}append(t){return this.set(this.length-1,t)}set(t,e){let n=this.length-1,i=this.reserve(t-n+1).buffer;return n<t++&&i.fill(i[n],n,t),i[t]=i[t-1]+e,this}flush(t=this.length-1){return t>this.length&&this.set(t-1,0),super.flush(t+1)}};var Ft=class{constructor({type:t,nullValues:e}){this.length=0,this.finished=!1,this.type=t,this.children=[],this.nullValues=e,this.stride=De(t),this._nulls=new ti,e&&e.length>0&&(this._isValid=Hu(e))}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t){throw new Error('"throughDOM" not available in this environment')}toVector(){return new V([this.flush()])}get ArrayType(){return this.type.ArrayType}get nullCount(){return this._nulls.numInvalid}get numChildren(){return this.children.length}get byteLength(){let t=0,{_offsets:e,_values:n,_nulls:i,_typeIds:s,children:o}=this;return e&&(t+=e.byteLength),n&&(t+=n.byteLength),i&&(t+=i.byteLength),s&&(t+=s.byteLength),o.reduce((a,c)=>a+c.byteLength,t)}get reservedLength(){return this._nulls.reservedLength}get reservedByteLength(){let t=0;return this._offsets&&(t+=this._offsets.reservedByteLength),this._values&&(t+=this._values.reservedByteLength),this._nulls&&(t+=this._nulls.reservedByteLength),this._typeIds&&(t+=this._typeIds.reservedByteLength),this.children.reduce((e,n)=>e+n.reservedByteLength,t)}get valueOffsets(){return this._offsets?this._offsets.buffer:null}get values(){return this._values?this._values.buffer:null}get nullBitmap(){return this._nulls?this._nulls.buffer:null}get typeIds(){return this._typeIds?this._typeIds.buffer:null}append(t){return this.set(this.length,t)}isValid(t){return this._isValid(t)}set(t,e){return this.setValid(t,this.isValid(e))&&this.setValue(t,e),this}setValue(t,e){this._setValue(this,t,e)}setValid(t,e){return this.length=this._nulls.set(t,+e).length,e}addChild(t,e=`${this.numChildren}`){throw new Error(`Cannot append children to non-nested type "${this.type}"`)}getChildAt(t){return this.children[t]||null}flush(){let t,e,n,i,{type:s,length:o,nullCount:a,_typeIds:c,_offsets:f,_values:p,_nulls:y}=this;(e=c==null?void 0:c.flush(o))?i=f==null?void 0:f.flush(o):(i=f==null?void 0:f.flush(o))?t=p==null?void 0:p.flush(f.last()):t=p==null?void 0:p.flush(o),a>0&&(n=y==null?void 0:y.flush(o));let w=this.children.map(S=>S.flush());return this.clear(),z({type:s,length:o,nullCount:a,children:w,child:w[0],data:t,typeIds:e,nullBitmap:n,valueOffsets:i})}finish(){this.finished=!0;for(let t of this.children)t.finish();return this}clear(){var t,e,n,i;this.length=0,(t=this._nulls)===null||t===void 0||t.clear(),(e=this._values)===null||e===void 0||e.clear(),(n=this._offsets)===null||n===void 0||n.clear(),(i=this._typeIds)===null||i===void 0||i.clear();for(let s of this.children)s.clear();return this}};Ft.prototype.length=1;Ft.prototype.stride=1;Ft.prototype.children=null;Ft.prototype.finished=!1;Ft.prototype.nullValues=null;Ft.prototype._isValid=()=>!0;var zt=class extends Ft{constructor(t){super(t),this._values=new Vr(new this.ArrayType(0),this.stride)}setValue(t,e){let n=this._values;return n.reserve(t-n.length+1),super.setValue(t,e)}},pr=class extends Ft{constructor(t){super(t),this._pendingLength=0,this._offsets=new ei}setValue(t,e){let n=this._pending||(this._pending=new Map),i=n.get(t);i&&(this._pendingLength-=i.length),this._pendingLength+=e instanceof fr?e[He].length:e.length,n.set(t,e)}setValid(t,e){return super.setValid(t,e)?!0:((this._pending||(this._pending=new Map)).set(t,void 0),!1)}clear(){return this._pendingLength=0,this._pending=void 0,super.clear()}flush(){return this._flush(),super.flush()}finish(){return this._flush(),super.finish()}_flush(){let t=this._pending,e=this._pendingLength;return this._pendingLength=0,this._pending=void 0,t&&t.size>0&&this._flushPending(t,e),this}};var Dn=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}offset(){return this.bb.readInt64(this.bb_pos)}metaDataLength(){return this.bb.readInt32(this.bb_pos+8)}bodyLength(){return this.bb.readInt64(this.bb_pos+16)}static sizeOf(){return 24}static createBlock(t,e,n,i){return t.prep(8,24),t.writeInt64(i),t.pad(4),t.writeInt32(n),t.writeInt64(e),t.offset()}};var _r=new Int32Array(2),co=new Float32Array(_r.buffer),uo=new Float64Array(_r.buffer),ri=new Uint16Array(new Uint8Array([1,0]).buffer)[0]===1;var Ut=class{constructor(t,e){this.low=t|0,this.high=e|0}static create(t,e){return t==0&&e==0?Ut.ZERO:new Ut(t,e)}toFloat64(){return(this.low>>>0)+this.high*4294967296}equals(t){return this.low==t.low&&this.high==t.high}};Ut.ZERO=new Ut(0,0);var Ri;(function(r){r[r.UTF8_BYTES=1]="UTF8_BYTES",r[r.UTF16_STRING=2]="UTF16_STRING"})(Ri||(Ri={}));var ce=class{constructor(t){this.bytes_=t,this.position_=0}static allocate(t){return new ce(new Uint8Array(t))}clear(){this.position_=0}bytes(){return this.bytes_}position(){return this.position_}setPosition(t){this.position_=t}capacity(){return this.bytes_.length}readInt8(t){return this.readUint8(t)<<24>>24}readUint8(t){return this.bytes_[t]}readInt16(t){return this.readUint16(t)<<16>>16}readUint16(t){return this.bytes_[t]|this.bytes_[t+1]<<8}readInt32(t){return this.bytes_[t]|this.bytes_[t+1]<<8|this.bytes_[t+2]<<16|this.bytes_[t+3]<<24}readUint32(t){return this.readInt32(t)>>>0}readInt64(t){return new Ut(this.readInt32(t),this.readInt32(t+4))}readUint64(t){return new Ut(this.readUint32(t),this.readUint32(t+4))}readFloat32(t){return _r[0]=this.readInt32(t),co[0]}readFloat64(t){return _r[ri?0:1]=this.readInt32(t),_r[ri?1:0]=this.readInt32(t+4),uo[0]}writeInt8(t,e){this.bytes_[t]=e}writeUint8(t,e){this.bytes_[t]=e}writeInt16(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8}writeUint16(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8}writeInt32(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24}writeUint32(t,e){this.bytes_[t]=e,this.bytes_[t+1]=e>>8,this.bytes_[t+2]=e>>16,this.bytes_[t+3]=e>>24}writeInt64(t,e){this.writeInt32(t,e.low),this.writeInt32(t+4,e.high)}writeUint64(t,e){this.writeUint32(t,e.low),this.writeUint32(t+4,e.high)}writeFloat32(t,e){co[0]=e,this.writeInt32(t,_r[0])}writeFloat64(t,e){uo[0]=e,this.writeInt32(t,_r[ri?0:1]),this.writeInt32(t+4,_r[ri?1:0])}getBufferIdentifier(){if(this.bytes_.length<this.position_+4+4)throw new Error("FlatBuffers: ByteBuffer is too short to contain an identifier.");let t="";for(let e=0;e<4;e++)t+=String.fromCharCode(this.readInt8(this.position_+4+e));return t}__offset(t,e){let n=t-this.readInt32(t);return e<this.readInt16(n)?this.readInt16(n+e):0}__union(t,e){return t.bb_pos=e+this.readInt32(e),t.bb=this,t}__string(t,e){t+=this.readInt32(t);let n=this.readInt32(t),i="",s=0;if(t+=4,e===Ri.UTF8_BYTES)return this.bytes_.subarray(t,t+n);for(;s<n;){let o,a=this.readUint8(t+s++);if(a<192)o=a;else{let c=this.readUint8(t+s++);if(a<224)o=(a&31)<<6|c&63;else{let f=this.readUint8(t+s++);if(a<240)o=(a&15)<<12|(c&63)<<6|f&63;else{let p=this.readUint8(t+s++);o=(a&7)<<18|(c&63)<<12|(f&63)<<6|p&63}}}o<65536?i+=String.fromCharCode(o):(o-=65536,i+=String.fromCharCode((o>>10)+55296,(o&(1<<10)-1)+56320))}return i}__union_with_string(t,e){return typeof t=="string"?this.__string(e):this.__union(t,e)}__indirect(t){return t+this.readInt32(t)}__vector(t){return t+this.readInt32(t)+4}__vector_len(t){return this.readInt32(t+this.readInt32(t))}__has_identifier(t){if(t.length!=4)throw new Error("FlatBuffers: file identifier must be length "+4);for(let e=0;e<4;e++)if(t.charCodeAt(e)!=this.readInt8(this.position()+4+e))return!1;return!0}createLong(t,e){return Ut.create(t,e)}createScalarList(t,e){let n=[];for(let i=0;i<e;++i)t(i)!==null&&n.push(t(i));return n}createObjList(t,e){let n=[];for(let i=0;i<e;++i){let s=t(i);s!==null&&n.push(s.unpack())}return n}};var zr=class{constructor(t){this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1,this.string_maps=null;let e;t?e=t:e=1024,this.bb=ce.allocate(e),this.space=e}clear(){this.bb.clear(),this.space=this.bb.capacity(),this.minalign=1,this.vtable=null,this.vtable_in_use=0,this.isNested=!1,this.object_start=0,this.vtables=[],this.vector_num_elems=0,this.force_defaults=!1,this.string_maps=null}forceDefaults(t){this.force_defaults=t}dataBuffer(){return this.bb}asUint8Array(){return this.bb.bytes().subarray(this.bb.position(),this.bb.position()+this.offset())}prep(t,e){t>this.minalign&&(this.minalign=t);let n=~(this.bb.capacity()-this.space+e)+1&t-1;for(;this.space<n+t+e;){let i=this.bb.capacity();this.bb=zr.growByteBuffer(this.bb),this.space+=this.bb.capacity()-i}this.pad(n)}pad(t){for(let e=0;e<t;e++)this.bb.writeInt8(--this.space,0)}writeInt8(t){this.bb.writeInt8(this.space-=1,t)}writeInt16(t){this.bb.writeInt16(this.space-=2,t)}writeInt32(t){this.bb.writeInt32(this.space-=4,t)}writeInt64(t){this.bb.writeInt64(this.space-=8,t)}writeFloat32(t){this.bb.writeFloat32(this.space-=4,t)}writeFloat64(t){this.bb.writeFloat64(this.space-=8,t)}addInt8(t){this.prep(1,0),this.writeInt8(t)}addInt16(t){this.prep(2,0),this.writeInt16(t)}addInt32(t){this.prep(4,0),this.writeInt32(t)}addInt64(t){this.prep(8,0),this.writeInt64(t)}addFloat32(t){this.prep(4,0),this.writeFloat32(t)}addFloat64(t){this.prep(8,0),this.writeFloat64(t)}addFieldInt8(t,e,n){(this.force_defaults||e!=n)&&(this.addInt8(e),this.slot(t))}addFieldInt16(t,e,n){(this.force_defaults||e!=n)&&(this.addInt16(e),this.slot(t))}addFieldInt32(t,e,n){(this.force_defaults||e!=n)&&(this.addInt32(e),this.slot(t))}addFieldInt64(t,e,n){(this.force_defaults||!e.equals(n))&&(this.addInt64(e),this.slot(t))}addFieldFloat32(t,e,n){(this.force_defaults||e!=n)&&(this.addFloat32(e),this.slot(t))}addFieldFloat64(t,e,n){(this.force_defaults||e!=n)&&(this.addFloat64(e),this.slot(t))}addFieldOffset(t,e,n){(this.force_defaults||e!=n)&&(this.addOffset(e),this.slot(t))}addFieldStruct(t,e,n){e!=n&&(this.nested(e),this.slot(t))}nested(t){if(t!=this.offset())throw new Error("FlatBuffers: struct must be serialized inline.")}notNested(){if(this.isNested)throw new Error("FlatBuffers: object serialization must not be nested.")}slot(t){this.vtable!==null&&(this.vtable[t]=this.offset())}offset(){return this.bb.capacity()-this.space}static growByteBuffer(t){let e=t.capacity();if(e&3221225472)throw new Error("FlatBuffers: cannot grow buffer beyond 2 gigabytes.");let n=e<<1,i=ce.allocate(n);return i.setPosition(n-e),i.bytes().set(t.bytes(),n-e),i}addOffset(t){this.prep(4,0),this.writeInt32(this.offset()-t+4)}startObject(t){this.notNested(),this.vtable==null&&(this.vtable=[]),this.vtable_in_use=t;for(let e=0;e<t;e++)this.vtable[e]=0;this.isNested=!0,this.object_start=this.offset()}endObject(){if(this.vtable==null||!this.isNested)throw new Error("FlatBuffers: endObject called without startObject");this.addInt32(0);let t=this.offset(),e=this.vtable_in_use-1;for(;e>=0&&this.vtable[e]==0;e--);let n=e+1;for(;e>=0;e--)this.addInt16(this.vtable[e]!=0?t-this.vtable[e]:0);let i=2;this.addInt16(t-this.object_start);let s=(n+i)*2;this.addInt16(s);let o=0,a=this.space;t:for(e=0;e<this.vtables.length;e++){let c=this.bb.capacity()-this.vtables[e];if(s==this.bb.readInt16(c)){for(let f=2;f<s;f+=2)if(this.bb.readInt16(a+f)!=this.bb.readInt16(c+f))continue t;o=this.vtables[e];break}}return o?(this.space=this.bb.capacity()-t,this.bb.writeInt32(this.space,o-t)):(this.vtables.push(this.offset()),this.bb.writeInt32(this.bb.capacity()-t,this.offset()-t)),this.isNested=!1,t}finish(t,e,n){let i=n?4:0;if(e){let s=e;if(this.prep(this.minalign,4+4+i),s.length!=4)throw new Error("FlatBuffers: file identifier must be length "+4);for(let o=4-1;o>=0;o--)this.writeInt8(s.charCodeAt(o))}this.prep(this.minalign,4+i),this.addOffset(t),i&&this.addInt32(this.bb.capacity()-this.space),this.bb.setPosition(this.space)}finishSizePrefixed(t,e){this.finish(t,e,!0)}requiredField(t,e){let n=this.bb.capacity()-t,i=n-this.bb.readInt32(n);if(!(this.bb.readInt16(i+e)!=0))throw new Error("FlatBuffers: field "+e+" must be set")}startVector(t,e,n){this.notNested(),this.vector_num_elems=e,this.prep(4,t*e),this.prep(n,t*e)}endVector(){return this.writeInt32(this.vector_num_elems),this.offset()}createSharedString(t){if(!t)return 0;if(this.string_maps||(this.string_maps=new Map),this.string_maps.has(t))return this.string_maps.get(t);let e=this.createString(t);return this.string_maps.set(t,e),e}createString(t){if(!t)return 0;let e;if(t instanceof Uint8Array)e=t;else{e=[];let n=0;for(;n<t.length;){let i,s=t.charCodeAt(n++);if(s<55296||s>=56320)i=s;else{let o=t.charCodeAt(n++);i=(s<<10)+o+(65536-(55296<<10)-56320)}i<128?e.push(i):(i<2048?e.push(i>>6&31|192):(i<65536?e.push(i>>12&15|224):e.push(i>>18&7|240,i>>12&63|128),e.push(i>>6&63|128)),e.push(i&63|128))}}this.addInt8(0),this.startVector(1,e.length,1),this.bb.setPosition(this.space-=e.length);for(let n=0,i=this.space,s=this.bb.bytes();n<e.length;n++)s[i++]=e[n];return this.endVector()}createLong(t,e){return Ut.create(t,e)}createObjectOffset(t){return t===null?0:typeof t=="string"?this.createString(t):t.pack(this)}createObjectOffsetList(t){let e=[];for(let n=0;n<t.length;++n){let i=t[n];if(i!==null)e.push(this.createObjectOffset(i));else throw new Error("FlatBuffers: Argument for createObjectOffsetList cannot contain null.")}return e}createStructOffsetList(t,e){return e(this,t.length),this.createObjectOffsetList(t),this.endVector()}};var wt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsKeyValue(t,e){return(e||new wt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsKeyValue(t,e){return t.setPosition(t.position()+4),(e||new wt).__init(t.readInt32(t.position())+t.position(),t)}key(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}value(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}static startKeyValue(t){t.startObject(2)}static addKey(t,e){t.addFieldOffset(0,e,0)}static addValue(t,e){t.addFieldOffset(1,e,0)}static endKeyValue(t){return t.endObject()}static createKeyValue(t,e,n){return wt.startKeyValue(t),wt.addKey(t,e),wt.addValue(t,n),wt.endKeyValue(t)}};var un;(function(r){r[r.V1=0]="V1",r[r.V2=1]="V2",r[r.V3=2]="V3",r[r.V4=3]="V4",r[r.V5=4]="V5"})(un||(un={}));var dn;(function(r){r[r.Little=0]="Little",r[r.Big=1]="Big"})(dn||(dn={}));var Ci;(function(r){r[r.DenseArray=0]="DenseArray"})(Ci||(Ci={}));var Wt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsInt(t,e){return(e||new Wt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsInt(t,e){return t.setPosition(t.position()+4),(e||new Wt).__init(t.readInt32(t.position())+t.position(),t)}bitWidth(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}isSigned(){let t=this.bb.__offset(this.bb_pos,6);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startInt(t){t.startObject(2)}static addBitWidth(t,e){t.addFieldInt32(0,e,0)}static addIsSigned(t,e){t.addFieldInt8(1,+e,0)}static endInt(t){return t.endObject()}static createInt(t,e,n){return Wt.startInt(t),Wt.addBitWidth(t,e),Wt.addIsSigned(t,n),Wt.endInt(t)}};var Oe=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDictionaryEncoding(t,e){return(e||new Oe).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDictionaryEncoding(t,e){return t.setPosition(t.position()+4),(e||new Oe).__init(t.readInt32(t.position())+t.position(),t)}id(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}indexType(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new Wt).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}isOrdered(){let t=this.bb.__offset(this.bb_pos,8);return t?!!this.bb.readInt8(this.bb_pos+t):!1}dictionaryKind(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt16(this.bb_pos+t):Ci.DenseArray}static startDictionaryEncoding(t){t.startObject(4)}static addId(t,e){t.addFieldInt64(0,e,t.createLong(0,0))}static addIndexType(t,e){t.addFieldOffset(1,e,0)}static addIsOrdered(t,e){t.addFieldInt8(2,+e,0)}static addDictionaryKind(t,e){t.addFieldInt16(3,e,Ci.DenseArray)}static endDictionaryEncoding(t){return t.endObject()}};var mr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBinary(t,e){return(e||new mr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBinary(t,e){return t.setPosition(t.position()+4),(e||new mr).__init(t.readInt32(t.position())+t.position(),t)}static startBinary(t){t.startObject(0)}static endBinary(t){return t.endObject()}static createBinary(t){return mr.startBinary(t),mr.endBinary(t)}};var yr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBool(t,e){return(e||new yr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBool(t,e){return t.setPosition(t.position()+4),(e||new yr).__init(t.readInt32(t.position())+t.position(),t)}static startBool(t){t.startObject(0)}static endBool(t){return t.endObject()}static createBool(t){return yr.startBool(t),yr.endBool(t)}};var Li;(function(r){r[r.DAY=0]="DAY",r[r.MILLISECOND=1]="MILLISECOND"})(Li||(Li={}));var fe=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDate(t,e){return(e||new fe).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDate(t,e){return t.setPosition(t.position()+4),(e||new fe).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Li.MILLISECOND}static startDate(t){t.startObject(1)}static addUnit(t,e){t.addFieldInt16(0,e,Li.MILLISECOND)}static endDate(t){return t.endObject()}static createDate(t,e){return fe.startDate(t),fe.addUnit(t,e),fe.endDate(t)}};var Yt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDecimal(t,e){return(e||new Yt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDecimal(t,e){return t.setPosition(t.position()+4),(e||new Yt).__init(t.readInt32(t.position())+t.position(),t)}precision(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}scale(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt32(this.bb_pos+t):0}bitWidth(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readInt32(this.bb_pos+t):128}static startDecimal(t){t.startObject(3)}static addPrecision(t,e){t.addFieldInt32(0,e,0)}static addScale(t,e){t.addFieldInt32(1,e,0)}static addBitWidth(t,e){t.addFieldInt32(2,e,128)}static endDecimal(t){return t.endObject()}static createDecimal(t,e,n,i){return Yt.startDecimal(t),Yt.addPrecision(t,e),Yt.addScale(t,n),Yt.addBitWidth(t,i),Yt.endDecimal(t)}};var fn;(function(r){r[r.SECOND=0]="SECOND",r[r.MILLISECOND=1]="MILLISECOND",r[r.MICROSECOND=2]="MICROSECOND",r[r.NANOSECOND=3]="NANOSECOND"})(fn||(fn={}));var he=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFixedSizeBinary(t,e){return(e||new he).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFixedSizeBinary(t,e){return t.setPosition(t.position()+4),(e||new he).__init(t.readInt32(t.position())+t.position(),t)}byteWidth(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}static startFixedSizeBinary(t){t.startObject(1)}static addByteWidth(t,e){t.addFieldInt32(0,e,0)}static endFixedSizeBinary(t){return t.endObject()}static createFixedSizeBinary(t,e){return he.startFixedSizeBinary(t),he.addByteWidth(t,e),he.endFixedSizeBinary(t)}};var pe=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFixedSizeList(t,e){return(e||new pe).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFixedSizeList(t,e){return t.setPosition(t.position()+4),(e||new pe).__init(t.readInt32(t.position())+t.position(),t)}listSize(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt32(this.bb_pos+t):0}static startFixedSizeList(t){t.startObject(1)}static addListSize(t,e){t.addFieldInt32(0,e,0)}static endFixedSizeList(t){return t.endObject()}static createFixedSizeList(t,e){return pe.startFixedSizeList(t),pe.addListSize(t,e),pe.endFixedSizeList(t)}};var Ui;(function(r){r[r.HALF=0]="HALF",r[r.SINGLE=1]="SINGLE",r[r.DOUBLE=2]="DOUBLE"})(Ui||(Ui={}));var _e=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFloatingPoint(t,e){return(e||new _e).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFloatingPoint(t,e){return t.setPosition(t.position()+4),(e||new _e).__init(t.readInt32(t.position())+t.position(),t)}precision(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Ui.HALF}static startFloatingPoint(t){t.startObject(1)}static addPrecision(t,e){t.addFieldInt16(0,e,Ui.HALF)}static endFloatingPoint(t){return t.endObject()}static createFloatingPoint(t,e){return _e.startFloatingPoint(t),_e.addPrecision(t,e),_e.endFloatingPoint(t)}};var ki;(function(r){r[r.YEAR_MONTH=0]="YEAR_MONTH",r[r.DAY_TIME=1]="DAY_TIME",r[r.MONTH_DAY_NANO=2]="MONTH_DAY_NANO"})(ki||(ki={}));var me=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsInterval(t,e){return(e||new me).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsInterval(t,e){return t.setPosition(t.position()+4),(e||new me).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):ki.YEAR_MONTH}static startInterval(t){t.startObject(1)}static addUnit(t,e){t.addFieldInt16(0,e,ki.YEAR_MONTH)}static endInterval(t){return t.endObject()}static createInterval(t,e){return me.startInterval(t),me.addUnit(t,e),me.endInterval(t)}};var br=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsList(t,e){return(e||new br).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsList(t,e){return t.setPosition(t.position()+4),(e||new br).__init(t.readInt32(t.position())+t.position(),t)}static startList(t){t.startObject(0)}static endList(t){return t.endObject()}static createList(t){return br.startList(t),br.endList(t)}};var ye=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsMap(t,e){return(e||new ye).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMap(t,e){return t.setPosition(t.position()+4),(e||new ye).__init(t.readInt32(t.position())+t.position(),t)}keysSorted(){let t=this.bb.__offset(this.bb_pos,4);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startMap(t){t.startObject(1)}static addKeysSorted(t,e){t.addFieldInt8(0,+e,0)}static endMap(t){return t.endObject()}static createMap(t,e){return ye.startMap(t),ye.addKeysSorted(t,e),ye.endMap(t)}};var gr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsNull(t,e){return(e||new gr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsNull(t,e){return t.setPosition(t.position()+4),(e||new gr).__init(t.readInt32(t.position())+t.position(),t)}static startNull(t){t.startObject(0)}static endNull(t){return t.endObject()}static createNull(t){return gr.startNull(t),gr.endNull(t)}};var wr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsStruct_(t,e){return(e||new wr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsStruct_(t,e){return t.setPosition(t.position()+4),(e||new wr).__init(t.readInt32(t.position())+t.position(),t)}static startStruct_(t){t.startObject(0)}static endStruct_(t){return t.endObject()}static createStruct_(t){return wr.startStruct_(t),wr.endStruct_(t)}};var te=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTime(t,e){return(e||new te).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTime(t,e){return t.setPosition(t.position()+4),(e||new te).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):fn.MILLISECOND}bitWidth(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt32(this.bb_pos+t):32}static startTime(t){t.startObject(2)}static addUnit(t,e){t.addFieldInt16(0,e,fn.MILLISECOND)}static addBitWidth(t,e){t.addFieldInt32(1,e,32)}static endTime(t){return t.endObject()}static createTime(t,e,n){return te.startTime(t),te.addUnit(t,e),te.addBitWidth(t,n),te.endTime(t)}};var ee=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsTimestamp(t,e){return(e||new ee).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsTimestamp(t,e){return t.setPosition(t.position()+4),(e||new ee).__init(t.readInt32(t.position())+t.position(),t)}unit(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):fn.SECOND}timezone(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.__string(this.bb_pos+e,t):null}static startTimestamp(t){t.startObject(2)}static addUnit(t,e){t.addFieldInt16(0,e,fn.SECOND)}static addTimezone(t,e){t.addFieldOffset(1,e,0)}static endTimestamp(t){return t.endObject()}static createTimestamp(t,e,n){return ee.startTimestamp(t),ee.addUnit(t,e),ee.addTimezone(t,n),ee.endTimestamp(t)}};var Ni;(function(r){r[r.Sparse=0]="Sparse",r[r.Dense=1]="Dense"})(Ni||(Ni={}));var Gt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsUnion(t,e){return(e||new Gt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsUnion(t,e){return t.setPosition(t.position()+4),(e||new Gt).__init(t.readInt32(t.position())+t.position(),t)}mode(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):Ni.Sparse}typeIds(t){let e=this.bb.__offset(this.bb_pos,6);return e?this.bb.readInt32(this.bb.__vector(this.bb_pos+e)+t*4):0}typeIdsLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}typeIdsArray(){let t=this.bb.__offset(this.bb_pos,6);return t?new Int32Array(this.bb.bytes().buffer,this.bb.bytes().byteOffset+this.bb.__vector(this.bb_pos+t),this.bb.__vector_len(this.bb_pos+t)):null}static startUnion(t){t.startObject(2)}static addMode(t,e){t.addFieldInt16(0,e,Ni.Sparse)}static addTypeIds(t,e){t.addFieldOffset(1,e,0)}static createTypeIdsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addInt32(e[n]);return t.endVector()}static startTypeIdsVector(t,e){t.startVector(4,e,4)}static endUnion(t){return t.endObject()}static createUnion(t,e,n){return Gt.startUnion(t),Gt.addMode(t,e),Gt.addTypeIds(t,n),Gt.endUnion(t)}};var vr=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsUtf8(t,e){return(e||new vr).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsUtf8(t,e){return t.setPosition(t.position()+4),(e||new vr).__init(t.readInt32(t.position())+t.position(),t)}static startUtf8(t){t.startObject(0)}static endUtf8(t){return t.endObject()}static createUtf8(t){return vr.startUtf8(t),vr.endUtf8(t)}};var Tt;(function(r){r[r.NONE=0]="NONE",r[r.Null=1]="Null",r[r.Int=2]="Int",r[r.FloatingPoint=3]="FloatingPoint",r[r.Binary=4]="Binary",r[r.Utf8=5]="Utf8",r[r.Bool=6]="Bool",r[r.Decimal=7]="Decimal",r[r.Date=8]="Date",r[r.Time=9]="Time",r[r.Timestamp=10]="Timestamp",r[r.Interval=11]="Interval",r[r.List=12]="List",r[r.Struct_=13]="Struct_",r[r.Union=14]="Union",r[r.FixedSizeBinary=15]="FixedSizeBinary",r[r.FixedSizeList=16]="FixedSizeList",r[r.Map=17]="Map",r[r.Duration=18]="Duration",r[r.LargeBinary=19]="LargeBinary",r[r.LargeUtf8=20]="LargeUtf8",r[r.LargeList=21]="LargeList"})(Tt||(Tt={}));var kt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsField(t,e){return(e||new kt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsField(t,e){return t.setPosition(t.position()+4),(e||new kt).__init(t.readInt32(t.position())+t.position(),t)}name(t){let e=this.bb.__offset(this.bb_pos,4);return e?this.bb.__string(this.bb_pos+e,t):null}nullable(){let t=this.bb.__offset(this.bb_pos,6);return t?!!this.bb.readInt8(this.bb_pos+t):!1}typeType(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.readUint8(this.bb_pos+t):Tt.NONE}type(t){let e=this.bb.__offset(this.bb_pos,10);return e?this.bb.__union(t,this.bb_pos+e):null}dictionary(t){let e=this.bb.__offset(this.bb_pos,12);return e?(t||new Oe).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}children(t,e){let n=this.bb.__offset(this.bb_pos,14);return n?(e||new kt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}childrenLength(){let t=this.bb.__offset(this.bb_pos,14);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,16);return n?(e||new wt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,16);return t?this.bb.__vector_len(this.bb_pos+t):0}static startField(t){t.startObject(7)}static addName(t,e){t.addFieldOffset(0,e,0)}static addNullable(t,e){t.addFieldInt8(1,+e,0)}static addTypeType(t,e){t.addFieldInt8(2,e,Tt.NONE)}static addType(t,e){t.addFieldOffset(3,e,0)}static addDictionary(t,e){t.addFieldOffset(4,e,0)}static addChildren(t,e){t.addFieldOffset(5,e,0)}static createChildrenVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startChildrenVector(t,e){t.startVector(4,e,4)}static addCustomMetadata(t,e){t.addFieldOffset(6,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endField(t){return t.endObject()}};var xt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsSchema(t,e){return(e||new xt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsSchema(t,e){return t.setPosition(t.position()+4),(e||new xt).__init(t.readInt32(t.position())+t.position(),t)}endianness(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):dn.Little}fields(t,e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new kt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}fieldsLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new wt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}features(t){let e=this.bb.__offset(this.bb_pos,10);return e?this.bb.readInt64(this.bb.__vector(this.bb_pos+e)+t*8):this.bb.createLong(0,0)}featuresLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.__vector_len(this.bb_pos+t):0}static startSchema(t){t.startObject(4)}static addEndianness(t,e){t.addFieldInt16(0,e,dn.Little)}static addFields(t,e){t.addFieldOffset(1,e,0)}static createFieldsVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startFieldsVector(t,e){t.startVector(4,e,4)}static addCustomMetadata(t,e){t.addFieldOffset(2,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static addFeatures(t,e){t.addFieldOffset(3,e,0)}static createFeaturesVector(t,e){t.startVector(8,e.length,8);for(let n=e.length-1;n>=0;n--)t.addInt64(e[n]);return t.endVector()}static startFeaturesVector(t,e){t.startVector(8,e,8)}static endSchema(t){return t.endObject()}static finishSchemaBuffer(t,e){t.finish(e)}static finishSizePrefixedSchemaBuffer(t,e){t.finish(e,void 0,!0)}static createSchema(t,e,n,i,s){return xt.startSchema(t),xt.addEndianness(t,e),xt.addFields(t,n),xt.addCustomMetadata(t,i),xt.addFeatures(t,s),xt.endSchema(t)}};var re=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsFooter(t,e){return(e||new re).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsFooter(t,e){return t.setPosition(t.position()+4),(e||new re).__init(t.readInt32(t.position())+t.position(),t)}version(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):un.V1}schema(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new xt).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}dictionaries(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new Dn).__init(this.bb.__vector(this.bb_pos+n)+t*24,this.bb):null}dictionariesLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}recordBatches(t,e){let n=this.bb.__offset(this.bb_pos,10);return n?(e||new Dn).__init(this.bb.__vector(this.bb_pos+n)+t*24,this.bb):null}recordBatchesLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.__vector_len(this.bb_pos+t):0}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,12);return n?(e||new wt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}static startFooter(t){t.startObject(5)}static addVersion(t,e){t.addFieldInt16(0,e,un.V1)}static addSchema(t,e){t.addFieldOffset(1,e,0)}static addDictionaries(t,e){t.addFieldOffset(2,e,0)}static startDictionariesVector(t,e){t.startVector(24,e,8)}static addRecordBatches(t,e){t.addFieldOffset(3,e,0)}static startRecordBatchesVector(t,e){t.startVector(24,e,8)}static addCustomMetadata(t,e){t.addFieldOffset(4,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endFooter(t){return t.endObject()}static finishFooterBuffer(t,e){t.finish(e)}static finishSizePrefixedFooterBuffer(t,e){t.finish(e,void 0,!0)}};var rt=class{constructor(t=[],e,n){this.fields=t||[],this.metadata=e||new Map,n||(n=Za(t)),this.dictionaries=n}get[Symbol.toStringTag](){return"Schema"}get names(){return this.fields.map(t=>t.name)}toString(){return`Schema<{ ${this.fields.map((t,e)=>`${e}: ${t}`).join(", ")} }>`}select(t){let e=new Set(t),n=this.fields.filter(i=>e.has(i.name));return new rt(n,this.metadata)}selectAt(t){let e=t.map(n=>this.fields[n]).filter(Boolean);return new rt(e,this.metadata)}assign(...t){let e=t[0]instanceof rt?t[0]:Array.isArray(t[0])?new rt(t[0]):new rt(t),n=[...this.fields],i=ho(ho(new Map,this.metadata),e.metadata),s=e.fields.filter(a=>{let c=n.findIndex(f=>f.name===a.name);return~c?(n[c]=a.clone({metadata:ho(ho(new Map,n[c].metadata),a.metadata)}))&&!1:!0}),o=Za(s,new Map);return new rt([...n,...s],i,new Map([...this.dictionaries,...o]))}};rt.prototype.fields=null;rt.prototype.metadata=null;rt.prototype.dictionaries=null;var G=class{constructor(t,e,n=!1,i){this.name=t,this.type=e,this.nullable=n,this.metadata=i||new Map}static new(...t){let[e,n,i,s]=t;return t[0]&&typeof t[0]=="object"&&({name:e}=t[0],n===void 0&&(n=t[0].type),i===void 0&&(i=t[0].nullable),s===void 0&&(s=t[0].metadata)),new G(`${e}`,n,i,s)}get typeId(){return this.type.typeId}get[Symbol.toStringTag](){return"Field"}toString(){return`${this.name}: ${this.type}`}clone(...t){let[e,n,i,s]=t;return!t[0]||typeof t[0]!="object"?[e=this.name,n=this.type,i=this.nullable,s=this.metadata]=t:{name:e=this.name,type:n=this.type,nullable:i=this.nullable,metadata:s=this.metadata}=t[0],G.new(e,n,i,s)}};G.prototype.type=null;G.prototype.name=null;G.prototype.nullable=null;G.prototype.metadata=null;function ho(r,t){return new Map([...r||new Map,...t||new Map])}function Za(r,t=new Map){for(let e=-1,n=r.length;++e<n;){let s=r[e].type;if(D.isDictionary(s)){if(!t.has(s.id))t.set(s.id,s.dictionary);else if(t.get(s.id)!==s.dictionary)throw new Error("Cannot create Schema containing two different dictionaries with the same Id")}s.children&&s.children.length>0&&Za(s.children,t)}return t}var Vu=Ut,mm=zr,ym=ce,Wr=class{constructor(t,e=Vt.V4,n,i){this.schema=t,this.version=e,n&&(this._recordBatches=n),i&&(this._dictionaryBatches=i)}static decode(t){t=new ym(P(t));let e=re.getRootAsFooter(t),n=rt.decode(e.schema());return new tl(n,e)}static encode(t){let e=new mm,n=rt.encode(e,t.schema);re.startRecordBatchesVector(e,t.numRecordBatches);for(let o of[...t.recordBatches()].slice().reverse())nr.encode(e,o);let i=e.endVector();re.startDictionariesVector(e,t.numDictionaries);for(let o of[...t.dictionaryBatches()].slice().reverse())nr.encode(e,o);let s=e.endVector();return re.startFooter(e),re.addSchema(e,n),re.addVersion(e,Vt.V4),re.addRecordBatches(e,i),re.addDictionaries(e,s),re.finishFooterBuffer(e,re.endFooter(e)),e.asUint8Array()}get numRecordBatches(){return this._recordBatches.length}get numDictionaries(){return this._dictionaryBatches.length}*recordBatches(){for(let t,e=-1,n=this.numRecordBatches;++e<n;)(t=this.getRecordBatch(e))&&(yield t)}*dictionaryBatches(){for(let t,e=-1,n=this.numDictionaries;++e<n;)(t=this.getDictionaryBatch(e))&&(yield t)}getRecordBatch(t){return t>=0&&t<this.numRecordBatches&&this._recordBatches[t]||null}getDictionaryBatch(t){return t>=0&&t<this.numDictionaries&&this._dictionaryBatches[t]||null}};var tl=class extends Wr{constructor(t,e){super(t,e.version()),this._footer=e}get numRecordBatches(){return this._footer.recordBatchesLength()}get numDictionaries(){return this._footer.dictionariesLength()}getRecordBatch(t){if(t>=0&&t<this.numRecordBatches){let e=this._footer.recordBatches(t);if(e)return nr.decode(e)}return null}getDictionaryBatch(t){if(t>=0&&t<this.numDictionaries){let e=this._footer.dictionaries(t);if(e)return nr.decode(e)}return null}},nr=class{constructor(t,e,n){this.metaDataLength=t,this.offset=typeof n=="number"?n:n.low,this.bodyLength=typeof e=="number"?e:e.low}static decode(t){return new nr(t.metaDataLength(),t.bodyLength(),t.offset())}static encode(t,e){let{metaDataLength:n}=e,i=new Vu(e.offset,0),s=new Vu(e.bodyLength,0);return Dn.createBlock(t,i,n,s)}};var vt=Object.freeze({done:!0,value:void 0}),ji=class{constructor(t){this._json=t}get schema(){return this._json.schema}get batches(){return this._json.batches||[]}get dictionaries(){return this._json.dictionaries||[]}},Bn=class{tee(){return this._getDOMStream().tee()}pipe(t,e){return this._getNodeStream().pipe(t,e)}pipeTo(t,e){return this._getDOMStream().pipeTo(t,e)}pipeThrough(t,e){return this._getDOMStream().pipeThrough(t,e)}_getDOMStream(){return this._DOMStream||(this._DOMStream=this.toDOMStream())}_getNodeStream(){return this._nodeStream||(this._nodeStream=this.toNodeStream())}},po=class extends Bn{constructor(){super(),this._values=[],this.resolvers=[],this._closedPromise=new Promise(t=>this._closedPromiseResolve=t)}get closed(){return this._closedPromise}cancel(t){return x(this,void 0,void 0,function*(){yield this.return(t)})}write(t){this._ensureOpen()&&(this.resolvers.length<=0?this._values.push(t):this.resolvers.shift().resolve({done:!1,value:t}))}abort(t){this._closedPromiseResolve&&(this.resolvers.length<=0?this._error={error:t}:this.resolvers.shift().reject({done:!0,value:t}))}close(){if(this._closedPromiseResolve){let{resolvers:t}=this;for(;t.length>0;)t.shift().resolve(vt);this._closedPromiseResolve(),this._closedPromiseResolve=void 0}}[Symbol.asyncIterator](){return this}toDOMStream(t){return Xt.toDOMStream(this._closedPromiseResolve||this._error?this:this._values,t)}toNodeStream(t){return Xt.toNodeStream(this._closedPromiseResolve||this._error?this:this._values,t)}throw(t){return x(this,void 0,void 0,function*(){return yield this.abort(t),vt})}return(t){return x(this,void 0,void 0,function*(){return yield this.close(),vt})}read(t){return x(this,void 0,void 0,function*(){return(yield this.next(t,"read")).value})}peek(t){return x(this,void 0,void 0,function*(){return(yield this.next(t,"peek")).value})}next(...t){return this._values.length>0?Promise.resolve({done:!1,value:this._values.shift()}):this._error?Promise.reject({done:!0,value:this._error.error}):this._closedPromiseResolve?new Promise((e,n)=>{this.resolvers.push({resolve:e,reject:n})}):Promise.resolve(vt)}_ensureOpen(){if(this._closedPromiseResolve)return!0;throw new Error("AsyncQueue is closed")}};var Sr=class extends po{write(t){if((t=P(t)).byteLength>0)return super.write(t)}toString(t=!1){return t?Fi(this.toUint8Array(!0)):this.toUint8Array(!1).then(Fi)}toUint8Array(t=!1){return t?Ee(this._values)[0]:(()=>x(this,void 0,void 0,function*(){var e,n;let i=[],s=0;try{for(var o=Ue(this),a;a=yield o.next(),!a.done;){let c=a.value;i.push(c),s+=c.byteLength}}catch(c){e={error:c}}finally{try{a&&!a.done&&(n=o.return)&&(yield n.call(o))}finally{if(e)throw e.error}}return Ee(i,s)[0]}))()}},Ir=class{constructor(t){t&&(this.source=new el(Xt.fromIterable(t)))}[Symbol.iterator](){return this}next(t){return this.source.next(t)}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}peek(t){return this.source.peek(t)}read(t){return this.source.read(t)}},be=class{constructor(t){t instanceof be?this.source=t.source:t instanceof Sr?this.source=new Yr(Xt.fromAsyncIterable(t)):Ds(t)?this.source=new Yr(Xt.fromNodeStream(t)):Ti(t)?this.source=new Yr(Xt.fromDOMStream(t)):Es(t)?this.source=new Yr(Xt.fromDOMStream(t.body)):Ge(t)?this.source=new Yr(Xt.fromIterable(t)):Ye(t)?this.source=new Yr(Xt.fromAsyncIterable(t)):je(t)&&(this.source=new Yr(Xt.fromAsyncIterable(t)))}[Symbol.asyncIterator](){return this}next(t){return this.source.next(t)}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}get closed(){return this.source.closed}cancel(t){return this.source.cancel(t)}peek(t){return this.source.peek(t)}read(t){return this.source.read(t)}},el=class{constructor(t){this.source=t}cancel(t){this.return(t)}peek(t){return this.next(t,"peek").value}read(t){return this.next(t,"read").value}next(t,e="read"){return this.source.next({cmd:e,size:t})}throw(t){return Object.create(this.source.throw&&this.source.throw(t)||vt)}return(t){return Object.create(this.source.return&&this.source.return(t)||vt)}},Yr=class{constructor(t){this.source=t,this._closedPromise=new Promise(e=>this._closedPromiseResolve=e)}cancel(t){return x(this,void 0,void 0,function*(){yield this.return(t)})}get closed(){return this._closedPromise}read(t){return x(this,void 0,void 0,function*(){return(yield this.next(t,"read")).value})}peek(t){return x(this,void 0,void 0,function*(){return(yield this.next(t,"peek")).value})}next(t,e="read"){return x(this,void 0,void 0,function*(){return yield this.source.next({cmd:e,size:t})})}throw(t){return x(this,void 0,void 0,function*(){let e=this.source.throw&&(yield this.source.throw(t))||vt;return this._closedPromiseResolve&&this._closedPromiseResolve(),this._closedPromiseResolve=void 0,Object.create(e)})}return(t){return x(this,void 0,void 0,function*(){let e=this.source.return&&(yield this.source.return(t))||vt;return this._closedPromiseResolve&&this._closedPromiseResolve(),this._closedPromiseResolve=void 0,Object.create(e)})}};var Pi=class extends Ir{constructor(t,e){super(),this.position=0,this.buffer=P(t),this.size=typeof e>"u"?this.buffer.byteLength:e}readInt32(t){let{buffer:e,byteOffset:n}=this.readAt(t,4);return new DataView(e,n).getInt32(0,!0)}seek(t){return this.position=Math.min(t,this.size),t<this.size}read(t){let{buffer:e,size:n,position:i}=this;return e&&i<n?(typeof t!="number"&&(t=Number.POSITIVE_INFINITY),this.position=Math.min(n,i+Math.min(n-i,t)),e.subarray(i,this.position)):null}readAt(t,e){let n=this.buffer,i=Math.min(this.size,t+e);return n?n.subarray(t,i):new Uint8Array(e)}close(){this.buffer&&(this.buffer=null)}throw(t){return this.close(),{done:!0,value:t}}return(t){return this.close(),{done:!0,value:t}}},hn=class extends be{constructor(t,e){super(),this.position=0,this._handle=t,typeof e=="number"?this.size=e:this._pending=(()=>x(this,void 0,void 0,function*(){this.size=(yield t.stat()).size,delete this._pending}))()}readInt32(t){return x(this,void 0,void 0,function*(){let{buffer:e,byteOffset:n}=yield this.readAt(t,4);return new DataView(e,n).getInt32(0,!0)})}seek(t){return x(this,void 0,void 0,function*(){return this._pending&&(yield this._pending),this.position=Math.min(t,this.size),t<this.size})}read(t){return x(this,void 0,void 0,function*(){this._pending&&(yield this._pending);let{_handle:e,size:n,position:i}=this;if(e&&i<n){typeof t!="number"&&(t=Number.POSITIVE_INFINITY);let s=i,o=0,a=0,c=Math.min(n,s+Math.min(n-s,t)),f=new Uint8Array(Math.max(0,(this.position=c)-s));for(;(s+=a)<c&&(o+=a)<f.byteLength;)({bytesRead:a}=yield e.read(f,o,f.byteLength-o,s));return f}return null})}readAt(t,e){return x(this,void 0,void 0,function*(){this._pending&&(yield this._pending);let{_handle:n,size:i}=this;if(n&&t+e<i){let s=Math.min(i,t+e),o=new Uint8Array(s-t);return(yield n.read(o,0,e,t)).buffer}return new Uint8Array(e)})}close(){return x(this,void 0,void 0,function*(){let t=this._handle;this._handle=null,t&&(yield t.close())})}throw(t){return x(this,void 0,void 0,function*(){return yield this.close(),{done:!0,value:t}})}return(t){return x(this,void 0,void 0,function*(){return yield this.close(),{done:!0,value:t}})}};var nl={};Sn(nl,{BaseInt64:()=>Hi,Int128:()=>ge,Int64:()=>$t,Uint64:()=>ut});function ni(r){return r<0&&(r=4294967295+r+1),`0x${r.toString(16)}`}var ii=8,rl=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8],Hi=class{constructor(t){this.buffer=t}high(){return this.buffer[1]}low(){return this.buffer[0]}_times(t){let e=new Uint32Array([this.buffer[1]>>>16,this.buffer[1]&65535,this.buffer[0]>>>16,this.buffer[0]&65535]),n=new Uint32Array([t.buffer[1]>>>16,t.buffer[1]&65535,t.buffer[0]>>>16,t.buffer[0]&65535]),i=e[3]*n[3];this.buffer[0]=i&65535;let s=i>>>16;return i=e[2]*n[3],s+=i,i=e[3]*n[2]>>>0,s+=i,this.buffer[0]+=s<<16,this.buffer[1]=s>>>0<i?65536:0,this.buffer[1]+=s>>>16,this.buffer[1]+=e[1]*n[3]+e[2]*n[2]+e[3]*n[1],this.buffer[1]+=e[0]*n[3]+e[1]*n[2]+e[2]*n[1]+e[3]*n[0]<<16,this}_plus(t){let e=this.buffer[0]+t.buffer[0]>>>0;this.buffer[1]+=t.buffer[1],e<this.buffer[0]>>>0&&++this.buffer[1],this.buffer[0]=e}lessThan(t){return this.buffer[1]<t.buffer[1]||this.buffer[1]===t.buffer[1]&&this.buffer[0]<t.buffer[0]}equals(t){return this.buffer[1]===t.buffer[1]&&this.buffer[0]==t.buffer[0]}greaterThan(t){return t.lessThan(this)}hex(){return`${ni(this.buffer[1])} ${ni(this.buffer[0])}`}},ut=class extends Hi{times(t){return this._times(t),this}plus(t){return this._plus(t),this}static from(t,e=new Uint32Array(2)){return ut.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(2)){return ut.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(2)){let n=t.length,i=new ut(e);for(let s=0;s<n;){let o=ii<n-s?ii:n-s,a=new ut(new Uint32Array([Number.parseInt(t.slice(s,s+o),10),0])),c=new ut(new Uint32Array([rl[o],0]));i.times(c),i.plus(a),s+=o}return i}static convertArray(t){let e=new Uint32Array(t.length*2);for(let n=-1,i=t.length;++n<i;)ut.from(t[n],new Uint32Array(e.buffer,e.byteOffset+2*n*4,2));return e}static multiply(t,e){return new ut(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new ut(new Uint32Array(t.buffer)).plus(e)}},$t=class extends Hi{negate(){return this.buffer[0]=~this.buffer[0]+1,this.buffer[1]=~this.buffer[1],this.buffer[0]==0&&++this.buffer[1],this}times(t){return this._times(t),this}plus(t){return this._plus(t),this}lessThan(t){let e=this.buffer[1]<<0,n=t.buffer[1]<<0;return e<n||e===n&&this.buffer[0]<t.buffer[0]}static from(t,e=new Uint32Array(2)){return $t.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(2)){return $t.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(2)){let n=t.startsWith("-"),i=t.length,s=new $t(e);for(let o=n?1:0;o<i;){let a=ii<i-o?ii:i-o,c=new $t(new Uint32Array([Number.parseInt(t.slice(o,o+a),10),0])),f=new $t(new Uint32Array([rl[a],0]));s.times(f),s.plus(c),o+=a}return n?s.negate():s}static convertArray(t){let e=new Uint32Array(t.length*2);for(let n=-1,i=t.length;++n<i;)$t.from(t[n],new Uint32Array(e.buffer,e.byteOffset+2*n*4,2));return e}static multiply(t,e){return new $t(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new $t(new Uint32Array(t.buffer)).plus(e)}},ge=class{constructor(t){this.buffer=t}high(){return new $t(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset+8,2))}low(){return new $t(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset,2))}negate(){return this.buffer[0]=~this.buffer[0]+1,this.buffer[1]=~this.buffer[1],this.buffer[2]=~this.buffer[2],this.buffer[3]=~this.buffer[3],this.buffer[0]==0&&++this.buffer[1],this.buffer[1]==0&&++this.buffer[2],this.buffer[2]==0&&++this.buffer[3],this}times(t){let e=new ut(new Uint32Array([this.buffer[3],0])),n=new ut(new Uint32Array([this.buffer[2],0])),i=new ut(new Uint32Array([this.buffer[1],0])),s=new ut(new Uint32Array([this.buffer[0],0])),o=new ut(new Uint32Array([t.buffer[3],0])),a=new ut(new Uint32Array([t.buffer[2],0])),c=new ut(new Uint32Array([t.buffer[1],0])),f=new ut(new Uint32Array([t.buffer[0],0])),p=ut.multiply(s,f);this.buffer[0]=p.low();let y=new ut(new Uint32Array([p.high(),0]));return p=ut.multiply(i,f),y.plus(p),p=ut.multiply(s,c),y.plus(p),this.buffer[1]=y.low(),this.buffer[3]=y.lessThan(p)?1:0,this.buffer[2]=y.high(),new ut(new Uint32Array(this.buffer.buffer,this.buffer.byteOffset+8,2)).plus(ut.multiply(n,f)).plus(ut.multiply(i,c)).plus(ut.multiply(s,a)),this.buffer[3]+=ut.multiply(e,f).plus(ut.multiply(n,c)).plus(ut.multiply(i,a)).plus(ut.multiply(s,o)).low(),this}plus(t){let e=new Uint32Array(4);return e[3]=this.buffer[3]+t.buffer[3]>>>0,e[2]=this.buffer[2]+t.buffer[2]>>>0,e[1]=this.buffer[1]+t.buffer[1]>>>0,e[0]=this.buffer[0]+t.buffer[0]>>>0,e[0]<this.buffer[0]>>>0&&++e[1],e[1]<this.buffer[1]>>>0&&++e[2],e[2]<this.buffer[2]>>>0&&++e[3],this.buffer[3]=e[3],this.buffer[2]=e[2],this.buffer[1]=e[1],this.buffer[0]=e[0],this}hex(){return`${ni(this.buffer[3])} ${ni(this.buffer[2])} ${ni(this.buffer[1])} ${ni(this.buffer[0])}`}static multiply(t,e){return new ge(new Uint32Array(t.buffer)).times(e)}static add(t,e){return new ge(new Uint32Array(t.buffer)).plus(e)}static from(t,e=new Uint32Array(4)){return ge.fromString(typeof t=="string"?t:t.toString(),e)}static fromNumber(t,e=new Uint32Array(4)){return ge.fromString(t.toString(),e)}static fromString(t,e=new Uint32Array(4)){let n=t.startsWith("-"),i=t.length,s=new ge(e);for(let o=n?1:0;o<i;){let a=ii<i-o?ii:i-o,c=new ge(new Uint32Array([Number.parseInt(t.slice(o,o+a),10),0,0,0])),f=new ge(new Uint32Array([rl[a],0,0,0]));s.times(f),s.plus(c),o+=a}return n?s.negate():s}static convertArray(t){let e=new Uint32Array(t.length*4);for(let n=-1,i=t.length;++n<i;)ge.from(t[n],new Uint32Array(e.buffer,e.byteOffset+4*4*n,4));return e}};var Vi=class extends R{constructor(t,e,n,i){super(),this.nodesIndex=-1,this.buffersIndex=-1,this.bytes=t,this.nodes=e,this.buffers=n,this.dictionaries=i}visit(t){return super.visit(t instanceof G?t.type:t)}visitNull(t,{length:e}=this.nextFieldNode()){return z({type:t,length:e})}visitBool(t,{length:e,nullCount:n}=this.nextFieldNode()){return z({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitInt(t,{length:e,nullCount:n}=this.nextFieldNode()){return z({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitFloat(t,{length:e,nullCount:n}=this.nextFieldNode()){return z({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitUtf8(t,{length:e,nullCount:n}=this.nextFieldNode()){return z({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),data:this.readData(t)})}visitBinary(t,{length:e,nullCount:n}=this.nextFieldNode()){return z({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),data:this.readData(t)})}visitFixedSizeBinary(t,{length:e,nullCount:n}=this.nextFieldNode()){return z({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitDate(t,{length:e,nullCount:n}=this.nextFieldNode()){return z({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitTimestamp(t,{length:e,nullCount:n}=this.nextFieldNode()){return z({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitTime(t,{length:e,nullCount:n}=this.nextFieldNode()){return z({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitDecimal(t,{length:e,nullCount:n}=this.nextFieldNode()){return z({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitList(t,{length:e,nullCount:n}=this.nextFieldNode()){return z({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),child:this.visit(t.children[0])})}visitStruct(t,{length:e,nullCount:n}=this.nextFieldNode()){return z({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),children:this.visitMany(t.children)})}visitUnion(t){return t.mode===Et.Sparse?this.visitSparseUnion(t):this.visitDenseUnion(t)}visitDenseUnion(t,{length:e,nullCount:n}=this.nextFieldNode()){return z({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),typeIds:this.readTypeIds(t),valueOffsets:this.readOffsets(t),children:this.visitMany(t.children)})}visitSparseUnion(t,{length:e,nullCount:n}=this.nextFieldNode()){return z({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),typeIds:this.readTypeIds(t),children:this.visitMany(t.children)})}visitDictionary(t,{length:e,nullCount:n}=this.nextFieldNode()){return z({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t.indices),dictionary:this.readDictionary(t)})}visitInterval(t,{length:e,nullCount:n}=this.nextFieldNode()){return z({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),data:this.readData(t)})}visitFixedSizeList(t,{length:e,nullCount:n}=this.nextFieldNode()){return z({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),child:this.visit(t.children[0])})}visitMap(t,{length:e,nullCount:n}=this.nextFieldNode()){return z({type:t,length:e,nullCount:n,nullBitmap:this.readNullBitmap(t,n),valueOffsets:this.readOffsets(t),child:this.visit(t.children[0])})}nextFieldNode(){return this.nodes[++this.nodesIndex]}nextBufferRange(){return this.buffers[++this.buffersIndex]}readNullBitmap(t,e,n=this.nextBufferRange()){return e>0&&this.readData(t,n)||new Uint8Array(0)}readOffsets(t,e){return this.readData(t,e)}readTypeIds(t,e){return this.readData(t,e)}readData(t,{length:e,offset:n}=this.nextBufferRange()){return this.bytes.subarray(n,n+e)}readDictionary(t){return this.dictionaries.get(t.id)}},_o=class extends Vi{constructor(t,e,n,i){super(new Uint8Array(0),e,n,i),this.sources=t}readNullBitmap(t,e,{offset:n}=this.nextBufferRange()){return e<=0?new Uint8Array(0):An(this.sources[n])}readOffsets(t,{offset:e}=this.nextBufferRange()){return Q(Uint8Array,Q(Int32Array,this.sources[e]))}readTypeIds(t,{offset:e}=this.nextBufferRange()){return Q(Uint8Array,Q(t.ArrayType,this.sources[e]))}readData(t,{offset:e}=this.nextBufferRange()){let{sources:n}=this;return D.isTimestamp(t)?Q(Uint8Array,$t.convertArray(n[e])):(D.isInt(t)||D.isTime(t))&&t.bitWidth===64?Q(Uint8Array,$t.convertArray(n[e])):D.isDate(t)&&t.unit===Kt.MILLISECOND?Q(Uint8Array,$t.convertArray(n[e])):D.isDecimal(t)?Q(Uint8Array,ge.convertArray(n[e])):D.isBinary(t)||D.isFixedSizeBinary(t)?bm(n[e]):D.isBool(t)?An(n[e]):D.isUtf8(t)?rn(n[e].join("")):Q(Uint8Array,Q(t.ArrayType,n[e].map(i=>+i)))}};function bm(r){let t=r.join(""),e=new Uint8Array(t.length/2);for(let n=0;n<t.length;n+=2)e[n>>1]=Number.parseInt(t.slice(n,n+2),16);return e}var si=class extends pr{constructor(t){super(t),this._values=new cn(new Uint8Array(0))}get byteLength(){let t=this._pendingLength+this.length*4;return this._offsets&&(t+=this._offsets.byteLength),this._values&&(t+=this._values.byteLength),this._nulls&&(t+=this._nulls.byteLength),t}setValue(t,e){return super.setValue(t,P(e))}_flushPending(t,e){let n=this._offsets,i=this._values.reserve(e).buffer,s=0;for(let[o,a]of t)if(a===void 0)n.set(o,0);else{let c=a.length;i.set(a,s),n.set(o,c),s+=c}}};var mo=class extends Ft{constructor(t){super(t),this._values=new ti}setValue(t,e){this._values.set(t,+e)}};var On=class extends zt{};On.prototype._setValue=Na;var zi=class extends On{};zi.prototype._setValue=zs;var Wi=class extends On{};Wi.prototype._setValue=Ws;var Yi=class extends zt{};Yi.prototype._setValue=Ha;var yo=class extends Ft{constructor({type:t,nullValues:e,dictionaryHashFunction:n}){super({type:new xe(t.dictionary,t.indices,t.id,t.isOrdered)}),this._nulls=null,this._dictionaryOffset=0,this._keysToIndices=Object.create(null),this.indices=Mn({type:this.type.indices,nullValues:e}),this.dictionary=Mn({type:this.type.dictionary,nullValues:null}),typeof n=="function"&&(this.valueToKey=n)}get values(){return this.indices.values}get nullCount(){return this.indices.nullCount}get nullBitmap(){return this.indices.nullBitmap}get byteLength(){return this.indices.byteLength+this.dictionary.byteLength}get reservedLength(){return this.indices.reservedLength+this.dictionary.reservedLength}get reservedByteLength(){return this.indices.reservedByteLength+this.dictionary.reservedByteLength}isValid(t){return this.indices.isValid(t)}setValid(t,e){let n=this.indices;return e=n.setValid(t,e),this.length=n.length,e}setValue(t,e){let n=this._keysToIndices,i=this.valueToKey(e),s=n[i];return s===void 0&&(n[i]=s=this._dictionaryOffset+this.dictionary.append(e).length-1),this.indices.setValue(t,s)}flush(){let t=this.type,e=this._dictionary,n=this.dictionary.toVector(),i=this.indices.flush().clone(t);return i.dictionary=e?e.concat(n):n,this.finished||(this._dictionaryOffset+=n.length),this._dictionary=i.dictionary,this.clear(),i}finish(){return this.indices.finish(),this.dictionary.finish(),this._dictionaryOffset=0,this._keysToIndices=Object.create(null),super.finish()}clear(){return this.indices.clear(),this.dictionary.clear(),super.clear()}valueToKey(t){return typeof t=="string"?t:`${t}`}};var Gi=class extends zt{};Gi.prototype._setValue=ka;var bo=class extends Ft{setValue(t,e){let[n]=this.children,i=t*this.stride;for(let s=-1,o=e.length;++s<o;)n.set(i+s,e[s])}addChild(t,e="0"){if(this.numChildren>0)throw new Error("FixedSizeListBuilder can only have one child.");let n=this.children.push(t);return this.type=new Ze(this.type.listSize,new G(e,t.type,!0)),n}};var Rn=class extends zt{setValue(t,e){this._values.set(t,e)}},go=class extends Rn{setValue(t,e){super.setValue(t,xi(e))}},wo=class extends Rn{},vo=class extends Rn{};var Cn=class extends zt{};Cn.prototype._setValue=Va;var $i=class extends Cn{};$i.prototype._setValue=Zs;var Xi=class extends Cn{};Xi.prototype._setValue=to;var ze=class extends zt{setValue(t,e){this._values.set(t,e)}},So=class extends ze{},Io=class extends ze{},Fo=class extends ze{},To=class extends ze{},Ao=class extends ze{},Eo=class extends ze{},xo=class extends ze{},Do=class extends ze{};var Bo=class extends pr{constructor(t){super(t),this._offsets=new ei}addChild(t,e="0"){if(this.numChildren>0)throw new Error("ListBuilder can only have one child.");return this.children[this.numChildren]=t,this.type=new qe(new G(e,t.type,!0)),this.numChildren-1}_flushPending(t){let e=this._offsets,[n]=this.children;for(let[i,s]of t)if(typeof s>"u")e.set(i,0);else{let o=s.length,a=e.set(i,o).buffer[i];for(let c=-1;++c<o;)n.set(a+c,s[c])}}};var Oo=class extends pr{set(t,e){return super.set(t,e)}setValue(t,e){let n=e instanceof Map?e:new Map(Object.entries(e)),i=this._pending||(this._pending=new Map),s=i.get(t);s&&(this._pendingLength-=s.size),this._pendingLength+=n.size,i.set(t,n)}addChild(t,e=`${this.numChildren}`){if(this.numChildren>0)throw new Error("ListBuilder can only have one child.");return this.children[this.numChildren]=t,this.type=new tr(new G(e,t.type,!0),this.type.keysSorted),this.numChildren-1}_flushPending(t){let e=this._offsets,[n]=this.children;for(let[i,s]of t)if(s===void 0)e.set(i,0);else{let{[i]:o,[i+1]:a}=e.set(i,s.size).buffer;for(let c of s.entries())if(n.set(o,c),++o>=a)break}}};var Mo=class extends Ft{setValue(t,e){}setValid(t,e){return this.length=Math.max(t+1,this.length),e}};var Ro=class extends Ft{setValue(t,e){let{children:n,type:i}=this;switch(Array.isArray(e)||e.constructor){case!0:return i.children.forEach((s,o)=>n[o].set(t,e[o]));case Map:return i.children.forEach((s,o)=>n[o].set(t,e.get(s.name)));default:return i.children.forEach((s,o)=>n[o].set(t,e[s.name]))}}setValid(t,e){return super.setValid(t,e)||this.children.forEach(n=>n.setValid(t,e)),e}addChild(t,e=`${this.numChildren}`){let n=this.children.push(t);return this.type=new gt([...this.type.children,new G(e,t.type,!0)]),n}};var Gr=class extends zt{};Gr.prototype._setValue=ja;var Ki=class extends Gr{};Ki.prototype._setValue=Ys;var Ji=class extends Gr{};Ji.prototype._setValue=Gs;var qi=class extends Gr{};qi.prototype._setValue=$s;var Qi=class extends Gr{};Qi.prototype._setValue=Xs;var $r=class extends zt{};$r.prototype._setValue=Pa;var Zi=class extends $r{};Zi.prototype._setValue=Ks;var ts=class extends $r{};ts.prototype._setValue=Js;var es=class extends $r{};es.prototype._setValue=qs;var rs=class extends $r{};rs.prototype._setValue=Qs;var oi=class extends Ft{constructor(t){super(t),this._typeIds=new Vr(new Int8Array(0),1),typeof t.valueToChildTypeId=="function"&&(this._valueToChildTypeId=t.valueToChildTypeId)}get typeIdToChildIndex(){return this.type.typeIdToChildIndex}append(t,e){return this.set(this.length,t,e)}set(t,e,n){return n===void 0&&(n=this._valueToChildTypeId(this,e,t)),this.setValid(t,this.isValid(e))&&this.setValue(t,e,n),this}setValue(t,e,n){this._typeIds.set(t,n);let i=this.type.typeIdToChildIndex[n],s=this.children[i];s==null||s.set(t,e)}addChild(t,e=`${this.children.length}`){let n=this.children.push(t),{type:{children:i,mode:s,typeIds:o}}=this,a=[...i,new G(e,t.type)];return this.type=new Qe(s,[...o,n],a),n}_valueToChildTypeId(t,e,n){throw new Error("Cannot map UnionBuilder value to child typeId. Pass the `childTypeId` as the second argument to unionBuilder.append(), or supply a `valueToChildTypeId` function as part of the UnionBuilder constructor options.")}},Co=class extends oi{},Lo=class extends oi{constructor(t){super(t),this._offsets=new Vr(new Int32Array(0))}setValue(t,e,n){let i=this._typeIds.set(t,n).buffer[t],s=this.getChildAt(this.type.typeIdToChildIndex[i]),o=this._offsets.set(t,s.length).buffer[t];s==null||s.set(o,e)}};var ns=class extends pr{constructor(t){super(t),this._values=new cn(new Uint8Array(0))}get byteLength(){let t=this._pendingLength+this.length*4;return this._offsets&&(t+=this._offsets.byteLength),this._values&&(t+=this._values.byteLength),this._nulls&&(t+=this._nulls.byteLength),t}setValue(t,e){return super.setValue(t,rn(e))}_flushPending(t,e){}};ns.prototype._flushPending=si.prototype._flushPending;var il=class extends R{visitNull(){return Mo}visitBool(){return mo}visitInt(){return ze}visitInt8(){return So}visitInt16(){return Io}visitInt32(){return Fo}visitInt64(){return To}visitUint8(){return Ao}visitUint16(){return Eo}visitUint32(){return xo}visitUint64(){return Do}visitFloat(){return Rn}visitFloat16(){return go}visitFloat32(){return wo}visitFloat64(){return vo}visitUtf8(){return ns}visitBinary(){return si}visitFixedSizeBinary(){return Gi}visitDate(){return On}visitDateDay(){return zi}visitDateMillisecond(){return Wi}visitTimestamp(){return Gr}visitTimestampSecond(){return Ki}visitTimestampMillisecond(){return Ji}visitTimestampMicrosecond(){return qi}visitTimestampNanosecond(){return Qi}visitTime(){return $r}visitTimeSecond(){return Zi}visitTimeMillisecond(){return ts}visitTimeMicrosecond(){return es}visitTimeNanosecond(){return rs}visitDecimal(){return Yi}visitList(){return Bo}visitStruct(){return Ro}visitUnion(){return oi}visitDenseUnion(){return Lo}visitSparseUnion(){return Co}visitDictionary(){return yo}visitInterval(){return Cn}visitIntervalDayTime(){return $i}visitIntervalYearMonth(){return Xi}visitFixedSizeList(){return bo}visitMap(){return Oo}},zu=new il;var j=class extends R{compareSchemas(t,e){return t===e||e instanceof t.constructor&&this.compareManyFields(t.fields,e.fields)}compareManyFields(t,e){return t===e||Array.isArray(t)&&Array.isArray(e)&&t.length===e.length&&t.every((n,i)=>this.compareFields(n,e[i]))}compareFields(t,e){return t===e||e instanceof t.constructor&&t.name===e.name&&t.nullable===e.nullable&&this.visit(t.type,e.type)}};function we(r,t){return t instanceof r.constructor}function is(r,t){return r===t||we(r,t)}function Xr(r,t){return r===t||we(r,t)&&r.bitWidth===t.bitWidth&&r.isSigned===t.isSigned}function Uo(r,t){return r===t||we(r,t)&&r.precision===t.precision}function gm(r,t){return r===t||we(r,t)&&r.byteWidth===t.byteWidth}function sl(r,t){return r===t||we(r,t)&&r.unit===t.unit}function ss(r,t){return r===t||we(r,t)&&r.unit===t.unit&&r.timezone===t.timezone}function os(r,t){return r===t||we(r,t)&&r.unit===t.unit&&r.bitWidth===t.bitWidth}function wm(r,t){return r===t||we(r,t)&&r.children.length===t.children.length&&Fr.compareManyFields(r.children,t.children)}function vm(r,t){return r===t||we(r,t)&&r.children.length===t.children.length&&Fr.compareManyFields(r.children,t.children)}function ol(r,t){return r===t||we(r,t)&&r.mode===t.mode&&r.typeIds.every((e,n)=>e===t.typeIds[n])&&Fr.compareManyFields(r.children,t.children)}function Sm(r,t){return r===t||we(r,t)&&r.id===t.id&&r.isOrdered===t.isOrdered&&Fr.visit(r.indices,t.indices)&&Fr.visit(r.dictionary,t.dictionary)}function al(r,t){return r===t||we(r,t)&&r.unit===t.unit}function Im(r,t){return r===t||we(r,t)&&r.listSize===t.listSize&&r.children.length===t.children.length&&Fr.compareManyFields(r.children,t.children)}function Fm(r,t){return r===t||we(r,t)&&r.keysSorted===t.keysSorted&&r.children.length===t.children.length&&Fr.compareManyFields(r.children,t.children)}j.prototype.visitNull=is;j.prototype.visitBool=is;j.prototype.visitInt=Xr;j.prototype.visitInt8=Xr;j.prototype.visitInt16=Xr;j.prototype.visitInt32=Xr;j.prototype.visitInt64=Xr;j.prototype.visitUint8=Xr;j.prototype.visitUint16=Xr;j.prototype.visitUint32=Xr;j.prototype.visitUint64=Xr;j.prototype.visitFloat=Uo;j.prototype.visitFloat16=Uo;j.prototype.visitFloat32=Uo;j.prototype.visitFloat64=Uo;j.prototype.visitUtf8=is;j.prototype.visitBinary=is;j.prototype.visitFixedSizeBinary=gm;j.prototype.visitDate=sl;j.prototype.visitDateDay=sl;j.prototype.visitDateMillisecond=sl;j.prototype.visitTimestamp=ss;j.prototype.visitTimestampSecond=ss;j.prototype.visitTimestampMillisecond=ss;j.prototype.visitTimestampMicrosecond=ss;j.prototype.visitTimestampNanosecond=ss;j.prototype.visitTime=os;j.prototype.visitTimeSecond=os;j.prototype.visitTimeMillisecond=os;j.prototype.visitTimeMicrosecond=os;j.prototype.visitTimeNanosecond=os;j.prototype.visitDecimal=is;j.prototype.visitList=wm;j.prototype.visitStruct=vm;j.prototype.visitUnion=ol;j.prototype.visitDenseUnion=ol;j.prototype.visitSparseUnion=ol;j.prototype.visitDictionary=Sm;j.prototype.visitInterval=al;j.prototype.visitIntervalDayTime=al;j.prototype.visitIntervalYearMonth=al;j.prototype.visitFixedSizeList=Im;j.prototype.visitMap=Fm;var Fr=new j;function Ln(r,t){return Fr.compareSchemas(r,t)}function Wu(r,t){return Fr.compareFields(r,t)}function Yu(r,t){return Fr.visit(r,t)}function Mn(r){let t=r.type,e=new(zu.getVisitFn(t)())(r);if(t.children&&t.children.length>0){let n=r.children||[],i={nullValues:r.nullValues},s=Array.isArray(n)?(o,a)=>n[a]||i:({name:o})=>n[o]||i;for(let[o,a]of t.children.entries()){let{type:c}=a,f=s(a,o);e.children.push(Mn(Object.assign(Object.assign({},f),{type:c})))}}return e}function ko(r,t){return Tm(r,t.map(e=>e.data.concat()))}function Tm(r,t){let e=[...r.fields],n=[],i={numBatches:t.reduce((y,w)=>Math.max(y,w.length),0)},s=0,o=0,a=-1,c=t.length,f,p=[];for(;i.numBatches-- >0;){for(o=Number.POSITIVE_INFINITY,a=-1;++a<c;)p[a]=f=t[a].shift(),o=Math.min(o,f?f.length:o);Number.isFinite(o)&&(p=Am(e,o,p,t,i),o>0&&(n[s++]=z({type:new gt(e),length:o,nullCount:0,children:p.slice()})))}return[r=r.assign(e),n.map(y=>new mt(r,y))]}function Am(r,t,e,n,i){var s;let o=(t+63&-64)>>3;for(let a=-1,c=n.length;++a<c;){let f=e[a],p=f==null?void 0:f.length;if(p>=t)p===t?e[a]=f:(e[a]=f.slice(0,t),i.numBatches=Math.max(i.numBatches,n[a].unshift(f.slice(t,p-t))));else{let y=r[a];r[a]=y.clone({nullable:!0}),e[a]=(s=f==null?void 0:f._changeLengthAndBackfillNullBitmap(t))!==null&&s!==void 0?s:z({type:y.type,length:t,nullCount:t,nullBitmap:new Uint8Array(o)})}}return e}var Gu,Bt=class{constructor(...t){var e,n;if(t.length===0)return this.batches=[],this.schema=new rt([]),this._offsets=[0],this;let i,s;t[0]instanceof rt&&(i=t.shift()),t[t.length-1]instanceof Uint32Array&&(s=t.pop());let o=c=>{if(c){if(c instanceof mt)return[c];if(c instanceof Bt)return c.batches;if(c instanceof ct){if(c.type instanceof gt)return[new mt(new rt(c.type.children),c)]}else{if(Array.isArray(c))return c.flatMap(f=>o(f));if(typeof c[Symbol.iterator]=="function")return[...c].flatMap(f=>o(f));if(typeof c=="object"){let f=Object.keys(c),p=f.map(S=>new V([c[S]])),y=new rt(f.map((S,it)=>new G(String(S),p[it].type))),[,w]=ko(y,p);return w.length===0?[new mt(c)]:w}}}return[]},a=t.flatMap(c=>o(c));if(i=(n=i!=null?i:(e=a[0])===null||e===void 0?void 0:e.schema)!==null&&n!==void 0?n:new rt([]),!(i instanceof rt))throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");for(let c of a){if(!(c instanceof mt))throw new TypeError("Table constructor expects a [Schema, RecordBatch[]] pair.");if(!Ln(i,c.schema))throw new TypeError("Table and inner RecordBatch schemas must be equivalent.")}this.schema=i,this.batches=a,this._offsets=s!=null?s:so(this.data)}get data(){return this.batches.map(({data:t})=>t)}get numCols(){return this.schema.fields.length}get numRows(){return this.data.reduce((t,e)=>t+e.length,0)}get nullCount(){return this._nullCount===-1&&(this._nullCount=io(this.data)),this._nullCount}isValid(t){return!1}get(t){return null}set(t,e){}indexOf(t,e){return-1}getByteLength(t){return 0}[Symbol.iterator](){return this.batches.length>0?Qn.visit(new V(this.data)):new Array(0)[Symbol.iterator]()}toArray(){return[...this]}toString(){return`[
  ${this.toArray().join(`,
  `)}
]`}concat(...t){let e=this.schema,n=this.data.concat(t.flatMap(({data:i})=>i));return new Bt(e,n.map(i=>new mt(e,i)))}slice(t,e){let n=this.schema;[t,e]=Di({length:this.numRows},t,e);let i=oo(this.data,this._offsets,t,e);return new Bt(n,i.map(s=>new mt(n,s)))}getChild(t){return this.getChildAt(this.schema.fields.findIndex(e=>e.name===t))}getChildAt(t){if(t>-1&&t<this.schema.fields.length){let e=this.data.map(n=>n.children[t]);if(e.length===0){let{type:n}=this.schema.fields[t],i=z({type:n,length:0,nullCount:0});e.push(i._changeLengthAndBackfillNullBitmap(this.numRows))}return new V(e)}return null}setChild(t,e){var n;return this.setChildAt((n=this.schema.fields)===null||n===void 0?void 0:n.findIndex(i=>i.name===t),e)}setChildAt(t,e){let n=this.schema,i=[...this.batches];if(t>-1&&t<this.numCols){e||(e=new V([z({type:new le,length:this.numRows})]));let s=n.fields.slice(),o=s[t].clone({type:e.type}),a=this.schema.fields.map((c,f)=>this.getChildAt(f));[s[t],a[t]]=[o,e],[n,i]=ko(n,a)}return new Bt(n,i)}select(t){let e=this.schema.fields.reduce((n,i,s)=>n.set(i.name,s),new Map);return this.selectAt(t.map(n=>e.get(n)).filter(n=>n>-1))}selectAt(t){let e=this.schema.selectAt(t),n=this.batches.map(i=>i.selectAt(t));return new Bt(e,n)}assign(t){let e=this.schema.fields,[n,i]=t.schema.fields.reduce((a,c,f)=>{let[p,y]=a,w=e.findIndex(S=>S.name===c.name);return~w?y[w]=f:p.push(f),a},[[],[]]),s=this.schema.assign(t.schema),o=[...e.map((a,c)=>[c,i[c]]).map(([a,c])=>c===void 0?this.getChildAt(a):t.getChildAt(c)),...n.map(a=>t.getChildAt(a))].filter(Boolean);return new Bt(...ko(s,o))}};Gu=Symbol.toStringTag;Bt[Gu]=(r=>(r.schema=null,r.batches=[],r._offsets=new Uint32Array([0]),r._nullCount=-1,r[Symbol.isConcatSpreadable]=!0,r.isValid=ln(Mi),r.get=ln(Lt.getVisitFn(h.Struct)),r.set=ao(Jt.getVisitFn(h.Struct)),r.indexOf=lo(xn.getVisitFn(h.Struct)),r.getByteLength=ln(Be.getVisitFn(h.Struct)),"Table"))(Bt.prototype);var Xu,mt=class{constructor(...t){switch(t.length){case 2:{if([this.schema]=t,!(this.schema instanceof rt))throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");if([,this.data=z({nullCount:0,type:new gt(this.schema.fields),children:this.schema.fields.map(e=>z({type:e.type,nullCount:0}))})]=t,!(this.data instanceof ct))throw new TypeError("RecordBatch constructor expects a [Schema, Data] pair.");[this.schema,this.data]=$u(this.schema,this.data.children);break}case 1:{let[e]=t,{fields:n,children:i,length:s}=Object.keys(e).reduce((c,f,p)=>(c.children[p]=e[f],c.length=Math.max(c.length,e[f].length),c.fields[p]=G.new({name:f,type:e[f].type,nullable:!0}),c),{length:0,fields:new Array,children:new Array}),o=new rt(n),a=z({type:new gt(n),length:s,children:i,nullCount:0});[this.schema,this.data]=$u(o,a.children,s);break}default:throw new TypeError("RecordBatch constructor expects an Object mapping names to child Data, or a [Schema, Data] pair.")}}get dictionaries(){return this._dictionaries||(this._dictionaries=Ku(this.schema.fields,this.data.children))}get numCols(){return this.schema.fields.length}get numRows(){return this.data.length}get nullCount(){return this.data.nullCount}isValid(t){return this.data.getValid(t)}get(t){return Lt.visit(this.data,t)}set(t,e){return Jt.visit(this.data,t,e)}indexOf(t,e){return xn.visit(this.data,t,e)}getByteLength(t){return Be.visit(this.data,t)}[Symbol.iterator](){return Qn.visit(new V([this.data]))}toArray(){return[...this]}concat(...t){return new Bt(this.schema,[this,...t])}slice(t,e){let[n]=new V([this.data]).slice(t,e).data;return new mt(this.schema,n)}getChild(t){var e;return this.getChildAt((e=this.schema.fields)===null||e===void 0?void 0:e.findIndex(n=>n.name===t))}getChildAt(t){return t>-1&&t<this.schema.fields.length?new V([this.data.children[t]]):null}setChild(t,e){var n;return this.setChildAt((n=this.schema.fields)===null||n===void 0?void 0:n.findIndex(i=>i.name===t),e)}setChildAt(t,e){let n=this.schema,i=this.data;if(t>-1&&t<this.numCols){e||(e=new V([z({type:new le,length:this.numRows})]));let s=n.fields.slice(),o=i.children.slice(),a=s[t].clone({type:e.type});[s[t],o[t]]=[a,e.data[0]],n=new rt(s,new Map(this.schema.metadata)),i=z({type:new gt(s),children:o})}return new mt(n,i)}select(t){let e=this.schema.select(t),n=new gt(e.fields),i=[];for(let s of t){let o=this.schema.fields.findIndex(a=>a.name===s);~o&&(i[o]=this.data.children[o])}return new mt(e,z({type:n,length:this.numRows,children:i}))}selectAt(t){let e=this.schema.selectAt(t),n=t.map(s=>this.data.children[s]).filter(Boolean),i=z({type:new gt(e.fields),length:this.numRows,children:n});return new mt(e,i)}};Xu=Symbol.toStringTag;mt[Xu]=(r=>(r._nullCount=-1,r[Symbol.isConcatSpreadable]=!0,"RecordBatch"))(mt.prototype);function $u(r,t,e=t.reduce((n,i)=>Math.max(n,i.length),0)){var n;let i=[...r.fields],s=[...t],o=(e+63&-64)>>3;for(let[a,c]of r.fields.entries()){let f=t[a];(!f||f.length!==e)&&(i[a]=c.clone({nullable:!0}),s[a]=(n=f==null?void 0:f._changeLengthAndBackfillNullBitmap(e))!==null&&n!==void 0?n:z({type:c.type,length:e,nullCount:e,nullBitmap:new Uint8Array(o)}))}return[r.assign(i),z({type:new gt(i),length:e,children:s})]}function Ku(r,t,e=new Map){for(let n=-1,i=r.length;++n<i;){let o=r[n].type,a=t[n];if(D.isDictionary(o)){if(!e.has(o.id))a.dictionary&&e.set(o.id,a.dictionary);else if(e.get(o.id)!==a.dictionary)throw new Error("Cannot create Schema containing two different dictionaries with the same Id")}o.children&&o.children.length>0&&Ku(o.children,a.children,e)}return e}var Un=class extends mt{constructor(t){let e=t.fields.map(i=>z({type:i.type})),n=z({type:new gt(t.fields),nullCount:0,children:e});super(t,n)}};var as;(function(r){r[r.BUFFER=0]="BUFFER"})(as||(as={}));var ls;(function(r){r[r.LZ4_FRAME=0]="LZ4_FRAME",r[r.ZSTD=1]="ZSTD"})(ls||(ls={}));var ir=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsBodyCompression(t,e){return(e||new ir).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsBodyCompression(t,e){return t.setPosition(t.position()+4),(e||new ir).__init(t.readInt32(t.position())+t.position(),t)}codec(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt8(this.bb_pos+t):ls.LZ4_FRAME}method(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readInt8(this.bb_pos+t):as.BUFFER}static startBodyCompression(t){t.startObject(2)}static addCodec(t,e){t.addFieldInt8(0,e,ls.LZ4_FRAME)}static addMethod(t,e){t.addFieldInt8(1,e,as.BUFFER)}static endBodyCompression(t){return t.endObject()}static createBodyCompression(t,e,n){return ir.startBodyCompression(t),ir.addCodec(t,e),ir.addMethod(t,n),ir.endBodyCompression(t)}};var ai=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}offset(){return this.bb.readInt64(this.bb_pos)}length(){return this.bb.readInt64(this.bb_pos+8)}static sizeOf(){return 16}static createBuffer(t,e,n){return t.prep(8,16),t.writeInt64(n),t.writeInt64(e),t.offset()}};var li=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}length(){return this.bb.readInt64(this.bb_pos)}nullCount(){return this.bb.readInt64(this.bb_pos+8)}static sizeOf(){return 16}static createFieldNode(t,e,n){return t.prep(8,16),t.writeInt64(n),t.writeInt64(e),t.offset()}};var ne=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsRecordBatch(t,e){return(e||new ne).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsRecordBatch(t,e){return t.setPosition(t.position()+4),(e||new ne).__init(t.readInt32(t.position())+t.position(),t)}length(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}nodes(t,e){let n=this.bb.__offset(this.bb_pos,6);return n?(e||new li).__init(this.bb.__vector(this.bb_pos+n)+t*16,this.bb):null}nodesLength(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.__vector_len(this.bb_pos+t):0}buffers(t,e){let n=this.bb.__offset(this.bb_pos,8);return n?(e||new ai).__init(this.bb.__vector(this.bb_pos+n)+t*16,this.bb):null}buffersLength(){let t=this.bb.__offset(this.bb_pos,8);return t?this.bb.__vector_len(this.bb_pos+t):0}compression(t){let e=this.bb.__offset(this.bb_pos,10);return e?(t||new ir).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}static startRecordBatch(t){t.startObject(4)}static addLength(t,e){t.addFieldInt64(0,e,t.createLong(0,0))}static addNodes(t,e){t.addFieldOffset(1,e,0)}static startNodesVector(t,e){t.startVector(16,e,8)}static addBuffers(t,e){t.addFieldOffset(2,e,0)}static startBuffersVector(t,e){t.startVector(16,e,8)}static addCompression(t,e){t.addFieldOffset(3,e,0)}static endRecordBatch(t){return t.endObject()}};var We=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsDictionaryBatch(t,e){return(e||new We).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsDictionaryBatch(t,e){return t.setPosition(t.position()+4),(e||new We).__init(t.readInt32(t.position())+t.position(),t)}id(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}data(t){let e=this.bb.__offset(this.bb_pos,6);return e?(t||new ne).__init(this.bb.__indirect(this.bb_pos+e),this.bb):null}isDelta(){let t=this.bb.__offset(this.bb_pos,8);return t?!!this.bb.readInt8(this.bb_pos+t):!1}static startDictionaryBatch(t){t.startObject(3)}static addId(t,e){t.addFieldInt64(0,e,t.createLong(0,0))}static addData(t,e){t.addFieldOffset(1,e,0)}static addIsDelta(t,e){t.addFieldInt8(2,+e,0)}static endDictionaryBatch(t){return t.endObject()}};var ci;(function(r){r[r.NONE=0]="NONE",r[r.Schema=1]="Schema",r[r.DictionaryBatch=2]="DictionaryBatch",r[r.RecordBatch=3]="RecordBatch",r[r.Tensor=4]="Tensor",r[r.SparseTensor=5]="SparseTensor"})(ci||(ci={}));var Rt=class{constructor(){this.bb=null,this.bb_pos=0}__init(t,e){return this.bb_pos=t,this.bb=e,this}static getRootAsMessage(t,e){return(e||new Rt).__init(t.readInt32(t.position())+t.position(),t)}static getSizePrefixedRootAsMessage(t,e){return t.setPosition(t.position()+4),(e||new Rt).__init(t.readInt32(t.position())+t.position(),t)}version(){let t=this.bb.__offset(this.bb_pos,4);return t?this.bb.readInt16(this.bb_pos+t):un.V1}headerType(){let t=this.bb.__offset(this.bb_pos,6);return t?this.bb.readUint8(this.bb_pos+t):ci.NONE}header(t){let e=this.bb.__offset(this.bb_pos,8);return e?this.bb.__union(t,this.bb_pos+e):null}bodyLength(){let t=this.bb.__offset(this.bb_pos,10);return t?this.bb.readInt64(this.bb_pos+t):this.bb.createLong(0,0)}customMetadata(t,e){let n=this.bb.__offset(this.bb_pos,12);return n?(e||new wt).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos+n)+t*4),this.bb):null}customMetadataLength(){let t=this.bb.__offset(this.bb_pos,12);return t?this.bb.__vector_len(this.bb_pos+t):0}static startMessage(t){t.startObject(5)}static addVersion(t,e){t.addFieldInt16(0,e,un.V1)}static addHeaderType(t,e){t.addFieldInt8(1,e,ci.NONE)}static addHeader(t,e){t.addFieldOffset(2,e,0)}static addBodyLength(t,e){t.addFieldInt64(3,e,t.createLong(0,0))}static addCustomMetadata(t,e){t.addFieldOffset(4,e,0)}static createCustomMetadataVector(t,e){t.startVector(4,e.length,4);for(let n=e.length-1;n>=0;n--)t.addOffset(e[n]);return t.endVector()}static startCustomMetadataVector(t,e){t.startVector(4,e,4)}static endMessage(t){return t.endObject()}static finishMessageBuffer(t,e){t.finish(e)}static finishSizePrefixedMessageBuffer(t,e){t.finish(e,void 0,!0)}static createMessage(t,e,n,i,s,o){return Rt.startMessage(t),Rt.addVersion(t,e),Rt.addHeaderType(t,n),Rt.addHeader(t,i),Rt.addBodyLength(t,s),Rt.addCustomMetadata(t,o),Rt.endMessage(t)}};var xm=Ut,ll=class extends R{visit(t,e){return t==null||e==null?void 0:super.visit(t,e)}visitNull(t,e){return gr.startNull(e),gr.endNull(e)}visitInt(t,e){return Wt.startInt(e),Wt.addBitWidth(e,t.bitWidth),Wt.addIsSigned(e,t.isSigned),Wt.endInt(e)}visitFloat(t,e){return _e.startFloatingPoint(e),_e.addPrecision(e,t.precision),_e.endFloatingPoint(e)}visitBinary(t,e){return mr.startBinary(e),mr.endBinary(e)}visitBool(t,e){return yr.startBool(e),yr.endBool(e)}visitUtf8(t,e){return vr.startUtf8(e),vr.endUtf8(e)}visitDecimal(t,e){return Yt.startDecimal(e),Yt.addScale(e,t.scale),Yt.addPrecision(e,t.precision),Yt.addBitWidth(e,t.bitWidth),Yt.endDecimal(e)}visitDate(t,e){return fe.startDate(e),fe.addUnit(e,t.unit),fe.endDate(e)}visitTime(t,e){return te.startTime(e),te.addUnit(e,t.unit),te.addBitWidth(e,t.bitWidth),te.endTime(e)}visitTimestamp(t,e){let n=t.timezone&&e.createString(t.timezone)||void 0;return ee.startTimestamp(e),ee.addUnit(e,t.unit),n!==void 0&&ee.addTimezone(e,n),ee.endTimestamp(e)}visitInterval(t,e){return me.startInterval(e),me.addUnit(e,t.unit),me.endInterval(e)}visitList(t,e){return br.startList(e),br.endList(e)}visitStruct(t,e){return wr.startStruct_(e),wr.endStruct_(e)}visitUnion(t,e){Gt.startTypeIdsVector(e,t.typeIds.length);let n=Gt.createTypeIdsVector(e,t.typeIds);return Gt.startUnion(e),Gt.addMode(e,t.mode),Gt.addTypeIds(e,n),Gt.endUnion(e)}visitDictionary(t,e){let n=this.visit(t.indices,e);return Oe.startDictionaryEncoding(e),Oe.addId(e,new xm(t.id,0)),Oe.addIsOrdered(e,t.isOrdered),n!==void 0&&Oe.addIndexType(e,n),Oe.endDictionaryEncoding(e)}visitFixedSizeBinary(t,e){return he.startFixedSizeBinary(e),he.addByteWidth(e,t.byteWidth),he.endFixedSizeBinary(e)}visitFixedSizeList(t,e){return pe.startFixedSizeList(e),pe.addListSize(e,t.listSize),pe.endFixedSizeList(e)}visitMap(t,e){return ye.startMap(e),ye.addKeysSorted(e,t.keysSorted),ye.endMap(e)}},No=new ll;function Zu(r,t=new Map){return new rt(Dm(r,t),jo(r.customMetadata),t)}function cl(r){return new qt(r.count,ed(r.columns),rd(r.columns))}function td(r){return new Se(cl(r.data),r.id,r.isDelta)}function Dm(r,t){return(r.fields||[]).filter(Boolean).map(e=>G.fromJSON(e,t))}function Ju(r,t){return(r.children||[]).filter(Boolean).map(e=>G.fromJSON(e,t))}function ed(r){return(r||[]).reduce((t,e)=>[...t,new sr(e.count,Bm(e.VALIDITY)),...ed(e.children)],[])}function rd(r,t=[]){for(let e=-1,n=(r||[]).length;++e<n;){let i=r[e];i.VALIDITY&&t.push(new ve(t.length,i.VALIDITY.length)),i.TYPE&&t.push(new ve(t.length,i.TYPE.length)),i.OFFSET&&t.push(new ve(t.length,i.OFFSET.length)),i.DATA&&t.push(new ve(t.length,i.DATA.length)),t=rd(i.children,t)}return t}function Bm(r){return(r||[]).reduce((t,e)=>t+ +(e===0),0)}function nd(r,t){let e,n,i,s,o,a;return!t||!(s=r.dictionary)?(o=Qu(r,Ju(r,t)),i=new G(r.name,o,r.nullable,jo(r.customMetadata))):t.has(e=s.id)?(n=(n=s.indexType)?qu(n):new dr,a=new xe(t.get(e),n,e,s.isOrdered),i=new G(r.name,a,r.nullable,jo(r.customMetadata))):(n=(n=s.indexType)?qu(n):new dr,t.set(e,o=Qu(r,Ju(r,t))),a=new xe(o,n,e,s.isOrdered),i=new G(r.name,a,r.nullable,jo(r.customMetadata))),i||null}function jo(r){return new Map(Object.entries(r||{}))}function qu(r){return new Mt(r.isSigned,r.bitWidth)}function Qu(r,t){let e=r.type.name;switch(e){case"NONE":return new le;case"null":return new le;case"binary":return new Rr;case"utf8":return new Cr;case"bool":return new Lr;case"list":return new qe((t||[])[0]);case"struct":return new gt(t||[]);case"struct_":return new gt(t||[])}switch(e){case"int":{let n=r.type;return new Mt(n.isSigned,n.bitWidth)}case"floatingpoint":{let n=r.type;return new de(It[n.precision])}case"decimal":{let n=r.type;return new Ur(n.scale,n.precision,n.bitWidth)}case"date":{let n=r.type;return new kr(Kt[n.unit])}case"time":{let n=r.type;return new Je(tt[n.unit],n.bitWidth)}case"timestamp":{let n=r.type;return new Nr(tt[n.unit],n.timezone)}case"interval":{let n=r.type;return new jr(ae[n.unit])}case"union":{let n=r.type;return new Qe(Et[n.mode],n.typeIds||[],t||[])}case"fixedsizebinary":{let n=r.type;return new Pr(n.byteWidth)}case"fixedsizelist":{let n=r.type;return new Ze(n.listSize,(t||[])[0])}case"map":{let n=r.type;return new tr((t||[])[0],n.keysSorted)}}throw new Error(`Unrecognized type: "${e}"`)}var kn=Ut,Om=zr,Mm=ce,Nt=class{constructor(t,e,n,i){this._version=e,this._headerType=n,this.body=new Uint8Array(0),i&&(this._createHeader=()=>i),this._bodyLength=typeof t=="number"?t:t.low}static fromJSON(t,e){let n=new Nt(0,Vt.V4,e);return n._createHeader=Rm(t,e),n}static decode(t){t=new Mm(P(t));let e=Rt.getRootAsMessage(t),n=e.bodyLength(),i=e.version(),s=e.headerType(),o=new Nt(n,i,s);return o._createHeader=Cm(e,s),o}static encode(t){let e=new Om,n=-1;return t.isSchema()?n=rt.encode(e,t.header()):t.isRecordBatch()?n=qt.encode(e,t.header()):t.isDictionaryBatch()&&(n=Se.encode(e,t.header())),Rt.startMessage(e),Rt.addVersion(e,Vt.V4),Rt.addHeader(e,n),Rt.addHeaderType(e,t.headerType),Rt.addBodyLength(e,new kn(t.bodyLength,0)),Rt.finishMessageBuffer(e,Rt.endMessage(e)),e.asUint8Array()}static from(t,e=0){if(t instanceof rt)return new Nt(0,Vt.V4,st.Schema,t);if(t instanceof qt)return new Nt(e,Vt.V4,st.RecordBatch,t);if(t instanceof Se)return new Nt(e,Vt.V4,st.DictionaryBatch,t);throw new Error(`Unrecognized Message header: ${t}`)}get type(){return this.headerType}get version(){return this._version}get headerType(){return this._headerType}get bodyLength(){return this._bodyLength}header(){return this._createHeader()}isSchema(){return this.headerType===st.Schema}isRecordBatch(){return this.headerType===st.RecordBatch}isDictionaryBatch(){return this.headerType===st.DictionaryBatch}},qt=class{constructor(t,e,n){this._nodes=e,this._buffers=n,this._length=typeof t=="number"?t:t.low}get nodes(){return this._nodes}get length(){return this._length}get buffers(){return this._buffers}},Se=class{constructor(t,e,n=!1){this._data=t,this._isDelta=n,this._id=typeof e=="number"?e:e.low}get id(){return this._id}get data(){return this._data}get isDelta(){return this._isDelta}get length(){return this.data.length}get nodes(){return this.data.nodes}get buffers(){return this.data.buffers}},ve=class{constructor(t,e){this.offset=typeof t=="number"?t:t.low,this.length=typeof e=="number"?e:e.low}},sr=class{constructor(t,e){this.length=typeof t=="number"?t:t.low,this.nullCount=typeof e=="number"?e:e.low}};function Rm(r,t){return()=>{switch(t){case st.Schema:return rt.fromJSON(r);case st.RecordBatch:return qt.fromJSON(r);case st.DictionaryBatch:return Se.fromJSON(r)}throw new Error(`Unrecognized Message type: { name: ${st[t]}, type: ${t} }`)}}function Cm(r,t){return()=>{switch(t){case st.Schema:return rt.decode(r.header(new xt));case st.RecordBatch:return qt.decode(r.header(new ne),r.version());case st.DictionaryBatch:return Se.decode(r.header(new We),r.version())}throw new Error(`Unrecognized Message type: { name: ${st[t]}, type: ${t} }`)}}G.encode=Ym;G.decode=zm;G.fromJSON=nd;rt.encode=Wm;rt.decode=Lm;rt.fromJSON=Zu;qt.encode=Gm;qt.decode=Um;qt.fromJSON=cl;Se.encode=$m;Se.decode=km;Se.fromJSON=td;sr.encode=Xm;sr.decode=jm;ve.encode=Km;ve.decode=Nm;function Lm(r,t=new Map){let e=Vm(r,t);return new rt(e,Po(r),t)}function Um(r,t=Vt.V4){if(r.compression()!==null)throw new Error("Record batch compression not implemented");return new qt(r.length(),Pm(r),Hm(r,t))}function km(r,t=Vt.V4){return new Se(qt.decode(r.data(),t),r.id(),r.isDelta())}function Nm(r){return new ve(r.offset(),r.length())}function jm(r){return new sr(r.length(),r.nullCount())}function Pm(r){let t=[];for(let e,n=-1,i=-1,s=r.nodesLength();++n<s;)(e=r.nodes(n))&&(t[++i]=sr.decode(e));return t}function Hm(r,t){let e=[];for(let n,i=-1,s=-1,o=r.buffersLength();++i<o;)(n=r.buffers(i))&&(t<Vt.V4&&(n.bb_pos+=8*(i+1)),e[++s]=ve.decode(n));return e}function Vm(r,t){let e=[];for(let n,i=-1,s=-1,o=r.fieldsLength();++i<o;)(n=r.fields(i))&&(e[++s]=G.decode(n,t));return e}function id(r,t){let e=[];for(let n,i=-1,s=-1,o=r.childrenLength();++i<o;)(n=r.children(i))&&(e[++s]=G.decode(n,t));return e}function zm(r,t){let e,n,i,s,o,a;return!t||!(a=r.dictionary())?(i=od(r,id(r,t)),n=new G(r.name(),i,r.nullable(),Po(r))):t.has(e=a.id().low)?(s=(s=a.indexType())?sd(s):new dr,o=new xe(t.get(e),s,e,a.isOrdered()),n=new G(r.name(),o,r.nullable(),Po(r))):(s=(s=a.indexType())?sd(s):new dr,t.set(e,i=od(r,id(r,t))),o=new xe(i,s,e,a.isOrdered()),n=new G(r.name(),o,r.nullable(),Po(r))),n||null}function Po(r){let t=new Map;if(r)for(let e,n,i=-1,s=Math.trunc(r.customMetadataLength());++i<s;)(e=r.customMetadata(i))&&(n=e.key())!=null&&t.set(n,e.value());return t}function sd(r){return new Mt(r.isSigned(),r.bitWidth())}function od(r,t){let e=r.typeType();switch(e){case Tt.NONE:return new le;case Tt.Null:return new le;case Tt.Binary:return new Rr;case Tt.Utf8:return new Cr;case Tt.Bool:return new Lr;case Tt.List:return new qe((t||[])[0]);case Tt.Struct_:return new gt(t||[])}switch(e){case Tt.Int:{let n=r.type(new Wt);return new Mt(n.isSigned(),n.bitWidth())}case Tt.FloatingPoint:{let n=r.type(new _e);return new de(n.precision())}case Tt.Decimal:{let n=r.type(new Yt);return new Ur(n.scale(),n.precision(),n.bitWidth())}case Tt.Date:{let n=r.type(new fe);return new kr(n.unit())}case Tt.Time:{let n=r.type(new te);return new Je(n.unit(),n.bitWidth())}case Tt.Timestamp:{let n=r.type(new ee);return new Nr(n.unit(),n.timezone())}case Tt.Interval:{let n=r.type(new me);return new jr(n.unit())}case Tt.Union:{let n=r.type(new Gt);return new Qe(n.mode(),n.typeIdsArray()||[],t||[])}case Tt.FixedSizeBinary:{let n=r.type(new he);return new Pr(n.byteWidth())}case Tt.FixedSizeList:{let n=r.type(new pe);return new Ze(n.listSize(),(t||[])[0])}case Tt.Map:{let n=r.type(new ye);return new tr((t||[])[0],n.keysSorted())}}throw new Error(`Unrecognized type: "${Tt[e]}" (${e})`)}function Wm(r,t){let e=t.fields.map(s=>G.encode(r,s));xt.startFieldsVector(r,e.length);let n=xt.createFieldsVector(r,e),i=t.metadata&&t.metadata.size>0?xt.createCustomMetadataVector(r,[...t.metadata].map(([s,o])=>{let a=r.createString(`${s}`),c=r.createString(`${o}`);return wt.startKeyValue(r),wt.addKey(r,a),wt.addValue(r,c),wt.endKeyValue(r)})):-1;return xt.startSchema(r),xt.addFields(r,n),xt.addEndianness(r,Jm?dn.Little:dn.Big),i!==-1&&xt.addCustomMetadata(r,i),xt.endSchema(r)}function Ym(r,t){let e=-1,n=-1,i=-1,s=t.type,o=t.typeId;D.isDictionary(s)?(o=s.dictionary.typeId,i=No.visit(s,r),n=No.visit(s.dictionary,r)):n=No.visit(s,r);let a=(s.children||[]).map(p=>G.encode(r,p)),c=kt.createChildrenVector(r,a),f=t.metadata&&t.metadata.size>0?kt.createCustomMetadataVector(r,[...t.metadata].map(([p,y])=>{let w=r.createString(`${p}`),S=r.createString(`${y}`);return wt.startKeyValue(r),wt.addKey(r,w),wt.addValue(r,S),wt.endKeyValue(r)})):-1;return t.name&&(e=r.createString(t.name)),kt.startField(r),kt.addType(r,n),kt.addTypeType(r,o),kt.addChildren(r,c),kt.addNullable(r,!!t.nullable),e!==-1&&kt.addName(r,e),i!==-1&&kt.addDictionary(r,i),f!==-1&&kt.addCustomMetadata(r,f),kt.endField(r)}function Gm(r,t){let e=t.nodes||[],n=t.buffers||[];ne.startNodesVector(r,e.length);for(let o of e.slice().reverse())sr.encode(r,o);let i=r.endVector();ne.startBuffersVector(r,n.length);for(let o of n.slice().reverse())ve.encode(r,o);let s=r.endVector();return ne.startRecordBatch(r),ne.addLength(r,new kn(t.length,0)),ne.addNodes(r,i),ne.addBuffers(r,s),ne.endRecordBatch(r)}function $m(r,t){let e=qt.encode(r,t.data);return We.startDictionaryBatch(r),We.addId(r,new kn(t.id,0)),We.addIsDelta(r,t.isDelta),We.addData(r,e),We.endDictionaryBatch(r)}function Xm(r,t){return li.createFieldNode(r,new kn(t.length,0),new kn(t.nullCount,0))}function Km(r,t){return ai.createBuffer(r,new kn(t.offset,0),new kn(t.length,0))}var Jm=(()=>{let r=new ArrayBuffer(2);return new DataView(r).setInt16(0,256,!0),new Int16Array(r)[0]===256})();var dl=r=>`Expected ${st[r]} Message in stream, but was null or length 0.`,fl=r=>`Header pointer of flatbuffer-encoded ${st[r]} Message is null or length 0.`,ad=(r,t)=>`Expected to read ${r} metadata bytes, but only read ${t}.`,ld=(r,t)=>`Expected to read ${r} bytes for message body, but only read ${t}.`,ui=class{constructor(t){this.source=t instanceof Ir?t:new Ir(t)}[Symbol.iterator](){return this}next(){let t;return(t=this.readMetadataLength()).done?vt:t.value===-1&&(t=this.readMetadataLength()).done?vt:(t=this.readMetadata(t.value)).done?vt:t}throw(t){return this.source.throw(t)}return(t){return this.source.return(t)}readMessage(t){let e;if((e=this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(dl(t));return e.value}readMessageBody(t){if(t<=0)return new Uint8Array(0);let e=P(this.source.read(t));if(e.byteLength<t)throw new Error(ld(t,e.byteLength));return e.byteOffset%8===0&&e.byteOffset+e.byteLength<=e.buffer.byteLength?e:e.slice()}readSchema(t=!1){let e=st.Schema,n=this.readMessage(e),i=n==null?void 0:n.header();if(t&&!i)throw new Error(fl(e));return i}readMetadataLength(){let t=this.source.read(Ho),e=t&&new ce(t),n=(e==null?void 0:e.readInt32(0))||0;return{done:n===0,value:n}}readMetadata(t){let e=this.source.read(t);if(!e)return vt;if(e.byteLength<t)throw new Error(ad(t,e.byteLength));return{done:!1,value:Nt.decode(e)}}},cs=class{constructor(t,e){this.source=t instanceof be?t:As(t)?new hn(t,e):new be(t)}[Symbol.asyncIterator](){return this}next(){return x(this,void 0,void 0,function*(){let t;return(t=yield this.readMetadataLength()).done?vt:t.value===-1&&(t=yield this.readMetadataLength()).done?vt:(t=yield this.readMetadata(t.value)).done?vt:t})}throw(t){return x(this,void 0,void 0,function*(){return yield this.source.throw(t)})}return(t){return x(this,void 0,void 0,function*(){return yield this.source.return(t)})}readMessage(t){return x(this,void 0,void 0,function*(){let e;if((e=yield this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(dl(t));return e.value})}readMessageBody(t){return x(this,void 0,void 0,function*(){if(t<=0)return new Uint8Array(0);let e=P(yield this.source.read(t));if(e.byteLength<t)throw new Error(ld(t,e.byteLength));return e.byteOffset%8===0&&e.byteOffset+e.byteLength<=e.buffer.byteLength?e:e.slice()})}readSchema(t=!1){return x(this,void 0,void 0,function*(){let e=st.Schema,n=yield this.readMessage(e),i=n==null?void 0:n.header();if(t&&!i)throw new Error(fl(e));return i})}readMetadataLength(){return x(this,void 0,void 0,function*(){let t=yield this.source.read(Ho),e=t&&new ce(t),n=(e==null?void 0:e.readInt32(0))||0;return{done:n===0,value:n}})}readMetadata(t){return x(this,void 0,void 0,function*(){let e=yield this.source.read(t);if(!e)return vt;if(e.byteLength<t)throw new Error(ad(t,e.byteLength));return{done:!1,value:Nt.decode(e)}})}},us=class extends ui{constructor(t){super(new Uint8Array(0)),this._schema=!1,this._body=[],this._batchIndex=0,this._dictionaryIndex=0,this._json=t instanceof ji?t:new ji(t)}next(){let{_json:t}=this;if(!this._schema)return this._schema=!0,{done:!1,value:Nt.fromJSON(t.schema,st.Schema)};if(this._dictionaryIndex<t.dictionaries.length){let e=t.dictionaries[this._dictionaryIndex++];return this._body=e.data.columns,{done:!1,value:Nt.fromJSON(e,st.DictionaryBatch)}}if(this._batchIndex<t.batches.length){let e=t.batches[this._batchIndex++];return this._body=e.columns,{done:!1,value:Nt.fromJSON(e,st.RecordBatch)}}return this._body=[],vt}readMessageBody(t){return e(this._body);function e(n){return(n||[]).reduce((i,s)=>[...i,...s.VALIDITY&&[s.VALIDITY]||[],...s.TYPE&&[s.TYPE]||[],...s.OFFSET&&[s.OFFSET]||[],...s.DATA&&[s.DATA]||[],...e(s.children)],[])}}readMessage(t){let e;if((e=this.next()).done)return null;if(t!=null&&e.value.headerType!==t)throw new Error(dl(t));return e.value}readSchema(){let t=st.Schema,e=this.readMessage(t),n=e==null?void 0:e.header();if(!e||!n)throw new Error(fl(t));return n}},Ho=4,ul="ARROW1",di=new Uint8Array(ul.length);for(let r=0;r<ul.length;r+=1)di[r]=ul.codePointAt(r);function Vo(r,t=0){for(let e=-1,n=di.length;++e<n;)if(di[e]!==r[t+e])return!1;return!0}var fi=di.length,hl=fi+Ho,cd=fi*2+Ho;var Ct=class extends Bn{constructor(t){super(),this._impl=t}get closed(){return this._impl.closed}get schema(){return this._impl.schema}get autoDestroy(){return this._impl.autoDestroy}get dictionaries(){return this._impl.dictionaries}get numDictionaries(){return this._impl.numDictionaries}get numRecordBatches(){return this._impl.numRecordBatches}get footer(){return this._impl.isFile()?this._impl.footer:null}isSync(){return this._impl.isSync()}isAsync(){return this._impl.isAsync()}isFile(){return this._impl.isFile()}isStream(){return this._impl.isStream()}next(){return this._impl.next()}throw(t){return this._impl.throw(t)}return(t){return this._impl.return(t)}cancel(){return this._impl.cancel()}reset(t){return this._impl.reset(t),this._DOMStream=void 0,this._nodeStream=void 0,this}open(t){let e=this._impl.open(t);return Ye(e)?e.then(()=>this):this}readRecordBatch(t){return this._impl.isFile()?this._impl.readRecordBatch(t):null}[Symbol.iterator](){return this._impl[Symbol.iterator]()}[Symbol.asyncIterator](){return this._impl[Symbol.asyncIterator]()}toDOMStream(){return Xt.toDOMStream(this.isSync()?{[Symbol.iterator]:()=>this}:{[Symbol.asyncIterator]:()=>this})}toNodeStream(){return Xt.toNodeStream(this.isSync()?{[Symbol.iterator]:()=>this}:{[Symbol.asyncIterator]:()=>this},{objectMode:!0})}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t,e){throw new Error('"throughDOM" not available in this environment')}static from(t){return t instanceof Ct?t:Fs(t)?Qm(t):As(t)?ey(t):Ye(t)?(()=>x(this,void 0,void 0,function*(){return yield Ct.from(yield t)}))():Es(t)||Ti(t)||Ds(t)||je(t)?ty(new be(t)):Zm(new Ir(t))}static readAll(t){return t instanceof Ct?t.isSync()?ud(t):dd(t):Fs(t)||ArrayBuffer.isView(t)||Ge(t)||Ts(t)?ud(t):dd(t)}},Tr=class extends Ct{constructor(t){super(t),this._impl=t}readAll(){return[...this]}[Symbol.iterator](){return this._impl[Symbol.iterator]()}[Symbol.asyncIterator](){return ue(this,arguments,function*(){yield J(yield*zn(Ue(this[Symbol.iterator]())))})}},pn=class extends Ct{constructor(t){super(t),this._impl=t}readAll(){var t,e;return x(this,void 0,void 0,function*(){let n=new Array;try{for(var i=Ue(this),s;s=yield i.next(),!s.done;){let o=s.value;n.push(o)}}catch(o){t={error:o}}finally{try{s&&!s.done&&(e=i.return)&&(yield e.call(i))}finally{if(t)throw t.error}}return n})}[Symbol.iterator](){throw new Error("AsyncRecordBatchStreamReader is not Iterable")}[Symbol.asyncIterator](){return this._impl[Symbol.asyncIterator]()}},_n=class extends Tr{constructor(t){super(t),this._impl=t}},ds=class extends pn{constructor(t){super(t),this._impl=t}},zo=class{constructor(t=new Map){this.closed=!1,this.autoDestroy=!0,this._dictionaryIndex=0,this._recordBatchIndex=0,this.dictionaries=t}get numDictionaries(){return this._dictionaryIndex}get numRecordBatches(){return this._recordBatchIndex}isSync(){return!1}isAsync(){return!1}isFile(){return!1}isStream(){return!1}reset(t){return this._dictionaryIndex=0,this._recordBatchIndex=0,this.schema=t,this.dictionaries=new Map,this}_loadRecordBatch(t,e){let n=this._loadVectors(t,e,this.schema.fields),i=z({type:new gt(this.schema.fields),length:t.length,children:n});return new mt(this.schema,i)}_loadDictionaryBatch(t,e){let{id:n,isDelta:i}=t,{dictionaries:s,schema:o}=this,a=s.get(n);if(i||!a){let c=o.dictionaries.get(n),f=this._loadVectors(t.data,e,[c]);return(a&&i?a.concat(new V(f)):new V(f)).memoize()}return a.memoize()}_loadVectors(t,e,n){return new Vi(e,t.nodes,t.buffers,this.dictionaries).visitMany(n)}},hi=class extends zo{constructor(t,e){super(e),this._reader=Fs(t)?new us(this._handle=t):new ui(this._handle=t)}isSync(){return!0}isStream(){return!0}[Symbol.iterator](){return this}cancel(){!this.closed&&(this.closed=!0)&&(this.reset()._reader.return(),this._reader=null,this.dictionaries=null)}open(t){return this.closed||(this.autoDestroy=fd(this,t),this.schema||(this.schema=this._reader.readSchema())||this.cancel()),this}throw(t){return!this.closed&&this.autoDestroy&&(this.closed=!0)?this.reset()._reader.throw(t):vt}return(t){return!this.closed&&this.autoDestroy&&(this.closed=!0)?this.reset()._reader.return(t):vt}next(){if(this.closed)return vt;let t,{_reader:e}=this;for(;t=this._readNextMessageAndValidate();)if(t.isSchema())this.reset(t.header());else if(t.isRecordBatch()){this._recordBatchIndex++;let n=t.header(),i=e.readMessageBody(t.bodyLength);return{done:!1,value:this._loadRecordBatch(n,i)}}else if(t.isDictionaryBatch()){this._dictionaryIndex++;let n=t.header(),i=e.readMessageBody(t.bodyLength),s=this._loadDictionaryBatch(n,i);this.dictionaries.set(n.id,s)}return this.schema&&this._recordBatchIndex===0?(this._recordBatchIndex++,{done:!1,value:new Un(this.schema)}):this.return()}_readNextMessageAndValidate(t){return this._reader.readMessage(t)}},pi=class extends zo{constructor(t,e){super(e),this._reader=new cs(this._handle=t)}isAsync(){return!0}isStream(){return!0}[Symbol.asyncIterator](){return this}cancel(){return x(this,void 0,void 0,function*(){!this.closed&&(this.closed=!0)&&(yield this.reset()._reader.return(),this._reader=null,this.dictionaries=null)})}open(t){return x(this,void 0,void 0,function*(){return this.closed||(this.autoDestroy=fd(this,t),this.schema||(this.schema=yield this._reader.readSchema())||(yield this.cancel())),this})}throw(t){return x(this,void 0,void 0,function*(){return!this.closed&&this.autoDestroy&&(this.closed=!0)?yield this.reset()._reader.throw(t):vt})}return(t){return x(this,void 0,void 0,function*(){return!this.closed&&this.autoDestroy&&(this.closed=!0)?yield this.reset()._reader.return(t):vt})}next(){return x(this,void 0,void 0,function*(){if(this.closed)return vt;let t,{_reader:e}=this;for(;t=yield this._readNextMessageAndValidate();)if(t.isSchema())yield this.reset(t.header());else if(t.isRecordBatch()){this._recordBatchIndex++;let n=t.header(),i=yield e.readMessageBody(t.bodyLength);return{done:!1,value:this._loadRecordBatch(n,i)}}else if(t.isDictionaryBatch()){this._dictionaryIndex++;let n=t.header(),i=yield e.readMessageBody(t.bodyLength),s=this._loadDictionaryBatch(n,i);this.dictionaries.set(n.id,s)}return this.schema&&this._recordBatchIndex===0?(this._recordBatchIndex++,{done:!1,value:new Un(this.schema)}):yield this.return()})}_readNextMessageAndValidate(t){return x(this,void 0,void 0,function*(){return yield this._reader.readMessage(t)})}},Wo=class extends hi{constructor(t,e){super(t instanceof Pi?t:new Pi(t),e)}get footer(){return this._footer}get numDictionaries(){return this._footer?this._footer.numDictionaries:0}get numRecordBatches(){return this._footer?this._footer.numRecordBatches:0}isSync(){return!0}isFile(){return!0}open(t){if(!this.closed&&!this._footer){this.schema=(this._footer=this._readFooter()).schema;for(let e of this._footer.dictionaryBatches())e&&this._readDictionaryBatch(this._dictionaryIndex++)}return super.open(t)}readRecordBatch(t){var e;if(this.closed)return null;this._footer||this.open();let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(t);if(n&&this._handle.seek(n.offset)){let i=this._reader.readMessage(st.RecordBatch);if(i!=null&&i.isRecordBatch()){let s=i.header(),o=this._reader.readMessageBody(i.bodyLength);return this._loadRecordBatch(s,o)}}return null}_readDictionaryBatch(t){var e;let n=(e=this._footer)===null||e===void 0?void 0:e.getDictionaryBatch(t);if(n&&this._handle.seek(n.offset)){let i=this._reader.readMessage(st.DictionaryBatch);if(i!=null&&i.isDictionaryBatch()){let s=i.header(),o=this._reader.readMessageBody(i.bodyLength),a=this._loadDictionaryBatch(s,o);this.dictionaries.set(s.id,a)}}}_readFooter(){let{_handle:t}=this,e=t.size-hl,n=t.readInt32(e),i=t.readAt(e-n,n);return Wr.decode(i)}_readNextMessageAndValidate(t){var e;if(this._footer||this.open(),this._footer&&this._recordBatchIndex<this.numRecordBatches){let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(this._recordBatchIndex);if(n&&this._handle.seek(n.offset))return this._reader.readMessage(t)}return null}},pl=class extends pi{constructor(t,...e){let n=typeof e[0]!="number"?e.shift():void 0,i=e[0]instanceof Map?e.shift():void 0;super(t instanceof hn?t:new hn(t,n),i)}get footer(){return this._footer}get numDictionaries(){return this._footer?this._footer.numDictionaries:0}get numRecordBatches(){return this._footer?this._footer.numRecordBatches:0}isFile(){return!0}isAsync(){return!0}open(t){let e=Object.create(null,{open:{get:()=>super.open}});return x(this,void 0,void 0,function*(){if(!this.closed&&!this._footer){this.schema=(this._footer=yield this._readFooter()).schema;for(let n of this._footer.dictionaryBatches())n&&(yield this._readDictionaryBatch(this._dictionaryIndex++))}return yield e.open.call(this,t)})}readRecordBatch(t){var e;return x(this,void 0,void 0,function*(){if(this.closed)return null;this._footer||(yield this.open());let n=(e=this._footer)===null||e===void 0?void 0:e.getRecordBatch(t);if(n&&(yield this._handle.seek(n.offset))){let i=yield this._reader.readMessage(st.RecordBatch);if(i!=null&&i.isRecordBatch()){let s=i.header(),o=yield this._reader.readMessageBody(i.bodyLength);return this._loadRecordBatch(s,o)}}return null})}_readDictionaryBatch(t){var e;return x(this,void 0,void 0,function*(){let n=(e=this._footer)===null||e===void 0?void 0:e.getDictionaryBatch(t);if(n&&(yield this._handle.seek(n.offset))){let i=yield this._reader.readMessage(st.DictionaryBatch);if(i!=null&&i.isDictionaryBatch()){let s=i.header(),o=yield this._reader.readMessageBody(i.bodyLength),a=this._loadDictionaryBatch(s,o);this.dictionaries.set(s.id,a)}}})}_readFooter(){return x(this,void 0,void 0,function*(){let{_handle:t}=this;t._pending&&(yield t._pending);let e=t.size-hl,n=yield t.readInt32(e),i=yield t.readAt(e-n,n);return Wr.decode(i)})}_readNextMessageAndValidate(t){return x(this,void 0,void 0,function*(){if(this._footer||(yield this.open()),this._footer&&this._recordBatchIndex<this.numRecordBatches){let e=this._footer.getRecordBatch(this._recordBatchIndex);if(e&&(yield this._handle.seek(e.offset)))return yield this._reader.readMessage(t)}return null})}},_l=class extends hi{constructor(t,e){super(t,e)}_loadVectors(t,e,n){return new _o(e,t.nodes,t.buffers,this.dictionaries).visitMany(n)}};function fd(r,t){return t&&typeof t.autoDestroy=="boolean"?t.autoDestroy:r.autoDestroy}function*ud(r){let t=Ct.from(r);try{if(!t.open({autoDestroy:!1}).closed)do yield t;while(!t.reset().open().closed)}finally{t.cancel()}}function dd(r){return ue(this,arguments,function*(){let e=yield J(Ct.from(r));try{if(!(yield J(e.open({autoDestroy:!1}))).closed)do yield yield J(e);while(!(yield J(e.reset().open())).closed)}finally{yield J(e.cancel())}})}function Qm(r){return new Tr(new _l(r))}function Zm(r){let t=r.peek(fi+7&-8);return t&&t.byteLength>=4?Vo(t)?new _n(new Wo(r.read())):new Tr(new hi(r)):new Tr(new hi(function*(){}()))}function ty(r){return x(this,void 0,void 0,function*(){let t=yield r.peek(fi+7&-8);return t&&t.byteLength>=4?Vo(t)?new _n(new Wo(yield r.read())):new pn(new pi(r)):new pn(new pi(function(){return ue(this,arguments,function*(){})}()))})}function ey(r){return x(this,void 0,void 0,function*(){let{size:t}=yield r.stat(),e=new hn(r,t);return t>=cd&&Vo(yield e.readAt(0,fi+7&-8))?new ds(new pl(e)):new pn(new pi(e))})}var Dt=class extends R{constructor(){super(),this._byteLength=0,this._nodes=[],this._buffers=[],this._bufferRegions=[]}static assemble(...t){let e=i=>i.flatMap(s=>Array.isArray(s)?e(s):s instanceof mt?s.data.children:s.data),n=new Dt;return n.visitMany(e(t)),n}visit(t){if(t instanceof V)return this.visitMany(t.data),this;let{type:e}=t;if(!D.isDictionary(e)){let{length:n,nullCount:i}=t;if(n>2147483647)throw new RangeError("Cannot write arrays larger than 2^31 - 1 in length");D.isNull(e)||or.call(this,i<=0?new Uint8Array(0):qn(t.offset,n,t.nullBitmap)),this.nodes.push(new sr(n,i))}return super.visit(t)}visitNull(t){return this}visitDictionary(t){return this.visit(t.clone(t.type.indices))}get nodes(){return this._nodes}get buffers(){return this._buffers}get byteLength(){return this._byteLength}get bufferRegions(){return this._bufferRegions}};function or(r){let t=r.byteLength+7&-8;return this.buffers.push(r),this.bufferRegions.push(new ve(this._byteLength,t)),this._byteLength+=t,this}function ry(r){let{type:t,length:e,typeIds:n,valueOffsets:i}=r;if(or.call(this,n),t.mode===Et.Sparse)return ml.call(this,r);if(t.mode===Et.Dense){if(r.offset<=0)return or.call(this,i),ml.call(this,r);{let s=n.reduce((p,y)=>Math.max(p,y),n[0]),o=new Int32Array(s+1),a=new Int32Array(s+1).fill(-1),c=new Int32Array(e),f=Ai(-i[0],e,i);for(let p,y,w=-1;++w<e;)(y=a[p=n[w]])===-1&&(y=a[p]=f[p]),c[w]=f[w]-y,++o[p];or.call(this,c);for(let p,y=-1,w=t.children.length;++y<w;)if(p=r.children[y]){let S=t.typeIds[y],it=Math.min(e,o[S]);this.visit(p.slice(a[S],it))}}}return this}function ny(r){let t;return r.nullCount>=r.length?or.call(this,new Uint8Array(0)):(t=r.values)instanceof Uint8Array?or.call(this,qn(r.offset,r.length,t)):or.call(this,An(r.values))}function mn(r){return or.call(this,r.values.subarray(0,r.length*r.stride))}function hd(r){let{length:t,values:e,valueOffsets:n}=r,i=n[0],s=n[t],o=Math.min(s-i,e.byteLength-i);return or.call(this,Ai(-n[0],t,n)),or.call(this,e.subarray(i,i+o)),this}function yl(r){let{length:t,valueOffsets:e}=r;return e&&or.call(this,Ai(e[0],t,e)),this.visit(r.children[0])}function ml(r){return this.visitMany(r.type.children.map((t,e)=>r.children[e]).filter(Boolean))[0]}Dt.prototype.visitBool=ny;Dt.prototype.visitInt=mn;Dt.prototype.visitFloat=mn;Dt.prototype.visitUtf8=hd;Dt.prototype.visitBinary=hd;Dt.prototype.visitFixedSizeBinary=mn;Dt.prototype.visitDate=mn;Dt.prototype.visitTimestamp=mn;Dt.prototype.visitTime=mn;Dt.prototype.visitDecimal=mn;Dt.prototype.visitList=yl;Dt.prototype.visitStruct=ml;Dt.prototype.visitUnion=ry;Dt.prototype.visitInterval=mn;Dt.prototype.visitFixedSizeList=yl;Dt.prototype.visitMap=yl;var Nn=class extends Bn{constructor(t){super(),this._position=0,this._started=!1,this._sink=new Sr,this._schema=null,this._dictionaryBlocks=[],this._recordBatchBlocks=[],this._dictionaryDeltaOffsets=new Map,oe(t)||(t={autoDestroy:!0,writeLegacyIpcFormat:!1}),this._autoDestroy=typeof t.autoDestroy=="boolean"?t.autoDestroy:!0,this._writeLegacyIpcFormat=typeof t.writeLegacyIpcFormat=="boolean"?t.writeLegacyIpcFormat:!1}static throughNode(t){throw new Error('"throughNode" not available in this environment')}static throughDOM(t,e){throw new Error('"throughDOM" not available in this environment')}toString(t=!1){return this._sink.toString(t)}toUint8Array(t=!1){return this._sink.toUint8Array(t)}writeAll(t){return Ye(t)?t.then(e=>this.writeAll(e)):je(t)?gl(this,t):bl(this,t)}get closed(){return this._sink.closed}[Symbol.asyncIterator](){return this._sink[Symbol.asyncIterator]()}toDOMStream(t){return this._sink.toDOMStream(t)}toNodeStream(t){return this._sink.toNodeStream(t)}close(){return this.reset()._sink.close()}abort(t){return this.reset()._sink.abort(t)}finish(){return this._autoDestroy?this.close():this.reset(this._sink,this._schema),this}reset(t=this._sink,e=null){return t===this._sink||t instanceof Sr?this._sink=t:(this._sink=new Sr,t&&kc(t)?this.toDOMStream({type:"bytes"}).pipeTo(t):t&&Nc(t)&&this.toNodeStream({objectMode:!1}).pipe(t)),this._started&&this._schema&&this._writeFooter(this._schema),this._started=!1,this._dictionaryBlocks=[],this._recordBatchBlocks=[],this._dictionaryDeltaOffsets=new Map,(!e||!Ln(e,this._schema))&&(e==null?(this._position=0,this._schema=null):(this._started=!0,this._schema=e,this._writeSchema(e))),this}write(t){let e=null;if(this._sink){if(t==null)return this.finish()&&void 0;if(t instanceof Bt&&!(e=t.schema))return this.finish()&&void 0;if(t instanceof mt&&!(e=t.schema))return this.finish()&&void 0}else throw new Error("RecordBatchWriter is closed");if(e&&!Ln(e,this._schema)){if(this._started&&this._autoDestroy)return this.close();this.reset(this._sink,e)}t instanceof mt?t instanceof Un||this._writeRecordBatch(t):t instanceof Bt?this.writeAll(t.batches):Ge(t)&&this.writeAll(t)}_writeMessage(t,e=8){let n=e-1,i=Nt.encode(t),s=i.byteLength,o=this._writeLegacyIpcFormat?4:8,a=s+o+n&~n,c=a-s-o;return t.headerType===st.RecordBatch?this._recordBatchBlocks.push(new nr(a,t.bodyLength,this._position)):t.headerType===st.DictionaryBatch&&this._dictionaryBlocks.push(new nr(a,t.bodyLength,this._position)),this._writeLegacyIpcFormat||this._write(Int32Array.of(-1)),this._write(Int32Array.of(a-o)),s>0&&this._write(i),this._writePadding(c)}_write(t){if(this._started){let e=P(t);e&&e.byteLength>0&&(this._sink.write(e),this._position+=e.byteLength)}return this}_writeSchema(t){return this._writeMessage(Nt.from(t))}_writeFooter(t){return this._writeLegacyIpcFormat?this._write(Int32Array.of(0)):this._write(Int32Array.of(-1,0))}_writeMagic(){return this._write(di)}_writePadding(t){return t>0?this._write(new Uint8Array(t)):this}_writeRecordBatch(t){let{byteLength:e,nodes:n,bufferRegions:i,buffers:s}=Dt.assemble(t),o=new qt(t.numRows,n,i),a=Nt.from(o,e);return this._writeDictionaries(t)._writeMessage(a)._writeBodyBuffers(s)}_writeDictionaryBatch(t,e,n=!1){this._dictionaryDeltaOffsets.set(e,t.length+(this._dictionaryDeltaOffsets.get(e)||0));let{byteLength:i,nodes:s,bufferRegions:o,buffers:a}=Dt.assemble(new V([t])),c=new qt(t.length,s,o),f=new Se(c,e,n),p=Nt.from(f,i);return this._writeMessage(p)._writeBodyBuffers(a)}_writeBodyBuffers(t){let e,n,i;for(let s=-1,o=t.length;++s<o;)(e=t[s])&&(n=e.byteLength)>0&&(this._write(e),(i=(n+7&-8)-n)>0&&this._writePadding(i));return this}_writeDictionaries(t){for(let[e,n]of t.dictionaries){let i=this._dictionaryDeltaOffsets.get(e)||0;if(i===0||(n=n==null?void 0:n.slice(i)).length>0)for(let s of n.data)this._writeDictionaryBatch(s,e,i>0),i+=s.length}return this}},Kr=class extends Nn{static writeAll(t,e){let n=new Kr(e);return Ye(t)?t.then(i=>n.writeAll(i)):je(t)?gl(n,t):bl(n,t)}},Jr=class extends Nn{static writeAll(t){let e=new Jr;return Ye(t)?t.then(n=>e.writeAll(n)):je(t)?gl(e,t):bl(e,t)}constructor(){super(),this._autoDestroy=!0}_writeSchema(t){return this._writeMagic()._writePadding(2)}_writeFooter(t){let e=Wr.encode(new Wr(t,Vt.V4,this._recordBatchBlocks,this._dictionaryBlocks));return super._writeFooter(t)._write(e)._write(Int32Array.of(e.byteLength))._writeMagic()}};function bl(r,t){let e=t;t instanceof Bt&&(e=t.batches,r.reset(void 0,t.schema));for(let n of e)r.write(n);return r.finish()}function gl(r,t){var e,n,i,s;return x(this,void 0,void 0,function*(){try{for(e=Ue(t);n=yield e.next(),!n.done;){let o=n.value;r.write(o)}}catch(o){i={error:o}}finally{try{n&&!n.done&&(s=e.return)&&(yield s.call(e))}finally{if(i)throw i.error}}return r.finish()})}function pd(r,t){if(je(r))return sy(r,t);if(Ge(r))return iy(r,t);throw new Error("toDOMStream() must be called with an Iterable or AsyncIterable")}function iy(r,t){let e=null,n=(t==null?void 0:t.type)==="bytes"||!1,i=(t==null?void 0:t.highWaterMark)||Math.pow(2,24);return new ReadableStream(Object.assign(Object.assign({},t),{start(o){s(o,e||(e=r[Symbol.iterator]()))},pull(o){e?s(o,e):o.close()},cancel(){((e==null?void 0:e.return)&&e.return()||!0)&&(e=null)}}),Object.assign({highWaterMark:n?i:void 0},t));function s(o,a){let c,f=null,p=o.desiredSize||null;for(;!(f=a.next(n?p:null)).done;)if(ArrayBuffer.isView(f.value)&&(c=P(f.value))&&(p!=null&&n&&(p=p-c.byteLength+1),f.value=c),o.enqueue(f.value),p!=null&&--p<=0)return;o.close()}}function sy(r,t){let e=null,n=(t==null?void 0:t.type)==="bytes"||!1,i=(t==null?void 0:t.highWaterMark)||Math.pow(2,24);return new ReadableStream(Object.assign(Object.assign({},t),{start(o){return x(this,void 0,void 0,function*(){yield s(o,e||(e=r[Symbol.asyncIterator]()))})},pull(o){return x(this,void 0,void 0,function*(){e?yield s(o,e):o.close()})},cancel(){return x(this,void 0,void 0,function*(){((e==null?void 0:e.return)&&(yield e.return())||!0)&&(e=null)})}}),Object.assign({highWaterMark:n?i:void 0},t));function s(o,a){return x(this,void 0,void 0,function*(){let c,f=null,p=o.desiredSize||null;for(;!(f=yield a.next(n?p:null)).done;)if(ArrayBuffer.isView(f.value)&&(c=P(f.value))&&(p!=null&&n&&(p=p-c.byteLength+1),f.value=c),o.enqueue(f.value),p!=null&&--p<=0)return;o.close()})}}function yd(r){return new wl(r)}var wl=class{constructor(t){this._numChunks=0,this._finished=!1,this._bufferedSize=0;let{["readableStrategy"]:e,["writableStrategy"]:n,["queueingStrategy"]:i="count"}=t,s=Lc(t,["readableStrategy","writableStrategy","queueingStrategy"]);this._controller=null,this._builder=Mn(s),this._getSize=i!=="bytes"?_d:md;let{["highWaterMark"]:o=i==="bytes"?Math.pow(2,14):1e3}=Object.assign({},e),{["highWaterMark"]:a=i==="bytes"?Math.pow(2,14):1e3}=Object.assign({},n);this.readable=new ReadableStream({cancel:()=>{this._builder.clear()},pull:c=>{this._maybeFlush(this._builder,this._controller=c)},start:c=>{this._maybeFlush(this._builder,this._controller=c)}},{highWaterMark:o,size:i!=="bytes"?_d:md}),this.writable=new WritableStream({abort:()=>{this._builder.clear()},write:()=>{this._maybeFlush(this._builder,this._controller)},close:()=>{this._maybeFlush(this._builder.finish(),this._controller)}},{highWaterMark:a,size:c=>this._writeValueAndReturnChunkSize(c)})}_writeValueAndReturnChunkSize(t){let e=this._bufferedSize;return this._bufferedSize=this._getSize(this._builder.append(t)),this._bufferedSize-e}_maybeFlush(t,e){e!=null&&(this._bufferedSize>=e.desiredSize&&++this._numChunks&&this._enqueue(e,t.toVector()),t.finished&&((t.length>0||this._numChunks===0)&&++this._numChunks&&this._enqueue(e,t.toVector()),!this._finished&&(this._finished=!0)&&this._enqueue(e,null)))}_enqueue(t,e){this._bufferedSize=0,this._controller=null,e==null?t.close():t.enqueue(e)}},_d=r=>{var t;return(t=r==null?void 0:r.length)!==null&&t!==void 0?t:0},md=r=>{var t;return(t=r==null?void 0:r.byteLength)!==null&&t!==void 0?t:0};function Yo(r,t){let e=new Sr,n=null,i=new ReadableStream({cancel(){return x(this,void 0,void 0,function*(){yield e.close()})},start(a){return x(this,void 0,void 0,function*(){yield o(a,n||(n=yield s()))})},pull(a){return x(this,void 0,void 0,function*(){n?yield o(a,n):a.close()})}});return{writable:new WritableStream(e,Object.assign({highWaterMark:Math.pow(2,14)},r)),readable:i};function s(){return x(this,void 0,void 0,function*(){return yield(yield Ct.from(e)).open(t)})}function o(a,c){return x(this,void 0,void 0,function*(){let f=a.desiredSize,p=null;for(;!(p=yield c.next()).done;)if(a.enqueue(p.value),f!=null&&--f<=0)return;a.close()})}}function Go(r,t){let e=new this(r),n=new be(e),i=new ReadableStream({cancel(){return x(this,void 0,void 0,function*(){yield n.cancel()})},pull(o){return x(this,void 0,void 0,function*(){yield s(o)})},start(o){return x(this,void 0,void 0,function*(){yield s(o)})}},Object.assign({highWaterMark:Math.pow(2,14)},t));return{writable:new WritableStream(e,r),readable:i};function s(o){return x(this,void 0,void 0,function*(){let a=null,c=o.desiredSize;for(;a=yield n.read(c||null);)if(o.enqueue(a),c!=null&&(c-=a.byteLength)<=0)return;o.close()})}}function $o(r,t="stream"){return(t==="stream"?Kr:Jr).writeAll(r).toUint8Array(!0)}var cy=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},Ra),nl),Ka),Ca),Da),Xa),{compareSchemas:Ln,compareFields:Wu,compareTypes:Yu});Xt.toDOMStream=pd;Ft.throughDOM=yd;Ct.throughDOM=Yo;_n.throughDOM=Yo;Tr.throughDOM=Yo;Nn.throughDOM=Go;Jr.throughDOM=Go;Kr.throughDOM=Go;function _i(r){switch(r.typeId){case h.Binary:return{sqlType:"binary"};case h.Bool:return{sqlType:"bool"};case h.Date:return{sqlType:"date"};case h.DateDay:return{sqlType:"date32[d]"};case h.DateMillisecond:return{sqlType:"date64[ms]"};case h.Decimal:{let t=r;return{sqlType:"decimal",precision:t.precision,scale:t.scale}}case h.Float:return{sqlType:"float"};case h.Float16:return{sqlType:"float16"};case h.Float32:return{sqlType:"float32"};case h.Float64:return{sqlType:"float64"};case h.Int:return{sqlType:"int32"};case h.Int16:return{sqlType:"int16"};case h.Int32:return{sqlType:"int32"};case h.Int64:return{sqlType:"int64"};case h.Uint16:return{sqlType:"uint16"};case h.Uint32:return{sqlType:"uint32"};case h.Uint64:return{sqlType:"uint64"};case h.Uint8:return{sqlType:"uint8"};case h.IntervalDayTime:return{sqlType:"interval[dt]"};case h.IntervalYearMonth:return{sqlType:"interval[m]"};case h.List:return{sqlType:"list",valueType:_i(r.valueType)};case h.FixedSizeBinary:return{sqlType:"fixedsizebinary",byteWidth:r.byteWidth};case h.Null:return{sqlType:"null"};case h.Utf8:return{sqlType:"utf8"};case h.Struct:return{sqlType:"struct",fields:r.children.map(e=>Xo(e.name,e.type))};case h.Map:{let t=r;return{sqlType:"map",keyType:_i(t.keyType),valueType:_i(t.valueType)}}case h.Time:return{sqlType:"time[s]"};case h.TimeMicrosecond:return{sqlType:"time[us]"};case h.TimeMillisecond:return{sqlType:"time[ms]"};case h.TimeNanosecond:return{sqlType:"time[ns]"};case h.TimeSecond:return{sqlType:"time[s]"};case h.Timestamp:return{sqlType:"timestamp",timezone:r.timezone||void 0};case h.TimestampSecond:return{sqlType:"timestamp[s]",timezone:r.timezone||void 0};case h.TimestampMicrosecond:return{sqlType:"timestamp[us]",timezone:r.timezone||void 0};case h.TimestampNanosecond:return{sqlType:"timestamp[ns]",timezone:r.timezone||void 0};case h.TimestampMillisecond:return{sqlType:"timestamp[ms]",timezone:r.timezone||void 0}}throw new Error(`unsupported arrow type: ${r.toString()}`)}function Xo(r,t){let e=_i(t);return e.name=r,e}var Ko=class{constructor(){this._bindings=null;this._nextMessageId=0}log(t){this.postMessage({messageId:this._nextMessageId++,requestId:0,type:"LOG",data:t},[])}sendOK(t){this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"OK",data:null},[])}failWith(t,e){let n={name:e.name,message:e.message,stack:e.stack||void 0};this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"ERROR",data:n},[])}async onMessage(t){switch(t.type){case"PING":this.sendOK(t);return;case"INSTANTIATE":this._bindings!=null&&this.failWith(t,new Error("duckdb already initialized"));try{this._bindings=await this.instantiate(t.data[0],t.data[1],e=>{this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"INSTANTIATE_PROGRESS",data:e},[])}),this.sendOK(t)}catch(e){this._bindings=null,this.failWith(t,e)}return;default:break}if(!this._bindings)return this.failWith(t,new Error("duckdb is not initialized"));try{switch(t.type){case"GET_VERSION":this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"VERSION_STRING",data:this._bindings.getVersion()},[]);break;case"GET_FEATURE_FLAGS":this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FEATURE_FLAGS",data:this._bindings.getFeatureFlags()},[]);break;case"RESET":this._bindings.reset(),this.sendOK(t);break;case"OPEN":this._bindings.open(t.data),this.sendOK(t);break;case"DROP_FILE":this._bindings.dropFile(t.data),this.sendOK(t);break;case"DROP_FILES":this._bindings.dropFiles(),this.sendOK(t);break;case"FLUSH_FILES":this._bindings.flushFiles(),this.sendOK(t);break;case"CONNECT":{let e=this._bindings.connect();this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"CONNECTION_INFO",data:e.useUnsafe((n,i)=>i)},[]);break}case"DISCONNECT":this._bindings.disconnect(t.data),this.sendOK(t);break;case"CREATE_PREPARED":{let e=this._bindings.createPrepared(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"PREPARED_STATEMENT_ID",data:e},[]);break}case"CLOSE_PREPARED":{this._bindings.closePrepared(t.data[0],t.data[1]),this.sendOK(t);break}case"RUN_PREPARED":{let e=this._bindings.runPrepared(t.data[0],t.data[1],t.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT",data:e},[e.buffer]);break}case"RUN_QUERY":{let e=this._bindings.runQuery(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT",data:e},[e.buffer]);break}case"SEND_PREPARED":{let e=this._bindings.sendPrepared(t.data[0],t.data[1],t.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER",data:e},[e.buffer]);break}case"START_PENDING_QUERY":{let e=this._bindings.startPendingQuery(t.data[0],t.data[1]),n=[];e&&n.push(e.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:e},n);break}case"POLL_PENDING_QUERY":{let e=this._bindings.pollPendingQuery(t.data),n=[];e&&n.push(e.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:e},n);break}case"CANCEL_PENDING_QUERY":{let e=this._bindings.cancelPendingQuery(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"SUCCESS",data:e},[]);break}case"FETCH_QUERY_RESULTS":{let e=this._bindings.fetchQueryResults(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_CHUNK",data:e},[e.buffer]);break}case"GET_TABLE_NAMES":{let e=this._bindings.getTableNames(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"TABLE_NAMES",data:e},[]);break}case"GLOB_FILE_INFOS":{let e=this._bindings.globFiles(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_INFOS",data:e},[]);break}case"REGISTER_FILE_URL":this._bindings.registerFileURL(t.data[0],t.data[1],t.data[2],t.data[3]),this.sendOK(t);break;case"REGISTER_FILE_BUFFER":this._bindings.registerFileBuffer(t.data[0],t.data[1]),this.sendOK(t);break;case"REGISTER_FILE_HANDLE":this._bindings.registerFileHandle(t.data[0],t.data[1],t.data[2],t.data[3]),this.sendOK(t);break;case"COPY_FILE_TO_PATH":this._bindings.copyFileToPath(t.data[0],t.data[1]),this.sendOK(t);break;case"COPY_FILE_TO_BUFFER":{let e=this._bindings.copyFileToBuffer(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_BUFFER",data:e},[]);break}case"COLLECT_FILE_STATISTICS":this._bindings.collectFileStatistics(t.data[0],t.data[1]),this.sendOK(t);break;case"EXPORT_FILE_STATISTICS":{this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_STATISTICS",data:this._bindings.exportFileStatistics(t.data)},[]);break}case"INSERT_ARROW_FROM_IPC_STREAM":{this._bindings.insertArrowFromIPCStream(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"IMPORT_CSV_FROM_PATH":{this._bindings.insertCSVFromPath(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"IMPORT_JSON_FROM_PATH":{this._bindings.insertJSONFromPath(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"TOKENIZE":{let e=this._bindings.tokenize(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"SCRIPT_TOKENS",data:e},[]);break}}}catch(e){return this.failWith(t,e)}}};var Jo={},uy=(()=>{var r=Jo.url;return async function(t={}){var e=typeof t<"u"?t:{},n,i;e.ready=new Promise((l,u)=>{n=l,i=u}),["_main","_malloc","_free","_duckdb_web_clear_response","_duckdb_web_collect_file_stats","_duckdb_web_connect","_duckdb_web_copy_file_to_buffer","_duckdb_web_copy_file_to_path","_duckdb_web_disconnect","_duckdb_web_export_file_stats","_duckdb_web_fail_with","_duckdb_web_flush_file","_duckdb_web_flush_files","_duckdb_web_fs_drop_file","_duckdb_web_fs_drop_files","_duckdb_web_fs_get_file_info_by_id","_duckdb_web_fs_get_file_info_by_name","_duckdb_web_fs_glob_add_path","_duckdb_web_fs_glob_file_infos","_duckdb_web_fs_register_file_buffer","_duckdb_web_fs_register_file_url","_duckdb_web_get_feature_flags","_duckdb_web_get_global_file_info","_duckdb_web_get_tablenames","_duckdb_web_get_version","_duckdb_web_insert_arrow_from_ipc_stream","_duckdb_web_insert_csv_from_path","_duckdb_web_insert_json_from_path","_duckdb_web_open","_duckdb_web_pending_query_cancel","_duckdb_web_pending_query_poll","_duckdb_web_pending_query_start","_duckdb_web_prepared_close","_duckdb_web_prepared_create","_duckdb_web_prepared_run","_duckdb_web_prepared_send","_duckdb_web_query_fetch_results","_duckdb_web_query_run","_duckdb_web_reset","_duckdb_web_tokenize","_duckdb_web_udf_scalar_create","_fflush","onRuntimeInitialized"].forEach(l=>{Object.getOwnPropertyDescriptor(e.ready,l)||Object.defineProperty(e.ready,l,{get:()=>T("You are getting "+l+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"),set:()=>T("You are setting "+l+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")})});var s=Object.assign({},e),o=[],a="./this.program",c=(l,u)=>{throw u},f=typeof window=="object",p=typeof importScripts=="function",y=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",w=!f&&!y&&!p;if(e.ENVIRONMENT)throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");var S="";function it(l){return e.locateFile?e.locateFile(l,S):S+l}var et,yt,_t,ie;if(y){throw typeof process>"u"||process.release,new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");var Ie=process.versions.node,xr=Ie.split(".").slice(0,3);xr=xr[0]*1e4+xr[1]*100+xr[2].split("-")[0]*1;var fs=101900;if(xr<101900)throw new Error("This emscripten-generated code requires node v10.19.19.0 (detected v"+Ie+")");let{createRequire:l}=await Promise.resolve().then(()=>Sa(Ap("module")));var qr=l(Jo.url),mi=qr("fs"),bn=qr("path");p?S=bn.dirname(S)+"/":S=qr("url").fileURLToPath(new URL("./",Jo.url)),et=(u,d)=>(u=la(u)?new URL(u):bn.normalize(u),mi.readFileSync(u,d?void 0:"utf8")),_t=u=>{var d=et(u,!0);return d.buffer||(d=new Uint8Array(d)),O(d.buffer),d},yt=(u,d,_,g=!0)=>{u=la(u)?new URL(u):bn.normalize(u),mi.readFile(u,g?void 0:"utf8",(E,b)=>{E?_(E):d(g?b.buffer:b)})},!e.thisProgram&&process.argv.length>1&&(a=process.argv[1].replace(/\\/g,"/")),o=process.argv.slice(2),c=(u,d)=>{throw process.exitCode=u,d},e.inspect=()=>"[Emscripten Module object]"}else if(w){if(typeof process=="object"&&typeof qr=="function"||typeof window=="object"||typeof importScripts=="function")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");typeof read<"u"&&(et=l=>read(l)),_t=l=>{let u;return typeof readbuffer=="function"?new Uint8Array(readbuffer(l)):(u=read(l,"binary"),O(typeof u=="object"),u)},yt=(l,u,d)=>{setTimeout(()=>u(_t(l)),0)},typeof clearTimeout>"u"&&(globalThis.clearTimeout=l=>{}),typeof scriptArgs<"u"?o=scriptArgs:typeof arguments<"u"&&(o=arguments),typeof quit=="function"&&(c=(l,u)=>{throw setTimeout(()=>{if(!(u instanceof ca)){let d=u;u&&typeof u=="object"&&u.stack&&(d=[u,u.stack]),A(`exiting due to exception: ${d}`)}quit(l)}),u}),typeof print<"u"&&(typeof console>"u"&&(console={}),console.log=print,console.warn=console.error=typeof printErr<"u"?printErr:print)}else if(f||p){if(p?S=self.location.href:typeof document<"u"&&document.currentScript&&(S=document.currentScript.src),r&&(S=r),S.indexOf("blob:")!==0?S=S.substr(0,S.replace(/[?#].*/,"").lastIndexOf("/")+1):S="",!(typeof window=="object"||typeof importScripts=="function"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");et=l=>{var u=new XMLHttpRequest;return u.open("GET",l,!1),u.send(null),u.responseText},p&&(_t=l=>{var u=new XMLHttpRequest;return u.open("GET",l,!1),u.responseType="arraybuffer",u.send(null),new Uint8Array(u.response)}),yt=(l,u,d)=>{var _=new XMLHttpRequest;_.open("GET",l,!0),_.responseType="arraybuffer",_.onload=()=>{if(_.status==200||_.status==0&&_.response){u(_.response);return}d()},_.onerror=d,_.send(null)},ie=l=>document.title=l}else throw new Error("environment detection error");var nt=e.print||console.log.bind(console),A=e.printErr||console.error.bind(console);Object.assign(e,s),s=null,op(),e.arguments&&(o=e.arguments),Or("arguments","arguments_"),e.thisProgram&&(a=e.thisProgram),Or("thisProgram","thisProgram"),e.quit&&(c=e.quit),Or("quit","quit_"),O(typeof e.memoryInitializerPrefixURL>"u","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"),O(typeof e.pthreadMainPrefixURL>"u","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"),O(typeof e.cdInitializerPrefixURL>"u","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"),O(typeof e.filePackagePrefixURL>"u","Module.filePackagePrefixURL option was removed, use Module.locateFile instead"),O(typeof e.read>"u","Module.read option was removed (modify read_ in JS)"),O(typeof e.readAsync>"u","Module.readAsync option was removed (modify readAsync in JS)"),O(typeof e.readBinary>"u","Module.readBinary option was removed (modify readBinary in JS)"),O(typeof e.setWindowTitle>"u","Module.setWindowTitle option was removed (modify setWindowTitle in JS)"),O(typeof e.TOTAL_MEMORY>"u","Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"),Or("read","read_"),Or("readAsync","readAsync"),Or("readBinary","readBinary"),Or("setWindowTitle","setWindowTitle");var Me="IDBFS is no longer included by default; build with -lidbfs.js",Fe="PROXYFS is no longer included by default; build with -lproxyfs.js",se="WORKERFS is no longer included by default; build with -lworkerfs.js",Qt="NODEFS is no longer included by default; build with -lnodefs.js";O(!w,"shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");var dt;e.wasmBinary&&(dt=e.wasmBinary),Or("wasmBinary","wasmBinary");var Te=e.noExitRuntime||!0;Or("noExitRuntime","noExitRuntime"),typeof WebAssembly!="object"&&T("no native wasm support detected");var lr,yi=!1,hs;function O(l,u){l||T("Assertion failed"+(u?": "+u:""))}var wy,Ae,Dr,Qr,Al,F,ot,ia,sa;function El(){var l=lr.buffer;e.HEAP8=Ae=new Int8Array(l),e.HEAP16=Qr=new Int16Array(l),e.HEAP32=F=new Int32Array(l),e.HEAPU8=Dr=new Uint8Array(l),e.HEAPU16=Al=new Uint16Array(l),e.HEAPU32=ot=new Uint32Array(l),e.HEAPF32=ia=new Float32Array(l),e.HEAPF64=sa=new Float64Array(l)}O(!e.STACK_SIZE,"STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time"),O(typeof Int32Array<"u"&&typeof Float64Array<"u"&&Int32Array.prototype.subarray!=null&&Int32Array.prototype.set!=null,"JS engine does not provide full typed array support"),O(!e.wasmMemory,"Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally"),O(!e.INITIAL_MEMORY,"Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically");var xl;function Dd(){var l=wa();O((l&3)==0),l==0&&(l+=4),ot[l>>>2]=34821223,ot[l+4>>>2]=2310721022,ot[0]=1668509029}function bi(){if(!yi){var l=wa();l==0&&(l+=4);var u=ot[l>>>2],d=ot[l+4>>>2];(u!=34821223||d!=2310721022)&&T(`Stack overflow! Stack cookie has been overwritten at ${wi(l)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${wi(d)} ${wi(u)}`),ot[0]!=1668509029&&T("Runtime error: The application has corrupted its heap memory area (address zero)!")}}(function(){var l=new Int16Array(1),u=new Int8Array(l.buffer);if(l[0]=25459,u[0]!==115||u[1]!==99)throw"Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)"})();var oa=[],Dl=[],Bl=[],vy=[],Ol=[],aa=!1,Ml=0;function Rl(){return Te||Ml>0}function Bd(){if(e.preRun)for(typeof e.preRun=="function"&&(e.preRun=[e.preRun]);e.preRun.length;)Cd(e.preRun.shift());ps(oa)}function Od(){O(!aa),aa=!0,bi(),ps(Dl)}function Md(){bi(),ps(Bl)}function Rd(){if(bi(),e.postRun)for(typeof e.postRun=="function"&&(e.postRun=[e.postRun]);e.postRun.length;)Ud(e.postRun.shift());ps(Ol)}function Cd(l){oa.unshift(l)}function Ld(l){Dl.unshift(l)}function Sy(l){Bl.unshift(l)}function Iy(l){}function Ud(l){Ol.unshift(l)}O(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),O(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),O(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),O(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var Zr=0,gn=null,gi=null,Pn={};function Fy(l){for(var u=l;;){if(!Pn[l])return l;l=u+Math.random()}}function kd(l){Zr++,e.monitorRunDependencies&&e.monitorRunDependencies(Zr),l?(O(!Pn[l]),Pn[l]=1,gn===null&&typeof setInterval<"u"&&(gn=setInterval(()=>{if(yi){clearInterval(gn),gn=null;return}var u=!1;for(var d in Pn)u||(u=!0,A("still waiting on run dependencies:")),A("dependency: "+d);u&&A("(end of list)")},1e4))):A("warning: run dependency added without ID")}function Nd(l){if(Zr--,e.monitorRunDependencies&&e.monitorRunDependencies(Zr),l?(O(Pn[l]),delete Pn[l]):A("warning: run dependency removed without ID"),Zr==0&&(gn!==null&&(clearInterval(gn),gn=null),gi)){var u=gi;gi=null,u()}}function T(l){e.onAbort&&e.onAbort(l),l="Aborted("+l+")",A(l),yi=!0,hs=1;var u=new WebAssembly.RuntimeError(l);throw i(u),u}var jd="data:application/octet-stream;base64,";function Cl(l){return l.startsWith(jd)}function la(l){return l.startsWith("file://")}function m(l,u){return function(){var d=l,_=u;return u||(_=e.asm),O(aa,"native function `"+d+"` called before runtime initialization"),_[l]||O(_[l],"exported native function `"+d+"` not found"),_[l].apply(null,arguments)}}var Br;e.locateFile?(Br="./duckdb-mvp.wasm",Cl(Br)||(Br=it(Br))):Br=new URL("./duckdb-mvp.wasm",Jo.url).href;function Ll(l){try{if(l==Br&&dt)return new Uint8Array(dt);if(_t)return _t(l);throw"both async and sync fetching of the wasm failed"}catch(u){T(u)}}function Pd(l){return!dt&&(f||p)&&typeof fetch=="function"?fetch(l,{credentials:"same-origin"}).then(u=>{if(!u.ok)throw"failed to load wasm binary file at '"+l+"'";return u.arrayBuffer()}).catch(()=>Ll(l)):Promise.resolve().then(()=>Ll(l))}function Ul(l,u,d){return Pd(l).then(_=>WebAssembly.instantiate(_,u)).then(_=>_).then(d,_=>{A("failed to asynchronously prepare wasm: "+_),la(Br)&&A("warning: Loading from a file URI ("+Br+") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing"),T(_)})}function Hd(l,u,d,_){return!l&&typeof WebAssembly.instantiateStreaming=="function"&&!Cl(u)&&!y&&typeof fetch=="function"?fetch(u,{credentials:"same-origin"}).then(g=>{var E=WebAssembly.instantiateStreaming(g,d);return E.then(_,function(b){return A("wasm streaming compile failed: "+b),A("falling back to ArrayBuffer instantiation"),Ul(u,d,_)})}):Ul(u,d,_)}function Vd(){var l={env:ec,wasi_snapshot_preview1:ec};function u(g,E){var b=g.exports;return e.asm=b,lr=e.asm.memory,O(lr,"memory not found in wasm exports"),El(),xl=e.asm.__indirect_function_table,O(xl,"table not found in wasm exports"),Ld(e.asm.__wasm_call_ctors),Nd("wasm-instantiate"),b}kd("wasm-instantiate");var d=e;function _(g){O(e===d,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"),d=null,u(g.instance)}if(e.instantiateWasm)try{return e.instantiateWasm(l,u)}catch(g){A("Module.instantiateWasm callback failed with error: "+g),i(g)}return Hd(dt,Br,l,_).catch(i),{}}var Re,Hn;function Or(l,u){Object.getOwnPropertyDescriptor(e,l)||Object.defineProperty(e,l,{configurable:!0,get:function(){T("Module."+l+" has been replaced with plain "+u+" (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}})}function zd(l){Object.getOwnPropertyDescriptor(e,l)&&T("`Module."+l+"` was supplied but `"+l+"` not included in INCOMING_MODULE_JS_API")}function kl(l){return l==="FS_createPath"||l==="FS_createDataFile"||l==="FS_createPreloadedFile"||l==="FS_unlink"||l==="addRunDependency"||l==="FS_createLazyFile"||l==="FS_createDevice"||l==="removeRunDependency"}function Wd(l,u){typeof globalThis<"u"&&Object.defineProperty(globalThis,l,{configurable:!0,get:function(){cr("`"+l+"` is not longer defined by emscripten. "+u)}})}Wd("buffer","Please use HEAP8.buffer or wasmMemory.buffer");function Yd(l){typeof globalThis<"u"&&!Object.getOwnPropertyDescriptor(globalThis,l)&&Object.defineProperty(globalThis,l,{configurable:!0,get:function(){var u="`"+l+"` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line",d=l;d.startsWith("_")||(d="$"+l),u+=" (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE="+d+")",kl(l)&&(u+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),cr(u)}}),Nl(l)}function Nl(l){Object.getOwnPropertyDescriptor(e,l)||Object.defineProperty(e,l,{configurable:!0,get:function(){var u="'"+l+"' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";kl(l)&&(u+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),T(u)}})}function Ty(l){console.warn.apply(console,arguments)}function ca(l){this.name="ExitStatus",this.message=`Program terminated with exit(${l})`,this.status=l}function ps(l){for(;l.length>0;)l.shift()(e)}function Ay(l,u="i8"){switch(u.endsWith("*")&&(u="*"),u){case"i1":return Ae[l>>>0];case"i8":return Ae[l>>>0];case"i16":return Qr[l>>>1];case"i32":return F[l>>>2];case"i64":T("to do getValue(i64) use WASM_BIGINT");case"float":return ia[l>>>2];case"double":return sa[l>>>3];case"*":return ot[l>>>2];default:T(`invalid type for getValue: ${u}`)}}function wi(l){return O(typeof l=="number"),"0x"+l.toString(16).padStart(8,"0")}function Ey(l,u,d="i8"){switch(d.endsWith("*")&&(d="*"),d){case"i1":Ae[l>>>0]=u;break;case"i8":Ae[l>>>0]=u;break;case"i16":Qr[l>>>1]=u;break;case"i32":F[l>>>2]=u;break;case"i64":T("to do setValue(i64) use WASM_BIGINT");case"float":ia[l>>>2]=u;break;case"double":sa[l>>>3]=u;break;case"*":ot[l>>>2]=u;break;default:T(`invalid type for setValue: ${d}`)}}function cr(l){cr.shown||(cr.shown={}),cr.shown[l]||(cr.shown[l]=1,y&&(l="warning: "+l),A(l))}function Gd(){A("missing function: XML_GetBuffer"),T(-1)}function $d(){A("missing function: XML_GetErrorCode"),T(-1)}function Xd(){A("missing function: XML_Parse"),T(-1)}function Kd(){A("missing function: XML_ParseBuffer"),T(-1)}function Jd(){A("missing function: XML_ParserCreate"),T(-1)}function qd(){A("missing function: XML_ParserFree"),T(-1)}function Qd(){A("missing function: XML_ResumeParser"),T(-1)}function Zd(){A("missing function: XML_SetCharacterDataHandler"),T(-1)}function tf(){A("missing function: XML_SetElementHandler"),T(-1)}function ef(){A("missing function: XML_SetUserData"),T(-1)}function rf(){A("missing function: XML_StopParser"),T(-1)}function nf(l){this.excPtr=l,this.ptr=l-24,this.set_type=function(u){ot[this.ptr+4>>>2]=u},this.get_type=function(){return ot[this.ptr+4>>>2]},this.set_destructor=function(u){ot[this.ptr+8>>>2]=u},this.get_destructor=function(){return ot[this.ptr+8>>>2]},this.set_caught=function(u){u=u?1:0,Ae[this.ptr+12>>>0]=u},this.get_caught=function(){return Ae[this.ptr+12>>>0]!=0},this.set_rethrown=function(u){u=u?1:0,Ae[this.ptr+13>>>0]=u},this.get_rethrown=function(){return Ae[this.ptr+13>>>0]!=0},this.init=function(u,d){this.set_adjusted_ptr(0),this.set_type(u),this.set_destructor(d)},this.set_adjusted_ptr=function(u){ot[this.ptr+16>>>2]=u},this.get_adjusted_ptr=function(){return ot[this.ptr+16>>>2]},this.get_exception_ptr=function(){var u=fp(this.get_type());if(u)return ot[this.excPtr>>>2];var d=this.get_adjusted_ptr();return d!==0?d:this.excPtr}}var sf=0,of=0;function af(l,u,d){var _=new nf(l);_.init(u,d),sf=l,of++,O(!1,"Exception thrown, but exception catching is not enabled. Compile with -sNO_DISABLE_EXCEPTION_CATCHING or -sEXCEPTION_CATCHING_ALLOWED=[..] to catch.")}var jl="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function lf(l,u,d){T(jl)}var Pl=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function Hl(l,u,d){u>>>=0;for(var _=u+d,g=u;l[g]&&!(g>=_);)++g;if(g-u>16&&l.buffer&&Pl)return Pl.decode(l.subarray(u,g));for(var E="";u<g;){var b=l[u++];if(!(b&128)){E+=String.fromCharCode(b);continue}var I=l[u++]&63;if((b&224)==192){E+=String.fromCharCode((b&31)<<6|I);continue}var C=l[u++]&63;if((b&240)==224?b=(b&15)<<12|I<<6|C:((b&248)!=240&&cr("Invalid UTF-8 leading byte "+wi(b)+" encountered when deserializing a UTF-8 string in wasm memory to a JS string!"),b=(b&7)<<18|I<<12|C<<6|l[u++]&63),b<65536)E+=String.fromCharCode(b);else{var L=b-65536;E+=String.fromCharCode(55296|L>>10,56320|L&1023)}}return E}function wn(l,u){return O(typeof l=="number"),l>>>=0,l?Hl(Dr,l,u):""}var tn={varargs:void 0,get:function(){O(tn.varargs!=null),tn.varargs+=4;var l=F[tn.varargs-4>>>2];return l},getStr:function(l){var u=wn(l);return u}};function cf(l,u,d,_,g){O(l<=64,"nfds must be less than or equal to 64"),O(!_,"exceptfds not supported");for(var E=0,b=u?F[u>>>2]:0,I=u?F[u+4>>>2]:0,C=d?F[d>>>2]:0,L=d?F[d+4>>>2]:0,q=_?F[_>>>2]:0,At=_?F[_+4>>>2]:0,at=0,Le=0,bt=0,Ot=0,en=0,Mr=0,v=(u?F[u>>>2]:0)|(d?F[d>>>2]:0)|(_?F[_>>>2]:0),M=(u?F[u+4>>>2]:0)|(d?F[d+4>>>2]:0)|(_?F[_+4>>>2]:0),jt=function(bp,gp,wp,cc){return bp<32?gp&cc:wp&cc},ht=0;ht<l;ht++){var Ht=1<<ht%32;if(!!jt(ht,v,M,Ht)){var Zt=tn.getStreamFromFD(ht),vn=tn.DEFAULT_POLLMASK;Zt.stream_ops.poll&&(vn=Zt.stream_ops.poll(Zt)),vn&1&&jt(ht,b,I,Ht)&&(ht<32?at=at|Ht:Le=Le|Ht,E++),vn&4&&jt(ht,C,L,Ht)&&(ht<32?bt=bt|Ht:Ot=Ot|Ht,E++),vn&2&&jt(ht,q,At,Ht)&&(ht<32?en=en|Ht:Mr=Mr|Ht,E++)}}return u&&(F[u>>>2]=at,F[u+4>>>2]=Le),d&&(F[d>>>2]=bt,F[d+4>>>2]=Ot),_&&(F[_>>>2]=en,F[_+4>>>2]=Mr),E}function uf(){A("missing function: $SOCKFS"),T(-1)}function Vl(){A("missing function: $FS"),T(-1)}function vi(l){var u=uf.getSocket(l);if(!u)throw new Vl.ErrnoError(8);return u}function xy(l){return F[lp()>>>2]=l,l}var Dy={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};function ua(l){return(l&255)+"."+(l>>8&255)+"."+(l>>16&255)+"."+(l>>24&255)}function zl(l){var u="",d=0,_=0,g=0,E=0,b=0,I=0,C=[l[0]&65535,l[0]>>16,l[1]&65535,l[1]>>16,l[2]&65535,l[2]>>16,l[3]&65535,l[3]>>16],L=!0,q="";for(I=0;I<5;I++)if(C[I]!==0){L=!1;break}if(L){if(q=ua(C[6]|C[7]<<16),C[5]===-1)return u="::ffff:",u+=q,u;if(C[5]===0)return u="::",q==="0.0.0.0"&&(q=""),q==="0.0.0.1"&&(q="1"),u+=q,u}for(d=0;d<8;d++)C[d]===0&&(d-g>1&&(b=0),g=d,b++),b>_&&(_=b,E=d-_+1);for(d=0;d<8;d++){if(_>1&&C[d]===0&&d>=E&&d<E+_){d===E&&(u+=":",E===0&&(u+=":"));continue}u+=Number(rc(C[d]&65535)).toString(16),u+=d<7?":":""}return u}function Wl(l,u){var d=Qr[l>>>1],_=rc(Al[l+2>>>1]),g;switch(d){case 2:if(u!==16)return{errno:28};g=F[l+4>>>2],g=ua(g);break;case 10:if(u!==28)return{errno:28};g=[F[l+8>>>2],F[l+12>>>2],F[l+16>>>2],F[l+20>>>2]],g=zl(g);break;default:return{errno:5}}return{family:d,addr:g,port:_}}function _s(l){for(var u=l.split("."),d=0;d<4;d++){var _=Number(u[d]);if(isNaN(_))return null;u[d]=_}return(u[0]|u[1]<<8|u[2]<<16|u[3]<<24)>>>0}function ms(l){return parseInt(l)}function da(l){var u,d,_,g,E,b=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,I=[];if(!b.test(l))return null;if(l==="::")return[0,0,0,0,0,0,0,0];for(l.startsWith("::")?l=l.replace("::","Z:"):l=l.replace("::",":Z:"),l.indexOf(".")>0?(l=l.replace(new RegExp("[.]","g"),":"),u=l.split(":"),u[u.length-4]=ms(u[u.length-4])+ms(u[u.length-3])*256,u[u.length-3]=ms(u[u.length-2])+ms(u[u.length-1])*256,u=u.slice(0,u.length-2)):u=l.split(":"),_=0,g=0,d=0;d<u.length;d++)if(typeof u[d]=="string")if(u[d]==="Z"){for(g=0;g<8-u.length+1;g++)I[d+g]=0;_=g-1}else I[d+_]=ba(parseInt(u[d],16));else I[d+_]=u[d];return[I[1]<<16|I[0],I[3]<<16|I[2],I[5]<<16|I[4],I[7]<<16|I[6]]}var Ce={address_map:{id:1,addrs:{},names:{}},lookup_name:function(l){var u=_s(l);if(u!==null||(u=da(l),u!==null))return l;var d;if(Ce.address_map.addrs[l])d=Ce.address_map.addrs[l];else{var _=Ce.address_map.id++;O(_<65535,"exceeded max address mappings of 65535"),d="172.29."+(_&255)+"."+(_&65280),Ce.address_map.names[d]=l,Ce.address_map.addrs[l]=d}return d},lookup_addr:function(l){return Ce.address_map.names[l]?Ce.address_map.names[l]:null}};function Yl(l,u,d){if(d&&l===0)return null;var _=Wl(l,u);if(_.errno)throw new Vl.ErrnoError(_.errno);return _.addr=Ce.lookup_addr(_.addr)||_.addr,_}function df(l,u,d,_,g,E){var b=vi(l),I=Yl(u,d);return b.sock_ops.bind(b,I.addr,I.port),0}function ff(l,u,d,_,g,E){var b=vi(l),I=Yl(u,d);return b.sock_ops.connect(b,I.addr,I.port),0}function hf(l,u,d,_){T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function pf(l,u,d){return tn.varargs=d,0}function _f(l,u){T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function By(l,u){return O(l==l>>>0||l==(l|0)),O(u===(u|0)),u+2097152>>>0<4194305-!!l?(l>>>0)+u*4294967296:NaN}function mf(l,u,d){T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Gl(l,u,d,_){if(d>>>=0,O(typeof l=="string"),!(_>0))return 0;for(var g=d,E=d+_-1,b=0;b<l.length;++b){var I=l.charCodeAt(b);if(I>=55296&&I<=57343){var C=l.charCodeAt(++b);I=65536+((I&1023)<<10)|C&1023}if(I<=127){if(d>=E)break;u[d++>>>0]=I}else if(I<=2047){if(d+1>=E)break;u[d++>>>0]=192|I>>6,u[d++>>>0]=128|I&63}else if(I<=65535){if(d+2>=E)break;u[d++>>>0]=224|I>>12,u[d++>>>0]=128|I>>6&63,u[d++>>>0]=128|I&63}else{if(d+3>=E)break;I>1114111&&cr("Invalid Unicode code point "+wi(I)+" encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF)."),u[d++>>>0]=240|I>>18,u[d++>>>0]=128|I>>12&63,u[d++>>>0]=128|I>>6&63,u[d++>>>0]=128|I&63}}return u[d>>>0]=0,d-g}function ys(l,u,d){return O(typeof d=="number","stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),Gl(l,Dr,u,d)}function yf(l,u,d){T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function $l(l,u){return Dr.fill(0,l,l+u),l}function fa(l,u,d,_,g){switch(u){case 2:d=_s(d),$l(l,16),g&&(F[g>>>2]=16),Qr[l>>>1]=u,F[l+4>>>2]=d,Qr[l+2>>>1]=ba(_);break;case 10:d=da(d),$l(l,28),g&&(F[g>>>2]=28),F[l>>>2]=u,F[l+8>>>2]=d[0],F[l+12>>>2]=d[1],F[l+16>>>2]=d[2],F[l+20>>>2]=d[3],Qr[l+2>>>1]=ba(_);break;default:return 5}return 0}function bf(l,u,d,_,g,E){var b=vi(l);if(!b.daddr)return-53;var I=fa(u,b.family,Ce.lookup_name(b.daddr),b.dport,d);return O(!I),0}function gf(l,u,d,_,g,E){var b=vi(l);return u===1&&d===4?(F[_>>>2]=b.error,F[g>>>2]=4,b.error=null,0):-50}function wf(l,u,d){return tn.varargs=d,0}function vf(l,u){T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Sf(l,u,d){T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function If(l,u,d,_){T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Ff(l,u,d,_){tn.varargs=_,T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Tf(l,u,d,_,g,E){var b=vi(l),I=b.sock_ops.recvmsg(b,d);if(!I)return 0;if(g){var C=fa(g,b.family,Ce.lookup_name(I.addr),I.port,E);O(!C)}return Dr.set(I.buffer,u>>>0),I.buffer.byteLength}function Af(l,u,d,_){T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Ef(l){T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function xf(l,u,d,_,g,E){T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Df(l,u,d){T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Bf(l,u){T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Of(l,u,d){T("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}var Mf=!0;function Rf(){return Mf}function Cf(l){return ot[l>>>2]+F[l+4>>>2]*4294967296}function Si(l){return l%4===0&&(l%100!==0||l%400===0)}var Lf=[0,31,60,91,121,152,182,213,244,274,305,335],Uf=[0,31,59,90,120,151,181,212,243,273,304,334];function kf(l){var u=Si(l.getFullYear()),d=u?Lf:Uf,_=d[l.getMonth()]+l.getDate()-1;return _}function Nf(l,u){var d=new Date(Cf(l)*1e3);F[u>>>2]=d.getSeconds(),F[u+4>>>2]=d.getMinutes(),F[u+8>>>2]=d.getHours(),F[u+12>>>2]=d.getDate(),F[u+16>>>2]=d.getMonth(),F[u+20>>>2]=d.getFullYear()-1900,F[u+24>>>2]=d.getDay();var _=kf(d)|0;F[u+28>>>2]=_,F[u+36>>>2]=-(d.getTimezoneOffset()*60);var g=new Date(d.getFullYear(),0,1),E=new Date(d.getFullYear(),6,1).getTimezoneOffset(),b=g.getTimezoneOffset(),I=(E!=b&&d.getTimezoneOffset()==Math.min(b,E))|0;F[u+32>>>2]=I}function ha(l){for(var u=0,d=0;d<l.length;++d){var _=l.charCodeAt(d);_<=127?u++:_<=2047?u+=2:_>=55296&&_<=57343?(u+=4,++d):u+=3}return u}function Xl(l){var u=ha(l)+1,d=ga(u);return d&&ys(l,d,u),d}function jf(l,u,d){var _=new Date().getFullYear(),g=new Date(_,0,1),E=new Date(_,6,1),b=g.getTimezoneOffset(),I=E.getTimezoneOffset(),C=Math.max(b,I);ot[l>>>2]=C*60,F[u>>>2]=Number(b!=I);function L(bt){var Ot=bt.toTimeString().match(/\(([A-Za-z ]+)\)$/);return Ot?Ot[1]:"GMT"}var q=L(g),At=L(E),at=Xl(q),Le=Xl(At);I<b?(ot[d>>>2]=at,ot[d+4>>>2]=Le):(ot[d>>>2]=Le,ot[d+4>>>2]=at)}function Pf(){T("native code called abort()")}function Hf(l,u){T(jl)}function Vf(l,u){return globalThis.DUCKDB_RUNTIME.createDirectory(e,l,u)}function zf(l,u){return globalThis.DUCKDB_RUNTIME.checkDirectory(e,l,u)}function Wf(l,u){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(e,l,u)}function Yf(l,u){return globalThis.DUCKDB_RUNTIME.removeDirectory(e,l,u)}function Gf(l){return globalThis.DUCKDB_RUNTIME.closeFile(e,l)}function $f(l,u){return globalThis.DUCKDB_RUNTIME.checkFile(e,l,u)}function Xf(l){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(e,l)}function Kf(l,u,d,_){return globalThis.DUCKDB_RUNTIME.moveFile(e,l,u,d,_)}function Jf(l,u){return globalThis.DUCKDB_RUNTIME.openFile(e,l,u)}function qf(l,u,d,_){return globalThis.DUCKDB_RUNTIME.readFile(e,l,u,d,_)}function Qf(l,u){return globalThis.DUCKDB_RUNTIME.truncateFile(e,l,u)}function Zf(l,u,d,_){return globalThis.DUCKDB_RUNTIME.writeFile(e,l,u,d,_)}function th(l){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(l)}function eh(l,u){return globalThis.DUCKDB_RUNTIME.glob(e,l,u)}function rh(l){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(e,l)}function nh(l,u,d,_,g,E){return globalThis.DUCKDB_RUNTIME.callScalarUDF(e,l,u,d,_,g,E)}function ih(l){O(typeof l=="number"),console.error(wn(l))}function sh(){return Date.now()}function Kl(){return 4294901760}function oh(){return Kl()}var Jl;y&&(global.performance=qr("perf_hooks").performance),Jl=()=>performance.now();function ah(l,u,d){Dr.copyWithin(l>>>0,u>>>0,u+d>>>0)}function lh(l){var u=lr.buffer,d=l-u.byteLength+65535>>>16;try{return lr.grow(d),El(),1}catch(_){A(`emscripten_realloc_buffer: Attempted to grow heap from ${u.byteLength} bytes to ${l} bytes, but got error: ${_}`)}}function ch(l){var u=Dr.length;l=l>>>0,O(l>u);var d=Kl();if(l>d)return A(`Cannot enlarge memory, asked to go up to ${l} bytes, but the limit is ${d} bytes!`),!1;for(var _=(C,L)=>C+(L-C%L)%L,g=1;g<=4;g*=2){var E=u*(1+.2/g);E=Math.min(E,l+100663296);var b=Math.min(d,_(Math.max(l,E),65536)),I=lh(b);if(I)return!0}return A(`Failed to grow the heap from ${u} bytes to ${b} bytes, not enough memory!`),!1}var pa={};function uh(){return a||"./this.program"}function Ii(){if(!Ii.strings){var l=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",u={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:l,_:uh()};for(var d in pa)pa[d]===void 0?delete u[d]:u[d]=pa[d];var _=[];for(var d in u)_.push(`${d}=${u[d]}`);Ii.strings=_}return Ii.strings}function dh(l,u){for(var d=0;d<l.length;++d)O(l.charCodeAt(d)===(l.charCodeAt(d)&255)),Ae[u++>>>0]=l.charCodeAt(d);Ae[u>>>0]=0}function fh(l,u){var d=0;return Ii().forEach(function(_,g){var E=u+d;ot[l+g*4>>>2]=E,dh(_,E),d+=_.length+1}),0}function hh(l,u){var d=Ii();ot[l>>>2]=d.length;var _=0;return d.forEach(function(g){_+=g.length+1}),ot[u>>>2]=_,0}function ph(l){T("fd_close called without SYSCALLS_REQUIRE_FILESYSTEM")}function _h(l,u){var d=0,_=0,g=0;{O(l==0||l==1||l==2);var E=2;l==0?d=2:(l==1||l==2)&&(d=64),g=1}return Ae[u>>>0]=E,Qr[u+2>>>1]=g,Hn=[d>>>0,(Re=d,+Math.abs(Re)>=1?Re>0?+Math.floor(Re/4294967296)>>>0:~~+Math.ceil((Re-+(~~Re>>>0))/4294967296)>>>0:0)],F[u+8>>>2]=Hn[0],F[u+12>>>2]=Hn[1],Hn=[_>>>0,(Re=_,+Math.abs(Re)>=1?Re>0?+Math.floor(Re/4294967296)>>>0:~~+Math.ceil((Re-+(~~Re>>>0))/4294967296)>>>0:0)],F[u+16>>>2]=Hn[0],F[u+20>>>2]=Hn[1],0}function mh(l,u,d,_,g,E){T("fd_pread called without SYSCALLS_REQUIRE_FILESYSTEM")}function yh(l,u,d,_,g,E){T("fd_pwrite called without SYSCALLS_REQUIRE_FILESYSTEM")}function bh(l,u,d,_){T("fd_read called without SYSCALLS_REQUIRE_FILESYSTEM")}function gh(l,u,d,_,g){return 70}function wh(l){T("fd_sync called without SYSCALLS_REQUIRE_FILESYSTEM")}var _a=[null,[],[]];function ma(l,u){var d=_a[l];O(d),u===0||u===10?((l===1?nt:A)(Hl(d,0)),d.length=0):d.push(u)}function vh(){cp(0),_a[1].length&&ma(1,10),_a[2].length&&ma(2,10)}function Sh(l,u,d,_){for(var g=0,E=0;E<d;E++){var b=ot[u>>>2],I=ot[u+4>>>2];u+=8;for(var C=0;C<I;C++)ma(l,Dr[b+C>>>0]);g+=I}return ot[_>>>2]=g,0}function Ih(l,u,d,_){var g=[],E=null,b=0,I=0,C=0,L=0,q=0,At=0,at,Le;function bt(Ot,en,Mr,v,M,jt){var ht,Ht,Zt,vn;return Ht=Ot===10?28:16,M=Ot===10?zl(M):ua(M),ht=ga(Ht),vn=fa(ht,Ot,M,jt),O(!vn),Zt=ga(32),F[Zt+4>>>2]=Ot,F[Zt+8>>>2]=en,F[Zt+12>>>2]=Mr,ot[Zt+24>>>2]=v,ot[Zt+20>>>2]=ht,Ot===10?F[Zt+16>>>2]=28:F[Zt+16>>>2]=16,F[Zt+28>>>2]=0,Zt}if(d&&(C=F[d>>>2],L=F[d+4>>>2],q=F[d+8>>>2],At=F[d+12>>>2]),q&&!At&&(At=q===2?17:6),!q&&At&&(q=At===17?2:1),At===0&&(At=6),q===0&&(q=1),!l&&!u)return-2;if(C&-1088||d!==0&&F[d>>>2]&2&&!l)return-1;if(C&32)return-2;if(q!==0&&q!==1&&q!==2)return-7;if(L!==0&&L!==2&&L!==10)return-6;if(u&&(u=wn(u),I=parseInt(u,10),isNaN(I)))return C&1024?-2:-8;if(!l)return L===0&&(L=2),(C&1)===0&&(L===2?b=ya(2130706433):b=[0,0,0,1]),at=bt(L,q,At,null,b,I),ot[_>>>2]=at,0;if(l=wn(l),b=_s(l),b!==null)if(L===0||L===2)L=2;else if(L===10&&C&8)b=[0,0,ya(65535),b],L=10;else return-2;else if(b=da(l),b!==null)if(L===0||L===10)L=10;else return-2;return b!=null?(at=bt(L,q,At,l,b,I),ot[_>>>2]=at,0):C&4?-2:(l=Ce.lookup_name(l),b=_s(l),L===0?L=2:L===10&&(b=[0,0,ya(65535),b]),at=bt(L,q,At,null,b,I),ot[_>>>2]=at,0)}function Fh(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return _=>crypto.getRandomValues(_);if(y)try{var l=qr("crypto"),u=l.randomFillSync;if(u)return _=>l.randomFillSync(_);var d=l.randomBytes;return _=>(_.set(d(_.byteLength)),_)}catch(_){}T("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };")}function ql(l){return(ql=Fh())(l)}function Th(l,u){return ql(Dr.subarray(l>>>0,l+u>>>0)),0}function Ah(l,u,d,_,g,E,b){var I=Wl(l,u);if(I.errno)return-6;var C=I.port,L=I.addr,q=!1;if(d&&_){var At;if(b&1||!(At=Ce.lookup_addr(L))){if(b&8)return-2}else L=At;var at=ys(L,d,_);at+1>=_&&(q=!0)}if(g&&E){C=""+C;var at=ys(C,g,E);at+1>=E&&(q=!0)}return q?-12:0}function Eh(l,u){for(var d=0,_=0;_<=u;d+=l[_++]);return d}var Ql=[31,29,31,30,31,30,31,31,30,31,30,31],Zl=[31,28,31,30,31,30,31,31,30,31,30,31];function xh(l,u){for(var d=new Date(l.getTime());u>0;){var _=Si(d.getFullYear()),g=d.getMonth(),E=(_?Ql:Zl)[g];if(u>E-d.getDate())u-=E-d.getDate()+1,d.setDate(1),g<11?d.setMonth(g+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else return d.setDate(d.getDate()+u),d}return d}function Dh(l,u,d){var _=d>0?d:ha(l)+1,g=new Array(_),E=Gl(l,g,0,g.length);return u&&(g.length=E),g}function tc(l,u){O(l.length>=0,"writeArrayToMemory array must have a length (should be an array or typed array)"),Ae.set(l,u>>>0)}function Bh(l,u,d,_){var g=F[_+40>>>2],E={tm_sec:F[_>>>2],tm_min:F[_+4>>>2],tm_hour:F[_+8>>>2],tm_mday:F[_+12>>>2],tm_mon:F[_+16>>>2],tm_year:F[_+20>>>2],tm_wday:F[_+24>>>2],tm_yday:F[_+28>>>2],tm_isdst:F[_+32>>>2],tm_gmtoff:F[_+36>>>2],tm_zone:g?wn(g):""},b=wn(d),I={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var C in I)b=b.replace(new RegExp(C,"g"),I[C]);var L=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],q=["January","February","March","April","May","June","July","August","September","October","November","December"];function At(v,M,jt){for(var ht=typeof v=="number"?v.toString():v||"";ht.length<M;)ht=jt[0]+ht;return ht}function at(v,M){return At(v,M,"0")}function Le(v,M){function jt(Ht){return Ht<0?-1:Ht>0?1:0}var ht;return(ht=jt(v.getFullYear()-M.getFullYear()))===0&&(ht=jt(v.getMonth()-M.getMonth()))===0&&(ht=jt(v.getDate()-M.getDate())),ht}function bt(v){switch(v.getDay()){case 0:return new Date(v.getFullYear()-1,11,29);case 1:return v;case 2:return new Date(v.getFullYear(),0,3);case 3:return new Date(v.getFullYear(),0,2);case 4:return new Date(v.getFullYear(),0,1);case 5:return new Date(v.getFullYear()-1,11,31);case 6:return new Date(v.getFullYear()-1,11,30)}}function Ot(v){var M=xh(new Date(v.tm_year+1900,0,1),v.tm_yday),jt=new Date(M.getFullYear(),0,4),ht=new Date(M.getFullYear()+1,0,4),Ht=bt(jt),Zt=bt(ht);return Le(Ht,M)<=0?Le(Zt,M)<=0?M.getFullYear()+1:M.getFullYear():M.getFullYear()-1}var en={"%a":function(v){return L[v.tm_wday].substring(0,3)},"%A":function(v){return L[v.tm_wday]},"%b":function(v){return q[v.tm_mon].substring(0,3)},"%B":function(v){return q[v.tm_mon]},"%C":function(v){var M=v.tm_year+1900;return at(M/100|0,2)},"%d":function(v){return at(v.tm_mday,2)},"%e":function(v){return At(v.tm_mday,2," ")},"%g":function(v){return Ot(v).toString().substring(2)},"%G":function(v){return Ot(v)},"%H":function(v){return at(v.tm_hour,2)},"%I":function(v){var M=v.tm_hour;return M==0?M=12:M>12&&(M-=12),at(M,2)},"%j":function(v){return at(v.tm_mday+Eh(Si(v.tm_year+1900)?Ql:Zl,v.tm_mon-1),3)},"%m":function(v){return at(v.tm_mon+1,2)},"%M":function(v){return at(v.tm_min,2)},"%n":function(){return`
`},"%p":function(v){return v.tm_hour>=0&&v.tm_hour<12?"AM":"PM"},"%S":function(v){return at(v.tm_sec,2)},"%t":function(){return"	"},"%u":function(v){return v.tm_wday||7},"%U":function(v){var M=v.tm_yday+7-v.tm_wday;return at(Math.floor(M/7),2)},"%V":function(v){var M=Math.floor((v.tm_yday+7-(v.tm_wday+6)%7)/7);if((v.tm_wday+371-v.tm_yday-2)%7<=2&&M++,M){if(M==53){var ht=(v.tm_wday+371-v.tm_yday)%7;ht!=4&&(ht!=3||!Si(v.tm_year))&&(M=1)}}else{M=52;var jt=(v.tm_wday+7-v.tm_yday-1)%7;(jt==4||jt==5&&Si(v.tm_year%400-1))&&M++}return at(M,2)},"%w":function(v){return v.tm_wday},"%W":function(v){var M=v.tm_yday+7-(v.tm_wday+6)%7;return at(Math.floor(M/7),2)},"%y":function(v){return(v.tm_year+1900).toString().substring(2)},"%Y":function(v){return v.tm_year+1900},"%z":function(v){var M=v.tm_gmtoff,jt=M>=0;return M=Math.abs(M)/60,M=M/60*100+M%60,(jt?"+":"-")+String("0000"+M).slice(-4)},"%Z":function(v){return v.tm_zone},"%%":function(){return"%"}};b=b.replace(/%%/g,"\0\0");for(var C in en)b.includes(C)&&(b=b.replace(new RegExp(C,"g"),en[C](E)));b=b.replace(/\0\0/g,"%");var Mr=Dh(b,!1);return Mr.length>u?0:(tc(Mr,l),Mr.length-1)}function Oh(l,u,d,_,g){return Bh(l,u,d,_)}function Mh(){A("missing function: ucnv_close_64"),T(-1)}function Rh(){A("missing function: ucnv_convertEx_64"),T(-1)}function Ch(){A("missing function: ucnv_open_64"),T(-1)}function Lh(){A("missing function: ucnv_toAlgorithmic_64"),T(-1)}function Uh(){A("missing function: ucsdet_close_64"),T(-1)}function kh(){A("missing function: ucsdet_detect_64"),T(-1)}function Nh(){A("missing function: ucsdet_getConfidence_64"),T(-1)}function jh(){A("missing function: ucsdet_getName_64"),T(-1)}function Ph(){A("missing function: ucsdet_open_64"),T(-1)}function Hh(){A("missing function: ucsdet_setText_64"),T(-1)}function Vh(){A("missing function: unzClose"),T(-1)}function zh(){A("missing function: unzCloseCurrentFile"),T(-1)}function Wh(){A("missing function: unzGetCurrentFileInfo"),T(-1)}function Yh(){A("missing function: unzGetCurrentFileInfo64"),T(-1)}function Gh(){A("missing function: unzGetGlobalInfo"),T(-1)}function $h(){A("missing function: unzGoToFirstFile"),T(-1)}function Xh(){A("missing function: unzGoToNextFile"),T(-1)}function Kh(){A("missing function: unzLocateFile"),T(-1)}function Jh(){A("missing function: unzOpen"),T(-1)}function qh(){A("missing function: unzOpen2"),T(-1)}function Qh(){A("missing function: unzOpenCurrentFile"),T(-1)}function Zh(){A("missing function: unzReadCurrentFile"),T(-1)}function tp(l){hs=l,Rl()||(e.onExit&&e.onExit(l),yi=!0),c(l,new ca(l))}function ep(l,u){if(hs=l,yp(),Rl()&&!u){var d=`program exited (with status: ${l}), but keepRuntimeAlive() is set (counter=${Ml}) due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)`;i(d),A(d)}tp(l)}function rp(l){if(l instanceof ca||l=="unwind")return hs;bi(),l instanceof WebAssembly.RuntimeError&&oc()<=0&&A("Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to 65536)"),c(1,l)}function np(l){var u=e["_"+l];return O(u,"Cannot call unknown function "+l+", make sure it is exported"),u}function ip(l){var u=ha(l)+1,d=va(u);return ys(l,d,u),d}function sp(l,u,d,_,g){var E={string:bt=>{var Ot=0;return bt!=null&&bt!==0&&(Ot=ip(bt)),Ot},array:bt=>{var Ot=va(bt.length);return tc(bt,Ot),Ot}};function b(bt){return u==="string"?wn(bt):u==="boolean"?Boolean(bt):bt}var I=np(l),C=[],L=0;if(O(u!=="array",'Return type should not be "array".'),_)for(var q=0;q<_.length;q++){var At=E[d[q]];At?(L===0&&(L=ic()),C[q]=At(_[q])):C[q]=_[q]}var at=I.apply(null,C);function Le(bt){return L!==0&&sc(L),b(bt)}return at=Le(at),at}function op(){zd("fetchSettings")}var ec={XML_GetBuffer:Gd,XML_GetErrorCode:$d,XML_Parse:Xd,XML_ParseBuffer:Kd,XML_ParserCreate:Jd,XML_ParserFree:qd,XML_ResumeParser:Qd,XML_SetCharacterDataHandler:Zd,XML_SetElementHandler:tf,XML_SetUserData:ef,XML_StopParser:rf,__cxa_throw:af,__dlsym:lf,__syscall__newselect:cf,__syscall_bind:df,__syscall_connect:ff,__syscall_faccessat:hf,__syscall_fcntl64:pf,__syscall_fstat64:_f,__syscall_ftruncate64:mf,__syscall_getdents64:yf,__syscall_getpeername:bf,__syscall_getsockopt:gf,__syscall_ioctl:wf,__syscall_lstat64:vf,__syscall_mkdirat:Sf,__syscall_newfstatat:If,__syscall_openat:Ff,__syscall_recvfrom:Tf,__syscall_renameat:Af,__syscall_rmdir:Ef,__syscall_sendto:xf,__syscall_socket:Df,__syscall_stat64:Bf,__syscall_unlinkat:Of,_emscripten_get_now_is_monotonic:Rf,_localtime_js:Nf,_tzset_js:jf,abort:Pf,dlopen:Hf,duckdb_web_fs_directory_create:Vf,duckdb_web_fs_directory_exists:zf,duckdb_web_fs_directory_list_files:Wf,duckdb_web_fs_directory_remove:Yf,duckdb_web_fs_file_close:Gf,duckdb_web_fs_file_exists:$f,duckdb_web_fs_file_get_last_modified_time:Xf,duckdb_web_fs_file_move:Kf,duckdb_web_fs_file_open:Jf,duckdb_web_fs_file_read:qf,duckdb_web_fs_file_truncate:Qf,duckdb_web_fs_file_write:Zf,duckdb_web_fs_get_default_data_protocol:th,duckdb_web_fs_glob:eh,duckdb_web_test_platform_feature:rh,duckdb_web_udf_scalar_call:nh,emscripten_console_error:ih,emscripten_date_now:sh,emscripten_get_heap_max:oh,emscripten_get_now:Jl,emscripten_memcpy_big:ah,emscripten_resize_heap:ch,environ_get:fh,environ_sizes_get:hh,fd_close:ph,fd_fdstat_get:_h,fd_pread:mh,fd_pwrite:yh,fd_read:bh,fd_seek:gh,fd_sync:wh,fd_write:Sh,getaddrinfo:Ih,getentropy:Th,getnameinfo:Ah,strftime_l:Oh,ucnv_close_64:Mh,ucnv_convertEx_64:Rh,ucnv_open_64:Ch,ucnv_toAlgorithmic_64:Lh,ucsdet_close_64:Uh,ucsdet_detect_64:kh,ucsdet_getConfidence_64:Nh,ucsdet_getName_64:jh,ucsdet_open_64:Ph,ucsdet_setText_64:Hh,unzClose:Vh,unzCloseCurrentFile:zh,unzGetCurrentFileInfo:Wh,unzGetCurrentFileInfo64:Yh,unzGetGlobalInfo:Gh,unzGoToFirstFile:$h,unzGoToNextFile:Xh,unzLocateFile:Kh,unzOpen:Jh,unzOpen2:qh,unzOpenCurrentFile:Qh,unzReadCurrentFile:Zh},Oy=Vd(),My=m("__wasm_call_ctors"),ap=e._main=m("main"),Ry=e._duckdb_web_fs_glob_add_path=m("duckdb_web_fs_glob_add_path"),Cy=e._duckdb_web_clear_response=m("duckdb_web_clear_response"),Ly=e._duckdb_web_fail_with=m("duckdb_web_fail_with"),Uy=e._duckdb_web_reset=m("duckdb_web_reset"),ky=e._duckdb_web_connect=m("duckdb_web_connect"),Ny=e._duckdb_web_disconnect=m("duckdb_web_disconnect"),jy=e._duckdb_web_flush_files=m("duckdb_web_flush_files"),Py=e._duckdb_web_flush_file=m("duckdb_web_flush_file"),Hy=e._duckdb_web_open=m("duckdb_web_open"),Vy=e._duckdb_web_get_global_file_info=m("duckdb_web_get_global_file_info"),zy=e._duckdb_web_collect_file_stats=m("duckdb_web_collect_file_stats"),Wy=e._duckdb_web_export_file_stats=m("duckdb_web_export_file_stats"),Yy=e._duckdb_web_fs_drop_file=m("duckdb_web_fs_drop_file"),Gy=e._duckdb_web_fs_drop_files=m("duckdb_web_fs_drop_files"),$y=e._duckdb_web_fs_glob_file_infos=m("duckdb_web_fs_glob_file_infos"),Xy=e._duckdb_web_fs_get_file_info_by_id=m("duckdb_web_fs_get_file_info_by_id"),Ky=e._duckdb_web_fs_get_file_info_by_name=m("duckdb_web_fs_get_file_info_by_name"),Jy=e._duckdb_web_fs_register_file_url=m("duckdb_web_fs_register_file_url"),qy=e._duckdb_web_fs_register_file_buffer=m("duckdb_web_fs_register_file_buffer"),Qy=e._duckdb_web_copy_file_to_buffer=m("duckdb_web_copy_file_to_buffer"),Zy=e._duckdb_web_copy_file_to_path=m("duckdb_web_copy_file_to_path"),tb=e._duckdb_web_get_version=m("duckdb_web_get_version"),eb=e._duckdb_web_get_feature_flags=m("duckdb_web_get_feature_flags"),rb=e._duckdb_web_tokenize=m("duckdb_web_tokenize"),nb=e._duckdb_web_udf_scalar_create=m("duckdb_web_udf_scalar_create"),ib=e._duckdb_web_prepared_create=m("duckdb_web_prepared_create"),sb=e._duckdb_web_prepared_close=m("duckdb_web_prepared_close"),ob=e._duckdb_web_prepared_run=m("duckdb_web_prepared_run"),ab=e._duckdb_web_prepared_send=m("duckdb_web_prepared_send"),lb=e._duckdb_web_query_run=m("duckdb_web_query_run"),cb=e._duckdb_web_pending_query_start=m("duckdb_web_pending_query_start"),ub=e._duckdb_web_pending_query_poll=m("duckdb_web_pending_query_poll"),db=e._duckdb_web_pending_query_cancel=m("duckdb_web_pending_query_cancel"),fb=e._duckdb_web_query_fetch_results=m("duckdb_web_query_fetch_results"),hb=e._duckdb_web_get_tablenames=m("duckdb_web_get_tablenames"),pb=e._duckdb_web_insert_arrow_from_ipc_stream=m("duckdb_web_insert_arrow_from_ipc_stream"),_b=e._duckdb_web_insert_csv_from_path=m("duckdb_web_insert_csv_from_path"),mb=e._duckdb_web_insert_json_from_path=m("duckdb_web_insert_json_from_path"),lp=m("__errno_location"),cp=e._fflush=m("fflush"),ya=m("htonl"),ba=m("htons"),rc=m("ntohs"),ga=e._malloc=m("malloc"),yb=e._free=m("free"),nc=function(){return(nc=e.asm.emscripten_stack_init).apply(null,arguments)},up=function(){return(up=e.asm.emscripten_stack_get_free).apply(null,arguments)},dp=function(){return(dp=e.asm.emscripten_stack_get_base).apply(null,arguments)},wa=function(){return(wa=e.asm.emscripten_stack_get_end).apply(null,arguments)},ic=m("stackSave"),sc=m("stackRestore"),va=m("stackAlloc"),oc=function(){return(oc=e.asm.emscripten_stack_get_current).apply(null,arguments)},fp=m("__cxa_is_pointer_type"),bb=e.dynCall_jiji=m("dynCall_jiji"),gb=e.dynCall_iiiiij=m("dynCall_iiiiij"),wb=e.dynCall_iiiiijj=m("dynCall_iiiiijj"),vb=e.dynCall_iiiiiijj=m("dynCall_iiiiiijj"),Sb=e.dynCall_viijii=m("dynCall_viijii"),Ib=e.dynCall_viijji=m("dynCall_viijji"),Fb=e.dynCall_iiiji=m("dynCall_iiiji"),Tb=e.dynCall_ji=m("dynCall_ji"),Ab=e.dynCall_viij=m("dynCall_viij"),Eb=e.dynCall_vij=m("dynCall_vij"),xb=e.dynCall_vjjijij=m("dynCall_vjjijij"),Db=e.dynCall_vijjji=m("dynCall_vijjji"),Bb=e.dynCall_vjjii=m("dynCall_vjjii"),Ob=e.dynCall_viiiiiji=m("dynCall_viiiiiji"),Mb=e.dynCall_jiiiji=m("dynCall_jiiiji"),Rb=e.dynCall_jiiij=m("dynCall_jiiij"),Cb=e.dynCall_jijjij=m("dynCall_jijjij"),Lb=e.dynCall_iiij=m("dynCall_iiij"),Ub=e.dynCall_vijjj=m("dynCall_vijjj"),kb=e.dynCall_vijj=m("dynCall_vijj"),Nb=e.dynCall_viijj=m("dynCall_viijj"),jb=e.dynCall_jiijii=m("dynCall_jiijii"),Pb=e.dynCall_jijiii=m("dynCall_jijiii"),Hb=e.dynCall_viijiiiii=m("dynCall_viijiiiii"),Vb=e.dynCall_viijiiij=m("dynCall_viijiiij"),zb=e.dynCall_vijiiiji=m("dynCall_vijiiiji"),Wb=e.dynCall_viiiij=m("dynCall_viiiij"),Yb=e.dynCall_jiiji=m("dynCall_jiiji"),Gb=e.dynCall_viiijij=m("dynCall_viiijij"),$b=e.dynCall_viijiij=m("dynCall_viijiij"),Xb=e.dynCall_viiiiijj=m("dynCall_viiiiijj"),Kb=e.dynCall_viiijji=m("dynCall_viiijji"),Jb=e.dynCall_vijii=m("dynCall_vijii"),qb=e.dynCall_iiiiiji=m("dynCall_iiiiiji"),Qb=e.dynCall_iij=m("dynCall_iij"),Zb=e.dynCall_iiijj=m("dynCall_iiijj"),tg=e.dynCall_iijii=m("dynCall_iijii"),eg=e.dynCall_viji=m("dynCall_viji"),rg=e.dynCall_iiji=m("dynCall_iiji"),ng=e.dynCall_viijjj=m("dynCall_viijjj"),ig=e.dynCall_viiijj=m("dynCall_viiijj"),sg=e.dynCall_jijj=m("dynCall_jijj"),og=e.dynCall_jiiiii=m("dynCall_jiiiii"),ag=e.dynCall_jiiii=m("dynCall_jiiii"),lg=e.dynCall_jii=m("dynCall_jii"),cg=e.dynCall_viijij=m("dynCall_viijij"),ug=e.dynCall_viiij=m("dynCall_viiij"),dg=e.dynCall_j=m("dynCall_j"),fg=e.dynCall_viiijiiiijj=m("dynCall_viiijiiiijj"),hg=e.dynCall_jiiiij=m("dynCall_jiiiij"),pg=e.dynCall_jj=m("dynCall_jj"),_g=e.dynCall_ij=m("dynCall_ij"),mg=e.dynCall_ijjj=m("dynCall_ijjj"),yg=e.dynCall_jjjd=m("dynCall_jjjd"),bg=e.dynCall_jjjjjjd=m("dynCall_jjjjjjd"),gg=e.dynCall_jij=m("dynCall_jij"),wg=e.dynCall_viiijiiijii=m("dynCall_viiijiiijii"),vg=e.dynCall_viijijiiii=m("dynCall_viijijiiii"),Sg=e.dynCall_viiji=m("dynCall_viiji"),Ig=e.dynCall_jiiiijj=m("dynCall_jiiiijj"),Fg=e.dynCall_viiiji=m("dynCall_viiiji"),Tg=e.dynCall_viiiiji=m("dynCall_viiiiji"),Ag=e.dynCall_jijiiii=m("dynCall_jijiiii"),Eg=e.dynCall_viiijiji=m("dynCall_viiijiji"),xg=e.dynCall_viijiji=m("dynCall_viijiji"),Dg=e.dynCall_jiii=m("dynCall_jiii");e.stackAlloc=va,e.stackSave=ic,e.stackRestore=sc,e.ccall=sp;var hp=["getHostByName","traverseStack","getCallstack","emscriptenLog","convertPCtoSourceLocation","readEmAsmArgs","jstoi_s","listenOnce","autoResumeAudioContext","dynCallLegacy","getDynCaller","dynCall","runtimeKeepalivePush","runtimeKeepalivePop","callUserCallback","maybeExit","safeSetTimeout","asmjsMangle","asyncLoad","alignMemory","mmapAlloc","HandleAllocator","getNativeTypeSize","STACK_SIZE","STACK_ALIGN","POINTER_SIZE","ASSERTIONS","writeI53ToI64","writeI53ToI64Clamped","writeI53ToI64Signaling","writeI53ToU64Clamped","writeI53ToU64Signaling","readI53FromU64","convertI32PairToI53","convertU32PairToI53","cwrap","uleb128Encode","sigToWasmTypes","generateFuncType","convertJsFunctionToWasm","getEmptyTableSlot","updateTableMap","getFunctionAddress","addFunction","removeFunction","reallyNegative","unSign","strLen","reSign","formatString","intArrayToString","AsciiToString","UTF16ToString","stringToUTF16","lengthBytesUTF16","UTF32ToString","stringToUTF32","lengthBytesUTF32","registerKeyEventCallback","maybeCStringToJsString","findEventTarget","findCanvasEventTarget","getBoundingClientRect","fillMouseEventData","registerMouseEventCallback","registerWheelEventCallback","registerUiEventCallback","registerFocusEventCallback","fillDeviceOrientationEventData","registerDeviceOrientationEventCallback","fillDeviceMotionEventData","registerDeviceMotionEventCallback","screenOrientation","fillOrientationChangeEventData","registerOrientationChangeEventCallback","fillFullscreenChangeEventData","registerFullscreenChangeEventCallback","JSEvents_requestFullscreen","JSEvents_resizeCanvasForFullscreen","registerRestoreOldStyle","hideEverythingExceptGivenElement","restoreHiddenElements","setLetterbox","softFullscreenResizeWebGLRenderTarget","doRequestFullscreen","fillPointerlockChangeEventData","registerPointerlockChangeEventCallback","registerPointerlockErrorEventCallback","requestPointerLock","fillVisibilityChangeEventData","registerVisibilityChangeEventCallback","registerTouchEventCallback","fillGamepadEventData","registerGamepadEventCallback","registerBeforeUnloadEventCallback","fillBatteryEventData","battery","registerBatteryEventCallback","setCanvasElementSize","getCanvasElementSize","demangle","demangleAll","jsStackTrace","stackTrace","checkWasiClock","wasiRightsToMuslOFlags","wasiOFlagsToMuslOFlags","createDyncallWrapper","setImmediateWrapped","clearImmediateWrapped","polyfillSetImmediate","getPromise","makePromise","idsToPromises","makePromiseCallback","setMainLoop","heapObjectForWebGLType","heapAccessShiftForWebGLHeap","webgl_enable_ANGLE_instanced_arrays","webgl_enable_OES_vertex_array_object","webgl_enable_WEBGL_draw_buffers","webgl_enable_WEBGL_multi_draw","emscriptenWebGLGet","computeUnpackAlignedImageSize","colorChannelsInGlTextureFormat","emscriptenWebGLGetTexPixelData","__glGenObject","emscriptenWebGLGetUniform","webglGetUniformLocation","webglPrepareUniformLocationsBeforeFirstUse","webglGetLeftBracePos","emscriptenWebGLGetVertexAttrib","__glGetActiveAttribOrUniform","writeGLArray","registerWebGlEventCallback","runAndAbortIfError","SDL_unicode","SDL_ttfContext","SDL_audio","GLFW_Window","ALLOC_NORMAL","ALLOC_STACK","allocate","writeStringToMemory","writeAsciiToMemory"];hp.forEach(Yd);var pp=["run","addOnPreRun","addOnInit","addOnPreMain","addOnExit","addOnPostRun","addRunDependency","removeRunDependency","FS_createFolder","FS_createPath","FS_createDataFile","FS_createLazyFile","FS_createLink","FS_createDevice","FS_unlink","out","err","callMain","abort","keepRuntimeAlive","wasmMemory","getTempRet0","setTempRet0","writeStackCookie","checkStackCookie","ptrToString","zeroMemory","exitJS","getHeapMax","emscripten_realloc_buffer","ENV","MONTH_DAYS_REGULAR","MONTH_DAYS_LEAP","MONTH_DAYS_REGULAR_CUMULATIVE","MONTH_DAYS_LEAP_CUMULATIVE","isLeapYear","ydayFromDate","arraySum","addDays","ERRNO_CODES","ERRNO_MESSAGES","setErrNo","inetPton4","inetNtop4","inetPton6","inetNtop6","readSockaddr","writeSockaddr","DNS","Protocols","Sockets","initRandomFill","randomFill","timers","warnOnce","UNWIND_CACHE","readEmAsmArgsArray","jstoi_q","getExecutableName","handleException","readI53FromI64","convertI32PairToI53Checked","getCFunc","freeTableIndexes","functionsInTableMap","setValue","getValue","PATH","PATH_FS","UTF8Decoder","UTF8ArrayToString","UTF8ToString","stringToUTF8Array","stringToUTF8","lengthBytesUTF8","intArrayFromString","stringToAscii","UTF16Decoder","stringToNewUTF8","stringToUTF8OnStack","writeArrayToMemory","JSEvents","specialHTMLTargets","currentFullscreenStrategy","restoreOldWindowedStyle","ExitStatus","getEnvStrings","flush_NO_FILESYSTEM","dlopenMissingError","promiseMap","uncaughtExceptionCount","exceptionLast","exceptionCaught","ExceptionInfo","Browser","wget","SYSCALLS","getSocketFromFD","getSocketAddress","tempFixedLengthArray","miniTempWebGLFloatBuffers","miniTempWebGLIntBuffers","GL","emscripten_webgl_power_preferences","AL","GLUT","EGL","GLEW","IDBStore","SDL","SDL_gfx","GLFW","allocateUTF8","allocateUTF8OnStack","SOCKFS","FS"];pp.forEach(Nl);var bs;gi=function l(){bs||ac(),bs||(gi=l)};function _p(){O(Zr==0,'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])'),O(oa.length==0,"cannot call main when preRun functions remain to be called");var l=ap,u=0,d=0;try{var _=l(u,d);return ep(_,!0),_}catch(g){return rp(g)}}function mp(){nc(),Dd()}function ac(){if(Zr>0||(mp(),Bd(),Zr>0))return;function l(){bs||(bs=!0,e.calledRun=!0,!yi&&(Od(),Md(),n(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),lc&&_p(),Rd()))}e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1),l()},1)):l(),bi()}function yp(){var l=nt,u=A,d=!1;nt=A=_=>{d=!0};try{vh()}catch(_){}nt=l,A=u,d&&(cr("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc."),cr("(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)"))}if(e.preInit)for(typeof e.preInit=="function"&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();var lc=!0;return e.noInitialRun&&(lc=!1),ac(),t.ready}})(),gd=uy;var qo=class{constructor(t,e){this._bindings=t,this._conn=e}close(){this._bindings.disconnect(this._conn)}useUnsafe(t){return t(this._bindings,this._conn)}query(t){let e=this._bindings.runQuery(this._conn,t),n=Ct.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new Bt(n)}async send(t){let e=this._bindings.startPendingQuery(this._conn,t);for(;e==null;)e=await new Promise((s,o)=>{try{s(this._bindings.pollPendingQuery(this._conn))}catch(a){o(a)}});let n=new Qo(this._bindings,this._conn,e),i=Ct.from(n);return console.assert(i.isSync()),console.assert(i.isStream()),i}cancelSent(){return this._bindings.cancelPendingQuery(this._conn)}getTableNames(t){return this._bindings.getTableNames(this._conn,t)}prepare(t){let e=this._bindings.createPrepared(this._conn,t);return new vl(this._bindings,this._conn,e)}createScalarFunction(t,e,n){this._bindings.createScalarFunction(this._conn,t,e,n)}insertArrowTable(t,e){let n=$o(t,"stream");this.insertArrowFromIPCStream(n,e)}insertArrowFromIPCStream(t,e){this._bindings.insertArrowFromIPCStream(this._conn,t,e)}insertCSVFromPath(t,e){this._bindings.insertCSVFromPath(this._conn,t,e)}insertJSONFromPath(t,e){this._bindings.insertJSONFromPath(this._conn,t,e)}},Qo=class{constructor(t,e,n){this.bindings=t;this.conn=e;this.header=n;this._first=!0,this._depleted=!1}next(){if(this._first)return this._first=!1,{done:!1,value:this.header};if(this._depleted)return{done:!0,value:null};let t=this.bindings.fetchQueryResults(this.conn);return this._depleted=t.length==0,{done:this._depleted,value:t}}[Symbol.iterator](){return this}},vl=class{constructor(t,e,n){this.bindings=t,this.connectionId=e,this.statementId=n}close(){this.bindings.closePrepared(this.connectionId,this.statementId)}query(...t){let e=this.bindings.runPrepared(this.connectionId,this.statementId,t),n=Ct.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new Bt(n)}send(...t){let e=this.bindings.sendPrepared(this.connectionId,this.statementId,t),n=new Qo(this.bindings,this.connectionId,e),i=Ct.from(n);return console.assert(i.isSync()),console.assert(i.isStream()),i}};var Sd=new TextEncoder,wd=new TextDecoder("utf-8");function Sl(r,t,e){let n=Sd.encode(e),i=r._malloc(n.byteLength),s=r.HEAPU8.subarray(i,i+n.byteLength);s.set(n),r.HEAPF64[(t>>3)+0]=1,r.HEAPF64[(t>>3)+1]=i,r.HEAPF64[(t>>3)+2]=s.byteLength}function Fl(r){switch(r){case"UINT8":case"INT8":return 1;case"INT32":case"FLOAT":return 4;case"INT64":case"UINT64":case"DOUBLE":case"VARCHAR":return 8;default:return 0}}function Il(r,t,e,n){let i=r.HEAPU8.subarray(t,t+n*Fl(e));switch(e){case"UINT8":return new Uint8Array(i.buffer,i.byteOffset,n);case"INT8":return new Int8Array(i.buffer,i.byteOffset,n);case"INT32":return new Int32Array(i.buffer,i.byteOffset,n);case"FLOAT":return new Float32Array(i.buffer,i.byteOffset,n);case"DOUBLE":return new Float64Array(i.buffer,i.byteOffset,n);case"VARCHAR":return new Float64Array(i.buffer,i.byteOffset,n);default:return new Array(0)}}function vd(r,t,e){let n=r.HEAPU8.subarray(t,t+e);return new Uint8Array(n.buffer,n.byteOffset,e)}function Zo(r,t,e){let n=r.HEAPU8.subarray(t,t+e*8);return new Float64Array(n.buffer,n.byteOffset,e)}function Id(r,t,e,n,i,s,o,a){try{let c=r._udfFunctions.get(n);if(!c){Sl(t,e,"Unknown UDF with id: "+n);return}let f=wd.decode(t.HEAPU8.subarray(i,i+s)),p=JSON.parse(f),y=Zo(t,o,a/8),w=nt=>{var Me;let A=null;switch(nt.validityBuffer!==void 0&&(A=vd(t,y[nt.validityBuffer],p.rows)),nt.physicalType){case"VARCHAR":{if(nt.dataBuffer===null||nt.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for VARCHAR argument");if(nt.lengthBuffer===null||nt.lengthBuffer===void 0)throw new Error("malformed data view, expected data length buffer for VARCHAR argument");let Fe=Il(t,y[nt.dataBuffer],nt.physicalType,p.rows),se=[],Qt=Zo(t,y[nt.lengthBuffer],p.rows);for(let dt=0;dt<p.rows;++dt){if(A!=null&&!A[dt]){se.push(null);continue}let Te=t.HEAPU8.subarray(Fe[dt],Fe[dt]+Qt[dt]),lr=wd.decode(Te);se.push(lr)}return dt=>se[dt]}case"STRUCT":{let Fe={},se=[];for(let Qt=0;Qt<(((Me=nt.children)==null?void 0:Me.length)||0);++Qt){let dt=nt.children[Qt],Te=w(dt);se.push(lr=>{Fe[dt.name]=Te(lr)})}return A!=null?Qt=>{if(!A[Qt])return null;for(let dt of se)dt(Qt);return Fe}:Qt=>{for(let dt of se)dt(Qt);return Fe}}default:{if(nt.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for argument of type: "+nt.physicalType);let Fe=Il(t,y[nt.dataBuffer],nt.physicalType,p.rows);return A!=null?se=>A[se]?Fe[se]:null:se=>Fe[se]}}},S=[];for(let nt=0;nt<p.args.length;++nt)S.push(w(p.args[nt]));let it=p.rows*Fl(p.ret.physicalType),et=t._malloc(it),yt=Il(t,et,p.ret.physicalType,p.rows),_t=t._malloc(p.rows),ie=vd(t,_t,p.rows);if(yt.length==0||ie.length==0){Sl(t,e,"Can't create physical arrays for result");return}let Ie=yt;p.ret.physicalType=="VARCHAR"&&(Ie=new Array(p.rows));let xr=[];for(let nt=0;nt<p.args.length;++nt)xr.push(null);for(let nt=0;nt<p.rows;++nt){for(let Me=0;Me<p.args.length;++Me)xr[Me]=S[Me](nt);let A=c.func(...xr);Ie[nt]=A,ie[nt]=A==null?0:1}let fs=0;switch(p.ret.physicalType){case"VARCHAR":{let nt=new Array(0);fs=t._malloc(p.rows*Fl("DOUBLE"));let A=Zo(t,fs,p.rows),Me=0;for(let dt=0;dt<p.rows;++dt){let Te=Sd.encode(Ie[dt]||"");nt.push(Te),A[dt]=Te.length,Me+=Te.length}let Fe=t._malloc(Me),se=t.HEAPU8.subarray(Fe,Fe+Me),Qt=0;for(let dt=0;dt<p.rows;++dt){yt[dt]=Qt;let Te=nt[dt];se.subarray(Qt,Qt+Te.length).set(Te),Qt+=Te.length}}}let qr=3*8,mi=t._malloc(qr),bn=Zo(t,mi,3);bn[0]=et,bn[1]=_t,bn[2]=fs,t.HEAPF64[(e>>3)+0]=0,t.HEAPF64[(e>>3)+1]=mi,t.HEAPF64[(e>>3)+2]=0}catch(c){Sl(t,e,c.toString())}}function fy(){let r=new TextDecoder;return t=>(typeof SharedArrayBuffer<"u"&&t.buffer instanceof SharedArrayBuffer&&(t=new Uint8Array(t)),r.decode(t))}var hy=fy();function ar(r,t){console.error(`FAIL WITH: ${t}`),r.ccall("duckdb_web_fail_with",null,["string"],[t])}function jn(r,t,e){let n=r.HEAPU8.subarray(t,t+e),i=new Uint8Array(new ArrayBuffer(n.byteLength));return i.set(n),i}function $(r,t,e){return hy(r.HEAPU8.subarray(t,t+e))}function ft(r,t,e,n){let i=r.stackSave(),s=r.stackAlloc(3*8);e.unshift("number"),n.unshift(s),r.ccall(t,null,e,n);let o=r.HEAPF64[(s>>3)+0],a=r.HEAPF64[(s>>3)+1],c=r.HEAPF64[(s>>3)+2];return r.stackRestore(i),[o,a,c]}function St(r){r.ccall("duckdb_web_clear_response",null,[],[])}var ta=class{constructor(t){let e=new Float64Array(t.buffer,t.byteOffset,t.byteLength/8),n=new Uint8Array(new ArrayBuffer(t.byteLength));n.set(t.subarray(7*8)),this.totalFileReadsCold=e[0],this.totalFileReadsAhead=e[1],this.totalFileReadsCached=e[2],this.totalFileWrites=e[3],this.totalPageAccesses=e[4],this.totalPageLoads=e[5],this.blockSize=e[6],this.blockStats=n}getBlockStats(t,e){return e=e||{file_reads_cold:0,file_reads_ahead:0,file_reads_cached:0,file_writes:0,page_accesses:0,page_loads:0},e.file_writes=this.blockStats[t*3+0]&15,e.file_reads_cold=this.blockStats[t*3+0]>>4,e.file_reads_ahead=this.blockStats[t*3+1]&15,e.file_reads_cached=this.blockStats[t*3+1]>>4,e.page_accesses=this.blockStats[t*3+1]&15,e.page_loads=this.blockStats[t*3+1]>>4,e}};var py=new TextEncoder;var ea=class{constructor(t,e){this._instance=null;this._initPromise=null;this._initPromiseResolver=()=>{};this.onInstantiationProgress=[];this._logger=t,this._runtime=e,this._nextUDFId=1}get logger(){return this._logger}get mod(){return this._instance}get pthread(){return this.mod.PThread||null}async instantiate(t=e=>{}){return this._instance!=null?this:(this._initPromise!=null&&(this.onInstantiationProgress.push(t),await this._initPromise),this._initPromise=new Promise(e=>{this._initPromiseResolver=e}),this.onInstantiationProgress=[t],this._instance=await this.instantiateImpl({print:console.log.bind(console),printErr:console.log.bind(console),onRuntimeInitialized:this._initPromiseResolver}),await this._initPromise,this._initPromise=null,this.onInstantiationProgress=this.onInstantiationProgress.filter(e=>e!=t),this)}open(t){let[e,n,i]=ft(this.mod,"duckdb_web_open",["string"],[JSON.stringify(t)]);if(e!==0)throw new Error($(this.mod,n,i));St(this.mod)}reset(){let[t,e,n]=ft(this.mod,"duckdb_web_reset",[],[]);if(t!==0)throw new Error($(this.mod,e,n));St(this.mod)}getVersion(){let[t,e,n]=ft(this.mod,"duckdb_web_get_version",[],[]);if(t!==0)throw new Error($(this.mod,e,n));let i=$(this.mod,e,n);return St(this.mod),i}getFeatureFlags(){return this.mod.ccall("duckdb_web_get_feature_flags","number",[],[])}tokenize(t){let[e,n,i]=ft(this.mod,"duckdb_web_tokenize",["string"],[t]);if(e!==0)throw new Error($(this.mod,n,i));let s=$(this.mod,n,i);return St(this.mod),JSON.parse(s)}connect(){let t=this.mod.ccall("duckdb_web_connect","number",[],[]);return new qo(this,t)}disconnect(t){if(this.mod.ccall("duckdb_web_disconnect",null,["number"],[t]),this.pthread)for(let e of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])e.postMessage({cmd:"dropUDFFunctions",connectionId:t})}runQuery(t,e){let[n,i,s]=ft(this.mod,"duckdb_web_query_run",["number","string"],[t,e]);if(n!==0)throw new Error($(this.mod,i,s));let o=jn(this.mod,i,s);return St(this.mod),o}startPendingQuery(t,e){let[n,i,s]=ft(this.mod,"duckdb_web_pending_query_start",["number","string"],[t,e]);if(n!==0)throw new Error($(this.mod,i,s));if(i==0)return null;let o=jn(this.mod,i,s);return St(this.mod),o}pollPendingQuery(t){let[e,n,i]=ft(this.mod,"duckdb_web_pending_query_poll",["number"],[t]);if(e!==0)throw new Error($(this.mod,n,i));if(n==0)return null;let s=jn(this.mod,n,i);return St(this.mod),s}cancelPendingQuery(t){return this.mod.ccall("duckdb_web_pending_query_cancel","boolean",["number"],[t])}fetchQueryResults(t){let[e,n,i]=ft(this.mod,"duckdb_web_query_fetch_results",["number"],[t]);if(e!==0)throw new Error($(this.mod,n,i));let s=jn(this.mod,n,i);return St(this.mod),s}getTableNames(t,e){let[n,i,s]=ft(this.mod,"duckdb_web_get_tablenames",["number","string"],[t,e]);if(n!==0)throw new Error($(this.mod,i,s));let o=$(this.mod,i,s);return St(this.mod),JSON.parse(o)}createScalarFunction(t,e,n,i){let s={functionId:this._nextUDFId,name:e,returnType:_i(n)},o={functionId:s.functionId,connectionId:t,name:e,returnType:n,func:i};this._nextUDFId+=1;let[a,c,f]=ft(this.mod,"duckdb_web_udf_scalar_create",["number","string"],[t,JSON.stringify(s)]);if(a!==0)throw new Error($(this.mod,c,f));if(St(this.mod),globalThis.DUCKDB_RUNTIME._udfFunctions=(globalThis.DUCKDB_RUNTIME._udfFunctions||new Map).set(o.functionId,o),this.pthread)for(let p of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])p.postMessage({cmd:"registerUDFFunction",udf:o})}createPrepared(t,e){let[n,i,s]=ft(this.mod,"duckdb_web_prepared_create",["number","string"],[t,e]);if(n!==0)throw new Error($(this.mod,i,s));return St(this.mod),i}closePrepared(t,e){let[n,i,s]=ft(this.mod,"duckdb_web_prepared_close",["number","number"],[t,e]);if(n!==0)throw new Error($(this.mod,i,s));St(this.mod)}runPrepared(t,e,n){let[i,s,o]=ft(this.mod,"duckdb_web_prepared_run",["number","number","string"],[t,e,JSON.stringify(n)]);if(i!==0)throw new Error($(this.mod,s,o));let a=jn(this.mod,s,o);return St(this.mod),a}sendPrepared(t,e,n){let[i,s,o]=ft(this.mod,"duckdb_web_prepared_send",["number","number","string"],[t,e,JSON.stringify(n)]);if(i!==0)throw new Error($(this.mod,s,o));let a=jn(this.mod,s,o);return St(this.mod),a}insertArrowFromIPCStream(t,e,n){if(e.length==0)return;let i=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(i,i+e.length).set(e);let o=n?JSON.stringify(n):"",[a,c,f]=ft(this.mod,"duckdb_web_insert_arrow_from_ipc_stream",["number","number","number","string"],[t,i,e.length,o]);if(a!==0)throw new Error($(this.mod,c,f))}insertCSVFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let f in n.columns)n.columnsFlat.push(Xo(f,n.columns[f]))}let i={...n};i.columns=i.columnsFlat,delete i.columnsFlat;let s=JSON.stringify(i),[o,a,c]=ft(this.mod,"duckdb_web_insert_csv_from_path",["number","string","string"],[t,e,s]);if(o!==0)throw new Error($(this.mod,a,c))}insertJSONFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let f in n.columns)n.columnsFlat.push(Xo(f,n.columns[f]))}let i={...n};i.columns=i.columnsFlat,delete i.columnsFlat;let s=JSON.stringify(i),[o,a,c]=ft(this.mod,"duckdb_web_insert_json_from_path",["number","string","string"],[t,e,s]);if(o!==0)throw new Error($(this.mod,a,c))}globFiles(t){let[e,n,i]=ft(this.mod,"duckdb_web_fs_glob_file_infos",["string"],[t]);if(e!==0)throw new Error($(this.mod,n,i));let s=$(this.mod,n,i);St(this.mod);let o=JSON.parse(s);return o==null?[]:o}registerFileURL(t,e,n,i=!1){e===void 0&&(e=t);let[s,o,a]=ft(this.mod,"duckdb_web_fs_register_file_url",["string","string"],[t,e,n,i]);if(s!==0)throw new Error($(this.mod,o,a));St(this.mod)}registerFileText(t,e){let n=py.encode(e);this.registerFileBuffer(t,n)}registerFileBuffer(t,e){let n=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(n,n+e.length).set(e);let[s,o,a]=ft(this.mod,"duckdb_web_fs_register_file_buffer",["string","number","number"],[t,n,e.length]);if(s!==0)throw new Error($(this.mod,o,a));St(this.mod)}registerFileHandle(t,e,n,i){let[s,o,a]=ft(this.mod,"duckdb_web_fs_register_file_url",["string","string","number","boolean"],[t,t,n,i]);if(s!==0)throw new Error($(this.mod,o,a));if(St(this.mod),globalThis.DUCKDB_RUNTIME._files=(globalThis.DUCKDB_RUNTIME._files||new Map).set(t,e),this.pthread){for(let c of this.pthread.runningWorkers)c.postMessage({cmd:"registerFileHandle",fileName:t,fileHandle:e});for(let c of this.pthread.unusedWorkers)c.postMessage({cmd:"dropFileHandle",fileName:t})}}dropFile(t){let[e,n,i]=ft(this.mod,"duckdb_web_fs_drop_file",["string"],[t]);if(e!==0)throw new Error($(this.mod,n,i));St(this.mod)}dropFiles(){let[t,e,n]=ft(this.mod,"duckdb_web_fs_drop_files",[],[]);if(t!==0)throw new Error($(this.mod,e,n));St(this.mod)}flushFiles(){this.mod.ccall("duckdb_web_flush_files",null,[],[])}copyFileToPath(t,e){let[n,i,s]=ft(this.mod,"duckdb_web_copy_file_to_path",["string","string"],[t,e]);if(n!==0)throw new Error($(this.mod,i,s));St(this.mod)}copyFileToBuffer(t){let[e,n,i]=ft(this.mod,"duckdb_web_copy_file_to_buffer",["string"],[t]);if(e!==0)throw new Error($(this.mod,n,i));let s=this.mod.HEAPU8.subarray(n,n+i),o=new Uint8Array(s.length);return o.set(s),St(this.mod),o}collectFileStatistics(t,e){let[n,i,s]=ft(this.mod,"duckdb_web_collect_file_stats",["string","boolean"],[t,e]);if(n!==0)throw new Error($(this.mod,i,s))}exportFileStatistics(t){let[e,n,i]=ft(this.mod,"duckdb_web_export_file_stats",["string"],[t]);if(e!==0)throw new Error($(this.mod,n,i));return new ta(this.mod.HEAPU8.subarray(n,n+i))}};var ra=class extends ea{constructor(e,n,i,s){super(e,n);this.mainModuleURL=i,this.pthreadWorkerURL=s}locateFile(e,n){if(e.endsWith(".wasm"))return this.mainModuleURL;if(e.endsWith(".worker.js")){if(!this.pthreadWorkerURL)throw new Error("Missing DuckDB worker URL!");return this.pthreadWorkerURL}throw new Error(`WASM instantiation requested unexpected file: prefix=${n} path=${e}`)}instantiateWasm(e,n){globalThis.DUCKDB_RUNTIME=this._runtime;let i=this.onInstantiationProgress;if(WebAssembly.instantiateStreaming)if(typeof TransformStream=="function"){let o=(async()=>{var et;let a=new Request(this.mainModuleURL),c=await fetch(a),f=c.headers.get("content-length"),p=f&&parseInt(f,10)||0,y=new Date,w={startedAt:y,updatedAt:y,bytesTotal:p||0,bytesLoaded:0},S={transform(yt,_t){w.bytesLoaded+=yt.byteLength;let ie=new Date;if(ie.getTime()-w.updatedAt.getTime()<20){w.updatedAt=ie,_t.enqueue(yt);return}for(let Ie of i)Ie(w);_t.enqueue(yt)}},it=new TransformStream(S);return new Response((et=c.body)==null?void 0:et.pipeThrough(it),c)})();WebAssembly.instantiateStreaming(o,e).then(a=>{n(a.instance,a.module)})}else{console.warn("instantiating without progress handler since transform streams are unavailable");let s=new Request(this.mainModuleURL);WebAssembly.instantiateStreaming(fetch(s),e).then(o=>{n(o.instance,o.module)})}else if(typeof XMLHttpRequest=="function"){let s=new XMLHttpRequest,o=this.mainModuleURL,a=new Date,c={startedAt:a,updatedAt:a,bytesTotal:0,bytesLoaded:0};s.open("GET",o),s.responseType="arraybuffer",s.onerror=f=>{throw this.logger.log({timestamp:new Date,level:4,origin:3,topic:5,event:2,value:"Failed to load WASM: "+f}),new Error(f.toString())},s.onprogress=f=>{c.bytesTotal=f.total,c.bytesLoaded=f.loaded;let p=new Date;if(p.getTime()-c.updatedAt.getTime()<20){c.updatedAt=p;return}for(let y of i)y(c)},s.onload=()=>{WebAssembly.instantiate(s.response,e).then(f=>{n(f.instance,f.module)}).catch(f=>{throw this.logger.log({timestamp:new Date,level:4,origin:3,topic:5,event:2,value:"Failed to instantiate WASM: "+f}),new Error(f)})},s.send()}else console.warn("instantiating with manual fetch since streaming instantiation and xhrs are unavailable"),(async()=>{let o=new Request(this.mainModuleURL),c=await(await fetch(o)).arrayBuffer();WebAssembly.instantiate(c,e).then(f=>{n(f.instance,f.module)})})();return[]}};var na=class extends ra{constructor(t,e,n,i=null){super(t,e,n,i)}instantiateImpl(t){return gd({...t,instantiateWasm:this.instantiateWasm.bind(this),locateFile:this.locateFile.bind(this)})}};var yn=Sa(Fd()),Td=function(r,t,e){var n;if((n=r==null?void 0:r.endpoint)!=null&&n.startsWith("http")){let i=`${r==null?void 0:r.endpoint}`,s=i.indexOf("://")+3;return i.substring(s)}else return r!=null&&r.endpoint?`${e}.${r==null?void 0:r.endpoint}`:`${e}.s3.amazonaws.com`};function _y(r,t,e){var s,o,a,c;let n=Ad(t),i=n.path;return Ed(r)&&(i=`/${n.bucket}${i}`),{url:i,query:"",host:Td(r,t,n.bucket),region:(s=r==null?void 0:r.region)!=null?s:"",service:"s3",method:e,accessKeyId:(o=r==null?void 0:r.accessKeyId)!=null?o:"",secretAccessKey:(a=r==null?void 0:r.secretAccessKey)!=null?a:"",sessionToken:(c=r==null?void 0:r.sessionToken)!=null?c:"",dateNow:new Date().toISOString().replace(/-/g,"").split("T")[0],datetimeNow:new Date().toISOString().replace(/-/g,"").replace(/:/g,"").split(".")[0]+"Z"}}function my(r,t=!1){let e="0123456789ABCDEF",n="";for(let i=0;i<r.length;i++){let s=r[i];s>="A"&&s<="Z"||s>="a"&&s<="z"||s>="0"&&s<="9"||s=="_"||s=="-"||s=="~"||s=="."?n+=s:s=="/"?t?n+="%2F":n+=s:(n+="%",n+=e[s.charCodeAt(0)>>4],n+=e[s.charCodeAt(0)&15])}return n}function yy(r,t=null){var it;let e=(it=t==null?void 0:t.contentHash)!=null?it:"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",n=new Map;n.set("x-amz-date",r.datetimeNow),n.set("x-amz-content-sha256",e),r.sessionToken&&n.set("x-amz-security-token",r.sessionToken);let i="";t!=null&&t.contentType&&(i+="content-type;"),i+="host;x-amz-content-sha256;x-amz-date",r.sessionToken&&(i+=";x-amz-security-token");let s=r.method+`
`+my(r.url)+`
`+r.query;t!=null&&t.contentType&&(s+=`
content-type:`+(t==null?void 0:t.contentType)),s+=`
host:`+r.host+`
x-amz-content-sha256:`+e+`
x-amz-date:`+r.datetimeNow,r.sessionToken&&r.sessionToken.length>0&&(s+=`
x-amz-security-token:`+r.sessionToken),s+=`

`+i+`
`+e;let o=(0,yn.sha256)(s),a=`AWS4-HMAC-SHA256
`+r.datetimeNow+`
`+r.dateNow+"/"+r.region+"/"+r.service+`/aws4_request
`+o,c="AWS4"+r.secretAccessKey,f=yn.sha256.hmac.arrayBuffer(c,r.dateNow),p=yn.sha256.hmac.arrayBuffer(f,r.region),y=yn.sha256.hmac.arrayBuffer(p,r.service),w=yn.sha256.hmac.arrayBuffer(y,"aws4_request"),S=yn.sha256.hmac(w,a);return n.set("Authorization","AWS4-HMAC-SHA256 Credential="+r.accessKeyId+"/"+r.dateNow+"/"+r.region+"/"+r.service+"/aws4_request, SignedHeaders="+i+", Signature="+S),n}var by=function(r,t,e,n=null,i=null){let s=_y(r,t,e),o={contentType:n,contentHash:i?yn.sha256.hex(i):null};return yy(s,o)};function Ar(r,t,e,n,i=null,s=null){((t==null?void 0:t.accessKeyId)||(t==null?void 0:t.sessionToken))&&(by(t,e,n,i,s).forEach((a,c)=>{r.setRequestHeader(c,a)}),i&&r.setRequestHeader("content-type",i))}function Ad(r){if(r.indexOf("s3://")!=0)throw new Error("URL needs to start with s3://");let t=r.indexOf("/",5);if(t==-1)throw new Error("URL needs to contain a '/' after the host");let e=r.substring(5,t);if(!e)throw new Error("URL needs to contain a bucket name");let n=r.substring(t);if(!n)throw new Error("URL needs to contain key");return{bucket:e,path:n}}function Ed(r){var t;return!!((t=r==null?void 0:r.endpoint)!=null&&t.startsWith("http"))}function Er(r,t){let e=Ad(t);return Ed(r)?`${r==null?void 0:r.endpoint}/${e.bucket}`+e.path:"https://"+Td(r,t,e.bucket)+e.path}var lt={_files:new Map,_fileInfoCache:new Map,_udfFunctions:new Map,_globalFileInfo:null,getFileInfo(r,t){try{let e=lt._fileInfoCache.get(t),[n,i,s]=ft(r,"duckdb_web_fs_get_file_info_by_id",["number","number"],[t,(e==null?void 0:e.cacheEpoch)||0]);if(n!==0)return null;if(s===0)return e;let o=$(r,i,s);St(r);let a=JSON.parse(o);if(a==null)return null;let c={...a,blob:null};return lt._fileInfoCache.set(t,c),c}catch(e){return null}},getGlobalFileInfo(r){var t;try{let[e,n,i]=ft(r,"duckdb_web_get_global_file_info",["number"],[((t=lt._globalFileInfo)==null?void 0:t.cacheEpoch)||0]);if(e!==0)return null;if(i===0)return lt._globalFileInfo;let s=$(r,n,i);St(r);let o=JSON.parse(s);return o==null?null:(lt._globalFileInfo={...o,blob:null},lt._globalFileInfo)}catch(e){return null}},testPlatformFeature:(r,t)=>{switch(t){case 1:return typeof BigInt64Array<"u";default:return console.warn(`test for unknown feature: ${t}`),!1}},getDefaultDataProtocol(r){return 2},openFile:(r,t,e)=>{var n;try{lt._fileInfoCache.delete(t);let i=lt.getFileInfo(r,t);switch(i==null?void 0:i.dataProtocol){case 4:case 5:{if(e&1&&e&2)throw new Error(`Opening file ${i.fileName} failed: cannot open file with both read and write flags set`);if(e&32)throw new Error(`Opening file ${i.fileName} failed: appending to HTTP/S3 files is not supported`);if(e&2){let a=new XMLHttpRequest;if(i.dataProtocol==5?(a.open("HEAD",Er(i.s3Config,i.dataUrl),!1),Ar(a,i.s3Config,i.dataUrl,"HEAD")):a.open("HEAD",i.dataUrl,!1),a.send(null),a.status!=200&&a.status!=404)throw new Error(`Opening file ${i.fileName} failed: Unexpected return status from server (${a.status})`);if(a.status==404&&!(e&8||e&16))throw new Error(`Opening file ${i.fileName} failed: Cannot write to non-existent file without FILE_FLAGS_FILE_CREATE or FILE_FLAGS_FILE_CREATE_NEW flag.`);let c=r._malloc(1),f=new Uint8Array;r.HEAPU8.set(f,c);let p=r._malloc(2*8);return r.HEAPF64[(p>>3)+0]=1,r.HEAPF64[(p>>3)+1]=c,p}else if(e!=1)throw new Error(`Opening file ${i.fileName} failed: unsupported file flags: ${e}`);let s=null,o=null;try{let a=new XMLHttpRequest;if(i.dataProtocol==5?(a.open("HEAD",Er(i.s3Config,i.dataUrl),!1),Ar(a,i.s3Config,i.dataUrl,"HEAD")):a.open("HEAD",i.dataUrl,!1),a.setRequestHeader("Range","bytes=0-"),a.send(null),s=a.getResponseHeader("Content-Length"),s!==null&&a.status==206){let c=r._malloc(16);return r.HEAPF64[(c>>3)+0]=+s,r.HEAPF64[(c>>3)+1]=0,c}}catch(a){o=a,console.warn(`HEAD request with range header failed: ${a}`)}if(i.allowFullHttpReads){if(s!==null&&+s>1){let c=new XMLHttpRequest;i.dataProtocol==5?(c.open("GET",Er(i.s3Config,i.dataUrl),!1),Ar(c,i.s3Config,i.dataUrl,"GET")):c.open("GET",i.dataUrl,!1),c.setRequestHeader("Range","bytes=0-0"),c.send(null);let f=c.getResponseHeader("Content-Length");if(c.status==206&&f!==null&&+f==1){let p=r._malloc(16);return r.HEAPF64[(p>>3)+0]=+s,r.HEAPF64[(p>>3)+1]=0,p}if(c.status==200&&f!==null&&+f==+s){console.warn(`fall back to full HTTP read for: ${i.dataUrl}`);let p=r._malloc(c.response.byteLength),y=new Uint8Array(c.response,0,c.response.byteLength);r.HEAPU8.set(y,p);let w=r._malloc(2*8);return r.HEAPF64[(w>>3)+0]=c.response.byteLength,r.HEAPF64[(w>>3)+1]=p,w}}console.warn(`falling back to full HTTP read for: ${i.dataUrl}`);let a=new XMLHttpRequest;if(i.dataProtocol==5?(a.open("GET",Er(i.s3Config,i.dataUrl),!1),Ar(a,i.s3Config,i.dataUrl,"GET")):a.open("GET",i.dataUrl,!1),a.responseType="arraybuffer",a.send(null),a.status==200){let c=r._malloc(a.response.byteLength),f=new Uint8Array(a.response,0,a.response.byteLength);r.HEAPU8.set(f,c);let p=r._malloc(2*8);return r.HEAPF64[(p>>3)+0]=a.response.byteLength,r.HEAPF64[(p>>3)+1]=c,p}}if(o!=null)throw new Error(`Reading file ${i.fileName} failed with error: ${o}`);return 0}case 2:{let s=(n=lt._files)==null?void 0:n.get(i.fileName);if(s){let c=r._malloc(16);return r.HEAPF64[(c>>3)+0]=s.size,r.HEAPF64[(c>>3)+1]=0,c}console.warn(`Buffering missing file: ${i.fileName}`);let o=r._malloc(2*8),a=r._malloc(1);return r.HEAPF64[(o>>3)+0]=1,r.HEAPF64[(o>>3)+1]=a,o}}}catch(i){console.error(i.toString()),ar(r,i.toString())}return 0},glob:(r,t,e)=>{var n;try{let i=$(r,t,e);if(i.startsWith("http")||i.startsWith("s3://")){let s=new XMLHttpRequest;if(i.startsWith("s3://")){let o=lt.getGlobalFileInfo(r);s.open("HEAD",Er(o==null?void 0:o.s3Config,i),!1),Ar(s,o==null?void 0:o.s3Config,i,"HEAD")}else s.open("HEAD",i,!1);if(s.send(null),s.status!=200&&s.status!==206){if(!((n=lt.getGlobalFileInfo(r))!=null&&n.allowFullHttpReads)){ar(r,`HEAD request failed: ${i}, with full http reads are disabled`);return}let o=new XMLHttpRequest;if(i.startsWith("s3://")){let c=lt.getGlobalFileInfo(r);o.open("GET",Er(c==null?void 0:c.s3Config,i),!1),Ar(o,c==null?void 0:c.s3Config,i,"HEAD")}else o.open("GET",i,!1);if(o.setRequestHeader("Range","bytes=0-0"),o.send(null),o.status!=200&&o.status!==206){ar(r,`HEAD and GET requests failed: ${i}`);return}let a=o.getResponseHeader("Content-Length");a&&+a>1&&console.warn(`Range request for ${i} did not return a partial response: ${o.status} "${o.statusText}"`)}r.ccall("duckdb_web_fs_glob_add_path",null,["string"],[i])}}catch(i){return ar(r,i.toString()),0}},checkFile:(r,t,e)=>{try{let n=$(r,t,e);if(n.startsWith("http")||n.startsWith("s3://")){let i=new XMLHttpRequest;if(n.startsWith("s3://")){let s=lt.getGlobalFileInfo(r);i.open("HEAD",Er(s==null?void 0:s.s3Config,n),!1),Ar(i,s==null?void 0:s.s3Config,n,"HEAD")}else i.open("HEAD",n,!1);return i.send(null),i.status==206||i.status==200}}catch(n){return!1}return!1},syncFile:(r,t)=>{},closeFile:(r,t)=>{var n;let e=lt.getFileInfo(r,t);switch(lt._fileInfoCache.delete(t),e==null?void 0:e.dataProtocol){case 0:case 4:case 5:break;case 1:case 2:return;case 3:{let i=(n=lt._files)==null?void 0:n.get(e.fileName);if(!i)throw new Error(`No OPFS access handle registered with name: ${e.fileName}`);return i.flush()}}},truncateFile:(r,t,e)=>{var i;let n=lt.getFileInfo(r,t);switch(n==null?void 0:n.dataProtocol){case 4:ar(r,"Cannot truncate a http file");return;case 5:ar(r,"Cannot truncate an s3 file");return;case 0:case 1:case 2:ar(r,"truncateFile not implemented");return;case 3:{let s=(i=lt._files)==null?void 0:i.get(n.fileName);if(!s)throw new Error(`No OPFS access handle registered with name: ${n.fileName}`);return s.truncate(e)}}return 0},readFile(r,t,e,n,i){var s,o;if(n==0)return 0;try{let a=lt.getFileInfo(r,t);switch(a==null?void 0:a.dataProtocol){case 4:case 5:{if(!a.dataUrl)throw new Error(`Missing data URL for file ${t}`);try{let c=new XMLHttpRequest;if(a.dataProtocol==5?(c.open("GET",Er(a==null?void 0:a.s3Config,a.dataUrl),!1),Ar(c,a==null?void 0:a.s3Config,a.dataUrl,"GET")):c.open("GET",a.dataUrl,!1),c.responseType="arraybuffer",c.setRequestHeader("Range",`bytes=${i}-${i+n-1}`),c.send(null),c.status==206||c.status==200&&n==c.response.byteLength&&i==0){let f=new Uint8Array(c.response,0,Math.min(c.response.byteLength,n));return r.HEAPU8.set(f,e),f.byteLength}else if(c.status==200){console.warn(`Range request for ${a.dataUrl} did not return a partial response: ${c.status} "${c.statusText}"`);let f=new Uint8Array(c.response,i,Math.min(c.response.byteLength-i,n));return r.HEAPU8.set(f,e),f.byteLength}else throw new Error(`Range request for ${a.dataUrl} did returned non-success status: ${c.status} "${c.statusText}"`)}catch(c){throw new Error(`Range request for ${a.dataUrl} failed with error: ${c}"`)}}case 2:{let c=(s=lt._files)==null?void 0:s.get(a.fileName);if(!c)throw new Error(`No HTML5 file registered with name: ${a.fileName}`);let f=c.slice(i,i+n),p=new Uint8Array(new FileReaderSync().readAsArrayBuffer(f));return r.HEAPU8.set(p,e),p.byteLength}case 3:{let c=(o=lt._files)==null?void 0:o.get(a.fileName);if(!c)throw new Error(`No OPFS access handle registered with name: ${a.fileName}`);let f=r.HEAPU8.subarray(e,e+n);return c.read(f,{at:i})}}return 0}catch(a){return ar(r,a.toString()),0}},writeFile:(r,t,e,n,i)=>{var o;let s=lt.getFileInfo(r,t);switch(s==null?void 0:s.dataProtocol){case 4:return ar(r,"Cannot write to HTTP file"),0;case 5:{let a=r.HEAPU8.subarray(e,e+n),c=new XMLHttpRequest;return c.open("PUT",Er(s==null?void 0:s.s3Config,s.dataUrl),!1),Ar(c,s==null?void 0:s.s3Config,s.dataUrl,"PUT","",a),c.send(a),n}case 2:return ar(r,"cannot write using the html5 file reader api"),0;case 3:{let a=(o=lt._files)==null?void 0:o.get(s.fileName);if(!a)throw new Error(`No OPFS access handle registered with name: ${s.fileName}`);let c=r.HEAPU8.subarray(e,e+n);return a.write(c,{at:i})}}return 0},getLastFileModificationTime:(r,t)=>{var n;let e=lt.getFileInfo(r,t);switch(e==null?void 0:e.dataProtocol){case 2:{if(!((n=lt._files)==null?void 0:n.get(e.fileName)))throw Error(`No handle available for file: ${e.fileName}`);return 0}case 4:case 5:return new Date().getTime()}return 0},checkDirectory:(r,t,e)=>{let n=$(r,t,e);return console.log(`checkDirectory: ${n}`),!1},createDirectory:(r,t,e)=>{let n=$(r,t,e);console.log(`createDirectory: ${n}`)},removeDirectory:(r,t,e)=>{let n=$(r,t,e);console.log(`removeDirectory: ${n}`)},listDirectoryEntries:(r,t,e)=>{let n=$(r,t,e);return console.log(`listDirectoryEntries: ${n}`),!1},moveFile:(r,t,e,n,i)=>{var c,f;let s=$(r,t,e),o=$(r,n,i),a=(c=lt._files)==null?void 0:c.get(s);a!==void 0&&(lt._files.delete(a),lt._files.set(o,a));for(let[p,y]of((f=lt._fileInfoCache)==null?void 0:f.entries())||[])if(y.dataUrl==s){lt._fileInfoCache.delete(p);break}return!0},removeFile:(r,t,e)=>{},callScalarUDF:(r,t,e,n,i,s,o)=>{Id(lt,r,t,e,n,i,s,o)}};var Tl=class extends Ko{postMessage(t,e){globalThis.postMessage(t,e)}async instantiate(t,e,n){return await new na(this,lt,t,e).instantiate(n)}};function xd(){let r=new Tl;globalThis.onmessage=async t=>{await r.onMessage(t.data)}}xd();return Ep(gy);})();
/**
 * [js-sha256]{@link https://github.com/emn178/js-sha256}
 *
 * @version 0.9.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */
//# sourceMappingURL=data:application/json;base64,
