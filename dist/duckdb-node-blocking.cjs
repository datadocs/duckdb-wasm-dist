"use strict";var zf=Object.create;var rn=Object.defineProperty;var Kf=Object.getOwnPropertyDescriptor;var Yf=Object.getOwnPropertyNames;var Vf=Object.getPrototypeOf,Xf=Object.prototype.hasOwnProperty;var x=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),Qf=(r,t)=>{for(var e in t)rn(r,e,{get:t[e],enumerable:!0})},Cu=(r,t,e,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of Yf(t))!Xf.call(r,s)&&s!==e&&rn(r,s,{get:()=>t[s],enumerable:!(n=Kf(t,s))||n.enumerable});return r};var pt=(r,t,e)=>(e=r!=null?zf(Vf(r)):{},Cu(t||!r||!r.__esModule?rn(e,"default",{value:r,enumerable:!0}):e,r)),Jf=r=>Cu(rn({},"__esModule",{value:!0}),r);var Yu=x(Qt=>{"use strict";Object.defineProperty(Qt,"__esModule",{value:!0});Qt.splitWhen=Qt.flatten=void 0;function p_(r){return r.reduce((t,e)=>[].concat(t,e),[])}Qt.flatten=p_;function m_(r,t){let e=[[]],n=0;for(let s of r)t(s)?(n++,e[n]=[]):e[n].push(s);return e}Qt.splitWhen=m_});var Vu=x(fn=>{"use strict";Object.defineProperty(fn,"__esModule",{value:!0});fn.isEnoentCodeError=void 0;function h_(r){return r.code==="ENOENT"}fn.isEnoentCodeError=h_});var Xu=x(_n=>{"use strict";Object.defineProperty(_n,"__esModule",{value:!0});_n.createDirentFromStats=void 0;var Ha=class{constructor(t,e){this.name=t,this.isBlockDevice=e.isBlockDevice.bind(e),this.isCharacterDevice=e.isCharacterDevice.bind(e),this.isDirectory=e.isDirectory.bind(e),this.isFIFO=e.isFIFO.bind(e),this.isFile=e.isFile.bind(e),this.isSocket=e.isSocket.bind(e),this.isSymbolicLink=e.isSymbolicLink.bind(e)}};function b_(r,t){return new Ha(r,t)}_n.createDirentFromStats=b_});var Qu=x(Qe=>{"use strict";Object.defineProperty(Qe,"__esModule",{value:!0});Qe.removeLeadingDotSegment=Qe.escape=Qe.makeAbsolute=Qe.unixify=void 0;var g_=require("path"),y_=2,v_=/(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;function w_(r){return r.replace(/\\/g,"/")}Qe.unixify=w_;function S_(r,t){return g_.resolve(r,t)}Qe.makeAbsolute=S_;function E_(r){return r.replace(v_,"\\$2")}Qe.escape=E_;function k_(r){if(r.charAt(0)==="."){let t=r.charAt(1);if(t==="/"||t==="\\")return r.slice(y_)}return r}Qe.removeLeadingDotSegment=k_});var Zu=x((jh,Ju)=>{Ju.exports=function(t){if(typeof t!="string"||t==="")return!1;for(var e;e=/(\\).|([@?!+*]\(.*\))/g.exec(t);){if(e[2])return!0;t=t.slice(e.index+e[0].length)}return!1}});var rc=x(($h,tc)=>{var R_=Zu(),ec={"{":"}","(":")","[":"]"},A_=function(r){if(r[0]==="!")return!0;for(var t=0,e=-2,n=-2,s=-2,o=-2,l=-2;t<r.length;){if(r[t]==="*"||r[t+1]==="?"&&/[\].+)]/.test(r[t])||n!==-1&&r[t]==="["&&r[t+1]!=="]"&&(n<t&&(n=r.indexOf("]",t)),n>t&&(l===-1||l>n||(l=r.indexOf("\\",t),l===-1||l>n)))||s!==-1&&r[t]==="{"&&r[t+1]!=="}"&&(s=r.indexOf("}",t),s>t&&(l=r.indexOf("\\",t),l===-1||l>s))||o!==-1&&r[t]==="("&&r[t+1]==="?"&&/[:!=]/.test(r[t+2])&&r[t+3]!==")"&&(o=r.indexOf(")",t),o>t&&(l=r.indexOf("\\",t),l===-1||l>o))||e!==-1&&r[t]==="("&&r[t+1]!=="|"&&(e<t&&(e=r.indexOf("|",t)),e!==-1&&r[e+1]!==")"&&(o=r.indexOf(")",e),o>e&&(l=r.indexOf("\\",e),l===-1||l>o))))return!0;if(r[t]==="\\"){var m=r[t+1];t+=2;var b=ec[m];if(b){var T=r.indexOf(b,t);T!==-1&&(t=T+1)}if(r[t]==="!")return!0}else t++}return!1},D_=function(r){if(r[0]==="!")return!0;for(var t=0;t<r.length;){if(/[*?{}()[\]]/.test(r[t]))return!0;if(r[t]==="\\"){var e=r[t+1];t+=2;var n=ec[e];if(n){var s=r.indexOf(n,t);s!==-1&&(t=s+1)}if(r[t]==="!")return!0}else t++}return!1};tc.exports=function(t,e){if(typeof t!="string"||t==="")return!1;if(R_(t))return!0;var n=A_;return e&&e.strict===!1&&(n=D_),n(t)}});var ic=x((Gh,nc)=>{"use strict";var T_=rc(),C_=require("path").posix.dirname,P_=require("os").platform()==="win32",qa="/",M_=/\\/g,O_=/[\{\[].*[\}\]]$/,F_=/(^|[^\\])([\{\[]|\([^\)]+$)/,I_=/\\([\!\*\?\|\[\]\(\)\{\}])/g;nc.exports=function(t,e){var n=Object.assign({flipBackslashes:!0},e);n.flipBackslashes&&P_&&t.indexOf(qa)<0&&(t=t.replace(M_,qa)),O_.test(t)&&(t+=qa),t+="a";do t=C_(t);while(T_(t)||F_.test(t));return t.replace(I_,"$1")}});var dn=x(Ge=>{"use strict";Ge.isInteger=r=>typeof r=="number"?Number.isInteger(r):typeof r=="string"&&r.trim()!==""?Number.isInteger(Number(r)):!1;Ge.find=(r,t)=>r.nodes.find(e=>e.type===t);Ge.exceedsLimit=(r,t,e=1,n)=>n===!1||!Ge.isInteger(r)||!Ge.isInteger(t)?!1:(Number(t)-Number(r))/Number(e)>=n;Ge.escapeNode=(r,t=0,e)=>{let n=r.nodes[t];n&&(e&&n.type===e||n.type==="open"||n.type==="close")&&n.escaped!==!0&&(n.value="\\"+n.value,n.escaped=!0)};Ge.encloseBrace=r=>r.type!=="brace"||r.commas>>0+r.ranges>>0?!1:(r.invalid=!0,!0);Ge.isInvalidBrace=r=>r.type!=="brace"?!1:r.invalid===!0||r.dollar?!0:!(r.commas>>0+r.ranges>>0)||r.open!==!0||r.close!==!0?(r.invalid=!0,!0):!1;Ge.isOpenOrClose=r=>r.type==="open"||r.type==="close"?!0:r.open===!0||r.close===!0;Ge.reduce=r=>r.reduce((t,e)=>(e.type==="text"&&t.push(e.value),e.type==="range"&&(e.type="text"),t),[]);Ge.flatten=(...r)=>{let t=[],e=n=>{for(let s=0;s<n.length;s++){let o=n[s];Array.isArray(o)?e(o,t):o!==void 0&&t.push(o)}return t};return e(r),t}});var pn=x((Kh,ac)=>{"use strict";var sc=dn();ac.exports=(r,t={})=>{let e=(n,s={})=>{let o=t.escapeInvalid&&sc.isInvalidBrace(s),l=n.invalid===!0&&t.escapeInvalid===!0,m="";if(n.value)return(o||l)&&sc.isOpenOrClose(n)?"\\"+n.value:n.value;if(n.value)return n.value;if(n.nodes)for(let b of n.nodes)m+=e(b);return m};return e(r)}});var uc=x((Yh,oc)=>{"use strict";oc.exports=function(r){return typeof r=="number"?r-r===0:typeof r=="string"&&r.trim()!==""?Number.isFinite?Number.isFinite(+r):isFinite(+r):!1}});var bc=x((Vh,hc)=>{"use strict";var cc=uc(),It=(r,t,e)=>{if(cc(r)===!1)throw new TypeError("toRegexRange: expected the first argument to be a number");if(t===void 0||r===t)return String(r);if(cc(t)===!1)throw new TypeError("toRegexRange: expected the second argument to be a number.");let n={relaxZeros:!0,...e};typeof n.strictZeros=="boolean"&&(n.relaxZeros=n.strictZeros===!1);let s=String(n.relaxZeros),o=String(n.shorthand),l=String(n.capture),m=String(n.wrap),b=r+":"+t+"="+s+o+l+m;if(It.cache.hasOwnProperty(b))return It.cache[b].result;let T=Math.min(r,t),y=Math.max(r,t);if(Math.abs(T-y)===1){let N=r+"|"+t;return n.capture?`(${N})`:n.wrap===!1?N:`(?:${N})`}let P=mc(r)||mc(t),w={min:r,max:t,a:T,b:y},te=[],I=[];if(P&&(w.isPadded=P,w.maxLen=String(w.max).length),T<0){let N=y<0?Math.abs(y):1;I=lc(N,Math.abs(T),w,n),T=w.a=0}return y>=0&&(te=lc(T,y,w,n)),w.negatives=I,w.positives=te,w.result=x_(I,te,n),n.capture===!0?w.result=`(${w.result})`:n.wrap!==!1&&te.length+I.length>1&&(w.result=`(?:${w.result})`),It.cache[b]=w,w.result};function x_(r,t,e){let n=Wa(r,t,"-",!1,e)||[],s=Wa(t,r,"",!1,e)||[],o=Wa(r,t,"-?",!0,e)||[];return n.concat(o).concat(s).join("|")}function L_(r,t){let e=1,n=1,s=_c(r,e),o=new Set([t]);for(;r<=s&&s<=t;)o.add(s),e+=1,s=_c(r,e);for(s=dc(t+1,n)-1;r<s&&s<=t;)o.add(s),n+=1,s=dc(t+1,n)-1;return o=[...o],o.sort(U_),o}function N_(r,t,e){if(r===t)return{pattern:r,count:[],digits:0};let n=B_(r,t),s=n.length,o="",l=0;for(let m=0;m<s;m++){let[b,T]=n[m];b===T?o+=b:b!=="0"||T!=="9"?o+=H_(b,T,e):l++}return l&&(o+=e.shorthand===!0?"\\d":"[0-9]"),{pattern:o,count:[l],digits:s}}function lc(r,t,e,n){let s=L_(r,t),o=[],l=r,m;for(let b=0;b<s.length;b++){let T=s[b],y=N_(String(l),String(T),n),P="";if(!e.isPadded&&m&&m.pattern===y.pattern){m.count.length>1&&m.count.pop(),m.count.push(y.count[0]),m.string=m.pattern+pc(m.count),l=T+1;continue}e.isPadded&&(P=q_(T,e,n)),y.string=P+y.pattern+pc(y.count),o.push(y),l=T+1,m=y}return o}function Wa(r,t,e,n,s){let o=[];for(let l of r){let{string:m}=l;!n&&!fc(t,"string",m)&&o.push(e+m),n&&fc(t,"string",m)&&o.push(e+m)}return o}function B_(r,t){let e=[];for(let n=0;n<r.length;n++)e.push([r[n],t[n]]);return e}function U_(r,t){return r>t?1:t>r?-1:0}function fc(r,t,e){return r.some(n=>n[t]===e)}function _c(r,t){return Number(String(r).slice(0,-t)+"9".repeat(t))}function dc(r,t){return r-r%Math.pow(10,t)}function pc(r){let[t=0,e=""]=r;return e||t>1?`{${t+(e?","+e:"")}}`:""}function H_(r,t,e){return`[${r}${t-r===1?"":"-"}${t}]`}function mc(r){return/^-?(0+)\d/.test(r)}function q_(r,t,e){if(!t.isPadded)return r;let n=Math.abs(t.maxLen-String(r).length),s=e.relaxZeros!==!1;switch(n){case 0:return"";case 1:return s?"0?":"0";case 2:return s?"0{0,2}":"00";default:return s?`0{0,${n}}`:`0{${n}}`}}It.cache={};It.clearCache=()=>It.cache={};hc.exports=It});var Ga=x((Xh,Rc)=>{"use strict";var W_=require("util"),vc=bc(),gc=r=>r!==null&&typeof r=="object"&&!Array.isArray(r),j_=r=>t=>r===!0?Number(t):String(t),ja=r=>typeof r=="number"||typeof r=="string"&&r!=="",Pr=r=>Number.isInteger(+r),$a=r=>{let t=`${r}`,e=-1;if(t[0]==="-"&&(t=t.slice(1)),t==="0")return!1;for(;t[++e]==="0";);return e>0},$_=(r,t,e)=>typeof r=="string"||typeof t=="string"?!0:e.stringify===!0,G_=(r,t,e)=>{if(t>0){let n=r[0]==="-"?"-":"";n&&(r=r.slice(1)),r=n+r.padStart(n?t-1:t,"0")}return e===!1?String(r):r},yc=(r,t)=>{let e=r[0]==="-"?"-":"";for(e&&(r=r.slice(1),t--);r.length<t;)r="0"+r;return e?"-"+r:r},z_=(r,t)=>{r.negatives.sort((l,m)=>l<m?-1:l>m?1:0),r.positives.sort((l,m)=>l<m?-1:l>m?1:0);let e=t.capture?"":"?:",n="",s="",o;return r.positives.length&&(n=r.positives.join("|")),r.negatives.length&&(s=`-(${e}${r.negatives.join("|")})`),n&&s?o=`${n}|${s}`:o=n||s,t.wrap?`(${e}${o})`:o},wc=(r,t,e,n)=>{if(e)return vc(r,t,{wrap:!1,...n});let s=String.fromCharCode(r);if(r===t)return s;let o=String.fromCharCode(t);return`[${s}-${o}]`},Sc=(r,t,e)=>{if(Array.isArray(r)){let n=e.wrap===!0,s=e.capture?"":"?:";return n?`(${s}${r.join("|")})`:r.join("|")}return vc(r,t,e)},Ec=(...r)=>new RangeError("Invalid range arguments: "+W_.inspect(...r)),kc=(r,t,e)=>{if(e.strictRanges===!0)throw Ec([r,t]);return[]},K_=(r,t)=>{if(t.strictRanges===!0)throw new TypeError(`Expected step "${r}" to be a number`);return[]},Y_=(r,t,e=1,n={})=>{let s=Number(r),o=Number(t);if(!Number.isInteger(s)||!Number.isInteger(o)){if(n.strictRanges===!0)throw Ec([r,t]);return[]}s===0&&(s=0),o===0&&(o=0);let l=s>o,m=String(r),b=String(t),T=String(e);e=Math.max(Math.abs(e),1);let y=$a(m)||$a(b)||$a(T),P=y?Math.max(m.length,b.length,T.length):0,w=y===!1&&$_(r,t,n)===!1,te=n.transform||j_(w);if(n.toRegex&&e===1)return wc(yc(r,P),yc(t,P),!0,n);let I={negatives:[],positives:[]},N=le=>I[le<0?"negatives":"positives"].push(Math.abs(le)),$=[],Y=0;for(;l?s>=o:s<=o;)n.toRegex===!0&&e>1?N(s):$.push(G_(te(s,Y),P,w)),s=l?s-e:s+e,Y++;return n.toRegex===!0?e>1?z_(I,n):Sc($,null,{wrap:!1,...n}):$},V_=(r,t,e=1,n={})=>{if(!Pr(r)&&r.length>1||!Pr(t)&&t.length>1)return kc(r,t,n);let s=n.transform||(w=>String.fromCharCode(w)),o=`${r}`.charCodeAt(0),l=`${t}`.charCodeAt(0),m=o>l,b=Math.min(o,l),T=Math.max(o,l);if(n.toRegex&&e===1)return wc(b,T,!1,n);let y=[],P=0;for(;m?o>=l:o<=l;)y.push(s(o,P)),o=m?o-e:o+e,P++;return n.toRegex===!0?Sc(y,null,{wrap:!1,options:n}):y},mn=(r,t,e,n={})=>{if(t==null&&ja(r))return[r];if(!ja(r)||!ja(t))return kc(r,t,n);if(typeof e=="function")return mn(r,t,1,{transform:e});if(gc(e))return mn(r,t,0,e);let s={...n};return s.capture===!0&&(s.wrap=!0),e=e||s.step||1,Pr(e)?Pr(r)&&Pr(t)?Y_(r,t,e,s):V_(r,t,Math.max(Math.abs(e),1),s):e!=null&&!gc(e)?K_(e,s):mn(r,t,1,e)};Rc.exports=mn});var Tc=x((Qh,Dc)=>{"use strict";var X_=Ga(),Ac=dn(),Q_=(r,t={})=>{let e=(n,s={})=>{let o=Ac.isInvalidBrace(s),l=n.invalid===!0&&t.escapeInvalid===!0,m=o===!0||l===!0,b=t.escapeInvalid===!0?"\\":"",T="";if(n.isOpen===!0||n.isClose===!0)return b+n.value;if(n.type==="open")return m?b+n.value:"(";if(n.type==="close")return m?b+n.value:")";if(n.type==="comma")return n.prev.type==="comma"?"":m?n.value:"|";if(n.value)return n.value;if(n.nodes&&n.ranges>0){let y=Ac.reduce(n.nodes),P=X_(...y,{...t,wrap:!1,toRegex:!0});if(P.length!==0)return y.length>1&&P.length>1?`(${P})`:P}if(n.nodes)for(let y of n.nodes)T+=e(y,n);return T};return e(r)};Dc.exports=Q_});var Mc=x((Jh,Pc)=>{"use strict";var J_=Ga(),Cc=pn(),Jt=dn(),xt=(r="",t="",e=!1)=>{let n=[];if(r=[].concat(r),t=[].concat(t),!t.length)return r;if(!r.length)return e?Jt.flatten(t).map(s=>`{${s}}`):t;for(let s of r)if(Array.isArray(s))for(let o of s)n.push(xt(o,t,e));else for(let o of t)e===!0&&typeof o=="string"&&(o=`{${o}}`),n.push(Array.isArray(o)?xt(s,o,e):s+o);return Jt.flatten(n)},Z_=(r,t={})=>{let e=t.rangeLimit===void 0?1e3:t.rangeLimit,n=(s,o={})=>{s.queue=[];let l=o,m=o.queue;for(;l.type!=="brace"&&l.type!=="root"&&l.parent;)l=l.parent,m=l.queue;if(s.invalid||s.dollar){m.push(xt(m.pop(),Cc(s,t)));return}if(s.type==="brace"&&s.invalid!==!0&&s.nodes.length===2){m.push(xt(m.pop(),["{}"]));return}if(s.nodes&&s.ranges>0){let P=Jt.reduce(s.nodes);if(Jt.exceedsLimit(...P,t.step,e))throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");let w=J_(...P,t);w.length===0&&(w=Cc(s,t)),m.push(xt(m.pop(),w)),s.nodes=[];return}let b=Jt.encloseBrace(s),T=s.queue,y=s;for(;y.type!=="brace"&&y.type!=="root"&&y.parent;)y=y.parent,T=y.queue;for(let P=0;P<s.nodes.length;P++){let w=s.nodes[P];if(w.type==="comma"&&s.type==="brace"){P===1&&T.push(""),T.push("");continue}if(w.type==="close"){m.push(xt(m.pop(),T,b));continue}if(w.value&&w.type!=="open"){T.push(xt(T.pop(),w.value));continue}w.nodes&&n(w,s)}return T};return Jt.flatten(n(r))};Pc.exports=Z_});var Fc=x((Zh,Oc)=>{"use strict";Oc.exports={MAX_LENGTH:1024*64,CHAR_0:"0",CHAR_9:"9",CHAR_UPPERCASE_A:"A",CHAR_LOWERCASE_A:"a",CHAR_UPPERCASE_Z:"Z",CHAR_LOWERCASE_Z:"z",CHAR_LEFT_PARENTHESES:"(",CHAR_RIGHT_PARENTHESES:")",CHAR_ASTERISK:"*",CHAR_AMPERSAND:"&",CHAR_AT:"@",CHAR_BACKSLASH:"\\",CHAR_BACKTICK:"`",CHAR_CARRIAGE_RETURN:"\r",CHAR_CIRCUMFLEX_ACCENT:"^",CHAR_COLON:":",CHAR_COMMA:",",CHAR_DOLLAR:"$",CHAR_DOT:".",CHAR_DOUBLE_QUOTE:'"',CHAR_EQUAL:"=",CHAR_EXCLAMATION_MARK:"!",CHAR_FORM_FEED:"\f",CHAR_FORWARD_SLASH:"/",CHAR_HASH:"#",CHAR_HYPHEN_MINUS:"-",CHAR_LEFT_ANGLE_BRACKET:"<",CHAR_LEFT_CURLY_BRACE:"{",CHAR_LEFT_SQUARE_BRACKET:"[",CHAR_LINE_FEED:`
`,CHAR_NO_BREAK_SPACE:"\xA0",CHAR_PERCENT:"%",CHAR_PLUS:"+",CHAR_QUESTION_MARK:"?",CHAR_RIGHT_ANGLE_BRACKET:">",CHAR_RIGHT_CURLY_BRACE:"}",CHAR_RIGHT_SQUARE_BRACKET:"]",CHAR_SEMICOLON:";",CHAR_SINGLE_QUOTE:"'",CHAR_SPACE:" ",CHAR_TAB:"	",CHAR_UNDERSCORE:"_",CHAR_VERTICAL_LINE:"|",CHAR_ZERO_WIDTH_NOBREAK_SPACE:"\uFEFF"}});var Bc=x((eb,Nc)=>{"use strict";var ed=pn(),{MAX_LENGTH:Ic,CHAR_BACKSLASH:za,CHAR_BACKTICK:td,CHAR_COMMA:rd,CHAR_DOT:nd,CHAR_LEFT_PARENTHESES:id,CHAR_RIGHT_PARENTHESES:sd,CHAR_LEFT_CURLY_BRACE:ad,CHAR_RIGHT_CURLY_BRACE:od,CHAR_LEFT_SQUARE_BRACKET:xc,CHAR_RIGHT_SQUARE_BRACKET:Lc,CHAR_DOUBLE_QUOTE:ud,CHAR_SINGLE_QUOTE:cd,CHAR_NO_BREAK_SPACE:ld,CHAR_ZERO_WIDTH_NOBREAK_SPACE:fd}=Fc(),_d=(r,t={})=>{if(typeof r!="string")throw new TypeError("Expected a string");let e=t||{},n=typeof e.maxLength=="number"?Math.min(Ic,e.maxLength):Ic;if(r.length>n)throw new SyntaxError(`Input length (${r.length}), exceeds max characters (${n})`);let s={type:"root",input:r,nodes:[]},o=[s],l=s,m=s,b=0,T=r.length,y=0,P=0,w,te={},I=()=>r[y++],N=$=>{if($.type==="text"&&m.type==="dot"&&(m.type="text"),m&&m.type==="text"&&$.type==="text"){m.value+=$.value;return}return l.nodes.push($),$.parent=l,$.prev=m,m=$,$};for(N({type:"bos"});y<T;)if(l=o[o.length-1],w=I(),!(w===fd||w===ld)){if(w===za){N({type:"text",value:(t.keepEscaping?w:"")+I()});continue}if(w===Lc){N({type:"text",value:"\\"+w});continue}if(w===xc){b++;let $=!0,Y;for(;y<T&&(Y=I());){if(w+=Y,Y===xc){b++;continue}if(Y===za){w+=I();continue}if(Y===Lc&&(b--,b===0))break}N({type:"text",value:w});continue}if(w===id){l=N({type:"paren",nodes:[]}),o.push(l),N({type:"text",value:w});continue}if(w===sd){if(l.type!=="paren"){N({type:"text",value:w});continue}l=o.pop(),N({type:"text",value:w}),l=o[o.length-1];continue}if(w===ud||w===cd||w===td){let $=w,Y;for(t.keepQuotes!==!0&&(w="");y<T&&(Y=I());){if(Y===za){w+=Y+I();continue}if(Y===$){t.keepQuotes===!0&&(w+=Y);break}w+=Y}N({type:"text",value:w});continue}if(w===ad){P++;let Y={type:"brace",open:!0,close:!1,dollar:m.value&&m.value.slice(-1)==="$"||l.dollar===!0,depth:P,commas:0,ranges:0,nodes:[]};l=N(Y),o.push(l),N({type:"open",value:w});continue}if(w===od){if(l.type!=="brace"){N({type:"text",value:w});continue}let $="close";l=o.pop(),l.close=!0,N({type:$,value:w}),P--,l=o[o.length-1];continue}if(w===rd&&P>0){if(l.ranges>0){l.ranges=0;let $=l.nodes.shift();l.nodes=[$,{type:"text",value:ed(l)}]}N({type:"comma",value:w}),l.commas++;continue}if(w===nd&&P>0&&l.commas===0){let $=l.nodes;if(P===0||$.length===0){N({type:"text",value:w});continue}if(m.type==="dot"){if(l.range=[],m.value+=w,m.type="range",l.nodes.length!==3&&l.nodes.length!==5){l.invalid=!0,l.ranges=0,m.type="text";continue}l.ranges++,l.args=[];continue}if(m.type==="range"){$.pop();let Y=$[$.length-1];Y.value+=m.value+w,m=Y,l.ranges--;continue}N({type:"dot",value:w});continue}N({type:"text",value:w})}do if(l=o.pop(),l.type!=="root"){l.nodes.forEach(le=>{le.nodes||(le.type==="open"&&(le.isOpen=!0),le.type==="close"&&(le.isClose=!0),le.nodes||(le.type="text"),le.invalid=!0)});let $=o[o.length-1],Y=$.nodes.indexOf(l);$.nodes.splice(Y,1,...l.nodes)}while(o.length>0);return N({type:"eos"}),s};Nc.exports=_d});var qc=x((tb,Hc)=>{"use strict";var Uc=pn(),dd=Tc(),pd=Mc(),md=Bc(),We=(r,t={})=>{let e=[];if(Array.isArray(r))for(let n of r){let s=We.create(n,t);Array.isArray(s)?e.push(...s):e.push(s)}else e=[].concat(We.create(r,t));return t&&t.expand===!0&&t.nodupes===!0&&(e=[...new Set(e)]),e};We.parse=(r,t={})=>md(r,t);We.stringify=(r,t={})=>Uc(typeof r=="string"?We.parse(r,t):r,t);We.compile=(r,t={})=>(typeof r=="string"&&(r=We.parse(r,t)),dd(r,t));We.expand=(r,t={})=>{typeof r=="string"&&(r=We.parse(r,t));let e=pd(r,t);return t.noempty===!0&&(e=e.filter(Boolean)),t.nodupes===!0&&(e=[...new Set(e)]),e};We.create=(r,t={})=>r===""||r.length<3?[r]:t.expand!==!0?We.compile(r,t):We.expand(r,t);Hc.exports=We});var Mr=x((rb,zc)=>{"use strict";var hd=require("path"),Je="\\\\/",Wc=`[^${Je}]`,at="\\.",bd="\\+",gd="\\?",hn="\\/",yd="(?=.)",jc="[^/]",Ka=`(?:${hn}|$)`,$c=`(?:^|${hn})`,Ya=`${at}{1,2}${Ka}`,vd=`(?!${at})`,wd=`(?!${$c}${Ya})`,Sd=`(?!${at}{0,1}${Ka})`,Ed=`(?!${Ya})`,kd=`[^.${hn}]`,Rd=`${jc}*?`,Gc={DOT_LITERAL:at,PLUS_LITERAL:bd,QMARK_LITERAL:gd,SLASH_LITERAL:hn,ONE_CHAR:yd,QMARK:jc,END_ANCHOR:Ka,DOTS_SLASH:Ya,NO_DOT:vd,NO_DOTS:wd,NO_DOT_SLASH:Sd,NO_DOTS_SLASH:Ed,QMARK_NO_DOT:kd,STAR:Rd,START_ANCHOR:$c},Ad={...Gc,SLASH_LITERAL:`[${Je}]`,QMARK:Wc,STAR:`${Wc}*?`,DOTS_SLASH:`${at}{1,2}(?:[${Je}]|$)`,NO_DOT:`(?!${at})`,NO_DOTS:`(?!(?:^|[${Je}])${at}{1,2}(?:[${Je}]|$))`,NO_DOT_SLASH:`(?!${at}{0,1}(?:[${Je}]|$))`,NO_DOTS_SLASH:`(?!${at}{1,2}(?:[${Je}]|$))`,QMARK_NO_DOT:`[^.${Je}]`,START_ANCHOR:`(?:^|[${Je}])`,END_ANCHOR:`(?:[${Je}]|$)`},Dd={alnum:"a-zA-Z0-9",alpha:"a-zA-Z",ascii:"\\x00-\\x7F",blank:" \\t",cntrl:"\\x00-\\x1F\\x7F",digit:"0-9",graph:"\\x21-\\x7E",lower:"a-z",print:"\\x20-\\x7E ",punct:"\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",space:" \\t\\r\\n\\v\\f",upper:"A-Z",word:"A-Za-z0-9_",xdigit:"A-Fa-f0-9"};zc.exports={MAX_LENGTH:1024*64,POSIX_REGEX_SOURCE:Dd,REGEX_BACKSLASH:/\\(?![*+?^${}(|)[\]])/g,REGEX_NON_SPECIAL_CHARS:/^[^@![\].,$*+?^{}()|\\/]+/,REGEX_SPECIAL_CHARS:/[-*+?.^${}(|)[\]]/,REGEX_SPECIAL_CHARS_BACKREF:/(\\?)((\W)(\3*))/g,REGEX_SPECIAL_CHARS_GLOBAL:/([-*+?.^${}(|)[\]])/g,REGEX_REMOVE_BACKSLASH:/(?:\[.*?[^\\]\]|\\(?=.))/g,REPLACEMENTS:{"***":"*","**/**":"**","**/**/**":"**"},CHAR_0:48,CHAR_9:57,CHAR_UPPERCASE_A:65,CHAR_LOWERCASE_A:97,CHAR_UPPERCASE_Z:90,CHAR_LOWERCASE_Z:122,CHAR_LEFT_PARENTHESES:40,CHAR_RIGHT_PARENTHESES:41,CHAR_ASTERISK:42,CHAR_AMPERSAND:38,CHAR_AT:64,CHAR_BACKWARD_SLASH:92,CHAR_CARRIAGE_RETURN:13,CHAR_CIRCUMFLEX_ACCENT:94,CHAR_COLON:58,CHAR_COMMA:44,CHAR_DOT:46,CHAR_DOUBLE_QUOTE:34,CHAR_EQUAL:61,CHAR_EXCLAMATION_MARK:33,CHAR_FORM_FEED:12,CHAR_FORWARD_SLASH:47,CHAR_GRAVE_ACCENT:96,CHAR_HASH:35,CHAR_HYPHEN_MINUS:45,CHAR_LEFT_ANGLE_BRACKET:60,CHAR_LEFT_CURLY_BRACE:123,CHAR_LEFT_SQUARE_BRACKET:91,CHAR_LINE_FEED:10,CHAR_NO_BREAK_SPACE:160,CHAR_PERCENT:37,CHAR_PLUS:43,CHAR_QUESTION_MARK:63,CHAR_RIGHT_ANGLE_BRACKET:62,CHAR_RIGHT_CURLY_BRACE:125,CHAR_RIGHT_SQUARE_BRACKET:93,CHAR_SEMICOLON:59,CHAR_SINGLE_QUOTE:39,CHAR_SPACE:32,CHAR_TAB:9,CHAR_UNDERSCORE:95,CHAR_VERTICAL_LINE:124,CHAR_ZERO_WIDTH_NOBREAK_SPACE:65279,SEP:hd.sep,extglobChars(r){return{"!":{type:"negate",open:"(?:(?!(?:",close:`))${r.STAR})`},"?":{type:"qmark",open:"(?:",close:")?"},"+":{type:"plus",open:"(?:",close:")+"},"*":{type:"star",open:"(?:",close:")*"},"@":{type:"at",open:"(?:",close:")"}}},globChars(r){return r===!0?Ad:Gc}}});var Or=x(Ne=>{"use strict";var Td=require("path"),Cd=process.platform==="win32",{REGEX_BACKSLASH:Pd,REGEX_REMOVE_BACKSLASH:Md,REGEX_SPECIAL_CHARS:Od,REGEX_SPECIAL_CHARS_GLOBAL:Fd}=Mr();Ne.isObject=r=>r!==null&&typeof r=="object"&&!Array.isArray(r);Ne.hasRegexChars=r=>Od.test(r);Ne.isRegexChar=r=>r.length===1&&Ne.hasRegexChars(r);Ne.escapeRegex=r=>r.replace(Fd,"\\$1");Ne.toPosixSlashes=r=>r.replace(Pd,"/");Ne.removeBackslashes=r=>r.replace(Md,t=>t==="\\"?"":t);Ne.supportsLookbehinds=()=>{let r=process.version.slice(1).split(".").map(Number);return r.length===3&&r[0]>=9||r[0]===8&&r[1]>=10};Ne.isWindows=r=>r&&typeof r.windows=="boolean"?r.windows:Cd===!0||Td.sep==="\\";Ne.escapeLast=(r,t,e)=>{let n=r.lastIndexOf(t,e);return n===-1?r:r[n-1]==="\\"?Ne.escapeLast(r,t,n-1):`${r.slice(0,n)}\\${r.slice(n)}`};Ne.removePrefix=(r,t={})=>{let e=r;return e.startsWith("./")&&(e=e.slice(2),t.prefix="./"),e};Ne.wrapOutput=(r,t={},e={})=>{let n=e.contains?"":"^",s=e.contains?"":"$",o=`${n}(?:${r})${s}`;return t.negated===!0&&(o=`(?:^(?!${o}).*$)`),o}});var el=x((ib,Zc)=>{"use strict";var Kc=Or(),{CHAR_ASTERISK:Va,CHAR_AT:Id,CHAR_BACKWARD_SLASH:Fr,CHAR_COMMA:xd,CHAR_DOT:Xa,CHAR_EXCLAMATION_MARK:Qa,CHAR_FORWARD_SLASH:Jc,CHAR_LEFT_CURLY_BRACE:Ja,CHAR_LEFT_PARENTHESES:Za,CHAR_LEFT_SQUARE_BRACKET:Ld,CHAR_PLUS:Nd,CHAR_QUESTION_MARK:Yc,CHAR_RIGHT_CURLY_BRACE:Bd,CHAR_RIGHT_PARENTHESES:Vc,CHAR_RIGHT_SQUARE_BRACKET:Ud}=Mr(),Xc=r=>r===Jc||r===Fr,Qc=r=>{r.isPrefix!==!0&&(r.depth=r.isGlobstar?1/0:1)},Hd=(r,t)=>{let e=t||{},n=r.length-1,s=e.parts===!0||e.scanToEnd===!0,o=[],l=[],m=[],b=r,T=-1,y=0,P=0,w=!1,te=!1,I=!1,N=!1,$=!1,Y=!1,le=!1,ue=!1,Re=!1,S=!1,se=0,V,W,B={value:"",depth:0,isGlob:!1},Z=()=>T>=n,k=()=>b.charCodeAt(T+1),z=()=>(V=W,b.charCodeAt(++T));for(;T<n;){W=z();let H;if(W===Fr){le=B.backslashes=!0,W=z(),W===Ja&&(Y=!0);continue}if(Y===!0||W===Ja){for(se++;Z()!==!0&&(W=z());){if(W===Fr){le=B.backslashes=!0,z();continue}if(W===Ja){se++;continue}if(Y!==!0&&W===Xa&&(W=z())===Xa){if(w=B.isBrace=!0,I=B.isGlob=!0,S=!0,s===!0)continue;break}if(Y!==!0&&W===xd){if(w=B.isBrace=!0,I=B.isGlob=!0,S=!0,s===!0)continue;break}if(W===Bd&&(se--,se===0)){Y=!1,w=B.isBrace=!0,S=!0;break}}if(s===!0)continue;break}if(W===Jc){if(o.push(T),l.push(B),B={value:"",depth:0,isGlob:!1},S===!0)continue;if(V===Xa&&T===y+1){y+=2;continue}P=T+1;continue}if(e.noext!==!0&&(W===Nd||W===Id||W===Va||W===Yc||W===Qa)===!0&&k()===Za){if(I=B.isGlob=!0,N=B.isExtglob=!0,S=!0,W===Qa&&T===y&&(Re=!0),s===!0){for(;Z()!==!0&&(W=z());){if(W===Fr){le=B.backslashes=!0,W=z();continue}if(W===Vc){I=B.isGlob=!0,S=!0;break}}continue}break}if(W===Va){if(V===Va&&($=B.isGlobstar=!0),I=B.isGlob=!0,S=!0,s===!0)continue;break}if(W===Yc){if(I=B.isGlob=!0,S=!0,s===!0)continue;break}if(W===Ld){for(;Z()!==!0&&(H=z());){if(H===Fr){le=B.backslashes=!0,z();continue}if(H===Ud){te=B.isBracket=!0,I=B.isGlob=!0,S=!0;break}}if(s===!0)continue;break}if(e.nonegate!==!0&&W===Qa&&T===y){ue=B.negated=!0,y++;continue}if(e.noparen!==!0&&W===Za){if(I=B.isGlob=!0,s===!0){for(;Z()!==!0&&(W=z());){if(W===Za){le=B.backslashes=!0,W=z();continue}if(W===Vc){S=!0;break}}continue}break}if(I===!0){if(S=!0,s===!0)continue;break}}e.noext===!0&&(N=!1,I=!1);let q=b,ae="",v="";y>0&&(ae=b.slice(0,y),b=b.slice(y),P-=y),q&&I===!0&&P>0?(q=b.slice(0,P),v=b.slice(P)):I===!0?(q="",v=b):q=b,q&&q!==""&&q!=="/"&&q!==b&&Xc(q.charCodeAt(q.length-1))&&(q=q.slice(0,-1)),e.unescape===!0&&(v&&(v=Kc.removeBackslashes(v)),q&&le===!0&&(q=Kc.removeBackslashes(q)));let _={prefix:ae,input:r,start:y,base:q,glob:v,isBrace:w,isBracket:te,isGlob:I,isExtglob:N,isGlobstar:$,negated:ue,negatedExtglob:Re};if(e.tokens===!0&&(_.maxDepth=0,Xc(W)||l.push(B),_.tokens=l),e.parts===!0||e.tokens===!0){let H;for(let ce=0;ce<o.length;ce++){let xe=H?H+1:y,Me=o[ce],Te=r.slice(xe,Me);e.tokens&&(ce===0&&y!==0?(l[ce].isPrefix=!0,l[ce].value=ae):l[ce].value=Te,Qc(l[ce]),_.maxDepth+=l[ce].depth),(ce!==0||Te!=="")&&m.push(Te),H=Me}if(H&&H+1<r.length){let ce=r.slice(H+1);m.push(ce),e.tokens&&(l[l.length-1].value=ce,Qc(l[l.length-1]),_.maxDepth+=l[l.length-1].depth)}_.slashes=o,_.parts=m}return _};Zc.exports=Hd});var il=x((sb,nl)=>{"use strict";var bn=Mr(),je=Or(),{MAX_LENGTH:gn,POSIX_REGEX_SOURCE:qd,REGEX_NON_SPECIAL_CHARS:Wd,REGEX_SPECIAL_CHARS_BACKREF:jd,REPLACEMENTS:tl}=bn,$d=(r,t)=>{if(typeof t.expandRange=="function")return t.expandRange(...r,t);r.sort();let e=`[${r.join("-")}]`;try{new RegExp(e)}catch{return r.map(s=>je.escapeRegex(s)).join("..")}return e},Zt=(r,t)=>`Missing ${r}: "${t}" - use "\\\\${t}" to match literal characters`,rl=(r,t)=>{if(typeof r!="string")throw new TypeError("Expected a string");r=tl[r]||r;let e={...t},n=typeof e.maxLength=="number"?Math.min(gn,e.maxLength):gn,s=r.length;if(s>n)throw new SyntaxError(`Input length: ${s}, exceeds maximum allowed length: ${n}`);let o={type:"bos",value:"",output:e.prepend||""},l=[o],m=e.capture?"":"?:",b=je.isWindows(t),T=bn.globChars(b),y=bn.extglobChars(T),{DOT_LITERAL:P,PLUS_LITERAL:w,SLASH_LITERAL:te,ONE_CHAR:I,DOTS_SLASH:N,NO_DOT:$,NO_DOT_SLASH:Y,NO_DOTS_SLASH:le,QMARK:ue,QMARK_NO_DOT:Re,STAR:S,START_ANCHOR:se}=T,V=L=>`(${m}(?:(?!${se}${L.dot?N:P}).)*?)`,W=e.dot?"":$,B=e.dot?ue:Re,Z=e.bash===!0?V(e):S;e.capture&&(Z=`(${Z})`),typeof e.noext=="boolean"&&(e.noextglob=e.noext);let k={input:r,index:-1,start:0,dot:e.dot===!0,consumed:"",output:"",prefix:"",backtrack:!1,negated:!1,brackets:0,braces:0,parens:0,quotes:0,globstar:!1,tokens:l};r=je.removePrefix(r,k),s=r.length;let z=[],q=[],ae=[],v=o,_,H=()=>k.index===s-1,ce=k.peek=(L=1)=>r[k.index+L],xe=k.advance=()=>r[++k.index]||"",Me=()=>r.slice(k.index+1),Te=(L="",me=0)=>{k.consumed+=L,k.index+=me},Ye=L=>{k.output+=L.output!=null?L.output:L.value,Te(L.value)},Et=()=>{let L=1;for(;ce()==="!"&&(ce(2)!=="("||ce(3)==="?");)xe(),k.start++,L++;return L%2===0?!1:(k.negated=!0,k.start++,!0)},ct=L=>{k[L]++,ae.push(L)},Be=L=>{k[L]--,ae.pop()},ee=L=>{if(v.type==="globstar"){let me=k.braces>0&&(L.type==="comma"||L.type==="brace"),F=L.extglob===!0||z.length&&(L.type==="pipe"||L.type==="paren");L.type!=="slash"&&L.type!=="paren"&&!me&&!F&&(k.output=k.output.slice(0,-v.output.length),v.type="star",v.value="*",v.output=Z,k.output+=v.output)}if(z.length&&L.type!=="paren"&&(z[z.length-1].inner+=L.value),(L.value||L.output)&&Ye(L),v&&v.type==="text"&&L.type==="text"){v.value+=L.value,v.output=(v.output||"")+L.value;return}L.prev=v,l.push(L),v=L},lt=(L,me)=>{let F={...y[me],conditions:1,inner:""};F.prev=v,F.parens=k.parens,F.output=k.output;let J=(e.capture?"(":"")+F.open;ct("parens"),ee({type:L,value:me,output:k.output?"":I}),ee({type:"paren",extglob:!0,value:xe(),output:J}),z.push(F)},ur=L=>{let me=L.close+(e.capture?")":""),F;if(L.type==="negate"){let J=Z;L.inner&&L.inner.length>1&&L.inner.includes("/")&&(J=V(e)),(J!==Z||H()||/^\)+$/.test(Me()))&&(me=L.close=`)$))${J}`),L.inner.includes("*")&&(F=Me())&&/^\.[^\\/.]+$/.test(F)&&(me=L.close=`)${F})${J})`),L.prev.type==="bos"&&(k.negatedExtglob=!0)}ee({type:"paren",extglob:!0,value:_,output:me}),Be("parens")};if(e.fastpaths!==!1&&!/(^[*!]|[/()[\]{}"])/.test(r)){let L=!1,me=r.replace(jd,(F,J,be,Ae,Se,De)=>Ae==="\\"?(L=!0,F):Ae==="?"?J?J+Ae+(Se?ue.repeat(Se.length):""):De===0?B+(Se?ue.repeat(Se.length):""):ue.repeat(be.length):Ae==="."?P.repeat(be.length):Ae==="*"?J?J+Ae+(Se?Z:""):Z:J?F:`\\${F}`);return L===!0&&(e.unescape===!0?me=me.replace(/\\/g,""):me=me.replace(/\\+/g,F=>F.length%2===0?"\\\\":F?"\\":"")),me===r&&e.contains===!0?(k.output=r,k):(k.output=je.wrapOutput(me,k,t),k)}for(;!H();){if(_=xe(),_==="\0")continue;if(_==="\\"){let F=ce();if(F==="/"&&e.bash!==!0||F==="."||F===";")continue;if(!F){_+="\\",ee({type:"text",value:_});continue}let J=/^\\+/.exec(Me()),be=0;if(J&&J[0].length>2&&(be=J[0].length,k.index+=be,be%2!==0&&(_+="\\")),e.unescape===!0?_=xe():_+=xe(),k.brackets===0){ee({type:"text",value:_});continue}}if(k.brackets>0&&(_!=="]"||v.value==="["||v.value==="[^")){if(e.posix!==!1&&_===":"){let F=v.value.slice(1);if(F.includes("[")&&(v.posix=!0,F.includes(":"))){let J=v.value.lastIndexOf("["),be=v.value.slice(0,J),Ae=v.value.slice(J+2),Se=qd[Ae];if(Se){v.value=be+Se,k.backtrack=!0,xe(),!o.output&&l.indexOf(v)===1&&(o.output=I);continue}}}(_==="["&&ce()!==":"||_==="-"&&ce()==="]")&&(_=`\\${_}`),_==="]"&&(v.value==="["||v.value==="[^")&&(_=`\\${_}`),e.posix===!0&&_==="!"&&v.value==="["&&(_="^"),v.value+=_,Ye({value:_});continue}if(k.quotes===1&&_!=='"'){_=je.escapeRegex(_),v.value+=_,Ye({value:_});continue}if(_==='"'){k.quotes=k.quotes===1?0:1,e.keepQuotes===!0&&ee({type:"text",value:_});continue}if(_==="("){ct("parens"),ee({type:"paren",value:_});continue}if(_===")"){if(k.parens===0&&e.strictBrackets===!0)throw new SyntaxError(Zt("opening","("));let F=z[z.length-1];if(F&&k.parens===F.parens+1){ur(z.pop());continue}ee({type:"paren",value:_,output:k.parens?")":"\\)"}),Be("parens");continue}if(_==="["){if(e.nobracket===!0||!Me().includes("]")){if(e.nobracket!==!0&&e.strictBrackets===!0)throw new SyntaxError(Zt("closing","]"));_=`\\${_}`}else ct("brackets");ee({type:"bracket",value:_});continue}if(_==="]"){if(e.nobracket===!0||v&&v.type==="bracket"&&v.value.length===1){ee({type:"text",value:_,output:`\\${_}`});continue}if(k.brackets===0){if(e.strictBrackets===!0)throw new SyntaxError(Zt("opening","["));ee({type:"text",value:_,output:`\\${_}`});continue}Be("brackets");let F=v.value.slice(1);if(v.posix!==!0&&F[0]==="^"&&!F.includes("/")&&(_=`/${_}`),v.value+=_,Ye({value:_}),e.literalBrackets===!1||je.hasRegexChars(F))continue;let J=je.escapeRegex(v.value);if(k.output=k.output.slice(0,-v.value.length),e.literalBrackets===!0){k.output+=J,v.value=J;continue}v.value=`(${m}${J}|${v.value})`,k.output+=v.value;continue}if(_==="{"&&e.nobrace!==!0){ct("braces");let F={type:"brace",value:_,output:"(",outputIndex:k.output.length,tokensIndex:k.tokens.length};q.push(F),ee(F);continue}if(_==="}"){let F=q[q.length-1];if(e.nobrace===!0||!F){ee({type:"text",value:_,output:_});continue}let J=")";if(F.dots===!0){let be=l.slice(),Ae=[];for(let Se=be.length-1;Se>=0&&(l.pop(),be[Se].type!=="brace");Se--)be[Se].type!=="dots"&&Ae.unshift(be[Se].value);J=$d(Ae,e),k.backtrack=!0}if(F.comma!==!0&&F.dots!==!0){let be=k.output.slice(0,F.outputIndex),Ae=k.tokens.slice(F.tokensIndex);F.value=F.output="\\{",_=J="\\}",k.output=be;for(let Se of Ae)k.output+=Se.output||Se.value}ee({type:"brace",value:_,output:J}),Be("braces"),q.pop();continue}if(_==="|"){z.length>0&&z[z.length-1].conditions++,ee({type:"text",value:_});continue}if(_===","){let F=_,J=q[q.length-1];J&&ae[ae.length-1]==="braces"&&(J.comma=!0,F="|"),ee({type:"comma",value:_,output:F});continue}if(_==="/"){if(v.type==="dot"&&k.index===k.start+1){k.start=k.index+1,k.consumed="",k.output="",l.pop(),v=o;continue}ee({type:"slash",value:_,output:te});continue}if(_==="."){if(k.braces>0&&v.type==="dot"){v.value==="."&&(v.output=P);let F=q[q.length-1];v.type="dots",v.output+=_,v.value+=_,F.dots=!0;continue}if(k.braces+k.parens===0&&v.type!=="bos"&&v.type!=="slash"){ee({type:"text",value:_,output:P});continue}ee({type:"dot",value:_,output:P});continue}if(_==="?"){if(!(v&&v.value==="(")&&e.noextglob!==!0&&ce()==="("&&ce(2)!=="?"){lt("qmark",_);continue}if(v&&v.type==="paren"){let J=ce(),be=_;if(J==="<"&&!je.supportsLookbehinds())throw new Error("Node.js v10 or higher is required for regex lookbehinds");(v.value==="("&&!/[!=<:]/.test(J)||J==="<"&&!/<([!=]|\w+>)/.test(Me()))&&(be=`\\${_}`),ee({type:"text",value:_,output:be});continue}if(e.dot!==!0&&(v.type==="slash"||v.type==="bos")){ee({type:"qmark",value:_,output:Re});continue}ee({type:"qmark",value:_,output:ue});continue}if(_==="!"){if(e.noextglob!==!0&&ce()==="("&&(ce(2)!=="?"||!/[!=<:]/.test(ce(3)))){lt("negate",_);continue}if(e.nonegate!==!0&&k.index===0){Et();continue}}if(_==="+"){if(e.noextglob!==!0&&ce()==="("&&ce(2)!=="?"){lt("plus",_);continue}if(v&&v.value==="("||e.regex===!1){ee({type:"plus",value:_,output:w});continue}if(v&&(v.type==="bracket"||v.type==="paren"||v.type==="brace")||k.parens>0){ee({type:"plus",value:_});continue}ee({type:"plus",value:w});continue}if(_==="@"){if(e.noextglob!==!0&&ce()==="("&&ce(2)!=="?"){ee({type:"at",extglob:!0,value:_,output:""});continue}ee({type:"text",value:_});continue}if(_!=="*"){(_==="$"||_==="^")&&(_=`\\${_}`);let F=Wd.exec(Me());F&&(_+=F[0],k.index+=F[0].length),ee({type:"text",value:_});continue}if(v&&(v.type==="globstar"||v.star===!0)){v.type="star",v.star=!0,v.value+=_,v.output=Z,k.backtrack=!0,k.globstar=!0,Te(_);continue}let L=Me();if(e.noextglob!==!0&&/^\([^?]/.test(L)){lt("star",_);continue}if(v.type==="star"){if(e.noglobstar===!0){Te(_);continue}let F=v.prev,J=F.prev,be=F.type==="slash"||F.type==="bos",Ae=J&&(J.type==="star"||J.type==="globstar");if(e.bash===!0&&(!be||L[0]&&L[0]!=="/")){ee({type:"star",value:_,output:""});continue}let Se=k.braces>0&&(F.type==="comma"||F.type==="brace"),De=z.length&&(F.type==="pipe"||F.type==="paren");if(!be&&F.type!=="paren"&&!Se&&!De){ee({type:"star",value:_,output:""});continue}for(;L.slice(0,3)==="/**";){let $e=r[k.index+4];if($e&&$e!=="/")break;L=L.slice(3),Te("/**",3)}if(F.type==="bos"&&H()){v.type="globstar",v.value+=_,v.output=V(e),k.output=v.output,k.globstar=!0,Te(_);continue}if(F.type==="slash"&&F.prev.type!=="bos"&&!Ae&&H()){k.output=k.output.slice(0,-(F.output+v.output).length),F.output=`(?:${F.output}`,v.type="globstar",v.output=V(e)+(e.strictSlashes?")":"|$)"),v.value+=_,k.globstar=!0,k.output+=F.output+v.output,Te(_);continue}if(F.type==="slash"&&F.prev.type!=="bos"&&L[0]==="/"){let $e=L[1]!==void 0?"|$":"";k.output=k.output.slice(0,-(F.output+v.output).length),F.output=`(?:${F.output}`,v.type="globstar",v.output=`${V(e)}${te}|${te}${$e})`,v.value+=_,k.output+=F.output+v.output,k.globstar=!0,Te(_+xe()),ee({type:"slash",value:"/",output:""});continue}if(F.type==="bos"&&L[0]==="/"){v.type="globstar",v.value+=_,v.output=`(?:^|${te}|${V(e)}${te})`,k.output=v.output,k.globstar=!0,Te(_+xe()),ee({type:"slash",value:"/",output:""});continue}k.output=k.output.slice(0,-v.output.length),v.type="globstar",v.output=V(e),v.value+=_,k.output+=v.output,k.globstar=!0,Te(_);continue}let me={type:"star",value:_,output:Z};if(e.bash===!0){me.output=".*?",(v.type==="bos"||v.type==="slash")&&(me.output=W+me.output),ee(me);continue}if(v&&(v.type==="bracket"||v.type==="paren")&&e.regex===!0){me.output=_,ee(me);continue}(k.index===k.start||v.type==="slash"||v.type==="dot")&&(v.type==="dot"?(k.output+=Y,v.output+=Y):e.dot===!0?(k.output+=le,v.output+=le):(k.output+=W,v.output+=W),ce()!=="*"&&(k.output+=I,v.output+=I)),ee(me)}for(;k.brackets>0;){if(e.strictBrackets===!0)throw new SyntaxError(Zt("closing","]"));k.output=je.escapeLast(k.output,"["),Be("brackets")}for(;k.parens>0;){if(e.strictBrackets===!0)throw new SyntaxError(Zt("closing",")"));k.output=je.escapeLast(k.output,"("),Be("parens")}for(;k.braces>0;){if(e.strictBrackets===!0)throw new SyntaxError(Zt("closing","}"));k.output=je.escapeLast(k.output,"{"),Be("braces")}if(e.strictSlashes!==!0&&(v.type==="star"||v.type==="bracket")&&ee({type:"maybe_slash",value:"",output:`${te}?`}),k.backtrack===!0){k.output="";for(let L of k.tokens)k.output+=L.output!=null?L.output:L.value,L.suffix&&(k.output+=L.suffix)}return k};rl.fastpaths=(r,t)=>{let e={...t},n=typeof e.maxLength=="number"?Math.min(gn,e.maxLength):gn,s=r.length;if(s>n)throw new SyntaxError(`Input length: ${s}, exceeds maximum allowed length: ${n}`);r=tl[r]||r;let o=je.isWindows(t),{DOT_LITERAL:l,SLASH_LITERAL:m,ONE_CHAR:b,DOTS_SLASH:T,NO_DOT:y,NO_DOTS:P,NO_DOTS_SLASH:w,STAR:te,START_ANCHOR:I}=bn.globChars(o),N=e.dot?P:y,$=e.dot?w:y,Y=e.capture?"":"?:",le={negated:!1,prefix:""},ue=e.bash===!0?".*?":te;e.capture&&(ue=`(${ue})`);let Re=W=>W.noglobstar===!0?ue:`(${Y}(?:(?!${I}${W.dot?T:l}).)*?)`,S=W=>{switch(W){case"*":return`${N}${b}${ue}`;case".*":return`${l}${b}${ue}`;case"*.*":return`${N}${ue}${l}${b}${ue}`;case"*/*":return`${N}${ue}${m}${b}${$}${ue}`;case"**":return N+Re(e);case"**/*":return`(?:${N}${Re(e)}${m})?${$}${b}${ue}`;case"**/*.*":return`(?:${N}${Re(e)}${m})?${$}${ue}${l}${b}${ue}`;case"**/.*":return`(?:${N}${Re(e)}${m})?${l}${b}${ue}`;default:{let B=/^(.*?)\.(\w+)$/.exec(W);if(!B)return;let Z=S(B[1]);return Z?Z+l+B[2]:void 0}}},se=je.removePrefix(r,le),V=S(se);return V&&e.strictSlashes!==!0&&(V+=`${m}?`),V};nl.exports=rl});var al=x((ab,sl)=>{"use strict";var Gd=require("path"),zd=el(),eo=il(),to=Or(),Kd=Mr(),Yd=r=>r&&typeof r=="object"&&!Array.isArray(r),ke=(r,t,e=!1)=>{if(Array.isArray(r)){let y=r.map(w=>ke(w,t,e));return w=>{for(let te of y){let I=te(w);if(I)return I}return!1}}let n=Yd(r)&&r.tokens&&r.input;if(r===""||typeof r!="string"&&!n)throw new TypeError("Expected pattern to be a non-empty string");let s=t||{},o=to.isWindows(t),l=n?ke.compileRe(r,t):ke.makeRe(r,t,!1,!0),m=l.state;delete l.state;let b=()=>!1;if(s.ignore){let y={...t,ignore:null,onMatch:null,onResult:null};b=ke(s.ignore,y,e)}let T=(y,P=!1)=>{let{isMatch:w,match:te,output:I}=ke.test(y,l,t,{glob:r,posix:o}),N={glob:r,state:m,regex:l,posix:o,input:y,output:I,match:te,isMatch:w};return typeof s.onResult=="function"&&s.onResult(N),w===!1?(N.isMatch=!1,P?N:!1):b(y)?(typeof s.onIgnore=="function"&&s.onIgnore(N),N.isMatch=!1,P?N:!1):(typeof s.onMatch=="function"&&s.onMatch(N),P?N:!0)};return e&&(T.state=m),T};ke.test=(r,t,e,{glob:n,posix:s}={})=>{if(typeof r!="string")throw new TypeError("Expected input to be a string");if(r==="")return{isMatch:!1,output:""};let o=e||{},l=o.format||(s?to.toPosixSlashes:null),m=r===n,b=m&&l?l(r):r;return m===!1&&(b=l?l(r):r,m=b===n),(m===!1||o.capture===!0)&&(o.matchBase===!0||o.basename===!0?m=ke.matchBase(r,t,e,s):m=t.exec(b)),{isMatch:!!m,match:m,output:b}};ke.matchBase=(r,t,e,n=to.isWindows(e))=>(t instanceof RegExp?t:ke.makeRe(t,e)).test(Gd.basename(r));ke.isMatch=(r,t,e)=>ke(t,e)(r);ke.parse=(r,t)=>Array.isArray(r)?r.map(e=>ke.parse(e,t)):eo(r,{...t,fastpaths:!1});ke.scan=(r,t)=>zd(r,t);ke.compileRe=(r,t,e=!1,n=!1)=>{if(e===!0)return r.output;let s=t||{},o=s.contains?"":"^",l=s.contains?"":"$",m=`${o}(?:${r.output})${l}`;r&&r.negated===!0&&(m=`^(?!${m}).*$`);let b=ke.toRegex(m,t);return n===!0&&(b.state=r),b};ke.makeRe=(r,t={},e=!1,n=!1)=>{if(!r||typeof r!="string")throw new TypeError("Expected a non-empty string");let s={negated:!1,fastpaths:!0};return t.fastpaths!==!1&&(r[0]==="."||r[0]==="*")&&(s.output=eo.fastpaths(r,t)),s.output||(s=eo(r,t)),ke.compileRe(s,t,e,n)};ke.toRegex=(r,t)=>{try{let e=t||{};return new RegExp(r,e.flags||(e.nocase?"i":""))}catch(e){if(t&&t.debug===!0)throw e;return/$^/}};ke.constants=Kd;sl.exports=ke});var ul=x((ob,ol)=>{"use strict";ol.exports=al()});var dl=x((ub,_l)=>{"use strict";var ll=require("util"),fl=qc(),Ze=ul(),ro=Or(),cl=r=>r===""||r==="./",we=(r,t,e)=>{t=[].concat(t),r=[].concat(r);let n=new Set,s=new Set,o=new Set,l=0,m=y=>{o.add(y.output),e&&e.onResult&&e.onResult(y)};for(let y=0;y<t.length;y++){let P=Ze(String(t[y]),{...e,onResult:m},!0),w=P.state.negated||P.state.negatedExtglob;w&&l++;for(let te of r){let I=P(te,!0);(w?!I.isMatch:I.isMatch)&&(w?n.add(I.output):(n.delete(I.output),s.add(I.output)))}}let T=(l===t.length?[...o]:[...s]).filter(y=>!n.has(y));if(e&&T.length===0){if(e.failglob===!0)throw new Error(`No matches found for "${t.join(", ")}"`);if(e.nonull===!0||e.nullglob===!0)return e.unescape?t.map(y=>y.replace(/\\/g,"")):t}return T};we.match=we;we.matcher=(r,t)=>Ze(r,t);we.isMatch=(r,t,e)=>Ze(t,e)(r);we.any=we.isMatch;we.not=(r,t,e={})=>{t=[].concat(t).map(String);let n=new Set,s=[],l=we(r,t,{...e,onResult:m=>{e.onResult&&e.onResult(m),s.push(m.output)}});for(let m of s)l.includes(m)||n.add(m);return[...n]};we.contains=(r,t,e)=>{if(typeof r!="string")throw new TypeError(`Expected a string: "${ll.inspect(r)}"`);if(Array.isArray(t))return t.some(n=>we.contains(r,n,e));if(typeof t=="string"){if(cl(r)||cl(t))return!1;if(r.includes(t)||r.startsWith("./")&&r.slice(2).includes(t))return!0}return we.isMatch(r,t,{...e,contains:!0})};we.matchKeys=(r,t,e)=>{if(!ro.isObject(r))throw new TypeError("Expected the first argument to be an object");let n=we(Object.keys(r),t,e),s={};for(let o of n)s[o]=r[o];return s};we.some=(r,t,e)=>{let n=[].concat(r);for(let s of[].concat(t)){let o=Ze(String(s),e);if(n.some(l=>o(l)))return!0}return!1};we.every=(r,t,e)=>{let n=[].concat(r);for(let s of[].concat(t)){let o=Ze(String(s),e);if(!n.every(l=>o(l)))return!1}return!0};we.all=(r,t,e)=>{if(typeof r!="string")throw new TypeError(`Expected a string: "${ll.inspect(r)}"`);return[].concat(t).every(n=>Ze(n,e)(r))};we.capture=(r,t,e)=>{let n=ro.isWindows(e),o=Ze.makeRe(String(r),{...e,capture:!0}).exec(n?ro.toPosixSlashes(t):t);if(o)return o.slice(1).map(l=>l===void 0?"":l)};we.makeRe=(...r)=>Ze.makeRe(...r);we.scan=(...r)=>Ze.scan(...r);we.parse=(r,t)=>{let e=[];for(let n of[].concat(r||[]))for(let s of fl(String(n),t))e.push(Ze.parse(s,t));return e};we.braces=(r,t)=>{if(typeof r!="string")throw new TypeError("Expected a string");return t&&t.nobrace===!0||!/\{.*\}/.test(r)?[r]:fl(r,t)};we.braceExpand=(r,t)=>{if(typeof r!="string")throw new TypeError("Expected a string");return we.braces(r,{...t,expand:!0})};_l.exports=we});var wl=x(Q=>{"use strict";Object.defineProperty(Q,"__esModule",{value:!0});Q.matchAny=Q.convertPatternsToRe=Q.makeRe=Q.getPatternParts=Q.expandBraceExpansion=Q.expandPatternsWithBraceExpansion=Q.isAffectDepthOfReadingPattern=Q.endsWithSlashGlobStar=Q.hasGlobStar=Q.getBaseDirectory=Q.isPatternRelatedToParentDirectory=Q.getPatternsOutsideCurrentDirectory=Q.getPatternsInsideCurrentDirectory=Q.getPositivePatterns=Q.getNegativePatterns=Q.isPositivePattern=Q.isNegativePattern=Q.convertToNegativePattern=Q.convertToPositivePattern=Q.isDynamicPattern=Q.isStaticPattern=void 0;var Vd=require("path"),Xd=ic(),no=dl(),pl="**",Qd="\\",Jd=/[*?]|^!/,Zd=/\[[^[]*]/,ep=/(?:^|[^!*+?@])\([^(]*\|[^|]*\)/,tp=/[!*+?@]\([^(]*\)/,rp=/,|\.\./;function ml(r,t={}){return!hl(r,t)}Q.isStaticPattern=ml;function hl(r,t={}){return r===""?!1:!!(t.caseSensitiveMatch===!1||r.includes(Qd)||Jd.test(r)||Zd.test(r)||ep.test(r)||t.extglob!==!1&&tp.test(r)||t.braceExpansion!==!1&&np(r))}Q.isDynamicPattern=hl;function np(r){let t=r.indexOf("{");if(t===-1)return!1;let e=r.indexOf("}",t+1);if(e===-1)return!1;let n=r.slice(t,e);return rp.test(n)}function ip(r){return yn(r)?r.slice(1):r}Q.convertToPositivePattern=ip;function sp(r){return"!"+r}Q.convertToNegativePattern=sp;function yn(r){return r.startsWith("!")&&r[1]!=="("}Q.isNegativePattern=yn;function bl(r){return!yn(r)}Q.isPositivePattern=bl;function ap(r){return r.filter(yn)}Q.getNegativePatterns=ap;function op(r){return r.filter(bl)}Q.getPositivePatterns=op;function up(r){return r.filter(t=>!io(t))}Q.getPatternsInsideCurrentDirectory=up;function cp(r){return r.filter(io)}Q.getPatternsOutsideCurrentDirectory=cp;function io(r){return r.startsWith("..")||r.startsWith("./..")}Q.isPatternRelatedToParentDirectory=io;function lp(r){return Xd(r,{flipBackslashes:!1})}Q.getBaseDirectory=lp;function fp(r){return r.includes(pl)}Q.hasGlobStar=fp;function gl(r){return r.endsWith("/"+pl)}Q.endsWithSlashGlobStar=gl;function _p(r){let t=Vd.basename(r);return gl(r)||ml(t)}Q.isAffectDepthOfReadingPattern=_p;function dp(r){return r.reduce((t,e)=>t.concat(yl(e)),[])}Q.expandPatternsWithBraceExpansion=dp;function yl(r){return no.braces(r,{expand:!0,nodupes:!0})}Q.expandBraceExpansion=yl;function pp(r,t){let{parts:e}=no.scan(r,Object.assign(Object.assign({},t),{parts:!0}));return e.length===0&&(e=[r]),e[0].startsWith("/")&&(e[0]=e[0].slice(1),e.unshift("")),e}Q.getPatternParts=pp;function vl(r,t){return no.makeRe(r,t)}Q.makeRe=vl;function mp(r,t){return r.map(e=>vl(e,t))}Q.convertPatternsToRe=mp;function hp(r,t){return t.some(e=>e.test(r))}Q.matchAny=hp});var Rl=x((lb,kl)=>{"use strict";var bp=require("stream"),Sl=bp.PassThrough,gp=Array.prototype.slice;kl.exports=yp;function yp(){let r=[],t=gp.call(arguments),e=!1,n=t[t.length-1];n&&!Array.isArray(n)&&n.pipe==null?t.pop():n={};let s=n.end!==!1,o=n.pipeError===!0;n.objectMode==null&&(n.objectMode=!0),n.highWaterMark==null&&(n.highWaterMark=64*1024);let l=Sl(n);function m(){for(let y=0,P=arguments.length;y<P;y++)r.push(El(arguments[y],n));return b(),this}function b(){if(e)return;e=!0;let y=r.shift();if(!y){process.nextTick(T);return}Array.isArray(y)||(y=[y]);let P=y.length+1;function w(){--P>0||(e=!1,b())}function te(I){function N(){I.removeListener("merge2UnpipeEnd",N),I.removeListener("end",N),o&&I.removeListener("error",$),w()}function $(Y){l.emit("error",Y)}if(I._readableState.endEmitted)return w();I.on("merge2UnpipeEnd",N),I.on("end",N),o&&I.on("error",$),I.pipe(l,{end:!1}),I.resume()}for(let I=0;I<y.length;I++)te(y[I]);w()}function T(){e=!1,l.emit("queueDrain"),s&&l.end()}return l.setMaxListeners(0),l.add=m,l.on("unpipe",function(y){y.emit("merge2UnpipeEnd")}),t.length&&m.apply(null,t),l}function El(r,t){if(Array.isArray(r))for(let e=0,n=r.length;e<n;e++)r[e]=El(r[e],t);else{if(!r._readableState&&r.pipe&&(r=r.pipe(Sl(t))),!r._readableState||!r.pause||!r.pipe)throw new Error("Only readable stream can be merged.");r.pause()}return r}});var Dl=x(vn=>{"use strict";Object.defineProperty(vn,"__esModule",{value:!0});vn.merge=void 0;var vp=Rl();function wp(r){let t=vp(r);return r.forEach(e=>{e.once("error",n=>t.emit("error",n))}),t.once("close",()=>Al(r)),t.once("end",()=>Al(r)),t}vn.merge=wp;function Al(r){r.forEach(t=>t.emit("close"))}});var Tl=x(er=>{"use strict";Object.defineProperty(er,"__esModule",{value:!0});er.isEmpty=er.isString=void 0;function Sp(r){return typeof r=="string"}er.isString=Sp;function Ep(r){return r===""}er.isEmpty=Ep});var ot=x(Oe=>{"use strict";Object.defineProperty(Oe,"__esModule",{value:!0});Oe.string=Oe.stream=Oe.pattern=Oe.path=Oe.fs=Oe.errno=Oe.array=void 0;var kp=Yu();Oe.array=kp;var Rp=Vu();Oe.errno=Rp;var Ap=Xu();Oe.fs=Ap;var Dp=Qu();Oe.path=Dp;var Tp=wl();Oe.pattern=Tp;var Cp=Dl();Oe.stream=Cp;var Pp=Tl();Oe.string=Pp});var Ml=x(Fe=>{"use strict";Object.defineProperty(Fe,"__esModule",{value:!0});Fe.convertPatternGroupToTask=Fe.convertPatternGroupsToTasks=Fe.groupPatternsByBaseDirectory=Fe.getNegativePatternsAsPositive=Fe.getPositivePatterns=Fe.convertPatternsToTasks=Fe.generate=void 0;var ut=ot();function Mp(r,t){let e=Cl(r),n=Pl(r,t.ignore),s=e.filter(b=>ut.pattern.isStaticPattern(b,t)),o=e.filter(b=>ut.pattern.isDynamicPattern(b,t)),l=so(s,n,!1),m=so(o,n,!0);return l.concat(m)}Fe.generate=Mp;function so(r,t,e){let n=[],s=ut.pattern.getPatternsOutsideCurrentDirectory(r),o=ut.pattern.getPatternsInsideCurrentDirectory(r),l=ao(s),m=ao(o);return n.push(...oo(l,t,e)),"."in m?n.push(uo(".",o,t,e)):n.push(...oo(m,t,e)),n}Fe.convertPatternsToTasks=so;function Cl(r){return ut.pattern.getPositivePatterns(r)}Fe.getPositivePatterns=Cl;function Pl(r,t){return ut.pattern.getNegativePatterns(r).concat(t).map(ut.pattern.convertToPositivePattern)}Fe.getNegativePatternsAsPositive=Pl;function ao(r){let t={};return r.reduce((e,n)=>{let s=ut.pattern.getBaseDirectory(n);return s in e?e[s].push(n):e[s]=[n],e},t)}Fe.groupPatternsByBaseDirectory=ao;function oo(r,t,e){return Object.keys(r).map(n=>uo(n,r[n],t,e))}Fe.convertPatternGroupsToTasks=oo;function uo(r,t,e,n){return{dynamic:n,positive:t,negative:e,base:r,patterns:[].concat(t,e.map(ut.pattern.convertToNegativePattern))}}Fe.convertPatternGroupToTask=uo});var Fl=x(tr=>{"use strict";Object.defineProperty(tr,"__esModule",{value:!0});tr.removeDuplicateSlashes=tr.transform=void 0;var Op=/(?!^)\/{2,}/g;function Fp(r){return r.map(t=>Ol(t))}tr.transform=Fp;function Ol(r){return r.replace(Op,"/")}tr.removeDuplicateSlashes=Ol});var xl=x(wn=>{"use strict";Object.defineProperty(wn,"__esModule",{value:!0});wn.read=void 0;function Ip(r,t,e){t.fs.lstat(r,(n,s)=>{if(n!==null){Il(e,n);return}if(!s.isSymbolicLink()||!t.followSymbolicLink){co(e,s);return}t.fs.stat(r,(o,l)=>{if(o!==null){if(t.throwErrorOnBrokenSymbolicLink){Il(e,o);return}co(e,s);return}t.markSymbolicLink&&(l.isSymbolicLink=()=>!0),co(e,l)})})}wn.read=Ip;function Il(r,t){r(t)}function co(r,t){r(null,t)}});var Ll=x(Sn=>{"use strict";Object.defineProperty(Sn,"__esModule",{value:!0});Sn.read=void 0;function xp(r,t){let e=t.fs.lstatSync(r);if(!e.isSymbolicLink()||!t.followSymbolicLink)return e;try{let n=t.fs.statSync(r);return t.markSymbolicLink&&(n.isSymbolicLink=()=>!0),n}catch(n){if(!t.throwErrorOnBrokenSymbolicLink)return e;throw n}}Sn.read=xp});var Nl=x(bt=>{"use strict";Object.defineProperty(bt,"__esModule",{value:!0});bt.createFileSystemAdapter=bt.FILE_SYSTEM_ADAPTER=void 0;var En=require("fs");bt.FILE_SYSTEM_ADAPTER={lstat:En.lstat,stat:En.stat,lstatSync:En.lstatSync,statSync:En.statSync};function Lp(r){return r===void 0?bt.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},bt.FILE_SYSTEM_ADAPTER),r)}bt.createFileSystemAdapter=Lp});var Bl=x(fo=>{"use strict";Object.defineProperty(fo,"__esModule",{value:!0});var Np=Nl(),lo=class{constructor(t={}){this._options=t,this.followSymbolicLink=this._getValue(this._options.followSymbolicLink,!0),this.fs=Np.createFileSystemAdapter(this._options.fs),this.markSymbolicLink=this._getValue(this._options.markSymbolicLink,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0)}_getValue(t,e){return t??e}};fo.default=lo});var Lt=x(gt=>{"use strict";Object.defineProperty(gt,"__esModule",{value:!0});gt.statSync=gt.stat=gt.Settings=void 0;var Ul=xl(),Bp=Ll(),_o=Bl();gt.Settings=_o.default;function Up(r,t,e){if(typeof t=="function"){Ul.read(r,po(),t);return}Ul.read(r,po(t),e)}gt.stat=Up;function Hp(r,t){let e=po(t);return Bp.read(r,e)}gt.statSync=Hp;function po(r={}){return r instanceof _o.default?r:new _o.default(r)}});var Wl=x((wb,ql)=>{var Hl;ql.exports=typeof queueMicrotask=="function"?queueMicrotask.bind(typeof window<"u"?window:global):r=>(Hl||(Hl=Promise.resolve())).then(r).catch(t=>setTimeout(()=>{throw t},0))});var $l=x((Sb,jl)=>{jl.exports=Wp;var qp=Wl();function Wp(r,t){let e,n,s,o=!0;Array.isArray(r)?(e=[],n=r.length):(s=Object.keys(r),e={},n=s.length);function l(b){function T(){t&&t(b,e),t=null}o?qp(T):T()}function m(b,T,y){e[b]=y,(--n===0||T)&&l(T)}n?s?s.forEach(function(b){r[b](function(T,y){m(b,T,y)})}):r.forEach(function(b,T){b(function(y,P){m(T,y,P)})}):l(null),o=!1}});var mo=x(Rn=>{"use strict";Object.defineProperty(Rn,"__esModule",{value:!0});Rn.IS_SUPPORT_READDIR_WITH_FILE_TYPES=void 0;var kn=process.versions.node.split(".");if(kn[0]===void 0||kn[1]===void 0)throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);var Gl=Number.parseInt(kn[0],10),jp=Number.parseInt(kn[1],10),zl=10,$p=10,Gp=Gl>zl,zp=Gl===zl&&jp>=$p;Rn.IS_SUPPORT_READDIR_WITH_FILE_TYPES=Gp||zp});var Kl=x(An=>{"use strict";Object.defineProperty(An,"__esModule",{value:!0});An.createDirentFromStats=void 0;var ho=class{constructor(t,e){this.name=t,this.isBlockDevice=e.isBlockDevice.bind(e),this.isCharacterDevice=e.isCharacterDevice.bind(e),this.isDirectory=e.isDirectory.bind(e),this.isFIFO=e.isFIFO.bind(e),this.isFile=e.isFile.bind(e),this.isSocket=e.isSocket.bind(e),this.isSymbolicLink=e.isSymbolicLink.bind(e)}};function Kp(r,t){return new ho(r,t)}An.createDirentFromStats=Kp});var bo=x(Dn=>{"use strict";Object.defineProperty(Dn,"__esModule",{value:!0});Dn.fs=void 0;var Yp=Kl();Dn.fs=Yp});var go=x(Tn=>{"use strict";Object.defineProperty(Tn,"__esModule",{value:!0});Tn.joinPathSegments=void 0;function Vp(r,t,e){return r.endsWith(e)?r+t:r+e+t}Tn.joinPathSegments=Vp});var Zl=x(yt=>{"use strict";Object.defineProperty(yt,"__esModule",{value:!0});yt.readdir=yt.readdirWithFileTypes=yt.read=void 0;var Xp=Lt(),Yl=$l(),Qp=mo(),Vl=bo(),Xl=go();function Jp(r,t,e){if(!t.stats&&Qp.IS_SUPPORT_READDIR_WITH_FILE_TYPES){Ql(r,t,e);return}Jl(r,t,e)}yt.read=Jp;function Ql(r,t,e){t.fs.readdir(r,{withFileTypes:!0},(n,s)=>{if(n!==null){Cn(e,n);return}let o=s.map(m=>({dirent:m,name:m.name,path:Xl.joinPathSegments(r,m.name,t.pathSegmentSeparator)}));if(!t.followSymbolicLinks){yo(e,o);return}let l=o.map(m=>Zp(m,t));Yl(l,(m,b)=>{if(m!==null){Cn(e,m);return}yo(e,b)})})}yt.readdirWithFileTypes=Ql;function Zp(r,t){return e=>{if(!r.dirent.isSymbolicLink()){e(null,r);return}t.fs.stat(r.path,(n,s)=>{if(n!==null){if(t.throwErrorOnBrokenSymbolicLink){e(n);return}e(null,r);return}r.dirent=Vl.fs.createDirentFromStats(r.name,s),e(null,r)})}}function Jl(r,t,e){t.fs.readdir(r,(n,s)=>{if(n!==null){Cn(e,n);return}let o=s.map(l=>{let m=Xl.joinPathSegments(r,l,t.pathSegmentSeparator);return b=>{Xp.stat(m,t.fsStatSettings,(T,y)=>{if(T!==null){b(T);return}let P={name:l,path:m,dirent:Vl.fs.createDirentFromStats(l,y)};t.stats&&(P.stats=y),b(null,P)})}});Yl(o,(l,m)=>{if(l!==null){Cn(e,l);return}yo(e,m)})})}yt.readdir=Jl;function Cn(r,t){r(t)}function yo(r,t){r(null,t)}});var sf=x(vt=>{"use strict";Object.defineProperty(vt,"__esModule",{value:!0});vt.readdir=vt.readdirWithFileTypes=vt.read=void 0;var em=Lt(),tm=mo(),ef=bo(),tf=go();function rm(r,t){return!t.stats&&tm.IS_SUPPORT_READDIR_WITH_FILE_TYPES?rf(r,t):nf(r,t)}vt.read=rm;function rf(r,t){return t.fs.readdirSync(r,{withFileTypes:!0}).map(n=>{let s={dirent:n,name:n.name,path:tf.joinPathSegments(r,n.name,t.pathSegmentSeparator)};if(s.dirent.isSymbolicLink()&&t.followSymbolicLinks)try{let o=t.fs.statSync(s.path);s.dirent=ef.fs.createDirentFromStats(s.name,o)}catch(o){if(t.throwErrorOnBrokenSymbolicLink)throw o}return s})}vt.readdirWithFileTypes=rf;function nf(r,t){return t.fs.readdirSync(r).map(n=>{let s=tf.joinPathSegments(r,n,t.pathSegmentSeparator),o=em.statSync(s,t.fsStatSettings),l={name:n,path:s,dirent:ef.fs.createDirentFromStats(n,o)};return t.stats&&(l.stats=o),l})}vt.readdir=nf});var af=x(wt=>{"use strict";Object.defineProperty(wt,"__esModule",{value:!0});wt.createFileSystemAdapter=wt.FILE_SYSTEM_ADAPTER=void 0;var rr=require("fs");wt.FILE_SYSTEM_ADAPTER={lstat:rr.lstat,stat:rr.stat,lstatSync:rr.lstatSync,statSync:rr.statSync,readdir:rr.readdir,readdirSync:rr.readdirSync};function nm(r){return r===void 0?wt.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},wt.FILE_SYSTEM_ADAPTER),r)}wt.createFileSystemAdapter=nm});var of=x(wo=>{"use strict";Object.defineProperty(wo,"__esModule",{value:!0});var im=require("path"),sm=Lt(),am=af(),vo=class{constructor(t={}){this._options=t,this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!1),this.fs=am.createFileSystemAdapter(this._options.fs),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,im.sep),this.stats=this._getValue(this._options.stats,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0),this.fsStatSettings=new sm.Settings({followSymbolicLink:this.followSymbolicLinks,fs:this.fs,throwErrorOnBrokenSymbolicLink:this.throwErrorOnBrokenSymbolicLink})}_getValue(t,e){return t??e}};wo.default=vo});var Pn=x(St=>{"use strict";Object.defineProperty(St,"__esModule",{value:!0});St.Settings=St.scandirSync=St.scandir=void 0;var uf=Zl(),om=sf(),So=of();St.Settings=So.default;function um(r,t,e){if(typeof t=="function"){uf.read(r,Eo(),t);return}uf.read(r,Eo(t),e)}St.scandir=um;function cm(r,t){let e=Eo(t);return om.read(r,e)}St.scandirSync=cm;function Eo(r={}){return r instanceof So.default?r:new So.default(r)}});var lf=x((Ob,cf)=>{"use strict";function lm(r){var t=new r,e=t;function n(){var o=t;return o.next?t=o.next:(t=new r,e=t),o.next=null,o}function s(o){e.next=o,e=o}return{get:n,release:s}}cf.exports=lm});var _f=x((Fb,ko)=>{"use strict";var fm=lf();function ff(r,t,e){if(typeof r=="function"&&(e=t,t=r,r=null),e<1)throw new Error("fastqueue concurrency must be greater than 1");var n=fm(_m),s=null,o=null,l=0,m=null,b={push:N,drain:ze,saturated:ze,pause:y,paused:!1,concurrency:e,running:T,resume:te,idle:I,length:P,getQueue:w,unshift:$,empty:ze,kill:le,killAndDrain:ue,error:Re};return b;function T(){return l}function y(){b.paused=!0}function P(){for(var S=s,se=0;S;)S=S.next,se++;return se}function w(){for(var S=s,se=[];S;)se.push(S.value),S=S.next;return se}function te(){if(b.paused){b.paused=!1;for(var S=0;S<b.concurrency;S++)l++,Y()}}function I(){return l===0&&b.length()===0}function N(S,se){var V=n.get();V.context=r,V.release=Y,V.value=S,V.callback=se||ze,V.errorHandler=m,l===b.concurrency||b.paused?o?(o.next=V,o=V):(s=V,o=V,b.saturated()):(l++,t.call(r,V.value,V.worked))}function $(S,se){var V=n.get();V.context=r,V.release=Y,V.value=S,V.callback=se||ze,l===b.concurrency||b.paused?s?(V.next=s,s=V):(s=V,o=V,b.saturated()):(l++,t.call(r,V.value,V.worked))}function Y(S){S&&n.release(S);var se=s;se?b.paused?l--:(o===s&&(o=null),s=se.next,se.next=null,t.call(r,se.value,se.worked),o===null&&b.empty()):--l===0&&b.drain()}function le(){s=null,o=null,b.drain=ze}function ue(){s=null,o=null,b.drain(),b.drain=ze}function Re(S){m=S}}function ze(){}function _m(){this.value=null,this.callback=ze,this.next=null,this.release=ze,this.context=null,this.errorHandler=null;var r=this;this.worked=function(e,n){var s=r.callback,o=r.errorHandler,l=r.value;r.value=null,r.callback=ze,r.errorHandler&&o(e,l),s.call(r.context,e,n),r.release(r)}}function dm(r,t,e){typeof r=="function"&&(e=t,t=r,r=null);function n(y,P){t.call(this,y).then(function(w){P(null,w)},P)}var s=ff(r,n,e),o=s.push,l=s.unshift;return s.push=m,s.unshift=b,s.drained=T,s;function m(y){var P=new Promise(function(w,te){o(y,function(I,N){if(I){te(I);return}w(N)})});return P.catch(ze),P}function b(y){var P=new Promise(function(w,te){l(y,function(I,N){if(I){te(I);return}w(N)})});return P.catch(ze),P}function T(){var y=s.drain,P=new Promise(function(w){s.drain=function(){y(),w()}});return P}}ko.exports=ff;ko.exports.promise=dm});var Mn=x(et=>{"use strict";Object.defineProperty(et,"__esModule",{value:!0});et.joinPathSegments=et.replacePathSegmentSeparator=et.isAppliedFilter=et.isFatalError=void 0;function pm(r,t){return r.errorFilter===null?!0:!r.errorFilter(t)}et.isFatalError=pm;function mm(r,t){return r===null||r(t)}et.isAppliedFilter=mm;function hm(r,t){return r.split(/[/\\]/).join(t)}et.replacePathSegmentSeparator=hm;function bm(r,t,e){return r===""?t:r.endsWith(e)?r+t:r+e+t}et.joinPathSegments=bm});var Do=x(Ao=>{"use strict";Object.defineProperty(Ao,"__esModule",{value:!0});var gm=Mn(),Ro=class{constructor(t,e){this._root=t,this._settings=e,this._root=gm.replacePathSegmentSeparator(t,e.pathSegmentSeparator)}};Ao.default=Ro});var Po=x(Co=>{"use strict";Object.defineProperty(Co,"__esModule",{value:!0});var ym=require("events"),vm=Pn(),wm=_f(),On=Mn(),Sm=Do(),To=class extends Sm.default{constructor(t,e){super(t,e),this._settings=e,this._scandir=vm.scandir,this._emitter=new ym.EventEmitter,this._queue=wm(this._worker.bind(this),this._settings.concurrency),this._isFatalError=!1,this._isDestroyed=!1,this._queue.drain=()=>{this._isFatalError||this._emitter.emit("end")}}read(){return this._isFatalError=!1,this._isDestroyed=!1,setImmediate(()=>{this._pushToQueue(this._root,this._settings.basePath)}),this._emitter}get isDestroyed(){return this._isDestroyed}destroy(){if(this._isDestroyed)throw new Error("The reader is already destroyed");this._isDestroyed=!0,this._queue.killAndDrain()}onEntry(t){this._emitter.on("entry",t)}onError(t){this._emitter.once("error",t)}onEnd(t){this._emitter.once("end",t)}_pushToQueue(t,e){let n={directory:t,base:e};this._queue.push(n,s=>{s!==null&&this._handleError(s)})}_worker(t,e){this._scandir(t.directory,this._settings.fsScandirSettings,(n,s)=>{if(n!==null){e(n,void 0);return}for(let o of s)this._handleEntry(o,t.base);e(null,void 0)})}_handleError(t){this._isDestroyed||!On.isFatalError(this._settings,t)||(this._isFatalError=!0,this._isDestroyed=!0,this._emitter.emit("error",t))}_handleEntry(t,e){if(this._isDestroyed||this._isFatalError)return;let n=t.path;e!==void 0&&(t.path=On.joinPathSegments(e,t.name,this._settings.pathSegmentSeparator)),On.isAppliedFilter(this._settings.entryFilter,t)&&this._emitEntry(t),t.dirent.isDirectory()&&On.isAppliedFilter(this._settings.deepFilter,t)&&this._pushToQueue(n,e===void 0?void 0:t.path)}_emitEntry(t){this._emitter.emit("entry",t)}};Co.default=To});var df=x(Oo=>{"use strict";Object.defineProperty(Oo,"__esModule",{value:!0});var Em=Po(),Mo=class{constructor(t,e){this._root=t,this._settings=e,this._reader=new Em.default(this._root,this._settings),this._storage=[]}read(t){this._reader.onError(e=>{km(t,e)}),this._reader.onEntry(e=>{this._storage.push(e)}),this._reader.onEnd(()=>{Rm(t,this._storage)}),this._reader.read()}};Oo.default=Mo;function km(r,t){r(t)}function Rm(r,t){r(null,t)}});var pf=x(Io=>{"use strict";Object.defineProperty(Io,"__esModule",{value:!0});var Am=require("stream"),Dm=Po(),Fo=class{constructor(t,e){this._root=t,this._settings=e,this._reader=new Dm.default(this._root,this._settings),this._stream=new Am.Readable({objectMode:!0,read:()=>{},destroy:()=>{this._reader.isDestroyed||this._reader.destroy()}})}read(){return this._reader.onError(t=>{this._stream.emit("error",t)}),this._reader.onEntry(t=>{this._stream.push(t)}),this._reader.onEnd(()=>{this._stream.push(null)}),this._reader.read(),this._stream}};Io.default=Fo});var mf=x(Lo=>{"use strict";Object.defineProperty(Lo,"__esModule",{value:!0});var Tm=Pn(),Fn=Mn(),Cm=Do(),xo=class extends Cm.default{constructor(){super(...arguments),this._scandir=Tm.scandirSync,this._storage=[],this._queue=new Set}read(){return this._pushToQueue(this._root,this._settings.basePath),this._handleQueue(),this._storage}_pushToQueue(t,e){this._queue.add({directory:t,base:e})}_handleQueue(){for(let t of this._queue.values())this._handleDirectory(t.directory,t.base)}_handleDirectory(t,e){try{let n=this._scandir(t,this._settings.fsScandirSettings);for(let s of n)this._handleEntry(s,e)}catch(n){this._handleError(n)}}_handleError(t){if(Fn.isFatalError(this._settings,t))throw t}_handleEntry(t,e){let n=t.path;e!==void 0&&(t.path=Fn.joinPathSegments(e,t.name,this._settings.pathSegmentSeparator)),Fn.isAppliedFilter(this._settings.entryFilter,t)&&this._pushToStorage(t),t.dirent.isDirectory()&&Fn.isAppliedFilter(this._settings.deepFilter,t)&&this._pushToQueue(n,e===void 0?void 0:t.path)}_pushToStorage(t){this._storage.push(t)}};Lo.default=xo});var hf=x(Bo=>{"use strict";Object.defineProperty(Bo,"__esModule",{value:!0});var Pm=mf(),No=class{constructor(t,e){this._root=t,this._settings=e,this._reader=new Pm.default(this._root,this._settings)}read(){return this._reader.read()}};Bo.default=No});var bf=x(Ho=>{"use strict";Object.defineProperty(Ho,"__esModule",{value:!0});var Mm=require("path"),Om=Pn(),Uo=class{constructor(t={}){this._options=t,this.basePath=this._getValue(this._options.basePath,void 0),this.concurrency=this._getValue(this._options.concurrency,Number.POSITIVE_INFINITY),this.deepFilter=this._getValue(this._options.deepFilter,null),this.entryFilter=this._getValue(this._options.entryFilter,null),this.errorFilter=this._getValue(this._options.errorFilter,null),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,Mm.sep),this.fsScandirSettings=new Om.Settings({followSymbolicLinks:this._options.followSymbolicLinks,fs:this._options.fs,pathSegmentSeparator:this._options.pathSegmentSeparator,stats:this._options.stats,throwErrorOnBrokenSymbolicLink:this._options.throwErrorOnBrokenSymbolicLink})}_getValue(t,e){return t??e}};Ho.default=Uo});var xn=x(tt=>{"use strict";Object.defineProperty(tt,"__esModule",{value:!0});tt.Settings=tt.walkStream=tt.walkSync=tt.walk=void 0;var gf=df(),Fm=pf(),Im=hf(),qo=bf();tt.Settings=qo.default;function xm(r,t,e){if(typeof t=="function"){new gf.default(r,In()).read(t);return}new gf.default(r,In(t)).read(e)}tt.walk=xm;function Lm(r,t){let e=In(t);return new Im.default(r,e).read()}tt.walkSync=Lm;function Nm(r,t){let e=In(t);return new Fm.default(r,e).read()}tt.walkStream=Nm;function In(r={}){return r instanceof qo.default?r:new qo.default(r)}});var Ln=x(jo=>{"use strict";Object.defineProperty(jo,"__esModule",{value:!0});var Bm=require("path"),Um=Lt(),yf=ot(),Wo=class{constructor(t){this._settings=t,this._fsStatSettings=new Um.Settings({followSymbolicLink:this._settings.followSymbolicLinks,fs:this._settings.fs,throwErrorOnBrokenSymbolicLink:this._settings.followSymbolicLinks})}_getFullEntryPath(t){return Bm.resolve(this._settings.cwd,t)}_makeEntry(t,e){let n={name:e,path:e,dirent:yf.fs.createDirentFromStats(e,t)};return this._settings.stats&&(n.stats=t),n}_isFatalError(t){return!yf.errno.isEnoentCodeError(t)&&!this._settings.suppressErrors}};jo.default=Wo});var zo=x(Go=>{"use strict";Object.defineProperty(Go,"__esModule",{value:!0});var Hm=require("stream"),qm=Lt(),Wm=xn(),jm=Ln(),$o=class extends jm.default{constructor(){super(...arguments),this._walkStream=Wm.walkStream,this._stat=qm.stat}dynamic(t,e){return this._walkStream(t,e)}static(t,e){let n=t.map(this._getFullEntryPath,this),s=new Hm.PassThrough({objectMode:!0});s._write=(o,l,m)=>this._getEntry(n[o],t[o],e).then(b=>{b!==null&&e.entryFilter(b)&&s.push(b),o===n.length-1&&s.end(),m()}).catch(m);for(let o=0;o<n.length;o++)s.write(o);return s}_getEntry(t,e,n){return this._getStat(t).then(s=>this._makeEntry(s,e)).catch(s=>{if(n.errorFilter(s))return null;throw s})}_getStat(t){return new Promise((e,n)=>{this._stat(t,this._fsStatSettings,(s,o)=>s===null?e(o):n(s))})}};Go.default=$o});var vf=x(Yo=>{"use strict";Object.defineProperty(Yo,"__esModule",{value:!0});var $m=xn(),Gm=Ln(),zm=zo(),Ko=class extends Gm.default{constructor(){super(...arguments),this._walkAsync=$m.walk,this._readerStream=new zm.default(this._settings)}dynamic(t,e){return new Promise((n,s)=>{this._walkAsync(t,e,(o,l)=>{o===null?n(l):s(o)})})}async static(t,e){let n=[],s=this._readerStream.static(t,e);return new Promise((o,l)=>{s.once("error",l),s.on("data",m=>n.push(m)),s.once("end",()=>o(n))})}};Yo.default=Ko});var wf=x(Xo=>{"use strict";Object.defineProperty(Xo,"__esModule",{value:!0});var nr=ot(),Vo=class{constructor(t,e,n){this._patterns=t,this._settings=e,this._micromatchOptions=n,this._storage=[],this._fillStorage()}_fillStorage(){let t=nr.pattern.expandPatternsWithBraceExpansion(this._patterns);for(let e of t){let n=this._getPatternSegments(e),s=this._splitSegmentsIntoSections(n);this._storage.push({complete:s.length<=1,pattern:e,segments:n,sections:s})}}_getPatternSegments(t){return nr.pattern.getPatternParts(t,this._micromatchOptions).map(n=>nr.pattern.isDynamicPattern(n,this._settings)?{dynamic:!0,pattern:n,patternRe:nr.pattern.makeRe(n,this._micromatchOptions)}:{dynamic:!1,pattern:n})}_splitSegmentsIntoSections(t){return nr.array.splitWhen(t,e=>e.dynamic&&nr.pattern.hasGlobStar(e.pattern))}};Xo.default=Vo});var Sf=x(Jo=>{"use strict";Object.defineProperty(Jo,"__esModule",{value:!0});var Km=wf(),Qo=class extends Km.default{match(t){let e=t.split("/"),n=e.length,s=this._storage.filter(o=>!o.complete||o.segments.length>n);for(let o of s){let l=o.sections[0];if(!o.complete&&n>l.length||e.every((b,T)=>{let y=o.segments[T];return!!(y.dynamic&&y.patternRe.test(b)||!y.dynamic&&y.pattern===b)}))return!0}return!1}};Jo.default=Qo});var Ef=x(eu=>{"use strict";Object.defineProperty(eu,"__esModule",{value:!0});var Nn=ot(),Ym=Sf(),Zo=class{constructor(t,e){this._settings=t,this._micromatchOptions=e}getFilter(t,e,n){let s=this._getMatcher(e),o=this._getNegativePatternsRe(n);return l=>this._filter(t,l,s,o)}_getMatcher(t){return new Ym.default(t,this._settings,this._micromatchOptions)}_getNegativePatternsRe(t){let e=t.filter(Nn.pattern.isAffectDepthOfReadingPattern);return Nn.pattern.convertPatternsToRe(e,this._micromatchOptions)}_filter(t,e,n,s){if(this._isSkippedByDeep(t,e.path)||this._isSkippedSymbolicLink(e))return!1;let o=Nn.path.removeLeadingDotSegment(e.path);return this._isSkippedByPositivePatterns(o,n)?!1:this._isSkippedByNegativePatterns(o,s)}_isSkippedByDeep(t,e){return this._settings.deep===1/0?!1:this._getEntryLevel(t,e)>=this._settings.deep}_getEntryLevel(t,e){let n=e.split("/").length;if(t==="")return n;let s=t.split("/").length;return n-s}_isSkippedSymbolicLink(t){return!this._settings.followSymbolicLinks&&t.dirent.isSymbolicLink()}_isSkippedByPositivePatterns(t,e){return!this._settings.baseNameMatch&&!e.match(t)}_isSkippedByNegativePatterns(t,e){return!Nn.pattern.matchAny(t,e)}};eu.default=Zo});var kf=x(ru=>{"use strict";Object.defineProperty(ru,"__esModule",{value:!0});var Nt=ot(),tu=class{constructor(t,e){this._settings=t,this._micromatchOptions=e,this.index=new Map}getFilter(t,e){let n=Nt.pattern.convertPatternsToRe(t,this._micromatchOptions),s=Nt.pattern.convertPatternsToRe(e,this._micromatchOptions);return o=>this._filter(o,n,s)}_filter(t,e,n){if(this._settings.unique&&this._isDuplicateEntry(t)||this._onlyFileFilter(t)||this._onlyDirectoryFilter(t)||this._isSkippedByAbsoluteNegativePatterns(t.path,n))return!1;let s=this._settings.baseNameMatch?t.name:t.path,o=t.dirent.isDirectory(),l=this._isMatchToPatterns(s,e,o)&&!this._isMatchToPatterns(t.path,n,o);return this._settings.unique&&l&&this._createIndexRecord(t),l}_isDuplicateEntry(t){return this.index.has(t.path)}_createIndexRecord(t){this.index.set(t.path,void 0)}_onlyFileFilter(t){return this._settings.onlyFiles&&!t.dirent.isFile()}_onlyDirectoryFilter(t){return this._settings.onlyDirectories&&!t.dirent.isDirectory()}_isSkippedByAbsoluteNegativePatterns(t,e){if(!this._settings.absolute)return!1;let n=Nt.path.makeAbsolute(this._settings.cwd,t);return Nt.pattern.matchAny(n,e)}_isMatchToPatterns(t,e,n){let s=Nt.path.removeLeadingDotSegment(t),o=Nt.pattern.matchAny(s,e);return!o&&n?Nt.pattern.matchAny(s+"/",e):o}};ru.default=tu});var Rf=x(iu=>{"use strict";Object.defineProperty(iu,"__esModule",{value:!0});var Vm=ot(),nu=class{constructor(t){this._settings=t}getFilter(){return t=>this._isNonFatalError(t)}_isNonFatalError(t){return Vm.errno.isEnoentCodeError(t)||this._settings.suppressErrors}};iu.default=nu});var Df=x(au=>{"use strict";Object.defineProperty(au,"__esModule",{value:!0});var Af=ot(),su=class{constructor(t){this._settings=t}getTransformer(){return t=>this._transform(t)}_transform(t){let e=t.path;return this._settings.absolute&&(e=Af.path.makeAbsolute(this._settings.cwd,e),e=Af.path.unixify(e)),this._settings.markDirectories&&t.dirent.isDirectory()&&(e+="/"),this._settings.objectMode?Object.assign(Object.assign({},t),{path:e}):e}};au.default=su});var Bn=x(uu=>{"use strict";Object.defineProperty(uu,"__esModule",{value:!0});var Xm=require("path"),Qm=Ef(),Jm=kf(),Zm=Rf(),eh=Df(),ou=class{constructor(t){this._settings=t,this.errorFilter=new Zm.default(this._settings),this.entryFilter=new Jm.default(this._settings,this._getMicromatchOptions()),this.deepFilter=new Qm.default(this._settings,this._getMicromatchOptions()),this.entryTransformer=new eh.default(this._settings)}_getRootDirectory(t){return Xm.resolve(this._settings.cwd,t.base)}_getReaderOptions(t){let e=t.base==="."?"":t.base;return{basePath:e,pathSegmentSeparator:"/",concurrency:this._settings.concurrency,deepFilter:this.deepFilter.getFilter(e,t.positive,t.negative),entryFilter:this.entryFilter.getFilter(t.positive,t.negative),errorFilter:this.errorFilter.getFilter(),followSymbolicLinks:this._settings.followSymbolicLinks,fs:this._settings.fs,stats:this._settings.stats,throwErrorOnBrokenSymbolicLink:this._settings.throwErrorOnBrokenSymbolicLink,transform:this.entryTransformer.getTransformer()}}_getMicromatchOptions(){return{dot:this._settings.dot,matchBase:this._settings.baseNameMatch,nobrace:!this._settings.braceExpansion,nocase:!this._settings.caseSensitiveMatch,noext:!this._settings.extglob,noglobstar:!this._settings.globstar,posix:!0,strictSlashes:!1}}};uu.default=ou});var Tf=x(lu=>{"use strict";Object.defineProperty(lu,"__esModule",{value:!0});var th=vf(),rh=Bn(),cu=class extends rh.default{constructor(){super(...arguments),this._reader=new th.default(this._settings)}async read(t){let e=this._getRootDirectory(t),n=this._getReaderOptions(t);return(await this.api(e,t,n)).map(o=>n.transform(o))}api(t,e,n){return e.dynamic?this._reader.dynamic(t,n):this._reader.static(e.patterns,n)}};lu.default=cu});var Cf=x(_u=>{"use strict";Object.defineProperty(_u,"__esModule",{value:!0});var nh=require("stream"),ih=zo(),sh=Bn(),fu=class extends sh.default{constructor(){super(...arguments),this._reader=new ih.default(this._settings)}read(t){let e=this._getRootDirectory(t),n=this._getReaderOptions(t),s=this.api(e,t,n),o=new nh.Readable({objectMode:!0,read:()=>{}});return s.once("error",l=>o.emit("error",l)).on("data",l=>o.emit("data",n.transform(l))).once("end",()=>o.emit("end")),o.once("close",()=>s.destroy()),o}api(t,e,n){return e.dynamic?this._reader.dynamic(t,n):this._reader.static(e.patterns,n)}};_u.default=fu});var Pf=x(pu=>{"use strict";Object.defineProperty(pu,"__esModule",{value:!0});var ah=Lt(),oh=xn(),uh=Ln(),du=class extends uh.default{constructor(){super(...arguments),this._walkSync=oh.walkSync,this._statSync=ah.statSync}dynamic(t,e){return this._walkSync(t,e)}static(t,e){let n=[];for(let s of t){let o=this._getFullEntryPath(s),l=this._getEntry(o,s,e);l===null||!e.entryFilter(l)||n.push(l)}return n}_getEntry(t,e,n){try{let s=this._getStat(t);return this._makeEntry(s,e)}catch(s){if(n.errorFilter(s))return null;throw s}}_getStat(t){return this._statSync(t,this._fsStatSettings)}};pu.default=du});var Mf=x(hu=>{"use strict";Object.defineProperty(hu,"__esModule",{value:!0});var ch=Pf(),lh=Bn(),mu=class extends lh.default{constructor(){super(...arguments),this._reader=new ch.default(this._settings)}read(t){let e=this._getRootDirectory(t),n=this._getReaderOptions(t);return this.api(e,t,n).map(n.transform)}api(t,e,n){return e.dynamic?this._reader.dynamic(t,n):this._reader.static(e.patterns,n)}};hu.default=mu});var Of=x(sr=>{"use strict";Object.defineProperty(sr,"__esModule",{value:!0});sr.DEFAULT_FILE_SYSTEM_ADAPTER=void 0;var ir=require("fs"),fh=require("os"),_h=Math.max(fh.cpus().length,1);sr.DEFAULT_FILE_SYSTEM_ADAPTER={lstat:ir.lstat,lstatSync:ir.lstatSync,stat:ir.stat,statSync:ir.statSync,readdir:ir.readdir,readdirSync:ir.readdirSync};var bu=class{constructor(t={}){this._options=t,this.absolute=this._getValue(this._options.absolute,!1),this.baseNameMatch=this._getValue(this._options.baseNameMatch,!1),this.braceExpansion=this._getValue(this._options.braceExpansion,!0),this.caseSensitiveMatch=this._getValue(this._options.caseSensitiveMatch,!0),this.concurrency=this._getValue(this._options.concurrency,_h),this.cwd=this._getValue(this._options.cwd,process.cwd()),this.deep=this._getValue(this._options.deep,1/0),this.dot=this._getValue(this._options.dot,!1),this.extglob=this._getValue(this._options.extglob,!0),this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!0),this.fs=this._getFileSystemMethods(this._options.fs),this.globstar=this._getValue(this._options.globstar,!0),this.ignore=this._getValue(this._options.ignore,[]),this.markDirectories=this._getValue(this._options.markDirectories,!1),this.objectMode=this._getValue(this._options.objectMode,!1),this.onlyDirectories=this._getValue(this._options.onlyDirectories,!1),this.onlyFiles=this._getValue(this._options.onlyFiles,!0),this.stats=this._getValue(this._options.stats,!1),this.suppressErrors=this._getValue(this._options.suppressErrors,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!1),this.unique=this._getValue(this._options.unique,!0),this.onlyDirectories&&(this.onlyFiles=!1),this.stats&&(this.objectMode=!0)}_getValue(t,e){return t===void 0?e:t}_getFileSystemMethods(t={}){return Object.assign(Object.assign({},sr.DEFAULT_FILE_SYSTEM_ADAPTER),t)}};sr.default=bu});var Lf=x((ig,xf)=>{"use strict";var Ff=Ml(),If=Fl(),dh=Tf(),ph=Cf(),mh=Mf(),gu=Of(),Bt=ot();async function yu(r,t){ar(r);let e=vu(r,dh.default,t),n=await Promise.all(e);return Bt.array.flatten(n)}(function(r){function t(l,m){ar(l);let b=vu(l,mh.default,m);return Bt.array.flatten(b)}r.sync=t;function e(l,m){ar(l);let b=vu(l,ph.default,m);return Bt.stream.merge(b)}r.stream=e;function n(l,m){ar(l);let b=If.transform([].concat(l)),T=new gu.default(m);return Ff.generate(b,T)}r.generateTasks=n;function s(l,m){ar(l);let b=new gu.default(m);return Bt.pattern.isDynamicPattern(l,b)}r.isDynamicPattern=s;function o(l){return ar(l),Bt.path.escape(l)}r.escapePath=o})(yu||(yu={}));function vu(r,t,e){let n=If.transform([].concat(r)),s=new gu.default(e),o=Ff.generate(n,s),l=new t(s);return o.map(l.read,l)}function ar(r){if(![].concat(r).every(n=>Bt.string.isString(n)&&!Bt.string.isEmpty(n)))throw new TypeError("Patterns must be a string (non empty) or an array of strings")}xf.exports=yu});var Eu=x((Un,Su)=>{"use strict";var wu=(()=>{var r=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(r=r||__filename),function(t={}){var e=typeof t<"u"?t:{},n,s;e.ready=new Promise((i,a)=>{n=i,s=a});var o=Object.assign({},e),l=[],m="./this.program",b=(i,a)=>{throw a},T=typeof window=="object",y=typeof importScripts=="function",P=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",w="";function te(i){return e.locateFile?e.locateFile(i,w):w+i}var I,N,$,Y;if(P){var le=require("fs"),ue=require("path");y?w=ue.dirname(w)+"/":w=__dirname+"/",I=(i,a)=>(i=lr(i)?new URL(i):ue.normalize(i),le.readFileSync(i,a?void 0:"utf8")),$=i=>{var a=I(i,!0);return a.buffer||(a=new Uint8Array(a)),a},N=(i,a,c,d=!0)=>{i=lr(i)?new URL(i):ue.normalize(i),le.readFile(i,d?void 0:"utf8",(g,R)=>{g?c(g):a(d?R.buffer:R)})},!e.thisProgram&&process.argv.length>1&&(m=process.argv[1].replace(/\\/g,"/")),l=process.argv.slice(2),b=(i,a)=>{throw process.exitCode=i,a},e.inspect=()=>"[Emscripten Module object]"}else(T||y)&&(y?w=self.location.href:typeof document<"u"&&document.currentScript&&(w=document.currentScript.src),r&&(w=r),w.indexOf("blob:")!==0?w=w.substr(0,w.replace(/[?#].*/,"").lastIndexOf("/")+1):w="",I=i=>{var a=new XMLHttpRequest;return a.open("GET",i,!1),a.send(null),a.responseText},y&&($=i=>{var a=new XMLHttpRequest;return a.open("GET",i,!1),a.responseType="arraybuffer",a.send(null),new Uint8Array(a.response)}),N=(i,a,c)=>{var d=new XMLHttpRequest;d.open("GET",i,!0),d.responseType="arraybuffer",d.onload=()=>{if(d.status==200||d.status==0&&d.response){a(d.response);return}c()},d.onerror=c,d.send(null)},Y=i=>document.title=i);var Re=e.print||console.log.bind(console),S=e.printErr||console.error.bind(console);Object.assign(e,o),o=null,e.arguments&&(l=e.arguments),e.thisProgram&&(m=e.thisProgram),e.quit&&(b=e.quit);var se;e.wasmBinary&&(se=e.wasmBinary);var V=e.noExitRuntime||!0;typeof WebAssembly!="object"&&M("no native wasm support detected");var W,B=!1,Z;function k(i,a){i||M(a)}var z,q,ae,v,_,H,ce,xe;function Me(){var i=W.buffer;e.HEAP8=z=new Int8Array(i),e.HEAP16=ae=new Int16Array(i),e.HEAP32=_=new Int32Array(i),e.HEAPU8=q=new Uint8Array(i),e.HEAPU16=v=new Uint16Array(i),e.HEAPU32=H=new Uint32Array(i),e.HEAPF32=ce=new Float32Array(i),e.HEAPF64=xe=new Float64Array(i)}var Te,Ye=[],Et=[],ct=[],Be=[],ee=!1,lt=0;function ur(){return V||lt>0}function L(){if(e.preRun)for(typeof e.preRun=="function"&&(e.preRun=[e.preRun]);e.preRun.length;)be(e.preRun.shift());rt(Ye)}function me(){ee=!0,rt(Et)}function F(){rt(ct)}function J(){if(e.postRun)for(typeof e.postRun=="function"&&(e.postRun=[e.postRun]);e.postRun.length;)Se(e.postRun.shift());rt(Be)}function be(i){Ye.unshift(i)}function Ae(i){Et.unshift(i)}function Se(i){Be.unshift(i)}var De=0,$e=null,Ke=null;function jn(i){De++,e.monitorRunDependencies&&e.monitorRunDependencies(De)}function $n(i){if(De--,e.monitorRunDependencies&&e.monitorRunDependencies(De),De==0&&($e!==null&&(clearInterval($e),$e=null),Ke)){var a=Ke;Ke=null,a()}}function M(i){e.onAbort&&e.onAbort(i),i="Aborted("+i+")",S(i),B=!0,Z=1,i+=". Build with -sASSERTIONS for more info.";var a=new WebAssembly.RuntimeError(i);throw s(a),a}var Gn="data:application/octet-stream;base64,";function cr(i){return i.startsWith(Gn)}function lr(i){return i.startsWith("file://")}var Ue;Ue="./duckdb-mvp.wasm",cr(Ue)||(Ue=te(Ue));function fr(i){try{if(i==Ue&&se)return new Uint8Array(se);if($)return $(i);throw"both async and sync fetching of the wasm failed"}catch(a){M(a)}}function zn(i){return!se&&(T||y)&&typeof fetch=="function"?fetch(i,{credentials:"same-origin"}).then(a=>{if(!a.ok)throw"failed to load wasm binary file at '"+i+"'";return a.arrayBuffer()}).catch(()=>fr(i)):Promise.resolve().then(()=>fr(i))}function _r(i,a,c){return zn(i).then(d=>WebAssembly.instantiate(d,a)).then(d=>d).then(c,d=>{S("failed to asynchronously prepare wasm: "+d),M(d)})}function Kn(i,a,c,d){return!i&&typeof WebAssembly.instantiateStreaming=="function"&&!cr(a)&&!P&&typeof fetch=="function"?fetch(a,{credentials:"same-origin"}).then(g=>{var R=WebAssembly.instantiateStreaming(g,c);return R.then(d,function(E){return S("wasm streaming compile failed: "+E),S("falling back to ArrayBuffer instantiation"),_r(a,c,d)})}):_r(a,c,d)}function Yn(){var i={a:Ws};function a(d,g){var R=d.exports;return e.asm=R,W=e.asm.Ra,Me(),Te=e.asm.Ua,Ae(e.asm.Sa),$n("wasm-instantiate"),R}jn("wasm-instantiate");function c(d){a(d.instance)}if(e.instantiateWasm)try{return e.instantiateWasm(i,a)}catch(d){S("Module.instantiateWasm callback failed with error: "+d),s(d)}return Kn(se,Ue,i,c).catch(s),{}}var ge,He;function dr(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}function rt(i){for(;i.length>0;)i.shift()(e)}function Vn(){S("missing function: XML_GetBuffer"),M(-1)}function Xn(){S("missing function: XML_GetErrorCode"),M(-1)}function Qn(){S("missing function: XML_Parse"),M(-1)}function Jn(){S("missing function: XML_ParseBuffer"),M(-1)}function Zn(){S("missing function: XML_ParserCreate"),M(-1)}function ei(){S("missing function: XML_ParserFree"),M(-1)}function ti(){S("missing function: XML_ResumeParser"),M(-1)}function ri(){S("missing function: XML_SetCharacterDataHandler"),M(-1)}function ni(){S("missing function: XML_SetElementHandler"),M(-1)}function ii(){S("missing function: XML_SetUserData"),M(-1)}function si(){S("missing function: XML_StopParser"),M(-1)}function Ir(i){this.excPtr=i,this.ptr=i-24,this.set_type=function(a){H[this.ptr+4>>>2]=a},this.get_type=function(){return H[this.ptr+4>>>2]},this.set_destructor=function(a){H[this.ptr+8>>>2]=a},this.get_destructor=function(){return H[this.ptr+8>>>2]},this.set_caught=function(a){a=a?1:0,z[this.ptr+12>>>0]=a},this.get_caught=function(){return z[this.ptr+12>>>0]!=0},this.set_rethrown=function(a){a=a?1:0,z[this.ptr+13>>>0]=a},this.get_rethrown=function(){return z[this.ptr+13>>>0]!=0},this.init=function(a,c){this.set_adjusted_ptr(0),this.set_type(a),this.set_destructor(c)},this.set_adjusted_ptr=function(a){H[this.ptr+16>>>2]=a},this.get_adjusted_ptr=function(){return H[this.ptr+16>>>2]},this.get_exception_ptr=function(){var a=Rr(this.get_type());if(a)return H[this.excPtr>>>2];var c=this.get_adjusted_ptr();return c!==0?c:this.excPtr}}var xr=0,Lr=0;function Nr(i,a,c){var d=new Ir(i);throw d.init(a,c),xr=i,Lr++,xr}var nt="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function it(i,a,c){M(nt)}var Br=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function Ur(i,a,c){a>>>=0;for(var d=a+c,g=a;i[g]&&!(g>=d);)++g;if(g-a>16&&i.buffer&&Br)return Br.decode(i.subarray(a,g));for(var R="";a<g;){var E=i[a++];if(!(E&128)){R+=String.fromCharCode(E);continue}var C=i[a++]&63;if((E&224)==192){R+=String.fromCharCode((E&31)<<6|C);continue}var O=i[a++]&63;if((E&240)==224?E=(E&15)<<12|C<<6|O:E=(E&7)<<18|C<<12|O<<6|i[a++]&63,E<65536)R+=String.fromCharCode(E);else{var K=E-65536;R+=String.fromCharCode(55296|K>>10,56320|K&1023)}}return R}function st(i,a){return i>>>=0,i?Ur(q,i,a):""}var qe={varargs:void 0,get:function(){qe.varargs+=4;var i=_[qe.varargs-4>>>2];return i},getStr:function(i){var a=st(i);return a}};function pr(i,a,c,d,g){for(var R=0,E=a?_[a>>>2]:0,C=a?_[a+4>>>2]:0,O=c?_[c>>>2]:0,K=c?_[c+4>>>2]:0,j=d?_[d>>>2]:0,fe=d?_[d+4>>>2]:0,X=0,Ee=0,A=0,U=0,re=0,ne=0,D=(a?_[a>>>2]:0)|(c?_[c>>>2]:0)|(d?_[d>>>2]:0),G=(a?_[a+4>>>2]:0)|(c?_[c+4>>>2]:0)|(d?_[d+4>>>2]:0),_e=function(jf,$f,Gf,Tu){return jf<32?$f&Tu:Gf&Tu},de=0;de<i;de++){var Ce=1<<de%32;if(_e(de,D,G,Ce)){var Ot=qe.getStreamFromFD(de),Ft=qe.DEFAULT_POLLMASK;Ot.stream_ops.poll&&(Ft=Ot.stream_ops.poll(Ot)),Ft&1&&_e(de,E,C,Ce)&&(de<32?X=X|Ce:Ee=Ee|Ce,R++),Ft&4&&_e(de,O,K,Ce)&&(de<32?A=A|Ce:U=U|Ce,R++),Ft&2&&_e(de,j,fe,Ce)&&(de<32?re=re|Ce:ne=ne|Ce,R++)}}return a&&(_[a>>>2]=X,_[a+4>>>2]=Ee),c&&(_[c>>>2]=A,_[c+4>>>2]=U),d&&(_[d>>>2]=re,_[d+4>>>2]=ne),R}function Hr(){S("missing function: $SOCKFS"),M(-1)}function mr(){S("missing function: $FS"),M(-1)}function Ve(i){var a=Hr.getSocket(i);if(!a)throw new mr.ErrnoError(8);return a}function ft(i){return(i&255)+"."+(i>>8&255)+"."+(i>>16&255)+"."+(i>>24&255)}function Ut(i){var a="",c=0,d=0,g=0,R=0,E=0,C=0,O=[i[0]&65535,i[0]>>16,i[1]&65535,i[1]>>16,i[2]&65535,i[2]>>16,i[3]&65535,i[3]>>16],K=!0,j="";for(C=0;C<5;C++)if(O[C]!==0){K=!1;break}if(K){if(j=ft(O[6]|O[7]<<16),O[5]===-1)return a="::ffff:",a+=j,a;if(O[5]===0)return a="::",j==="0.0.0.0"&&(j=""),j==="0.0.0.1"&&(j="1"),a+=j,a}for(c=0;c<8;c++)O[c]===0&&(c-g>1&&(E=0),g=c,E++),E>d&&(d=E,R=c-d+1);for(c=0;c<8;c++){if(d>1&&O[c]===0&&c>=R&&c<R+d){c===R&&(a+=":",R===0&&(a+=":"));continue}a+=Number(Pt(O[c]&65535)).toString(16),a+=c<7?":":""}return a}function Ie(i,a){var c=ae[i>>>1],d=Pt(v[i+2>>>1]),g;switch(c){case 2:if(a!==16)return{errno:28};g=_[i+4>>>2],g=ft(g);break;case 10:if(a!==28)return{errno:28};g=[_[i+8>>>2],_[i+12>>>2],_[i+16>>>2],_[i+20>>>2]],g=Ut(g);break;default:return{errno:5}}return{family:c,addr:g,port:d}}function kt(i){for(var a=i.split("."),c=0;c<4;c++){var d=Number(a[c]);if(isNaN(d))return null;a[c]=d}return(a[0]|a[1]<<8|a[2]<<16|a[3]<<24)>>>0}function Ht(i){return parseInt(i)}function hr(i){var a,c,d,g,R=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,E=[];if(!R.test(i))return null;if(i==="::")return[0,0,0,0,0,0,0,0];for(i.startsWith("::")?i=i.replace("::","Z:"):i=i.replace("::",":Z:"),i.indexOf(".")>0?(i=i.replace(new RegExp("[.]","g"),":"),a=i.split(":"),a[a.length-4]=Ht(a[a.length-4])+Ht(a[a.length-3])*256,a[a.length-3]=Ht(a[a.length-2])+Ht(a[a.length-1])*256,a=a.slice(0,a.length-2)):a=i.split(":"),d=0,g=0,c=0;c<a.length;c++)if(typeof a[c]=="string")if(a[c]==="Z"){for(g=0;g<8-a.length+1;g++)E[c+g]=0;d=g-1}else E[c+d]=Ct(parseInt(a[c],16));else E[c+d]=a[c];return[E[1]<<16|E[0],E[3]<<16|E[2],E[5]<<16|E[4],E[7]<<16|E[6]]}var Le={address_map:{id:1,addrs:{},names:{}},lookup_name:function(i){var a=kt(i);if(a!==null||(a=hr(i),a!==null))return i;var c;if(Le.address_map.addrs[i])c=Le.address_map.addrs[i];else{var d=Le.address_map.id++;k(d<65535,"exceeded max address mappings of 65535"),c="172.29."+(d&255)+"."+(d&65280),Le.address_map.names[c]=i,Le.address_map.addrs[i]=c}return c},lookup_addr:function(i){return Le.address_map.names[i]?Le.address_map.names[i]:null}};function qr(i,a,c){if(c&&i===0)return null;var d=Ie(i,a);if(d.errno)throw new mr.ErrnoError(d.errno);return d.addr=Le.lookup_addr(d.addr)||d.addr,d}function ai(i,a,c,d,g,R){var E=Ve(i),C=qr(a,c);return E.sock_ops.bind(E,C.addr,C.port),0}function oi(i,a,c,d,g,R){var E=Ve(i),C=qr(a,c);return E.sock_ops.connect(E,C.addr,C.port),0}function Wr(i,a,c,d){}function qt(i,a,c){return qe.varargs=c,0}function ui(i,a){}function jr(i,a,c){}function Wt(i,a,c,d){if(c>>>=0,!(d>0))return 0;for(var g=c,R=c+d-1,E=0;E<i.length;++E){var C=i.charCodeAt(E);if(C>=55296&&C<=57343){var O=i.charCodeAt(++E);C=65536+((C&1023)<<10)|O&1023}if(C<=127){if(c>=R)break;a[c++>>>0]=C}else if(C<=2047){if(c+1>=R)break;a[c++>>>0]=192|C>>6,a[c++>>>0]=128|C&63}else if(C<=65535){if(c+2>=R)break;a[c++>>>0]=224|C>>12,a[c++>>>0]=128|C>>6&63,a[c++>>>0]=128|C&63}else{if(c+3>=R)break;a[c++>>>0]=240|C>>18,a[c++>>>0]=128|C>>12&63,a[c++>>>0]=128|C>>6&63,a[c++>>>0]=128|C&63}}return a[c>>>0]=0,c-g}function jt(i,a,c){return Wt(i,q,a,c)}function ci(i,a,c){}function $r(i,a){return q.fill(0,i,i+a),i}function br(i,a,c,d,g){switch(a){case 2:c=kt(c),$r(i,16),g&&(_[g>>>2]=16),ae[i>>>1]=a,_[i+4>>>2]=c,ae[i+2>>>1]=Ct(d);break;case 10:c=hr(c),$r(i,28),g&&(_[g>>>2]=28),_[i>>>2]=a,_[i+8>>>2]=c[0],_[i+12>>>2]=c[1],_[i+16>>>2]=c[2],_[i+20>>>2]=c[3],ae[i+2>>>1]=Ct(d);break;default:return 5}return 0}function li(i,a,c,d,g,R){var E=Ve(i);if(!E.daddr)return-53;var C=br(a,E.family,Le.lookup_name(E.daddr),E.dport,c);return 0}function fi(i,a,c,d,g,R){var E=Ve(i);return a===1&&c===4?(_[d>>>2]=E.error,_[g>>>2]=4,E.error=null,0):-50}function _i(i,a,c){return qe.varargs=c,0}function di(i,a){}function pi(i,a,c){}function mi(i,a,c,d){}function hi(i,a,c,d){qe.varargs=d}function bi(i,a,c,d,g,R){var E=Ve(i),C=E.sock_ops.recvmsg(E,c);if(!C)return 0;if(g)var O=br(g,E.family,Le.lookup_name(C.addr),C.port,R);return q.set(C.buffer,a>>>0),C.buffer.byteLength}function gi(i,a,c,d){}function yi(i){}function vi(i,a,c,d,g,R){}function wi(i,a,c){}function Si(i,a){}function Rt(i,a,c){}var Ei=!0;function ki(){return Ei}function Ri(i){return H[i>>>2]+_[i+4>>>2]*4294967296}function At(i){return i%4===0&&(i%100!==0||i%400===0)}var gr=[0,31,60,91,121,152,182,213,244,274,305,335],Gr=[0,31,59,90,120,151,181,212,243,273,304,334];function Ai(i){var a=At(i.getFullYear()),c=a?gr:Gr,d=c[i.getMonth()]+i.getDate()-1;return d}function Di(i,a){var c=new Date(Ri(i)*1e3);_[a>>>2]=c.getSeconds(),_[a+4>>>2]=c.getMinutes(),_[a+8>>>2]=c.getHours(),_[a+12>>>2]=c.getDate(),_[a+16>>>2]=c.getMonth(),_[a+20>>>2]=c.getFullYear()-1900,_[a+24>>>2]=c.getDay();var d=Ai(c)|0;_[a+28>>>2]=d,_[a+36>>>2]=-(c.getTimezoneOffset()*60);var g=new Date(c.getFullYear(),0,1),R=new Date(c.getFullYear(),6,1).getTimezoneOffset(),E=g.getTimezoneOffset(),C=(R!=E&&c.getTimezoneOffset()==Math.min(E,R))|0;_[a+32>>>2]=C}function yr(i){for(var a=0,c=0;c<i.length;++c){var d=i.charCodeAt(c);d<=127?a++:d<=2047?a+=2:d>=55296&&d<=57343?(a+=4,++c):a+=3}return a}function zr(i){var a=yr(i)+1,c=_t(a);return c&&jt(i,c,a),c}function Ti(i,a,c){var d=new Date().getFullYear(),g=new Date(d,0,1),R=new Date(d,6,1),E=g.getTimezoneOffset(),C=R.getTimezoneOffset(),O=Math.max(E,C);H[i>>>2]=O*60,_[a>>>2]=+(E!=C);function K(A){var U=A.toTimeString().match(/\(([A-Za-z ]+)\)$/);return U?U[1]:"GMT"}var j=K(g),fe=K(R),X=zr(j),Ee=zr(fe);C<E?(H[c>>>2]=X,H[c+4>>>2]=Ee):(H[c>>>2]=Ee,H[c+4>>>2]=X)}function Ci(){M("")}function Pi(i,a){M(nt)}function Mi(i,a){return globalThis.DUCKDB_RUNTIME.createDirectory(e,i,a)}function Oi(i,a){return globalThis.DUCKDB_RUNTIME.checkDirectory(e,i,a)}function Fi(i,a){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(e,i,a)}function Ii(i,a){return globalThis.DUCKDB_RUNTIME.removeDirectory(e,i,a)}function xi(i){return globalThis.DUCKDB_RUNTIME.closeFile(e,i)}function Li(i,a){return globalThis.DUCKDB_RUNTIME.checkFile(e,i,a)}function Ni(i){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(e,i)}function Bi(i,a,c,d){return globalThis.DUCKDB_RUNTIME.moveFile(e,i,a,c,d)}function Ui(i,a){return globalThis.DUCKDB_RUNTIME.openFile(e,i,a)}function Hi(i,a,c,d){return globalThis.DUCKDB_RUNTIME.readFile(e,i,a,c,d)}function qi(i,a){return globalThis.DUCKDB_RUNTIME.truncateFile(e,i,a)}function Wi(i,a,c,d){return globalThis.DUCKDB_RUNTIME.writeFile(e,i,a,c,d)}function ji(i){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(i)}function Kr(i,a){return globalThis.DUCKDB_RUNTIME.glob(e,i,a)}function $i(i){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(e,i)}function Yr(i,a,c,d,g,R){return globalThis.DUCKDB_RUNTIME.callScalarUDF(e,i,a,c,d,g,R)}function Gi(){return Date.now()}function Vr(){return 4294901760}function zi(){return Vr()}var $t;P&&(global.performance=require("perf_hooks").performance),$t=()=>performance.now();function Ki(i,a,c){q.copyWithin(i>>>0,a>>>0,a+c>>>0)}function Dt(i){var a=W.buffer,c=i-a.byteLength+65535>>>16;try{return W.grow(c),Me(),1}catch{}}function Yi(i){var a=q.length;i=i>>>0;var c=Vr();if(i>c)return!1;for(var d=(O,K)=>O+(K-O%K)%K,g=1;g<=4;g*=2){var R=a*(1+.2/g);R=Math.min(R,i+100663296);var E=Math.min(c,d(Math.max(i,R),65536)),C=Dt(E);if(C)return!0}return!1}var vr={};function Vi(){return m||"./this.program"}function Tt(){if(!Tt.strings){var i=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",a={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:i,_:Vi()};for(var c in vr)vr[c]===void 0?delete a[c]:a[c]=vr[c];var d=[];for(var c in a)d.push(`${c}=${a[c]}`);Tt.strings=d}return Tt.strings}function Xi(i,a){for(var c=0;c<i.length;++c)z[a++>>>0]=i.charCodeAt(c);z[a>>>0]=0}function Qi(i,a){var c=0;return Tt().forEach(function(d,g){var R=a+c;H[i+g*4>>>2]=R,Xi(d,R),c+=d.length+1}),0}function Ji(i,a){var c=Tt();H[i>>>2]=c.length;var d=0;return c.forEach(function(g){d+=g.length+1}),H[a>>>2]=d,0}function Zi(i){return 52}function es(i,a){var c=0,d=0,g=0;{var R=2;i==0?c=2:(i==1||i==2)&&(c=64),g=1}return z[a>>>0]=R,ae[a+2>>>1]=g,He=[c>>>0,(ge=c,+Math.abs(ge)>=1?ge>0?+Math.floor(ge/4294967296)>>>0:~~+Math.ceil((ge-+(~~ge>>>0))/4294967296)>>>0:0)],_[a+8>>>2]=He[0],_[a+12>>>2]=He[1],He=[d>>>0,(ge=d,+Math.abs(ge)>=1?ge>0?+Math.floor(ge/4294967296)>>>0:~~+Math.ceil((ge-+(~~ge>>>0))/4294967296)>>>0:0)],_[a+16>>>2]=He[0],_[a+20>>>2]=He[1],0}function ts(i,a,c,d,g,R){return 52}function rs(i,a,c,d,g,R){return 52}function ns(i,a,c,d){return 52}function is(i,a,c,d,g){return 70}function ss(i){return 52}var as=[null,[],[]];function Xr(i,a){var c=as[i];a===0||a===10?((i===1?Re:S)(Ur(c,0)),c.length=0):c.push(a)}function os(i,a,c,d){for(var g=0,R=0;R<c;R++){var E=H[a>>>2],C=H[a+4>>>2];a+=8;for(var O=0;O<C;O++)Xr(i,q[E+O>>>0]);g+=C}return H[d>>>2]=g,0}function us(i,a,c,d){var g=0,R=0,E=0,C=0,O=0,K=0,j;function fe(X,Ee,A,U,re,ne){var D,G,_e,de;return G=X===10?28:16,re=X===10?Ut(re):ft(re),D=_t(G),de=br(D,X,re,ne),k(!de),_e=_t(32),_[_e+4>>>2]=X,_[_e+8>>>2]=Ee,_[_e+12>>>2]=A,H[_e+24>>>2]=U,H[_e+20>>>2]=D,X===10?_[_e+16>>>2]=28:_[_e+16>>>2]=16,_[_e+28>>>2]=0,_e}if(c&&(E=_[c>>>2],C=_[c+4>>>2],O=_[c+8>>>2],K=_[c+12>>>2]),O&&!K&&(K=O===2?17:6),!O&&K&&(O=K===17?2:1),K===0&&(K=6),O===0&&(O=1),!i&&!a)return-2;if(E&-1088||c!==0&&_[c>>>2]&2&&!i)return-1;if(E&32)return-2;if(O!==0&&O!==1&&O!==2)return-7;if(C!==0&&C!==2&&C!==10)return-6;if(a&&(a=st(a),R=parseInt(a,10),isNaN(R)))return E&1024?-2:-8;if(!i)return C===0&&(C=2),E&1||(C===2?g=Yt(2130706433):g=[0,0,0,1]),j=fe(C,O,K,null,g,R),H[d>>>2]=j,0;if(i=st(i),g=kt(i),g!==null)if(C===0||C===2)C=2;else if(C===10&&E&8)g=[0,0,Yt(65535),g],C=10;else return-2;else if(g=hr(i),g!==null)if(C===0||C===10)C=10;else return-2;return g!=null?(j=fe(C,O,K,i,g,R),H[d>>>2]=j,0):E&4?-2:(i=Le.lookup_name(i),g=kt(i),C===0?C=2:C===10&&(g=[0,0,Yt(65535),g]),j=fe(C,O,K,null,g,R),H[d>>>2]=j,0)}function cs(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return d=>crypto.getRandomValues(d);if(P)try{var i=require("crypto"),a=i.randomFillSync;if(a)return d=>i.randomFillSync(d);var c=i.randomBytes;return d=>(d.set(c(d.byteLength)),d)}catch{}M("initRandomDevice")}function wr(i){return(wr=cs())(i)}function Qr(i,a){return wr(q.subarray(i>>>0,i+a>>>0)),0}function ls(i,a,c,d,g,R,E){var C=Ie(i,a);if(C.errno)return-6;var O=C.port,K=C.addr,j=!1;if(c&&d){var fe;if(E&1||!(fe=Le.lookup_addr(K))){if(E&8)return-2}else K=fe;var X=jt(K,c,d);X+1>=d&&(j=!0)}if(g&&R){O=""+O;var X=jt(O,g,R);X+1>=R&&(j=!0)}return j?-12:0}function fs(i,a){for(var c=0,d=0;d<=a;c+=i[d++]);return c}var Sr=[31,29,31,30,31,30,31,31,30,31,30,31],Jr=[31,28,31,30,31,30,31,31,30,31,30,31];function _s(i,a){for(var c=new Date(i.getTime());a>0;){var d=At(c.getFullYear()),g=c.getMonth(),R=(d?Sr:Jr)[g];if(a>R-c.getDate())a-=R-c.getDate()+1,c.setDate(1),g<11?c.setMonth(g+1):(c.setMonth(0),c.setFullYear(c.getFullYear()+1));else return c.setDate(c.getDate()+a),c}return c}function ds(i,a,c){var d=c>0?c:yr(i)+1,g=new Array(d),R=Wt(i,g,0,g.length);return a&&(g.length=R),g}function Zr(i,a){z.set(i,a>>>0)}function ps(i,a,c,d){var g=_[d+40>>>2],R={tm_sec:_[d>>>2],tm_min:_[d+4>>>2],tm_hour:_[d+8>>>2],tm_mday:_[d+12>>>2],tm_mon:_[d+16>>>2],tm_year:_[d+20>>>2],tm_wday:_[d+24>>>2],tm_yday:_[d+28>>>2],tm_isdst:_[d+32>>>2],tm_gmtoff:_[d+36>>>2],tm_zone:g?st(g):""},E=st(c),C={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var O in C)E=E.replace(new RegExp(O,"g"),C[O]);var K=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],j=["January","February","March","April","May","June","July","August","September","October","November","December"];function fe(D,G,_e){for(var de=typeof D=="number"?D.toString():D||"";de.length<G;)de=_e[0]+de;return de}function X(D,G){return fe(D,G,"0")}function Ee(D,G){function _e(Ce){return Ce<0?-1:Ce>0?1:0}var de;return(de=_e(D.getFullYear()-G.getFullYear()))===0&&(de=_e(D.getMonth()-G.getMonth()))===0&&(de=_e(D.getDate()-G.getDate())),de}function A(D){switch(D.getDay()){case 0:return new Date(D.getFullYear()-1,11,29);case 1:return D;case 2:return new Date(D.getFullYear(),0,3);case 3:return new Date(D.getFullYear(),0,2);case 4:return new Date(D.getFullYear(),0,1);case 5:return new Date(D.getFullYear()-1,11,31);case 6:return new Date(D.getFullYear()-1,11,30)}}function U(D){var G=_s(new Date(D.tm_year+1900,0,1),D.tm_yday),_e=new Date(G.getFullYear(),0,4),de=new Date(G.getFullYear()+1,0,4),Ce=A(_e),Ot=A(de);return Ee(Ce,G)<=0?Ee(Ot,G)<=0?G.getFullYear()+1:G.getFullYear():G.getFullYear()-1}var re={"%a":function(D){return K[D.tm_wday].substring(0,3)},"%A":function(D){return K[D.tm_wday]},"%b":function(D){return j[D.tm_mon].substring(0,3)},"%B":function(D){return j[D.tm_mon]},"%C":function(D){var G=D.tm_year+1900;return X(G/100|0,2)},"%d":function(D){return X(D.tm_mday,2)},"%e":function(D){return fe(D.tm_mday,2," ")},"%g":function(D){return U(D).toString().substring(2)},"%G":function(D){return U(D)},"%H":function(D){return X(D.tm_hour,2)},"%I":function(D){var G=D.tm_hour;return G==0?G=12:G>12&&(G-=12),X(G,2)},"%j":function(D){return X(D.tm_mday+fs(At(D.tm_year+1900)?Sr:Jr,D.tm_mon-1),3)},"%m":function(D){return X(D.tm_mon+1,2)},"%M":function(D){return X(D.tm_min,2)},"%n":function(){return`
`},"%p":function(D){return D.tm_hour>=0&&D.tm_hour<12?"AM":"PM"},"%S":function(D){return X(D.tm_sec,2)},"%t":function(){return"	"},"%u":function(D){return D.tm_wday||7},"%U":function(D){var G=D.tm_yday+7-D.tm_wday;return X(Math.floor(G/7),2)},"%V":function(D){var G=Math.floor((D.tm_yday+7-(D.tm_wday+6)%7)/7);if((D.tm_wday+371-D.tm_yday-2)%7<=2&&G++,G){if(G==53){var de=(D.tm_wday+371-D.tm_yday)%7;de!=4&&(de!=3||!At(D.tm_year))&&(G=1)}}else{G=52;var _e=(D.tm_wday+7-D.tm_yday-1)%7;(_e==4||_e==5&&At(D.tm_year%400-1))&&G++}return X(G,2)},"%w":function(D){return D.tm_wday},"%W":function(D){var G=D.tm_yday+7-(D.tm_wday+6)%7;return X(Math.floor(G/7),2)},"%y":function(D){return(D.tm_year+1900).toString().substring(2)},"%Y":function(D){return D.tm_year+1900},"%z":function(D){var G=D.tm_gmtoff,_e=G>=0;return G=Math.abs(G)/60,G=G/60*100+G%60,(_e?"+":"-")+("0000"+G).slice(-4)},"%Z":function(D){return D.tm_zone},"%%":function(){return"%"}};E=E.replace(/%%/g,"\0\0");for(var O in re)E.includes(O)&&(E=E.replace(new RegExp(O,"g"),re[O](R)));E=E.replace(/\0\0/g,"%");var ne=ds(E,!1);return ne.length>a?0:(Zr(ne,i),ne.length-1)}function ms(i,a,c,d,g){return ps(i,a,c,d)}function hs(){S("missing function: ucnv_close_64"),M(-1)}function bs(){S("missing function: ucnv_convertEx_64"),M(-1)}function gs(){S("missing function: ucnv_open_64"),M(-1)}function ys(){S("missing function: ucnv_toAlgorithmic_64"),M(-1)}function vs(){S("missing function: ucsdet_close_64"),M(-1)}function ws(){S("missing function: ucsdet_detect_64"),M(-1)}function Ss(){S("missing function: ucsdet_getConfidence_64"),M(-1)}function Es(){S("missing function: ucsdet_getName_64"),M(-1)}function ks(){S("missing function: ucsdet_open_64"),M(-1)}function Rs(){S("missing function: ucsdet_setText_64"),M(-1)}function As(){S("missing function: unzClose"),M(-1)}function Ds(){S("missing function: unzCloseCurrentFile"),M(-1)}function Ts(){S("missing function: unzGetCurrentFileInfo"),M(-1)}function Cs(){S("missing function: unzGetCurrentFileInfo64"),M(-1)}function Ps(){S("missing function: unzGetGlobalInfo"),M(-1)}function Ms(){S("missing function: unzGoToFirstFile"),M(-1)}function Os(){S("missing function: unzGoToNextFile"),M(-1)}function Fs(){S("missing function: unzLocateFile"),M(-1)}function Is(){S("missing function: unzOpen"),M(-1)}function xs(){S("missing function: unzOpen2"),M(-1)}function Ls(){S("missing function: unzOpenCurrentFile"),M(-1)}function Ns(){S("missing function: unzReadCurrentFile"),M(-1)}function Bs(i){Z=i,ur()||(e.onExit&&e.onExit(i),B=!0),b(i,new dr(i))}function Us(i,a){Z=i,Bs(i)}function Hs(i){if(i instanceof dr||i=="unwind")return Z;b(1,i)}function Au(i){var a=e["_"+i];return a}function qs(i){var a=yr(i)+1,c=Mt(a);return jt(i,c,a),c}function en(i,a,c,d,g){var R={string:A=>{var U=0;return A!=null&&A!==0&&(U=qs(A)),U},array:A=>{var U=Mt(A.length);return Zr(A,U),U}};function E(A){return a==="string"?st(A):a==="boolean"?!!A:A}var C=Au(i),O=[],K=0;if(d)for(var j=0;j<d.length;j++){var fe=R[c[j]];fe?(K===0&&(K=dt()),O[j]=fe(d[j])):O[j]=d[j]}var X=C.apply(null,O);function Ee(A){return K!==0&&kr(K),E(A)}return X=Ee(X),X}var Ws={g:Vn,V:Xn,da:Qn,n:Jn,p:Zn,d:ei,B:ti,f:ri,b:ni,o:ii,h:si,a:Nr,La:it,Fa:pr,Ja:ai,Ia:oi,Ba:Wr,e:qt,Aa:ui,O:jr,va:ci,Da:li,Ea:fi,K:_i,xa:di,wa:pi,ya:mi,L:hi,Ga:bi,ta:gi,F:yi,Ha:vi,H:wi,za:Si,G:Rt,Na:ki,fa:Di,ga:Ti,j:Ci,Ma:Pi,ma:Mi,na:Oi,ka:Fi,la:Ii,D:xi,ia:Li,N:Ni,ja:Bi,pa:Ui,q:Hi,oa:qi,E:Wi,qa:ji,ha:Kr,C:$i,ra:Yr,M:Gi,Oa:zi,i:$t,Ka:Ki,Qa:Yi,T:Qi,W:Ji,l:Zi,ea:es,Q:ts,P:rs,J:ns,R:is,ua:ss,w:os,I:us,sa:Qr,Ca:ls,Pa:ms,c:hs,X:bs,v:gs,Z:ys,Y:vs,aa:ws,$:Ss,_:Es,ca:ks,ba:Rs,k:As,u:Ds,z:Ts,r:Cs,U:Ps,A:Ms,y:Os,t:Fs,x:Is,S:xs,s:Ls,m:Ns},Du=Yn(),js=function(){return(js=e.asm.Sa).apply(null,arguments)},tn=e._main=function(){return(tn=e._main=e.asm.Ta).apply(null,arguments)},$s=e._duckdb_web_fs_glob_add_path=function(){return($s=e._duckdb_web_fs_glob_add_path=e.asm.Va).apply(null,arguments)},Gs=e._duckdb_web_clear_response=function(){return(Gs=e._duckdb_web_clear_response=e.asm.Wa).apply(null,arguments)},zs=e._duckdb_web_fail_with=function(){return(zs=e._duckdb_web_fail_with=e.asm.Xa).apply(null,arguments)},Ks=e._duckdb_web_reset=function(){return(Ks=e._duckdb_web_reset=e.asm.Ya).apply(null,arguments)},Ys=e._duckdb_web_connect=function(){return(Ys=e._duckdb_web_connect=e.asm.Za).apply(null,arguments)},Vs=e._duckdb_web_disconnect=function(){return(Vs=e._duckdb_web_disconnect=e.asm._a).apply(null,arguments)},Xs=e._duckdb_web_flush_files=function(){return(Xs=e._duckdb_web_flush_files=e.asm.$a).apply(null,arguments)},Qs=e._duckdb_web_flush_file=function(){return(Qs=e._duckdb_web_flush_file=e.asm.ab).apply(null,arguments)},Js=e._duckdb_web_open=function(){return(Js=e._duckdb_web_open=e.asm.bb).apply(null,arguments)},Zs=e._duckdb_web_get_global_file_info=function(){return(Zs=e._duckdb_web_get_global_file_info=e.asm.cb).apply(null,arguments)},ea=e._duckdb_web_collect_file_stats=function(){return(ea=e._duckdb_web_collect_file_stats=e.asm.db).apply(null,arguments)},ta=e._duckdb_web_export_file_stats=function(){return(ta=e._duckdb_web_export_file_stats=e.asm.eb).apply(null,arguments)},ra=e._duckdb_web_fs_drop_file=function(){return(ra=e._duckdb_web_fs_drop_file=e.asm.fb).apply(null,arguments)},na=e._duckdb_web_fs_drop_files=function(){return(na=e._duckdb_web_fs_drop_files=e.asm.gb).apply(null,arguments)},ia=e._duckdb_web_fs_glob_file_infos=function(){return(ia=e._duckdb_web_fs_glob_file_infos=e.asm.hb).apply(null,arguments)},sa=e._duckdb_web_fs_get_file_info_by_id=function(){return(sa=e._duckdb_web_fs_get_file_info_by_id=e.asm.ib).apply(null,arguments)},aa=e._duckdb_web_fs_get_file_info_by_name=function(){return(aa=e._duckdb_web_fs_get_file_info_by_name=e.asm.jb).apply(null,arguments)},oa=e._duckdb_web_fs_register_file_url=function(){return(oa=e._duckdb_web_fs_register_file_url=e.asm.kb).apply(null,arguments)},ua=e._duckdb_web_fs_register_file_buffer=function(){return(ua=e._duckdb_web_fs_register_file_buffer=e.asm.lb).apply(null,arguments)},ca=e._duckdb_web_copy_file_to_buffer=function(){return(ca=e._duckdb_web_copy_file_to_buffer=e.asm.mb).apply(null,arguments)},la=e._duckdb_web_copy_file_to_path=function(){return(la=e._duckdb_web_copy_file_to_path=e.asm.nb).apply(null,arguments)},fa=e._duckdb_web_get_version=function(){return(fa=e._duckdb_web_get_version=e.asm.ob).apply(null,arguments)},_a=e._duckdb_web_get_feature_flags=function(){return(_a=e._duckdb_web_get_feature_flags=e.asm.pb).apply(null,arguments)},da=e._duckdb_web_tokenize=function(){return(da=e._duckdb_web_tokenize=e.asm.qb).apply(null,arguments)},pa=e._duckdb_web_udf_scalar_create=function(){return(pa=e._duckdb_web_udf_scalar_create=e.asm.rb).apply(null,arguments)},ma=e._duckdb_web_prepared_create=function(){return(ma=e._duckdb_web_prepared_create=e.asm.sb).apply(null,arguments)},ha=e._duckdb_web_prepared_close=function(){return(ha=e._duckdb_web_prepared_close=e.asm.tb).apply(null,arguments)},ba=e._duckdb_web_prepared_run=function(){return(ba=e._duckdb_web_prepared_run=e.asm.ub).apply(null,arguments)},ga=e._duckdb_web_prepared_send=function(){return(ga=e._duckdb_web_prepared_send=e.asm.vb).apply(null,arguments)},ya=e._duckdb_web_query_run=function(){return(ya=e._duckdb_web_query_run=e.asm.wb).apply(null,arguments)},va=e._duckdb_web_pending_query_start=function(){return(va=e._duckdb_web_pending_query_start=e.asm.xb).apply(null,arguments)},wa=e._duckdb_web_pending_query_poll=function(){return(wa=e._duckdb_web_pending_query_poll=e.asm.yb).apply(null,arguments)},Sa=e._duckdb_web_pending_query_cancel=function(){return(Sa=e._duckdb_web_pending_query_cancel=e.asm.zb).apply(null,arguments)},Ea=e._duckdb_web_query_fetch_results=function(){return(Ea=e._duckdb_web_query_fetch_results=e.asm.Ab).apply(null,arguments)},ka=e._duckdb_web_get_tablenames=function(){return(ka=e._duckdb_web_get_tablenames=e.asm.Bb).apply(null,arguments)},Gt=e._duckdb_web_insert_arrow_from_ipc_stream=function(){return(Gt=e._duckdb_web_insert_arrow_from_ipc_stream=e.asm.Cb).apply(null,arguments)},zt=e._duckdb_web_insert_csv_from_path=function(){return(zt=e._duckdb_web_insert_csv_from_path=e.asm.Db).apply(null,arguments)},Er=e._duckdb_web_insert_json_from_path=function(){return(Er=e._duckdb_web_insert_json_from_path=e.asm.Eb).apply(null,arguments)},Kt=function(){return(Kt=e.asm.__errno_location).apply(null,arguments)},Yt=function(){return(Yt=e.asm.Fb).apply(null,arguments)},Ct=function(){return(Ct=e.asm.Gb).apply(null,arguments)},Pt=function(){return(Pt=e.asm.Hb).apply(null,arguments)},_t=e._malloc=function(){return(_t=e._malloc=e.asm.Ib).apply(null,arguments)},Vt=e._free=function(){return(Vt=e._free=e.asm.Jb).apply(null,arguments)},dt=function(){return(dt=e.asm.Kb).apply(null,arguments)},kr=function(){return(kr=e.asm.Lb).apply(null,arguments)},Mt=function(){return(Mt=e.asm.Mb).apply(null,arguments)},Rr=function(){return(Rr=e.asm.Nb).apply(null,arguments)};e.stackAlloc=Mt,e.stackSave=dt,e.stackRestore=kr,e.ccall=en;var u;Ke=function i(){u||p(),u||(Ke=i)};function f(){var i=tn,a=0,c=0;try{var d=i(a,c);return Us(d,!0),d}catch(g){return Hs(g)}}function p(){if(De>0||(L(),De>0))return;function i(){u||(u=!0,e.calledRun=!0,!B&&(me(),F(),n(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),h&&f(),J()))}e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1),i()},1)):i()}if(e.preInit)for(typeof e.preInit=="function"&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();var h=!0;return e.noInitialRun&&(h=!1),p(),t.ready}})();typeof Un=="object"&&typeof Su=="object"?Su.exports=wu:typeof define=="function"&&define.amd?define([],function(){return wu}):typeof Un=="object"&&(Un.DuckDB=wu)});var qf=x((qn,Ru)=>{"use strict";var ku=(()=>{var r=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(r=r||__filename),function(t={}){var e=typeof t<"u"?t:{},n,s;e.ready=new Promise((u,f)=>{n=u,s=f});var o=Object.assign({},e),l=[],m="./this.program",b=(u,f)=>{throw f},T=typeof window=="object",y=typeof importScripts=="function",P=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",w="";function te(u){return e.locateFile?e.locateFile(u,w):w+u}var I,N,$,Y;if(P){var le=require("fs"),ue=require("path");y?w=ue.dirname(w)+"/":w=__dirname+"/",I=(u,f)=>(u=lr(u)?new URL(u):ue.normalize(u),le.readFileSync(u,f?void 0:"utf8")),$=u=>{var f=I(u,!0);return f.buffer||(f=new Uint8Array(f)),f},N=(u,f,p,h=!0)=>{u=lr(u)?new URL(u):ue.normalize(u),le.readFile(u,h?void 0:"utf8",(i,a)=>{i?p(i):f(h?a.buffer:a)})},!e.thisProgram&&process.argv.length>1&&(m=process.argv[1].replace(/\\/g,"/")),l=process.argv.slice(2),b=(u,f)=>{throw process.exitCode=u,f},e.inspect=()=>"[Emscripten Module object]"}else(T||y)&&(y?w=self.location.href:typeof document<"u"&&document.currentScript&&(w=document.currentScript.src),r&&(w=r),w.indexOf("blob:")!==0?w=w.substr(0,w.replace(/[?#].*/,"").lastIndexOf("/")+1):w="",I=u=>{var f=new XMLHttpRequest;return f.open("GET",u,!1),f.send(null),f.responseText},y&&($=u=>{var f=new XMLHttpRequest;return f.open("GET",u,!1),f.responseType="arraybuffer",f.send(null),new Uint8Array(f.response)}),N=(u,f,p)=>{var h=new XMLHttpRequest;h.open("GET",u,!0),h.responseType="arraybuffer",h.onload=()=>{if(h.status==200||h.status==0&&h.response){f(h.response);return}p()},h.onerror=p,h.send(null)},Y=u=>document.title=u);var Re=e.print||console.log.bind(console),S=e.printErr||console.error.bind(console);Object.assign(e,o),o=null,e.arguments&&(l=e.arguments),e.thisProgram&&(m=e.thisProgram),e.quit&&(b=e.quit);var se;e.wasmBinary&&(se=e.wasmBinary);var V=e.noExitRuntime||!0;typeof WebAssembly!="object"&&M("no native wasm support detected");var W,B=!1,Z;function k(u,f){u||M(f)}var z,q,ae,v,_,H,ce,xe;function Me(){var u=W.buffer;e.HEAP8=z=new Int8Array(u),e.HEAP16=ae=new Int16Array(u),e.HEAP32=_=new Int32Array(u),e.HEAPU8=q=new Uint8Array(u),e.HEAPU16=v=new Uint16Array(u),e.HEAPU32=H=new Uint32Array(u),e.HEAPF32=ce=new Float32Array(u),e.HEAPF64=xe=new Float64Array(u)}var Te,Ye=[],Et=[],ct=[],Be=[],ee=!1,lt=0;function ur(){return V||lt>0}function L(){if(e.preRun)for(typeof e.preRun=="function"&&(e.preRun=[e.preRun]);e.preRun.length;)be(e.preRun.shift());rt(Ye)}function me(){ee=!0,rt(Et)}function F(){rt(ct)}function J(){if(e.postRun)for(typeof e.postRun=="function"&&(e.postRun=[e.postRun]);e.postRun.length;)Se(e.postRun.shift());rt(Be)}function be(u){Ye.unshift(u)}function Ae(u){Et.unshift(u)}function Se(u){Be.unshift(u)}var De=0,$e=null,Ke=null;function jn(u){De++,e.monitorRunDependencies&&e.monitorRunDependencies(De)}function $n(u){if(De--,e.monitorRunDependencies&&e.monitorRunDependencies(De),De==0&&($e!==null&&(clearInterval($e),$e=null),Ke)){var f=Ke;Ke=null,f()}}function M(u){e.onAbort&&e.onAbort(u),u="Aborted("+u+")",S(u),B=!0,Z=1,u+=". Build with -sASSERTIONS for more info.",ee&&Ct();var f=new WebAssembly.RuntimeError(u);throw s(f),f}var Gn="data:application/octet-stream;base64,";function cr(u){return u.startsWith(Gn)}function lr(u){return u.startsWith("file://")}var Ue;Ue="./duckdb-eh.wasm",cr(Ue)||(Ue=te(Ue));function fr(u){try{if(u==Ue&&se)return new Uint8Array(se);if($)return $(u);throw"both async and sync fetching of the wasm failed"}catch(f){M(f)}}function zn(u){return!se&&(T||y)&&typeof fetch=="function"?fetch(u,{credentials:"same-origin"}).then(f=>{if(!f.ok)throw"failed to load wasm binary file at '"+u+"'";return f.arrayBuffer()}).catch(()=>fr(u)):Promise.resolve().then(()=>fr(u))}function _r(u,f,p){return zn(u).then(h=>WebAssembly.instantiate(h,f)).then(h=>h).then(p,h=>{S("failed to asynchronously prepare wasm: "+h),M(h)})}function Kn(u,f,p,h){return!u&&typeof WebAssembly.instantiateStreaming=="function"&&!cr(f)&&!P&&typeof fetch=="function"?fetch(f,{credentials:"same-origin"}).then(i=>{var a=WebAssembly.instantiateStreaming(i,p);return a.then(h,function(c){return S("wasm streaming compile failed: "+c),S("falling back to ArrayBuffer instantiation"),_r(f,p,h)})}):_r(f,p,h)}function Yn(){var u={a:Hs};function f(h,i){var a=h.exports;return e.asm=a,W=e.asm.Qa,Me(),Te=e.asm.Ta,Ae(e.asm.Ra),$n("wasm-instantiate"),a}jn("wasm-instantiate");function p(h){f(h.instance)}if(e.instantiateWasm)try{return e.instantiateWasm(u,f)}catch(h){S("Module.instantiateWasm callback failed with error: "+h),s(h)}return Kn(se,Ue,u,p).catch(s),{}}var ge,He;function dr(u){this.name="ExitStatus",this.message=`Program terminated with exit(${u})`,this.status=u}function rt(u){for(;u.length>0;)u.shift()(e)}function Vn(){S("missing function: XML_GetBuffer"),M(-1)}function Xn(){S("missing function: XML_GetErrorCode"),M(-1)}function Qn(){S("missing function: XML_Parse"),M(-1)}function Jn(){S("missing function: XML_ParseBuffer"),M(-1)}function Zn(){S("missing function: XML_ParserCreate"),M(-1)}function ei(){S("missing function: XML_ParserFree"),M(-1)}function ti(){S("missing function: XML_ResumeParser"),M(-1)}function ri(){S("missing function: XML_SetCharacterDataHandler"),M(-1)}function ni(){S("missing function: XML_SetElementHandler"),M(-1)}function ii(){S("missing function: XML_SetUserData"),M(-1)}function si(){S("missing function: XML_StopParser"),M(-1)}var Ir="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function xr(u,f,p){M(Ir)}var Lr=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function Nr(u,f,p){f>>>=0;for(var h=f+p,i=f;u[i]&&!(i>=h);)++i;if(i-f>16&&u.buffer&&Lr)return Lr.decode(u.subarray(f,i));for(var a="";f<i;){var c=u[f++];if(!(c&128)){a+=String.fromCharCode(c);continue}var d=u[f++]&63;if((c&224)==192){a+=String.fromCharCode((c&31)<<6|d);continue}var g=u[f++]&63;if((c&240)==224?c=(c&15)<<12|d<<6|g:c=(c&7)<<18|d<<12|g<<6|u[f++]&63,c<65536)a+=String.fromCharCode(c);else{var R=c-65536;a+=String.fromCharCode(55296|R>>10,56320|R&1023)}}return a}function nt(u,f){return u>>>=0,u?Nr(q,u,f):""}var it={varargs:void 0,get:function(){it.varargs+=4;var u=_[it.varargs-4>>>2];return u},getStr:function(u){var f=nt(u);return f}};function Br(u,f,p,h,i){for(var a=0,c=f?_[f>>>2]:0,d=f?_[f+4>>>2]:0,g=p?_[p>>>2]:0,R=p?_[p+4>>>2]:0,E=h?_[h>>>2]:0,C=h?_[h+4>>>2]:0,O=0,K=0,j=0,fe=0,X=0,Ee=0,A=(f?_[f>>>2]:0)|(p?_[p>>>2]:0)|(h?_[h>>>2]:0),U=(f?_[f+4>>>2]:0)|(p?_[p+4>>>2]:0)|(h?_[h+4>>>2]:0),re=function(de,Ce,Ot,Ft){return de<32?Ce&Ft:Ot&Ft},ne=0;ne<u;ne++){var D=1<<ne%32;if(re(ne,A,U,D)){var G=it.getStreamFromFD(ne),_e=it.DEFAULT_POLLMASK;G.stream_ops.poll&&(_e=G.stream_ops.poll(G)),_e&1&&re(ne,c,d,D)&&(ne<32?O=O|D:K=K|D,a++),_e&4&&re(ne,g,R,D)&&(ne<32?j=j|D:fe=fe|D,a++),_e&2&&re(ne,E,C,D)&&(ne<32?X=X|D:Ee=Ee|D,a++)}}return f&&(_[f>>>2]=O,_[f+4>>>2]=K),p&&(_[p>>>2]=j,_[p+4>>>2]=fe),h&&(_[h>>>2]=X,_[h+4>>>2]=Ee),a}function Ur(){S("missing function: $SOCKFS"),M(-1)}function st(){S("missing function: $FS"),M(-1)}function qe(u){var f=Ur.getSocket(u);if(!f)throw new st.ErrnoError(8);return f}function pr(u){return(u&255)+"."+(u>>8&255)+"."+(u>>16&255)+"."+(u>>24&255)}function Hr(u){var f="",p=0,h=0,i=0,a=0,c=0,d=0,g=[u[0]&65535,u[0]>>16,u[1]&65535,u[1]>>16,u[2]&65535,u[2]>>16,u[3]&65535,u[3]>>16],R=!0,E="";for(d=0;d<5;d++)if(g[d]!==0){R=!1;break}if(R){if(E=pr(g[6]|g[7]<<16),g[5]===-1)return f="::ffff:",f+=E,f;if(g[5]===0)return f="::",E==="0.0.0.0"&&(E=""),E==="0.0.0.1"&&(E="1"),f+=E,f}for(p=0;p<8;p++)g[p]===0&&(p-i>1&&(c=0),i=p,c++),c>h&&(h=c,a=p-h+1);for(p=0;p<8;p++){if(h>1&&g[p]===0&&p>=a&&p<a+h){p===a&&(f+=":",a===0&&(f+=":"));continue}f+=Number(Er(g[p]&65535)).toString(16),f+=p<7?":":""}return f}function mr(u,f){var p=ae[u>>>1],h=Er(v[u+2>>>1]),i;switch(p){case 2:if(f!==16)return{errno:28};i=_[u+4>>>2],i=pr(i);break;case 10:if(f!==28)return{errno:28};i=[_[u+8>>>2],_[u+12>>>2],_[u+16>>>2],_[u+20>>>2]],i=Hr(i);break;default:return{errno:5}}return{family:p,addr:i,port:h}}function Ve(u){for(var f=u.split("."),p=0;p<4;p++){var h=Number(f[p]);if(isNaN(h))return null;f[p]=h}return(f[0]|f[1]<<8|f[2]<<16|f[3]<<24)>>>0}function ft(u){return parseInt(u)}function Ut(u){var f,p,h,i,a=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,c=[];if(!a.test(u))return null;if(u==="::")return[0,0,0,0,0,0,0,0];for(u.startsWith("::")?u=u.replace("::","Z:"):u=u.replace("::",":Z:"),u.indexOf(".")>0?(u=u.replace(new RegExp("[.]","g"),":"),f=u.split(":"),f[f.length-4]=ft(f[f.length-4])+ft(f[f.length-3])*256,f[f.length-3]=ft(f[f.length-2])+ft(f[f.length-1])*256,f=f.slice(0,f.length-2)):f=u.split(":"),h=0,i=0,p=0;p<f.length;p++)if(typeof f[p]=="string")if(f[p]==="Z"){for(i=0;i<8-f.length+1;i++)c[p+i]=0;h=i-1}else c[p+h]=zt(parseInt(f[p],16));else c[p+h]=f[p];return[c[1]<<16|c[0],c[3]<<16|c[2],c[5]<<16|c[4],c[7]<<16|c[6]]}var Ie={address_map:{id:1,addrs:{},names:{}},lookup_name:function(u){var f=Ve(u);if(f!==null||(f=Ut(u),f!==null))return u;var p;if(Ie.address_map.addrs[u])p=Ie.address_map.addrs[u];else{var h=Ie.address_map.id++;k(h<65535,"exceeded max address mappings of 65535"),p="172.29."+(h&255)+"."+(h&65280),Ie.address_map.names[p]=u,Ie.address_map.addrs[u]=p}return p},lookup_addr:function(u){return Ie.address_map.names[u]?Ie.address_map.names[u]:null}};function kt(u,f,p){if(p&&u===0)return null;var h=mr(u,f);if(h.errno)throw new st.ErrnoError(h.errno);return h.addr=Ie.lookup_addr(h.addr)||h.addr,h}function Ht(u,f,p,h,i,a){var c=qe(u),d=kt(f,p);return c.sock_ops.bind(c,d.addr,d.port),0}function hr(u,f,p,h,i,a){var c=qe(u),d=kt(f,p);return c.sock_ops.connect(c,d.addr,d.port),0}function Le(u,f,p,h){}function qr(u,f,p){return it.varargs=p,0}function ai(u,f){}function oi(u,f,p){}function Wr(u,f,p,h){if(p>>>=0,!(h>0))return 0;for(var i=p,a=p+h-1,c=0;c<u.length;++c){var d=u.charCodeAt(c);if(d>=55296&&d<=57343){var g=u.charCodeAt(++c);d=65536+((d&1023)<<10)|g&1023}if(d<=127){if(p>=a)break;f[p++>>>0]=d}else if(d<=2047){if(p+1>=a)break;f[p++>>>0]=192|d>>6,f[p++>>>0]=128|d&63}else if(d<=65535){if(p+2>=a)break;f[p++>>>0]=224|d>>12,f[p++>>>0]=128|d>>6&63,f[p++>>>0]=128|d&63}else{if(p+3>=a)break;f[p++>>>0]=240|d>>18,f[p++>>>0]=128|d>>12&63,f[p++>>>0]=128|d>>6&63,f[p++>>>0]=128|d&63}}return f[p>>>0]=0,p-i}function qt(u,f,p){return Wr(u,q,f,p)}function ui(u,f,p){}function jr(u,f){return q.fill(0,u,u+f),u}function Wt(u,f,p,h,i){switch(f){case 2:p=Ve(p),jr(u,16),i&&(_[i>>>2]=16),ae[u>>>1]=f,_[u+4>>>2]=p,ae[u+2>>>1]=zt(h);break;case 10:p=Ut(p),jr(u,28),i&&(_[i>>>2]=28),_[u>>>2]=f,_[u+8>>>2]=p[0],_[u+12>>>2]=p[1],_[u+16>>>2]=p[2],_[u+20>>>2]=p[3],ae[u+2>>>1]=zt(h);break;default:return 5}return 0}function jt(u,f,p,h,i,a){var c=qe(u);if(!c.daddr)return-53;var d=Wt(f,c.family,Ie.lookup_name(c.daddr),c.dport,p);return 0}function ci(u,f,p,h,i,a){var c=qe(u);return f===1&&p===4?(_[h>>>2]=c.error,_[i>>>2]=4,c.error=null,0):-50}function $r(u,f,p){return it.varargs=p,0}function br(u,f){}function li(u,f,p){}function fi(u,f,p,h){}function _i(u,f,p,h){it.varargs=h}function di(u,f,p,h,i,a){var c=qe(u),d=c.sock_ops.recvmsg(c,p);if(!d)return 0;if(i)var g=Wt(i,c.family,Ie.lookup_name(d.addr),d.port,a);return q.set(d.buffer,f>>>0),d.buffer.byteLength}function pi(u,f,p,h){}function mi(u){}function hi(u,f,p,h,i,a){}function bi(u,f,p){}function gi(u,f){}function yi(u,f,p){}var vi=!0;function wi(){return vi}function Si(u){return H[u>>>2]+_[u+4>>>2]*4294967296}function Rt(u){return u%4===0&&(u%100!==0||u%400===0)}var Ei=[0,31,60,91,121,152,182,213,244,274,305,335],ki=[0,31,59,90,120,151,181,212,243,273,304,334];function Ri(u){var f=Rt(u.getFullYear()),p=f?Ei:ki,h=p[u.getMonth()]+u.getDate()-1;return h}function At(u,f){var p=new Date(Si(u)*1e3);_[f>>>2]=p.getSeconds(),_[f+4>>>2]=p.getMinutes(),_[f+8>>>2]=p.getHours(),_[f+12>>>2]=p.getDate(),_[f+16>>>2]=p.getMonth(),_[f+20>>>2]=p.getFullYear()-1900,_[f+24>>>2]=p.getDay();var h=Ri(p)|0;_[f+28>>>2]=h,_[f+36>>>2]=-(p.getTimezoneOffset()*60);var i=new Date(p.getFullYear(),0,1),a=new Date(p.getFullYear(),6,1).getTimezoneOffset(),c=i.getTimezoneOffset(),d=(a!=c&&p.getTimezoneOffset()==Math.min(c,a))|0;_[f+32>>>2]=d}function gr(u){for(var f=0,p=0;p<u.length;++p){var h=u.charCodeAt(p);h<=127?f++:h<=2047?f+=2:h>=55296&&h<=57343?(f+=4,++p):f+=3}return f}function Gr(u){var f=gr(u)+1,p=Kt(f);return p&&qt(u,p,f),p}function Ai(u,f,p){var h=new Date().getFullYear(),i=new Date(h,0,1),a=new Date(h,6,1),c=i.getTimezoneOffset(),d=a.getTimezoneOffset(),g=Math.max(c,d);H[u>>>2]=g*60,_[f>>>2]=+(c!=d);function R(j){var fe=j.toTimeString().match(/\(([A-Za-z ]+)\)$/);return fe?fe[1]:"GMT"}var E=R(i),C=R(a),O=Gr(E),K=Gr(C);d<c?(H[p>>>2]=O,H[p+4>>>2]=K):(H[p>>>2]=K,H[p+4>>>2]=O)}function Di(){M("")}function yr(u,f){M(Ir)}function zr(u,f){return globalThis.DUCKDB_RUNTIME.createDirectory(e,u,f)}function Ti(u,f){return globalThis.DUCKDB_RUNTIME.checkDirectory(e,u,f)}function Ci(u,f){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(e,u,f)}function Pi(u,f){return globalThis.DUCKDB_RUNTIME.removeDirectory(e,u,f)}function Mi(u){return globalThis.DUCKDB_RUNTIME.closeFile(e,u)}function Oi(u,f){return globalThis.DUCKDB_RUNTIME.checkFile(e,u,f)}function Fi(u){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(e,u)}function Ii(u,f,p,h){return globalThis.DUCKDB_RUNTIME.moveFile(e,u,f,p,h)}function xi(u,f){return globalThis.DUCKDB_RUNTIME.openFile(e,u,f)}function Li(u,f,p,h){return globalThis.DUCKDB_RUNTIME.readFile(e,u,f,p,h)}function Ni(u,f){return globalThis.DUCKDB_RUNTIME.truncateFile(e,u,f)}function Bi(u,f,p,h){return globalThis.DUCKDB_RUNTIME.writeFile(e,u,f,p,h)}function Ui(u){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(u)}function Hi(u,f){return globalThis.DUCKDB_RUNTIME.glob(e,u,f)}function qi(u){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(e,u)}function Wi(u,f,p,h,i,a){return globalThis.DUCKDB_RUNTIME.callScalarUDF(e,u,f,p,h,i,a)}function ji(){return Date.now()}function Kr(){return 4294901760}function $i(){return Kr()}var Yr;P&&(global.performance=require("perf_hooks").performance),Yr=()=>performance.now();function Gi(u,f,p){q.copyWithin(u>>>0,f>>>0,f+p>>>0)}function Vr(u){var f=W.buffer,p=u-f.byteLength+65535>>>16;try{return W.grow(p),Me(),1}catch{}}function zi(u){var f=q.length;u=u>>>0;var p=Kr();if(u>p)return!1;for(var h=(g,R)=>g+(R-g%R)%R,i=1;i<=4;i*=2){var a=f*(1+.2/i);a=Math.min(a,u+100663296);var c=Math.min(p,h(Math.max(u,a),65536)),d=Vr(c);if(d)return!0}return!1}var $t={};function Ki(){return m||"./this.program"}function Dt(){if(!Dt.strings){var u=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",f={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:u,_:Ki()};for(var p in $t)$t[p]===void 0?delete f[p]:f[p]=$t[p];var h=[];for(var p in f)h.push(`${p}=${f[p]}`);Dt.strings=h}return Dt.strings}function Yi(u,f){for(var p=0;p<u.length;++p)z[f++>>>0]=u.charCodeAt(p);z[f>>>0]=0}function vr(u,f){var p=0;return Dt().forEach(function(h,i){var a=f+p;H[u+i*4>>>2]=a,Yi(h,a),p+=h.length+1}),0}function Vi(u,f){var p=Dt();H[u>>>2]=p.length;var h=0;return p.forEach(function(i){h+=i.length+1}),H[f>>>2]=h,0}function Tt(u){return 52}function Xi(u,f){var p=0,h=0,i=0;{var a=2;u==0?p=2:(u==1||u==2)&&(p=64),i=1}return z[f>>>0]=a,ae[f+2>>>1]=i,He=[p>>>0,(ge=p,+Math.abs(ge)>=1?ge>0?+Math.floor(ge/4294967296)>>>0:~~+Math.ceil((ge-+(~~ge>>>0))/4294967296)>>>0:0)],_[f+8>>>2]=He[0],_[f+12>>>2]=He[1],He=[h>>>0,(ge=h,+Math.abs(ge)>=1?ge>0?+Math.floor(ge/4294967296)>>>0:~~+Math.ceil((ge-+(~~ge>>>0))/4294967296)>>>0:0)],_[f+16>>>2]=He[0],_[f+20>>>2]=He[1],0}function Qi(u,f,p,h,i,a){return 52}function Ji(u,f,p,h,i,a){return 52}function Zi(u,f,p,h){return 52}function es(u,f,p,h,i){return 70}function ts(u){return 52}var rs=[null,[],[]];function ns(u,f){var p=rs[u];f===0||f===10?((u===1?Re:S)(Nr(p,0)),p.length=0):p.push(f)}function is(u,f,p,h){for(var i=0,a=0;a<p;a++){var c=H[f>>>2],d=H[f+4>>>2];f+=8;for(var g=0;g<d;g++)ns(u,q[c+g>>>0]);i+=d}return H[h>>>2]=i,0}function ss(u,f,p,h){var i=0,a=0,c=0,d=0,g=0,R=0,E;function C(O,K,j,fe,X,Ee){var A,U,re,ne;return U=O===10?28:16,X=O===10?Hr(X):pr(X),A=Kt(U),ne=Wt(A,O,X,Ee),k(!ne),re=Kt(32),_[re+4>>>2]=O,_[re+8>>>2]=K,_[re+12>>>2]=j,H[re+24>>>2]=fe,H[re+20>>>2]=A,O===10?_[re+16>>>2]=28:_[re+16>>>2]=16,_[re+28>>>2]=0,re}if(p&&(c=_[p>>>2],d=_[p+4>>>2],g=_[p+8>>>2],R=_[p+12>>>2]),g&&!R&&(R=g===2?17:6),!g&&R&&(g=R===17?2:1),R===0&&(R=6),g===0&&(g=1),!u&&!f)return-2;if(c&-1088||p!==0&&_[p>>>2]&2&&!u)return-1;if(c&32)return-2;if(g!==0&&g!==1&&g!==2)return-7;if(d!==0&&d!==2&&d!==10)return-6;if(f&&(f=nt(f),a=parseInt(f,10),isNaN(a)))return c&1024?-2:-8;if(!u)return d===0&&(d=2),c&1||(d===2?i=Gt(2130706433):i=[0,0,0,1]),E=C(d,g,R,null,i,a),H[h>>>2]=E,0;if(u=nt(u),i=Ve(u),i!==null)if(d===0||d===2)d=2;else if(d===10&&c&8)i=[0,0,Gt(65535),i],d=10;else return-2;else if(i=Ut(u),i!==null)if(d===0||d===10)d=10;else return-2;return i!=null?(E=C(d,g,R,u,i,a),H[h>>>2]=E,0):c&4?-2:(u=Ie.lookup_name(u),i=Ve(u),d===0?d=2:d===10&&(i=[0,0,Gt(65535),i]),E=C(d,g,R,null,i,a),H[h>>>2]=E,0)}function as(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return h=>crypto.getRandomValues(h);if(P)try{var u=require("crypto"),f=u.randomFillSync;if(f)return h=>u.randomFillSync(h);var p=u.randomBytes;return h=>(h.set(p(h.byteLength)),h)}catch{}M("initRandomDevice")}function Xr(u){return(Xr=as())(u)}function os(u,f){return Xr(q.subarray(u>>>0,u+f>>>0)),0}function us(u,f,p,h,i,a,c){var d=mr(u,f);if(d.errno)return-6;var g=d.port,R=d.addr,E=!1;if(p&&h){var C;if(c&1||!(C=Ie.lookup_addr(R))){if(c&8)return-2}else R=C;var O=qt(R,p,h);O+1>=h&&(E=!0)}if(i&&a){g=""+g;var O=qt(g,i,a);O+1>=a&&(E=!0)}return E?-12:0}function cs(u,f){for(var p=0,h=0;h<=f;p+=u[h++]);return p}var wr=[31,29,31,30,31,30,31,31,30,31,30,31],Qr=[31,28,31,30,31,30,31,31,30,31,30,31];function ls(u,f){for(var p=new Date(u.getTime());f>0;){var h=Rt(p.getFullYear()),i=p.getMonth(),a=(h?wr:Qr)[i];if(f>a-p.getDate())f-=a-p.getDate()+1,p.setDate(1),i<11?p.setMonth(i+1):(p.setMonth(0),p.setFullYear(p.getFullYear()+1));else return p.setDate(p.getDate()+f),p}return p}function fs(u,f,p){var h=p>0?p:gr(u)+1,i=new Array(h),a=Wr(u,i,0,i.length);return f&&(i.length=a),i}function Sr(u,f){z.set(u,f>>>0)}function Jr(u,f,p,h){var i=_[h+40>>>2],a={tm_sec:_[h>>>2],tm_min:_[h+4>>>2],tm_hour:_[h+8>>>2],tm_mday:_[h+12>>>2],tm_mon:_[h+16>>>2],tm_year:_[h+20>>>2],tm_wday:_[h+24>>>2],tm_yday:_[h+28>>>2],tm_isdst:_[h+32>>>2],tm_gmtoff:_[h+36>>>2],tm_zone:i?nt(i):""},c=nt(p),d={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var g in d)c=c.replace(new RegExp(g,"g"),d[g]);var R=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],E=["January","February","March","April","May","June","July","August","September","October","November","December"];function C(A,U,re){for(var ne=typeof A=="number"?A.toString():A||"";ne.length<U;)ne=re[0]+ne;return ne}function O(A,U){return C(A,U,"0")}function K(A,U){function re(D){return D<0?-1:D>0?1:0}var ne;return(ne=re(A.getFullYear()-U.getFullYear()))===0&&(ne=re(A.getMonth()-U.getMonth()))===0&&(ne=re(A.getDate()-U.getDate())),ne}function j(A){switch(A.getDay()){case 0:return new Date(A.getFullYear()-1,11,29);case 1:return A;case 2:return new Date(A.getFullYear(),0,3);case 3:return new Date(A.getFullYear(),0,2);case 4:return new Date(A.getFullYear(),0,1);case 5:return new Date(A.getFullYear()-1,11,31);case 6:return new Date(A.getFullYear()-1,11,30)}}function fe(A){var U=ls(new Date(A.tm_year+1900,0,1),A.tm_yday),re=new Date(U.getFullYear(),0,4),ne=new Date(U.getFullYear()+1,0,4),D=j(re),G=j(ne);return K(D,U)<=0?K(G,U)<=0?U.getFullYear()+1:U.getFullYear():U.getFullYear()-1}var X={"%a":function(A){return R[A.tm_wday].substring(0,3)},"%A":function(A){return R[A.tm_wday]},"%b":function(A){return E[A.tm_mon].substring(0,3)},"%B":function(A){return E[A.tm_mon]},"%C":function(A){var U=A.tm_year+1900;return O(U/100|0,2)},"%d":function(A){return O(A.tm_mday,2)},"%e":function(A){return C(A.tm_mday,2," ")},"%g":function(A){return fe(A).toString().substring(2)},"%G":function(A){return fe(A)},"%H":function(A){return O(A.tm_hour,2)},"%I":function(A){var U=A.tm_hour;return U==0?U=12:U>12&&(U-=12),O(U,2)},"%j":function(A){return O(A.tm_mday+cs(Rt(A.tm_year+1900)?wr:Qr,A.tm_mon-1),3)},"%m":function(A){return O(A.tm_mon+1,2)},"%M":function(A){return O(A.tm_min,2)},"%n":function(){return`
`},"%p":function(A){return A.tm_hour>=0&&A.tm_hour<12?"AM":"PM"},"%S":function(A){return O(A.tm_sec,2)},"%t":function(){return"	"},"%u":function(A){return A.tm_wday||7},"%U":function(A){var U=A.tm_yday+7-A.tm_wday;return O(Math.floor(U/7),2)},"%V":function(A){var U=Math.floor((A.tm_yday+7-(A.tm_wday+6)%7)/7);if((A.tm_wday+371-A.tm_yday-2)%7<=2&&U++,U){if(U==53){var ne=(A.tm_wday+371-A.tm_yday)%7;ne!=4&&(ne!=3||!Rt(A.tm_year))&&(U=1)}}else{U=52;var re=(A.tm_wday+7-A.tm_yday-1)%7;(re==4||re==5&&Rt(A.tm_year%400-1))&&U++}return O(U,2)},"%w":function(A){return A.tm_wday},"%W":function(A){var U=A.tm_yday+7-(A.tm_wday+6)%7;return O(Math.floor(U/7),2)},"%y":function(A){return(A.tm_year+1900).toString().substring(2)},"%Y":function(A){return A.tm_year+1900},"%z":function(A){var U=A.tm_gmtoff,re=U>=0;return U=Math.abs(U)/60,U=U/60*100+U%60,(re?"+":"-")+("0000"+U).slice(-4)},"%Z":function(A){return A.tm_zone},"%%":function(){return"%"}};c=c.replace(/%%/g,"\0\0");for(var g in X)c.includes(g)&&(c=c.replace(new RegExp(g,"g"),X[g](a)));c=c.replace(/\0\0/g,"%");var Ee=fs(c,!1);return Ee.length>f?0:(Sr(Ee,u),Ee.length-1)}function _s(u,f,p,h,i){return Jr(u,f,p,h)}function ds(){S("missing function: ucnv_close_64"),M(-1)}function Zr(){S("missing function: ucnv_convertEx_64"),M(-1)}function ps(){S("missing function: ucnv_open_64"),M(-1)}function ms(){S("missing function: ucnv_toAlgorithmic_64"),M(-1)}function hs(){S("missing function: ucsdet_close_64"),M(-1)}function bs(){S("missing function: ucsdet_detect_64"),M(-1)}function gs(){S("missing function: ucsdet_getConfidence_64"),M(-1)}function ys(){S("missing function: ucsdet_getName_64"),M(-1)}function vs(){S("missing function: ucsdet_open_64"),M(-1)}function ws(){S("missing function: ucsdet_setText_64"),M(-1)}function Ss(){S("missing function: unzClose"),M(-1)}function Es(){S("missing function: unzCloseCurrentFile"),M(-1)}function ks(){S("missing function: unzGetCurrentFileInfo"),M(-1)}function Rs(){S("missing function: unzGetCurrentFileInfo64"),M(-1)}function As(){S("missing function: unzGetGlobalInfo"),M(-1)}function Ds(){S("missing function: unzGoToFirstFile"),M(-1)}function Ts(){S("missing function: unzGoToNextFile"),M(-1)}function Cs(){S("missing function: unzLocateFile"),M(-1)}function Ps(){S("missing function: unzOpen"),M(-1)}function Ms(){S("missing function: unzOpen2"),M(-1)}function Os(){S("missing function: unzOpenCurrentFile"),M(-1)}function Fs(){S("missing function: unzReadCurrentFile"),M(-1)}function Is(u){Z=u,ur()||(e.onExit&&e.onExit(u),B=!0),b(u,new dr(u))}function xs(u,f){Z=u,Is(u)}function Ls(u){if(u instanceof dr||u=="unwind")return Z;b(1,u)}function Ns(u){var f=e["_"+u];return f}function Bs(u){var f=gr(u)+1,p=Vt(f);return qt(u,p,f),p}function Us(u,f,p,h,i){var a={string:j=>{var fe=0;return j!=null&&j!==0&&(fe=Bs(j)),fe},array:j=>{var fe=Vt(j.length);return Sr(j,fe),fe}};function c(j){return f==="string"?nt(j):f==="boolean"?!!j:j}var d=Ns(u),g=[],R=0;if(h)for(var E=0;E<h.length;E++){var C=a[p[E]];C?(R===0&&(R=Pt()),g[E]=C(h[E])):g[E]=h[E]}var O=d.apply(null,g);function K(j){return R!==0&&_t(R),c(j)}return O=K(O),O}var Hs={f:Vn,V:Xn,W:Qn,m:Jn,o:Zn,b:ei,B:ti,d:ri,a:ni,n:ii,i:si,La:xr,Ga:Br,Ka:Ht,Ja:hr,Ca:Le,c:qr,Ba:ai,O:oi,wa:ui,Ea:jt,Fa:ci,L:$r,ya:br,xa:li,za:fi,M:_i,Ha:di,ua:pi,G:mi,Ia:hi,I:bi,Aa:gi,H:yi,S:wi,ea:At,fa:Ai,j:Di,Ma:yr,ma:zr,na:Ti,ja:Ci,ka:Pi,E:Mi,ha:Oi,N:Fi,ia:Ii,pa:xi,p:Li,oa:Ni,F:Bi,qa:Ui,ga:Hi,D:qi,ra:Wi,A:ji,X:$i,g:Yr,Oa:Gi,Pa:zi,la:vr,ta:Vi,k:Tt,Na:Xi,Q:Qi,P:Ji,K:Zi,R:es,va:ts,v:is,J:ss,sa:os,Da:us,ba:_s,e:ds,Y:Zr,u:ps,Z:ms,C:hs,aa:bs,$:gs,_:ys,da:vs,ca:ws,h:Ss,t:Es,y:ks,q:Rs,U:As,z:Ds,x:Ts,s:Cs,w:Ps,T:Ms,r:Os,l:Fs},Au=Yn(),qs=function(){return(qs=e.asm.Ra).apply(null,arguments)},en=e._main=function(){return(en=e._main=e.asm.Sa).apply(null,arguments)},Ws=e._duckdb_web_fs_glob_add_path=function(){return(Ws=e._duckdb_web_fs_glob_add_path=e.asm.Ua).apply(null,arguments)},Du=e._duckdb_web_clear_response=function(){return(Du=e._duckdb_web_clear_response=e.asm.Va).apply(null,arguments)},js=e._duckdb_web_fail_with=function(){return(js=e._duckdb_web_fail_with=e.asm.Wa).apply(null,arguments)},tn=e._duckdb_web_reset=function(){return(tn=e._duckdb_web_reset=e.asm.Xa).apply(null,arguments)},$s=e._duckdb_web_connect=function(){return($s=e._duckdb_web_connect=e.asm.Ya).apply(null,arguments)},Gs=e._duckdb_web_disconnect=function(){return(Gs=e._duckdb_web_disconnect=e.asm.Za).apply(null,arguments)},zs=e._duckdb_web_flush_files=function(){return(zs=e._duckdb_web_flush_files=e.asm._a).apply(null,arguments)},Ks=e._duckdb_web_flush_file=function(){return(Ks=e._duckdb_web_flush_file=e.asm.$a).apply(null,arguments)},Ys=e._duckdb_web_open=function(){return(Ys=e._duckdb_web_open=e.asm.ab).apply(null,arguments)},Vs=e._duckdb_web_get_global_file_info=function(){return(Vs=e._duckdb_web_get_global_file_info=e.asm.bb).apply(null,arguments)},Xs=e._duckdb_web_collect_file_stats=function(){return(Xs=e._duckdb_web_collect_file_stats=e.asm.cb).apply(null,arguments)},Qs=e._duckdb_web_export_file_stats=function(){return(Qs=e._duckdb_web_export_file_stats=e.asm.db).apply(null,arguments)},Js=e._duckdb_web_fs_drop_file=function(){return(Js=e._duckdb_web_fs_drop_file=e.asm.eb).apply(null,arguments)},Zs=e._duckdb_web_fs_drop_files=function(){return(Zs=e._duckdb_web_fs_drop_files=e.asm.fb).apply(null,arguments)},ea=e._duckdb_web_fs_glob_file_infos=function(){return(ea=e._duckdb_web_fs_glob_file_infos=e.asm.gb).apply(null,arguments)},ta=e._duckdb_web_fs_get_file_info_by_id=function(){return(ta=e._duckdb_web_fs_get_file_info_by_id=e.asm.hb).apply(null,arguments)},ra=e._duckdb_web_fs_get_file_info_by_name=function(){return(ra=e._duckdb_web_fs_get_file_info_by_name=e.asm.ib).apply(null,arguments)},na=e._duckdb_web_fs_register_file_url=function(){return(na=e._duckdb_web_fs_register_file_url=e.asm.jb).apply(null,arguments)},ia=e._duckdb_web_fs_register_file_buffer=function(){return(ia=e._duckdb_web_fs_register_file_buffer=e.asm.kb).apply(null,arguments)},sa=e._duckdb_web_copy_file_to_buffer=function(){return(sa=e._duckdb_web_copy_file_to_buffer=e.asm.lb).apply(null,arguments)},aa=e._duckdb_web_copy_file_to_path=function(){return(aa=e._duckdb_web_copy_file_to_path=e.asm.mb).apply(null,arguments)},oa=e._duckdb_web_get_version=function(){return(oa=e._duckdb_web_get_version=e.asm.nb).apply(null,arguments)},ua=e._duckdb_web_get_feature_flags=function(){return(ua=e._duckdb_web_get_feature_flags=e.asm.ob).apply(null,arguments)},ca=e._duckdb_web_tokenize=function(){return(ca=e._duckdb_web_tokenize=e.asm.pb).apply(null,arguments)},la=e._duckdb_web_udf_scalar_create=function(){return(la=e._duckdb_web_udf_scalar_create=e.asm.qb).apply(null,arguments)},fa=e._duckdb_web_prepared_create=function(){return(fa=e._duckdb_web_prepared_create=e.asm.rb).apply(null,arguments)},_a=e._duckdb_web_prepared_close=function(){return(_a=e._duckdb_web_prepared_close=e.asm.sb).apply(null,arguments)},da=e._duckdb_web_prepared_run=function(){return(da=e._duckdb_web_prepared_run=e.asm.tb).apply(null,arguments)},pa=e._duckdb_web_prepared_send=function(){return(pa=e._duckdb_web_prepared_send=e.asm.ub).apply(null,arguments)},ma=e._duckdb_web_query_run=function(){return(ma=e._duckdb_web_query_run=e.asm.vb).apply(null,arguments)},ha=e._duckdb_web_pending_query_start=function(){return(ha=e._duckdb_web_pending_query_start=e.asm.wb).apply(null,arguments)},ba=e._duckdb_web_pending_query_poll=function(){return(ba=e._duckdb_web_pending_query_poll=e.asm.xb).apply(null,arguments)},ga=e._duckdb_web_pending_query_cancel=function(){return(ga=e._duckdb_web_pending_query_cancel=e.asm.yb).apply(null,arguments)},ya=e._duckdb_web_query_fetch_results=function(){return(ya=e._duckdb_web_query_fetch_results=e.asm.zb).apply(null,arguments)},va=e._duckdb_web_get_tablenames=function(){return(va=e._duckdb_web_get_tablenames=e.asm.Ab).apply(null,arguments)},wa=e._duckdb_web_insert_arrow_from_ipc_stream=function(){return(wa=e._duckdb_web_insert_arrow_from_ipc_stream=e.asm.Bb).apply(null,arguments)},Sa=e._duckdb_web_insert_csv_from_path=function(){return(Sa=e._duckdb_web_insert_csv_from_path=e.asm.Cb).apply(null,arguments)},Ea=e._duckdb_web_insert_json_from_path=function(){return(Ea=e._duckdb_web_insert_json_from_path=e.asm.Db).apply(null,arguments)},ka=function(){return(ka=e.asm.__errno_location).apply(null,arguments)},Gt=function(){return(Gt=e.asm.Eb).apply(null,arguments)},zt=function(){return(zt=e.asm.Fb).apply(null,arguments)},Er=function(){return(Er=e.asm.Gb).apply(null,arguments)},Kt=e._malloc=function(){return(Kt=e._malloc=e.asm.Hb).apply(null,arguments)},Yt=e._free=function(){return(Yt=e._free=e.asm.Ib).apply(null,arguments)},Ct=function(){return(Ct=e.asm.Jb).apply(null,arguments)},Pt=function(){return(Pt=e.asm.Kb).apply(null,arguments)},_t=function(){return(_t=e.asm.Lb).apply(null,arguments)},Vt=function(){return(Vt=e.asm.Mb).apply(null,arguments)};e.stackAlloc=Vt,e.stackSave=Pt,e.stackRestore=_t,e.ccall=Us;var dt;Ke=function u(){dt||Mt(),dt||(Ke=u)};function kr(){var u=en,f=0,p=0;try{var h=u(f,p);return xs(h,!0),h}catch(i){return Ls(i)}}function Mt(){if(De>0||(L(),De>0))return;function u(){dt||(dt=!0,e.calledRun=!0,!B&&(me(),F(),n(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),Rr&&kr(),J()))}e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1),u()},1)):u()}if(e.preInit)for(typeof e.preInit=="function"&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();var Rr=!0;return e.noInitialRun&&(Rr=!1),Mt(),t.ready}})();typeof qn=="object"&&typeof Ru=="object"?Ru.exports=ku:typeof define=="function"&&define.amd?define([],function(){return ku}):typeof qn=="object"&&(qn.DuckDB=ku)});var bh={};Qf(bh,{ConsoleLogger:()=>Pa,DEFAULT_RUNTIME:()=>Ta,DuckDBAccessMode:()=>Nu,DuckDBBindingsBase:()=>Cr,DuckDBConnection:()=>Ar,DuckDBDataProtocol:()=>on,DuckDBFeature:()=>Lu,FileFlags:()=>xu,FileStatistics:()=>Tr,JSONTableShape:()=>Bu,LogEvent:()=>qu,LogLevel:()=>Uu,LogOrigin:()=>Wu,LogTopic:()=>Hu,NODE_RUNTIME:()=>ve,PACKAGE_NAME:()=>Ma,PACKAGE_VERSION:()=>Oa,PACKAGE_VERSION_MAJOR:()=>o_,PACKAGE_VERSION_MINOR:()=>u_,PACKAGE_VERSION_PATCH:()=>c_,PreparedStatement:()=>nn,ResultStreamIterator:()=>Dr,StatusCode:()=>Pu,VoidLogger:()=>Ca,callSRet:()=>pe,copyBuffer:()=>ht,createDuckDB:()=>hh,decodeText:()=>mt,dropResponseBuffers:()=>he,failWith:()=>ye,getJsDelivrBundles:()=>__,getLogEventLabel:()=>r_,getLogLevelLabel:()=>t_,getLogOriginLabel:()=>i_,getLogTopicLabel:()=>n_,getPlatformFeatures:()=>ln,isFirefox:()=>l_,isNode:()=>Ua,isSafari:()=>f_,readString:()=>ie,selectBundle:()=>d_});module.exports=Jf(bh);var Xe=pt(require("apache-arrow")),Ar=class{constructor(t,e){this._bindings=t,this._conn=e}close(){this._bindings.disconnect(this._conn)}useUnsafe(t){return t(this._bindings,this._conn)}query(t){let e=this._bindings.runQuery(this._conn,t),n=Xe.RecordBatchReader.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new Xe.Table(n)}async send(t){let e=this._bindings.startPendingQuery(this._conn,t);for(;e==null;)e=await new Promise((o,l)=>{try{o(this._bindings.pollPendingQuery(this._conn))}catch(m){console.log(m),l(m)}});let n=new Dr(this._bindings,this._conn,e),s=Xe.RecordBatchReader.from(n);return console.assert(s.isSync()),console.assert(s.isStream()),s}cancelSent(){return this._bindings.cancelPendingQuery(this._conn)}getTableNames(t){return this._bindings.getTableNames(this._conn,t)}prepare(t){let e=this._bindings.createPrepared(this._conn,t);return new nn(this._bindings,this._conn,e)}createScalarFunction(t,e,n){this._bindings.createScalarFunction(this._conn,t,e,n)}insertArrowTable(t,e){let n=Xe.tableToIPC(t,"stream");this.insertArrowFromIPCStream(n,e)}insertArrowFromIPCStream(t,e){this._bindings.insertArrowFromIPCStream(this._conn,t,e)}insertCSVFromPath(t,e){this._bindings.insertCSVFromPath(this._conn,t,e)}insertJSONFromPath(t,e){this._bindings.insertJSONFromPath(this._conn,t,e)}},Dr=class{constructor(t,e,n){this.bindings=t;this.conn=e;this.header=n;this._first=!0,this._depleted=!1}next(){if(this._first)return this._first=!1,{done:!1,value:this.header};if(this._depleted)return{done:!0,value:null};let t=this.bindings.fetchQueryResults(this.conn);return this._depleted=t.length==0,{done:this._depleted,value:t}}[Symbol.iterator](){return this}},nn=class{constructor(t,e,n){this.bindings=t,this.connectionId=e,this.statementId=n}close(){this.bindings.closePrepared(this.connectionId,this.statementId)}query(...t){let e=this.bindings.runPrepared(this.connectionId,this.statementId,t),n=Xe.RecordBatchReader.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new Xe.Table(n)}send(...t){let e=this.bindings.sendPrepared(this.connectionId,this.statementId,t),n=new Dr(this.bindings,this.connectionId,e),s=Xe.RecordBatchReader.from(n);return console.assert(s.isSync()),console.assert(s.isStream()),s}};var Pu=(t=>(t[t.SUCCESS=0]="SUCCESS",t))(Pu||{});var Fu=new TextEncoder,Mu=new TextDecoder("utf-8");function Ra(r,t,e){let n=Fu.encode(e),s=r._malloc(n.byteLength),o=r.HEAPU8.subarray(s,s+n.byteLength);o.set(n),r.HEAPF64[(t>>3)+0]=1,r.HEAPF64[(t>>3)+1]=s,r.HEAPF64[(t>>3)+2]=o.byteLength}function Da(r){switch(r){case"UINT8":case"INT8":return 1;case"INT32":case"FLOAT":return 4;case"INT64":case"UINT64":case"DOUBLE":case"VARCHAR":return 8;default:return 0}}function Aa(r,t,e,n){let s=r.HEAPU8.subarray(t,t+n*Da(e));switch(e){case"UINT8":return new Uint8Array(s.buffer,s.byteOffset,n);case"INT8":return new Int8Array(s.buffer,s.byteOffset,n);case"INT32":return new Int32Array(s.buffer,s.byteOffset,n);case"FLOAT":return new Float32Array(s.buffer,s.byteOffset,n);case"DOUBLE":return new Float64Array(s.buffer,s.byteOffset,n);case"VARCHAR":return new Float64Array(s.buffer,s.byteOffset,n);default:return new Array(0)}}function Ou(r,t,e){let n=r.HEAPU8.subarray(t,t+e);return new Uint8Array(n.buffer,n.byteOffset,e)}function sn(r,t,e){let n=r.HEAPU8.subarray(t,t+e*8);return new Float64Array(n.buffer,n.byteOffset,e)}function an(r,t,e,n,s,o,l,m){try{let b=r._udfFunctions.get(n);if(!b){Ra(t,e,"Unknown UDF with id: "+n);return}let T=Mu.decode(t.HEAPU8.subarray(s,s+o)),y=JSON.parse(T),P=sn(t,l,m/8),w=B=>{var k;let Z=null;switch(B.validityBuffer!==void 0&&(Z=Ou(t,P[B.validityBuffer],y.rows)),B.physicalType){case"VARCHAR":{if(B.dataBuffer===null||B.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for VARCHAR argument");if(B.lengthBuffer===null||B.lengthBuffer===void 0)throw new Error("malformed data view, expected data length buffer for VARCHAR argument");let z=Aa(t,P[B.dataBuffer],B.physicalType,y.rows),q=[],ae=sn(t,P[B.lengthBuffer],y.rows);for(let v=0;v<y.rows;++v){if(Z!=null&&!Z[v]){q.push(null);continue}let _=t.HEAPU8.subarray(z[v],z[v]+ae[v]),H=Mu.decode(_);q.push(H)}return v=>q[v]}case"STRUCT":{let z={},q=[];for(let ae=0;ae<(((k=B.children)==null?void 0:k.length)||0);++ae){let v=B.children[ae],_=w(v);q.push(H=>{z[v.name]=_(H)})}return Z!=null?ae=>{if(!Z[ae])return null;for(let v of q)v(ae);return z}:ae=>{for(let v of q)v(ae);return z}}default:{if(B.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for argument of type: "+B.physicalType);let z=Aa(t,P[B.dataBuffer],B.physicalType,y.rows);return Z!=null?q=>Z[q]?z[q]:null:q=>z[q]}}},te=[];for(let B=0;B<y.args.length;++B)te.push(w(y.args[B]));let I=y.rows*Da(y.ret.physicalType),N=t._malloc(I),$=Aa(t,N,y.ret.physicalType,y.rows),Y=t._malloc(y.rows),le=Ou(t,Y,y.rows);if($.length==0||le.length==0){Ra(t,e,"Can't create physical arrays for result");return}let ue=$;y.ret.physicalType=="VARCHAR"&&(ue=new Array(y.rows));let Re=[];for(let B=0;B<y.args.length;++B)Re.push(null);for(let B=0;B<y.rows;++B){for(let k=0;k<y.args.length;++k)Re[k]=te[k](B);let Z=b.func(...Re);ue[B]=Z,le[B]=Z==null?0:1}let S=0;switch(y.ret.physicalType){case"VARCHAR":{let B=new Array(0);S=t._malloc(y.rows*Da("DOUBLE"));let Z=sn(t,S,y.rows),k=0;for(let v=0;v<y.rows;++v){let _=Fu.encode(ue[v]||"");B.push(_),Z[v]=_.length,k+=_.length}let z=t._malloc(k),q=t.HEAPU8.subarray(z,z+k),ae=0;for(let v=0;v<y.rows;++v){$[v]=ae;let _=B[v];q.subarray(ae,ae+_.length).set(_),ae+=_.length}}}let se=3*8,V=t._malloc(se),W=sn(t,V,3);W[0]=N,W[1]=Y,W[2]=S,t.HEAPF64[(e>>3)+0]=0,t.HEAPF64[(e>>3)+1]=V,t.HEAPF64[(e>>3)+2]=0}catch(b){Ra(t,e,b.toString())}}function Zf(){let r=new TextDecoder;return t=>(typeof SharedArrayBuffer<"u"&&t.buffer instanceof SharedArrayBuffer&&(t=new Uint8Array(t)),r.decode(t))}var mt=Zf();function ye(r,t){console.error(`FAIL WITH: ${t}`),r.ccall("duckdb_web_fail_with",null,["string"],[t])}function ht(r,t,e){let n=r.HEAPU8.subarray(t,t+e),s=new Uint8Array(new ArrayBuffer(n.byteLength));return s.set(n),s}function ie(r,t,e){return mt(r.HEAPU8.subarray(t,t+e))}var on=(l=>(l[l.BUFFER=0]="BUFFER",l[l.NODE_FS=1]="NODE_FS",l[l.BROWSER_FILEREADER=2]="BROWSER_FILEREADER",l[l.BROWSER_FSACCESS=3]="BROWSER_FSACCESS",l[l.HTTP=4]="HTTP",l[l.S3=5]="S3",l))(on||{}),xu=(l=>(l[l.FILE_FLAGS_READ=1]="FILE_FLAGS_READ",l[l.FILE_FLAGS_WRITE=2]="FILE_FLAGS_WRITE",l[l.FILE_FLAGS_DIRECT_IO=4]="FILE_FLAGS_DIRECT_IO",l[l.FILE_FLAGS_FILE_CREATE=8]="FILE_FLAGS_FILE_CREATE",l[l.FILE_FLAGS_FILE_CREATE_NEW=16]="FILE_FLAGS_FILE_CREATE_NEW",l[l.FILE_FLAGS_APPEND=32]="FILE_FLAGS_APPEND",l))(xu||{});function pe(r,t,e,n){let s=r.stackSave(),o=r.stackAlloc(3*8);e.unshift("number"),n.unshift(o),r.ccall(t,null,e,n);let l=r.HEAPF64[(o>>3)+0],m=r.HEAPF64[(o>>3)+1],b=r.HEAPF64[(o>>3)+2];return r.stackRestore(s),[l,m,b]}function he(r){r.ccall("duckdb_web_clear_response",null,[],[])}var Ta={_udfFunctions:new Map,testPlatformFeature:(r,t)=>!1,getDefaultDataProtocol:r=>0,openFile:(r,t,e)=>{},syncFile:(r,t)=>{},closeFile:(r,t)=>{},getLastFileModificationTime:(r,t)=>0,truncateFile:(r,t,e)=>{},readFile:(r,t,e,n,s)=>0,writeFile:(r,t,e,n,s)=>0,removeDirectory:(r,t,e)=>{},checkDirectory:(r,t,e)=>!1,createDirectory:(r,t,e)=>{},listDirectoryEntries:(r,t,e)=>!1,glob:(r,t,e)=>{},moveFile:(r,t,e,n,s)=>{},checkFile:(r,t,e)=>!1,removeFile:(r,t,e)=>{},callScalarUDF:(r,t,e,n,s,o,l)=>{an(Ta,r,t,e,n,s,o,l)}};var Tr=class{constructor(t){let e=new Float64Array(t.buffer,t.byteOffset,t.byteLength/8),n=new Uint8Array(new ArrayBuffer(t.byteLength));n.set(t.subarray(7*8)),this.totalFileReadsCold=e[0],this.totalFileReadsAhead=e[1],this.totalFileReadsCached=e[2],this.totalFileWrites=e[3],this.totalPageAccesses=e[4],this.totalPageLoads=e[5],this.blockSize=e[6],this.blockStats=n}getBlockStats(t,e){return e=e||{file_reads_cold:0,file_reads_ahead:0,file_reads_cached:0,file_writes:0,page_accesses:0,page_loads:0},e.file_writes=this.blockStats[t*3+0]&15,e.file_reads_cold=this.blockStats[t*3+0]>>4,e.file_reads_ahead=this.blockStats[t*3+1]&15,e.file_reads_cached=this.blockStats[t*3+1]>>4,e.page_accesses=this.blockStats[t*3+1]&15,e.page_loads=this.blockStats[t*3+1]>>4,e}};var oe=pt(require("apache-arrow"));function Xt(r){switch(r.typeId){case oe.Type.Binary:return{sqlType:"binary"};case oe.Type.Bool:return{sqlType:"bool"};case oe.Type.Date:return{sqlType:"date"};case oe.Type.DateDay:return{sqlType:"date32[d]"};case oe.Type.DateMillisecond:return{sqlType:"date64[ms]"};case oe.Type.Decimal:{let t=r;return{sqlType:"decimal",precision:t.precision,scale:t.scale}}case oe.Type.Float:return{sqlType:"float"};case oe.Type.Float16:return{sqlType:"float16"};case oe.Type.Float32:return{sqlType:"float32"};case oe.Type.Float64:return{sqlType:"float64"};case oe.Type.Int:return{sqlType:"int32"};case oe.Type.Int16:return{sqlType:"int16"};case oe.Type.Int32:return{sqlType:"int32"};case oe.Type.Int64:return{sqlType:"int64"};case oe.Type.Uint16:return{sqlType:"uint16"};case oe.Type.Uint32:return{sqlType:"uint32"};case oe.Type.Uint64:return{sqlType:"uint64"};case oe.Type.Uint8:return{sqlType:"uint8"};case oe.Type.IntervalDayTime:return{sqlType:"interval[dt]"};case oe.Type.IntervalYearMonth:return{sqlType:"interval[m]"};case oe.Type.List:return{sqlType:"list",valueType:Xt(r.valueType)};case oe.Type.FixedSizeBinary:return{sqlType:"fixedsizebinary",byteWidth:r.byteWidth};case oe.Type.Null:return{sqlType:"null"};case oe.Type.Utf8:return{sqlType:"utf8"};case oe.Type.Struct:return{sqlType:"struct",fields:r.children.map(e=>un(e.name,e.type))};case oe.Type.Map:{let t=r;return{sqlType:"map",keyType:Xt(t.keyType),valueType:Xt(t.valueType)}}case oe.Type.Time:return{sqlType:"time[s]"};case oe.Type.TimeMicrosecond:return{sqlType:"time[us]"};case oe.Type.TimeMillisecond:return{sqlType:"time[ms]"};case oe.Type.TimeNanosecond:return{sqlType:"time[ns]"};case oe.Type.TimeSecond:return{sqlType:"time[s]"};case oe.Type.Timestamp:return{sqlType:"timestamp",timezone:r.timezone||void 0};case oe.Type.TimestampSecond:return{sqlType:"timestamp[s]",timezone:r.timezone||void 0};case oe.Type.TimestampMicrosecond:return{sqlType:"timestamp[us]",timezone:r.timezone||void 0};case oe.Type.TimestampNanosecond:return{sqlType:"timestamp[ns]",timezone:r.timezone||void 0};case oe.Type.TimestampMillisecond:return{sqlType:"timestamp[ms]",timezone:r.timezone||void 0}}throw new Error(`unsupported arrow type: ${r.toString()}`)}function un(r,t){let e=Xt(t);return e.name=r,e}var e_=new TextEncoder,Lu=(o=>(o[o.WASM_EXCEPTIONS=1]="WASM_EXCEPTIONS",o[o.WASM_THREADS=2]="WASM_THREADS",o[o.WASM_SIMD=4]="WASM_SIMD",o[o.WASM_BULK_MEMORY=8]="WASM_BULK_MEMORY",o[o.EMIT_BIGINT=16]="EMIT_BIGINT",o))(Lu||{}),Cr=class{constructor(t,e){this._instance=null;this._initPromise=null;this._initPromiseResolver=()=>{};this.onInstantiationProgress=[];this._logger=t,this._runtime=e,this._nextUDFId=1}get logger(){return this._logger}get mod(){return this._instance}get pthread(){return this.mod.PThread||null}async instantiate(t=e=>{}){return this._instance!=null?this:(this._initPromise!=null&&(this.onInstantiationProgress.push(t),await this._initPromise),this._initPromise=new Promise(e=>{this._initPromiseResolver=e}),this.onInstantiationProgress=[t],this._instance=await this.instantiateImpl({print:console.log.bind(console),printErr:console.log.bind(console),onRuntimeInitialized:this._initPromiseResolver}),await this._initPromise,this._initPromise=null,this.onInstantiationProgress=this.onInstantiationProgress.filter(e=>e!=t),this)}open(t){let[e,n,s]=pe(this.mod,"duckdb_web_open",["string"],[JSON.stringify(t)]);if(e!==0)throw new Error(ie(this.mod,n,s));he(this.mod)}reset(){let[t,e,n]=pe(this.mod,"duckdb_web_reset",[],[]);if(t!==0)throw new Error(ie(this.mod,e,n));he(this.mod)}getVersion(){let[t,e,n]=pe(this.mod,"duckdb_web_get_version",[],[]);if(t!==0)throw new Error(ie(this.mod,e,n));let s=ie(this.mod,e,n);return he(this.mod),s}getFeatureFlags(){return this.mod.ccall("duckdb_web_get_feature_flags","number",[],[])}tokenize(t){let[e,n,s]=pe(this.mod,"duckdb_web_tokenize",["string"],[t]);if(e!==0)throw new Error(ie(this.mod,n,s));let o=ie(this.mod,n,s);return he(this.mod),JSON.parse(o)}connect(){let t=this.mod.ccall("duckdb_web_connect","number",[],[]);return new Ar(this,t)}disconnect(t){if(this.mod.ccall("duckdb_web_disconnect",null,["number"],[t]),this.pthread)for(let e of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])e.postMessage({cmd:"dropUDFFunctions",connectionId:t})}runQuery(t,e){let[n,s,o]=pe(this.mod,"duckdb_web_query_run",["number","string"],[t,e]);if(n!==0)throw new Error(ie(this.mod,s,o));let l=ht(this.mod,s,o);return he(this.mod),l}startPendingQuery(t,e){let[n,s,o]=pe(this.mod,"duckdb_web_pending_query_start",["number","string"],[t,e]);if(n!==0)throw new Error(ie(this.mod,s,o));if(s==0)return null;let l=ht(this.mod,s,o);return he(this.mod),l}pollPendingQuery(t){let[e,n,s]=pe(this.mod,"duckdb_web_pending_query_poll",["number"],[t]);if(e!==0)throw new Error(ie(this.mod,n,s));if(n==0)return null;let o=ht(this.mod,n,s);return he(this.mod),o}cancelPendingQuery(t){return this.mod.ccall("duckdb_web_pending_query_cancel","boolean",["number"],[t])}fetchQueryResults(t){let[e,n,s]=pe(this.mod,"duckdb_web_query_fetch_results",["number"],[t]);if(e!==0)throw new Error(ie(this.mod,n,s));let o=ht(this.mod,n,s);return he(this.mod),o}getTableNames(t,e){let[n,s,o]=pe(this.mod,"duckdb_web_get_tablenames",["number","string"],[t,e]);if(n!==0)throw new Error(ie(this.mod,s,o));let l=ie(this.mod,s,o);return he(this.mod),JSON.parse(l)}createScalarFunction(t,e,n,s){let o={functionId:this._nextUDFId,name:e,returnType:Xt(n)},l={functionId:o.functionId,connectionId:t,name:e,returnType:n,func:s};this._nextUDFId+=1;let[m,b,T]=pe(this.mod,"duckdb_web_udf_scalar_create",["number","string"],[t,JSON.stringify(o)]);if(m!==0)throw new Error(ie(this.mod,b,T));if(he(this.mod),globalThis.DUCKDB_RUNTIME._udfFunctions=(globalThis.DUCKDB_RUNTIME._udfFunctions||new Map).set(l.functionId,l),this.pthread)for(let y of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])y.postMessage({cmd:"registerUDFFunction",udf:l})}createPrepared(t,e){let[n,s,o]=pe(this.mod,"duckdb_web_prepared_create",["number","string"],[t,e]);if(n!==0)throw new Error(ie(this.mod,s,o));return he(this.mod),s}closePrepared(t,e){let[n,s,o]=pe(this.mod,"duckdb_web_prepared_close",["number","number"],[t,e]);if(n!==0)throw new Error(ie(this.mod,s,o));he(this.mod)}runPrepared(t,e,n){let[s,o,l]=pe(this.mod,"duckdb_web_prepared_run",["number","number","string"],[t,e,JSON.stringify(n)]);if(s!==0)throw new Error(ie(this.mod,o,l));let m=ht(this.mod,o,l);return he(this.mod),m}sendPrepared(t,e,n){let[s,o,l]=pe(this.mod,"duckdb_web_prepared_send",["number","number","string"],[t,e,JSON.stringify(n)]);if(s!==0)throw new Error(ie(this.mod,o,l));let m=ht(this.mod,o,l);return he(this.mod),m}insertArrowFromIPCStream(t,e,n){if(e.length==0)return;let s=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(s,s+e.length).set(e);let l=n?JSON.stringify(n):"",[m,b,T]=pe(this.mod,"duckdb_web_insert_arrow_from_ipc_stream",["number","number","number","string"],[t,s,e.length,l]);if(m!==0)throw new Error(ie(this.mod,b,T))}insertCSVFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let T in n.columns)n.columnsFlat.push(un(T,n.columns[T]))}let s={...n};s.columns=s.columnsFlat,delete s.columnsFlat;let o=JSON.stringify(s),[l,m,b]=pe(this.mod,"duckdb_web_insert_csv_from_path",["number","string","string"],[t,e,o]);if(l!==0)throw new Error(ie(this.mod,m,b))}insertJSONFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let T in n.columns)n.columnsFlat.push(un(T,n.columns[T]))}let s={...n};s.columns=s.columnsFlat,delete s.columnsFlat;let o=JSON.stringify(s),[l,m,b]=pe(this.mod,"duckdb_web_insert_json_from_path",["number","string","string"],[t,e,o]);if(l!==0)throw new Error(ie(this.mod,m,b))}globFiles(t){let[e,n,s]=pe(this.mod,"duckdb_web_fs_glob_file_infos",["string"],[t]);if(e!==0)throw new Error(ie(this.mod,n,s));let o=ie(this.mod,n,s);he(this.mod);let l=JSON.parse(o);return l??[]}registerFileURL(t,e,n,s=!1){e===void 0&&(e=t);let[o,l,m]=pe(this.mod,"duckdb_web_fs_register_file_url",["string","string"],[t,e,n,s]);if(o!==0)throw new Error(ie(this.mod,l,m));he(this.mod)}registerFileText(t,e){let n=e_.encode(e);this.registerFileBuffer(t,n)}registerFileBuffer(t,e){let n=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(n,n+e.length).set(e);let[o,l,m]=pe(this.mod,"duckdb_web_fs_register_file_buffer",["string","number","number"],[t,n,e.length]);if(o!==0)throw new Error(ie(this.mod,l,m));he(this.mod)}registerFileHandle(t,e,n,s){let[o,l,m]=pe(this.mod,"duckdb_web_fs_register_file_url",["string","string","number","boolean"],[t,t,n,s]);if(o!==0)throw new Error(ie(this.mod,l,m));if(he(this.mod),globalThis.DUCKDB_RUNTIME._files=(globalThis.DUCKDB_RUNTIME._files||new Map).set(t,e),this.pthread){for(let b of this.pthread.runningWorkers)b.postMessage({cmd:"registerFileHandle",fileName:t,fileHandle:e});for(let b of this.pthread.unusedWorkers)b.postMessage({cmd:"dropFileHandle",fileName:t})}}dropFile(t){let[e,n,s]=pe(this.mod,"duckdb_web_fs_drop_file",["string"],[t]);if(e!==0)throw new Error(ie(this.mod,n,s));he(this.mod)}dropFiles(){let[t,e,n]=pe(this.mod,"duckdb_web_fs_drop_files",[],[]);if(t!==0)throw new Error(ie(this.mod,e,n));he(this.mod)}flushFiles(){this.mod.ccall("duckdb_web_flush_files",null,[],[])}copyFileToPath(t,e){let[n,s,o]=pe(this.mod,"duckdb_web_copy_file_to_path",["string","string"],[t,e]);if(n!==0)throw new Error(ie(this.mod,s,o));he(this.mod)}copyFileToBuffer(t){let[e,n,s]=pe(this.mod,"duckdb_web_copy_file_to_buffer",["string"],[t]);if(e!==0)throw new Error(ie(this.mod,n,s));let o=this.mod.HEAPU8.subarray(n,n+s),l=new Uint8Array(o.length);return l.set(o),he(this.mod),l}collectFileStatistics(t,e){let[n,s,o]=pe(this.mod,"duckdb_web_collect_file_stats",["string","boolean"],[t,e]);if(n!==0)throw new Error(ie(this.mod,s,o))}exportFileStatistics(t){let[e,n,s]=pe(this.mod,"duckdb_web_export_file_stats",["string"],[t]);if(e!==0)throw new Error(ie(this.mod,n,s));return new Tr(this.mod.HEAPU8.subarray(n,n+s))}};var Nu=(s=>(s[s.UNDEFINED=0]="UNDEFINED",s[s.AUTOMATIC=1]="AUTOMATIC",s[s.READ_ONLY=2]="READ_ONLY",s[s.READ_WRITE=3]="READ_WRITE",s))(Nu||{});var Bu=(e=>(e.ROW_ARRAY="row-array",e.COLUMN_OBJECT="column-object",e))(Bu||{});var Uu=(o=>(o[o.NONE=0]="NONE",o[o.DEBUG=1]="DEBUG",o[o.INFO=2]="INFO",o[o.WARNING=3]="WARNING",o[o.ERROR=4]="ERROR",o))(Uu||{}),Hu=(l=>(l[l.NONE=0]="NONE",l[l.CONNECT=1]="CONNECT",l[l.DISCONNECT=2]="DISCONNECT",l[l.OPEN=3]="OPEN",l[l.QUERY=4]="QUERY",l[l.INSTANTIATE=5]="INSTANTIATE",l))(Hu||{}),qu=(l=>(l[l.NONE=0]="NONE",l[l.OK=1]="OK",l[l.ERROR=2]="ERROR",l[l.START=3]="START",l[l.RUN=4]="RUN",l[l.CAPTURE=5]="CAPTURE",l))(qu||{}),Wu=(o=>(o[o.NONE=0]="NONE",o[o.WEB_WORKER=1]="WEB_WORKER",o[o.NODE_WORKER=2]="NODE_WORKER",o[o.BINDINGS=3]="BINDINGS",o[o.ASYNC_DUCKDB=4]="ASYNC_DUCKDB",o))(Wu||{}),Ca=class{log(t){}},Pa=class{constructor(t=2){this.level=t}log(t){t.level>=this.level&&console.log(t)}};function t_(r){switch(r){case 0:return"NONE";case 1:return"DEBUG";case 2:return"INFO";case 3:return"WARNING";case 4:return"ERROR";default:return"?"}}function r_(r){switch(r){case 0:return"NONE";case 1:return"OK";case 2:return"ERROR";case 3:return"START";case 4:return"RUN";case 5:return"CAPTURE";default:return"?"}}function n_(r){switch(r){case 1:return"CONNECT";case 2:return"DISCONNECT";case 5:return"INSTANTIATE";case 3:return"OPEN";case 4:return"QUERY";default:return"?"}}function i_(r){switch(r){case 0:return"NONE";case 1:return"WEB WORKER";case 2:return"NODE WORKER";case 3:return"DUCKDB BINDINGS";case 4:return"DUCKDB";default:return"?"}}var ju=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),$u=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11]));var Gu=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11]));var zu=()=>(async r=>{try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(r)}catch{return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]));var cn={name:"@duckdb/duckdb-wasm",version:"1.11.0",description:"DuckDB powered by WebAssembly",license:"MIT",repository:{type:"git",url:"https://github.com/duckdb/duckdb-wasm.git"},keywords:["sql","duckdb","relational","database","data","query","wasm","analytics","olap","arrow","parquet","json","csv"],dependencies:{"apache-arrow":"^12.0.0"},devDependencies:{"@types/emscripten":"^1.39.6","@types/jasmine":"^4.3.1","@typescript-eslint/eslint-plugin":"^5.61.0","@typescript-eslint/parser":"^5.49.0",esbuild:"^0.18.13",eslint:"^8.35.0","eslint-plugin-jasmine":"^4.1.3","eslint-plugin-react":"^7.32.2","fast-glob":"^3.2.12",jasmine:"^5.0.2","jasmine-core":"^5.0.0","jasmine-spec-reporter":"^7.0.0","js-sha256":"^0.9.0",karma:"^6.4.2","karma-chrome-launcher":"^3.2.0","karma-coverage":"^2.2.0","karma-firefox-launcher":"^2.1.2","karma-jasmine":"^5.1.0","karma-jasmine-html-reporter":"^2.0.0","karma-sourcemap-loader":"^0.3.8","karma-spec-reporter":"^0.0.36","make-dir":"^3.1.0",nyc:"^15.1.0",prettier:"^2.8.4",puppeteer:"^20.8.0",rimraf:"^4.3.0",s3rver:"^3.7.1",typedoc:"^0.24.8",typescript:"^4.8.4","wasm-feature-detect":"^1.5.1","web-worker":"^1.2.0"},scripts:{"build:debug":"node bundle.mjs debug && tsc --emitDeclarationOnly","build:release":"node bundle.mjs release && tsc --emitDeclarationOnly",docs:"typedoc",report:"node ./coverage.mjs","test:node":"node --enable-source-maps ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:node:debug":"node --inspect-brk --enable-source-maps ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:node:coverage":"nyc -r json --report-dir ./coverage/node node ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:firefox":"karma start ./karma/tests-firefox.cjs","test:chrome":"karma start ./karma/tests-chrome.cjs","test:chrome:eh":"karma start ./karma/tests-chrome-eh.cjs","test:chrome:coverage":"karma start ./karma/tests-chrome-coverage.cjs","test:browser":"karma start ./karma/tests-all.cjs","test:browser:debug":"karma start ./karma/tests-debug.cjs",test:"npm run test:chrome && npm run test:node","test:coverage":"npm run test:chrome:coverage && npm run test:node:coverage && npm run report",lint:"eslint src test"},files:["dist","!dist/types/test"],main:"dist/duckdb-browser.cjs",module:"dist/duckdb-browser.mjs",types:"dist/duckdb-browser.d.ts",jsdelivr:"dist/duckdb-browser.cjs",unpkg:"dist/duckdb-browser.mjs",sideEffects:!1,browser:{fs:!1,path:!1,perf_hooks:!1,os:!1,worker_threads:!1},exports:{"./dist/duckdb-mvp.wasm":"./dist/duckdb-mvp.wasm","./dist/duckdb-eh.wasm":"./dist/duckdb-eh.wasm","./dist/duckdb-coi.wasm":"./dist/duckdb-coi.wasm","./dist/duckdb-browser":"./dist/duckdb-browser.mjs","./dist/duckdb-browser.cjs":"./dist/duckdb-browser.cjs","./dist/duckdb-browser.mjs":"./dist/duckdb-browser.mjs","./dist/duckdb-browser-blocking":"./dist/duckdb-browser-blocking.mjs","./dist/duckdb-browser-blocking.mjs":"./dist/duckdb-browser-blocking.mjs","./dist/duckdb-browser-blocking.cjs":"./dist/duckdb-browser-blocking.cjs","./dist/duckdb-browser-coi.pthread.worker.js":"./dist/duckdb-browser-coi.pthread.worker.js","./dist/duckdb-browser-coi.worker.js":"./dist/duckdb-browser-coi.worker.js","./dist/duckdb-browser-eh.worker.js":"./dist/duckdb-browser-eh.worker.js","./dist/duckdb-browser-mvp.worker.js":"./dist/duckdb-browser-mvp.worker.js","./dist/duckdb-node":"./dist/duckdb-node.cjs","./dist/duckdb-node.cjs":"./dist/duckdb-node.cjs","./dist/duckdb-node-blocking":"./dist/duckdb-node-blocking.cjs","./dist/duckdb-node-blocking.cjs":"./dist/duckdb-node-blocking.cjs","./dist/duckdb-node-eh.worker.cjs":"./dist/duckdb-node-eh.worker.cjs","./dist/duckdb-node-mvp.worker.cjs":"./dist/duckdb-node-mvp.worker.cjs","./blocking":{browser:{types:"./dist/duckdb-browser-blocking.d.ts",import:"./dist/duckdb-browser-blocking.mjs",require:"./dist/duckdb-browser-blocking.cjs"},node:{types:"./dist/duckdb-node-blocking.d.ts",require:"./dist/duckdb-node-blocking.cjs",import:"./dist/duckdb-node-blocking.cjs"},types:"./dist/duckdb-browser-blocking.d.ts",import:"./dist/duckdb-browser-blocking.mjs",require:"./dist/duckdb-browser-blocking.cjs"},".":{browser:{types:"./dist/duckdb-browser.d.ts",import:"./dist/duckdb-browser.mjs",require:"./dist/duckdb-browser.cjs"},node:{types:"./dist/duckdb-node.d.ts",import:"./dist/duckdb-node.cjs",require:"./dist/duckdb-node.cjs"},types:"./dist/duckdb-browser.d.ts",import:"./dist/duckdb-browser.mjs",require:"./dist/duckdb-browser.cjs"}}};var Ma=cn.name,Oa=cn.version,Fa=cn.version.split("."),o_=Fa[0],u_=Fa[1],c_=Fa[2];var Ua=()=>typeof navigator>"u",Ku=()=>Ua()?"node":navigator.userAgent,l_=()=>Ku().includes("Firefox"),f_=()=>/^((?!chrome|android).)*safari/i.test(Ku());function __(){let r=`https://cdn.jsdelivr.net/npm/${Ma}@${Oa}/dist/`;return{mvp:{mainModule:`${r}duckdb-mvp.wasm`,mainWorker:`${r}duckdb-browser-mvp.worker.js`},eh:{mainModule:`${r}duckdb-eh.wasm`,mainWorker:`${r}duckdb-browser-eh.worker.js`}}}var Ia=null,xa=null,La=null,Na=null,Ba=null;async function ln(){return Ia==null&&(Ia=typeof BigInt64Array<"u"),xa==null&&(xa=await $u()),La==null&&(La=await zu()),Na==null&&(Na=await Gu()),Ba==null&&(Ba=await ju()),{bigInt64Array:Ia,crossOriginIsolated:Ua()||globalThis.crossOriginIsolated||!1,wasmExceptions:xa,wasmSIMD:Na,wasmThreads:La,wasmBulkMemory:Ba}}async function d_(r){let t=await ln();if(t.wasmExceptions){if(t.wasmSIMD&&t.wasmThreads&&t.crossOriginIsolated&&r.coi)return{mainModule:r.coi.mainModule,mainWorker:r.coi.mainWorker,pthreadWorker:r.coi.pthreadWorker};if(r.eh)return{mainModule:r.eh.mainModule,mainWorker:r.eh.mainWorker,pthreadWorker:null}}return{mainModule:r.mvp.mainModule,mainWorker:r.mvp.mainWorker,pthreadWorker:null}}var Pe=pt(require("fs"));var Nf=pt(Lf());var ve={_files:new Map,_filesById:new Map,_fileInfoCache:new Map,_udfFunctions:new Map,resolveFileInfo(r,t){try{let e=ve._fileInfoCache.get(t),[n,s,o]=pe(r,"duckdb_web_fs_get_file_info_by_id",["number","number"],[t,(e==null?void 0:e.cacheEpoch)||0]);if(n!==0)return ye(r,ie(r,s,o)),null;if(o===0)return he(r),e;let l=ie(r,s,o);he(r);let m=JSON.parse(l);return m==null?null:(ve._fileInfoCache.set(t,m),m)}catch(e){return console.log(e),ye(r,e.toString()),null}},testPlatformFeature:(r,t)=>{switch(t){case 1:return typeof BigInt64Array<"u";default:return console.warn(`test for unknown feature: ${t}`),!1}},getDefaultDataProtocol(r){return 1},openFile(r,t,e){var n,s;try{ve._fileInfoCache.delete(t);let o=ve.resolveFileInfo(r,t);switch(o==null?void 0:o.dataProtocol){case 1:{let l=(n=ve._files)==null?void 0:n.get(o.dataUrl);l==null&&(l=Pe.default.openSync(o.dataUrl,Pe.default.constants.O_CREAT|Pe.default.constants.O_RDWR,Pe.default.constants.S_IRUSR|Pe.default.constants.S_IWUSR),(s=ve._filesById)==null||s.set(o.fileId,l));let m=Pe.default.fstatSync(l).size,b=r._malloc(2*8);return r.HEAPF64[(b>>3)+0]=+m,r.HEAPF64[(b>>3)+1]=0,b}case 2:case 3:case 4:case 5:ye(r,"Unsupported data protocol")}}catch(o){console.log(o),ye(r,o.toString())}return 0},syncFile:(r,t)=>{},closeFile:(r,t)=>{try{let e=ve._fileInfoCache.get(t);switch(ve._fileInfoCache.delete(t),e==null?void 0:e.dataProtocol){case 1:{let n=ve._filesById.get(t);ve._filesById.delete(t),n!=null&&Pe.default.closeSync(n);break}case 2:case 3:case 4:case 5:break}}catch(e){console.log(e),ye(r,e.toString())}return 0},truncateFile:(r,t,e)=>{try{let n=ve.resolveFileInfo(r,t);switch(n==null?void 0:n.dataProtocol){case 1:{Pe.default.truncateSync(n.dataUrl,e);break}case 2:case 3:case 4:case 5:ye(r,"Unsupported data protocol")}}catch(n){console.log(n),ye(r,n.toString())}return 0},readFile:(r,t,e,n,s)=>{try{let o=ve.resolveFileInfo(r,t);switch(o==null?void 0:o.dataProtocol){case 1:{let l=ve._filesById.get(t);return l==null?(ye(r,`File ${t} is missing a file descriptor`),0):Pe.default.readSync(l,r.HEAPU8,e,n,s)}case 2:case 3:case 4:case 5:ye(r,"Unsupported data protocol")}}catch(o){console.log(o),ye(r,o.toString())}return 0},writeFile:(r,t,e,n,s)=>{try{let o=ve.resolveFileInfo(r,t);switch(o==null?void 0:o.dataProtocol){case 1:{let l=ve._filesById.get(t);if(l==null)return ye(r,`File ${t} is missing a file descriptor`),0;let m=r.HEAPU8.subarray(e,e+n);return Pe.default.writeSync(l,m,0,m.length,s)}case 2:case 3:case 4:case 5:ye(r,"Unsupported data protocol")}}catch(o){console.log(o),ye(r,o.toString())}return 0},getLastFileModificationTime:(r,t)=>{try{let e=ve.resolveFileInfo(r,t);switch(e==null?void 0:e.dataProtocol){case 1:{let n=ve._filesById.get(t);return n==null?(ye(r,`File ${t} is missing a file descriptor`),0):Pe.default.fstatSync(n).mtime.getTime()}case 2:case 3:case 4:case 5:ye(r,"Unsupported data protocol")}}catch(e){console.log(e),ye(r,e.toString())}return 0},checkDirectory:(r,t,e)=>{try{let n=mt(r.HEAPU8.subarray(t,t+e));return Pe.default.existsSync(n)}catch(n){return console.log(n),ye(r,n.toString()),!1}},createDirectory:(r,t,e)=>{try{let n=mt(r.HEAPU8.subarray(t,t+e));return Pe.default.mkdirSync(n)}catch(n){return console.log(n),ye(r,n.toString()),0}},removeDirectory:(r,t,e)=>{try{let n=mt(r.HEAPU8.subarray(t,t+e));return Pe.default.rmdirSync(n)}catch(n){return console.log(n),ye(r,n.toString()),0}},listDirectoryEntries:(r,t,e)=>(ye(r,"Not Implemented"),!1),glob:(r,t,e)=>{try{let n=ie(r,t,e),s=Nf.sync([n],{dot:!0});for(let o of s)r.ccall("duckdb_web_fs_glob_add_path",null,["string"],[o])}catch(n){return console.log(n),ye(r,n.toString()),0}},moveFile:(r,t,e,n,s)=>{var b,T;let o=ie(r,t,e),l=ie(r,n,s),m=(b=ve._files)==null?void 0:b.get(o);m!==void 0&&(ve._files.delete(m),ve._files.set(l,m));for(let[y,P]of((T=ve._fileInfoCache)==null?void 0:T.entries())||[])if(P.dataUrl==o){ve._fileInfoCache.delete(y);break}return!0},checkFile:(r,t,e)=>{try{let n=mt(r.HEAPU8.subarray(t,t+e));return Pe.default.existsSync(n)}catch(n){return console.log(n),ye(r,n.toString()),!1}},removeFile:(r,t,e)=>{try{let n=mt(r.HEAPU8.subarray(t,t+e));return Pe.default.rmSync(n)}catch(n){return console.log(n),ye(r,n.toString()),0}},callScalarUDF:(r,t,e,n,s,o,l)=>{an(ve,r,t,e,n,s,o,l)}};var Hf=pt(Eu());var Bf=pt(Eu());var Uf=pt(require("fs")),or=class extends Cr{constructor(e,n,s,o){super(e,n);this.mainModulePath=s,this.pthreadWorkerPath=o}locateFile(e,n){if(e.endsWith(".wasm"))return this.mainModulePath;if(e.endsWith(".worker.js")){if(!this.pthreadWorkerPath)throw new Error("Missing DuckDB worker path!");return this.pthreadWorkerPath}throw new Error(`WASM instantiation requested unexpected file: prefix=${n} path=${e}`)}instantiateWasm(e,n){globalThis.DUCKDB_RUNTIME={};for(let o of Object.getOwnPropertyNames(this._runtime))o!="constructor"&&(globalThis.DUCKDB_RUNTIME[o]=Object.getOwnPropertyDescriptor(this._runtime,o).value);let s=Uf.default.readFileSync(this.mainModulePath);return WebAssembly.instantiate(s,e).then(o=>{n(o.instance,o.module)}),[]}instantiateImpl(e){return(0,Bf.default)({...e,instantiateWasm:this.instantiateWasm.bind(this)})}};var Hn=class extends or{constructor(t,e,n,s=null){super(t,e,n,s)}instantiateImpl(t){return(0,Hf.default)({...t,instantiateWasm:this.instantiateWasm.bind(this),locateFile:this.locateFile.bind(this)})}};var Wf=pt(qf());var Wn=class extends or{constructor(t,e,n,s=null){super(t,e,n,s)}instantiateImpl(t){return(0,Wf.default)({...t,instantiateWasm:this.instantiateWasm.bind(this),locateFile:this.locateFile.bind(this)})}};async function hh(r,t,e){return(await ln()).wasmExceptions&&r.eh?new Wn(t,e,r.eh.mainModule):new Hn(t,e,r.mvp.mainModule)}0&&(module.exports={ConsoleLogger,DEFAULT_RUNTIME,DuckDBAccessMode,DuckDBBindingsBase,DuckDBConnection,DuckDBDataProtocol,DuckDBFeature,FileFlags,FileStatistics,JSONTableShape,LogEvent,LogLevel,LogOrigin,LogTopic,NODE_RUNTIME,PACKAGE_NAME,PACKAGE_VERSION,PACKAGE_VERSION_MAJOR,PACKAGE_VERSION_MINOR,PACKAGE_VERSION_PATCH,PreparedStatement,ResultStreamIterator,StatusCode,VoidLogger,callSRet,copyBuffer,createDuckDB,decodeText,dropResponseBuffers,failWith,getJsDelivrBundles,getLogEventLabel,getLogLevelLabel,getLogOriginLabel,getLogTopicLabel,getPlatformFeatures,isFirefox,isNode,isSafari,readString,selectBundle});
/*! Bundled license information:

is-extglob/index.js:
  (*!
   * is-extglob <https://github.com/jonschlinkert/is-extglob>
   *
   * Copyright (c) 2014-2016, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

is-glob/index.js:
  (*!
   * is-glob <https://github.com/jonschlinkert/is-glob>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

is-number/index.js:
  (*!
   * is-number <https://github.com/jonschlinkert/is-number>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Released under the MIT License.
   *)

to-regex-range/index.js:
  (*!
   * to-regex-range <https://github.com/micromatch/to-regex-range>
   *
   * Copyright (c) 2015-present, Jon Schlinkert.
   * Released under the MIT License.
   *)

fill-range/index.js:
  (*!
   * fill-range <https://github.com/jonschlinkert/fill-range>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

queue-microtask/index.js:
  (*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

run-parallel/index.js:
  (*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvdXRpbHMvYXJyYXkuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvdXRpbHMvZXJybm8uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvdXRpbHMvZnMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvdXRpbHMvcGF0aC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvaXMtZXh0Z2xvYi9pbmRleC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvaXMtZ2xvYi9pbmRleC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZ2xvYi1wYXJlbnQvaW5kZXguanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JyYWNlcy9saWIvdXRpbHMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JyYWNlcy9saWIvc3RyaW5naWZ5LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9pcy1udW1iZXIvaW5kZXguanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RvLXJlZ2V4LXJhbmdlL2luZGV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9maWxsLXJhbmdlL2luZGV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9icmFjZXMvbGliL2NvbXBpbGUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JyYWNlcy9saWIvZXhwYW5kLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9icmFjZXMvbGliL2NvbnN0YW50cy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYnJhY2VzL2xpYi9wYXJzZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYnJhY2VzL2luZGV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNvbWF0Y2gvbGliL2NvbnN0YW50cy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljb21hdGNoL2xpYi91dGlscy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljb21hdGNoL2xpYi9zY2FuLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNvbWF0Y2gvbGliL3BhcnNlLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9waWNvbWF0Y2gvbGliL3BpY29tYXRjaC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcGljb21hdGNoL2luZGV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9taWNyb21hdGNoL2luZGV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L3V0aWxzL3BhdHRlcm4uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21lcmdlMi9pbmRleC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC91dGlscy9zdHJlYW0uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvdXRpbHMvc3RyaW5nLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L3V0aWxzL2luZGV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L21hbmFnZXJzL3Rhc2tzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L21hbmFnZXJzL3BhdHRlcm5zLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy5zdGF0L291dC9wcm92aWRlcnMvYXN5bmMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bub2RlbGliL2ZzLnN0YXQvb3V0L3Byb3ZpZGVycy9zeW5jLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy5zdGF0L291dC9hZGFwdGVycy9mcy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMuc3RhdC9vdXQvc2V0dGluZ3MuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bub2RlbGliL2ZzLnN0YXQvb3V0L2luZGV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9xdWV1ZS1taWNyb3Rhc2svaW5kZXguanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3J1bi1wYXJhbGxlbC9pbmRleC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMuc2NhbmRpci9vdXQvY29uc3RhbnRzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy5zY2FuZGlyL291dC91dGlscy9mcy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMuc2NhbmRpci9vdXQvdXRpbHMvaW5kZXguanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bub2RlbGliL2ZzLnNjYW5kaXIvb3V0L3Byb3ZpZGVycy9jb21tb24uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bub2RlbGliL2ZzLnNjYW5kaXIvb3V0L3Byb3ZpZGVycy9hc3luYy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMuc2NhbmRpci9vdXQvcHJvdmlkZXJzL3N5bmMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bub2RlbGliL2ZzLnNjYW5kaXIvb3V0L2FkYXB0ZXJzL2ZzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy5zY2FuZGlyL291dC9zZXR0aW5ncy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMuc2NhbmRpci9vdXQvaW5kZXguanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JldXNpZnkvcmV1c2lmeS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdHEvcXVldWUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bub2RlbGliL2ZzLndhbGsvb3V0L3JlYWRlcnMvY29tbW9uLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy53YWxrL291dC9yZWFkZXJzL3JlYWRlci5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMud2Fsay9vdXQvcmVhZGVycy9hc3luYy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMud2Fsay9vdXQvcHJvdmlkZXJzL2FzeW5jLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy53YWxrL291dC9wcm92aWRlcnMvc3RyZWFtLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy53YWxrL291dC9yZWFkZXJzL3N5bmMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bub2RlbGliL2ZzLndhbGsvb3V0L3Byb3ZpZGVycy9zeW5jLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy53YWxrL291dC9zZXR0aW5ncy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQG5vZGVsaWIvZnMud2Fsay9vdXQvaW5kZXguanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvcmVhZGVycy9yZWFkZXIuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvcmVhZGVycy9zdHJlYW0uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvcmVhZGVycy9hc3luYy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC9wcm92aWRlcnMvbWF0Y2hlcnMvbWF0Y2hlci5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC9wcm92aWRlcnMvbWF0Y2hlcnMvcGFydGlhbC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC9wcm92aWRlcnMvZmlsdGVycy9kZWVwLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L3Byb3ZpZGVycy9maWx0ZXJzL2VudHJ5LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L3Byb3ZpZGVycy9maWx0ZXJzL2Vycm9yLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L3Byb3ZpZGVycy90cmFuc2Zvcm1lcnMvZW50cnkuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtZ2xvYi9vdXQvcHJvdmlkZXJzL3Byb3ZpZGVyLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L3Byb3ZpZGVycy9hc3luYy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC9wcm92aWRlcnMvc3RyZWFtLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LWdsb2Ivb3V0L3JlYWRlcnMvc3luYy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC9wcm92aWRlcnMvc3luYy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC9zZXR0aW5ncy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC1nbG9iL291dC9pbmRleC5qcyIsICIuLi9zcmMvYmluZGluZ3MvZHVja2RiLW12cC5qcyIsICIuLi9zcmMvYmluZGluZ3MvZHVja2RiLWVoLmpzIiwgIi4uL3NyYy90YXJnZXRzL2R1Y2tkYi1ub2RlLWJsb2NraW5nLnRzIiwgIi4uL3NyYy9iaW5kaW5ncy9jb25uZWN0aW9uLnRzIiwgIi4uL3NyYy9zdGF0dXMudHMiLCAiLi4vc3JjL2JpbmRpbmdzL3VkZl9ydW50aW1lLnRzIiwgIi4uL3NyYy9iaW5kaW5ncy9ydW50aW1lLnRzIiwgIi4uL3NyYy9iaW5kaW5ncy9maWxlX3N0YXRzLnRzIiwgIi4uL3NyYy9qc29uX3R5cGVkZWYudHMiLCAiLi4vc3JjL2JpbmRpbmdzL2JpbmRpbmdzX2Jhc2UudHMiLCAiLi4vc3JjL2JpbmRpbmdzL2NvbmZpZy50cyIsICIuLi9zcmMvYmluZGluZ3MvaW5zZXJ0X29wdGlvbnMudHMiLCAiLi4vc3JjL2xvZy50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvd2FzbS1mZWF0dXJlLWRldGVjdC9kaXN0L2VzbS9pbmRleC5qcyIsICIuLi9wYWNrYWdlLmpzb24iLCAiLi4vc3JjL3ZlcnNpb24udHMiLCAiLi4vc3JjL3BsYXRmb3JtLnRzIiwgIi4uL3NyYy9iaW5kaW5ncy9ydW50aW1lX25vZGUudHMiLCAiLi4vc3JjL2JpbmRpbmdzL2JpbmRpbmdzX25vZGVfbXZwLnRzIiwgIi4uL3NyYy9iaW5kaW5ncy9iaW5kaW5nc19ub2RlX2Jhc2UudHMiLCAiLi4vc3JjL2JpbmRpbmdzL2JpbmRpbmdzX25vZGVfZWgudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc3BsaXRXaGVuID0gZXhwb3J0cy5mbGF0dGVuID0gdm9pZCAwO1xyXG5mdW5jdGlvbiBmbGF0dGVuKGl0ZW1zKSB7XHJcbiAgICByZXR1cm4gaXRlbXMucmVkdWNlKChjb2xsZWN0aW9uLCBpdGVtKSA9PiBbXS5jb25jYXQoY29sbGVjdGlvbiwgaXRlbSksIFtdKTtcclxufVxyXG5leHBvcnRzLmZsYXR0ZW4gPSBmbGF0dGVuO1xyXG5mdW5jdGlvbiBzcGxpdFdoZW4oaXRlbXMsIHByZWRpY2F0ZSkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gW1tdXTtcclxuICAgIGxldCBncm91cEluZGV4ID0gMDtcclxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xyXG4gICAgICAgIGlmIChwcmVkaWNhdGUoaXRlbSkpIHtcclxuICAgICAgICAgICAgZ3JvdXBJbmRleCsrO1xyXG4gICAgICAgICAgICByZXN1bHRbZ3JvdXBJbmRleF0gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFtncm91cEluZGV4XS5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuZXhwb3J0cy5zcGxpdFdoZW4gPSBzcGxpdFdoZW47XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmlzRW5vZW50Q29kZUVycm9yID0gdm9pZCAwO1xyXG5mdW5jdGlvbiBpc0Vub2VudENvZGVFcnJvcihlcnJvcikge1xyXG4gICAgcmV0dXJuIGVycm9yLmNvZGUgPT09ICdFTk9FTlQnO1xyXG59XHJcbmV4cG9ydHMuaXNFbm9lbnRDb2RlRXJyb3IgPSBpc0Vub2VudENvZGVFcnJvcjtcclxuIiwgIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuY3JlYXRlRGlyZW50RnJvbVN0YXRzID0gdm9pZCAwO1xyXG5jbGFzcyBEaXJlbnRGcm9tU3RhdHMge1xyXG4gICAgY29uc3RydWN0b3IobmFtZSwgc3RhdHMpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuaXNCbG9ja0RldmljZSA9IHN0YXRzLmlzQmxvY2tEZXZpY2UuYmluZChzdGF0cyk7XHJcbiAgICAgICAgdGhpcy5pc0NoYXJhY3RlckRldmljZSA9IHN0YXRzLmlzQ2hhcmFjdGVyRGV2aWNlLmJpbmQoc3RhdHMpO1xyXG4gICAgICAgIHRoaXMuaXNEaXJlY3RvcnkgPSBzdGF0cy5pc0RpcmVjdG9yeS5iaW5kKHN0YXRzKTtcclxuICAgICAgICB0aGlzLmlzRklGTyA9IHN0YXRzLmlzRklGTy5iaW5kKHN0YXRzKTtcclxuICAgICAgICB0aGlzLmlzRmlsZSA9IHN0YXRzLmlzRmlsZS5iaW5kKHN0YXRzKTtcclxuICAgICAgICB0aGlzLmlzU29ja2V0ID0gc3RhdHMuaXNTb2NrZXQuYmluZChzdGF0cyk7XHJcbiAgICAgICAgdGhpcy5pc1N5bWJvbGljTGluayA9IHN0YXRzLmlzU3ltYm9saWNMaW5rLmJpbmQoc3RhdHMpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZURpcmVudEZyb21TdGF0cyhuYW1lLCBzdGF0cykge1xyXG4gICAgcmV0dXJuIG5ldyBEaXJlbnRGcm9tU3RhdHMobmFtZSwgc3RhdHMpO1xyXG59XHJcbmV4cG9ydHMuY3JlYXRlRGlyZW50RnJvbVN0YXRzID0gY3JlYXRlRGlyZW50RnJvbVN0YXRzO1xyXG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5yZW1vdmVMZWFkaW5nRG90U2VnbWVudCA9IGV4cG9ydHMuZXNjYXBlID0gZXhwb3J0cy5tYWtlQWJzb2x1dGUgPSBleHBvcnRzLnVuaXhpZnkgPSB2b2lkIDA7XHJcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcclxuY29uc3QgTEVBRElOR19ET1RfU0VHTUVOVF9DSEFSQUNURVJTX0NPVU5UID0gMjsgLy8gLi8gb3IgLlxcXFxcclxuY29uc3QgVU5FU0NBUEVEX0dMT0JfU1lNQk9MU19SRSA9IC8oXFxcXD8pKFsoKSo/W1xcXXt8fV18XiF8WyErQF0oPz1cXCgpKS9nO1xyXG4vKipcclxuICogRGVzaWduZWQgdG8gd29yayBvbmx5IHdpdGggc2ltcGxlIHBhdGhzOiBgZGlyXFxcXGZpbGVgLlxyXG4gKi9cclxuZnVuY3Rpb24gdW5peGlmeShmaWxlcGF0aCkge1xyXG4gICAgcmV0dXJuIGZpbGVwYXRoLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcclxufVxyXG5leHBvcnRzLnVuaXhpZnkgPSB1bml4aWZ5O1xyXG5mdW5jdGlvbiBtYWtlQWJzb2x1dGUoY3dkLCBmaWxlcGF0aCkge1xyXG4gICAgcmV0dXJuIHBhdGgucmVzb2x2ZShjd2QsIGZpbGVwYXRoKTtcclxufVxyXG5leHBvcnRzLm1ha2VBYnNvbHV0ZSA9IG1ha2VBYnNvbHV0ZTtcclxuZnVuY3Rpb24gZXNjYXBlKHBhdHRlcm4pIHtcclxuICAgIHJldHVybiBwYXR0ZXJuLnJlcGxhY2UoVU5FU0NBUEVEX0dMT0JfU1lNQk9MU19SRSwgJ1xcXFwkMicpO1xyXG59XHJcbmV4cG9ydHMuZXNjYXBlID0gZXNjYXBlO1xyXG5mdW5jdGlvbiByZW1vdmVMZWFkaW5nRG90U2VnbWVudChlbnRyeSkge1xyXG4gICAgLy8gV2UgZG8gbm90IHVzZSBgc3RhcnRzV2l0aGAgYmVjYXVzZSB0aGlzIGlzIDEweCBzbG93ZXIgdGhhbiBjdXJyZW50IGltcGxlbWVudGF0aW9uIGZvciBzb21lIGNhc2VzLlxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItc3RyaW5nLXN0YXJ0cy1lbmRzLXdpdGhcclxuICAgIGlmIChlbnRyeS5jaGFyQXQoMCkgPT09ICcuJykge1xyXG4gICAgICAgIGNvbnN0IHNlY29uZENoYXJhY3RlcnkgPSBlbnRyeS5jaGFyQXQoMSk7XHJcbiAgICAgICAgaWYgKHNlY29uZENoYXJhY3RlcnkgPT09ICcvJyB8fCBzZWNvbmRDaGFyYWN0ZXJ5ID09PSAnXFxcXCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVudHJ5LnNsaWNlKExFQURJTkdfRE9UX1NFR01FTlRfQ0hBUkFDVEVSU19DT1VOVCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVudHJ5O1xyXG59XHJcbmV4cG9ydHMucmVtb3ZlTGVhZGluZ0RvdFNlZ21lbnQgPSByZW1vdmVMZWFkaW5nRG90U2VnbWVudDtcclxuIiwgIi8qIVxuICogaXMtZXh0Z2xvYiA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvaXMtZXh0Z2xvYj5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNiwgSm9uIFNjaGxpbmtlcnQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0V4dGdsb2Ioc3RyKSB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJyB8fCBzdHIgPT09ICcnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIG1hdGNoO1xuICB3aGlsZSAoKG1hdGNoID0gLyhcXFxcKS58KFtAPyErKl1cXCguKlxcKSkvZy5leGVjKHN0cikpKSB7XG4gICAgaWYgKG1hdGNoWzJdKSByZXR1cm4gdHJ1ZTtcbiAgICBzdHIgPSBzdHIuc2xpY2UobWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgpO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcbiIsICIvKiFcbiAqIGlzLWdsb2IgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2lzLWdsb2I+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTcsIEpvbiBTY2hsaW5rZXJ0LlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cbnZhciBpc0V4dGdsb2IgPSByZXF1aXJlKCdpcy1leHRnbG9iJyk7XG52YXIgY2hhcnMgPSB7ICd7JzogJ30nLCAnKCc6ICcpJywgJ1snOiAnXSd9O1xudmFyIHN0cmljdENoZWNrID0gZnVuY3Rpb24oc3RyKSB7XG4gIGlmIChzdHJbMF0gPT09ICchJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBwaXBlSW5kZXggPSAtMjtcbiAgdmFyIGNsb3NlU3F1YXJlSW5kZXggPSAtMjtcbiAgdmFyIGNsb3NlQ3VybHlJbmRleCA9IC0yO1xuICB2YXIgY2xvc2VQYXJlbkluZGV4ID0gLTI7XG4gIHZhciBiYWNrU2xhc2hJbmRleCA9IC0yO1xuICB3aGlsZSAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgaWYgKHN0cltpbmRleF0gPT09ICcqJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHN0cltpbmRleCArIDFdID09PSAnPycgJiYgL1tcXF0uKyldLy50ZXN0KHN0cltpbmRleF0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoY2xvc2VTcXVhcmVJbmRleCAhPT0gLTEgJiYgc3RyW2luZGV4XSA9PT0gJ1snICYmIHN0cltpbmRleCArIDFdICE9PSAnXScpIHtcbiAgICAgIGlmIChjbG9zZVNxdWFyZUluZGV4IDwgaW5kZXgpIHtcbiAgICAgICAgY2xvc2VTcXVhcmVJbmRleCA9IHN0ci5pbmRleE9mKCddJywgaW5kZXgpO1xuICAgICAgfVxuICAgICAgaWYgKGNsb3NlU3F1YXJlSW5kZXggPiBpbmRleCkge1xuICAgICAgICBpZiAoYmFja1NsYXNoSW5kZXggPT09IC0xIHx8IGJhY2tTbGFzaEluZGV4ID4gY2xvc2VTcXVhcmVJbmRleCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGJhY2tTbGFzaEluZGV4ID0gc3RyLmluZGV4T2YoJ1xcXFwnLCBpbmRleCk7XG4gICAgICAgIGlmIChiYWNrU2xhc2hJbmRleCA9PT0gLTEgfHwgYmFja1NsYXNoSW5kZXggPiBjbG9zZVNxdWFyZUluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2xvc2VDdXJseUluZGV4ICE9PSAtMSAmJiBzdHJbaW5kZXhdID09PSAneycgJiYgc3RyW2luZGV4ICsgMV0gIT09ICd9Jykge1xuICAgICAgY2xvc2VDdXJseUluZGV4ID0gc3RyLmluZGV4T2YoJ30nLCBpbmRleCk7XG4gICAgICBpZiAoY2xvc2VDdXJseUluZGV4ID4gaW5kZXgpIHtcbiAgICAgICAgYmFja1NsYXNoSW5kZXggPSBzdHIuaW5kZXhPZignXFxcXCcsIGluZGV4KTtcbiAgICAgICAgaWYgKGJhY2tTbGFzaEluZGV4ID09PSAtMSB8fCBiYWNrU2xhc2hJbmRleCA+IGNsb3NlQ3VybHlJbmRleCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNsb3NlUGFyZW5JbmRleCAhPT0gLTEgJiYgc3RyW2luZGV4XSA9PT0gJygnICYmIHN0cltpbmRleCArIDFdID09PSAnPycgJiYgL1s6IT1dLy50ZXN0KHN0cltpbmRleCArIDJdKSAmJiBzdHJbaW5kZXggKyAzXSAhPT0gJyknKSB7XG4gICAgICBjbG9zZVBhcmVuSW5kZXggPSBzdHIuaW5kZXhPZignKScsIGluZGV4KTtcbiAgICAgIGlmIChjbG9zZVBhcmVuSW5kZXggPiBpbmRleCkge1xuICAgICAgICBiYWNrU2xhc2hJbmRleCA9IHN0ci5pbmRleE9mKCdcXFxcJywgaW5kZXgpO1xuICAgICAgICBpZiAoYmFja1NsYXNoSW5kZXggPT09IC0xIHx8IGJhY2tTbGFzaEluZGV4ID4gY2xvc2VQYXJlbkluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGlwZUluZGV4ICE9PSAtMSAmJiBzdHJbaW5kZXhdID09PSAnKCcgJiYgc3RyW2luZGV4ICsgMV0gIT09ICd8Jykge1xuICAgICAgaWYgKHBpcGVJbmRleCA8IGluZGV4KSB7XG4gICAgICAgIHBpcGVJbmRleCA9IHN0ci5pbmRleE9mKCd8JywgaW5kZXgpO1xuICAgICAgfVxuICAgICAgaWYgKHBpcGVJbmRleCAhPT0gLTEgJiYgc3RyW3BpcGVJbmRleCArIDFdICE9PSAnKScpIHtcbiAgICAgICAgY2xvc2VQYXJlbkluZGV4ID0gc3RyLmluZGV4T2YoJyknLCBwaXBlSW5kZXgpO1xuICAgICAgICBpZiAoY2xvc2VQYXJlbkluZGV4ID4gcGlwZUluZGV4KSB7XG4gICAgICAgICAgYmFja1NsYXNoSW5kZXggPSBzdHIuaW5kZXhPZignXFxcXCcsIHBpcGVJbmRleCk7XG4gICAgICAgICAgaWYgKGJhY2tTbGFzaEluZGV4ID09PSAtMSB8fCBiYWNrU2xhc2hJbmRleCA+IGNsb3NlUGFyZW5JbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0cltpbmRleF0gPT09ICdcXFxcJykge1xuICAgICAgdmFyIG9wZW4gPSBzdHJbaW5kZXggKyAxXTtcbiAgICAgIGluZGV4ICs9IDI7XG4gICAgICB2YXIgY2xvc2UgPSBjaGFyc1tvcGVuXTtcblxuICAgICAgaWYgKGNsb3NlKSB7XG4gICAgICAgIHZhciBuID0gc3RyLmluZGV4T2YoY2xvc2UsIGluZGV4KTtcbiAgICAgICAgaWYgKG4gIT09IC0xKSB7XG4gICAgICAgICAgaW5kZXggPSBuICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3RyW2luZGV4XSA9PT0gJyEnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleCsrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG52YXIgcmVsYXhlZENoZWNrID0gZnVuY3Rpb24oc3RyKSB7XG4gIGlmIChzdHJbMF0gPT09ICchJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpbmRleCA9IDA7XG4gIHdoaWxlIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBpZiAoL1sqP3t9KClbXFxdXS8udGVzdChzdHJbaW5kZXhdKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHN0cltpbmRleF0gPT09ICdcXFxcJykge1xuICAgICAgdmFyIG9wZW4gPSBzdHJbaW5kZXggKyAxXTtcbiAgICAgIGluZGV4ICs9IDI7XG4gICAgICB2YXIgY2xvc2UgPSBjaGFyc1tvcGVuXTtcblxuICAgICAgaWYgKGNsb3NlKSB7XG4gICAgICAgIHZhciBuID0gc3RyLmluZGV4T2YoY2xvc2UsIGluZGV4KTtcbiAgICAgICAgaWYgKG4gIT09IC0xKSB7XG4gICAgICAgICAgaW5kZXggPSBuICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3RyW2luZGV4XSA9PT0gJyEnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleCsrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzR2xvYihzdHIsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnIHx8IHN0ciA9PT0gJycpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaXNFeHRnbG9iKHN0cikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBjaGVjayA9IHN0cmljdENoZWNrO1xuXG4gIC8vIG9wdGlvbmFsbHkgcmVsYXggY2hlY2tcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5zdHJpY3QgPT09IGZhbHNlKSB7XG4gICAgY2hlY2sgPSByZWxheGVkQ2hlY2s7XG4gIH1cblxuICByZXR1cm4gY2hlY2soc3RyKTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNHbG9iID0gcmVxdWlyZSgnaXMtZ2xvYicpO1xudmFyIHBhdGhQb3NpeERpcm5hbWUgPSByZXF1aXJlKCdwYXRoJykucG9zaXguZGlybmFtZTtcbnZhciBpc1dpbjMyID0gcmVxdWlyZSgnb3MnKS5wbGF0Zm9ybSgpID09PSAnd2luMzInO1xuXG52YXIgc2xhc2ggPSAnLyc7XG52YXIgYmFja3NsYXNoID0gL1xcXFwvZztcbnZhciBlbmNsb3N1cmUgPSAvW1xce1xcW10uKltcXH1cXF1dJC87XG52YXIgZ2xvYmJ5ID0gLyhefFteXFxcXF0pKFtcXHtcXFtdfFxcKFteXFwpXSskKS87XG52YXIgZXNjYXBlZCA9IC9cXFxcKFtcXCFcXCpcXD9cXHxcXFtcXF1cXChcXClcXHtcXH1dKS9nO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmZsaXBCYWNrc2xhc2hlcz10cnVlXVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnbG9iUGFyZW50KHN0ciwgb3B0cykge1xuICB2YXIgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oeyBmbGlwQmFja3NsYXNoZXM6IHRydWUgfSwgb3B0cyk7XG5cbiAgLy8gZmxpcCB3aW5kb3dzIHBhdGggc2VwYXJhdG9yc1xuICBpZiAob3B0aW9ucy5mbGlwQmFja3NsYXNoZXMgJiYgaXNXaW4zMiAmJiBzdHIuaW5kZXhPZihzbGFzaCkgPCAwKSB7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UoYmFja3NsYXNoLCBzbGFzaCk7XG4gIH1cblxuICAvLyBzcGVjaWFsIGNhc2UgZm9yIHN0cmluZ3MgZW5kaW5nIGluIGVuY2xvc3VyZSBjb250YWluaW5nIHBhdGggc2VwYXJhdG9yXG4gIGlmIChlbmNsb3N1cmUudGVzdChzdHIpKSB7XG4gICAgc3RyICs9IHNsYXNoO1xuICB9XG5cbiAgLy8gcHJlc2VydmVzIGZ1bGwgcGF0aCBpbiBjYXNlIG9mIHRyYWlsaW5nIHBhdGggc2VwYXJhdG9yXG4gIHN0ciArPSAnYSc7XG5cbiAgLy8gcmVtb3ZlIHBhdGggcGFydHMgdGhhdCBhcmUgZ2xvYmJ5XG4gIGRvIHtcbiAgICBzdHIgPSBwYXRoUG9zaXhEaXJuYW1lKHN0cik7XG4gIH0gd2hpbGUgKGlzR2xvYihzdHIpIHx8IGdsb2JieS50ZXN0KHN0cikpO1xuXG4gIC8vIHJlbW92ZSBlc2NhcGUgY2hhcnMgYW5kIHJldHVybiByZXN1bHRcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGVzY2FwZWQsICckMScpO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuaXNJbnRlZ2VyID0gbnVtID0+IHtcbiAgaWYgKHR5cGVvZiBudW0gPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIE51bWJlci5pc0ludGVnZXIobnVtKTtcbiAgfVxuICBpZiAodHlwZW9mIG51bSA9PT0gJ3N0cmluZycgJiYgbnVtLnRyaW0oKSAhPT0gJycpIHtcbiAgICByZXR1cm4gTnVtYmVyLmlzSW50ZWdlcihOdW1iZXIobnVtKSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBGaW5kIGEgbm9kZSBvZiB0aGUgZ2l2ZW4gdHlwZVxuICovXG5cbmV4cG9ydHMuZmluZCA9IChub2RlLCB0eXBlKSA9PiBub2RlLm5vZGVzLmZpbmQobm9kZSA9PiBub2RlLnR5cGUgPT09IHR5cGUpO1xuXG4vKipcbiAqIEZpbmQgYSBub2RlIG9mIHRoZSBnaXZlbiB0eXBlXG4gKi9cblxuZXhwb3J0cy5leGNlZWRzTGltaXQgPSAobWluLCBtYXgsIHN0ZXAgPSAxLCBsaW1pdCkgPT4ge1xuICBpZiAobGltaXQgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gIGlmICghZXhwb3J0cy5pc0ludGVnZXIobWluKSB8fCAhZXhwb3J0cy5pc0ludGVnZXIobWF4KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gKChOdW1iZXIobWF4KSAtIE51bWJlcihtaW4pKSAvIE51bWJlcihzdGVwKSkgPj0gbGltaXQ7XG59O1xuXG4vKipcbiAqIEVzY2FwZSB0aGUgZ2l2ZW4gbm9kZSB3aXRoICdcXFxcJyBiZWZvcmUgbm9kZS52YWx1ZVxuICovXG5cbmV4cG9ydHMuZXNjYXBlTm9kZSA9IChibG9jaywgbiA9IDAsIHR5cGUpID0+IHtcbiAgbGV0IG5vZGUgPSBibG9jay5ub2Rlc1tuXTtcbiAgaWYgKCFub2RlKSByZXR1cm47XG5cbiAgaWYgKCh0eXBlICYmIG5vZGUudHlwZSA9PT0gdHlwZSkgfHwgbm9kZS50eXBlID09PSAnb3BlbicgfHwgbm9kZS50eXBlID09PSAnY2xvc2UnKSB7XG4gICAgaWYgKG5vZGUuZXNjYXBlZCAhPT0gdHJ1ZSkge1xuICAgICAgbm9kZS52YWx1ZSA9ICdcXFxcJyArIG5vZGUudmFsdWU7XG4gICAgICBub2RlLmVzY2FwZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIGJyYWNlIG5vZGUgc2hvdWxkIGJlIGVuY2xvc2VkIGluIGxpdGVyYWwgYnJhY2VzXG4gKi9cblxuZXhwb3J0cy5lbmNsb3NlQnJhY2UgPSBub2RlID0+IHtcbiAgaWYgKG5vZGUudHlwZSAhPT0gJ2JyYWNlJykgcmV0dXJuIGZhbHNlO1xuICBpZiAoKG5vZGUuY29tbWFzID4+IDAgKyBub2RlLnJhbmdlcyA+PiAwKSA9PT0gMCkge1xuICAgIG5vZGUuaW52YWxpZCA9IHRydWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBicmFjZSBub2RlIGlzIGludmFsaWQuXG4gKi9cblxuZXhwb3J0cy5pc0ludmFsaWRCcmFjZSA9IGJsb2NrID0+IHtcbiAgaWYgKGJsb2NrLnR5cGUgIT09ICdicmFjZScpIHJldHVybiBmYWxzZTtcbiAgaWYgKGJsb2NrLmludmFsaWQgPT09IHRydWUgfHwgYmxvY2suZG9sbGFyKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKChibG9jay5jb21tYXMgPj4gMCArIGJsb2NrLnJhbmdlcyA+PiAwKSA9PT0gMCkge1xuICAgIGJsb2NrLmludmFsaWQgPSB0cnVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChibG9jay5vcGVuICE9PSB0cnVlIHx8IGJsb2NrLmNsb3NlICE9PSB0cnVlKSB7XG4gICAgYmxvY2suaW52YWxpZCA9IHRydWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBub2RlIGlzIGFuIG9wZW4gb3IgY2xvc2Ugbm9kZVxuICovXG5cbmV4cG9ydHMuaXNPcGVuT3JDbG9zZSA9IG5vZGUgPT4ge1xuICBpZiAobm9kZS50eXBlID09PSAnb3BlbicgfHwgbm9kZS50eXBlID09PSAnY2xvc2UnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG5vZGUub3BlbiA9PT0gdHJ1ZSB8fCBub2RlLmNsb3NlID09PSB0cnVlO1xufTtcblxuLyoqXG4gKiBSZWR1Y2UgYW4gYXJyYXkgb2YgdGV4dCBub2Rlcy5cbiAqL1xuXG5leHBvcnRzLnJlZHVjZSA9IG5vZGVzID0+IG5vZGVzLnJlZHVjZSgoYWNjLCBub2RlKSA9PiB7XG4gIGlmIChub2RlLnR5cGUgPT09ICd0ZXh0JykgYWNjLnB1c2gobm9kZS52YWx1ZSk7XG4gIGlmIChub2RlLnR5cGUgPT09ICdyYW5nZScpIG5vZGUudHlwZSA9ICd0ZXh0JztcbiAgcmV0dXJuIGFjYztcbn0sIFtdKTtcblxuLyoqXG4gKiBGbGF0dGVuIGFuIGFycmF5XG4gKi9cblxuZXhwb3J0cy5mbGF0dGVuID0gKC4uLmFyZ3MpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGNvbnN0IGZsYXQgPSBhcnIgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZWxlID0gYXJyW2ldO1xuICAgICAgQXJyYXkuaXNBcnJheShlbGUpID8gZmxhdChlbGUsIHJlc3VsdCkgOiBlbGUgIT09IHZvaWQgMCAmJiByZXN1bHQucHVzaChlbGUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBmbGF0KGFyZ3MpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChhc3QsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBsZXQgc3RyaW5naWZ5ID0gKG5vZGUsIHBhcmVudCA9IHt9KSA9PiB7XG4gICAgbGV0IGludmFsaWRCbG9jayA9IG9wdGlvbnMuZXNjYXBlSW52YWxpZCAmJiB1dGlscy5pc0ludmFsaWRCcmFjZShwYXJlbnQpO1xuICAgIGxldCBpbnZhbGlkTm9kZSA9IG5vZGUuaW52YWxpZCA9PT0gdHJ1ZSAmJiBvcHRpb25zLmVzY2FwZUludmFsaWQgPT09IHRydWU7XG4gICAgbGV0IG91dHB1dCA9ICcnO1xuXG4gICAgaWYgKG5vZGUudmFsdWUpIHtcbiAgICAgIGlmICgoaW52YWxpZEJsb2NrIHx8IGludmFsaWROb2RlKSAmJiB1dGlscy5pc09wZW5PckNsb3NlKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiAnXFxcXCcgKyBub2RlLnZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGUudmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUudmFsdWUpIHtcbiAgICAgIHJldHVybiBub2RlLnZhbHVlO1xuICAgIH1cblxuICAgIGlmIChub2RlLm5vZGVzKSB7XG4gICAgICBmb3IgKGxldCBjaGlsZCBvZiBub2RlLm5vZGVzKSB7XG4gICAgICAgIG91dHB1dCArPSBzdHJpbmdpZnkoY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xuXG4gIHJldHVybiBzdHJpbmdpZnkoYXN0KTtcbn07XG5cbiIsICIvKiFcbiAqIGlzLW51bWJlciA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvaXMtbnVtYmVyPlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBKb24gU2NobGlua2VydC5cbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obnVtKSB7XG4gIGlmICh0eXBlb2YgbnVtID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBudW0gLSBudW0gPT09IDA7XG4gIH1cbiAgaWYgKHR5cGVvZiBudW0gPT09ICdzdHJpbmcnICYmIG51bS50cmltKCkgIT09ICcnKSB7XG4gICAgcmV0dXJuIE51bWJlci5pc0Zpbml0ZSA/IE51bWJlci5pc0Zpbml0ZSgrbnVtKSA6IGlzRmluaXRlKCtudW0pO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG4iLCAiLyohXG4gKiB0by1yZWdleC1yYW5nZSA8aHR0cHM6Ly9naXRodWIuY29tL21pY3JvbWF0Y2gvdG8tcmVnZXgtcmFuZ2U+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEpvbiBTY2hsaW5rZXJ0LlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgaXNOdW1iZXIgPSByZXF1aXJlKCdpcy1udW1iZXInKTtcblxuY29uc3QgdG9SZWdleFJhbmdlID0gKG1pbiwgbWF4LCBvcHRpb25zKSA9PiB7XG4gIGlmIChpc051bWJlcihtaW4pID09PSBmYWxzZSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RvUmVnZXhSYW5nZTogZXhwZWN0ZWQgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyJyk7XG4gIH1cblxuICBpZiAobWF4ID09PSB2b2lkIDAgfHwgbWluID09PSBtYXgpIHtcbiAgICByZXR1cm4gU3RyaW5nKG1pbik7XG4gIH1cblxuICBpZiAoaXNOdW1iZXIobWF4KSA9PT0gZmFsc2UpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0b1JlZ2V4UmFuZ2U6IGV4cGVjdGVkIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYmUgYSBudW1iZXIuJyk7XG4gIH1cblxuICBsZXQgb3B0cyA9IHsgcmVsYXhaZXJvczogdHJ1ZSwgLi4ub3B0aW9ucyB9O1xuICBpZiAodHlwZW9mIG9wdHMuc3RyaWN0WmVyb3MgPT09ICdib29sZWFuJykge1xuICAgIG9wdHMucmVsYXhaZXJvcyA9IG9wdHMuc3RyaWN0WmVyb3MgPT09IGZhbHNlO1xuICB9XG5cbiAgbGV0IHJlbGF4ID0gU3RyaW5nKG9wdHMucmVsYXhaZXJvcyk7XG4gIGxldCBzaG9ydGhhbmQgPSBTdHJpbmcob3B0cy5zaG9ydGhhbmQpO1xuICBsZXQgY2FwdHVyZSA9IFN0cmluZyhvcHRzLmNhcHR1cmUpO1xuICBsZXQgd3JhcCA9IFN0cmluZyhvcHRzLndyYXApO1xuICBsZXQgY2FjaGVLZXkgPSBtaW4gKyAnOicgKyBtYXggKyAnPScgKyByZWxheCArIHNob3J0aGFuZCArIGNhcHR1cmUgKyB3cmFwO1xuXG4gIGlmICh0b1JlZ2V4UmFuZ2UuY2FjaGUuaGFzT3duUHJvcGVydHkoY2FjaGVLZXkpKSB7XG4gICAgcmV0dXJuIHRvUmVnZXhSYW5nZS5jYWNoZVtjYWNoZUtleV0ucmVzdWx0O1xuICB9XG5cbiAgbGV0IGEgPSBNYXRoLm1pbihtaW4sIG1heCk7XG4gIGxldCBiID0gTWF0aC5tYXgobWluLCBtYXgpO1xuXG4gIGlmIChNYXRoLmFicyhhIC0gYikgPT09IDEpIHtcbiAgICBsZXQgcmVzdWx0ID0gbWluICsgJ3wnICsgbWF4O1xuICAgIGlmIChvcHRzLmNhcHR1cmUpIHtcbiAgICAgIHJldHVybiBgKCR7cmVzdWx0fSlgO1xuICAgIH1cbiAgICBpZiAob3B0cy53cmFwID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIGAoPzoke3Jlc3VsdH0pYDtcbiAgfVxuXG4gIGxldCBpc1BhZGRlZCA9IGhhc1BhZGRpbmcobWluKSB8fCBoYXNQYWRkaW5nKG1heCk7XG4gIGxldCBzdGF0ZSA9IHsgbWluLCBtYXgsIGEsIGIgfTtcbiAgbGV0IHBvc2l0aXZlcyA9IFtdO1xuICBsZXQgbmVnYXRpdmVzID0gW107XG5cbiAgaWYgKGlzUGFkZGVkKSB7XG4gICAgc3RhdGUuaXNQYWRkZWQgPSBpc1BhZGRlZDtcbiAgICBzdGF0ZS5tYXhMZW4gPSBTdHJpbmcoc3RhdGUubWF4KS5sZW5ndGg7XG4gIH1cblxuICBpZiAoYSA8IDApIHtcbiAgICBsZXQgbmV3TWluID0gYiA8IDAgPyBNYXRoLmFicyhiKSA6IDE7XG4gICAgbmVnYXRpdmVzID0gc3BsaXRUb1BhdHRlcm5zKG5ld01pbiwgTWF0aC5hYnMoYSksIHN0YXRlLCBvcHRzKTtcbiAgICBhID0gc3RhdGUuYSA9IDA7XG4gIH1cblxuICBpZiAoYiA+PSAwKSB7XG4gICAgcG9zaXRpdmVzID0gc3BsaXRUb1BhdHRlcm5zKGEsIGIsIHN0YXRlLCBvcHRzKTtcbiAgfVxuXG4gIHN0YXRlLm5lZ2F0aXZlcyA9IG5lZ2F0aXZlcztcbiAgc3RhdGUucG9zaXRpdmVzID0gcG9zaXRpdmVzO1xuICBzdGF0ZS5yZXN1bHQgPSBjb2xsYXRlUGF0dGVybnMobmVnYXRpdmVzLCBwb3NpdGl2ZXMsIG9wdHMpO1xuXG4gIGlmIChvcHRzLmNhcHR1cmUgPT09IHRydWUpIHtcbiAgICBzdGF0ZS5yZXN1bHQgPSBgKCR7c3RhdGUucmVzdWx0fSlgO1xuICB9IGVsc2UgaWYgKG9wdHMud3JhcCAhPT0gZmFsc2UgJiYgKHBvc2l0aXZlcy5sZW5ndGggKyBuZWdhdGl2ZXMubGVuZ3RoKSA+IDEpIHtcbiAgICBzdGF0ZS5yZXN1bHQgPSBgKD86JHtzdGF0ZS5yZXN1bHR9KWA7XG4gIH1cblxuICB0b1JlZ2V4UmFuZ2UuY2FjaGVbY2FjaGVLZXldID0gc3RhdGU7XG4gIHJldHVybiBzdGF0ZS5yZXN1bHQ7XG59O1xuXG5mdW5jdGlvbiBjb2xsYXRlUGF0dGVybnMobmVnLCBwb3MsIG9wdGlvbnMpIHtcbiAgbGV0IG9ubHlOZWdhdGl2ZSA9IGZpbHRlclBhdHRlcm5zKG5lZywgcG9zLCAnLScsIGZhbHNlLCBvcHRpb25zKSB8fCBbXTtcbiAgbGV0IG9ubHlQb3NpdGl2ZSA9IGZpbHRlclBhdHRlcm5zKHBvcywgbmVnLCAnJywgZmFsc2UsIG9wdGlvbnMpIHx8IFtdO1xuICBsZXQgaW50ZXJzZWN0ZWQgPSBmaWx0ZXJQYXR0ZXJucyhuZWcsIHBvcywgJy0/JywgdHJ1ZSwgb3B0aW9ucykgfHwgW107XG4gIGxldCBzdWJwYXR0ZXJucyA9IG9ubHlOZWdhdGl2ZS5jb25jYXQoaW50ZXJzZWN0ZWQpLmNvbmNhdChvbmx5UG9zaXRpdmUpO1xuICByZXR1cm4gc3VicGF0dGVybnMuam9pbignfCcpO1xufVxuXG5mdW5jdGlvbiBzcGxpdFRvUmFuZ2VzKG1pbiwgbWF4KSB7XG4gIGxldCBuaW5lcyA9IDE7XG4gIGxldCB6ZXJvcyA9IDE7XG5cbiAgbGV0IHN0b3AgPSBjb3VudE5pbmVzKG1pbiwgbmluZXMpO1xuICBsZXQgc3RvcHMgPSBuZXcgU2V0KFttYXhdKTtcblxuICB3aGlsZSAobWluIDw9IHN0b3AgJiYgc3RvcCA8PSBtYXgpIHtcbiAgICBzdG9wcy5hZGQoc3RvcCk7XG4gICAgbmluZXMgKz0gMTtcbiAgICBzdG9wID0gY291bnROaW5lcyhtaW4sIG5pbmVzKTtcbiAgfVxuXG4gIHN0b3AgPSBjb3VudFplcm9zKG1heCArIDEsIHplcm9zKSAtIDE7XG5cbiAgd2hpbGUgKG1pbiA8IHN0b3AgJiYgc3RvcCA8PSBtYXgpIHtcbiAgICBzdG9wcy5hZGQoc3RvcCk7XG4gICAgemVyb3MgKz0gMTtcbiAgICBzdG9wID0gY291bnRaZXJvcyhtYXggKyAxLCB6ZXJvcykgLSAxO1xuICB9XG5cbiAgc3RvcHMgPSBbLi4uc3RvcHNdO1xuICBzdG9wcy5zb3J0KGNvbXBhcmUpO1xuICByZXR1cm4gc3RvcHM7XG59XG5cbi8qKlxuICogQ29udmVydCBhIHJhbmdlIHRvIGEgcmVnZXggcGF0dGVyblxuICogQHBhcmFtIHtOdW1iZXJ9IGBzdGFydGBcbiAqIEBwYXJhbSB7TnVtYmVyfSBgc3RvcGBcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiByYW5nZVRvUGF0dGVybihzdGFydCwgc3RvcCwgb3B0aW9ucykge1xuICBpZiAoc3RhcnQgPT09IHN0b3ApIHtcbiAgICByZXR1cm4geyBwYXR0ZXJuOiBzdGFydCwgY291bnQ6IFtdLCBkaWdpdHM6IDAgfTtcbiAgfVxuXG4gIGxldCB6aXBwZWQgPSB6aXAoc3RhcnQsIHN0b3ApO1xuICBsZXQgZGlnaXRzID0gemlwcGVkLmxlbmd0aDtcbiAgbGV0IHBhdHRlcm4gPSAnJztcbiAgbGV0IGNvdW50ID0gMDtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRpZ2l0czsgaSsrKSB7XG4gICAgbGV0IFtzdGFydERpZ2l0LCBzdG9wRGlnaXRdID0gemlwcGVkW2ldO1xuXG4gICAgaWYgKHN0YXJ0RGlnaXQgPT09IHN0b3BEaWdpdCkge1xuICAgICAgcGF0dGVybiArPSBzdGFydERpZ2l0O1xuXG4gICAgfSBlbHNlIGlmIChzdGFydERpZ2l0ICE9PSAnMCcgfHwgc3RvcERpZ2l0ICE9PSAnOScpIHtcbiAgICAgIHBhdHRlcm4gKz0gdG9DaGFyYWN0ZXJDbGFzcyhzdGFydERpZ2l0LCBzdG9wRGlnaXQsIG9wdGlvbnMpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50Kys7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNvdW50KSB7XG4gICAgcGF0dGVybiArPSBvcHRpb25zLnNob3J0aGFuZCA9PT0gdHJ1ZSA/ICdcXFxcZCcgOiAnWzAtOV0nO1xuICB9XG5cbiAgcmV0dXJuIHsgcGF0dGVybiwgY291bnQ6IFtjb3VudF0sIGRpZ2l0cyB9O1xufVxuXG5mdW5jdGlvbiBzcGxpdFRvUGF0dGVybnMobWluLCBtYXgsIHRvaywgb3B0aW9ucykge1xuICBsZXQgcmFuZ2VzID0gc3BsaXRUb1JhbmdlcyhtaW4sIG1heCk7XG4gIGxldCB0b2tlbnMgPSBbXTtcbiAgbGV0IHN0YXJ0ID0gbWluO1xuICBsZXQgcHJldjtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBtYXggPSByYW5nZXNbaV07XG4gICAgbGV0IG9iaiA9IHJhbmdlVG9QYXR0ZXJuKFN0cmluZyhzdGFydCksIFN0cmluZyhtYXgpLCBvcHRpb25zKTtcbiAgICBsZXQgemVyb3MgPSAnJztcblxuICAgIGlmICghdG9rLmlzUGFkZGVkICYmIHByZXYgJiYgcHJldi5wYXR0ZXJuID09PSBvYmoucGF0dGVybikge1xuICAgICAgaWYgKHByZXYuY291bnQubGVuZ3RoID4gMSkge1xuICAgICAgICBwcmV2LmNvdW50LnBvcCgpO1xuICAgICAgfVxuXG4gICAgICBwcmV2LmNvdW50LnB1c2gob2JqLmNvdW50WzBdKTtcbiAgICAgIHByZXYuc3RyaW5nID0gcHJldi5wYXR0ZXJuICsgdG9RdWFudGlmaWVyKHByZXYuY291bnQpO1xuICAgICAgc3RhcnQgPSBtYXggKyAxO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHRvay5pc1BhZGRlZCkge1xuICAgICAgemVyb3MgPSBwYWRaZXJvcyhtYXgsIHRvaywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgb2JqLnN0cmluZyA9IHplcm9zICsgb2JqLnBhdHRlcm4gKyB0b1F1YW50aWZpZXIob2JqLmNvdW50KTtcbiAgICB0b2tlbnMucHVzaChvYmopO1xuICAgIHN0YXJ0ID0gbWF4ICsgMTtcbiAgICBwcmV2ID0gb2JqO1xuICB9XG5cbiAgcmV0dXJuIHRva2Vucztcbn1cblxuZnVuY3Rpb24gZmlsdGVyUGF0dGVybnMoYXJyLCBjb21wYXJpc29uLCBwcmVmaXgsIGludGVyc2VjdGlvbiwgb3B0aW9ucykge1xuICBsZXQgcmVzdWx0ID0gW107XG5cbiAgZm9yIChsZXQgZWxlIG9mIGFycikge1xuICAgIGxldCB7IHN0cmluZyB9ID0gZWxlO1xuXG4gICAgLy8gb25seSBwdXNoIGlmIF9ib3RoXyBhcmUgbmVnYXRpdmUuLi5cbiAgICBpZiAoIWludGVyc2VjdGlvbiAmJiAhY29udGFpbnMoY29tcGFyaXNvbiwgJ3N0cmluZycsIHN0cmluZykpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHByZWZpeCArIHN0cmluZyk7XG4gICAgfVxuXG4gICAgLy8gb3IgX2JvdGhfIGFyZSBwb3NpdGl2ZVxuICAgIGlmIChpbnRlcnNlY3Rpb24gJiYgY29udGFpbnMoY29tcGFyaXNvbiwgJ3N0cmluZycsIHN0cmluZykpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHByZWZpeCArIHN0cmluZyk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogWmlwIHN0cmluZ3NcbiAqL1xuXG5mdW5jdGlvbiB6aXAoYSwgYikge1xuICBsZXQgYXJyID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykgYXJyLnB1c2goW2FbaV0sIGJbaV1dKTtcbiAgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gIHJldHVybiBhID4gYiA/IDEgOiBiID4gYSA/IC0xIDogMDtcbn1cblxuZnVuY3Rpb24gY29udGFpbnMoYXJyLCBrZXksIHZhbCkge1xuICByZXR1cm4gYXJyLnNvbWUoZWxlID0+IGVsZVtrZXldID09PSB2YWwpO1xufVxuXG5mdW5jdGlvbiBjb3VudE5pbmVzKG1pbiwgbGVuKSB7XG4gIHJldHVybiBOdW1iZXIoU3RyaW5nKG1pbikuc2xpY2UoMCwgLWxlbikgKyAnOScucmVwZWF0KGxlbikpO1xufVxuXG5mdW5jdGlvbiBjb3VudFplcm9zKGludGVnZXIsIHplcm9zKSB7XG4gIHJldHVybiBpbnRlZ2VyIC0gKGludGVnZXIgJSBNYXRoLnBvdygxMCwgemVyb3MpKTtcbn1cblxuZnVuY3Rpb24gdG9RdWFudGlmaWVyKGRpZ2l0cykge1xuICBsZXQgW3N0YXJ0ID0gMCwgc3RvcCA9ICcnXSA9IGRpZ2l0cztcbiAgaWYgKHN0b3AgfHwgc3RhcnQgPiAxKSB7XG4gICAgcmV0dXJuIGB7JHtzdGFydCArIChzdG9wID8gJywnICsgc3RvcCA6ICcnKX19YDtcbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIHRvQ2hhcmFjdGVyQ2xhc3MoYSwgYiwgb3B0aW9ucykge1xuICByZXR1cm4gYFske2F9JHsoYiAtIGEgPT09IDEpID8gJycgOiAnLSd9JHtifV1gO1xufVxuXG5mdW5jdGlvbiBoYXNQYWRkaW5nKHN0cikge1xuICByZXR1cm4gL14tPygwKylcXGQvLnRlc3Qoc3RyKTtcbn1cblxuZnVuY3Rpb24gcGFkWmVyb3ModmFsdWUsIHRvaywgb3B0aW9ucykge1xuICBpZiAoIXRvay5pc1BhZGRlZCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGxldCBkaWZmID0gTWF0aC5hYnModG9rLm1heExlbiAtIFN0cmluZyh2YWx1ZSkubGVuZ3RoKTtcbiAgbGV0IHJlbGF4ID0gb3B0aW9ucy5yZWxheFplcm9zICE9PSBmYWxzZTtcblxuICBzd2l0Y2ggKGRpZmYpIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gJyc7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIHJlbGF4ID8gJzA/JyA6ICcwJztcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gcmVsYXggPyAnMHswLDJ9JyA6ICcwMCc7XG4gICAgZGVmYXVsdDoge1xuICAgICAgcmV0dXJuIHJlbGF4ID8gYDB7MCwke2RpZmZ9fWAgOiBgMHske2RpZmZ9fWA7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2FjaGVcbiAqL1xuXG50b1JlZ2V4UmFuZ2UuY2FjaGUgPSB7fTtcbnRvUmVnZXhSYW5nZS5jbGVhckNhY2hlID0gKCkgPT4gKHRvUmVnZXhSYW5nZS5jYWNoZSA9IHt9KTtcblxuLyoqXG4gKiBFeHBvc2UgYHRvUmVnZXhSYW5nZWBcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRvUmVnZXhSYW5nZTtcbiIsICIvKiFcbiAqIGZpbGwtcmFuZ2UgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2ZpbGwtcmFuZ2U+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEpvbiBTY2hsaW5rZXJ0LlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbmNvbnN0IHRvUmVnZXhSYW5nZSA9IHJlcXVpcmUoJ3RvLXJlZ2V4LXJhbmdlJyk7XG5cbmNvbnN0IGlzT2JqZWN0ID0gdmFsID0+IHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2YWwpO1xuXG5jb25zdCB0cmFuc2Zvcm0gPSB0b051bWJlciA9PiB7XG4gIHJldHVybiB2YWx1ZSA9PiB0b051bWJlciA9PT0gdHJ1ZSA/IE51bWJlcih2YWx1ZSkgOiBTdHJpbmcodmFsdWUpO1xufTtcblxuY29uc3QgaXNWYWxpZFZhbHVlID0gdmFsdWUgPT4ge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gJycpO1xufTtcblxuY29uc3QgaXNOdW1iZXIgPSBudW0gPT4gTnVtYmVyLmlzSW50ZWdlcigrbnVtKTtcblxuY29uc3QgemVyb3MgPSBpbnB1dCA9PiB7XG4gIGxldCB2YWx1ZSA9IGAke2lucHV0fWA7XG4gIGxldCBpbmRleCA9IC0xO1xuICBpZiAodmFsdWVbMF0gPT09ICctJykgdmFsdWUgPSB2YWx1ZS5zbGljZSgxKTtcbiAgaWYgKHZhbHVlID09PSAnMCcpIHJldHVybiBmYWxzZTtcbiAgd2hpbGUgKHZhbHVlWysraW5kZXhdID09PSAnMCcpO1xuICByZXR1cm4gaW5kZXggPiAwO1xufTtcblxuY29uc3Qgc3RyaW5naWZ5ID0gKHN0YXJ0LCBlbmQsIG9wdGlvbnMpID0+IHtcbiAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3B0aW9ucy5zdHJpbmdpZnkgPT09IHRydWU7XG59O1xuXG5jb25zdCBwYWQgPSAoaW5wdXQsIG1heExlbmd0aCwgdG9OdW1iZXIpID0+IHtcbiAgaWYgKG1heExlbmd0aCA+IDApIHtcbiAgICBsZXQgZGFzaCA9IGlucHV0WzBdID09PSAnLScgPyAnLScgOiAnJztcbiAgICBpZiAoZGFzaCkgaW5wdXQgPSBpbnB1dC5zbGljZSgxKTtcbiAgICBpbnB1dCA9IChkYXNoICsgaW5wdXQucGFkU3RhcnQoZGFzaCA/IG1heExlbmd0aCAtIDEgOiBtYXhMZW5ndGgsICcwJykpO1xuICB9XG4gIGlmICh0b051bWJlciA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gU3RyaW5nKGlucHV0KTtcbiAgfVxuICByZXR1cm4gaW5wdXQ7XG59O1xuXG5jb25zdCB0b01heExlbiA9IChpbnB1dCwgbWF4TGVuZ3RoKSA9PiB7XG4gIGxldCBuZWdhdGl2ZSA9IGlucHV0WzBdID09PSAnLScgPyAnLScgOiAnJztcbiAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgaW5wdXQgPSBpbnB1dC5zbGljZSgxKTtcbiAgICBtYXhMZW5ndGgtLTtcbiAgfVxuICB3aGlsZSAoaW5wdXQubGVuZ3RoIDwgbWF4TGVuZ3RoKSBpbnB1dCA9ICcwJyArIGlucHV0O1xuICByZXR1cm4gbmVnYXRpdmUgPyAoJy0nICsgaW5wdXQpIDogaW5wdXQ7XG59O1xuXG5jb25zdCB0b1NlcXVlbmNlID0gKHBhcnRzLCBvcHRpb25zKSA9PiB7XG4gIHBhcnRzLm5lZ2F0aXZlcy5zb3J0KChhLCBiKSA9PiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogMCk7XG4gIHBhcnRzLnBvc2l0aXZlcy5zb3J0KChhLCBiKSA9PiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogMCk7XG5cbiAgbGV0IHByZWZpeCA9IG9wdGlvbnMuY2FwdHVyZSA/ICcnIDogJz86JztcbiAgbGV0IHBvc2l0aXZlcyA9ICcnO1xuICBsZXQgbmVnYXRpdmVzID0gJyc7XG4gIGxldCByZXN1bHQ7XG5cbiAgaWYgKHBhcnRzLnBvc2l0aXZlcy5sZW5ndGgpIHtcbiAgICBwb3NpdGl2ZXMgPSBwYXJ0cy5wb3NpdGl2ZXMuam9pbignfCcpO1xuICB9XG5cbiAgaWYgKHBhcnRzLm5lZ2F0aXZlcy5sZW5ndGgpIHtcbiAgICBuZWdhdGl2ZXMgPSBgLSgke3ByZWZpeH0ke3BhcnRzLm5lZ2F0aXZlcy5qb2luKCd8Jyl9KWA7XG4gIH1cblxuICBpZiAocG9zaXRpdmVzICYmIG5lZ2F0aXZlcykge1xuICAgIHJlc3VsdCA9IGAke3Bvc2l0aXZlc318JHtuZWdhdGl2ZXN9YDtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSBwb3NpdGl2ZXMgfHwgbmVnYXRpdmVzO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMud3JhcCkge1xuICAgIHJldHVybiBgKCR7cHJlZml4fSR7cmVzdWx0fSlgO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmNvbnN0IHRvUmFuZ2UgPSAoYSwgYiwgaXNOdW1iZXJzLCBvcHRpb25zKSA9PiB7XG4gIGlmIChpc051bWJlcnMpIHtcbiAgICByZXR1cm4gdG9SZWdleFJhbmdlKGEsIGIsIHsgd3JhcDogZmFsc2UsIC4uLm9wdGlvbnMgfSk7XG4gIH1cblxuICBsZXQgc3RhcnQgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGEpO1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHN0YXJ0O1xuXG4gIGxldCBzdG9wID0gU3RyaW5nLmZyb21DaGFyQ29kZShiKTtcbiAgcmV0dXJuIGBbJHtzdGFydH0tJHtzdG9wfV1gO1xufTtcblxuY29uc3QgdG9SZWdleCA9IChzdGFydCwgZW5kLCBvcHRpb25zKSA9PiB7XG4gIGlmIChBcnJheS5pc0FycmF5KHN0YXJ0KSkge1xuICAgIGxldCB3cmFwID0gb3B0aW9ucy53cmFwID09PSB0cnVlO1xuICAgIGxldCBwcmVmaXggPSBvcHRpb25zLmNhcHR1cmUgPyAnJyA6ICc/Oic7XG4gICAgcmV0dXJuIHdyYXAgPyBgKCR7cHJlZml4fSR7c3RhcnQuam9pbignfCcpfSlgIDogc3RhcnQuam9pbignfCcpO1xuICB9XG4gIHJldHVybiB0b1JlZ2V4UmFuZ2Uoc3RhcnQsIGVuZCwgb3B0aW9ucyk7XG59O1xuXG5jb25zdCByYW5nZUVycm9yID0gKC4uLmFyZ3MpID0+IHtcbiAgcmV0dXJuIG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHJhbmdlIGFyZ3VtZW50czogJyArIHV0aWwuaW5zcGVjdCguLi5hcmdzKSk7XG59O1xuXG5jb25zdCBpbnZhbGlkUmFuZ2UgPSAoc3RhcnQsIGVuZCwgb3B0aW9ucykgPT4ge1xuICBpZiAob3B0aW9ucy5zdHJpY3RSYW5nZXMgPT09IHRydWUpIHRocm93IHJhbmdlRXJyb3IoW3N0YXJ0LCBlbmRdKTtcbiAgcmV0dXJuIFtdO1xufTtcblxuY29uc3QgaW52YWxpZFN0ZXAgPSAoc3RlcCwgb3B0aW9ucykgPT4ge1xuICBpZiAob3B0aW9ucy5zdHJpY3RSYW5nZXMgPT09IHRydWUpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBzdGVwIFwiJHtzdGVwfVwiIHRvIGJlIGEgbnVtYmVyYCk7XG4gIH1cbiAgcmV0dXJuIFtdO1xufTtcblxuY29uc3QgZmlsbE51bWJlcnMgPSAoc3RhcnQsIGVuZCwgc3RlcCA9IDEsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBsZXQgYSA9IE51bWJlcihzdGFydCk7XG4gIGxldCBiID0gTnVtYmVyKGVuZCk7XG5cbiAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGEpIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKGIpKSB7XG4gICAgaWYgKG9wdGlvbnMuc3RyaWN0UmFuZ2VzID09PSB0cnVlKSB0aHJvdyByYW5nZUVycm9yKFtzdGFydCwgZW5kXSk7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgLy8gZml4IG5lZ2F0aXZlIHplcm9cbiAgaWYgKGEgPT09IDApIGEgPSAwO1xuICBpZiAoYiA9PT0gMCkgYiA9IDA7XG5cbiAgbGV0IGRlc2NlbmRpbmcgPSBhID4gYjtcbiAgbGV0IHN0YXJ0U3RyaW5nID0gU3RyaW5nKHN0YXJ0KTtcbiAgbGV0IGVuZFN0cmluZyA9IFN0cmluZyhlbmQpO1xuICBsZXQgc3RlcFN0cmluZyA9IFN0cmluZyhzdGVwKTtcbiAgc3RlcCA9IE1hdGgubWF4KE1hdGguYWJzKHN0ZXApLCAxKTtcblxuICBsZXQgcGFkZGVkID0gemVyb3Moc3RhcnRTdHJpbmcpIHx8IHplcm9zKGVuZFN0cmluZykgfHwgemVyb3Moc3RlcFN0cmluZyk7XG4gIGxldCBtYXhMZW4gPSBwYWRkZWQgPyBNYXRoLm1heChzdGFydFN0cmluZy5sZW5ndGgsIGVuZFN0cmluZy5sZW5ndGgsIHN0ZXBTdHJpbmcubGVuZ3RoKSA6IDA7XG4gIGxldCB0b051bWJlciA9IHBhZGRlZCA9PT0gZmFsc2UgJiYgc3RyaW5naWZ5KHN0YXJ0LCBlbmQsIG9wdGlvbnMpID09PSBmYWxzZTtcbiAgbGV0IGZvcm1hdCA9IG9wdGlvbnMudHJhbnNmb3JtIHx8IHRyYW5zZm9ybSh0b051bWJlcik7XG5cbiAgaWYgKG9wdGlvbnMudG9SZWdleCAmJiBzdGVwID09PSAxKSB7XG4gICAgcmV0dXJuIHRvUmFuZ2UodG9NYXhMZW4oc3RhcnQsIG1heExlbiksIHRvTWF4TGVuKGVuZCwgbWF4TGVuKSwgdHJ1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBsZXQgcGFydHMgPSB7IG5lZ2F0aXZlczogW10sIHBvc2l0aXZlczogW10gfTtcbiAgbGV0IHB1c2ggPSBudW0gPT4gcGFydHNbbnVtIDwgMCA/ICduZWdhdGl2ZXMnIDogJ3Bvc2l0aXZlcyddLnB1c2goTWF0aC5hYnMobnVtKSk7XG4gIGxldCByYW5nZSA9IFtdO1xuICBsZXQgaW5kZXggPSAwO1xuXG4gIHdoaWxlIChkZXNjZW5kaW5nID8gYSA+PSBiIDogYSA8PSBiKSB7XG4gICAgaWYgKG9wdGlvbnMudG9SZWdleCA9PT0gdHJ1ZSAmJiBzdGVwID4gMSkge1xuICAgICAgcHVzaChhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmFuZ2UucHVzaChwYWQoZm9ybWF0KGEsIGluZGV4KSwgbWF4TGVuLCB0b051bWJlcikpO1xuICAgIH1cbiAgICBhID0gZGVzY2VuZGluZyA/IGEgLSBzdGVwIDogYSArIHN0ZXA7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmIChvcHRpb25zLnRvUmVnZXggPT09IHRydWUpIHtcbiAgICByZXR1cm4gc3RlcCA+IDFcbiAgICAgID8gdG9TZXF1ZW5jZShwYXJ0cywgb3B0aW9ucylcbiAgICAgIDogdG9SZWdleChyYW5nZSwgbnVsbCwgeyB3cmFwOiBmYWxzZSwgLi4ub3B0aW9ucyB9KTtcbiAgfVxuXG4gIHJldHVybiByYW5nZTtcbn07XG5cbmNvbnN0IGZpbGxMZXR0ZXJzID0gKHN0YXJ0LCBlbmQsIHN0ZXAgPSAxLCBvcHRpb25zID0ge30pID0+IHtcbiAgaWYgKCghaXNOdW1iZXIoc3RhcnQpICYmIHN0YXJ0Lmxlbmd0aCA+IDEpIHx8ICghaXNOdW1iZXIoZW5kKSAmJiBlbmQubGVuZ3RoID4gMSkpIHtcbiAgICByZXR1cm4gaW52YWxpZFJhbmdlKHN0YXJ0LCBlbmQsIG9wdGlvbnMpO1xuICB9XG5cblxuICBsZXQgZm9ybWF0ID0gb3B0aW9ucy50cmFuc2Zvcm0gfHwgKHZhbCA9PiBTdHJpbmcuZnJvbUNoYXJDb2RlKHZhbCkpO1xuICBsZXQgYSA9IGAke3N0YXJ0fWAuY2hhckNvZGVBdCgwKTtcbiAgbGV0IGIgPSBgJHtlbmR9YC5jaGFyQ29kZUF0KDApO1xuXG4gIGxldCBkZXNjZW5kaW5nID0gYSA+IGI7XG4gIGxldCBtaW4gPSBNYXRoLm1pbihhLCBiKTtcbiAgbGV0IG1heCA9IE1hdGgubWF4KGEsIGIpO1xuXG4gIGlmIChvcHRpb25zLnRvUmVnZXggJiYgc3RlcCA9PT0gMSkge1xuICAgIHJldHVybiB0b1JhbmdlKG1pbiwgbWF4LCBmYWxzZSwgb3B0aW9ucyk7XG4gIH1cblxuICBsZXQgcmFuZ2UgPSBbXTtcbiAgbGV0IGluZGV4ID0gMDtcblxuICB3aGlsZSAoZGVzY2VuZGluZyA/IGEgPj0gYiA6IGEgPD0gYikge1xuICAgIHJhbmdlLnB1c2goZm9ybWF0KGEsIGluZGV4KSk7XG4gICAgYSA9IGRlc2NlbmRpbmcgPyBhIC0gc3RlcCA6IGEgKyBzdGVwO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAob3B0aW9ucy50b1JlZ2V4ID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIHRvUmVnZXgocmFuZ2UsIG51bGwsIHsgd3JhcDogZmFsc2UsIG9wdGlvbnMgfSk7XG4gIH1cblxuICByZXR1cm4gcmFuZ2U7XG59O1xuXG5jb25zdCBmaWxsID0gKHN0YXJ0LCBlbmQsIHN0ZXAsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBpZiAoZW5kID09IG51bGwgJiYgaXNWYWxpZFZhbHVlKHN0YXJ0KSkge1xuICAgIHJldHVybiBbc3RhcnRdO1xuICB9XG5cbiAgaWYgKCFpc1ZhbGlkVmFsdWUoc3RhcnQpIHx8ICFpc1ZhbGlkVmFsdWUoZW5kKSkge1xuICAgIHJldHVybiBpbnZhbGlkUmFuZ2Uoc3RhcnQsIGVuZCwgb3B0aW9ucyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHN0ZXAgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZmlsbChzdGFydCwgZW5kLCAxLCB7IHRyYW5zZm9ybTogc3RlcCB9KTtcbiAgfVxuXG4gIGlmIChpc09iamVjdChzdGVwKSkge1xuICAgIHJldHVybiBmaWxsKHN0YXJ0LCBlbmQsIDAsIHN0ZXApO1xuICB9XG5cbiAgbGV0IG9wdHMgPSB7IC4uLm9wdGlvbnMgfTtcbiAgaWYgKG9wdHMuY2FwdHVyZSA9PT0gdHJ1ZSkgb3B0cy53cmFwID0gdHJ1ZTtcbiAgc3RlcCA9IHN0ZXAgfHwgb3B0cy5zdGVwIHx8IDE7XG5cbiAgaWYgKCFpc051bWJlcihzdGVwKSkge1xuICAgIGlmIChzdGVwICE9IG51bGwgJiYgIWlzT2JqZWN0KHN0ZXApKSByZXR1cm4gaW52YWxpZFN0ZXAoc3RlcCwgb3B0cyk7XG4gICAgcmV0dXJuIGZpbGwoc3RhcnQsIGVuZCwgMSwgc3RlcCk7XG4gIH1cblxuICBpZiAoaXNOdW1iZXIoc3RhcnQpICYmIGlzTnVtYmVyKGVuZCkpIHtcbiAgICByZXR1cm4gZmlsbE51bWJlcnMoc3RhcnQsIGVuZCwgc3RlcCwgb3B0cyk7XG4gIH1cblxuICByZXR1cm4gZmlsbExldHRlcnMoc3RhcnQsIGVuZCwgTWF0aC5tYXgoTWF0aC5hYnMoc3RlcCksIDEpLCBvcHRzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZmlsbDtcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGZpbGwgPSByZXF1aXJlKCdmaWxsLXJhbmdlJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuY29uc3QgY29tcGlsZSA9IChhc3QsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBsZXQgd2FsayA9IChub2RlLCBwYXJlbnQgPSB7fSkgPT4ge1xuICAgIGxldCBpbnZhbGlkQmxvY2sgPSB1dGlscy5pc0ludmFsaWRCcmFjZShwYXJlbnQpO1xuICAgIGxldCBpbnZhbGlkTm9kZSA9IG5vZGUuaW52YWxpZCA9PT0gdHJ1ZSAmJiBvcHRpb25zLmVzY2FwZUludmFsaWQgPT09IHRydWU7XG4gICAgbGV0IGludmFsaWQgPSBpbnZhbGlkQmxvY2sgPT09IHRydWUgfHwgaW52YWxpZE5vZGUgPT09IHRydWU7XG4gICAgbGV0IHByZWZpeCA9IG9wdGlvbnMuZXNjYXBlSW52YWxpZCA9PT0gdHJ1ZSA/ICdcXFxcJyA6ICcnO1xuICAgIGxldCBvdXRwdXQgPSAnJztcblxuICAgIGlmIChub2RlLmlzT3BlbiA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIHByZWZpeCArIG5vZGUudmFsdWU7XG4gICAgfVxuICAgIGlmIChub2RlLmlzQ2xvc2UgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBwcmVmaXggKyBub2RlLnZhbHVlO1xuICAgIH1cblxuICAgIGlmIChub2RlLnR5cGUgPT09ICdvcGVuJykge1xuICAgICAgcmV0dXJuIGludmFsaWQgPyAocHJlZml4ICsgbm9kZS52YWx1ZSkgOiAnKCc7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUudHlwZSA9PT0gJ2Nsb3NlJykge1xuICAgICAgcmV0dXJuIGludmFsaWQgPyAocHJlZml4ICsgbm9kZS52YWx1ZSkgOiAnKSc7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUudHlwZSA9PT0gJ2NvbW1hJykge1xuICAgICAgcmV0dXJuIG5vZGUucHJldi50eXBlID09PSAnY29tbWEnID8gJycgOiAoaW52YWxpZCA/IG5vZGUudmFsdWUgOiAnfCcpO1xuICAgIH1cblxuICAgIGlmIChub2RlLnZhbHVlKSB7XG4gICAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAobm9kZS5ub2RlcyAmJiBub2RlLnJhbmdlcyA+IDApIHtcbiAgICAgIGxldCBhcmdzID0gdXRpbHMucmVkdWNlKG5vZGUubm9kZXMpO1xuICAgICAgbGV0IHJhbmdlID0gZmlsbCguLi5hcmdzLCB7IC4uLm9wdGlvbnMsIHdyYXA6IGZhbHNlLCB0b1JlZ2V4OiB0cnVlIH0pO1xuXG4gICAgICBpZiAocmFuZ2UubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBhcmdzLmxlbmd0aCA+IDEgJiYgcmFuZ2UubGVuZ3RoID4gMSA/IGAoJHtyYW5nZX0pYCA6IHJhbmdlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChub2RlLm5vZGVzKSB7XG4gICAgICBmb3IgKGxldCBjaGlsZCBvZiBub2RlLm5vZGVzKSB7XG4gICAgICAgIG91dHB1dCArPSB3YWxrKGNoaWxkLCBub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfTtcblxuICByZXR1cm4gd2Fsayhhc3QpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb21waWxlO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZmlsbCA9IHJlcXVpcmUoJ2ZpbGwtcmFuZ2UnKTtcbmNvbnN0IHN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vc3RyaW5naWZ5Jyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuY29uc3QgYXBwZW5kID0gKHF1ZXVlID0gJycsIHN0YXNoID0gJycsIGVuY2xvc2UgPSBmYWxzZSkgPT4ge1xuICBsZXQgcmVzdWx0ID0gW107XG5cbiAgcXVldWUgPSBbXS5jb25jYXQocXVldWUpO1xuICBzdGFzaCA9IFtdLmNvbmNhdChzdGFzaCk7XG5cbiAgaWYgKCFzdGFzaC5sZW5ndGgpIHJldHVybiBxdWV1ZTtcbiAgaWYgKCFxdWV1ZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gZW5jbG9zZSA/IHV0aWxzLmZsYXR0ZW4oc3Rhc2gpLm1hcChlbGUgPT4gYHske2VsZX19YCkgOiBzdGFzaDtcbiAgfVxuXG4gIGZvciAobGV0IGl0ZW0gb2YgcXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtKSkge1xuICAgICAgZm9yIChsZXQgdmFsdWUgb2YgaXRlbSkge1xuICAgICAgICByZXN1bHQucHVzaChhcHBlbmQodmFsdWUsIHN0YXNoLCBlbmNsb3NlKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGVsZSBvZiBzdGFzaCkge1xuICAgICAgICBpZiAoZW5jbG9zZSA9PT0gdHJ1ZSAmJiB0eXBlb2YgZWxlID09PSAnc3RyaW5nJykgZWxlID0gYHske2VsZX19YDtcbiAgICAgICAgcmVzdWx0LnB1c2goQXJyYXkuaXNBcnJheShlbGUpID8gYXBwZW5kKGl0ZW0sIGVsZSwgZW5jbG9zZSkgOiAoaXRlbSArIGVsZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdXRpbHMuZmxhdHRlbihyZXN1bHQpO1xufTtcblxuY29uc3QgZXhwYW5kID0gKGFzdCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGxldCByYW5nZUxpbWl0ID0gb3B0aW9ucy5yYW5nZUxpbWl0ID09PSB2b2lkIDAgPyAxMDAwIDogb3B0aW9ucy5yYW5nZUxpbWl0O1xuXG4gIGxldCB3YWxrID0gKG5vZGUsIHBhcmVudCA9IHt9KSA9PiB7XG4gICAgbm9kZS5xdWV1ZSA9IFtdO1xuXG4gICAgbGV0IHAgPSBwYXJlbnQ7XG4gICAgbGV0IHEgPSBwYXJlbnQucXVldWU7XG5cbiAgICB3aGlsZSAocC50eXBlICE9PSAnYnJhY2UnICYmIHAudHlwZSAhPT0gJ3Jvb3QnICYmIHAucGFyZW50KSB7XG4gICAgICBwID0gcC5wYXJlbnQ7XG4gICAgICBxID0gcC5xdWV1ZTtcbiAgICB9XG5cbiAgICBpZiAobm9kZS5pbnZhbGlkIHx8IG5vZGUuZG9sbGFyKSB7XG4gICAgICBxLnB1c2goYXBwZW5kKHEucG9wKCksIHN0cmluZ2lmeShub2RlLCBvcHRpb25zKSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChub2RlLnR5cGUgPT09ICdicmFjZScgJiYgbm9kZS5pbnZhbGlkICE9PSB0cnVlICYmIG5vZGUubm9kZXMubGVuZ3RoID09PSAyKSB7XG4gICAgICBxLnB1c2goYXBwZW5kKHEucG9wKCksIFsne30nXSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChub2RlLm5vZGVzICYmIG5vZGUucmFuZ2VzID4gMCkge1xuICAgICAgbGV0IGFyZ3MgPSB1dGlscy5yZWR1Y2Uobm9kZS5ub2Rlcyk7XG5cbiAgICAgIGlmICh1dGlscy5leGNlZWRzTGltaXQoLi4uYXJncywgb3B0aW9ucy5zdGVwLCByYW5nZUxpbWl0KSkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZXhwYW5kZWQgYXJyYXkgbGVuZ3RoIGV4Y2VlZHMgcmFuZ2UgbGltaXQuIFVzZSBvcHRpb25zLnJhbmdlTGltaXQgdG8gaW5jcmVhc2Ugb3IgZGlzYWJsZSB0aGUgbGltaXQuJyk7XG4gICAgICB9XG5cbiAgICAgIGxldCByYW5nZSA9IGZpbGwoLi4uYXJncywgb3B0aW9ucyk7XG4gICAgICBpZiAocmFuZ2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJhbmdlID0gc3RyaW5naWZ5KG5vZGUsIG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICBxLnB1c2goYXBwZW5kKHEucG9wKCksIHJhbmdlKSk7XG4gICAgICBub2RlLm5vZGVzID0gW107XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGVuY2xvc2UgPSB1dGlscy5lbmNsb3NlQnJhY2Uobm9kZSk7XG4gICAgbGV0IHF1ZXVlID0gbm9kZS5xdWV1ZTtcbiAgICBsZXQgYmxvY2sgPSBub2RlO1xuXG4gICAgd2hpbGUgKGJsb2NrLnR5cGUgIT09ICdicmFjZScgJiYgYmxvY2sudHlwZSAhPT0gJ3Jvb3QnICYmIGJsb2NrLnBhcmVudCkge1xuICAgICAgYmxvY2sgPSBibG9jay5wYXJlbnQ7XG4gICAgICBxdWV1ZSA9IGJsb2NrLnF1ZXVlO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGNoaWxkID0gbm9kZS5ub2Rlc1tpXTtcblxuICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdjb21tYScgJiYgbm9kZS50eXBlID09PSAnYnJhY2UnKSB7XG4gICAgICAgIGlmIChpID09PSAxKSBxdWV1ZS5wdXNoKCcnKTtcbiAgICAgICAgcXVldWUucHVzaCgnJyk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ2Nsb3NlJykge1xuICAgICAgICBxLnB1c2goYXBwZW5kKHEucG9wKCksIHF1ZXVlLCBlbmNsb3NlKSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGQudmFsdWUgJiYgY2hpbGQudHlwZSAhPT0gJ29wZW4nKSB7XG4gICAgICAgIHF1ZXVlLnB1c2goYXBwZW5kKHF1ZXVlLnBvcCgpLCBjaGlsZC52YWx1ZSkpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoaWxkLm5vZGVzKSB7XG4gICAgICAgIHdhbGsoY2hpbGQsIG5vZGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBxdWV1ZTtcbiAgfTtcblxuICByZXR1cm4gdXRpbHMuZmxhdHRlbih3YWxrKGFzdCkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBhbmQ7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgTUFYX0xFTkdUSDogMTAyNCAqIDY0LFxuXG4gIC8vIERpZ2l0c1xuICBDSEFSXzA6ICcwJywgLyogMCAqL1xuICBDSEFSXzk6ICc5JywgLyogOSAqL1xuXG4gIC8vIEFscGhhYmV0IGNoYXJzLlxuICBDSEFSX1VQUEVSQ0FTRV9BOiAnQScsIC8qIEEgKi9cbiAgQ0hBUl9MT1dFUkNBU0VfQTogJ2EnLCAvKiBhICovXG4gIENIQVJfVVBQRVJDQVNFX1o6ICdaJywgLyogWiAqL1xuICBDSEFSX0xPV0VSQ0FTRV9aOiAneicsIC8qIHogKi9cblxuICBDSEFSX0xFRlRfUEFSRU5USEVTRVM6ICcoJywgLyogKCAqL1xuICBDSEFSX1JJR0hUX1BBUkVOVEhFU0VTOiAnKScsIC8qICkgKi9cblxuICBDSEFSX0FTVEVSSVNLOiAnKicsIC8qICogKi9cblxuICAvLyBOb24tYWxwaGFiZXRpYyBjaGFycy5cbiAgQ0hBUl9BTVBFUlNBTkQ6ICcmJywgLyogJiAqL1xuICBDSEFSX0FUOiAnQCcsIC8qIEAgKi9cbiAgQ0hBUl9CQUNLU0xBU0g6ICdcXFxcJywgLyogXFwgKi9cbiAgQ0hBUl9CQUNLVElDSzogJ2AnLCAvKiBgICovXG4gIENIQVJfQ0FSUklBR0VfUkVUVVJOOiAnXFxyJywgLyogXFxyICovXG4gIENIQVJfQ0lSQ1VNRkxFWF9BQ0NFTlQ6ICdeJywgLyogXiAqL1xuICBDSEFSX0NPTE9OOiAnOicsIC8qIDogKi9cbiAgQ0hBUl9DT01NQTogJywnLCAvKiAsICovXG4gIENIQVJfRE9MTEFSOiAnJCcsIC8qIC4gKi9cbiAgQ0hBUl9ET1Q6ICcuJywgLyogLiAqL1xuICBDSEFSX0RPVUJMRV9RVU9URTogJ1wiJywgLyogXCIgKi9cbiAgQ0hBUl9FUVVBTDogJz0nLCAvKiA9ICovXG4gIENIQVJfRVhDTEFNQVRJT05fTUFSSzogJyEnLCAvKiAhICovXG4gIENIQVJfRk9STV9GRUVEOiAnXFxmJywgLyogXFxmICovXG4gIENIQVJfRk9SV0FSRF9TTEFTSDogJy8nLCAvKiAvICovXG4gIENIQVJfSEFTSDogJyMnLCAvKiAjICovXG4gIENIQVJfSFlQSEVOX01JTlVTOiAnLScsIC8qIC0gKi9cbiAgQ0hBUl9MRUZUX0FOR0xFX0JSQUNLRVQ6ICc8JywgLyogPCAqL1xuICBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0U6ICd7JywgLyogeyAqL1xuICBDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVQ6ICdbJywgLyogWyAqL1xuICBDSEFSX0xJTkVfRkVFRDogJ1xcbicsIC8qIFxcbiAqL1xuICBDSEFSX05PX0JSRUFLX1NQQUNFOiAnXFx1MDBBMCcsIC8qIFxcdTAwQTAgKi9cbiAgQ0hBUl9QRVJDRU5UOiAnJScsIC8qICUgKi9cbiAgQ0hBUl9QTFVTOiAnKycsIC8qICsgKi9cbiAgQ0hBUl9RVUVTVElPTl9NQVJLOiAnPycsIC8qID8gKi9cbiAgQ0hBUl9SSUdIVF9BTkdMRV9CUkFDS0VUOiAnPicsIC8qID4gKi9cbiAgQ0hBUl9SSUdIVF9DVVJMWV9CUkFDRTogJ30nLCAvKiB9ICovXG4gIENIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVQ6ICddJywgLyogXSAqL1xuICBDSEFSX1NFTUlDT0xPTjogJzsnLCAvKiA7ICovXG4gIENIQVJfU0lOR0xFX1FVT1RFOiAnXFwnJywgLyogJyAqL1xuICBDSEFSX1NQQUNFOiAnICcsIC8qICAgKi9cbiAgQ0hBUl9UQUI6ICdcXHQnLCAvKiBcXHQgKi9cbiAgQ0hBUl9VTkRFUlNDT1JFOiAnXycsIC8qIF8gKi9cbiAgQ0hBUl9WRVJUSUNBTF9MSU5FOiAnfCcsIC8qIHwgKi9cbiAgQ0hBUl9aRVJPX1dJRFRIX05PQlJFQUtfU1BBQ0U6ICdcXHVGRUZGJyAvKiBcXHVGRUZGICovXG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9zdHJpbmdpZnknKTtcblxuLyoqXG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCB7XG4gIE1BWF9MRU5HVEgsXG4gIENIQVJfQkFDS1NMQVNILCAvKiBcXCAqL1xuICBDSEFSX0JBQ0tUSUNLLCAvKiBgICovXG4gIENIQVJfQ09NTUEsIC8qICwgKi9cbiAgQ0hBUl9ET1QsIC8qIC4gKi9cbiAgQ0hBUl9MRUZUX1BBUkVOVEhFU0VTLCAvKiAoICovXG4gIENIQVJfUklHSFRfUEFSRU5USEVTRVMsIC8qICkgKi9cbiAgQ0hBUl9MRUZUX0NVUkxZX0JSQUNFLCAvKiB7ICovXG4gIENIQVJfUklHSFRfQ1VSTFlfQlJBQ0UsIC8qIH0gKi9cbiAgQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VULCAvKiBbICovXG4gIENIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVQsIC8qIF0gKi9cbiAgQ0hBUl9ET1VCTEVfUVVPVEUsIC8qIFwiICovXG4gIENIQVJfU0lOR0xFX1FVT1RFLCAvKiAnICovXG4gIENIQVJfTk9fQlJFQUtfU1BBQ0UsXG4gIENIQVJfWkVST19XSURUSF9OT0JSRUFLX1NQQUNFXG59ID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcblxuLyoqXG4gKiBwYXJzZVxuICovXG5cbmNvbnN0IHBhcnNlID0gKGlucHV0LCBvcHRpb25zID0ge30pID0+IHtcbiAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhIHN0cmluZycpO1xuICB9XG5cbiAgbGV0IG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuICBsZXQgbWF4ID0gdHlwZW9mIG9wdHMubWF4TGVuZ3RoID09PSAnbnVtYmVyJyA/IE1hdGgubWluKE1BWF9MRU5HVEgsIG9wdHMubWF4TGVuZ3RoKSA6IE1BWF9MRU5HVEg7XG4gIGlmIChpbnB1dC5sZW5ndGggPiBtYXgpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYElucHV0IGxlbmd0aCAoJHtpbnB1dC5sZW5ndGh9KSwgZXhjZWVkcyBtYXggY2hhcmFjdGVycyAoJHttYXh9KWApO1xuICB9XG5cbiAgbGV0IGFzdCA9IHsgdHlwZTogJ3Jvb3QnLCBpbnB1dCwgbm9kZXM6IFtdIH07XG4gIGxldCBzdGFjayA9IFthc3RdO1xuICBsZXQgYmxvY2sgPSBhc3Q7XG4gIGxldCBwcmV2ID0gYXN0O1xuICBsZXQgYnJhY2tldHMgPSAwO1xuICBsZXQgbGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuICBsZXQgaW5kZXggPSAwO1xuICBsZXQgZGVwdGggPSAwO1xuICBsZXQgdmFsdWU7XG4gIGxldCBtZW1vID0ge307XG5cbiAgLyoqXG4gICAqIEhlbHBlcnNcbiAgICovXG5cbiAgY29uc3QgYWR2YW5jZSA9ICgpID0+IGlucHV0W2luZGV4KytdO1xuICBjb25zdCBwdXNoID0gbm9kZSA9PiB7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gJ3RleHQnICYmIHByZXYudHlwZSA9PT0gJ2RvdCcpIHtcbiAgICAgIHByZXYudHlwZSA9ICd0ZXh0JztcbiAgICB9XG5cbiAgICBpZiAocHJldiAmJiBwcmV2LnR5cGUgPT09ICd0ZXh0JyAmJiBub2RlLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgcHJldi52YWx1ZSArPSBub2RlLnZhbHVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGJsb2NrLm5vZGVzLnB1c2gobm9kZSk7XG4gICAgbm9kZS5wYXJlbnQgPSBibG9jaztcbiAgICBub2RlLnByZXYgPSBwcmV2O1xuICAgIHByZXYgPSBub2RlO1xuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIHB1c2goeyB0eXBlOiAnYm9zJyB9KTtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBibG9jayA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgIHZhbHVlID0gYWR2YW5jZSgpO1xuXG4gICAgLyoqXG4gICAgICogSW52YWxpZCBjaGFyc1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSBDSEFSX1pFUk9fV0lEVEhfTk9CUkVBS19TUEFDRSB8fCB2YWx1ZSA9PT0gQ0hBUl9OT19CUkVBS19TUEFDRSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlZCBjaGFyc1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSBDSEFSX0JBQ0tTTEFTSCkge1xuICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWU6IChvcHRpb25zLmtlZXBFc2NhcGluZyA/IHZhbHVlIDogJycpICsgYWR2YW5jZSgpIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmlnaHQgc3F1YXJlIGJyYWNrZXQgKGxpdGVyYWwpOiAnXSdcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVCkge1xuICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWU6ICdcXFxcJyArIHZhbHVlIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGVmdCBzcXVhcmUgYnJhY2tldDogJ1snXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09IENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVCkge1xuICAgICAgYnJhY2tldHMrKztcblxuICAgICAgbGV0IGNsb3NlZCA9IHRydWU7XG4gICAgICBsZXQgbmV4dDtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoICYmIChuZXh0ID0gYWR2YW5jZSgpKSkge1xuICAgICAgICB2YWx1ZSArPSBuZXh0O1xuXG4gICAgICAgIGlmIChuZXh0ID09PSBDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVQpIHtcbiAgICAgICAgICBicmFja2V0cysrO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHQgPT09IENIQVJfQkFDS1NMQVNIKSB7XG4gICAgICAgICAgdmFsdWUgKz0gYWR2YW5jZSgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHQgPT09IENIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVQpIHtcbiAgICAgICAgICBicmFja2V0cy0tO1xuXG4gICAgICAgICAgaWYgKGJyYWNrZXRzID09PSAwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJlbnRoZXNlc1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSBDSEFSX0xFRlRfUEFSRU5USEVTRVMpIHtcbiAgICAgIGJsb2NrID0gcHVzaCh7IHR5cGU6ICdwYXJlbicsIG5vZGVzOiBbXSB9KTtcbiAgICAgIHN0YWNrLnB1c2goYmxvY2spO1xuICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgPT09IENIQVJfUklHSFRfUEFSRU5USEVTRVMpIHtcbiAgICAgIGlmIChibG9jay50eXBlICE9PSAncGFyZW4nKSB7XG4gICAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGJsb2NrID0gc3RhY2sucG9wKCk7XG4gICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9KTtcbiAgICAgIGJsb2NrID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBRdW90ZXM6ICd8XCJ8YFxuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSBDSEFSX0RPVUJMRV9RVU9URSB8fCB2YWx1ZSA9PT0gQ0hBUl9TSU5HTEVfUVVPVEUgfHwgdmFsdWUgPT09IENIQVJfQkFDS1RJQ0spIHtcbiAgICAgIGxldCBvcGVuID0gdmFsdWU7XG4gICAgICBsZXQgbmV4dDtcblxuICAgICAgaWYgKG9wdGlvbnMua2VlcFF1b3RlcyAhPT0gdHJ1ZSkge1xuICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGggJiYgKG5leHQgPSBhZHZhbmNlKCkpKSB7XG4gICAgICAgIGlmIChuZXh0ID09PSBDSEFSX0JBQ0tTTEFTSCkge1xuICAgICAgICAgIHZhbHVlICs9IG5leHQgKyBhZHZhbmNlKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dCA9PT0gb3Blbikge1xuICAgICAgICAgIGlmIChvcHRpb25zLmtlZXBRdW90ZXMgPT09IHRydWUpIHZhbHVlICs9IG5leHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB2YWx1ZSArPSBuZXh0O1xuICAgICAgfVxuXG4gICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExlZnQgY3VybHkgYnJhY2U6ICd7J1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0UpIHtcbiAgICAgIGRlcHRoKys7XG5cbiAgICAgIGxldCBkb2xsYXIgPSBwcmV2LnZhbHVlICYmIHByZXYudmFsdWUuc2xpY2UoLTEpID09PSAnJCcgfHwgYmxvY2suZG9sbGFyID09PSB0cnVlO1xuICAgICAgbGV0IGJyYWNlID0ge1xuICAgICAgICB0eXBlOiAnYnJhY2UnLFxuICAgICAgICBvcGVuOiB0cnVlLFxuICAgICAgICBjbG9zZTogZmFsc2UsXG4gICAgICAgIGRvbGxhcixcbiAgICAgICAgZGVwdGgsXG4gICAgICAgIGNvbW1hczogMCxcbiAgICAgICAgcmFuZ2VzOiAwLFxuICAgICAgICBub2RlczogW11cbiAgICAgIH07XG5cbiAgICAgIGJsb2NrID0gcHVzaChicmFjZSk7XG4gICAgICBzdGFjay5wdXNoKGJsb2NrKTtcbiAgICAgIHB1c2goeyB0eXBlOiAnb3BlbicsIHZhbHVlIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmlnaHQgY3VybHkgYnJhY2U6ICd9J1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSBDSEFSX1JJR0hUX0NVUkxZX0JSQUNFKSB7XG4gICAgICBpZiAoYmxvY2sudHlwZSAhPT0gJ2JyYWNlJykge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGxldCB0eXBlID0gJ2Nsb3NlJztcbiAgICAgIGJsb2NrID0gc3RhY2sucG9wKCk7XG4gICAgICBibG9jay5jbG9zZSA9IHRydWU7XG5cbiAgICAgIHB1c2goeyB0eXBlLCB2YWx1ZSB9KTtcbiAgICAgIGRlcHRoLS07XG5cbiAgICAgIGJsb2NrID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21tYTogJywnXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09IENIQVJfQ09NTUEgJiYgZGVwdGggPiAwKSB7XG4gICAgICBpZiAoYmxvY2sucmFuZ2VzID4gMCkge1xuICAgICAgICBibG9jay5yYW5nZXMgPSAwO1xuICAgICAgICBsZXQgb3BlbiA9IGJsb2NrLm5vZGVzLnNoaWZ0KCk7XG4gICAgICAgIGJsb2NrLm5vZGVzID0gW29wZW4sIHsgdHlwZTogJ3RleHQnLCB2YWx1ZTogc3RyaW5naWZ5KGJsb2NrKSB9XTtcbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICdjb21tYScsIHZhbHVlIH0pO1xuICAgICAgYmxvY2suY29tbWFzKys7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEb3Q6ICcuJ1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSBDSEFSX0RPVCAmJiBkZXB0aCA+IDAgJiYgYmxvY2suY29tbWFzID09PSAwKSB7XG4gICAgICBsZXQgc2libGluZ3MgPSBibG9jay5ub2RlcztcblxuICAgICAgaWYgKGRlcHRoID09PSAwIHx8IHNpYmxpbmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmV2LnR5cGUgPT09ICdkb3QnKSB7XG4gICAgICAgIGJsb2NrLnJhbmdlID0gW107XG4gICAgICAgIHByZXYudmFsdWUgKz0gdmFsdWU7XG4gICAgICAgIHByZXYudHlwZSA9ICdyYW5nZSc7XG5cbiAgICAgICAgaWYgKGJsb2NrLm5vZGVzLmxlbmd0aCAhPT0gMyAmJiBibG9jay5ub2Rlcy5sZW5ndGggIT09IDUpIHtcbiAgICAgICAgICBibG9jay5pbnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICBibG9jay5yYW5nZXMgPSAwO1xuICAgICAgICAgIHByZXYudHlwZSA9ICd0ZXh0JztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJsb2NrLnJhbmdlcysrO1xuICAgICAgICBibG9jay5hcmdzID0gW107XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJldi50eXBlID09PSAncmFuZ2UnKSB7XG4gICAgICAgIHNpYmxpbmdzLnBvcCgpO1xuXG4gICAgICAgIGxldCBiZWZvcmUgPSBzaWJsaW5nc1tzaWJsaW5ncy5sZW5ndGggLSAxXTtcbiAgICAgICAgYmVmb3JlLnZhbHVlICs9IHByZXYudmFsdWUgKyB2YWx1ZTtcbiAgICAgICAgcHJldiA9IGJlZm9yZTtcbiAgICAgICAgYmxvY2sucmFuZ2VzLS07XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBwdXNoKHsgdHlwZTogJ2RvdCcsIHZhbHVlIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGV4dFxuICAgICAqL1xuXG4gICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gIH1cblxuICAvLyBNYXJrIGltYmFsYW5jZWQgYnJhY2VzIGFuZCBicmFja2V0cyBhcyBpbnZhbGlkXG4gIGRvIHtcbiAgICBibG9jayA9IHN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKGJsb2NrLnR5cGUgIT09ICdyb290Jykge1xuICAgICAgYmxvY2subm9kZXMuZm9yRWFjaChub2RlID0+IHtcbiAgICAgICAgaWYgKCFub2RlLm5vZGVzKSB7XG4gICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ29wZW4nKSBub2RlLmlzT3BlbiA9IHRydWU7XG4gICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ2Nsb3NlJykgbm9kZS5pc0Nsb3NlID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoIW5vZGUubm9kZXMpIG5vZGUudHlwZSA9ICd0ZXh0JztcbiAgICAgICAgICBub2RlLmludmFsaWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gZ2V0IHRoZSBsb2NhdGlvbiBvZiB0aGUgYmxvY2sgb24gcGFyZW50Lm5vZGVzIChibG9jaydzIHNpYmxpbmdzKVxuICAgICAgbGV0IHBhcmVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgbGV0IGluZGV4ID0gcGFyZW50Lm5vZGVzLmluZGV4T2YoYmxvY2spO1xuICAgICAgLy8gcmVwbGFjZSB0aGUgKGludmFsaWQpIGJsb2NrIHdpdGggaXQncyBub2Rlc1xuICAgICAgcGFyZW50Lm5vZGVzLnNwbGljZShpbmRleCwgMSwgLi4uYmxvY2subm9kZXMpO1xuICAgIH1cbiAgfSB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCk7XG5cbiAgcHVzaCh7IHR5cGU6ICdlb3MnIH0pO1xuICByZXR1cm4gYXN0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vbGliL3N0cmluZ2lmeScpO1xuY29uc3QgY29tcGlsZSA9IHJlcXVpcmUoJy4vbGliL2NvbXBpbGUnKTtcbmNvbnN0IGV4cGFuZCA9IHJlcXVpcmUoJy4vbGliL2V4cGFuZCcpO1xuY29uc3QgcGFyc2UgPSByZXF1aXJlKCcuL2xpYi9wYXJzZScpO1xuXG4vKipcbiAqIEV4cGFuZCB0aGUgZ2l2ZW4gcGF0dGVybiBvciBjcmVhdGUgYSByZWdleC1jb21wYXRpYmxlIHN0cmluZy5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgYnJhY2VzID0gcmVxdWlyZSgnYnJhY2VzJyk7XG4gKiBjb25zb2xlLmxvZyhicmFjZXMoJ3thLGIsY30nLCB7IGNvbXBpbGU6IHRydWUgfSkpOyAvLz0+IFsnKGF8YnxjKSddXG4gKiBjb25zb2xlLmxvZyhicmFjZXMoJ3thLGIsY30nKSk7IC8vPT4gWydhJywgJ2InLCAnYyddXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgc3RyYFxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5jb25zdCBicmFjZXMgPSAoaW5wdXQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBsZXQgb3V0cHV0ID0gW107XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgZm9yIChsZXQgcGF0dGVybiBvZiBpbnB1dCkge1xuICAgICAgbGV0IHJlc3VsdCA9IGJyYWNlcy5jcmVhdGUocGF0dGVybiwgb3B0aW9ucyk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG4gICAgICAgIG91dHB1dC5wdXNoKC4uLnJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXQucHVzaChyZXN1bHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBbXS5jb25jYXQoYnJhY2VzLmNyZWF0ZShpbnB1dCwgb3B0aW9ucykpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5leHBhbmQgPT09IHRydWUgJiYgb3B0aW9ucy5ub2R1cGVzID09PSB0cnVlKSB7XG4gICAgb3V0cHV0ID0gWy4uLm5ldyBTZXQob3V0cHV0KV07XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIHdpdGggdGhlIGdpdmVuIGBvcHRpb25zYC5cbiAqXG4gKiBgYGBqc1xuICogLy8gYnJhY2VzLnBhcnNlKHBhdHRlcm4sIFssIG9wdGlvbnNdKTtcbiAqIGNvbnN0IGFzdCA9IGJyYWNlcy5wYXJzZSgnYS97YixjfS9kJyk7XG4gKiBjb25zb2xlLmxvZyhhc3QpO1xuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0dGVybiBCcmFjZSBwYXR0ZXJuIHRvIHBhcnNlXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fSBSZXR1cm5zIGFuIEFTVFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5icmFjZXMucGFyc2UgPSAoaW5wdXQsIG9wdGlvbnMgPSB7fSkgPT4gcGFyc2UoaW5wdXQsIG9wdGlvbnMpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBicmFjZXMgc3RyaW5nIGZyb20gYW4gQVNULCBvciBhbiBBU1Qgbm9kZS5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgYnJhY2VzID0gcmVxdWlyZSgnYnJhY2VzJyk7XG4gKiBsZXQgYXN0ID0gYnJhY2VzLnBhcnNlKCdmb28ve2EsYn0vYmFyJyk7XG4gKiBjb25zb2xlLmxvZyhzdHJpbmdpZnkoYXN0Lm5vZGVzWzJdKSk7IC8vPT4gJ3thLGJ9J1xuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYGlucHV0YCBCcmFjZSBwYXR0ZXJuIG9yIEFTVC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2BcbiAqIEByZXR1cm4ge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIGV4cGFuZGVkIHZhbHVlcy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuYnJhY2VzLnN0cmluZ2lmeSA9IChpbnB1dCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeShicmFjZXMucGFyc2UoaW5wdXQsIG9wdGlvbnMpLCBvcHRpb25zKTtcbiAgfVxuICByZXR1cm4gc3RyaW5naWZ5KGlucHV0LCBvcHRpb25zKTtcbn07XG5cbi8qKlxuICogQ29tcGlsZXMgYSBicmFjZSBwYXR0ZXJuIGludG8gYSByZWdleC1jb21wYXRpYmxlLCBvcHRpbWl6ZWQgc3RyaW5nLlxuICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIGJ5IHRoZSBtYWluIFticmFjZXNdKCNicmFjZXMpIGZ1bmN0aW9uIGJ5IGRlZmF1bHQuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGJyYWNlcyA9IHJlcXVpcmUoJ2JyYWNlcycpO1xuICogY29uc29sZS5sb2coYnJhY2VzLmNvbXBpbGUoJ2Eve2IsY30vZCcpKTtcbiAqIC8vPT4gWydhLyhifGMpL2QnXVxuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYGlucHV0YCBCcmFjZSBwYXR0ZXJuIG9yIEFTVC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2BcbiAqIEByZXR1cm4ge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIGV4cGFuZGVkIHZhbHVlcy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuYnJhY2VzLmNvbXBpbGUgPSAoaW5wdXQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgIGlucHV0ID0gYnJhY2VzLnBhcnNlKGlucHV0LCBvcHRpb25zKTtcbiAgfVxuICByZXR1cm4gY29tcGlsZShpbnB1dCwgb3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIEV4cGFuZHMgYSBicmFjZSBwYXR0ZXJuIGludG8gYW4gYXJyYXkuIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBieSB0aGVcbiAqIG1haW4gW2JyYWNlc10oI2JyYWNlcykgZnVuY3Rpb24gd2hlbiBgb3B0aW9ucy5leHBhbmRgIGlzIHRydWUuIEJlZm9yZVxuICogdXNpbmcgdGhpcyBtZXRob2QgaXQncyByZWNvbW1lbmRlZCB0aGF0IHlvdSByZWFkIHRoZSBbcGVyZm9ybWFuY2Ugbm90ZXNdKCNwZXJmb3JtYW5jZSkpXG4gKiBhbmQgYWR2YW50YWdlcyBvZiB1c2luZyBbLmNvbXBpbGVdKCNjb21waWxlKSBpbnN0ZWFkLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBicmFjZXMgPSByZXF1aXJlKCdicmFjZXMnKTtcbiAqIGNvbnNvbGUubG9nKGJyYWNlcy5leHBhbmQoJ2Eve2IsY30vZCcpKTtcbiAqIC8vPT4gWydhL2IvZCcsICdhL2MvZCddO1xuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYHBhdHRlcm5gIEJyYWNlIHBhdHRlcm5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2BcbiAqIEByZXR1cm4ge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIGV4cGFuZGVkIHZhbHVlcy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuYnJhY2VzLmV4cGFuZCA9IChpbnB1dCwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgaW5wdXQgPSBicmFjZXMucGFyc2UoaW5wdXQsIG9wdGlvbnMpO1xuICB9XG5cbiAgbGV0IHJlc3VsdCA9IGV4cGFuZChpbnB1dCwgb3B0aW9ucyk7XG5cbiAgLy8gZmlsdGVyIG91dCBlbXB0eSBzdHJpbmdzIGlmIHNwZWNpZmllZFxuICBpZiAob3B0aW9ucy5ub2VtcHR5ID09PSB0cnVlKSB7XG4gICAgcmVzdWx0ID0gcmVzdWx0LmZpbHRlcihCb29sZWFuKTtcbiAgfVxuXG4gIC8vIGZpbHRlciBvdXQgZHVwbGljYXRlcyBpZiBzcGVjaWZpZWRcbiAgaWYgKG9wdGlvbnMubm9kdXBlcyA9PT0gdHJ1ZSkge1xuICAgIHJlc3VsdCA9IFsuLi5uZXcgU2V0KHJlc3VsdCldO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogUHJvY2Vzc2VzIGEgYnJhY2UgcGF0dGVybiBhbmQgcmV0dXJucyBlaXRoZXIgYW4gZXhwYW5kZWQgYXJyYXlcbiAqIChpZiBgb3B0aW9ucy5leHBhbmRgIGlzIHRydWUpLCBhIGhpZ2hseSBvcHRpbWl6ZWQgcmVnZXgtY29tcGF0aWJsZSBzdHJpbmcuXG4gKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYnkgdGhlIG1haW4gW2JyYWNlc10oI2JyYWNlcykgZnVuY3Rpb24uXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGJyYWNlcyA9IHJlcXVpcmUoJ2JyYWNlcycpO1xuICogY29uc29sZS5sb2coYnJhY2VzLmNyZWF0ZSgndXNlci17MjAwLi4zMDB9L3Byb2plY3Qte2EsYixjfS17MS4uMTB9JykpXG4gKiAvLz0+ICd1c2VyLSgyMFswLTldfDJbMS05XVswLTldfDMwMCkvcHJvamVjdC0oYXxifGMpLShbMS05XXwxMCknXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgcGF0dGVybmAgQnJhY2UgcGF0dGVyblxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgZXhwYW5kZWQgdmFsdWVzLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5icmFjZXMuY3JlYXRlID0gKGlucHV0LCBvcHRpb25zID0ge30pID0+IHtcbiAgaWYgKGlucHV0ID09PSAnJyB8fCBpbnB1dC5sZW5ndGggPCAzKSB7XG4gICAgcmV0dXJuIFtpbnB1dF07XG4gIH1cblxuIHJldHVybiBvcHRpb25zLmV4cGFuZCAhPT0gdHJ1ZVxuICAgID8gYnJhY2VzLmNvbXBpbGUoaW5wdXQsIG9wdGlvbnMpXG4gICAgOiBicmFjZXMuZXhwYW5kKGlucHV0LCBvcHRpb25zKTtcbn07XG5cbi8qKlxuICogRXhwb3NlIFwiYnJhY2VzXCJcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJyYWNlcztcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBXSU5fU0xBU0ggPSAnXFxcXFxcXFwvJztcbmNvbnN0IFdJTl9OT19TTEFTSCA9IGBbXiR7V0lOX1NMQVNIfV1gO1xuXG4vKipcbiAqIFBvc2l4IGdsb2IgcmVnZXhcbiAqL1xuXG5jb25zdCBET1RfTElURVJBTCA9ICdcXFxcLic7XG5jb25zdCBQTFVTX0xJVEVSQUwgPSAnXFxcXCsnO1xuY29uc3QgUU1BUktfTElURVJBTCA9ICdcXFxcPyc7XG5jb25zdCBTTEFTSF9MSVRFUkFMID0gJ1xcXFwvJztcbmNvbnN0IE9ORV9DSEFSID0gJyg/PS4pJztcbmNvbnN0IFFNQVJLID0gJ1teL10nO1xuY29uc3QgRU5EX0FOQ0hPUiA9IGAoPzoke1NMQVNIX0xJVEVSQUx9fCQpYDtcbmNvbnN0IFNUQVJUX0FOQ0hPUiA9IGAoPzpefCR7U0xBU0hfTElURVJBTH0pYDtcbmNvbnN0IERPVFNfU0xBU0ggPSBgJHtET1RfTElURVJBTH17MSwyfSR7RU5EX0FOQ0hPUn1gO1xuY29uc3QgTk9fRE9UID0gYCg/ISR7RE9UX0xJVEVSQUx9KWA7XG5jb25zdCBOT19ET1RTID0gYCg/ISR7U1RBUlRfQU5DSE9SfSR7RE9UU19TTEFTSH0pYDtcbmNvbnN0IE5PX0RPVF9TTEFTSCA9IGAoPyEke0RPVF9MSVRFUkFMfXswLDF9JHtFTkRfQU5DSE9SfSlgO1xuY29uc3QgTk9fRE9UU19TTEFTSCA9IGAoPyEke0RPVFNfU0xBU0h9KWA7XG5jb25zdCBRTUFSS19OT19ET1QgPSBgW14uJHtTTEFTSF9MSVRFUkFMfV1gO1xuY29uc3QgU1RBUiA9IGAke1FNQVJLfSo/YDtcblxuY29uc3QgUE9TSVhfQ0hBUlMgPSB7XG4gIERPVF9MSVRFUkFMLFxuICBQTFVTX0xJVEVSQUwsXG4gIFFNQVJLX0xJVEVSQUwsXG4gIFNMQVNIX0xJVEVSQUwsXG4gIE9ORV9DSEFSLFxuICBRTUFSSyxcbiAgRU5EX0FOQ0hPUixcbiAgRE9UU19TTEFTSCxcbiAgTk9fRE9ULFxuICBOT19ET1RTLFxuICBOT19ET1RfU0xBU0gsXG4gIE5PX0RPVFNfU0xBU0gsXG4gIFFNQVJLX05PX0RPVCxcbiAgU1RBUixcbiAgU1RBUlRfQU5DSE9SXG59O1xuXG4vKipcbiAqIFdpbmRvd3MgZ2xvYiByZWdleFxuICovXG5cbmNvbnN0IFdJTkRPV1NfQ0hBUlMgPSB7XG4gIC4uLlBPU0lYX0NIQVJTLFxuXG4gIFNMQVNIX0xJVEVSQUw6IGBbJHtXSU5fU0xBU0h9XWAsXG4gIFFNQVJLOiBXSU5fTk9fU0xBU0gsXG4gIFNUQVI6IGAke1dJTl9OT19TTEFTSH0qP2AsXG4gIERPVFNfU0xBU0g6IGAke0RPVF9MSVRFUkFMfXsxLDJ9KD86WyR7V0lOX1NMQVNIfV18JClgLFxuICBOT19ET1Q6IGAoPyEke0RPVF9MSVRFUkFMfSlgLFxuICBOT19ET1RTOiBgKD8hKD86XnxbJHtXSU5fU0xBU0h9XSkke0RPVF9MSVRFUkFMfXsxLDJ9KD86WyR7V0lOX1NMQVNIfV18JCkpYCxcbiAgTk9fRE9UX1NMQVNIOiBgKD8hJHtET1RfTElURVJBTH17MCwxfSg/Olske1dJTl9TTEFTSH1dfCQpKWAsXG4gIE5PX0RPVFNfU0xBU0g6IGAoPyEke0RPVF9MSVRFUkFMfXsxLDJ9KD86WyR7V0lOX1NMQVNIfV18JCkpYCxcbiAgUU1BUktfTk9fRE9UOiBgW14uJHtXSU5fU0xBU0h9XWAsXG4gIFNUQVJUX0FOQ0hPUjogYCg/Ol58WyR7V0lOX1NMQVNIfV0pYCxcbiAgRU5EX0FOQ0hPUjogYCg/Olske1dJTl9TTEFTSH1dfCQpYFxufTtcblxuLyoqXG4gKiBQT1NJWCBCcmFja2V0IFJlZ2V4XG4gKi9cblxuY29uc3QgUE9TSVhfUkVHRVhfU09VUkNFID0ge1xuICBhbG51bTogJ2EtekEtWjAtOScsXG4gIGFscGhhOiAnYS16QS1aJyxcbiAgYXNjaWk6ICdcXFxceDAwLVxcXFx4N0YnLFxuICBibGFuazogJyBcXFxcdCcsXG4gIGNudHJsOiAnXFxcXHgwMC1cXFxceDFGXFxcXHg3RicsXG4gIGRpZ2l0OiAnMC05JyxcbiAgZ3JhcGg6ICdcXFxceDIxLVxcXFx4N0UnLFxuICBsb3dlcjogJ2EteicsXG4gIHByaW50OiAnXFxcXHgyMC1cXFxceDdFICcsXG4gIHB1bmN0OiAnXFxcXC0hXCIjJCUmXFwnKClcXFxcKissLi86Ozw9Pj9AW1xcXFxdXl9ge3x9ficsXG4gIHNwYWNlOiAnIFxcXFx0XFxcXHJcXFxcblxcXFx2XFxcXGYnLFxuICB1cHBlcjogJ0EtWicsXG4gIHdvcmQ6ICdBLVphLXowLTlfJyxcbiAgeGRpZ2l0OiAnQS1GYS1mMC05J1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIE1BWF9MRU5HVEg6IDEwMjQgKiA2NCxcbiAgUE9TSVhfUkVHRVhfU09VUkNFLFxuXG4gIC8vIHJlZ3VsYXIgZXhwcmVzc2lvbnNcbiAgUkVHRVhfQkFDS1NMQVNIOiAvXFxcXCg/IVsqKz9eJHt9KHwpW1xcXV0pL2csXG4gIFJFR0VYX05PTl9TUEVDSUFMX0NIQVJTOiAvXlteQCFbXFxdLiwkKis/Xnt9KCl8XFxcXC9dKy8sXG4gIFJFR0VYX1NQRUNJQUxfQ0hBUlM6IC9bLSorPy5eJHt9KHwpW1xcXV0vLFxuICBSRUdFWF9TUEVDSUFMX0NIQVJTX0JBQ0tSRUY6IC8oXFxcXD8pKChcXFcpKFxcMyopKS9nLFxuICBSRUdFWF9TUEVDSUFMX0NIQVJTX0dMT0JBTDogLyhbLSorPy5eJHt9KHwpW1xcXV0pL2csXG4gIFJFR0VYX1JFTU9WRV9CQUNLU0xBU0g6IC8oPzpcXFsuKj9bXlxcXFxdXFxdfFxcXFwoPz0uKSkvZyxcblxuICAvLyBSZXBsYWNlIGdsb2JzIHdpdGggZXF1aXZhbGVudCBwYXR0ZXJucyB0byByZWR1Y2UgcGFyc2luZyB0aW1lLlxuICBSRVBMQUNFTUVOVFM6IHtcbiAgICAnKioqJzogJyonLFxuICAgICcqKi8qKic6ICcqKicsXG4gICAgJyoqLyoqLyoqJzogJyoqJ1xuICB9LFxuXG4gIC8vIERpZ2l0c1xuICBDSEFSXzA6IDQ4LCAvKiAwICovXG4gIENIQVJfOTogNTcsIC8qIDkgKi9cblxuICAvLyBBbHBoYWJldCBjaGFycy5cbiAgQ0hBUl9VUFBFUkNBU0VfQTogNjUsIC8qIEEgKi9cbiAgQ0hBUl9MT1dFUkNBU0VfQTogOTcsIC8qIGEgKi9cbiAgQ0hBUl9VUFBFUkNBU0VfWjogOTAsIC8qIFogKi9cbiAgQ0hBUl9MT1dFUkNBU0VfWjogMTIyLCAvKiB6ICovXG5cbiAgQ0hBUl9MRUZUX1BBUkVOVEhFU0VTOiA0MCwgLyogKCAqL1xuICBDSEFSX1JJR0hUX1BBUkVOVEhFU0VTOiA0MSwgLyogKSAqL1xuXG4gIENIQVJfQVNURVJJU0s6IDQyLCAvKiAqICovXG5cbiAgLy8gTm9uLWFscGhhYmV0aWMgY2hhcnMuXG4gIENIQVJfQU1QRVJTQU5EOiAzOCwgLyogJiAqL1xuICBDSEFSX0FUOiA2NCwgLyogQCAqL1xuICBDSEFSX0JBQ0tXQVJEX1NMQVNIOiA5MiwgLyogXFwgKi9cbiAgQ0hBUl9DQVJSSUFHRV9SRVRVUk46IDEzLCAvKiBcXHIgKi9cbiAgQ0hBUl9DSVJDVU1GTEVYX0FDQ0VOVDogOTQsIC8qIF4gKi9cbiAgQ0hBUl9DT0xPTjogNTgsIC8qIDogKi9cbiAgQ0hBUl9DT01NQTogNDQsIC8qICwgKi9cbiAgQ0hBUl9ET1Q6IDQ2LCAvKiAuICovXG4gIENIQVJfRE9VQkxFX1FVT1RFOiAzNCwgLyogXCIgKi9cbiAgQ0hBUl9FUVVBTDogNjEsIC8qID0gKi9cbiAgQ0hBUl9FWENMQU1BVElPTl9NQVJLOiAzMywgLyogISAqL1xuICBDSEFSX0ZPUk1fRkVFRDogMTIsIC8qIFxcZiAqL1xuICBDSEFSX0ZPUldBUkRfU0xBU0g6IDQ3LCAvKiAvICovXG4gIENIQVJfR1JBVkVfQUNDRU5UOiA5NiwgLyogYCAqL1xuICBDSEFSX0hBU0g6IDM1LCAvKiAjICovXG4gIENIQVJfSFlQSEVOX01JTlVTOiA0NSwgLyogLSAqL1xuICBDSEFSX0xFRlRfQU5HTEVfQlJBQ0tFVDogNjAsIC8qIDwgKi9cbiAgQ0hBUl9MRUZUX0NVUkxZX0JSQUNFOiAxMjMsIC8qIHsgKi9cbiAgQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VUOiA5MSwgLyogWyAqL1xuICBDSEFSX0xJTkVfRkVFRDogMTAsIC8qIFxcbiAqL1xuICBDSEFSX05PX0JSRUFLX1NQQUNFOiAxNjAsIC8qIFxcdTAwQTAgKi9cbiAgQ0hBUl9QRVJDRU5UOiAzNywgLyogJSAqL1xuICBDSEFSX1BMVVM6IDQzLCAvKiArICovXG4gIENIQVJfUVVFU1RJT05fTUFSSzogNjMsIC8qID8gKi9cbiAgQ0hBUl9SSUdIVF9BTkdMRV9CUkFDS0VUOiA2MiwgLyogPiAqL1xuICBDSEFSX1JJR0hUX0NVUkxZX0JSQUNFOiAxMjUsIC8qIH0gKi9cbiAgQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVDogOTMsIC8qIF0gKi9cbiAgQ0hBUl9TRU1JQ09MT046IDU5LCAvKiA7ICovXG4gIENIQVJfU0lOR0xFX1FVT1RFOiAzOSwgLyogJyAqL1xuICBDSEFSX1NQQUNFOiAzMiwgLyogICAqL1xuICBDSEFSX1RBQjogOSwgLyogXFx0ICovXG4gIENIQVJfVU5ERVJTQ09SRTogOTUsIC8qIF8gKi9cbiAgQ0hBUl9WRVJUSUNBTF9MSU5FOiAxMjQsIC8qIHwgKi9cbiAgQ0hBUl9aRVJPX1dJRFRIX05PQlJFQUtfU1BBQ0U6IDY1Mjc5LCAvKiBcXHVGRUZGICovXG5cbiAgU0VQOiBwYXRoLnNlcCxcblxuICAvKipcbiAgICogQ3JlYXRlIEVYVEdMT0JfQ0hBUlNcbiAgICovXG5cbiAgZXh0Z2xvYkNoYXJzKGNoYXJzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICchJzogeyB0eXBlOiAnbmVnYXRlJywgb3BlbjogJyg/Oig/ISg/OicsIGNsb3NlOiBgKSkke2NoYXJzLlNUQVJ9KWAgfSxcbiAgICAgICc/JzogeyB0eXBlOiAncW1hcmsnLCBvcGVuOiAnKD86JywgY2xvc2U6ICcpPycgfSxcbiAgICAgICcrJzogeyB0eXBlOiAncGx1cycsIG9wZW46ICcoPzonLCBjbG9zZTogJykrJyB9LFxuICAgICAgJyonOiB7IHR5cGU6ICdzdGFyJywgb3BlbjogJyg/OicsIGNsb3NlOiAnKSonIH0sXG4gICAgICAnQCc6IHsgdHlwZTogJ2F0Jywgb3BlbjogJyg/OicsIGNsb3NlOiAnKScgfVxuICAgIH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBHTE9CX0NIQVJTXG4gICAqL1xuXG4gIGdsb2JDaGFycyh3aW4zMikge1xuICAgIHJldHVybiB3aW4zMiA9PT0gdHJ1ZSA/IFdJTkRPV1NfQ0hBUlMgOiBQT1NJWF9DSEFSUztcbiAgfVxufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB3aW4zMiA9IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMic7XG5jb25zdCB7XG4gIFJFR0VYX0JBQ0tTTEFTSCxcbiAgUkVHRVhfUkVNT1ZFX0JBQ0tTTEFTSCxcbiAgUkVHRVhfU1BFQ0lBTF9DSEFSUyxcbiAgUkVHRVhfU1BFQ0lBTF9DSEFSU19HTE9CQUxcbn0gPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuXG5leHBvcnRzLmlzT2JqZWN0ID0gdmFsID0+IHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2YWwpO1xuZXhwb3J0cy5oYXNSZWdleENoYXJzID0gc3RyID0+IFJFR0VYX1NQRUNJQUxfQ0hBUlMudGVzdChzdHIpO1xuZXhwb3J0cy5pc1JlZ2V4Q2hhciA9IHN0ciA9PiBzdHIubGVuZ3RoID09PSAxICYmIGV4cG9ydHMuaGFzUmVnZXhDaGFycyhzdHIpO1xuZXhwb3J0cy5lc2NhcGVSZWdleCA9IHN0ciA9PiBzdHIucmVwbGFjZShSRUdFWF9TUEVDSUFMX0NIQVJTX0dMT0JBTCwgJ1xcXFwkMScpO1xuZXhwb3J0cy50b1Bvc2l4U2xhc2hlcyA9IHN0ciA9PiBzdHIucmVwbGFjZShSRUdFWF9CQUNLU0xBU0gsICcvJyk7XG5cbmV4cG9ydHMucmVtb3ZlQmFja3NsYXNoZXMgPSBzdHIgPT4ge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoUkVHRVhfUkVNT1ZFX0JBQ0tTTEFTSCwgbWF0Y2ggPT4ge1xuICAgIHJldHVybiBtYXRjaCA9PT0gJ1xcXFwnID8gJycgOiBtYXRjaDtcbiAgfSk7XG59O1xuXG5leHBvcnRzLnN1cHBvcnRzTG9va2JlaGluZHMgPSAoKSA9PiB7XG4gIGNvbnN0IHNlZ3MgPSBwcm9jZXNzLnZlcnNpb24uc2xpY2UoMSkuc3BsaXQoJy4nKS5tYXAoTnVtYmVyKTtcbiAgaWYgKHNlZ3MubGVuZ3RoID09PSAzICYmIHNlZ3NbMF0gPj0gOSB8fCAoc2Vnc1swXSA9PT0gOCAmJiBzZWdzWzFdID49IDEwKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydHMuaXNXaW5kb3dzID0gb3B0aW9ucyA9PiB7XG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLndpbmRvd3MgPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiBvcHRpb25zLndpbmRvd3M7XG4gIH1cbiAgcmV0dXJuIHdpbjMyID09PSB0cnVlIHx8IHBhdGguc2VwID09PSAnXFxcXCc7XG59O1xuXG5leHBvcnRzLmVzY2FwZUxhc3QgPSAoaW5wdXQsIGNoYXIsIGxhc3RJZHgpID0+IHtcbiAgY29uc3QgaWR4ID0gaW5wdXQubGFzdEluZGV4T2YoY2hhciwgbGFzdElkeCk7XG4gIGlmIChpZHggPT09IC0xKSByZXR1cm4gaW5wdXQ7XG4gIGlmIChpbnB1dFtpZHggLSAxXSA9PT0gJ1xcXFwnKSByZXR1cm4gZXhwb3J0cy5lc2NhcGVMYXN0KGlucHV0LCBjaGFyLCBpZHggLSAxKTtcbiAgcmV0dXJuIGAke2lucHV0LnNsaWNlKDAsIGlkeCl9XFxcXCR7aW5wdXQuc2xpY2UoaWR4KX1gO1xufTtcblxuZXhwb3J0cy5yZW1vdmVQcmVmaXggPSAoaW5wdXQsIHN0YXRlID0ge30pID0+IHtcbiAgbGV0IG91dHB1dCA9IGlucHV0O1xuICBpZiAob3V0cHV0LnN0YXJ0c1dpdGgoJy4vJykpIHtcbiAgICBvdXRwdXQgPSBvdXRwdXQuc2xpY2UoMik7XG4gICAgc3RhdGUucHJlZml4ID0gJy4vJztcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufTtcblxuZXhwb3J0cy53cmFwT3V0cHV0ID0gKGlucHV0LCBzdGF0ZSA9IHt9LCBvcHRpb25zID0ge30pID0+IHtcbiAgY29uc3QgcHJlcGVuZCA9IG9wdGlvbnMuY29udGFpbnMgPyAnJyA6ICdeJztcbiAgY29uc3QgYXBwZW5kID0gb3B0aW9ucy5jb250YWlucyA/ICcnIDogJyQnO1xuXG4gIGxldCBvdXRwdXQgPSBgJHtwcmVwZW5kfSg/OiR7aW5wdXR9KSR7YXBwZW5kfWA7XG4gIGlmIChzdGF0ZS5uZWdhdGVkID09PSB0cnVlKSB7XG4gICAgb3V0cHV0ID0gYCg/Ol4oPyEke291dHB1dH0pLiokKWA7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbmNvbnN0IHtcbiAgQ0hBUl9BU1RFUklTSywgICAgICAgICAgICAgLyogKiAqL1xuICBDSEFSX0FULCAgICAgICAgICAgICAgICAgICAvKiBAICovXG4gIENIQVJfQkFDS1dBUkRfU0xBU0gsICAgICAgIC8qIFxcICovXG4gIENIQVJfQ09NTUEsICAgICAgICAgICAgICAgIC8qICwgKi9cbiAgQ0hBUl9ET1QsICAgICAgICAgICAgICAgICAgLyogLiAqL1xuICBDSEFSX0VYQ0xBTUFUSU9OX01BUkssICAgICAvKiAhICovXG4gIENIQVJfRk9SV0FSRF9TTEFTSCwgICAgICAgIC8qIC8gKi9cbiAgQ0hBUl9MRUZUX0NVUkxZX0JSQUNFLCAgICAgLyogeyAqL1xuICBDSEFSX0xFRlRfUEFSRU5USEVTRVMsICAgICAvKiAoICovXG4gIENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVCwgIC8qIFsgKi9cbiAgQ0hBUl9QTFVTLCAgICAgICAgICAgICAgICAgLyogKyAqL1xuICBDSEFSX1FVRVNUSU9OX01BUkssICAgICAgICAvKiA/ICovXG4gIENIQVJfUklHSFRfQ1VSTFlfQlJBQ0UsICAgIC8qIH0gKi9cbiAgQ0hBUl9SSUdIVF9QQVJFTlRIRVNFUywgICAgLyogKSAqL1xuICBDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUICAvKiBdICovXG59ID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcblxuY29uc3QgaXNQYXRoU2VwYXJhdG9yID0gY29kZSA9PiB7XG4gIHJldHVybiBjb2RlID09PSBDSEFSX0ZPUldBUkRfU0xBU0ggfHwgY29kZSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSDtcbn07XG5cbmNvbnN0IGRlcHRoID0gdG9rZW4gPT4ge1xuICBpZiAodG9rZW4uaXNQcmVmaXggIT09IHRydWUpIHtcbiAgICB0b2tlbi5kZXB0aCA9IHRva2VuLmlzR2xvYnN0YXIgPyBJbmZpbml0eSA6IDE7XG4gIH1cbn07XG5cbi8qKlxuICogUXVpY2tseSBzY2FucyBhIGdsb2IgcGF0dGVybiBhbmQgcmV0dXJucyBhbiBvYmplY3Qgd2l0aCBhIGhhbmRmdWwgb2ZcbiAqIHVzZWZ1bCBwcm9wZXJ0aWVzLCBsaWtlIGBpc0dsb2JgLCBgcGF0aGAgKHRoZSBsZWFkaW5nIG5vbi1nbG9iLCBpZiBpdCBleGlzdHMpLFxuICogYGdsb2JgICh0aGUgYWN0dWFsIHBhdHRlcm4pLCBgbmVnYXRlZGAgKHRydWUgaWYgdGhlIHBhdGggc3RhcnRzIHdpdGggYCFgIGJ1dCBub3RcbiAqIHdpdGggYCEoYCkgYW5kIGBuZWdhdGVkRXh0Z2xvYmAgKHRydWUgaWYgdGhlIHBhdGggc3RhcnRzIHdpdGggYCEoYCkuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHBtID0gcmVxdWlyZSgncGljb21hdGNoJyk7XG4gKiBjb25zb2xlLmxvZyhwbS5zY2FuKCdmb28vYmFyLyouanMnKSk7XG4gKiB7IGlzR2xvYjogdHJ1ZSwgaW5wdXQ6ICdmb28vYmFyLyouanMnLCBiYXNlOiAnZm9vL2JhcicsIGdsb2I6ICcqLmpzJyB9XG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgc3RyYFxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRva2VucyBhbmQgcmVnZXggc291cmNlIHN0cmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuY29uc3Qgc2NhbiA9IChpbnB1dCwgb3B0aW9ucykgPT4ge1xuICBjb25zdCBvcHRzID0gb3B0aW9ucyB8fCB7fTtcblxuICBjb25zdCBsZW5ndGggPSBpbnB1dC5sZW5ndGggLSAxO1xuICBjb25zdCBzY2FuVG9FbmQgPSBvcHRzLnBhcnRzID09PSB0cnVlIHx8IG9wdHMuc2NhblRvRW5kID09PSB0cnVlO1xuICBjb25zdCBzbGFzaGVzID0gW107XG4gIGNvbnN0IHRva2VucyA9IFtdO1xuICBjb25zdCBwYXJ0cyA9IFtdO1xuXG4gIGxldCBzdHIgPSBpbnB1dDtcbiAgbGV0IGluZGV4ID0gLTE7XG4gIGxldCBzdGFydCA9IDA7XG4gIGxldCBsYXN0SW5kZXggPSAwO1xuICBsZXQgaXNCcmFjZSA9IGZhbHNlO1xuICBsZXQgaXNCcmFja2V0ID0gZmFsc2U7XG4gIGxldCBpc0dsb2IgPSBmYWxzZTtcbiAgbGV0IGlzRXh0Z2xvYiA9IGZhbHNlO1xuICBsZXQgaXNHbG9ic3RhciA9IGZhbHNlO1xuICBsZXQgYnJhY2VFc2NhcGVkID0gZmFsc2U7XG4gIGxldCBiYWNrc2xhc2hlcyA9IGZhbHNlO1xuICBsZXQgbmVnYXRlZCA9IGZhbHNlO1xuICBsZXQgbmVnYXRlZEV4dGdsb2IgPSBmYWxzZTtcbiAgbGV0IGZpbmlzaGVkID0gZmFsc2U7XG4gIGxldCBicmFjZXMgPSAwO1xuICBsZXQgcHJldjtcbiAgbGV0IGNvZGU7XG4gIGxldCB0b2tlbiA9IHsgdmFsdWU6ICcnLCBkZXB0aDogMCwgaXNHbG9iOiBmYWxzZSB9O1xuXG4gIGNvbnN0IGVvcyA9ICgpID0+IGluZGV4ID49IGxlbmd0aDtcbiAgY29uc3QgcGVlayA9ICgpID0+IHN0ci5jaGFyQ29kZUF0KGluZGV4ICsgMSk7XG4gIGNvbnN0IGFkdmFuY2UgPSAoKSA9PiB7XG4gICAgcHJldiA9IGNvZGU7XG4gICAgcmV0dXJuIHN0ci5jaGFyQ29kZUF0KCsraW5kZXgpO1xuICB9O1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNvZGUgPSBhZHZhbmNlKCk7XG4gICAgbGV0IG5leHQ7XG5cbiAgICBpZiAoY29kZSA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xuICAgICAgYmFja3NsYXNoZXMgPSB0b2tlbi5iYWNrc2xhc2hlcyA9IHRydWU7XG4gICAgICBjb2RlID0gYWR2YW5jZSgpO1xuXG4gICAgICBpZiAoY29kZSA9PT0gQ0hBUl9MRUZUX0NVUkxZX0JSQUNFKSB7XG4gICAgICAgIGJyYWNlRXNjYXBlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoYnJhY2VFc2NhcGVkID09PSB0cnVlIHx8IGNvZGUgPT09IENIQVJfTEVGVF9DVVJMWV9CUkFDRSkge1xuICAgICAgYnJhY2VzKys7XG5cbiAgICAgIHdoaWxlIChlb3MoKSAhPT0gdHJ1ZSAmJiAoY29kZSA9IGFkdmFuY2UoKSkpIHtcbiAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcbiAgICAgICAgICBiYWNrc2xhc2hlcyA9IHRva2VuLmJhY2tzbGFzaGVzID0gdHJ1ZTtcbiAgICAgICAgICBhZHZhbmNlKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29kZSA9PT0gQ0hBUl9MRUZUX0NVUkxZX0JSQUNFKSB7XG4gICAgICAgICAgYnJhY2VzKys7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYnJhY2VFc2NhcGVkICE9PSB0cnVlICYmIGNvZGUgPT09IENIQVJfRE9UICYmIChjb2RlID0gYWR2YW5jZSgpKSA9PT0gQ0hBUl9ET1QpIHtcbiAgICAgICAgICBpc0JyYWNlID0gdG9rZW4uaXNCcmFjZSA9IHRydWU7XG4gICAgICAgICAgaXNHbG9iID0gdG9rZW4uaXNHbG9iID0gdHJ1ZTtcbiAgICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG5cbiAgICAgICAgICBpZiAoc2NhblRvRW5kID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChicmFjZUVzY2FwZWQgIT09IHRydWUgJiYgY29kZSA9PT0gQ0hBUl9DT01NQSkge1xuICAgICAgICAgIGlzQnJhY2UgPSB0b2tlbi5pc0JyYWNlID0gdHJ1ZTtcbiAgICAgICAgICBpc0dsb2IgPSB0b2tlbi5pc0dsb2IgPSB0cnVlO1xuICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcblxuICAgICAgICAgIGlmIChzY2FuVG9FbmQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfUklHSFRfQ1VSTFlfQlJBQ0UpIHtcbiAgICAgICAgICBicmFjZXMtLTtcblxuICAgICAgICAgIGlmIChicmFjZXMgPT09IDApIHtcbiAgICAgICAgICAgIGJyYWNlRXNjYXBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaXNCcmFjZSA9IHRva2VuLmlzQnJhY2UgPSB0cnVlO1xuICAgICAgICAgICAgZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzY2FuVG9FbmQgPT09IHRydWUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBDSEFSX0ZPUldBUkRfU0xBU0gpIHtcbiAgICAgIHNsYXNoZXMucHVzaChpbmRleCk7XG4gICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICB0b2tlbiA9IHsgdmFsdWU6ICcnLCBkZXB0aDogMCwgaXNHbG9iOiBmYWxzZSB9O1xuXG4gICAgICBpZiAoZmluaXNoZWQgPT09IHRydWUpIGNvbnRpbnVlO1xuICAgICAgaWYgKHByZXYgPT09IENIQVJfRE9UICYmIGluZGV4ID09PSAoc3RhcnQgKyAxKSkge1xuICAgICAgICBzdGFydCArPSAyO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgbGFzdEluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMubm9leHQgIT09IHRydWUpIHtcbiAgICAgIGNvbnN0IGlzRXh0Z2xvYkNoYXIgPSBjb2RlID09PSBDSEFSX1BMVVNcbiAgICAgICAgfHwgY29kZSA9PT0gQ0hBUl9BVFxuICAgICAgICB8fCBjb2RlID09PSBDSEFSX0FTVEVSSVNLXG4gICAgICAgIHx8IGNvZGUgPT09IENIQVJfUVVFU1RJT05fTUFSS1xuICAgICAgICB8fCBjb2RlID09PSBDSEFSX0VYQ0xBTUFUSU9OX01BUks7XG5cbiAgICAgIGlmIChpc0V4dGdsb2JDaGFyID09PSB0cnVlICYmIHBlZWsoKSA9PT0gQ0hBUl9MRUZUX1BBUkVOVEhFU0VTKSB7XG4gICAgICAgIGlzR2xvYiA9IHRva2VuLmlzR2xvYiA9IHRydWU7XG4gICAgICAgIGlzRXh0Z2xvYiA9IHRva2VuLmlzRXh0Z2xvYiA9IHRydWU7XG4gICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfRVhDTEFNQVRJT05fTUFSSyAmJiBpbmRleCA9PT0gc3RhcnQpIHtcbiAgICAgICAgICBuZWdhdGVkRXh0Z2xvYiA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2NhblRvRW5kID09PSB0cnVlKSB7XG4gICAgICAgICAgd2hpbGUgKGVvcygpICE9PSB0cnVlICYmIChjb2RlID0gYWR2YW5jZSgpKSkge1xuICAgICAgICAgICAgaWYgKGNvZGUgPT09IENIQVJfQkFDS1dBUkRfU0xBU0gpIHtcbiAgICAgICAgICAgICAgYmFja3NsYXNoZXMgPSB0b2tlbi5iYWNrc2xhc2hlcyA9IHRydWU7XG4gICAgICAgICAgICAgIGNvZGUgPSBhZHZhbmNlKCk7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29kZSA9PT0gQ0hBUl9SSUdIVF9QQVJFTlRIRVNFUykge1xuICAgICAgICAgICAgICBpc0dsb2IgPSB0b2tlbi5pc0dsb2IgPSB0cnVlO1xuICAgICAgICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gQ0hBUl9BU1RFUklTSykge1xuICAgICAgaWYgKHByZXYgPT09IENIQVJfQVNURVJJU0spIGlzR2xvYnN0YXIgPSB0b2tlbi5pc0dsb2JzdGFyID0gdHJ1ZTtcbiAgICAgIGlzR2xvYiA9IHRva2VuLmlzR2xvYiA9IHRydWU7XG4gICAgICBmaW5pc2hlZCA9IHRydWU7XG5cbiAgICAgIGlmIChzY2FuVG9FbmQgPT09IHRydWUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gQ0hBUl9RVUVTVElPTl9NQVJLKSB7XG4gICAgICBpc0dsb2IgPSB0b2tlbi5pc0dsb2IgPSB0cnVlO1xuICAgICAgZmluaXNoZWQgPSB0cnVlO1xuXG4gICAgICBpZiAoc2NhblRvRW5kID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVCkge1xuICAgICAgd2hpbGUgKGVvcygpICE9PSB0cnVlICYmIChuZXh0ID0gYWR2YW5jZSgpKSkge1xuICAgICAgICBpZiAobmV4dCA9PT0gQ0hBUl9CQUNLV0FSRF9TTEFTSCkge1xuICAgICAgICAgIGJhY2tzbGFzaGVzID0gdG9rZW4uYmFja3NsYXNoZXMgPSB0cnVlO1xuICAgICAgICAgIGFkdmFuY2UoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0ID09PSBDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUKSB7XG4gICAgICAgICAgaXNCcmFja2V0ID0gdG9rZW4uaXNCcmFja2V0ID0gdHJ1ZTtcbiAgICAgICAgICBpc0dsb2IgPSB0b2tlbi5pc0dsb2IgPSB0cnVlO1xuICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc2NhblRvRW5kID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAob3B0cy5ub25lZ2F0ZSAhPT0gdHJ1ZSAmJiBjb2RlID09PSBDSEFSX0VYQ0xBTUFUSU9OX01BUksgJiYgaW5kZXggPT09IHN0YXJ0KSB7XG4gICAgICBuZWdhdGVkID0gdG9rZW4ubmVnYXRlZCA9IHRydWU7XG4gICAgICBzdGFydCsrO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMubm9wYXJlbiAhPT0gdHJ1ZSAmJiBjb2RlID09PSBDSEFSX0xFRlRfUEFSRU5USEVTRVMpIHtcbiAgICAgIGlzR2xvYiA9IHRva2VuLmlzR2xvYiA9IHRydWU7XG5cbiAgICAgIGlmIChzY2FuVG9FbmQgPT09IHRydWUpIHtcbiAgICAgICAgd2hpbGUgKGVvcygpICE9PSB0cnVlICYmIChjb2RlID0gYWR2YW5jZSgpKSkge1xuICAgICAgICAgIGlmIChjb2RlID09PSBDSEFSX0xFRlRfUEFSRU5USEVTRVMpIHtcbiAgICAgICAgICAgIGJhY2tzbGFzaGVzID0gdG9rZW4uYmFja3NsYXNoZXMgPSB0cnVlO1xuICAgICAgICAgICAgY29kZSA9IGFkdmFuY2UoKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjb2RlID09PSBDSEFSX1JJR0hUX1BBUkVOVEhFU0VTKSB7XG4gICAgICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoaXNHbG9iID09PSB0cnVlKSB7XG4gICAgICBmaW5pc2hlZCA9IHRydWU7XG5cbiAgICAgIGlmIChzY2FuVG9FbmQgPT09IHRydWUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRzLm5vZXh0ID09PSB0cnVlKSB7XG4gICAgaXNFeHRnbG9iID0gZmFsc2U7XG4gICAgaXNHbG9iID0gZmFsc2U7XG4gIH1cblxuICBsZXQgYmFzZSA9IHN0cjtcbiAgbGV0IHByZWZpeCA9ICcnO1xuICBsZXQgZ2xvYiA9ICcnO1xuXG4gIGlmIChzdGFydCA+IDApIHtcbiAgICBwcmVmaXggPSBzdHIuc2xpY2UoMCwgc3RhcnQpO1xuICAgIHN0ciA9IHN0ci5zbGljZShzdGFydCk7XG4gICAgbGFzdEluZGV4IC09IHN0YXJ0O1xuICB9XG5cbiAgaWYgKGJhc2UgJiYgaXNHbG9iID09PSB0cnVlICYmIGxhc3RJbmRleCA+IDApIHtcbiAgICBiYXNlID0gc3RyLnNsaWNlKDAsIGxhc3RJbmRleCk7XG4gICAgZ2xvYiA9IHN0ci5zbGljZShsYXN0SW5kZXgpO1xuICB9IGVsc2UgaWYgKGlzR2xvYiA9PT0gdHJ1ZSkge1xuICAgIGJhc2UgPSAnJztcbiAgICBnbG9iID0gc3RyO1xuICB9IGVsc2Uge1xuICAgIGJhc2UgPSBzdHI7XG4gIH1cblxuICBpZiAoYmFzZSAmJiBiYXNlICE9PSAnJyAmJiBiYXNlICE9PSAnLycgJiYgYmFzZSAhPT0gc3RyKSB7XG4gICAgaWYgKGlzUGF0aFNlcGFyYXRvcihiYXNlLmNoYXJDb2RlQXQoYmFzZS5sZW5ndGggLSAxKSkpIHtcbiAgICAgIGJhc2UgPSBiYXNlLnNsaWNlKDAsIC0xKTtcbiAgICB9XG4gIH1cblxuICBpZiAob3B0cy51bmVzY2FwZSA9PT0gdHJ1ZSkge1xuICAgIGlmIChnbG9iKSBnbG9iID0gdXRpbHMucmVtb3ZlQmFja3NsYXNoZXMoZ2xvYik7XG5cbiAgICBpZiAoYmFzZSAmJiBiYWNrc2xhc2hlcyA9PT0gdHJ1ZSkge1xuICAgICAgYmFzZSA9IHV0aWxzLnJlbW92ZUJhY2tzbGFzaGVzKGJhc2UpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHN0YXRlID0ge1xuICAgIHByZWZpeCxcbiAgICBpbnB1dCxcbiAgICBzdGFydCxcbiAgICBiYXNlLFxuICAgIGdsb2IsXG4gICAgaXNCcmFjZSxcbiAgICBpc0JyYWNrZXQsXG4gICAgaXNHbG9iLFxuICAgIGlzRXh0Z2xvYixcbiAgICBpc0dsb2JzdGFyLFxuICAgIG5lZ2F0ZWQsXG4gICAgbmVnYXRlZEV4dGdsb2JcbiAgfTtcblxuICBpZiAob3B0cy50b2tlbnMgPT09IHRydWUpIHtcbiAgICBzdGF0ZS5tYXhEZXB0aCA9IDA7XG4gICAgaWYgKCFpc1BhdGhTZXBhcmF0b3IoY29kZSkpIHtcbiAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICB9XG4gICAgc3RhdGUudG9rZW5zID0gdG9rZW5zO1xuICB9XG5cbiAgaWYgKG9wdHMucGFydHMgPT09IHRydWUgfHwgb3B0cy50b2tlbnMgPT09IHRydWUpIHtcbiAgICBsZXQgcHJldkluZGV4O1xuXG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgc2xhc2hlcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICBjb25zdCBuID0gcHJldkluZGV4ID8gcHJldkluZGV4ICsgMSA6IHN0YXJ0O1xuICAgICAgY29uc3QgaSA9IHNsYXNoZXNbaWR4XTtcbiAgICAgIGNvbnN0IHZhbHVlID0gaW5wdXQuc2xpY2UobiwgaSk7XG4gICAgICBpZiAob3B0cy50b2tlbnMpIHtcbiAgICAgICAgaWYgKGlkeCA9PT0gMCAmJiBzdGFydCAhPT0gMCkge1xuICAgICAgICAgIHRva2Vuc1tpZHhdLmlzUHJlZml4ID0gdHJ1ZTtcbiAgICAgICAgICB0b2tlbnNbaWR4XS52YWx1ZSA9IHByZWZpeDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b2tlbnNbaWR4XS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGRlcHRoKHRva2Vuc1tpZHhdKTtcbiAgICAgICAgc3RhdGUubWF4RGVwdGggKz0gdG9rZW5zW2lkeF0uZGVwdGg7XG4gICAgICB9XG4gICAgICBpZiAoaWR4ICE9PSAwIHx8IHZhbHVlICE9PSAnJykge1xuICAgICAgICBwYXJ0cy5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHByZXZJbmRleCA9IGk7XG4gICAgfVxuXG4gICAgaWYgKHByZXZJbmRleCAmJiBwcmV2SW5kZXggKyAxIDwgaW5wdXQubGVuZ3RoKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGlucHV0LnNsaWNlKHByZXZJbmRleCArIDEpO1xuICAgICAgcGFydHMucHVzaCh2YWx1ZSk7XG5cbiAgICAgIGlmIChvcHRzLnRva2Vucykge1xuICAgICAgICB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIGRlcHRoKHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV0pO1xuICAgICAgICBzdGF0ZS5tYXhEZXB0aCArPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdLmRlcHRoO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRlLnNsYXNoZXMgPSBzbGFzaGVzO1xuICAgIHN0YXRlLnBhcnRzID0gcGFydHM7XG4gIH1cblxuICByZXR1cm4gc3RhdGU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNjYW47XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uc3RhbnRzXG4gKi9cblxuY29uc3Qge1xuICBNQVhfTEVOR1RILFxuICBQT1NJWF9SRUdFWF9TT1VSQ0UsXG4gIFJFR0VYX05PTl9TUEVDSUFMX0NIQVJTLFxuICBSRUdFWF9TUEVDSUFMX0NIQVJTX0JBQ0tSRUYsXG4gIFJFUExBQ0VNRU5UU1xufSA9IGNvbnN0YW50cztcblxuLyoqXG4gKiBIZWxwZXJzXG4gKi9cblxuY29uc3QgZXhwYW5kUmFuZ2UgPSAoYXJncywgb3B0aW9ucykgPT4ge1xuICBpZiAodHlwZW9mIG9wdGlvbnMuZXhwYW5kUmFuZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5leHBhbmRSYW5nZSguLi5hcmdzLCBvcHRpb25zKTtcbiAgfVxuXG4gIGFyZ3Muc29ydCgpO1xuICBjb25zdCB2YWx1ZSA9IGBbJHthcmdzLmpvaW4oJy0nKX1dYDtcblxuICB0cnkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXcgKi9cbiAgICBuZXcgUmVnRXhwKHZhbHVlKTtcbiAgfSBjYXRjaCAoZXgpIHtcbiAgICByZXR1cm4gYXJncy5tYXAodiA9PiB1dGlscy5lc2NhcGVSZWdleCh2KSkuam9pbignLi4nKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIHRoZSBtZXNzYWdlIGZvciBhIHN5bnRheCBlcnJvclxuICovXG5cbmNvbnN0IHN5bnRheEVycm9yID0gKHR5cGUsIGNoYXIpID0+IHtcbiAgcmV0dXJuIGBNaXNzaW5nICR7dHlwZX06IFwiJHtjaGFyfVwiIC0gdXNlIFwiXFxcXFxcXFwke2NoYXJ9XCIgdG8gbWF0Y2ggbGl0ZXJhbCBjaGFyYWN0ZXJzYDtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGlucHV0IHN0cmluZy5cbiAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5jb25zdCBwYXJzZSA9IChpbnB1dCwgb3B0aW9ucykgPT4ge1xuICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgc3RyaW5nJyk7XG4gIH1cblxuICBpbnB1dCA9IFJFUExBQ0VNRU5UU1tpbnB1dF0gfHwgaW5wdXQ7XG5cbiAgY29uc3Qgb3B0cyA9IHsgLi4ub3B0aW9ucyB9O1xuICBjb25zdCBtYXggPSB0eXBlb2Ygb3B0cy5tYXhMZW5ndGggPT09ICdudW1iZXInID8gTWF0aC5taW4oTUFYX0xFTkdUSCwgb3B0cy5tYXhMZW5ndGgpIDogTUFYX0xFTkdUSDtcblxuICBsZXQgbGVuID0gaW5wdXQubGVuZ3RoO1xuICBpZiAobGVuID4gbWF4KSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBJbnB1dCBsZW5ndGg6ICR7bGVufSwgZXhjZWVkcyBtYXhpbXVtIGFsbG93ZWQgbGVuZ3RoOiAke21heH1gKTtcbiAgfVxuXG4gIGNvbnN0IGJvcyA9IHsgdHlwZTogJ2JvcycsIHZhbHVlOiAnJywgb3V0cHV0OiBvcHRzLnByZXBlbmQgfHwgJycgfTtcbiAgY29uc3QgdG9rZW5zID0gW2Jvc107XG5cbiAgY29uc3QgY2FwdHVyZSA9IG9wdHMuY2FwdHVyZSA/ICcnIDogJz86JztcbiAgY29uc3Qgd2luMzIgPSB1dGlscy5pc1dpbmRvd3Mob3B0aW9ucyk7XG5cbiAgLy8gY3JlYXRlIGNvbnN0YW50cyBiYXNlZCBvbiBwbGF0Zm9ybSwgZm9yIHdpbmRvd3Mgb3IgcG9zaXhcbiAgY29uc3QgUExBVEZPUk1fQ0hBUlMgPSBjb25zdGFudHMuZ2xvYkNoYXJzKHdpbjMyKTtcbiAgY29uc3QgRVhUR0xPQl9DSEFSUyA9IGNvbnN0YW50cy5leHRnbG9iQ2hhcnMoUExBVEZPUk1fQ0hBUlMpO1xuXG4gIGNvbnN0IHtcbiAgICBET1RfTElURVJBTCxcbiAgICBQTFVTX0xJVEVSQUwsXG4gICAgU0xBU0hfTElURVJBTCxcbiAgICBPTkVfQ0hBUixcbiAgICBET1RTX1NMQVNILFxuICAgIE5PX0RPVCxcbiAgICBOT19ET1RfU0xBU0gsXG4gICAgTk9fRE9UU19TTEFTSCxcbiAgICBRTUFSSyxcbiAgICBRTUFSS19OT19ET1QsXG4gICAgU1RBUixcbiAgICBTVEFSVF9BTkNIT1JcbiAgfSA9IFBMQVRGT1JNX0NIQVJTO1xuXG4gIGNvbnN0IGdsb2JzdGFyID0gb3B0cyA9PiB7XG4gICAgcmV0dXJuIGAoJHtjYXB0dXJlfSg/Oig/ISR7U1RBUlRfQU5DSE9SfSR7b3B0cy5kb3QgPyBET1RTX1NMQVNIIDogRE9UX0xJVEVSQUx9KS4pKj8pYDtcbiAgfTtcblxuICBjb25zdCBub2RvdCA9IG9wdHMuZG90ID8gJycgOiBOT19ET1Q7XG4gIGNvbnN0IHFtYXJrTm9Eb3QgPSBvcHRzLmRvdCA/IFFNQVJLIDogUU1BUktfTk9fRE9UO1xuICBsZXQgc3RhciA9IG9wdHMuYmFzaCA9PT0gdHJ1ZSA/IGdsb2JzdGFyKG9wdHMpIDogU1RBUjtcblxuICBpZiAob3B0cy5jYXB0dXJlKSB7XG4gICAgc3RhciA9IGAoJHtzdGFyfSlgO1xuICB9XG5cbiAgLy8gbWluaW1hdGNoIG9wdGlvbnMgc3VwcG9ydFxuICBpZiAodHlwZW9mIG9wdHMubm9leHQgPT09ICdib29sZWFuJykge1xuICAgIG9wdHMubm9leHRnbG9iID0gb3B0cy5ub2V4dDtcbiAgfVxuXG4gIGNvbnN0IHN0YXRlID0ge1xuICAgIGlucHV0LFxuICAgIGluZGV4OiAtMSxcbiAgICBzdGFydDogMCxcbiAgICBkb3Q6IG9wdHMuZG90ID09PSB0cnVlLFxuICAgIGNvbnN1bWVkOiAnJyxcbiAgICBvdXRwdXQ6ICcnLFxuICAgIHByZWZpeDogJycsXG4gICAgYmFja3RyYWNrOiBmYWxzZSxcbiAgICBuZWdhdGVkOiBmYWxzZSxcbiAgICBicmFja2V0czogMCxcbiAgICBicmFjZXM6IDAsXG4gICAgcGFyZW5zOiAwLFxuICAgIHF1b3RlczogMCxcbiAgICBnbG9ic3RhcjogZmFsc2UsXG4gICAgdG9rZW5zXG4gIH07XG5cbiAgaW5wdXQgPSB1dGlscy5yZW1vdmVQcmVmaXgoaW5wdXQsIHN0YXRlKTtcbiAgbGVuID0gaW5wdXQubGVuZ3RoO1xuXG4gIGNvbnN0IGV4dGdsb2JzID0gW107XG4gIGNvbnN0IGJyYWNlcyA9IFtdO1xuICBjb25zdCBzdGFjayA9IFtdO1xuICBsZXQgcHJldiA9IGJvcztcbiAgbGV0IHZhbHVlO1xuXG4gIC8qKlxuICAgKiBUb2tlbml6aW5nIGhlbHBlcnNcbiAgICovXG5cbiAgY29uc3QgZW9zID0gKCkgPT4gc3RhdGUuaW5kZXggPT09IGxlbiAtIDE7XG4gIGNvbnN0IHBlZWsgPSBzdGF0ZS5wZWVrID0gKG4gPSAxKSA9PiBpbnB1dFtzdGF0ZS5pbmRleCArIG5dO1xuICBjb25zdCBhZHZhbmNlID0gc3RhdGUuYWR2YW5jZSA9ICgpID0+IGlucHV0Wysrc3RhdGUuaW5kZXhdIHx8ICcnO1xuICBjb25zdCByZW1haW5pbmcgPSAoKSA9PiBpbnB1dC5zbGljZShzdGF0ZS5pbmRleCArIDEpO1xuICBjb25zdCBjb25zdW1lID0gKHZhbHVlID0gJycsIG51bSA9IDApID0+IHtcbiAgICBzdGF0ZS5jb25zdW1lZCArPSB2YWx1ZTtcbiAgICBzdGF0ZS5pbmRleCArPSBudW07XG4gIH07XG5cbiAgY29uc3QgYXBwZW5kID0gdG9rZW4gPT4ge1xuICAgIHN0YXRlLm91dHB1dCArPSB0b2tlbi5vdXRwdXQgIT0gbnVsbCA/IHRva2VuLm91dHB1dCA6IHRva2VuLnZhbHVlO1xuICAgIGNvbnN1bWUodG9rZW4udmFsdWUpO1xuICB9O1xuXG4gIGNvbnN0IG5lZ2F0ZSA9ICgpID0+IHtcbiAgICBsZXQgY291bnQgPSAxO1xuXG4gICAgd2hpbGUgKHBlZWsoKSA9PT0gJyEnICYmIChwZWVrKDIpICE9PSAnKCcgfHwgcGVlaygzKSA9PT0gJz8nKSkge1xuICAgICAgYWR2YW5jZSgpO1xuICAgICAgc3RhdGUuc3RhcnQrKztcbiAgICAgIGNvdW50Kys7XG4gICAgfVxuXG4gICAgaWYgKGNvdW50ICUgMiA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHN0YXRlLm5lZ2F0ZWQgPSB0cnVlO1xuICAgIHN0YXRlLnN0YXJ0Kys7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgY29uc3QgaW5jcmVtZW50ID0gdHlwZSA9PiB7XG4gICAgc3RhdGVbdHlwZV0rKztcbiAgICBzdGFjay5wdXNoKHR5cGUpO1xuICB9O1xuXG4gIGNvbnN0IGRlY3JlbWVudCA9IHR5cGUgPT4ge1xuICAgIHN0YXRlW3R5cGVdLS07XG4gICAgc3RhY2sucG9wKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFB1c2ggdG9rZW5zIG9udG8gdGhlIHRva2VucyBhcnJheS4gVGhpcyBoZWxwZXIgc3BlZWRzIHVwXG4gICAqIHRva2VuaXppbmcgYnkgMSkgaGVscGluZyB1cyBhdm9pZCBiYWNrdHJhY2tpbmcgYXMgbXVjaCBhcyBwb3NzaWJsZSxcbiAgICogYW5kIDIpIGhlbHBpbmcgdXMgYXZvaWQgY3JlYXRpbmcgZXh0cmEgdG9rZW5zIHdoZW4gY29uc2VjdXRpdmVcbiAgICogY2hhcmFjdGVycyBhcmUgcGxhaW4gdGV4dC4gVGhpcyBpbXByb3ZlcyBwZXJmb3JtYW5jZSBhbmQgc2ltcGxpZmllc1xuICAgKiBsb29rYmVoaW5kcy5cbiAgICovXG5cbiAgY29uc3QgcHVzaCA9IHRvayA9PiB7XG4gICAgaWYgKHByZXYudHlwZSA9PT0gJ2dsb2JzdGFyJykge1xuICAgICAgY29uc3QgaXNCcmFjZSA9IHN0YXRlLmJyYWNlcyA+IDAgJiYgKHRvay50eXBlID09PSAnY29tbWEnIHx8IHRvay50eXBlID09PSAnYnJhY2UnKTtcbiAgICAgIGNvbnN0IGlzRXh0Z2xvYiA9IHRvay5leHRnbG9iID09PSB0cnVlIHx8IChleHRnbG9icy5sZW5ndGggJiYgKHRvay50eXBlID09PSAncGlwZScgfHwgdG9rLnR5cGUgPT09ICdwYXJlbicpKTtcblxuICAgICAgaWYgKHRvay50eXBlICE9PSAnc2xhc2gnICYmIHRvay50eXBlICE9PSAncGFyZW4nICYmICFpc0JyYWNlICYmICFpc0V4dGdsb2IpIHtcbiAgICAgICAgc3RhdGUub3V0cHV0ID0gc3RhdGUub3V0cHV0LnNsaWNlKDAsIC1wcmV2Lm91dHB1dC5sZW5ndGgpO1xuICAgICAgICBwcmV2LnR5cGUgPSAnc3Rhcic7XG4gICAgICAgIHByZXYudmFsdWUgPSAnKic7XG4gICAgICAgIHByZXYub3V0cHV0ID0gc3RhcjtcbiAgICAgICAgc3RhdGUub3V0cHV0ICs9IHByZXYub3V0cHV0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChleHRnbG9icy5sZW5ndGggJiYgdG9rLnR5cGUgIT09ICdwYXJlbicpIHtcbiAgICAgIGV4dGdsb2JzW2V4dGdsb2JzLmxlbmd0aCAtIDFdLmlubmVyICs9IHRvay52YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodG9rLnZhbHVlIHx8IHRvay5vdXRwdXQpIGFwcGVuZCh0b2spO1xuICAgIGlmIChwcmV2ICYmIHByZXYudHlwZSA9PT0gJ3RleHQnICYmIHRvay50eXBlID09PSAndGV4dCcpIHtcbiAgICAgIHByZXYudmFsdWUgKz0gdG9rLnZhbHVlO1xuICAgICAgcHJldi5vdXRwdXQgPSAocHJldi5vdXRwdXQgfHwgJycpICsgdG9rLnZhbHVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRvay5wcmV2ID0gcHJldjtcbiAgICB0b2tlbnMucHVzaCh0b2spO1xuICAgIHByZXYgPSB0b2s7XG4gIH07XG5cbiAgY29uc3QgZXh0Z2xvYk9wZW4gPSAodHlwZSwgdmFsdWUpID0+IHtcbiAgICBjb25zdCB0b2tlbiA9IHsgLi4uRVhUR0xPQl9DSEFSU1t2YWx1ZV0sIGNvbmRpdGlvbnM6IDEsIGlubmVyOiAnJyB9O1xuXG4gICAgdG9rZW4ucHJldiA9IHByZXY7XG4gICAgdG9rZW4ucGFyZW5zID0gc3RhdGUucGFyZW5zO1xuICAgIHRva2VuLm91dHB1dCA9IHN0YXRlLm91dHB1dDtcbiAgICBjb25zdCBvdXRwdXQgPSAob3B0cy5jYXB0dXJlID8gJygnIDogJycpICsgdG9rZW4ub3BlbjtcblxuICAgIGluY3JlbWVudCgncGFyZW5zJyk7XG4gICAgcHVzaCh7IHR5cGUsIHZhbHVlLCBvdXRwdXQ6IHN0YXRlLm91dHB1dCA/ICcnIDogT05FX0NIQVIgfSk7XG4gICAgcHVzaCh7IHR5cGU6ICdwYXJlbicsIGV4dGdsb2I6IHRydWUsIHZhbHVlOiBhZHZhbmNlKCksIG91dHB1dCB9KTtcbiAgICBleHRnbG9icy5wdXNoKHRva2VuKTtcbiAgfTtcblxuICBjb25zdCBleHRnbG9iQ2xvc2UgPSB0b2tlbiA9PiB7XG4gICAgbGV0IG91dHB1dCA9IHRva2VuLmNsb3NlICsgKG9wdHMuY2FwdHVyZSA/ICcpJyA6ICcnKTtcbiAgICBsZXQgcmVzdDtcblxuICAgIGlmICh0b2tlbi50eXBlID09PSAnbmVnYXRlJykge1xuICAgICAgbGV0IGV4dGdsb2JTdGFyID0gc3RhcjtcblxuICAgICAgaWYgKHRva2VuLmlubmVyICYmIHRva2VuLmlubmVyLmxlbmd0aCA+IDEgJiYgdG9rZW4uaW5uZXIuaW5jbHVkZXMoJy8nKSkge1xuICAgICAgICBleHRnbG9iU3RhciA9IGdsb2JzdGFyKG9wdHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXh0Z2xvYlN0YXIgIT09IHN0YXIgfHwgZW9zKCkgfHwgL15cXCkrJC8udGVzdChyZW1haW5pbmcoKSkpIHtcbiAgICAgICAgb3V0cHV0ID0gdG9rZW4uY2xvc2UgPSBgKSQpKSR7ZXh0Z2xvYlN0YXJ9YDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLmlubmVyLmluY2x1ZGVzKCcqJykgJiYgKHJlc3QgPSByZW1haW5pbmcoKSkgJiYgL15cXC5bXlxcXFwvLl0rJC8udGVzdChyZXN0KSkge1xuICAgICAgICBvdXRwdXQgPSB0b2tlbi5jbG9zZSA9IGApJHtyZXN0fSkke2V4dGdsb2JTdGFyfSlgO1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ucHJldi50eXBlID09PSAnYm9zJykge1xuICAgICAgICBzdGF0ZS5uZWdhdGVkRXh0Z2xvYiA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHVzaCh7IHR5cGU6ICdwYXJlbicsIGV4dGdsb2I6IHRydWUsIHZhbHVlLCBvdXRwdXQgfSk7XG4gICAgZGVjcmVtZW50KCdwYXJlbnMnKTtcbiAgfTtcblxuICAvKipcbiAgICogRmFzdCBwYXRoc1xuICAgKi9cblxuICBpZiAob3B0cy5mYXN0cGF0aHMgIT09IGZhbHNlICYmICEvKF5bKiFdfFsvKClbXFxde31cIl0pLy50ZXN0KGlucHV0KSkge1xuICAgIGxldCBiYWNrc2xhc2hlcyA9IGZhbHNlO1xuXG4gICAgbGV0IG91dHB1dCA9IGlucHV0LnJlcGxhY2UoUkVHRVhfU1BFQ0lBTF9DSEFSU19CQUNLUkVGLCAobSwgZXNjLCBjaGFycywgZmlyc3QsIHJlc3QsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoZmlyc3QgPT09ICdcXFxcJykge1xuICAgICAgICBiYWNrc2xhc2hlcyA9IHRydWU7XG4gICAgICAgIHJldHVybiBtO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmlyc3QgPT09ICc/Jykge1xuICAgICAgICBpZiAoZXNjKSB7XG4gICAgICAgICAgcmV0dXJuIGVzYyArIGZpcnN0ICsgKHJlc3QgPyBRTUFSSy5yZXBlYXQocmVzdC5sZW5ndGgpIDogJycpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBxbWFya05vRG90ICsgKHJlc3QgPyBRTUFSSy5yZXBlYXQocmVzdC5sZW5ndGgpIDogJycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBRTUFSSy5yZXBlYXQoY2hhcnMubGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpcnN0ID09PSAnLicpIHtcbiAgICAgICAgcmV0dXJuIERPVF9MSVRFUkFMLnJlcGVhdChjaGFycy5sZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmlyc3QgPT09ICcqJykge1xuICAgICAgICBpZiAoZXNjKSB7XG4gICAgICAgICAgcmV0dXJuIGVzYyArIGZpcnN0ICsgKHJlc3QgPyBzdGFyIDogJycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGFyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVzYyA/IG0gOiBgXFxcXCR7bX1gO1xuICAgIH0pO1xuXG4gICAgaWYgKGJhY2tzbGFzaGVzID09PSB0cnVlKSB7XG4gICAgICBpZiAob3B0cy51bmVzY2FwZSA9PT0gdHJ1ZSkge1xuICAgICAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSgvXFxcXC9nLCAnJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSgvXFxcXCsvZywgbSA9PiB7XG4gICAgICAgICAgcmV0dXJuIG0ubGVuZ3RoICUgMiA9PT0gMCA/ICdcXFxcXFxcXCcgOiAobSA/ICdcXFxcJyA6ICcnKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG91dHB1dCA9PT0gaW5wdXQgJiYgb3B0cy5jb250YWlucyA9PT0gdHJ1ZSkge1xuICAgICAgc3RhdGUub3V0cHV0ID0gaW5wdXQ7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgc3RhdGUub3V0cHV0ID0gdXRpbHMud3JhcE91dHB1dChvdXRwdXQsIHN0YXRlLCBvcHRpb25zKTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICAvKipcbiAgICogVG9rZW5pemUgaW5wdXQgdW50aWwgd2UgcmVhY2ggZW5kLW9mLXN0cmluZ1xuICAgKi9cblxuICB3aGlsZSAoIWVvcygpKSB7XG4gICAgdmFsdWUgPSBhZHZhbmNlKCk7XG5cbiAgICBpZiAodmFsdWUgPT09ICdcXHUwMDAwJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlZCBjaGFyYWN0ZXJzXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09ICdcXFxcJykge1xuICAgICAgY29uc3QgbmV4dCA9IHBlZWsoKTtcblxuICAgICAgaWYgKG5leHQgPT09ICcvJyAmJiBvcHRzLmJhc2ggIT09IHRydWUpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXh0ID09PSAnLicgfHwgbmV4dCA9PT0gJzsnKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW5leHQpIHtcbiAgICAgICAgdmFsdWUgKz0gJ1xcXFwnO1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGNvbGxhcHNlIHNsYXNoZXMgdG8gcmVkdWNlIHBvdGVudGlhbCBmb3IgZXhwbG9pdHNcbiAgICAgIGNvbnN0IG1hdGNoID0gL15cXFxcKy8uZXhlYyhyZW1haW5pbmcoKSk7XG4gICAgICBsZXQgc2xhc2hlcyA9IDA7XG5cbiAgICAgIGlmIChtYXRjaCAmJiBtYXRjaFswXS5sZW5ndGggPiAyKSB7XG4gICAgICAgIHNsYXNoZXMgPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgIHN0YXRlLmluZGV4ICs9IHNsYXNoZXM7XG4gICAgICAgIGlmIChzbGFzaGVzICUgMiAhPT0gMCkge1xuICAgICAgICAgIHZhbHVlICs9ICdcXFxcJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAob3B0cy51bmVzY2FwZSA9PT0gdHJ1ZSkge1xuICAgICAgICB2YWx1ZSA9IGFkdmFuY2UoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlICs9IGFkdmFuY2UoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlLmJyYWNrZXRzID09PSAwKSB7XG4gICAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiB3ZSdyZSBpbnNpZGUgYSByZWdleCBjaGFyYWN0ZXIgY2xhc3MsIGNvbnRpbnVlXG4gICAgICogdW50aWwgd2UgcmVhY2ggdGhlIGNsb3NpbmcgYnJhY2tldC5cbiAgICAgKi9cblxuICAgIGlmIChzdGF0ZS5icmFja2V0cyA+IDAgJiYgKHZhbHVlICE9PSAnXScgfHwgcHJldi52YWx1ZSA9PT0gJ1snIHx8IHByZXYudmFsdWUgPT09ICdbXicpKSB7XG4gICAgICBpZiAob3B0cy5wb3NpeCAhPT0gZmFsc2UgJiYgdmFsdWUgPT09ICc6Jykge1xuICAgICAgICBjb25zdCBpbm5lciA9IHByZXYudmFsdWUuc2xpY2UoMSk7XG4gICAgICAgIGlmIChpbm5lci5pbmNsdWRlcygnWycpKSB7XG4gICAgICAgICAgcHJldi5wb3NpeCA9IHRydWU7XG5cbiAgICAgICAgICBpZiAoaW5uZXIuaW5jbHVkZXMoJzonKSkge1xuICAgICAgICAgICAgY29uc3QgaWR4ID0gcHJldi52YWx1ZS5sYXN0SW5kZXhPZignWycpO1xuICAgICAgICAgICAgY29uc3QgcHJlID0gcHJldi52YWx1ZS5zbGljZSgwLCBpZHgpO1xuICAgICAgICAgICAgY29uc3QgcmVzdCA9IHByZXYudmFsdWUuc2xpY2UoaWR4ICsgMik7XG4gICAgICAgICAgICBjb25zdCBwb3NpeCA9IFBPU0lYX1JFR0VYX1NPVVJDRVtyZXN0XTtcbiAgICAgICAgICAgIGlmIChwb3NpeCkge1xuICAgICAgICAgICAgICBwcmV2LnZhbHVlID0gcHJlICsgcG9zaXg7XG4gICAgICAgICAgICAgIHN0YXRlLmJhY2t0cmFjayA9IHRydWU7XG4gICAgICAgICAgICAgIGFkdmFuY2UoKTtcblxuICAgICAgICAgICAgICBpZiAoIWJvcy5vdXRwdXQgJiYgdG9rZW5zLmluZGV4T2YocHJldikgPT09IDEpIHtcbiAgICAgICAgICAgICAgICBib3Mub3V0cHV0ID0gT05FX0NIQVI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICgodmFsdWUgPT09ICdbJyAmJiBwZWVrKCkgIT09ICc6JykgfHwgKHZhbHVlID09PSAnLScgJiYgcGVlaygpID09PSAnXScpKSB7XG4gICAgICAgIHZhbHVlID0gYFxcXFwke3ZhbHVlfWA7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gJ10nICYmIChwcmV2LnZhbHVlID09PSAnWycgfHwgcHJldi52YWx1ZSA9PT0gJ1teJykpIHtcbiAgICAgICAgdmFsdWUgPSBgXFxcXCR7dmFsdWV9YDtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdHMucG9zaXggPT09IHRydWUgJiYgdmFsdWUgPT09ICchJyAmJiBwcmV2LnZhbHVlID09PSAnWycpIHtcbiAgICAgICAgdmFsdWUgPSAnXic7XG4gICAgICB9XG5cbiAgICAgIHByZXYudmFsdWUgKz0gdmFsdWU7XG4gICAgICBhcHBlbmQoeyB2YWx1ZSB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIHdlJ3JlIGluc2lkZSBhIHF1b3RlZCBzdHJpbmcsIGNvbnRpbnVlXG4gICAgICogdW50aWwgd2UgcmVhY2ggdGhlIGNsb3NpbmcgZG91YmxlIHF1b3RlLlxuICAgICAqL1xuXG4gICAgaWYgKHN0YXRlLnF1b3RlcyA9PT0gMSAmJiB2YWx1ZSAhPT0gJ1wiJykge1xuICAgICAgdmFsdWUgPSB1dGlscy5lc2NhcGVSZWdleCh2YWx1ZSk7XG4gICAgICBwcmV2LnZhbHVlICs9IHZhbHVlO1xuICAgICAgYXBwZW5kKHsgdmFsdWUgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEb3VibGUgcXVvdGVzXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09ICdcIicpIHtcbiAgICAgIHN0YXRlLnF1b3RlcyA9IHN0YXRlLnF1b3RlcyA9PT0gMSA/IDAgOiAxO1xuICAgICAgaWYgKG9wdHMua2VlcFF1b3RlcyA9PT0gdHJ1ZSkge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSB9KTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcmVudGhlc2VzXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09ICcoJykge1xuICAgICAgaW5jcmVtZW50KCdwYXJlbnMnKTtcbiAgICAgIHB1c2goeyB0eXBlOiAncGFyZW4nLCB2YWx1ZSB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZSA9PT0gJyknKSB7XG4gICAgICBpZiAoc3RhdGUucGFyZW5zID09PSAwICYmIG9wdHMuc3RyaWN0QnJhY2tldHMgPT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKHN5bnRheEVycm9yKCdvcGVuaW5nJywgJygnKSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGV4dGdsb2IgPSBleHRnbG9ic1tleHRnbG9icy5sZW5ndGggLSAxXTtcbiAgICAgIGlmIChleHRnbG9iICYmIHN0YXRlLnBhcmVucyA9PT0gZXh0Z2xvYi5wYXJlbnMgKyAxKSB7XG4gICAgICAgIGV4dGdsb2JDbG9zZShleHRnbG9icy5wb3AoKSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBwdXNoKHsgdHlwZTogJ3BhcmVuJywgdmFsdWUsIG91dHB1dDogc3RhdGUucGFyZW5zID8gJyknIDogJ1xcXFwpJyB9KTtcbiAgICAgIGRlY3JlbWVudCgncGFyZW5zJyk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTcXVhcmUgYnJhY2tldHNcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gJ1snKSB7XG4gICAgICBpZiAob3B0cy5ub2JyYWNrZXQgPT09IHRydWUgfHwgIXJlbWFpbmluZygpLmluY2x1ZGVzKCddJykpIHtcbiAgICAgICAgaWYgKG9wdHMubm9icmFja2V0ICE9PSB0cnVlICYmIG9wdHMuc3RyaWN0QnJhY2tldHMgPT09IHRydWUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3Ioc3ludGF4RXJyb3IoJ2Nsb3NpbmcnLCAnXScpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhbHVlID0gYFxcXFwke3ZhbHVlfWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbmNyZW1lbnQoJ2JyYWNrZXRzJyk7XG4gICAgICB9XG5cbiAgICAgIHB1c2goeyB0eXBlOiAnYnJhY2tldCcsIHZhbHVlIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlID09PSAnXScpIHtcbiAgICAgIGlmIChvcHRzLm5vYnJhY2tldCA9PT0gdHJ1ZSB8fCAocHJldiAmJiBwcmV2LnR5cGUgPT09ICdicmFja2V0JyAmJiBwcmV2LnZhbHVlLmxlbmd0aCA9PT0gMSkpIHtcbiAgICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUsIG91dHB1dDogYFxcXFwke3ZhbHVlfWAgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuYnJhY2tldHMgPT09IDApIHtcbiAgICAgICAgaWYgKG9wdHMuc3RyaWN0QnJhY2tldHMgPT09IHRydWUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3Ioc3ludGF4RXJyb3IoJ29wZW5pbmcnLCAnWycpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlLCBvdXRwdXQ6IGBcXFxcJHt2YWx1ZX1gIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgZGVjcmVtZW50KCdicmFja2V0cycpO1xuXG4gICAgICBjb25zdCBwcmV2VmFsdWUgPSBwcmV2LnZhbHVlLnNsaWNlKDEpO1xuICAgICAgaWYgKHByZXYucG9zaXggIT09IHRydWUgJiYgcHJldlZhbHVlWzBdID09PSAnXicgJiYgIXByZXZWYWx1ZS5pbmNsdWRlcygnLycpKSB7XG4gICAgICAgIHZhbHVlID0gYC8ke3ZhbHVlfWA7XG4gICAgICB9XG5cbiAgICAgIHByZXYudmFsdWUgKz0gdmFsdWU7XG4gICAgICBhcHBlbmQoeyB2YWx1ZSB9KTtcblxuICAgICAgLy8gd2hlbiBsaXRlcmFsIGJyYWNrZXRzIGFyZSBleHBsaWNpdGx5IGRpc2FibGVkXG4gICAgICAvLyBhc3N1bWUgd2Ugc2hvdWxkIG1hdGNoIHdpdGggYSByZWdleCBjaGFyYWN0ZXIgY2xhc3NcbiAgICAgIGlmIChvcHRzLmxpdGVyYWxCcmFja2V0cyA9PT0gZmFsc2UgfHwgdXRpbHMuaGFzUmVnZXhDaGFycyhwcmV2VmFsdWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBlc2NhcGVkID0gdXRpbHMuZXNjYXBlUmVnZXgocHJldi52YWx1ZSk7XG4gICAgICBzdGF0ZS5vdXRwdXQgPSBzdGF0ZS5vdXRwdXQuc2xpY2UoMCwgLXByZXYudmFsdWUubGVuZ3RoKTtcblxuICAgICAgLy8gd2hlbiBsaXRlcmFsIGJyYWNrZXRzIGFyZSBleHBsaWNpdGx5IGVuYWJsZWRcbiAgICAgIC8vIGFzc3VtZSB3ZSBzaG91bGQgZXNjYXBlIHRoZSBicmFja2V0cyB0byBtYXRjaCBsaXRlcmFsIGNoYXJhY3RlcnNcbiAgICAgIGlmIChvcHRzLmxpdGVyYWxCcmFja2V0cyA9PT0gdHJ1ZSkge1xuICAgICAgICBzdGF0ZS5vdXRwdXQgKz0gZXNjYXBlZDtcbiAgICAgICAgcHJldi52YWx1ZSA9IGVzY2FwZWQ7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyB3aGVuIHRoZSB1c2VyIHNwZWNpZmllcyBub3RoaW5nLCB0cnkgdG8gbWF0Y2ggYm90aFxuICAgICAgcHJldi52YWx1ZSA9IGAoJHtjYXB0dXJlfSR7ZXNjYXBlZH18JHtwcmV2LnZhbHVlfSlgO1xuICAgICAgc3RhdGUub3V0cHV0ICs9IHByZXYudmFsdWU7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCcmFjZXNcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gJ3snICYmIG9wdHMubm9icmFjZSAhPT0gdHJ1ZSkge1xuICAgICAgaW5jcmVtZW50KCdicmFjZXMnKTtcblxuICAgICAgY29uc3Qgb3BlbiA9IHtcbiAgICAgICAgdHlwZTogJ2JyYWNlJyxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIG91dHB1dDogJygnLFxuICAgICAgICBvdXRwdXRJbmRleDogc3RhdGUub3V0cHV0Lmxlbmd0aCxcbiAgICAgICAgdG9rZW5zSW5kZXg6IHN0YXRlLnRva2Vucy5sZW5ndGhcbiAgICAgIH07XG5cbiAgICAgIGJyYWNlcy5wdXNoKG9wZW4pO1xuICAgICAgcHVzaChvcGVuKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZSA9PT0gJ30nKSB7XG4gICAgICBjb25zdCBicmFjZSA9IGJyYWNlc1ticmFjZXMubGVuZ3RoIC0gMV07XG5cbiAgICAgIGlmIChvcHRzLm5vYnJhY2UgPT09IHRydWUgfHwgIWJyYWNlKSB7XG4gICAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlLCBvdXRwdXQ6IHZhbHVlIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgbGV0IG91dHB1dCA9ICcpJztcblxuICAgICAgaWYgKGJyYWNlLmRvdHMgPT09IHRydWUpIHtcbiAgICAgICAgY29uc3QgYXJyID0gdG9rZW5zLnNsaWNlKCk7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IGFyci5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRva2Vucy5wb3AoKTtcbiAgICAgICAgICBpZiAoYXJyW2ldLnR5cGUgPT09ICdicmFjZScpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYXJyW2ldLnR5cGUgIT09ICdkb3RzJykge1xuICAgICAgICAgICAgcmFuZ2UudW5zaGlmdChhcnJbaV0udmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG91dHB1dCA9IGV4cGFuZFJhbmdlKHJhbmdlLCBvcHRzKTtcbiAgICAgICAgc3RhdGUuYmFja3RyYWNrID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJyYWNlLmNvbW1hICE9PSB0cnVlICYmIGJyYWNlLmRvdHMgIT09IHRydWUpIHtcbiAgICAgICAgY29uc3Qgb3V0ID0gc3RhdGUub3V0cHV0LnNsaWNlKDAsIGJyYWNlLm91dHB1dEluZGV4KTtcbiAgICAgICAgY29uc3QgdG9rcyA9IHN0YXRlLnRva2Vucy5zbGljZShicmFjZS50b2tlbnNJbmRleCk7XG4gICAgICAgIGJyYWNlLnZhbHVlID0gYnJhY2Uub3V0cHV0ID0gJ1xcXFx7JztcbiAgICAgICAgdmFsdWUgPSBvdXRwdXQgPSAnXFxcXH0nO1xuICAgICAgICBzdGF0ZS5vdXRwdXQgPSBvdXQ7XG4gICAgICAgIGZvciAoY29uc3QgdCBvZiB0b2tzKSB7XG4gICAgICAgICAgc3RhdGUub3V0cHV0ICs9ICh0Lm91dHB1dCB8fCB0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwdXNoKHsgdHlwZTogJ2JyYWNlJywgdmFsdWUsIG91dHB1dCB9KTtcbiAgICAgIGRlY3JlbWVudCgnYnJhY2VzJyk7XG4gICAgICBicmFjZXMucG9wKCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQaXBlc1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSAnfCcpIHtcbiAgICAgIGlmIChleHRnbG9icy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGV4dGdsb2JzW2V4dGdsb2JzLmxlbmd0aCAtIDFdLmNvbmRpdGlvbnMrKztcbiAgICAgIH1cbiAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tbWFzXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09ICcsJykge1xuICAgICAgbGV0IG91dHB1dCA9IHZhbHVlO1xuXG4gICAgICBjb25zdCBicmFjZSA9IGJyYWNlc1ticmFjZXMubGVuZ3RoIC0gMV07XG4gICAgICBpZiAoYnJhY2UgJiYgc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0gPT09ICdicmFjZXMnKSB7XG4gICAgICAgIGJyYWNlLmNvbW1hID0gdHJ1ZTtcbiAgICAgICAgb3V0cHV0ID0gJ3wnO1xuICAgICAgfVxuXG4gICAgICBwdXNoKHsgdHlwZTogJ2NvbW1hJywgdmFsdWUsIG91dHB1dCB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNsYXNoZXNcbiAgICAgKi9cblxuICAgIGlmICh2YWx1ZSA9PT0gJy8nKSB7XG4gICAgICAvLyBpZiB0aGUgYmVnaW5uaW5nIG9mIHRoZSBnbG9iIGlzIFwiLi9cIiwgYWR2YW5jZSB0aGUgc3RhcnRcbiAgICAgIC8vIHRvIHRoZSBjdXJyZW50IGluZGV4LCBhbmQgZG9uJ3QgYWRkIHRoZSBcIi4vXCIgY2hhcmFjdGVyc1xuICAgICAgLy8gdG8gdGhlIHN0YXRlLiBUaGlzIGdyZWF0bHkgc2ltcGxpZmllcyBsb29rYmVoaW5kcyB3aGVuXG4gICAgICAvLyBjaGVja2luZyBmb3IgQk9TIGNoYXJhY3RlcnMgbGlrZSBcIiFcIiBhbmQgXCIuXCIgKG5vdCBcIi4vXCIpXG4gICAgICBpZiAocHJldi50eXBlID09PSAnZG90JyAmJiBzdGF0ZS5pbmRleCA9PT0gc3RhdGUuc3RhcnQgKyAxKSB7XG4gICAgICAgIHN0YXRlLnN0YXJ0ID0gc3RhdGUuaW5kZXggKyAxO1xuICAgICAgICBzdGF0ZS5jb25zdW1lZCA9ICcnO1xuICAgICAgICBzdGF0ZS5vdXRwdXQgPSAnJztcbiAgICAgICAgdG9rZW5zLnBvcCgpO1xuICAgICAgICBwcmV2ID0gYm9zOyAvLyByZXNldCBcInByZXZcIiB0byB0aGUgZmlyc3QgdG9rZW5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHB1c2goeyB0eXBlOiAnc2xhc2gnLCB2YWx1ZSwgb3V0cHV0OiBTTEFTSF9MSVRFUkFMIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRG90c1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSAnLicpIHtcbiAgICAgIGlmIChzdGF0ZS5icmFjZXMgPiAwICYmIHByZXYudHlwZSA9PT0gJ2RvdCcpIHtcbiAgICAgICAgaWYgKHByZXYudmFsdWUgPT09ICcuJykgcHJldi5vdXRwdXQgPSBET1RfTElURVJBTDtcbiAgICAgICAgY29uc3QgYnJhY2UgPSBicmFjZXNbYnJhY2VzLmxlbmd0aCAtIDFdO1xuICAgICAgICBwcmV2LnR5cGUgPSAnZG90cyc7XG4gICAgICAgIHByZXYub3V0cHV0ICs9IHZhbHVlO1xuICAgICAgICBwcmV2LnZhbHVlICs9IHZhbHVlO1xuICAgICAgICBicmFjZS5kb3RzID0gdHJ1ZTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICgoc3RhdGUuYnJhY2VzICsgc3RhdGUucGFyZW5zKSA9PT0gMCAmJiBwcmV2LnR5cGUgIT09ICdib3MnICYmIHByZXYudHlwZSAhPT0gJ3NsYXNoJykge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSwgb3V0cHV0OiBET1RfTElURVJBTCB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHB1c2goeyB0eXBlOiAnZG90JywgdmFsdWUsIG91dHB1dDogRE9UX0xJVEVSQUwgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBRdWVzdGlvbiBtYXJrc1xuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSAnPycpIHtcbiAgICAgIGNvbnN0IGlzR3JvdXAgPSBwcmV2ICYmIHByZXYudmFsdWUgPT09ICcoJztcbiAgICAgIGlmICghaXNHcm91cCAmJiBvcHRzLm5vZXh0Z2xvYiAhPT0gdHJ1ZSAmJiBwZWVrKCkgPT09ICcoJyAmJiBwZWVrKDIpICE9PSAnPycpIHtcbiAgICAgICAgZXh0Z2xvYk9wZW4oJ3FtYXJrJywgdmFsdWUpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByZXYgJiYgcHJldi50eXBlID09PSAncGFyZW4nKSB7XG4gICAgICAgIGNvbnN0IG5leHQgPSBwZWVrKCk7XG4gICAgICAgIGxldCBvdXRwdXQgPSB2YWx1ZTtcblxuICAgICAgICBpZiAobmV4dCA9PT0gJzwnICYmICF1dGlscy5zdXBwb3J0c0xvb2tiZWhpbmRzKCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vZGUuanMgdjEwIG9yIGhpZ2hlciBpcyByZXF1aXJlZCBmb3IgcmVnZXggbG9va2JlaGluZHMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgocHJldi52YWx1ZSA9PT0gJygnICYmICEvWyE9PDpdLy50ZXN0KG5leHQpKSB8fCAobmV4dCA9PT0gJzwnICYmICEvPChbIT1dfFxcdys+KS8udGVzdChyZW1haW5pbmcoKSkpKSB7XG4gICAgICAgICAgb3V0cHV0ID0gYFxcXFwke3ZhbHVlfWA7XG4gICAgICAgIH1cblxuICAgICAgICBwdXNoKHsgdHlwZTogJ3RleHQnLCB2YWx1ZSwgb3V0cHV0IH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdHMuZG90ICE9PSB0cnVlICYmIChwcmV2LnR5cGUgPT09ICdzbGFzaCcgfHwgcHJldi50eXBlID09PSAnYm9zJykpIHtcbiAgICAgICAgcHVzaCh7IHR5cGU6ICdxbWFyaycsIHZhbHVlLCBvdXRwdXQ6IFFNQVJLX05PX0RPVCB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHB1c2goeyB0eXBlOiAncW1hcmsnLCB2YWx1ZSwgb3V0cHV0OiBRTUFSSyB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4Y2xhbWF0aW9uXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09ICchJykge1xuICAgICAgaWYgKG9wdHMubm9leHRnbG9iICE9PSB0cnVlICYmIHBlZWsoKSA9PT0gJygnKSB7XG4gICAgICAgIGlmIChwZWVrKDIpICE9PSAnPycgfHwgIS9bIT08Ol0vLnRlc3QocGVlaygzKSkpIHtcbiAgICAgICAgICBleHRnbG9iT3BlbignbmVnYXRlJywgdmFsdWUpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRzLm5vbmVnYXRlICE9PSB0cnVlICYmIHN0YXRlLmluZGV4ID09PSAwKSB7XG4gICAgICAgIG5lZ2F0ZSgpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQbHVzXG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgPT09ICcrJykge1xuICAgICAgaWYgKG9wdHMubm9leHRnbG9iICE9PSB0cnVlICYmIHBlZWsoKSA9PT0gJygnICYmIHBlZWsoMikgIT09ICc/Jykge1xuICAgICAgICBleHRnbG9iT3BlbigncGx1cycsIHZhbHVlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICgocHJldiAmJiBwcmV2LnZhbHVlID09PSAnKCcpIHx8IG9wdHMucmVnZXggPT09IGZhbHNlKSB7XG4gICAgICAgIHB1c2goeyB0eXBlOiAncGx1cycsIHZhbHVlLCBvdXRwdXQ6IFBMVVNfTElURVJBTCB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICgocHJldiAmJiAocHJldi50eXBlID09PSAnYnJhY2tldCcgfHwgcHJldi50eXBlID09PSAncGFyZW4nIHx8IHByZXYudHlwZSA9PT0gJ2JyYWNlJykpIHx8IHN0YXRlLnBhcmVucyA+IDApIHtcbiAgICAgICAgcHVzaCh7IHR5cGU6ICdwbHVzJywgdmFsdWUgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBwdXNoKHsgdHlwZTogJ3BsdXMnLCB2YWx1ZTogUExVU19MSVRFUkFMIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGxhaW4gdGV4dFxuICAgICAqL1xuXG4gICAgaWYgKHZhbHVlID09PSAnQCcpIHtcbiAgICAgIGlmIChvcHRzLm5vZXh0Z2xvYiAhPT0gdHJ1ZSAmJiBwZWVrKCkgPT09ICcoJyAmJiBwZWVrKDIpICE9PSAnPycpIHtcbiAgICAgICAgcHVzaCh7IHR5cGU6ICdhdCcsIGV4dGdsb2I6IHRydWUsIHZhbHVlLCBvdXRwdXQ6ICcnIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcHVzaCh7IHR5cGU6ICd0ZXh0JywgdmFsdWUgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQbGFpbiB0ZXh0XG4gICAgICovXG5cbiAgICBpZiAodmFsdWUgIT09ICcqJykge1xuICAgICAgaWYgKHZhbHVlID09PSAnJCcgfHwgdmFsdWUgPT09ICdeJykge1xuICAgICAgICB2YWx1ZSA9IGBcXFxcJHt2YWx1ZX1gO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBtYXRjaCA9IFJFR0VYX05PTl9TUEVDSUFMX0NIQVJTLmV4ZWMocmVtYWluaW5nKCkpO1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHZhbHVlICs9IG1hdGNoWzBdO1xuICAgICAgICBzdGF0ZS5pbmRleCArPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIHB1c2goeyB0eXBlOiAndGV4dCcsIHZhbHVlIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhcnNcbiAgICAgKi9cblxuICAgIGlmIChwcmV2ICYmIChwcmV2LnR5cGUgPT09ICdnbG9ic3RhcicgfHwgcHJldi5zdGFyID09PSB0cnVlKSkge1xuICAgICAgcHJldi50eXBlID0gJ3N0YXInO1xuICAgICAgcHJldi5zdGFyID0gdHJ1ZTtcbiAgICAgIHByZXYudmFsdWUgKz0gdmFsdWU7XG4gICAgICBwcmV2Lm91dHB1dCA9IHN0YXI7XG4gICAgICBzdGF0ZS5iYWNrdHJhY2sgPSB0cnVlO1xuICAgICAgc3RhdGUuZ2xvYnN0YXIgPSB0cnVlO1xuICAgICAgY29uc3VtZSh2YWx1ZSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdCA9IHJlbWFpbmluZygpO1xuICAgIGlmIChvcHRzLm5vZXh0Z2xvYiAhPT0gdHJ1ZSAmJiAvXlxcKFteP10vLnRlc3QocmVzdCkpIHtcbiAgICAgIGV4dGdsb2JPcGVuKCdzdGFyJywgdmFsdWUpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHByZXYudHlwZSA9PT0gJ3N0YXInKSB7XG4gICAgICBpZiAob3B0cy5ub2dsb2JzdGFyID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnN1bWUodmFsdWUpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJpb3IgPSBwcmV2LnByZXY7XG4gICAgICBjb25zdCBiZWZvcmUgPSBwcmlvci5wcmV2O1xuICAgICAgY29uc3QgaXNTdGFydCA9IHByaW9yLnR5cGUgPT09ICdzbGFzaCcgfHwgcHJpb3IudHlwZSA9PT0gJ2Jvcyc7XG4gICAgICBjb25zdCBhZnRlclN0YXIgPSBiZWZvcmUgJiYgKGJlZm9yZS50eXBlID09PSAnc3RhcicgfHwgYmVmb3JlLnR5cGUgPT09ICdnbG9ic3RhcicpO1xuXG4gICAgICBpZiAob3B0cy5iYXNoID09PSB0cnVlICYmICghaXNTdGFydCB8fCAocmVzdFswXSAmJiByZXN0WzBdICE9PSAnLycpKSkge1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3N0YXInLCB2YWx1ZSwgb3V0cHV0OiAnJyB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGlzQnJhY2UgPSBzdGF0ZS5icmFjZXMgPiAwICYmIChwcmlvci50eXBlID09PSAnY29tbWEnIHx8IHByaW9yLnR5cGUgPT09ICdicmFjZScpO1xuICAgICAgY29uc3QgaXNFeHRnbG9iID0gZXh0Z2xvYnMubGVuZ3RoICYmIChwcmlvci50eXBlID09PSAncGlwZScgfHwgcHJpb3IudHlwZSA9PT0gJ3BhcmVuJyk7XG4gICAgICBpZiAoIWlzU3RhcnQgJiYgcHJpb3IudHlwZSAhPT0gJ3BhcmVuJyAmJiAhaXNCcmFjZSAmJiAhaXNFeHRnbG9iKSB7XG4gICAgICAgIHB1c2goeyB0eXBlOiAnc3RhcicsIHZhbHVlLCBvdXRwdXQ6ICcnIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gc3RyaXAgY29uc2VjdXRpdmUgYC8qKi9gXG4gICAgICB3aGlsZSAocmVzdC5zbGljZSgwLCAzKSA9PT0gJy8qKicpIHtcbiAgICAgICAgY29uc3QgYWZ0ZXIgPSBpbnB1dFtzdGF0ZS5pbmRleCArIDRdO1xuICAgICAgICBpZiAoYWZ0ZXIgJiYgYWZ0ZXIgIT09ICcvJykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJlc3QgPSByZXN0LnNsaWNlKDMpO1xuICAgICAgICBjb25zdW1lKCcvKionLCAzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByaW9yLnR5cGUgPT09ICdib3MnICYmIGVvcygpKSB7XG4gICAgICAgIHByZXYudHlwZSA9ICdnbG9ic3Rhcic7XG4gICAgICAgIHByZXYudmFsdWUgKz0gdmFsdWU7XG4gICAgICAgIHByZXYub3V0cHV0ID0gZ2xvYnN0YXIob3B0cyk7XG4gICAgICAgIHN0YXRlLm91dHB1dCA9IHByZXYub3V0cHV0O1xuICAgICAgICBzdGF0ZS5nbG9ic3RhciA9IHRydWU7XG4gICAgICAgIGNvbnN1bWUodmFsdWUpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByaW9yLnR5cGUgPT09ICdzbGFzaCcgJiYgcHJpb3IucHJldi50eXBlICE9PSAnYm9zJyAmJiAhYWZ0ZXJTdGFyICYmIGVvcygpKSB7XG4gICAgICAgIHN0YXRlLm91dHB1dCA9IHN0YXRlLm91dHB1dC5zbGljZSgwLCAtKHByaW9yLm91dHB1dCArIHByZXYub3V0cHV0KS5sZW5ndGgpO1xuICAgICAgICBwcmlvci5vdXRwdXQgPSBgKD86JHtwcmlvci5vdXRwdXR9YDtcblxuICAgICAgICBwcmV2LnR5cGUgPSAnZ2xvYnN0YXInO1xuICAgICAgICBwcmV2Lm91dHB1dCA9IGdsb2JzdGFyKG9wdHMpICsgKG9wdHMuc3RyaWN0U2xhc2hlcyA/ICcpJyA6ICd8JCknKTtcbiAgICAgICAgcHJldi52YWx1ZSArPSB2YWx1ZTtcbiAgICAgICAgc3RhdGUuZ2xvYnN0YXIgPSB0cnVlO1xuICAgICAgICBzdGF0ZS5vdXRwdXQgKz0gcHJpb3Iub3V0cHV0ICsgcHJldi5vdXRwdXQ7XG4gICAgICAgIGNvbnN1bWUodmFsdWUpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByaW9yLnR5cGUgPT09ICdzbGFzaCcgJiYgcHJpb3IucHJldi50eXBlICE9PSAnYm9zJyAmJiByZXN0WzBdID09PSAnLycpIHtcbiAgICAgICAgY29uc3QgZW5kID0gcmVzdFsxXSAhPT0gdm9pZCAwID8gJ3wkJyA6ICcnO1xuXG4gICAgICAgIHN0YXRlLm91dHB1dCA9IHN0YXRlLm91dHB1dC5zbGljZSgwLCAtKHByaW9yLm91dHB1dCArIHByZXYub3V0cHV0KS5sZW5ndGgpO1xuICAgICAgICBwcmlvci5vdXRwdXQgPSBgKD86JHtwcmlvci5vdXRwdXR9YDtcblxuICAgICAgICBwcmV2LnR5cGUgPSAnZ2xvYnN0YXInO1xuICAgICAgICBwcmV2Lm91dHB1dCA9IGAke2dsb2JzdGFyKG9wdHMpfSR7U0xBU0hfTElURVJBTH18JHtTTEFTSF9MSVRFUkFMfSR7ZW5kfSlgO1xuICAgICAgICBwcmV2LnZhbHVlICs9IHZhbHVlO1xuXG4gICAgICAgIHN0YXRlLm91dHB1dCArPSBwcmlvci5vdXRwdXQgKyBwcmV2Lm91dHB1dDtcbiAgICAgICAgc3RhdGUuZ2xvYnN0YXIgPSB0cnVlO1xuXG4gICAgICAgIGNvbnN1bWUodmFsdWUgKyBhZHZhbmNlKCkpO1xuXG4gICAgICAgIHB1c2goeyB0eXBlOiAnc2xhc2gnLCB2YWx1ZTogJy8nLCBvdXRwdXQ6ICcnIH0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByaW9yLnR5cGUgPT09ICdib3MnICYmIHJlc3RbMF0gPT09ICcvJykge1xuICAgICAgICBwcmV2LnR5cGUgPSAnZ2xvYnN0YXInO1xuICAgICAgICBwcmV2LnZhbHVlICs9IHZhbHVlO1xuICAgICAgICBwcmV2Lm91dHB1dCA9IGAoPzpefCR7U0xBU0hfTElURVJBTH18JHtnbG9ic3RhcihvcHRzKX0ke1NMQVNIX0xJVEVSQUx9KWA7XG4gICAgICAgIHN0YXRlLm91dHB1dCA9IHByZXYub3V0cHV0O1xuICAgICAgICBzdGF0ZS5nbG9ic3RhciA9IHRydWU7XG4gICAgICAgIGNvbnN1bWUodmFsdWUgKyBhZHZhbmNlKCkpO1xuICAgICAgICBwdXNoKHsgdHlwZTogJ3NsYXNoJywgdmFsdWU6ICcvJywgb3V0cHV0OiAnJyB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIHJlbW92ZSBzaW5nbGUgc3RhciBmcm9tIG91dHB1dFxuICAgICAgc3RhdGUub3V0cHV0ID0gc3RhdGUub3V0cHV0LnNsaWNlKDAsIC1wcmV2Lm91dHB1dC5sZW5ndGgpO1xuXG4gICAgICAvLyByZXNldCBwcmV2aW91cyB0b2tlbiB0byBnbG9ic3RhclxuICAgICAgcHJldi50eXBlID0gJ2dsb2JzdGFyJztcbiAgICAgIHByZXYub3V0cHV0ID0gZ2xvYnN0YXIob3B0cyk7XG4gICAgICBwcmV2LnZhbHVlICs9IHZhbHVlO1xuXG4gICAgICAvLyByZXNldCBvdXRwdXQgd2l0aCBnbG9ic3RhclxuICAgICAgc3RhdGUub3V0cHV0ICs9IHByZXYub3V0cHV0O1xuICAgICAgc3RhdGUuZ2xvYnN0YXIgPSB0cnVlO1xuICAgICAgY29uc3VtZSh2YWx1ZSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb25zdCB0b2tlbiA9IHsgdHlwZTogJ3N0YXInLCB2YWx1ZSwgb3V0cHV0OiBzdGFyIH07XG5cbiAgICBpZiAob3B0cy5iYXNoID09PSB0cnVlKSB7XG4gICAgICB0b2tlbi5vdXRwdXQgPSAnLio/JztcbiAgICAgIGlmIChwcmV2LnR5cGUgPT09ICdib3MnIHx8IHByZXYudHlwZSA9PT0gJ3NsYXNoJykge1xuICAgICAgICB0b2tlbi5vdXRwdXQgPSBub2RvdCArIHRva2VuLm91dHB1dDtcbiAgICAgIH1cbiAgICAgIHB1c2godG9rZW4pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHByZXYgJiYgKHByZXYudHlwZSA9PT0gJ2JyYWNrZXQnIHx8IHByZXYudHlwZSA9PT0gJ3BhcmVuJykgJiYgb3B0cy5yZWdleCA9PT0gdHJ1ZSkge1xuICAgICAgdG9rZW4ub3V0cHV0ID0gdmFsdWU7XG4gICAgICBwdXNoKHRva2VuKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5pbmRleCA9PT0gc3RhdGUuc3RhcnQgfHwgcHJldi50eXBlID09PSAnc2xhc2gnIHx8IHByZXYudHlwZSA9PT0gJ2RvdCcpIHtcbiAgICAgIGlmIChwcmV2LnR5cGUgPT09ICdkb3QnKSB7XG4gICAgICAgIHN0YXRlLm91dHB1dCArPSBOT19ET1RfU0xBU0g7XG4gICAgICAgIHByZXYub3V0cHV0ICs9IE5PX0RPVF9TTEFTSDtcblxuICAgICAgfSBlbHNlIGlmIChvcHRzLmRvdCA9PT0gdHJ1ZSkge1xuICAgICAgICBzdGF0ZS5vdXRwdXQgKz0gTk9fRE9UU19TTEFTSDtcbiAgICAgICAgcHJldi5vdXRwdXQgKz0gTk9fRE9UU19TTEFTSDtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUub3V0cHV0ICs9IG5vZG90O1xuICAgICAgICBwcmV2Lm91dHB1dCArPSBub2RvdDtcbiAgICAgIH1cblxuICAgICAgaWYgKHBlZWsoKSAhPT0gJyonKSB7XG4gICAgICAgIHN0YXRlLm91dHB1dCArPSBPTkVfQ0hBUjtcbiAgICAgICAgcHJldi5vdXRwdXQgKz0gT05FX0NIQVI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHVzaCh0b2tlbik7XG4gIH1cblxuICB3aGlsZSAoc3RhdGUuYnJhY2tldHMgPiAwKSB7XG4gICAgaWYgKG9wdHMuc3RyaWN0QnJhY2tldHMgPT09IHRydWUpIHRocm93IG5ldyBTeW50YXhFcnJvcihzeW50YXhFcnJvcignY2xvc2luZycsICddJykpO1xuICAgIHN0YXRlLm91dHB1dCA9IHV0aWxzLmVzY2FwZUxhc3Qoc3RhdGUub3V0cHV0LCAnWycpO1xuICAgIGRlY3JlbWVudCgnYnJhY2tldHMnKTtcbiAgfVxuXG4gIHdoaWxlIChzdGF0ZS5wYXJlbnMgPiAwKSB7XG4gICAgaWYgKG9wdHMuc3RyaWN0QnJhY2tldHMgPT09IHRydWUpIHRocm93IG5ldyBTeW50YXhFcnJvcihzeW50YXhFcnJvcignY2xvc2luZycsICcpJykpO1xuICAgIHN0YXRlLm91dHB1dCA9IHV0aWxzLmVzY2FwZUxhc3Qoc3RhdGUub3V0cHV0LCAnKCcpO1xuICAgIGRlY3JlbWVudCgncGFyZW5zJyk7XG4gIH1cblxuICB3aGlsZSAoc3RhdGUuYnJhY2VzID4gMCkge1xuICAgIGlmIChvcHRzLnN0cmljdEJyYWNrZXRzID09PSB0cnVlKSB0aHJvdyBuZXcgU3ludGF4RXJyb3Ioc3ludGF4RXJyb3IoJ2Nsb3NpbmcnLCAnfScpKTtcbiAgICBzdGF0ZS5vdXRwdXQgPSB1dGlscy5lc2NhcGVMYXN0KHN0YXRlLm91dHB1dCwgJ3snKTtcbiAgICBkZWNyZW1lbnQoJ2JyYWNlcycpO1xuICB9XG5cbiAgaWYgKG9wdHMuc3RyaWN0U2xhc2hlcyAhPT0gdHJ1ZSAmJiAocHJldi50eXBlID09PSAnc3RhcicgfHwgcHJldi50eXBlID09PSAnYnJhY2tldCcpKSB7XG4gICAgcHVzaCh7IHR5cGU6ICdtYXliZV9zbGFzaCcsIHZhbHVlOiAnJywgb3V0cHV0OiBgJHtTTEFTSF9MSVRFUkFMfT9gIH0pO1xuICB9XG5cbiAgLy8gcmVidWlsZCB0aGUgb3V0cHV0IGlmIHdlIGhhZCB0byBiYWNrdHJhY2sgYXQgYW55IHBvaW50XG4gIGlmIChzdGF0ZS5iYWNrdHJhY2sgPT09IHRydWUpIHtcbiAgICBzdGF0ZS5vdXRwdXQgPSAnJztcblxuICAgIGZvciAoY29uc3QgdG9rZW4gb2Ygc3RhdGUudG9rZW5zKSB7XG4gICAgICBzdGF0ZS5vdXRwdXQgKz0gdG9rZW4ub3V0cHV0ICE9IG51bGwgPyB0b2tlbi5vdXRwdXQgOiB0b2tlbi52YWx1ZTtcblxuICAgICAgaWYgKHRva2VuLnN1ZmZpeCkge1xuICAgICAgICBzdGF0ZS5vdXRwdXQgKz0gdG9rZW4uc3VmZml4O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdGF0ZTtcbn07XG5cbi8qKlxuICogRmFzdCBwYXRocyBmb3IgY3JlYXRpbmcgcmVndWxhciBleHByZXNzaW9ucyBmb3IgY29tbW9uIGdsb2IgcGF0dGVybnMuXG4gKiBUaGlzIGNhbiBzaWduaWZpY2FudGx5IHNwZWVkIHVwIHByb2Nlc3NpbmcgYW5kIGhhcyB2ZXJ5IGxpdHRsZSBkb3duc2lkZVxuICogaW1wYWN0IHdoZW4gbm9uZSBvZiB0aGUgZmFzdCBwYXRocyBtYXRjaC5cbiAqL1xuXG5wYXJzZS5mYXN0cGF0aHMgPSAoaW5wdXQsIG9wdGlvbnMpID0+IHtcbiAgY29uc3Qgb3B0cyA9IHsgLi4ub3B0aW9ucyB9O1xuICBjb25zdCBtYXggPSB0eXBlb2Ygb3B0cy5tYXhMZW5ndGggPT09ICdudW1iZXInID8gTWF0aC5taW4oTUFYX0xFTkdUSCwgb3B0cy5tYXhMZW5ndGgpIDogTUFYX0xFTkdUSDtcbiAgY29uc3QgbGVuID0gaW5wdXQubGVuZ3RoO1xuICBpZiAobGVuID4gbWF4KSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBJbnB1dCBsZW5ndGg6ICR7bGVufSwgZXhjZWVkcyBtYXhpbXVtIGFsbG93ZWQgbGVuZ3RoOiAke21heH1gKTtcbiAgfVxuXG4gIGlucHV0ID0gUkVQTEFDRU1FTlRTW2lucHV0XSB8fCBpbnB1dDtcbiAgY29uc3Qgd2luMzIgPSB1dGlscy5pc1dpbmRvd3Mob3B0aW9ucyk7XG5cbiAgLy8gY3JlYXRlIGNvbnN0YW50cyBiYXNlZCBvbiBwbGF0Zm9ybSwgZm9yIHdpbmRvd3Mgb3IgcG9zaXhcbiAgY29uc3Qge1xuICAgIERPVF9MSVRFUkFMLFxuICAgIFNMQVNIX0xJVEVSQUwsXG4gICAgT05FX0NIQVIsXG4gICAgRE9UU19TTEFTSCxcbiAgICBOT19ET1QsXG4gICAgTk9fRE9UUyxcbiAgICBOT19ET1RTX1NMQVNILFxuICAgIFNUQVIsXG4gICAgU1RBUlRfQU5DSE9SXG4gIH0gPSBjb25zdGFudHMuZ2xvYkNoYXJzKHdpbjMyKTtcblxuICBjb25zdCBub2RvdCA9IG9wdHMuZG90ID8gTk9fRE9UUyA6IE5PX0RPVDtcbiAgY29uc3Qgc2xhc2hEb3QgPSBvcHRzLmRvdCA/IE5PX0RPVFNfU0xBU0ggOiBOT19ET1Q7XG4gIGNvbnN0IGNhcHR1cmUgPSBvcHRzLmNhcHR1cmUgPyAnJyA6ICc/Oic7XG4gIGNvbnN0IHN0YXRlID0geyBuZWdhdGVkOiBmYWxzZSwgcHJlZml4OiAnJyB9O1xuICBsZXQgc3RhciA9IG9wdHMuYmFzaCA9PT0gdHJ1ZSA/ICcuKj8nIDogU1RBUjtcblxuICBpZiAob3B0cy5jYXB0dXJlKSB7XG4gICAgc3RhciA9IGAoJHtzdGFyfSlgO1xuICB9XG5cbiAgY29uc3QgZ2xvYnN0YXIgPSBvcHRzID0+IHtcbiAgICBpZiAob3B0cy5ub2dsb2JzdGFyID09PSB0cnVlKSByZXR1cm4gc3RhcjtcbiAgICByZXR1cm4gYCgke2NhcHR1cmV9KD86KD8hJHtTVEFSVF9BTkNIT1J9JHtvcHRzLmRvdCA/IERPVFNfU0xBU0ggOiBET1RfTElURVJBTH0pLikqPylgO1xuICB9O1xuXG4gIGNvbnN0IGNyZWF0ZSA9IHN0ciA9PiB7XG4gICAgc3dpdGNoIChzdHIpIHtcbiAgICAgIGNhc2UgJyonOlxuICAgICAgICByZXR1cm4gYCR7bm9kb3R9JHtPTkVfQ0hBUn0ke3N0YXJ9YDtcblxuICAgICAgY2FzZSAnLionOlxuICAgICAgICByZXR1cm4gYCR7RE9UX0xJVEVSQUx9JHtPTkVfQ0hBUn0ke3N0YXJ9YDtcblxuICAgICAgY2FzZSAnKi4qJzpcbiAgICAgICAgcmV0dXJuIGAke25vZG90fSR7c3Rhcn0ke0RPVF9MSVRFUkFMfSR7T05FX0NIQVJ9JHtzdGFyfWA7XG5cbiAgICAgIGNhc2UgJyovKic6XG4gICAgICAgIHJldHVybiBgJHtub2RvdH0ke3N0YXJ9JHtTTEFTSF9MSVRFUkFMfSR7T05FX0NIQVJ9JHtzbGFzaERvdH0ke3N0YXJ9YDtcblxuICAgICAgY2FzZSAnKionOlxuICAgICAgICByZXR1cm4gbm9kb3QgKyBnbG9ic3RhcihvcHRzKTtcblxuICAgICAgY2FzZSAnKiovKic6XG4gICAgICAgIHJldHVybiBgKD86JHtub2RvdH0ke2dsb2JzdGFyKG9wdHMpfSR7U0xBU0hfTElURVJBTH0pPyR7c2xhc2hEb3R9JHtPTkVfQ0hBUn0ke3N0YXJ9YDtcblxuICAgICAgY2FzZSAnKiovKi4qJzpcbiAgICAgICAgcmV0dXJuIGAoPzoke25vZG90fSR7Z2xvYnN0YXIob3B0cyl9JHtTTEFTSF9MSVRFUkFMfSk/JHtzbGFzaERvdH0ke3N0YXJ9JHtET1RfTElURVJBTH0ke09ORV9DSEFSfSR7c3Rhcn1gO1xuXG4gICAgICBjYXNlICcqKi8uKic6XG4gICAgICAgIHJldHVybiBgKD86JHtub2RvdH0ke2dsb2JzdGFyKG9wdHMpfSR7U0xBU0hfTElURVJBTH0pPyR7RE9UX0xJVEVSQUx9JHtPTkVfQ0hBUn0ke3N0YXJ9YDtcblxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBjb25zdCBtYXRjaCA9IC9eKC4qPylcXC4oXFx3KykkLy5leGVjKHN0cik7XG4gICAgICAgIGlmICghbWF0Y2gpIHJldHVybjtcblxuICAgICAgICBjb25zdCBzb3VyY2UgPSBjcmVhdGUobWF0Y2hbMV0pO1xuICAgICAgICBpZiAoIXNvdXJjZSkgcmV0dXJuO1xuXG4gICAgICAgIHJldHVybiBzb3VyY2UgKyBET1RfTElURVJBTCArIG1hdGNoWzJdO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBvdXRwdXQgPSB1dGlscy5yZW1vdmVQcmVmaXgoaW5wdXQsIHN0YXRlKTtcbiAgbGV0IHNvdXJjZSA9IGNyZWF0ZShvdXRwdXQpO1xuXG4gIGlmIChzb3VyY2UgJiYgb3B0cy5zdHJpY3RTbGFzaGVzICE9PSB0cnVlKSB7XG4gICAgc291cmNlICs9IGAke1NMQVNIX0xJVEVSQUx9P2A7XG4gIH1cblxuICByZXR1cm4gc291cmNlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBzY2FuID0gcmVxdWlyZSgnLi9zY2FuJyk7XG5jb25zdCBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcbmNvbnN0IGlzT2JqZWN0ID0gdmFsID0+IHZhbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2YWwpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXRjaGVyIGZ1bmN0aW9uIGZyb20gb25lIG9yIG1vcmUgZ2xvYiBwYXR0ZXJucy4gVGhlXG4gKiByZXR1cm5lZCBmdW5jdGlvbiB0YWtlcyBhIHN0cmluZyB0byBtYXRjaCBhcyBpdHMgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgcmV0dXJucyB0cnVlIGlmIHRoZSBzdHJpbmcgaXMgYSBtYXRjaC4gVGhlIHJldHVybmVkIG1hdGNoZXJcbiAqIGZ1bmN0aW9uIGFsc28gdGFrZXMgYSBib29sZWFuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdGhhdCwgd2hlbiB0cnVlLFxuICogcmV0dXJucyBhbiBvYmplY3Qgd2l0aCBhZGRpdGlvbmFsIGluZm9ybWF0aW9uLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwaWNvbWF0Y2ggPSByZXF1aXJlKCdwaWNvbWF0Y2gnKTtcbiAqIC8vIHBpY29tYXRjaChnbG9iWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnN0IGlzTWF0Y2ggPSBwaWNvbWF0Y2goJyouISgqYSknKTtcbiAqIGNvbnNvbGUubG9nKGlzTWF0Y2goJ2EuYScpKTsgLy89PiBmYWxzZVxuICogY29uc29sZS5sb2coaXNNYXRjaCgnYS5iJykpOyAvLz0+IHRydWVcbiAqIGBgYFxuICogQG5hbWUgcGljb21hdGNoXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gYGdsb2JzYCBPbmUgb3IgbW9yZSBnbG9iIHBhdHRlcm5zLlxuICogQHBhcmFtIHtPYmplY3Q9fSBgb3B0aW9uc2BcbiAqIEByZXR1cm4ge0Z1bmN0aW9uPX0gUmV0dXJucyBhIG1hdGNoZXIgZnVuY3Rpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmNvbnN0IHBpY29tYXRjaCA9IChnbG9iLCBvcHRpb25zLCByZXR1cm5TdGF0ZSA9IGZhbHNlKSA9PiB7XG4gIGlmIChBcnJheS5pc0FycmF5KGdsb2IpKSB7XG4gICAgY29uc3QgZm5zID0gZ2xvYi5tYXAoaW5wdXQgPT4gcGljb21hdGNoKGlucHV0LCBvcHRpb25zLCByZXR1cm5TdGF0ZSkpO1xuICAgIGNvbnN0IGFycmF5TWF0Y2hlciA9IHN0ciA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGlzTWF0Y2ggb2YgZm5zKSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gaXNNYXRjaChzdHIpO1xuICAgICAgICBpZiAoc3RhdGUpIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheU1hdGNoZXI7XG4gIH1cblxuICBjb25zdCBpc1N0YXRlID0gaXNPYmplY3QoZ2xvYikgJiYgZ2xvYi50b2tlbnMgJiYgZ2xvYi5pbnB1dDtcblxuICBpZiAoZ2xvYiA9PT0gJycgfHwgKHR5cGVvZiBnbG9iICE9PSAnc3RyaW5nJyAmJiAhaXNTdGF0ZSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBwYXR0ZXJuIHRvIGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICB9XG5cbiAgY29uc3Qgb3B0cyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IHBvc2l4ID0gdXRpbHMuaXNXaW5kb3dzKG9wdGlvbnMpO1xuICBjb25zdCByZWdleCA9IGlzU3RhdGVcbiAgICA/IHBpY29tYXRjaC5jb21waWxlUmUoZ2xvYiwgb3B0aW9ucylcbiAgICA6IHBpY29tYXRjaC5tYWtlUmUoZ2xvYiwgb3B0aW9ucywgZmFsc2UsIHRydWUpO1xuXG4gIGNvbnN0IHN0YXRlID0gcmVnZXguc3RhdGU7XG4gIGRlbGV0ZSByZWdleC5zdGF0ZTtcblxuICBsZXQgaXNJZ25vcmVkID0gKCkgPT4gZmFsc2U7XG4gIGlmIChvcHRzLmlnbm9yZSkge1xuICAgIGNvbnN0IGlnbm9yZU9wdHMgPSB7IC4uLm9wdGlvbnMsIGlnbm9yZTogbnVsbCwgb25NYXRjaDogbnVsbCwgb25SZXN1bHQ6IG51bGwgfTtcbiAgICBpc0lnbm9yZWQgPSBwaWNvbWF0Y2gob3B0cy5pZ25vcmUsIGlnbm9yZU9wdHMsIHJldHVyblN0YXRlKTtcbiAgfVxuXG4gIGNvbnN0IG1hdGNoZXIgPSAoaW5wdXQsIHJldHVybk9iamVjdCA9IGZhbHNlKSA9PiB7XG4gICAgY29uc3QgeyBpc01hdGNoLCBtYXRjaCwgb3V0cHV0IH0gPSBwaWNvbWF0Y2gudGVzdChpbnB1dCwgcmVnZXgsIG9wdGlvbnMsIHsgZ2xvYiwgcG9zaXggfSk7XG4gICAgY29uc3QgcmVzdWx0ID0geyBnbG9iLCBzdGF0ZSwgcmVnZXgsIHBvc2l4LCBpbnB1dCwgb3V0cHV0LCBtYXRjaCwgaXNNYXRjaCB9O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRzLm9uUmVzdWx0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvcHRzLm9uUmVzdWx0KHJlc3VsdCk7XG4gICAgfVxuXG4gICAgaWYgKGlzTWF0Y2ggPT09IGZhbHNlKSB7XG4gICAgICByZXN1bHQuaXNNYXRjaCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHJldHVybk9iamVjdCA/IHJlc3VsdCA6IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChpc0lnbm9yZWQoaW5wdXQpKSB7XG4gICAgICBpZiAodHlwZW9mIG9wdHMub25JZ25vcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb3B0cy5vbklnbm9yZShyZXN1bHQpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LmlzTWF0Y2ggPSBmYWxzZTtcbiAgICAgIHJldHVybiByZXR1cm5PYmplY3QgPyByZXN1bHQgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdHMub25NYXRjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3B0cy5vbk1hdGNoKHJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5PYmplY3QgPyByZXN1bHQgOiB0cnVlO1xuICB9O1xuXG4gIGlmIChyZXR1cm5TdGF0ZSkge1xuICAgIG1hdGNoZXIuc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHJldHVybiBtYXRjaGVyO1xufTtcblxuLyoqXG4gKiBUZXN0IGBpbnB1dGAgd2l0aCB0aGUgZ2l2ZW4gYHJlZ2V4YC4gVGhpcyBpcyB1c2VkIGJ5IHRoZSBtYWluXG4gKiBgcGljb21hdGNoKClgIGZ1bmN0aW9uIHRvIHRlc3QgdGhlIGlucHV0IHN0cmluZy5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcGljb21hdGNoID0gcmVxdWlyZSgncGljb21hdGNoJyk7XG4gKiAvLyBwaWNvbWF0Y2gudGVzdChpbnB1dCwgcmVnZXhbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc29sZS5sb2cocGljb21hdGNoLnRlc3QoJ2Zvby9iYXInLCAvXig/OihbXi9dKj8pXFwvKFteL10qPykpJC8pKTtcbiAqIC8vIHsgaXNNYXRjaDogdHJ1ZSwgbWF0Y2g6IFsgJ2Zvby8nLCAnZm9vJywgJ2JhcicgXSwgb3V0cHV0OiAnZm9vL2JhcicgfVxuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYGlucHV0YCBTdHJpbmcgdG8gdGVzdC5cbiAqIEBwYXJhbSB7UmVnRXhwfSBgcmVnZXhgXG4gKiBAcmV0dXJuIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IHdpdGggbWF0Y2hpbmcgaW5mby5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucGljb21hdGNoLnRlc3QgPSAoaW5wdXQsIHJlZ2V4LCBvcHRpb25zLCB7IGdsb2IsIHBvc2l4IH0gPSB7fSkgPT4ge1xuICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGlucHV0IHRvIGJlIGEgc3RyaW5nJyk7XG4gIH1cblxuICBpZiAoaW5wdXQgPT09ICcnKSB7XG4gICAgcmV0dXJuIHsgaXNNYXRjaDogZmFsc2UsIG91dHB1dDogJycgfTtcbiAgfVxuXG4gIGNvbnN0IG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBmb3JtYXQgPSBvcHRzLmZvcm1hdCB8fCAocG9zaXggPyB1dGlscy50b1Bvc2l4U2xhc2hlcyA6IG51bGwpO1xuICBsZXQgbWF0Y2ggPSBpbnB1dCA9PT0gZ2xvYjtcbiAgbGV0IG91dHB1dCA9IChtYXRjaCAmJiBmb3JtYXQpID8gZm9ybWF0KGlucHV0KSA6IGlucHV0O1xuXG4gIGlmIChtYXRjaCA9PT0gZmFsc2UpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXQgPyBmb3JtYXQoaW5wdXQpIDogaW5wdXQ7XG4gICAgbWF0Y2ggPSBvdXRwdXQgPT09IGdsb2I7XG4gIH1cblxuICBpZiAobWF0Y2ggPT09IGZhbHNlIHx8IG9wdHMuY2FwdHVyZSA9PT0gdHJ1ZSkge1xuICAgIGlmIChvcHRzLm1hdGNoQmFzZSA9PT0gdHJ1ZSB8fCBvcHRzLmJhc2VuYW1lID09PSB0cnVlKSB7XG4gICAgICBtYXRjaCA9IHBpY29tYXRjaC5tYXRjaEJhc2UoaW5wdXQsIHJlZ2V4LCBvcHRpb25zLCBwb3NpeCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1hdGNoID0gcmVnZXguZXhlYyhvdXRwdXQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7IGlzTWF0Y2g6IEJvb2xlYW4obWF0Y2gpLCBtYXRjaCwgb3V0cHV0IH07XG59O1xuXG4vKipcbiAqIE1hdGNoIHRoZSBiYXNlbmFtZSBvZiBhIGZpbGVwYXRoLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwaWNvbWF0Y2ggPSByZXF1aXJlKCdwaWNvbWF0Y2gnKTtcbiAqIC8vIHBpY29tYXRjaC5tYXRjaEJhc2UoaW5wdXQsIGdsb2JbLCBvcHRpb25zXSk7XG4gKiBjb25zb2xlLmxvZyhwaWNvbWF0Y2gubWF0Y2hCYXNlKCdmb28vYmFyLmpzJywgJyouanMnKTsgLy8gdHJ1ZVxuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYGlucHV0YCBTdHJpbmcgdG8gdGVzdC5cbiAqIEBwYXJhbSB7UmVnRXhwfFN0cmluZ30gYGdsb2JgIEdsb2IgcGF0dGVybiBvciByZWdleCBjcmVhdGVkIGJ5IFsubWFrZVJlXSgjbWFrZVJlKS5cbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnBpY29tYXRjaC5tYXRjaEJhc2UgPSAoaW5wdXQsIGdsb2IsIG9wdGlvbnMsIHBvc2l4ID0gdXRpbHMuaXNXaW5kb3dzKG9wdGlvbnMpKSA9PiB7XG4gIGNvbnN0IHJlZ2V4ID0gZ2xvYiBpbnN0YW5jZW9mIFJlZ0V4cCA/IGdsb2IgOiBwaWNvbWF0Y2gubWFrZVJlKGdsb2IsIG9wdGlvbnMpO1xuICByZXR1cm4gcmVnZXgudGVzdChwYXRoLmJhc2VuYW1lKGlucHV0KSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiAqKmFueSoqIG9mIHRoZSBnaXZlbiBnbG9iIGBwYXR0ZXJuc2AgbWF0Y2ggdGhlIHNwZWNpZmllZCBgc3RyaW5nYC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcGljb21hdGNoID0gcmVxdWlyZSgncGljb21hdGNoJyk7XG4gKiAvLyBwaWNvbWF0Y2guaXNNYXRjaChzdHJpbmcsIHBhdHRlcm5zWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnNvbGUubG9nKHBpY29tYXRjaC5pc01hdGNoKCdhLmEnLCBbJ2IuKicsICcqLmEnXSkpOyAvLz0+IHRydWVcbiAqIGNvbnNvbGUubG9nKHBpY29tYXRjaC5pc01hdGNoKCdhLmEnLCAnYi4qJykpOyAvLz0+IGZhbHNlXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBzdHIgVGhlIHN0cmluZyB0byB0ZXN0LlxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IHBhdHRlcm5zIE9uZSBvciBtb3JlIGdsb2IgcGF0dGVybnMgdG8gdXNlIGZvciBtYXRjaGluZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gU2VlIGF2YWlsYWJsZSBbb3B0aW9uc10oI29wdGlvbnMpLlxuICogQHJldHVybiB7Qm9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGFueSBwYXR0ZXJucyBtYXRjaCBgc3RyYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5waWNvbWF0Y2guaXNNYXRjaCA9IChzdHIsIHBhdHRlcm5zLCBvcHRpb25zKSA9PiBwaWNvbWF0Y2gocGF0dGVybnMsIG9wdGlvbnMpKHN0cik7XG5cbi8qKlxuICogUGFyc2UgYSBnbG9iIHBhdHRlcm4gdG8gY3JlYXRlIHRoZSBzb3VyY2Ugc3RyaW5nIGZvciBhIHJlZ3VsYXJcbiAqIGV4cHJlc3Npb24uXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHBpY29tYXRjaCA9IHJlcXVpcmUoJ3BpY29tYXRjaCcpO1xuICogY29uc3QgcmVzdWx0ID0gcGljb21hdGNoLnBhcnNlKHBhdHRlcm5bLCBvcHRpb25zXSk7XG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgcGF0dGVybmBcbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2BcbiAqIEByZXR1cm4ge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB1c2VmdWwgcHJvcGVydGllcyBhbmQgb3V0cHV0IHRvIGJlIHVzZWQgYXMgYSByZWdleCBzb3VyY2Ugc3RyaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5waWNvbWF0Y2gucGFyc2UgPSAocGF0dGVybiwgb3B0aW9ucykgPT4ge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkgcmV0dXJuIHBhdHRlcm4ubWFwKHAgPT4gcGljb21hdGNoLnBhcnNlKHAsIG9wdGlvbnMpKTtcbiAgcmV0dXJuIHBhcnNlKHBhdHRlcm4sIHsgLi4ub3B0aW9ucywgZmFzdHBhdGhzOiBmYWxzZSB9KTtcbn07XG5cbi8qKlxuICogU2NhbiBhIGdsb2IgcGF0dGVybiB0byBzZXBhcmF0ZSB0aGUgcGF0dGVybiBpbnRvIHNlZ21lbnRzLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwaWNvbWF0Y2ggPSByZXF1aXJlKCdwaWNvbWF0Y2gnKTtcbiAqIC8vIHBpY29tYXRjaC5zY2FuKGlucHV0Wywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnN0IHJlc3VsdCA9IHBpY29tYXRjaC5zY2FuKCchLi9mb28vKi5qcycpO1xuICogY29uc29sZS5sb2cocmVzdWx0KTtcbiAqIHsgcHJlZml4OiAnIS4vJyxcbiAqICAgaW5wdXQ6ICchLi9mb28vKi5qcycsXG4gKiAgIHN0YXJ0OiAzLFxuICogICBiYXNlOiAnZm9vJyxcbiAqICAgZ2xvYjogJyouanMnLFxuICogICBpc0JyYWNlOiBmYWxzZSxcbiAqICAgaXNCcmFja2V0OiBmYWxzZSxcbiAqICAgaXNHbG9iOiB0cnVlLFxuICogICBpc0V4dGdsb2I6IGZhbHNlLFxuICogICBpc0dsb2JzdGFyOiBmYWxzZSxcbiAqICAgbmVnYXRlZDogdHJ1ZSB9XG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgaW5wdXRgIEdsb2IgcGF0dGVybiB0byBzY2FuLlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCB3aXRoXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnBpY29tYXRjaC5zY2FuID0gKGlucHV0LCBvcHRpb25zKSA9PiBzY2FuKGlucHV0LCBvcHRpb25zKTtcblxuLyoqXG4gKiBDb21waWxlIGEgcmVndWxhciBleHByZXNzaW9uIGZyb20gdGhlIGBzdGF0ZWAgb2JqZWN0IHJldHVybmVkIGJ5IHRoZVxuICogW3BhcnNlKCldKCNwYXJzZSkgbWV0aG9kLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBgc3RhdGVgXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGByZXR1cm5PdXRwdXRgIEludGVuZGVkIGZvciBpbXBsZW1lbnRvcnMsIHRoaXMgYXJndW1lbnQgYWxsb3dzIHlvdSB0byByZXR1cm4gdGhlIHJhdyBvdXRwdXQgZnJvbSB0aGUgcGFyc2VyLlxuICogQHBhcmFtIHtCb29sZWFufSBgcmV0dXJuU3RhdGVgIEFkZHMgdGhlIHN0YXRlIHRvIGEgYHN0YXRlYCBwcm9wZXJ0eSBvbiB0aGUgcmV0dXJuZWQgcmVnZXguIFVzZWZ1bCBmb3IgaW1wbGVtZW50b3JzIGFuZCBkZWJ1Z2dpbmcuXG4gKiBAcmV0dXJuIHtSZWdFeHB9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnBpY29tYXRjaC5jb21waWxlUmUgPSAoc3RhdGUsIG9wdGlvbnMsIHJldHVybk91dHB1dCA9IGZhbHNlLCByZXR1cm5TdGF0ZSA9IGZhbHNlKSA9PiB7XG4gIGlmIChyZXR1cm5PdXRwdXQgPT09IHRydWUpIHtcbiAgICByZXR1cm4gc3RhdGUub3V0cHV0O1xuICB9XG5cbiAgY29uc3Qgb3B0cyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IHByZXBlbmQgPSBvcHRzLmNvbnRhaW5zID8gJycgOiAnXic7XG4gIGNvbnN0IGFwcGVuZCA9IG9wdHMuY29udGFpbnMgPyAnJyA6ICckJztcblxuICBsZXQgc291cmNlID0gYCR7cHJlcGVuZH0oPzoke3N0YXRlLm91dHB1dH0pJHthcHBlbmR9YDtcbiAgaWYgKHN0YXRlICYmIHN0YXRlLm5lZ2F0ZWQgPT09IHRydWUpIHtcbiAgICBzb3VyY2UgPSBgXig/ISR7c291cmNlfSkuKiRgO1xuICB9XG5cbiAgY29uc3QgcmVnZXggPSBwaWNvbWF0Y2gudG9SZWdleChzb3VyY2UsIG9wdGlvbnMpO1xuICBpZiAocmV0dXJuU3RhdGUgPT09IHRydWUpIHtcbiAgICByZWdleC5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgcmV0dXJuIHJlZ2V4O1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSByZWd1bGFyIGV4cHJlc3Npb24gZnJvbSBhIHBhcnNlZCBnbG9iIHBhdHRlcm4uXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHBpY29tYXRjaCA9IHJlcXVpcmUoJ3BpY29tYXRjaCcpO1xuICogY29uc3Qgc3RhdGUgPSBwaWNvbWF0Y2gucGFyc2UoJyouanMnKTtcbiAqIC8vIHBpY29tYXRjaC5jb21waWxlUmUoc3RhdGVbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc29sZS5sb2cocGljb21hdGNoLmNvbXBpbGVSZShzdGF0ZSkpO1xuICogLy89PiAvXig/Oig/IVxcLikoPz0uKVteL10qP1xcLmpzKSQvXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgc3RhdGVgIFRoZSBvYmplY3QgcmV0dXJuZWQgZnJvbSB0aGUgYC5wYXJzZWAgbWV0aG9kLlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHBhcmFtIHtCb29sZWFufSBgcmV0dXJuT3V0cHV0YCBJbXBsZW1lbnRvcnMgbWF5IHVzZSB0aGlzIGFyZ3VtZW50IHRvIHJldHVybiB0aGUgY29tcGlsZWQgb3V0cHV0LCBpbnN0ZWFkIG9mIGEgcmVndWxhciBleHByZXNzaW9uLiBUaGlzIGlzIG5vdCBleHBvc2VkIG9uIHRoZSBvcHRpb25zIHRvIHByZXZlbnQgZW5kLXVzZXJzIGZyb20gbXV0YXRpbmcgdGhlIHJlc3VsdC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gYHJldHVyblN0YXRlYCBJbXBsZW1lbnRvcnMgbWF5IHVzZSB0aGlzIGFyZ3VtZW50IHRvIHJldHVybiB0aGUgc3RhdGUgZnJvbSB0aGUgcGFyc2VkIGdsb2Igd2l0aCB0aGUgcmV0dXJuZWQgcmVndWxhciBleHByZXNzaW9uLlxuICogQHJldHVybiB7UmVnRXhwfSBSZXR1cm5zIGEgcmVnZXggY3JlYXRlZCBmcm9tIHRoZSBnaXZlbiBwYXR0ZXJuLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5waWNvbWF0Y2gubWFrZVJlID0gKGlucHV0LCBvcHRpb25zID0ge30sIHJldHVybk91dHB1dCA9IGZhbHNlLCByZXR1cm5TdGF0ZSA9IGZhbHNlKSA9PiB7XG4gIGlmICghaW5wdXQgfHwgdHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICB9XG5cbiAgbGV0IHBhcnNlZCA9IHsgbmVnYXRlZDogZmFsc2UsIGZhc3RwYXRoczogdHJ1ZSB9O1xuXG4gIGlmIChvcHRpb25zLmZhc3RwYXRocyAhPT0gZmFsc2UgJiYgKGlucHV0WzBdID09PSAnLicgfHwgaW5wdXRbMF0gPT09ICcqJykpIHtcbiAgICBwYXJzZWQub3V0cHV0ID0gcGFyc2UuZmFzdHBhdGhzKGlucHV0LCBvcHRpb25zKTtcbiAgfVxuXG4gIGlmICghcGFyc2VkLm91dHB1dCkge1xuICAgIHBhcnNlZCA9IHBhcnNlKGlucHV0LCBvcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiBwaWNvbWF0Y2guY29tcGlsZVJlKHBhcnNlZCwgb3B0aW9ucywgcmV0dXJuT3V0cHV0LCByZXR1cm5TdGF0ZSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBmcm9tIHRoZSBnaXZlbiByZWdleCBzb3VyY2Ugc3RyaW5nLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwaWNvbWF0Y2ggPSByZXF1aXJlKCdwaWNvbWF0Y2gnKTtcbiAqIC8vIHBpY29tYXRjaC50b1JlZ2V4KHNvdXJjZVssIG9wdGlvbnNdKTtcbiAqXG4gKiBjb25zdCB7IG91dHB1dCB9ID0gcGljb21hdGNoLnBhcnNlKCcqLmpzJyk7XG4gKiBjb25zb2xlLmxvZyhwaWNvbWF0Y2gudG9SZWdleChvdXRwdXQpKTtcbiAqIC8vPT4gL14oPzooPyFcXC4pKD89LilbXi9dKj9cXC5qcykkL1xuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYHNvdXJjZWAgUmVndWxhciBleHByZXNzaW9uIHNvdXJjZSBzdHJpbmcuXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgXG4gKiBAcmV0dXJuIHtSZWdFeHB9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnBpY29tYXRjaC50b1JlZ2V4ID0gKHNvdXJjZSwgb3B0aW9ucykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHJldHVybiBuZXcgUmVnRXhwKHNvdXJjZSwgb3B0cy5mbGFncyB8fCAob3B0cy5ub2Nhc2UgPyAnaScgOiAnJykpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmRlYnVnID09PSB0cnVlKSB0aHJvdyBlcnI7XG4gICAgcmV0dXJuIC8kXi87XG4gIH1cbn07XG5cbi8qKlxuICogUGljb21hdGNoIGNvbnN0YW50cy5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5waWNvbWF0Y2guY29uc3RhbnRzID0gY29uc3RhbnRzO1xuXG4vKipcbiAqIEV4cG9zZSBcInBpY29tYXRjaFwiXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBwaWNvbWF0Y2g7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL3BpY29tYXRjaCcpO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbmNvbnN0IGJyYWNlcyA9IHJlcXVpcmUoJ2JyYWNlcycpO1xuY29uc3QgcGljb21hdGNoID0gcmVxdWlyZSgncGljb21hdGNoJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJ3BpY29tYXRjaC9saWIvdXRpbHMnKTtcbmNvbnN0IGlzRW1wdHlTdHJpbmcgPSB2YWwgPT4gdmFsID09PSAnJyB8fCB2YWwgPT09ICcuLyc7XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBzdHJpbmdzIHRoYXQgbWF0Y2ggb25lIG9yIG1vcmUgZ2xvYiBwYXR0ZXJucy5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbW0gPSByZXF1aXJlKCdtaWNyb21hdGNoJyk7XG4gKiAvLyBtbShsaXN0LCBwYXR0ZXJuc1ssIG9wdGlvbnNdKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhtbShbJ2EuanMnLCAnYS50eHQnXSwgWycqLmpzJ10pKTtcbiAqIC8vPT4gWyAnYS5qcycgXVxuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheTxzdHJpbmc+fSBgbGlzdGAgTGlzdCBvZiBzdHJpbmdzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXk8c3RyaW5nPn0gYHBhdHRlcm5zYCBPbmUgb3IgbW9yZSBnbG9iIHBhdHRlcm5zIHRvIHVzZSBmb3IgbWF0Y2hpbmcuXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgIFNlZSBhdmFpbGFibGUgW29wdGlvbnNdKCNvcHRpb25zKVxuICogQHJldHVybiB7QXJyYXl9IFJldHVybnMgYW4gYXJyYXkgb2YgbWF0Y2hlc1xuICogQHN1bW1hcnkgZmFsc2VcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuY29uc3QgbWljcm9tYXRjaCA9IChsaXN0LCBwYXR0ZXJucywgb3B0aW9ucykgPT4ge1xuICBwYXR0ZXJucyA9IFtdLmNvbmNhdChwYXR0ZXJucyk7XG4gIGxpc3QgPSBbXS5jb25jYXQobGlzdCk7XG5cbiAgbGV0IG9taXQgPSBuZXcgU2V0KCk7XG4gIGxldCBrZWVwID0gbmV3IFNldCgpO1xuICBsZXQgaXRlbXMgPSBuZXcgU2V0KCk7XG4gIGxldCBuZWdhdGl2ZXMgPSAwO1xuXG4gIGxldCBvblJlc3VsdCA9IHN0YXRlID0+IHtcbiAgICBpdGVtcy5hZGQoc3RhdGUub3V0cHV0KTtcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm9uUmVzdWx0KSB7XG4gICAgICBvcHRpb25zLm9uUmVzdWx0KHN0YXRlKTtcbiAgICB9XG4gIH07XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXR0ZXJucy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBpc01hdGNoID0gcGljb21hdGNoKFN0cmluZyhwYXR0ZXJuc1tpXSksIHsgLi4ub3B0aW9ucywgb25SZXN1bHQgfSwgdHJ1ZSk7XG4gICAgbGV0IG5lZ2F0ZWQgPSBpc01hdGNoLnN0YXRlLm5lZ2F0ZWQgfHwgaXNNYXRjaC5zdGF0ZS5uZWdhdGVkRXh0Z2xvYjtcbiAgICBpZiAobmVnYXRlZCkgbmVnYXRpdmVzKys7XG5cbiAgICBmb3IgKGxldCBpdGVtIG9mIGxpc3QpIHtcbiAgICAgIGxldCBtYXRjaGVkID0gaXNNYXRjaChpdGVtLCB0cnVlKTtcblxuICAgICAgbGV0IG1hdGNoID0gbmVnYXRlZCA/ICFtYXRjaGVkLmlzTWF0Y2ggOiBtYXRjaGVkLmlzTWF0Y2g7XG4gICAgICBpZiAoIW1hdGNoKSBjb250aW51ZTtcblxuICAgICAgaWYgKG5lZ2F0ZWQpIHtcbiAgICAgICAgb21pdC5hZGQobWF0Y2hlZC5vdXRwdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb21pdC5kZWxldGUobWF0Y2hlZC5vdXRwdXQpO1xuICAgICAgICBrZWVwLmFkZChtYXRjaGVkLm91dHB1dCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbGV0IHJlc3VsdCA9IG5lZ2F0aXZlcyA9PT0gcGF0dGVybnMubGVuZ3RoID8gWy4uLml0ZW1zXSA6IFsuLi5rZWVwXTtcbiAgbGV0IG1hdGNoZXMgPSByZXN1bHQuZmlsdGVyKGl0ZW0gPT4gIW9taXQuaGFzKGl0ZW0pKTtcblxuICBpZiAob3B0aW9ucyAmJiBtYXRjaGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChvcHRpb25zLmZhaWxnbG9iID09PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIG1hdGNoZXMgZm91bmQgZm9yIFwiJHtwYXR0ZXJucy5qb2luKCcsICcpfVwiYCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubm9udWxsID09PSB0cnVlIHx8IG9wdGlvbnMubnVsbGdsb2IgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBvcHRpb25zLnVuZXNjYXBlID8gcGF0dGVybnMubWFwKHAgPT4gcC5yZXBsYWNlKC9cXFxcL2csICcnKSkgOiBwYXR0ZXJucztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlcztcbn07XG5cbi8qKlxuICogQmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAqL1xuXG5taWNyb21hdGNoLm1hdGNoID0gbWljcm9tYXRjaDtcblxuLyoqXG4gKiBSZXR1cm5zIGEgbWF0Y2hlciBmdW5jdGlvbiBmcm9tIHRoZSBnaXZlbiBnbG9iIGBwYXR0ZXJuYCBhbmQgYG9wdGlvbnNgLlxuICogVGhlIHJldHVybmVkIGZ1bmN0aW9uIHRha2VzIGEgc3RyaW5nIHRvIG1hdGNoIGFzIGl0cyBvbmx5IGFyZ3VtZW50IGFuZCByZXR1cm5zXG4gKiB0cnVlIGlmIHRoZSBzdHJpbmcgaXMgYSBtYXRjaC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbW0gPSByZXF1aXJlKCdtaWNyb21hdGNoJyk7XG4gKiAvLyBtbS5tYXRjaGVyKHBhdHRlcm5bLCBvcHRpb25zXSk7XG4gKlxuICogY29uc3QgaXNNYXRjaCA9IG1tLm1hdGNoZXIoJyouISgqYSknKTtcbiAqIGNvbnNvbGUubG9nKGlzTWF0Y2goJ2EuYScpKTsgLy89PiBmYWxzZVxuICogY29uc29sZS5sb2coaXNNYXRjaCgnYS5iJykpOyAvLz0+IHRydWVcbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBwYXR0ZXJuYCBHbG9iIHBhdHRlcm5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2BcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBSZXR1cm5zIGEgbWF0Y2hlciBmdW5jdGlvbi5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubWljcm9tYXRjaC5tYXRjaGVyID0gKHBhdHRlcm4sIG9wdGlvbnMpID0+IHBpY29tYXRjaChwYXR0ZXJuLCBvcHRpb25zKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgKiphbnkqKiBvZiB0aGUgZ2l2ZW4gZ2xvYiBgcGF0dGVybnNgIG1hdGNoIHRoZSBzcGVjaWZpZWQgYHN0cmluZ2AuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IG1tID0gcmVxdWlyZSgnbWljcm9tYXRjaCcpO1xuICogLy8gbW0uaXNNYXRjaChzdHJpbmcsIHBhdHRlcm5zWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnNvbGUubG9nKG1tLmlzTWF0Y2goJ2EuYScsIFsnYi4qJywgJyouYSddKSk7IC8vPT4gdHJ1ZVxuICogY29uc29sZS5sb2cobW0uaXNNYXRjaCgnYS5hJywgJ2IuKicpKTsgLy89PiBmYWxzZVxuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYHN0cmAgVGhlIHN0cmluZyB0byB0ZXN0LlxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGBwYXR0ZXJuc2AgT25lIG9yIG1vcmUgZ2xvYiBwYXR0ZXJucyB0byB1c2UgZm9yIG1hdGNoaW5nLlxuICogQHBhcmFtIHtPYmplY3R9IGBbb3B0aW9uc11gIFNlZSBhdmFpbGFibGUgW29wdGlvbnNdKCNvcHRpb25zKS5cbiAqIEByZXR1cm4ge0Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBhbnkgcGF0dGVybnMgbWF0Y2ggYHN0cmBcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubWljcm9tYXRjaC5pc01hdGNoID0gKHN0ciwgcGF0dGVybnMsIG9wdGlvbnMpID0+IHBpY29tYXRjaChwYXR0ZXJucywgb3B0aW9ucykoc3RyKTtcblxuLyoqXG4gKiBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICovXG5cbm1pY3JvbWF0Y2guYW55ID0gbWljcm9tYXRjaC5pc01hdGNoO1xuXG4vKipcbiAqIFJldHVybnMgYSBsaXN0IG9mIHN0cmluZ3MgdGhhdCBfKipkbyBub3QgbWF0Y2ggYW55KipfIG9mIHRoZSBnaXZlbiBgcGF0dGVybnNgLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtbSA9IHJlcXVpcmUoJ21pY3JvbWF0Y2gnKTtcbiAqIC8vIG1tLm5vdChsaXN0LCBwYXR0ZXJuc1ssIG9wdGlvbnNdKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhtbS5ub3QoWydhLmEnLCAnYi5iJywgJ2MuYyddLCAnKi5hJykpO1xuICogLy89PiBbJ2IuYicsICdjLmMnXVxuICogYGBgXG4gKiBAcGFyYW0ge0FycmF5fSBgbGlzdGAgQXJyYXkgb2Ygc3RyaW5ncyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBgcGF0dGVybnNgIE9uZSBvciBtb3JlIGdsb2IgcGF0dGVybiB0byB1c2UgZm9yIG1hdGNoaW5nLlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYCBTZWUgYXZhaWxhYmxlIFtvcHRpb25zXSgjb3B0aW9ucykgZm9yIGNoYW5naW5nIGhvdyBtYXRjaGVzIGFyZSBwZXJmb3JtZWRcbiAqIEByZXR1cm4ge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIHN0cmluZ3MgdGhhdCAqKmRvIG5vdCBtYXRjaCoqIHRoZSBnaXZlbiBwYXR0ZXJucy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubWljcm9tYXRjaC5ub3QgPSAobGlzdCwgcGF0dGVybnMsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBwYXR0ZXJucyA9IFtdLmNvbmNhdChwYXR0ZXJucykubWFwKFN0cmluZyk7XG4gIGxldCByZXN1bHQgPSBuZXcgU2V0KCk7XG4gIGxldCBpdGVtcyA9IFtdO1xuXG4gIGxldCBvblJlc3VsdCA9IHN0YXRlID0+IHtcbiAgICBpZiAob3B0aW9ucy5vblJlc3VsdCkgb3B0aW9ucy5vblJlc3VsdChzdGF0ZSk7XG4gICAgaXRlbXMucHVzaChzdGF0ZS5vdXRwdXQpO1xuICB9O1xuXG4gIGxldCBtYXRjaGVzID0gbWljcm9tYXRjaChsaXN0LCBwYXR0ZXJucywgeyAuLi5vcHRpb25zLCBvblJlc3VsdCB9KTtcblxuICBmb3IgKGxldCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgaWYgKCFtYXRjaGVzLmluY2x1ZGVzKGl0ZW0pKSB7XG4gICAgICByZXN1bHQuYWRkKGl0ZW0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gWy4uLnJlc3VsdF07XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gYHN0cmluZ2AgY29udGFpbnMgdGhlIGdpdmVuIHBhdHRlcm4uIFNpbWlsYXJcbiAqIHRvIFsuaXNNYXRjaF0oI2lzTWF0Y2gpIGJ1dCB0aGUgcGF0dGVybiBjYW4gbWF0Y2ggYW55IHBhcnQgb2YgdGhlIHN0cmluZy5cbiAqXG4gKiBgYGBqc1xuICogdmFyIG1tID0gcmVxdWlyZSgnbWljcm9tYXRjaCcpO1xuICogLy8gbW0uY29udGFpbnMoc3RyaW5nLCBwYXR0ZXJuWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnNvbGUubG9nKG1tLmNvbnRhaW5zKCdhYS9iYi9jYycsICcqYicpKTtcbiAqIC8vPT4gdHJ1ZVxuICogY29uc29sZS5sb2cobW0uY29udGFpbnMoJ2FhL2JiL2NjJywgJypkJykpO1xuICogLy89PiBmYWxzZVxuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYHN0cmAgVGhlIHN0cmluZyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBgcGF0dGVybnNgIEdsb2IgcGF0dGVybiB0byB1c2UgZm9yIG1hdGNoaW5nLlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYCBTZWUgYXZhaWxhYmxlIFtvcHRpb25zXSgjb3B0aW9ucykgZm9yIGNoYW5naW5nIGhvdyBtYXRjaGVzIGFyZSBwZXJmb3JtZWRcbiAqIEByZXR1cm4ge0Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBhbnkgb2YgdGhlIHBhdHRlcm5zIG1hdGNoZXMgYW55IHBhcnQgb2YgYHN0cmAuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1pY3JvbWF0Y2guY29udGFpbnMgPSAoc3RyLCBwYXR0ZXJuLCBvcHRpb25zKSA9PiB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIGEgc3RyaW5nOiBcIiR7dXRpbC5pbnNwZWN0KHN0cil9XCJgKTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uc29tZShwID0+IG1pY3JvbWF0Y2guY29udGFpbnMoc3RyLCBwLCBvcHRpb25zKSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKGlzRW1wdHlTdHJpbmcoc3RyKSB8fCBpc0VtcHR5U3RyaW5nKHBhdHRlcm4pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHN0ci5pbmNsdWRlcyhwYXR0ZXJuKSB8fCAoc3RyLnN0YXJ0c1dpdGgoJy4vJykgJiYgc3RyLnNsaWNlKDIpLmluY2x1ZGVzKHBhdHRlcm4pKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1pY3JvbWF0Y2guaXNNYXRjaChzdHIsIHBhdHRlcm4sIHsgLi4ub3B0aW9ucywgY29udGFpbnM6IHRydWUgfSk7XG59O1xuXG4vKipcbiAqIEZpbHRlciB0aGUga2V5cyBvZiB0aGUgZ2l2ZW4gb2JqZWN0IHdpdGggdGhlIGdpdmVuIGBnbG9iYCBwYXR0ZXJuXG4gKiBhbmQgYG9wdGlvbnNgLiBEb2VzIG5vdCBhdHRlbXB0IHRvIG1hdGNoIG5lc3RlZCBrZXlzLiBJZiB5b3UgbmVlZCB0aGlzIGZlYXR1cmUsXG4gKiB1c2UgW2dsb2Itb2JqZWN0XVtdIGluc3RlYWQuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IG1tID0gcmVxdWlyZSgnbWljcm9tYXRjaCcpO1xuICogLy8gbW0ubWF0Y2hLZXlzKG9iamVjdCwgcGF0dGVybnNbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc3Qgb2JqID0geyBhYTogJ2EnLCBhYjogJ2InLCBhYzogJ2MnIH07XG4gKiBjb25zb2xlLmxvZyhtbS5tYXRjaEtleXMob2JqLCAnKmInKSk7XG4gKiAvLz0+IHsgYWI6ICdiJyB9XG4gKiBgYGBcbiAqIEBwYXJhbSB7T2JqZWN0fSBgb2JqZWN0YCBUaGUgb2JqZWN0IHdpdGgga2V5cyB0byBmaWx0ZXIuXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gYHBhdHRlcm5zYCBPbmUgb3IgbW9yZSBnbG9iIHBhdHRlcm5zIHRvIHVzZSBmb3IgbWF0Y2hpbmcuXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgIFNlZSBhdmFpbGFibGUgW29wdGlvbnNdKCNvcHRpb25zKSBmb3IgY2hhbmdpbmcgaG93IG1hdGNoZXMgYXJlIHBlcmZvcm1lZFxuICogQHJldHVybiB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIG9ubHkga2V5cyB0aGF0IG1hdGNoIHRoZSBnaXZlbiBwYXR0ZXJucy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubWljcm9tYXRjaC5tYXRjaEtleXMgPSAob2JqLCBwYXR0ZXJucywgb3B0aW9ucykgPT4ge1xuICBpZiAoIXV0aWxzLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgZmlyc3QgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0Jyk7XG4gIH1cbiAgbGV0IGtleXMgPSBtaWNyb21hdGNoKE9iamVjdC5rZXlzKG9iaiksIHBhdHRlcm5zLCBvcHRpb25zKTtcbiAgbGV0IHJlcyA9IHt9O1xuICBmb3IgKGxldCBrZXkgb2Yga2V5cykgcmVzW2tleV0gPSBvYmpba2V5XTtcbiAgcmV0dXJuIHJlcztcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHNvbWUgb2YgdGhlIHN0cmluZ3MgaW4gdGhlIGdpdmVuIGBsaXN0YCBtYXRjaCBhbnkgb2YgdGhlIGdpdmVuIGdsb2IgYHBhdHRlcm5zYC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbW0gPSByZXF1aXJlKCdtaWNyb21hdGNoJyk7XG4gKiAvLyBtbS5zb21lKGxpc3QsIHBhdHRlcm5zWywgb3B0aW9uc10pO1xuICpcbiAqIGNvbnNvbGUubG9nKG1tLnNvbWUoWydmb28uanMnLCAnYmFyLmpzJ10sIFsnKi5qcycsICchZm9vLmpzJ10pKTtcbiAqIC8vIHRydWVcbiAqIGNvbnNvbGUubG9nKG1tLnNvbWUoWydmb28uanMnXSwgWycqLmpzJywgJyFmb28uanMnXSkpO1xuICogLy8gZmFsc2VcbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGBsaXN0YCBUaGUgc3RyaW5nIG9yIGFycmF5IG9mIHN0cmluZ3MgdG8gdGVzdC4gUmV0dXJucyBhcyBzb29uIGFzIHRoZSBmaXJzdCBtYXRjaCBpcyBmb3VuZC5cbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBgcGF0dGVybnNgIE9uZSBvciBtb3JlIGdsb2IgcGF0dGVybnMgdG8gdXNlIGZvciBtYXRjaGluZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2AgU2VlIGF2YWlsYWJsZSBbb3B0aW9uc10oI29wdGlvbnMpIGZvciBjaGFuZ2luZyBob3cgbWF0Y2hlcyBhcmUgcGVyZm9ybWVkXG4gKiBAcmV0dXJuIHtCb29sZWFufSBSZXR1cm5zIHRydWUgaWYgYW55IGBwYXR0ZXJuc2AgbWF0Y2hlcyBhbnkgb2YgdGhlIHN0cmluZ3MgaW4gYGxpc3RgXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1pY3JvbWF0Y2guc29tZSA9IChsaXN0LCBwYXR0ZXJucywgb3B0aW9ucykgPT4ge1xuICBsZXQgaXRlbXMgPSBbXS5jb25jYXQobGlzdCk7XG5cbiAgZm9yIChsZXQgcGF0dGVybiBvZiBbXS5jb25jYXQocGF0dGVybnMpKSB7XG4gICAgbGV0IGlzTWF0Y2ggPSBwaWNvbWF0Y2goU3RyaW5nKHBhdHRlcm4pLCBvcHRpb25zKTtcbiAgICBpZiAoaXRlbXMuc29tZShpdGVtID0+IGlzTWF0Y2goaXRlbSkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgZXZlcnkgc3RyaW5nIGluIHRoZSBnaXZlbiBgbGlzdGAgbWF0Y2hlc1xuICogYW55IG9mIHRoZSBnaXZlbiBnbG9iIGBwYXR0ZXJuc2AuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IG1tID0gcmVxdWlyZSgnbWljcm9tYXRjaCcpO1xuICogLy8gbW0uZXZlcnkobGlzdCwgcGF0dGVybnNbLCBvcHRpb25zXSk7XG4gKlxuICogY29uc29sZS5sb2cobW0uZXZlcnkoJ2Zvby5qcycsIFsnZm9vLmpzJ10pKTtcbiAqIC8vIHRydWVcbiAqIGNvbnNvbGUubG9nKG1tLmV2ZXJ5KFsnZm9vLmpzJywgJ2Jhci5qcyddLCBbJyouanMnXSkpO1xuICogLy8gdHJ1ZVxuICogY29uc29sZS5sb2cobW0uZXZlcnkoWydmb28uanMnLCAnYmFyLmpzJ10sIFsnKi5qcycsICchZm9vLmpzJ10pKTtcbiAqIC8vIGZhbHNlXG4gKiBjb25zb2xlLmxvZyhtbS5ldmVyeShbJ2Zvby5qcyddLCBbJyouanMnLCAnIWZvby5qcyddKSk7XG4gKiAvLyBmYWxzZVxuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gYGxpc3RgIFRoZSBzdHJpbmcgb3IgYXJyYXkgb2Ygc3RyaW5ncyB0byB0ZXN0LlxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGBwYXR0ZXJuc2AgT25lIG9yIG1vcmUgZ2xvYiBwYXR0ZXJucyB0byB1c2UgZm9yIG1hdGNoaW5nLlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYCBTZWUgYXZhaWxhYmxlIFtvcHRpb25zXSgjb3B0aW9ucykgZm9yIGNoYW5naW5nIGhvdyBtYXRjaGVzIGFyZSBwZXJmb3JtZWRcbiAqIEByZXR1cm4ge0Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBhbGwgYHBhdHRlcm5zYCBtYXRjaGVzIGFsbCBvZiB0aGUgc3RyaW5ncyBpbiBgbGlzdGBcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubWljcm9tYXRjaC5ldmVyeSA9IChsaXN0LCBwYXR0ZXJucywgb3B0aW9ucykgPT4ge1xuICBsZXQgaXRlbXMgPSBbXS5jb25jYXQobGlzdCk7XG5cbiAgZm9yIChsZXQgcGF0dGVybiBvZiBbXS5jb25jYXQocGF0dGVybnMpKSB7XG4gICAgbGV0IGlzTWF0Y2ggPSBwaWNvbWF0Y2goU3RyaW5nKHBhdHRlcm4pLCBvcHRpb25zKTtcbiAgICBpZiAoIWl0ZW1zLmV2ZXJ5KGl0ZW0gPT4gaXNNYXRjaChpdGVtKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiAqKmFsbCoqIG9mIHRoZSBnaXZlbiBgcGF0dGVybnNgIG1hdGNoXG4gKiB0aGUgc3BlY2lmaWVkIHN0cmluZy5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbW0gPSByZXF1aXJlKCdtaWNyb21hdGNoJyk7XG4gKiAvLyBtbS5hbGwoc3RyaW5nLCBwYXR0ZXJuc1ssIG9wdGlvbnNdKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhtbS5hbGwoJ2Zvby5qcycsIFsnZm9vLmpzJ10pKTtcbiAqIC8vIHRydWVcbiAqXG4gKiBjb25zb2xlLmxvZyhtbS5hbGwoJ2Zvby5qcycsIFsnKi5qcycsICchZm9vLmpzJ10pKTtcbiAqIC8vIGZhbHNlXG4gKlxuICogY29uc29sZS5sb2cobW0uYWxsKCdmb28uanMnLCBbJyouanMnLCAnZm9vLmpzJ10pKTtcbiAqIC8vIHRydWVcbiAqXG4gKiBjb25zb2xlLmxvZyhtbS5hbGwoJ2Zvby5qcycsIFsnKi5qcycsICdmKicsICcqbyonLCAnKm8uanMnXSkpO1xuICogLy8gdHJ1ZVxuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gYHN0cmAgVGhlIHN0cmluZyB0byB0ZXN0LlxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGBwYXR0ZXJuc2AgT25lIG9yIG1vcmUgZ2xvYiBwYXR0ZXJucyB0byB1c2UgZm9yIG1hdGNoaW5nLlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYCBTZWUgYXZhaWxhYmxlIFtvcHRpb25zXSgjb3B0aW9ucykgZm9yIGNoYW5naW5nIGhvdyBtYXRjaGVzIGFyZSBwZXJmb3JtZWRcbiAqIEByZXR1cm4ge0Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBhbnkgcGF0dGVybnMgbWF0Y2ggYHN0cmBcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubWljcm9tYXRjaC5hbGwgPSAoc3RyLCBwYXR0ZXJucywgb3B0aW9ucykgPT4ge1xuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBhIHN0cmluZzogXCIke3V0aWwuaW5zcGVjdChzdHIpfVwiYCk7XG4gIH1cblxuICByZXR1cm4gW10uY29uY2F0KHBhdHRlcm5zKS5ldmVyeShwID0+IHBpY29tYXRjaChwLCBvcHRpb25zKShzdHIpKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBtYXRjaGVzIGNhcHR1cmVkIGJ5IGBwYXR0ZXJuYCBpbiBgc3RyaW5nLCBvciBgbnVsbGAgaWYgdGhlIHBhdHRlcm4gZGlkIG5vdCBtYXRjaC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbW0gPSByZXF1aXJlKCdtaWNyb21hdGNoJyk7XG4gKiAvLyBtbS5jYXB0dXJlKHBhdHRlcm4sIHN0cmluZ1ssIG9wdGlvbnNdKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhtbS5jYXB0dXJlKCd0ZXN0LyouanMnLCAndGVzdC9mb28uanMnKSk7XG4gKiAvLz0+IFsnZm9vJ11cbiAqIGNvbnNvbGUubG9nKG1tLmNhcHR1cmUoJ3Rlc3QvKi5qcycsICdmb28vYmFyLmNzcycpKTtcbiAqIC8vPT4gbnVsbFxuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYGdsb2JgIEdsb2IgcGF0dGVybiB0byB1c2UgZm9yIG1hdGNoaW5nLlxuICogQHBhcmFtIHtTdHJpbmd9IGBpbnB1dGAgU3RyaW5nIHRvIG1hdGNoXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgIFNlZSBhdmFpbGFibGUgW29wdGlvbnNdKCNvcHRpb25zKSBmb3IgY2hhbmdpbmcgaG93IG1hdGNoZXMgYXJlIHBlcmZvcm1lZFxuICogQHJldHVybiB7QXJyYXl8bnVsbH0gUmV0dXJucyBhbiBhcnJheSBvZiBjYXB0dXJlcyBpZiB0aGUgaW5wdXQgbWF0Y2hlcyB0aGUgZ2xvYiBwYXR0ZXJuLCBvdGhlcndpc2UgYG51bGxgLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5taWNyb21hdGNoLmNhcHR1cmUgPSAoZ2xvYiwgaW5wdXQsIG9wdGlvbnMpID0+IHtcbiAgbGV0IHBvc2l4ID0gdXRpbHMuaXNXaW5kb3dzKG9wdGlvbnMpO1xuICBsZXQgcmVnZXggPSBwaWNvbWF0Y2gubWFrZVJlKFN0cmluZyhnbG9iKSwgeyAuLi5vcHRpb25zLCBjYXB0dXJlOiB0cnVlIH0pO1xuICBsZXQgbWF0Y2ggPSByZWdleC5leGVjKHBvc2l4ID8gdXRpbHMudG9Qb3NpeFNsYXNoZXMoaW5wdXQpIDogaW5wdXQpO1xuXG4gIGlmIChtYXRjaCkge1xuICAgIHJldHVybiBtYXRjaC5zbGljZSgxKS5tYXAodiA9PiB2ID09PSB2b2lkIDAgPyAnJyA6IHYpO1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBmcm9tIHRoZSBnaXZlbiBnbG9iIGBwYXR0ZXJuYC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbW0gPSByZXF1aXJlKCdtaWNyb21hdGNoJyk7XG4gKiAvLyBtbS5tYWtlUmUocGF0dGVyblssIG9wdGlvbnNdKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhtbS5tYWtlUmUoJyouanMnKSk7XG4gKiAvLz0+IC9eKD86KFxcLltcXFxcXFwvXSk/KD8hXFwuKSg/PS4pW15cXC9dKj9cXC5qcykkL1xuICogYGBgXG4gKiBAcGFyYW0ge1N0cmluZ30gYHBhdHRlcm5gIEEgZ2xvYiBwYXR0ZXJuIHRvIGNvbnZlcnQgdG8gcmVnZXguXG4gKiBAcGFyYW0ge09iamVjdH0gYG9wdGlvbnNgXG4gKiBAcmV0dXJuIHtSZWdFeHB9IFJldHVybnMgYSByZWdleCBjcmVhdGVkIGZyb20gdGhlIGdpdmVuIHBhdHRlcm4uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1pY3JvbWF0Y2gubWFrZVJlID0gKC4uLmFyZ3MpID0+IHBpY29tYXRjaC5tYWtlUmUoLi4uYXJncyk7XG5cbi8qKlxuICogU2NhbiBhIGdsb2IgcGF0dGVybiB0byBzZXBhcmF0ZSB0aGUgcGF0dGVybiBpbnRvIHNlZ21lbnRzLiBVc2VkXG4gKiBieSB0aGUgW3NwbGl0XSgjc3BsaXQpIG1ldGhvZC5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbW0gPSByZXF1aXJlKCdtaWNyb21hdGNoJyk7XG4gKiBjb25zdCBzdGF0ZSA9IG1tLnNjYW4ocGF0dGVyblssIG9wdGlvbnNdKTtcbiAqIGBgYFxuICogQHBhcmFtIHtTdHJpbmd9IGBwYXR0ZXJuYFxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYFxuICogQHJldHVybiB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCB3aXRoXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1pY3JvbWF0Y2guc2NhbiA9ICguLi5hcmdzKSA9PiBwaWNvbWF0Y2guc2NhbiguLi5hcmdzKTtcblxuLyoqXG4gKiBQYXJzZSBhIGdsb2IgcGF0dGVybiB0byBjcmVhdGUgdGhlIHNvdXJjZSBzdHJpbmcgZm9yIGEgcmVndWxhclxuICogZXhwcmVzc2lvbi5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbW0gPSByZXF1aXJlKCdtaWNyb21hdGNoJyk7XG4gKiBjb25zdCBzdGF0ZSA9IG1tKHBhdHRlcm5bLCBvcHRpb25zXSk7XG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgZ2xvYmBcbiAqIEBwYXJhbSB7T2JqZWN0fSBgb3B0aW9uc2BcbiAqIEByZXR1cm4ge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB1c2VmdWwgcHJvcGVydGllcyBhbmQgb3V0cHV0IHRvIGJlIHVzZWQgYXMgcmVnZXggc291cmNlIHN0cmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubWljcm9tYXRjaC5wYXJzZSA9IChwYXR0ZXJucywgb3B0aW9ucykgPT4ge1xuICBsZXQgcmVzID0gW107XG4gIGZvciAobGV0IHBhdHRlcm4gb2YgW10uY29uY2F0KHBhdHRlcm5zIHx8IFtdKSkge1xuICAgIGZvciAobGV0IHN0ciBvZiBicmFjZXMoU3RyaW5nKHBhdHRlcm4pLCBvcHRpb25zKSkge1xuICAgICAgcmVzLnB1c2gocGljb21hdGNoLnBhcnNlKHN0ciwgb3B0aW9ucykpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuLyoqXG4gKiBQcm9jZXNzIHRoZSBnaXZlbiBicmFjZSBgcGF0dGVybmAuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHsgYnJhY2VzIH0gPSByZXF1aXJlKCdtaWNyb21hdGNoJyk7XG4gKiBjb25zb2xlLmxvZyhicmFjZXMoJ2Zvby97YSxiLGN9L2JhcicpKTtcbiAqIC8vPT4gWyAnZm9vLyhhfGJ8YykvYmFyJyBdXG4gKlxuICogY29uc29sZS5sb2coYnJhY2VzKCdmb28ve2EsYixjfS9iYXInLCB7IGV4cGFuZDogdHJ1ZSB9KSk7XG4gKiAvLz0+IFsgJ2Zvby9hL2JhcicsICdmb28vYi9iYXInLCAnZm9vL2MvYmFyJyBdXG4gKiBgYGBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgcGF0dGVybmAgU3RyaW5nIHdpdGggYnJhY2UgcGF0dGVybiB0byBwcm9jZXNzLlxuICogQHBhcmFtIHtPYmplY3R9IGBvcHRpb25zYCBBbnkgW29wdGlvbnNdKCNvcHRpb25zKSB0byBjaGFuZ2UgaG93IGV4cGFuc2lvbiBpcyBwZXJmb3JtZWQuIFNlZSB0aGUgW2JyYWNlc11bXSBsaWJyYXJ5IGZvciBhbGwgYXZhaWxhYmxlIG9wdGlvbnMuXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubWljcm9tYXRjaC5icmFjZXMgPSAocGF0dGVybiwgb3B0aW9ucykgPT4ge1xuICBpZiAodHlwZW9mIHBhdHRlcm4gIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhIHN0cmluZycpO1xuICBpZiAoKG9wdGlvbnMgJiYgb3B0aW9ucy5ub2JyYWNlID09PSB0cnVlKSB8fCAhL1xcey4qXFx9Ly50ZXN0KHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIFtwYXR0ZXJuXTtcbiAgfVxuICByZXR1cm4gYnJhY2VzKHBhdHRlcm4sIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBFeHBhbmQgYnJhY2VzXG4gKi9cblxubWljcm9tYXRjaC5icmFjZUV4cGFuZCA9IChwYXR0ZXJuLCBvcHRpb25zKSA9PiB7XG4gIGlmICh0eXBlb2YgcGF0dGVybiAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgc3RyaW5nJyk7XG4gIHJldHVybiBtaWNyb21hdGNoLmJyYWNlcyhwYXR0ZXJuLCB7IC4uLm9wdGlvbnMsIGV4cGFuZDogdHJ1ZSB9KTtcbn07XG5cbi8qKlxuICogRXhwb3NlIG1pY3JvbWF0Y2hcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1pY3JvbWF0Y2g7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5tYXRjaEFueSA9IGV4cG9ydHMuY29udmVydFBhdHRlcm5zVG9SZSA9IGV4cG9ydHMubWFrZVJlID0gZXhwb3J0cy5nZXRQYXR0ZXJuUGFydHMgPSBleHBvcnRzLmV4cGFuZEJyYWNlRXhwYW5zaW9uID0gZXhwb3J0cy5leHBhbmRQYXR0ZXJuc1dpdGhCcmFjZUV4cGFuc2lvbiA9IGV4cG9ydHMuaXNBZmZlY3REZXB0aE9mUmVhZGluZ1BhdHRlcm4gPSBleHBvcnRzLmVuZHNXaXRoU2xhc2hHbG9iU3RhciA9IGV4cG9ydHMuaGFzR2xvYlN0YXIgPSBleHBvcnRzLmdldEJhc2VEaXJlY3RvcnkgPSBleHBvcnRzLmlzUGF0dGVyblJlbGF0ZWRUb1BhcmVudERpcmVjdG9yeSA9IGV4cG9ydHMuZ2V0UGF0dGVybnNPdXRzaWRlQ3VycmVudERpcmVjdG9yeSA9IGV4cG9ydHMuZ2V0UGF0dGVybnNJbnNpZGVDdXJyZW50RGlyZWN0b3J5ID0gZXhwb3J0cy5nZXRQb3NpdGl2ZVBhdHRlcm5zID0gZXhwb3J0cy5nZXROZWdhdGl2ZVBhdHRlcm5zID0gZXhwb3J0cy5pc1Bvc2l0aXZlUGF0dGVybiA9IGV4cG9ydHMuaXNOZWdhdGl2ZVBhdHRlcm4gPSBleHBvcnRzLmNvbnZlcnRUb05lZ2F0aXZlUGF0dGVybiA9IGV4cG9ydHMuY29udmVydFRvUG9zaXRpdmVQYXR0ZXJuID0gZXhwb3J0cy5pc0R5bmFtaWNQYXR0ZXJuID0gZXhwb3J0cy5pc1N0YXRpY1BhdHRlcm4gPSB2b2lkIDA7XHJcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcclxuY29uc3QgZ2xvYlBhcmVudCA9IHJlcXVpcmUoXCJnbG9iLXBhcmVudFwiKTtcclxuY29uc3QgbWljcm9tYXRjaCA9IHJlcXVpcmUoXCJtaWNyb21hdGNoXCIpO1xyXG5jb25zdCBHTE9CU1RBUiA9ICcqKic7XHJcbmNvbnN0IEVTQ0FQRV9TWU1CT0wgPSAnXFxcXCc7XHJcbmNvbnN0IENPTU1PTl9HTE9CX1NZTUJPTFNfUkUgPSAvWyo/XXxeIS87XHJcbmNvbnN0IFJFR0VYX0NIQVJBQ1RFUl9DTEFTU19TWU1CT0xTX1JFID0gL1xcW1teW10qXS87XHJcbmNvbnN0IFJFR0VYX0dST1VQX1NZTUJPTFNfUkUgPSAvKD86XnxbXiEqKz9AXSlcXChbXihdKlxcfFtefF0qXFwpLztcclxuY29uc3QgR0xPQl9FWFRFTlNJT05fU1lNQk9MU19SRSA9IC9bISorP0BdXFwoW14oXSpcXCkvO1xyXG5jb25zdCBCUkFDRV9FWFBBTlNJT05fU0VQQVJBVE9SU19SRSA9IC8sfFxcLlxcLi87XHJcbmZ1bmN0aW9uIGlzU3RhdGljUGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHtcclxuICAgIHJldHVybiAhaXNEeW5hbWljUGF0dGVybihwYXR0ZXJuLCBvcHRpb25zKTtcclxufVxyXG5leHBvcnRzLmlzU3RhdGljUGF0dGVybiA9IGlzU3RhdGljUGF0dGVybjtcclxuZnVuY3Rpb24gaXNEeW5hbWljUGF0dGVybihwYXR0ZXJuLCBvcHRpb25zID0ge30pIHtcclxuICAgIC8qKlxyXG4gICAgICogQSBzcGVjaWFsIGNhc2Ugd2l0aCBhbiBlbXB0eSBzdHJpbmcgaXMgbmVjZXNzYXJ5IGZvciBtYXRjaGluZyBwYXR0ZXJucyB0aGF0IHN0YXJ0IHdpdGggYSBmb3J3YXJkIHNsYXNoLlxyXG4gICAgICogQW4gZW1wdHkgc3RyaW5nIGNhbm5vdCBiZSBhIGR5bmFtaWMgcGF0dGVybi5cclxuICAgICAqIEZvciBleGFtcGxlLCB0aGUgcGF0dGVybiBgL2xpYi8qYCB3aWxsIGJlIHNwcmVhZCBpbnRvIHBhcnRzOiAnJywgJ2xpYicsICcqJy5cclxuICAgICAqL1xyXG4gICAgaWYgKHBhdHRlcm4gPT09ICcnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGVuIHRoZSBgY2FzZVNlbnNpdGl2ZU1hdGNoYCBvcHRpb24gaXMgZGlzYWJsZWQsIGFsbCBwYXR0ZXJucyBtdXN0IGJlIG1hcmtlZCBhcyBkeW5hbWljLCBiZWNhdXNlIHdlIGNhbm5vdCBjaGVja1xyXG4gICAgICogZmlsZXBhdGggZGlyZWN0bHkgKHdpdGhvdXQgcmVhZCBkaXJlY3RvcnkpLlxyXG4gICAgICovXHJcbiAgICBpZiAob3B0aW9ucy5jYXNlU2Vuc2l0aXZlTWF0Y2ggPT09IGZhbHNlIHx8IHBhdHRlcm4uaW5jbHVkZXMoRVNDQVBFX1NZTUJPTCkpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChDT01NT05fR0xPQl9TWU1CT0xTX1JFLnRlc3QocGF0dGVybikgfHwgUkVHRVhfQ0hBUkFDVEVSX0NMQVNTX1NZTUJPTFNfUkUudGVzdChwYXR0ZXJuKSB8fCBSRUdFWF9HUk9VUF9TWU1CT0xTX1JFLnRlc3QocGF0dGVybikpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChvcHRpb25zLmV4dGdsb2IgIT09IGZhbHNlICYmIEdMT0JfRVhURU5TSU9OX1NZTUJPTFNfUkUudGVzdChwYXR0ZXJuKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKG9wdGlvbnMuYnJhY2VFeHBhbnNpb24gIT09IGZhbHNlICYmIGhhc0JyYWNlRXhwYW5zaW9uKHBhdHRlcm4pKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuZXhwb3J0cy5pc0R5bmFtaWNQYXR0ZXJuID0gaXNEeW5hbWljUGF0dGVybjtcclxuZnVuY3Rpb24gaGFzQnJhY2VFeHBhbnNpb24ocGF0dGVybikge1xyXG4gICAgY29uc3Qgb3BlbmluZ0JyYWNlSW5kZXggPSBwYXR0ZXJuLmluZGV4T2YoJ3snKTtcclxuICAgIGlmIChvcGVuaW5nQnJhY2VJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBjb25zdCBjbG9zaW5nQnJhY2VJbmRleCA9IHBhdHRlcm4uaW5kZXhPZignfScsIG9wZW5pbmdCcmFjZUluZGV4ICsgMSk7XHJcbiAgICBpZiAoY2xvc2luZ0JyYWNlSW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYnJhY2VDb250ZW50ID0gcGF0dGVybi5zbGljZShvcGVuaW5nQnJhY2VJbmRleCwgY2xvc2luZ0JyYWNlSW5kZXgpO1xyXG4gICAgcmV0dXJuIEJSQUNFX0VYUEFOU0lPTl9TRVBBUkFUT1JTX1JFLnRlc3QoYnJhY2VDb250ZW50KTtcclxufVxyXG5mdW5jdGlvbiBjb252ZXJ0VG9Qb3NpdGl2ZVBhdHRlcm4ocGF0dGVybikge1xyXG4gICAgcmV0dXJuIGlzTmVnYXRpdmVQYXR0ZXJuKHBhdHRlcm4pID8gcGF0dGVybi5zbGljZSgxKSA6IHBhdHRlcm47XHJcbn1cclxuZXhwb3J0cy5jb252ZXJ0VG9Qb3NpdGl2ZVBhdHRlcm4gPSBjb252ZXJ0VG9Qb3NpdGl2ZVBhdHRlcm47XHJcbmZ1bmN0aW9uIGNvbnZlcnRUb05lZ2F0aXZlUGF0dGVybihwYXR0ZXJuKSB7XHJcbiAgICByZXR1cm4gJyEnICsgcGF0dGVybjtcclxufVxyXG5leHBvcnRzLmNvbnZlcnRUb05lZ2F0aXZlUGF0dGVybiA9IGNvbnZlcnRUb05lZ2F0aXZlUGF0dGVybjtcclxuZnVuY3Rpb24gaXNOZWdhdGl2ZVBhdHRlcm4ocGF0dGVybikge1xyXG4gICAgcmV0dXJuIHBhdHRlcm4uc3RhcnRzV2l0aCgnIScpICYmIHBhdHRlcm5bMV0gIT09ICcoJztcclxufVxyXG5leHBvcnRzLmlzTmVnYXRpdmVQYXR0ZXJuID0gaXNOZWdhdGl2ZVBhdHRlcm47XHJcbmZ1bmN0aW9uIGlzUG9zaXRpdmVQYXR0ZXJuKHBhdHRlcm4pIHtcclxuICAgIHJldHVybiAhaXNOZWdhdGl2ZVBhdHRlcm4ocGF0dGVybik7XHJcbn1cclxuZXhwb3J0cy5pc1Bvc2l0aXZlUGF0dGVybiA9IGlzUG9zaXRpdmVQYXR0ZXJuO1xyXG5mdW5jdGlvbiBnZXROZWdhdGl2ZVBhdHRlcm5zKHBhdHRlcm5zKSB7XHJcbiAgICByZXR1cm4gcGF0dGVybnMuZmlsdGVyKGlzTmVnYXRpdmVQYXR0ZXJuKTtcclxufVxyXG5leHBvcnRzLmdldE5lZ2F0aXZlUGF0dGVybnMgPSBnZXROZWdhdGl2ZVBhdHRlcm5zO1xyXG5mdW5jdGlvbiBnZXRQb3NpdGl2ZVBhdHRlcm5zKHBhdHRlcm5zKSB7XHJcbiAgICByZXR1cm4gcGF0dGVybnMuZmlsdGVyKGlzUG9zaXRpdmVQYXR0ZXJuKTtcclxufVxyXG5leHBvcnRzLmdldFBvc2l0aXZlUGF0dGVybnMgPSBnZXRQb3NpdGl2ZVBhdHRlcm5zO1xyXG4vKipcclxuICogUmV0dXJucyBwYXR0ZXJucyB0aGF0IGNhbiBiZSBhcHBsaWVkIGluc2lkZSB0aGUgY3VycmVudCBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vIFsnLi8qJywgJyonLCAnYS8qJ11cclxuICogZ2V0UGF0dGVybnNJbnNpZGVDdXJyZW50RGlyZWN0b3J5KFsnLi8qJywgJyonLCAnYS8qJywgJy4uLyonLCAnLi8uLi8qJ10pXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRQYXR0ZXJuc0luc2lkZUN1cnJlbnREaXJlY3RvcnkocGF0dGVybnMpIHtcclxuICAgIHJldHVybiBwYXR0ZXJucy5maWx0ZXIoKHBhdHRlcm4pID0+ICFpc1BhdHRlcm5SZWxhdGVkVG9QYXJlbnREaXJlY3RvcnkocGF0dGVybikpO1xyXG59XHJcbmV4cG9ydHMuZ2V0UGF0dGVybnNJbnNpZGVDdXJyZW50RGlyZWN0b3J5ID0gZ2V0UGF0dGVybnNJbnNpZGVDdXJyZW50RGlyZWN0b3J5O1xyXG4vKipcclxuICogUmV0dXJucyBwYXR0ZXJucyB0byBiZSBleHBhbmRlZCByZWxhdGl2ZSB0byAob3V0c2lkZSkgdGhlIGN1cnJlbnQgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvLyBbJy4uLyonLCAnLi8uLi8qJ11cclxuICogZ2V0UGF0dGVybnNJbnNpZGVDdXJyZW50RGlyZWN0b3J5KFsnLi8qJywgJyonLCAnYS8qJywgJy4uLyonLCAnLi8uLi8qJ10pXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRQYXR0ZXJuc091dHNpZGVDdXJyZW50RGlyZWN0b3J5KHBhdHRlcm5zKSB7XHJcbiAgICByZXR1cm4gcGF0dGVybnMuZmlsdGVyKGlzUGF0dGVyblJlbGF0ZWRUb1BhcmVudERpcmVjdG9yeSk7XHJcbn1cclxuZXhwb3J0cy5nZXRQYXR0ZXJuc091dHNpZGVDdXJyZW50RGlyZWN0b3J5ID0gZ2V0UGF0dGVybnNPdXRzaWRlQ3VycmVudERpcmVjdG9yeTtcclxuZnVuY3Rpb24gaXNQYXR0ZXJuUmVsYXRlZFRvUGFyZW50RGlyZWN0b3J5KHBhdHRlcm4pIHtcclxuICAgIHJldHVybiBwYXR0ZXJuLnN0YXJ0c1dpdGgoJy4uJykgfHwgcGF0dGVybi5zdGFydHNXaXRoKCcuLy4uJyk7XHJcbn1cclxuZXhwb3J0cy5pc1BhdHRlcm5SZWxhdGVkVG9QYXJlbnREaXJlY3RvcnkgPSBpc1BhdHRlcm5SZWxhdGVkVG9QYXJlbnREaXJlY3Rvcnk7XHJcbmZ1bmN0aW9uIGdldEJhc2VEaXJlY3RvcnkocGF0dGVybikge1xyXG4gICAgcmV0dXJuIGdsb2JQYXJlbnQocGF0dGVybiwgeyBmbGlwQmFja3NsYXNoZXM6IGZhbHNlIH0pO1xyXG59XHJcbmV4cG9ydHMuZ2V0QmFzZURpcmVjdG9yeSA9IGdldEJhc2VEaXJlY3Rvcnk7XHJcbmZ1bmN0aW9uIGhhc0dsb2JTdGFyKHBhdHRlcm4pIHtcclxuICAgIHJldHVybiBwYXR0ZXJuLmluY2x1ZGVzKEdMT0JTVEFSKTtcclxufVxyXG5leHBvcnRzLmhhc0dsb2JTdGFyID0gaGFzR2xvYlN0YXI7XHJcbmZ1bmN0aW9uIGVuZHNXaXRoU2xhc2hHbG9iU3RhcihwYXR0ZXJuKSB7XHJcbiAgICByZXR1cm4gcGF0dGVybi5lbmRzV2l0aCgnLycgKyBHTE9CU1RBUik7XHJcbn1cclxuZXhwb3J0cy5lbmRzV2l0aFNsYXNoR2xvYlN0YXIgPSBlbmRzV2l0aFNsYXNoR2xvYlN0YXI7XHJcbmZ1bmN0aW9uIGlzQWZmZWN0RGVwdGhPZlJlYWRpbmdQYXR0ZXJuKHBhdHRlcm4pIHtcclxuICAgIGNvbnN0IGJhc2VuYW1lID0gcGF0aC5iYXNlbmFtZShwYXR0ZXJuKTtcclxuICAgIHJldHVybiBlbmRzV2l0aFNsYXNoR2xvYlN0YXIocGF0dGVybikgfHwgaXNTdGF0aWNQYXR0ZXJuKGJhc2VuYW1lKTtcclxufVxyXG5leHBvcnRzLmlzQWZmZWN0RGVwdGhPZlJlYWRpbmdQYXR0ZXJuID0gaXNBZmZlY3REZXB0aE9mUmVhZGluZ1BhdHRlcm47XHJcbmZ1bmN0aW9uIGV4cGFuZFBhdHRlcm5zV2l0aEJyYWNlRXhwYW5zaW9uKHBhdHRlcm5zKSB7XHJcbiAgICByZXR1cm4gcGF0dGVybnMucmVkdWNlKChjb2xsZWN0aW9uLCBwYXR0ZXJuKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uY29uY2F0KGV4cGFuZEJyYWNlRXhwYW5zaW9uKHBhdHRlcm4pKTtcclxuICAgIH0sIFtdKTtcclxufVxyXG5leHBvcnRzLmV4cGFuZFBhdHRlcm5zV2l0aEJyYWNlRXhwYW5zaW9uID0gZXhwYW5kUGF0dGVybnNXaXRoQnJhY2VFeHBhbnNpb247XHJcbmZ1bmN0aW9uIGV4cGFuZEJyYWNlRXhwYW5zaW9uKHBhdHRlcm4pIHtcclxuICAgIHJldHVybiBtaWNyb21hdGNoLmJyYWNlcyhwYXR0ZXJuLCB7XHJcbiAgICAgICAgZXhwYW5kOiB0cnVlLFxyXG4gICAgICAgIG5vZHVwZXM6IHRydWVcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuZXhwYW5kQnJhY2VFeHBhbnNpb24gPSBleHBhbmRCcmFjZUV4cGFuc2lvbjtcclxuZnVuY3Rpb24gZ2V0UGF0dGVyblBhcnRzKHBhdHRlcm4sIG9wdGlvbnMpIHtcclxuICAgIGxldCB7IHBhcnRzIH0gPSBtaWNyb21hdGNoLnNjYW4ocGF0dGVybiwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgeyBwYXJ0czogdHJ1ZSB9KSk7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzY2FuIG1ldGhvZCByZXR1cm5zIGFuIGVtcHR5IGFycmF5IGluIHNvbWUgY2FzZXMuXHJcbiAgICAgKiBTZWUgbWljcm9tYXRjaC9waWNvbWF0Y2gjNTggZm9yIG1vcmUgZGV0YWlscy5cclxuICAgICAqL1xyXG4gICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHBhcnRzID0gW3BhdHRlcm5dO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc2NhbiBtZXRob2QgZG9lcyBub3QgcmV0dXJuIGFuIGVtcHR5IHBhcnQgZm9yIHRoZSBwYXR0ZXJuIHdpdGggYSBmb3J3YXJkIHNsYXNoLlxyXG4gICAgICogVGhpcyBpcyBhbm90aGVyIHBhcnQgb2YgbWljcm9tYXRjaC9waWNvbWF0Y2gjNTguXHJcbiAgICAgKi9cclxuICAgIGlmIChwYXJ0c1swXS5zdGFydHNXaXRoKCcvJykpIHtcclxuICAgICAgICBwYXJ0c1swXSA9IHBhcnRzWzBdLnNsaWNlKDEpO1xyXG4gICAgICAgIHBhcnRzLnVuc2hpZnQoJycpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhcnRzO1xyXG59XHJcbmV4cG9ydHMuZ2V0UGF0dGVyblBhcnRzID0gZ2V0UGF0dGVyblBhcnRzO1xyXG5mdW5jdGlvbiBtYWtlUmUocGF0dGVybiwgb3B0aW9ucykge1xyXG4gICAgcmV0dXJuIG1pY3JvbWF0Y2gubWFrZVJlKHBhdHRlcm4sIG9wdGlvbnMpO1xyXG59XHJcbmV4cG9ydHMubWFrZVJlID0gbWFrZVJlO1xyXG5mdW5jdGlvbiBjb252ZXJ0UGF0dGVybnNUb1JlKHBhdHRlcm5zLCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gcGF0dGVybnMubWFwKChwYXR0ZXJuKSA9PiBtYWtlUmUocGF0dGVybiwgb3B0aW9ucykpO1xyXG59XHJcbmV4cG9ydHMuY29udmVydFBhdHRlcm5zVG9SZSA9IGNvbnZlcnRQYXR0ZXJuc1RvUmU7XHJcbmZ1bmN0aW9uIG1hdGNoQW55KGVudHJ5LCBwYXR0ZXJuc1JlKSB7XHJcbiAgICByZXR1cm4gcGF0dGVybnNSZS5zb21lKChwYXR0ZXJuUmUpID0+IHBhdHRlcm5SZS50ZXN0KGVudHJ5KSk7XHJcbn1cclxuZXhwb3J0cy5tYXRjaEFueSA9IG1hdGNoQW55O1xyXG4iLCAiJ3VzZSBzdHJpY3QnXG4vKlxuICogbWVyZ2UyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vdGVhbWJpdGlvbi9tZXJnZTJcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAyMCBUZWFtYml0aW9uXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cbmNvbnN0IFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpXG5jb25zdCBQYXNzVGhyb3VnaCA9IFN0cmVhbS5QYXNzVGhyb3VnaFxuY29uc3Qgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2VcblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZTJcblxuZnVuY3Rpb24gbWVyZ2UyICgpIHtcbiAgY29uc3Qgc3RyZWFtc1F1ZXVlID0gW11cbiAgY29uc3QgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKVxuICBsZXQgbWVyZ2luZyA9IGZhbHNlXG4gIGxldCBvcHRpb25zID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdXG5cbiAgaWYgKG9wdGlvbnMgJiYgIUFycmF5LmlzQXJyYXkob3B0aW9ucykgJiYgb3B0aW9ucy5waXBlID09IG51bGwpIHtcbiAgICBhcmdzLnBvcCgpXG4gIH0gZWxzZSB7XG4gICAgb3B0aW9ucyA9IHt9XG4gIH1cblxuICBjb25zdCBkb0VuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICBjb25zdCBkb1BpcGVFcnJvciA9IG9wdGlvbnMucGlwZUVycm9yID09PSB0cnVlXG4gIGlmIChvcHRpb25zLm9iamVjdE1vZGUgPT0gbnVsbCkge1xuICAgIG9wdGlvbnMub2JqZWN0TW9kZSA9IHRydWVcbiAgfVxuICBpZiAob3B0aW9ucy5oaWdoV2F0ZXJNYXJrID09IG51bGwpIHtcbiAgICBvcHRpb25zLmhpZ2hXYXRlck1hcmsgPSA2NCAqIDEwMjRcbiAgfVxuICBjb25zdCBtZXJnZWRTdHJlYW0gPSBQYXNzVGhyb3VnaChvcHRpb25zKVxuXG4gIGZ1bmN0aW9uIGFkZFN0cmVhbSAoKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgc3RyZWFtc1F1ZXVlLnB1c2gocGF1c2VTdHJlYW1zKGFyZ3VtZW50c1tpXSwgb3B0aW9ucykpXG4gICAgfVxuICAgIG1lcmdlU3RyZWFtKClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VTdHJlYW0gKCkge1xuICAgIGlmIChtZXJnaW5nKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgbWVyZ2luZyA9IHRydWVcblxuICAgIGxldCBzdHJlYW1zID0gc3RyZWFtc1F1ZXVlLnNoaWZ0KClcbiAgICBpZiAoIXN0cmVhbXMpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZW5kU3RyZWFtKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShzdHJlYW1zKSkge1xuICAgICAgc3RyZWFtcyA9IFtzdHJlYW1zXVxuICAgIH1cblxuICAgIGxldCBwaXBlc0NvdW50ID0gc3RyZWFtcy5sZW5ndGggKyAxXG5cbiAgICBmdW5jdGlvbiBuZXh0ICgpIHtcbiAgICAgIGlmICgtLXBpcGVzQ291bnQgPiAwKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgbWVyZ2luZyA9IGZhbHNlXG4gICAgICBtZXJnZVN0cmVhbSgpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGlwZSAoc3RyZWFtKSB7XG4gICAgICBmdW5jdGlvbiBvbmVuZCAoKSB7XG4gICAgICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignbWVyZ2UyVW5waXBlRW5kJywgb25lbmQpXG4gICAgICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpXG4gICAgICAgIGlmIChkb1BpcGVFcnJvcikge1xuICAgICAgICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKVxuICAgICAgICB9XG4gICAgICAgIG5leHQoKVxuICAgICAgfVxuICAgICAgZnVuY3Rpb24gb25lcnJvciAoZXJyKSB7XG4gICAgICAgIG1lcmdlZFN0cmVhbS5lbWl0KCdlcnJvcicsIGVycilcbiAgICAgIH1cbiAgICAgIC8vIHNraXAgZW5kZWQgc3RyZWFtXG4gICAgICBpZiAoc3RyZWFtLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQpIHtcbiAgICAgICAgcmV0dXJuIG5leHQoKVxuICAgICAgfVxuXG4gICAgICBzdHJlYW0ub24oJ21lcmdlMlVucGlwZUVuZCcsIG9uZW5kKVxuICAgICAgc3RyZWFtLm9uKCdlbmQnLCBvbmVuZClcblxuICAgICAgaWYgKGRvUGlwZUVycm9yKSB7XG4gICAgICAgIHN0cmVhbS5vbignZXJyb3InLCBvbmVycm9yKVxuICAgICAgfVxuXG4gICAgICBzdHJlYW0ucGlwZShtZXJnZWRTdHJlYW0sIHsgZW5kOiBmYWxzZSB9KVxuICAgICAgLy8gY29tcGF0aWJsZSBmb3Igb2xkIHN0cmVhbVxuICAgICAgc3RyZWFtLnJlc3VtZSgpXG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJlYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwaXBlKHN0cmVhbXNbaV0pXG4gICAgfVxuXG4gICAgbmV4dCgpXG4gIH1cblxuICBmdW5jdGlvbiBlbmRTdHJlYW0gKCkge1xuICAgIG1lcmdpbmcgPSBmYWxzZVxuICAgIC8vIGVtaXQgJ3F1ZXVlRHJhaW4nIHdoZW4gYWxsIHN0cmVhbXMgbWVyZ2VkLlxuICAgIG1lcmdlZFN0cmVhbS5lbWl0KCdxdWV1ZURyYWluJylcbiAgICBpZiAoZG9FbmQpIHtcbiAgICAgIG1lcmdlZFN0cmVhbS5lbmQoKVxuICAgIH1cbiAgfVxuXG4gIG1lcmdlZFN0cmVhbS5zZXRNYXhMaXN0ZW5lcnMoMClcbiAgbWVyZ2VkU3RyZWFtLmFkZCA9IGFkZFN0cmVhbVxuICBtZXJnZWRTdHJlYW0ub24oJ3VucGlwZScsIGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgICBzdHJlYW0uZW1pdCgnbWVyZ2UyVW5waXBlRW5kJylcbiAgfSlcblxuICBpZiAoYXJncy5sZW5ndGgpIHtcbiAgICBhZGRTdHJlYW0uYXBwbHkobnVsbCwgYXJncylcbiAgfVxuICByZXR1cm4gbWVyZ2VkU3RyZWFtXG59XG5cbi8vIGNoZWNrIGFuZCBwYXVzZSBzdHJlYW1zIGZvciBwaXBlLlxuZnVuY3Rpb24gcGF1c2VTdHJlYW1zIChzdHJlYW1zLCBvcHRpb25zKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShzdHJlYW1zKSkge1xuICAgIC8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBvbGQtc3R5bGUgc3RyZWFtc1xuICAgIGlmICghc3RyZWFtcy5fcmVhZGFibGVTdGF0ZSAmJiBzdHJlYW1zLnBpcGUpIHtcbiAgICAgIHN0cmVhbXMgPSBzdHJlYW1zLnBpcGUoUGFzc1Rocm91Z2gob3B0aW9ucykpXG4gICAgfVxuICAgIGlmICghc3RyZWFtcy5fcmVhZGFibGVTdGF0ZSB8fCAhc3RyZWFtcy5wYXVzZSB8fCAhc3RyZWFtcy5waXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ09ubHkgcmVhZGFibGUgc3RyZWFtIGNhbiBiZSBtZXJnZWQuJylcbiAgICB9XG4gICAgc3RyZWFtcy5wYXVzZSgpXG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN0cmVhbXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHN0cmVhbXNbaV0gPSBwYXVzZVN0cmVhbXMoc3RyZWFtc1tpXSwgb3B0aW9ucylcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cmVhbXNcbn1cbiIsICJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLm1lcmdlID0gdm9pZCAwO1xyXG5jb25zdCBtZXJnZTIgPSByZXF1aXJlKFwibWVyZ2UyXCIpO1xyXG5mdW5jdGlvbiBtZXJnZShzdHJlYW1zKSB7XHJcbiAgICBjb25zdCBtZXJnZWRTdHJlYW0gPSBtZXJnZTIoc3RyZWFtcyk7XHJcbiAgICBzdHJlYW1zLmZvckVhY2goKHN0cmVhbSkgPT4ge1xyXG4gICAgICAgIHN0cmVhbS5vbmNlKCdlcnJvcicsIChlcnJvcikgPT4gbWVyZ2VkU3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyb3IpKTtcclxuICAgIH0pO1xyXG4gICAgbWVyZ2VkU3RyZWFtLm9uY2UoJ2Nsb3NlJywgKCkgPT4gcHJvcGFnYXRlQ2xvc2VFdmVudFRvU291cmNlcyhzdHJlYW1zKSk7XHJcbiAgICBtZXJnZWRTdHJlYW0ub25jZSgnZW5kJywgKCkgPT4gcHJvcGFnYXRlQ2xvc2VFdmVudFRvU291cmNlcyhzdHJlYW1zKSk7XHJcbiAgICByZXR1cm4gbWVyZ2VkU3RyZWFtO1xyXG59XHJcbmV4cG9ydHMubWVyZ2UgPSBtZXJnZTtcclxuZnVuY3Rpb24gcHJvcGFnYXRlQ2xvc2VFdmVudFRvU291cmNlcyhzdHJlYW1zKSB7XHJcbiAgICBzdHJlYW1zLmZvckVhY2goKHN0cmVhbSkgPT4gc3RyZWFtLmVtaXQoJ2Nsb3NlJykpO1xyXG59XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmlzRW1wdHkgPSBleHBvcnRzLmlzU3RyaW5nID0gdm9pZCAwO1xyXG5mdW5jdGlvbiBpc1N0cmluZyhpbnB1dCkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZyc7XHJcbn1cclxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xyXG5mdW5jdGlvbiBpc0VtcHR5KGlucHV0KSB7XHJcbiAgICByZXR1cm4gaW5wdXQgPT09ICcnO1xyXG59XHJcbmV4cG9ydHMuaXNFbXB0eSA9IGlzRW1wdHk7XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnN0cmluZyA9IGV4cG9ydHMuc3RyZWFtID0gZXhwb3J0cy5wYXR0ZXJuID0gZXhwb3J0cy5wYXRoID0gZXhwb3J0cy5mcyA9IGV4cG9ydHMuZXJybm8gPSBleHBvcnRzLmFycmF5ID0gdm9pZCAwO1xyXG5jb25zdCBhcnJheSA9IHJlcXVpcmUoXCIuL2FycmF5XCIpO1xyXG5leHBvcnRzLmFycmF5ID0gYXJyYXk7XHJcbmNvbnN0IGVycm5vID0gcmVxdWlyZShcIi4vZXJybm9cIik7XHJcbmV4cG9ydHMuZXJybm8gPSBlcnJubztcclxuY29uc3QgZnMgPSByZXF1aXJlKFwiLi9mc1wiKTtcclxuZXhwb3J0cy5mcyA9IGZzO1xyXG5jb25zdCBwYXRoID0gcmVxdWlyZShcIi4vcGF0aFwiKTtcclxuZXhwb3J0cy5wYXRoID0gcGF0aDtcclxuY29uc3QgcGF0dGVybiA9IHJlcXVpcmUoXCIuL3BhdHRlcm5cIik7XHJcbmV4cG9ydHMucGF0dGVybiA9IHBhdHRlcm47XHJcbmNvbnN0IHN0cmVhbSA9IHJlcXVpcmUoXCIuL3N0cmVhbVwiKTtcclxuZXhwb3J0cy5zdHJlYW0gPSBzdHJlYW07XHJcbmNvbnN0IHN0cmluZyA9IHJlcXVpcmUoXCIuL3N0cmluZ1wiKTtcclxuZXhwb3J0cy5zdHJpbmcgPSBzdHJpbmc7XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmNvbnZlcnRQYXR0ZXJuR3JvdXBUb1Rhc2sgPSBleHBvcnRzLmNvbnZlcnRQYXR0ZXJuR3JvdXBzVG9UYXNrcyA9IGV4cG9ydHMuZ3JvdXBQYXR0ZXJuc0J5QmFzZURpcmVjdG9yeSA9IGV4cG9ydHMuZ2V0TmVnYXRpdmVQYXR0ZXJuc0FzUG9zaXRpdmUgPSBleHBvcnRzLmdldFBvc2l0aXZlUGF0dGVybnMgPSBleHBvcnRzLmNvbnZlcnRQYXR0ZXJuc1RvVGFza3MgPSBleHBvcnRzLmdlbmVyYXRlID0gdm9pZCAwO1xyXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcclxuZnVuY3Rpb24gZ2VuZXJhdGUocGF0dGVybnMsIHNldHRpbmdzKSB7XHJcbiAgICBjb25zdCBwb3NpdGl2ZVBhdHRlcm5zID0gZ2V0UG9zaXRpdmVQYXR0ZXJucyhwYXR0ZXJucyk7XHJcbiAgICBjb25zdCBuZWdhdGl2ZVBhdHRlcm5zID0gZ2V0TmVnYXRpdmVQYXR0ZXJuc0FzUG9zaXRpdmUocGF0dGVybnMsIHNldHRpbmdzLmlnbm9yZSk7XHJcbiAgICBjb25zdCBzdGF0aWNQYXR0ZXJucyA9IHBvc2l0aXZlUGF0dGVybnMuZmlsdGVyKChwYXR0ZXJuKSA9PiB1dGlscy5wYXR0ZXJuLmlzU3RhdGljUGF0dGVybihwYXR0ZXJuLCBzZXR0aW5ncykpO1xyXG4gICAgY29uc3QgZHluYW1pY1BhdHRlcm5zID0gcG9zaXRpdmVQYXR0ZXJucy5maWx0ZXIoKHBhdHRlcm4pID0+IHV0aWxzLnBhdHRlcm4uaXNEeW5hbWljUGF0dGVybihwYXR0ZXJuLCBzZXR0aW5ncykpO1xyXG4gICAgY29uc3Qgc3RhdGljVGFza3MgPSBjb252ZXJ0UGF0dGVybnNUb1Rhc2tzKHN0YXRpY1BhdHRlcm5zLCBuZWdhdGl2ZVBhdHRlcm5zLCAvKiBkeW5hbWljICovIGZhbHNlKTtcclxuICAgIGNvbnN0IGR5bmFtaWNUYXNrcyA9IGNvbnZlcnRQYXR0ZXJuc1RvVGFza3MoZHluYW1pY1BhdHRlcm5zLCBuZWdhdGl2ZVBhdHRlcm5zLCAvKiBkeW5hbWljICovIHRydWUpO1xyXG4gICAgcmV0dXJuIHN0YXRpY1Rhc2tzLmNvbmNhdChkeW5hbWljVGFza3MpO1xyXG59XHJcbmV4cG9ydHMuZ2VuZXJhdGUgPSBnZW5lcmF0ZTtcclxuLyoqXHJcbiAqIFJldHVybnMgdGFza3MgZ3JvdXBlZCBieSBiYXNpYyBwYXR0ZXJuIGRpcmVjdG9yaWVzLlxyXG4gKlxyXG4gKiBQYXR0ZXJucyB0aGF0IGNhbiBiZSBmb3VuZCBpbnNpZGUgKGAuL2ApIGFuZCBvdXRzaWRlIChgLi4vYCkgdGhlIGN1cnJlbnQgZGlyZWN0b3J5IGFyZSBoYW5kbGVkIHNlcGFyYXRlbHkuXHJcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgZGlyZWN0b3J5IHRyYXZlcnNhbCBzdGFydHMgYXQgdGhlIGJhc2UgZGlyZWN0b3J5IGFuZCBnb2VzIGRlZXBlci5cclxuICovXHJcbmZ1bmN0aW9uIGNvbnZlcnRQYXR0ZXJuc1RvVGFza3MocG9zaXRpdmUsIG5lZ2F0aXZlLCBkeW5hbWljKSB7XHJcbiAgICBjb25zdCB0YXNrcyA9IFtdO1xyXG4gICAgY29uc3QgcGF0dGVybnNPdXRzaWRlQ3VycmVudERpcmVjdG9yeSA9IHV0aWxzLnBhdHRlcm4uZ2V0UGF0dGVybnNPdXRzaWRlQ3VycmVudERpcmVjdG9yeShwb3NpdGl2ZSk7XHJcbiAgICBjb25zdCBwYXR0ZXJuc0luc2lkZUN1cnJlbnREaXJlY3RvcnkgPSB1dGlscy5wYXR0ZXJuLmdldFBhdHRlcm5zSW5zaWRlQ3VycmVudERpcmVjdG9yeShwb3NpdGl2ZSk7XHJcbiAgICBjb25zdCBvdXRzaWRlQ3VycmVudERpcmVjdG9yeUdyb3VwID0gZ3JvdXBQYXR0ZXJuc0J5QmFzZURpcmVjdG9yeShwYXR0ZXJuc091dHNpZGVDdXJyZW50RGlyZWN0b3J5KTtcclxuICAgIGNvbnN0IGluc2lkZUN1cnJlbnREaXJlY3RvcnlHcm91cCA9IGdyb3VwUGF0dGVybnNCeUJhc2VEaXJlY3RvcnkocGF0dGVybnNJbnNpZGVDdXJyZW50RGlyZWN0b3J5KTtcclxuICAgIHRhc2tzLnB1c2goLi4uY29udmVydFBhdHRlcm5Hcm91cHNUb1Rhc2tzKG91dHNpZGVDdXJyZW50RGlyZWN0b3J5R3JvdXAsIG5lZ2F0aXZlLCBkeW5hbWljKSk7XHJcbiAgICAvKlxyXG4gICAgICogRm9yIHRoZSBzYWtlIG9mIHJlZHVjaW5nIGZ1dHVyZSBhY2Nlc3NlcyB0byB0aGUgZmlsZSBzeXN0ZW0sIHdlIG1lcmdlIGFsbCB0YXNrcyB3aXRoaW4gdGhlIGN1cnJlbnQgZGlyZWN0b3J5XHJcbiAgICAgKiBpbnRvIGEgZ2xvYmFsIHRhc2ssIGlmIGF0IGxlYXN0IG9uZSBwYXR0ZXJuIHJlZmVycyB0byB0aGUgcm9vdCAoYC5gKS4gSW4gdGhpcyBjYXNlLCB0aGUgZ2xvYmFsIHRhc2sgY292ZXJzIHRoZSByZXN0LlxyXG4gICAgICovXHJcbiAgICBpZiAoJy4nIGluIGluc2lkZUN1cnJlbnREaXJlY3RvcnlHcm91cCkge1xyXG4gICAgICAgIHRhc2tzLnB1c2goY29udmVydFBhdHRlcm5Hcm91cFRvVGFzaygnLicsIHBhdHRlcm5zSW5zaWRlQ3VycmVudERpcmVjdG9yeSwgbmVnYXRpdmUsIGR5bmFtaWMpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRhc2tzLnB1c2goLi4uY29udmVydFBhdHRlcm5Hcm91cHNUb1Rhc2tzKGluc2lkZUN1cnJlbnREaXJlY3RvcnlHcm91cCwgbmVnYXRpdmUsIGR5bmFtaWMpKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0YXNrcztcclxufVxyXG5leHBvcnRzLmNvbnZlcnRQYXR0ZXJuc1RvVGFza3MgPSBjb252ZXJ0UGF0dGVybnNUb1Rhc2tzO1xyXG5mdW5jdGlvbiBnZXRQb3NpdGl2ZVBhdHRlcm5zKHBhdHRlcm5zKSB7XHJcbiAgICByZXR1cm4gdXRpbHMucGF0dGVybi5nZXRQb3NpdGl2ZVBhdHRlcm5zKHBhdHRlcm5zKTtcclxufVxyXG5leHBvcnRzLmdldFBvc2l0aXZlUGF0dGVybnMgPSBnZXRQb3NpdGl2ZVBhdHRlcm5zO1xyXG5mdW5jdGlvbiBnZXROZWdhdGl2ZVBhdHRlcm5zQXNQb3NpdGl2ZShwYXR0ZXJucywgaWdub3JlKSB7XHJcbiAgICBjb25zdCBuZWdhdGl2ZSA9IHV0aWxzLnBhdHRlcm4uZ2V0TmVnYXRpdmVQYXR0ZXJucyhwYXR0ZXJucykuY29uY2F0KGlnbm9yZSk7XHJcbiAgICBjb25zdCBwb3NpdGl2ZSA9IG5lZ2F0aXZlLm1hcCh1dGlscy5wYXR0ZXJuLmNvbnZlcnRUb1Bvc2l0aXZlUGF0dGVybik7XHJcbiAgICByZXR1cm4gcG9zaXRpdmU7XHJcbn1cclxuZXhwb3J0cy5nZXROZWdhdGl2ZVBhdHRlcm5zQXNQb3NpdGl2ZSA9IGdldE5lZ2F0aXZlUGF0dGVybnNBc1Bvc2l0aXZlO1xyXG5mdW5jdGlvbiBncm91cFBhdHRlcm5zQnlCYXNlRGlyZWN0b3J5KHBhdHRlcm5zKSB7XHJcbiAgICBjb25zdCBncm91cCA9IHt9O1xyXG4gICAgcmV0dXJuIHBhdHRlcm5zLnJlZHVjZSgoY29sbGVjdGlvbiwgcGF0dGVybikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGJhc2UgPSB1dGlscy5wYXR0ZXJuLmdldEJhc2VEaXJlY3RvcnkocGF0dGVybik7XHJcbiAgICAgICAgaWYgKGJhc2UgaW4gY29sbGVjdGlvbikge1xyXG4gICAgICAgICAgICBjb2xsZWN0aW9uW2Jhc2VdLnB1c2gocGF0dGVybik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb2xsZWN0aW9uW2Jhc2VdID0gW3BhdHRlcm5dO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcclxuICAgIH0sIGdyb3VwKTtcclxufVxyXG5leHBvcnRzLmdyb3VwUGF0dGVybnNCeUJhc2VEaXJlY3RvcnkgPSBncm91cFBhdHRlcm5zQnlCYXNlRGlyZWN0b3J5O1xyXG5mdW5jdGlvbiBjb252ZXJ0UGF0dGVybkdyb3Vwc1RvVGFza3MocG9zaXRpdmUsIG5lZ2F0aXZlLCBkeW5hbWljKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocG9zaXRpdmUpLm1hcCgoYmFzZSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBjb252ZXJ0UGF0dGVybkdyb3VwVG9UYXNrKGJhc2UsIHBvc2l0aXZlW2Jhc2VdLCBuZWdhdGl2ZSwgZHluYW1pYyk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLmNvbnZlcnRQYXR0ZXJuR3JvdXBzVG9UYXNrcyA9IGNvbnZlcnRQYXR0ZXJuR3JvdXBzVG9UYXNrcztcclxuZnVuY3Rpb24gY29udmVydFBhdHRlcm5Hcm91cFRvVGFzayhiYXNlLCBwb3NpdGl2ZSwgbmVnYXRpdmUsIGR5bmFtaWMpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZHluYW1pYyxcclxuICAgICAgICBwb3NpdGl2ZSxcclxuICAgICAgICBuZWdhdGl2ZSxcclxuICAgICAgICBiYXNlLFxyXG4gICAgICAgIHBhdHRlcm5zOiBbXS5jb25jYXQocG9zaXRpdmUsIG5lZ2F0aXZlLm1hcCh1dGlscy5wYXR0ZXJuLmNvbnZlcnRUb05lZ2F0aXZlUGF0dGVybikpXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMuY29udmVydFBhdHRlcm5Hcm91cFRvVGFzayA9IGNvbnZlcnRQYXR0ZXJuR3JvdXBUb1Rhc2s7XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnJlbW92ZUR1cGxpY2F0ZVNsYXNoZXMgPSBleHBvcnRzLnRyYW5zZm9ybSA9IHZvaWQgMDtcclxuLyoqXHJcbiAqIE1hdGNoZXMgYSBzZXF1ZW5jZSBvZiB0d28gb3IgbW9yZSBjb25zZWN1dGl2ZSBzbGFzaGVzLCBleGNsdWRpbmcgdGhlIGZpcnN0IHR3byBzbGFzaGVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHN0cmluZy5cclxuICogVGhlIGxhdHRlciBpcyBkdWUgdG8gdGhlIHByZXNlbmNlIG9mIHRoZSBkZXZpY2UgcGF0aCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBVTkMgcGF0aC5cclxuICogQHRvZG8gcmV3cml0ZSB0byBuZWdhdGl2ZSBsb29rYmVoaW5kIHdpdGggdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cclxuICovXHJcbmNvbnN0IERPVUJMRV9TTEFTSF9SRSA9IC8oPyFeKVxcL3syLH0vZztcclxuZnVuY3Rpb24gdHJhbnNmb3JtKHBhdHRlcm5zKSB7XHJcbiAgICByZXR1cm4gcGF0dGVybnMubWFwKChwYXR0ZXJuKSA9PiByZW1vdmVEdXBsaWNhdGVTbGFzaGVzKHBhdHRlcm4pKTtcclxufVxyXG5leHBvcnRzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcclxuLyoqXHJcbiAqIFRoaXMgcGFja2FnZSBvbmx5IHdvcmtzIHdpdGggZm9yd2FyZCBzbGFzaGVzIGFzIGEgcGF0aCBzZXBhcmF0b3IuXHJcbiAqIEJlY2F1c2Ugb2YgdGhpcywgd2UgY2Fubm90IHVzZSB0aGUgc3RhbmRhcmQgYHBhdGgubm9ybWFsaXplYCBtZXRob2QsIGJlY2F1c2Ugb24gV2luZG93cyBwbGF0Zm9ybSBpdCB3aWxsIHVzZSBvZiBiYWNrc2xhc2hlcy5cclxuICovXHJcbmZ1bmN0aW9uIHJlbW92ZUR1cGxpY2F0ZVNsYXNoZXMocGF0dGVybikge1xyXG4gICAgcmV0dXJuIHBhdHRlcm4ucmVwbGFjZShET1VCTEVfU0xBU0hfUkUsICcvJyk7XHJcbn1cclxuZXhwb3J0cy5yZW1vdmVEdXBsaWNhdGVTbGFzaGVzID0gcmVtb3ZlRHVwbGljYXRlU2xhc2hlcztcclxuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWFkID0gdm9pZCAwO1xuZnVuY3Rpb24gcmVhZChwYXRoLCBzZXR0aW5ncywgY2FsbGJhY2spIHtcbiAgICBzZXR0aW5ncy5mcy5sc3RhdChwYXRoLCAobHN0YXRFcnJvciwgbHN0YXQpID0+IHtcbiAgICAgICAgaWYgKGxzdGF0RXJyb3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNhbGxGYWlsdXJlQ2FsbGJhY2soY2FsbGJhY2ssIGxzdGF0RXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbHN0YXQuaXNTeW1ib2xpY0xpbmsoKSB8fCAhc2V0dGluZ3MuZm9sbG93U3ltYm9saWNMaW5rKSB7XG4gICAgICAgICAgICBjYWxsU3VjY2Vzc0NhbGxiYWNrKGNhbGxiYWNrLCBsc3RhdCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2V0dGluZ3MuZnMuc3RhdChwYXRoLCAoc3RhdEVycm9yLCBzdGF0KSA9PiB7XG4gICAgICAgICAgICBpZiAoc3RhdEVycm9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLnRocm93RXJyb3JPbkJyb2tlblN5bWJvbGljTGluaykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsRmFpbHVyZUNhbGxiYWNrKGNhbGxiYWNrLCBzdGF0RXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxTdWNjZXNzQ2FsbGJhY2soY2FsbGJhY2ssIGxzdGF0KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MubWFya1N5bWJvbGljTGluaykge1xuICAgICAgICAgICAgICAgIHN0YXQuaXNTeW1ib2xpY0xpbmsgPSAoKSA9PiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbFN1Y2Nlc3NDYWxsYmFjayhjYWxsYmFjaywgc3RhdCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5yZWFkID0gcmVhZDtcbmZ1bmN0aW9uIGNhbGxGYWlsdXJlQ2FsbGJhY2soY2FsbGJhY2ssIGVycm9yKSB7XG4gICAgY2FsbGJhY2soZXJyb3IpO1xufVxuZnVuY3Rpb24gY2FsbFN1Y2Nlc3NDYWxsYmFjayhjYWxsYmFjaywgcmVzdWx0KSB7XG4gICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcbn1cbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVhZCA9IHZvaWQgMDtcbmZ1bmN0aW9uIHJlYWQocGF0aCwgc2V0dGluZ3MpIHtcbiAgICBjb25zdCBsc3RhdCA9IHNldHRpbmdzLmZzLmxzdGF0U3luYyhwYXRoKTtcbiAgICBpZiAoIWxzdGF0LmlzU3ltYm9saWNMaW5rKCkgfHwgIXNldHRpbmdzLmZvbGxvd1N5bWJvbGljTGluaykge1xuICAgICAgICByZXR1cm4gbHN0YXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHN0YXQgPSBzZXR0aW5ncy5mcy5zdGF0U3luYyhwYXRoKTtcbiAgICAgICAgaWYgKHNldHRpbmdzLm1hcmtTeW1ib2xpY0xpbmspIHtcbiAgICAgICAgICAgIHN0YXQuaXNTeW1ib2xpY0xpbmsgPSAoKSA9PiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGF0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKCFzZXR0aW5ncy50aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbmspIHtcbiAgICAgICAgICAgIHJldHVybiBsc3RhdDtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG5leHBvcnRzLnJlYWQgPSByZWFkO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVGaWxlU3lzdGVtQWRhcHRlciA9IGV4cG9ydHMuRklMRV9TWVNURU1fQURBUFRFUiA9IHZvaWQgMDtcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuZXhwb3J0cy5GSUxFX1NZU1RFTV9BREFQVEVSID0ge1xuICAgIGxzdGF0OiBmcy5sc3RhdCxcbiAgICBzdGF0OiBmcy5zdGF0LFxuICAgIGxzdGF0U3luYzogZnMubHN0YXRTeW5jLFxuICAgIHN0YXRTeW5jOiBmcy5zdGF0U3luY1xufTtcbmZ1bmN0aW9uIGNyZWF0ZUZpbGVTeXN0ZW1BZGFwdGVyKGZzTWV0aG9kcykge1xuICAgIGlmIChmc01ldGhvZHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5GSUxFX1NZU1RFTV9BREFQVEVSO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBleHBvcnRzLkZJTEVfU1lTVEVNX0FEQVBURVIpLCBmc01ldGhvZHMpO1xufVxuZXhwb3J0cy5jcmVhdGVGaWxlU3lzdGVtQWRhcHRlciA9IGNyZWF0ZUZpbGVTeXN0ZW1BZGFwdGVyO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZnMgPSByZXF1aXJlKFwiLi9hZGFwdGVycy9mc1wiKTtcbmNsYXNzIFNldHRpbmdzIHtcbiAgICBjb25zdHJ1Y3Rvcihfb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBfb3B0aW9ucztcbiAgICAgICAgdGhpcy5mb2xsb3dTeW1ib2xpY0xpbmsgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmZvbGxvd1N5bWJvbGljTGluaywgdHJ1ZSk7XG4gICAgICAgIHRoaXMuZnMgPSBmcy5jcmVhdGVGaWxlU3lzdGVtQWRhcHRlcih0aGlzLl9vcHRpb25zLmZzKTtcbiAgICAgICAgdGhpcy5tYXJrU3ltYm9saWNMaW5rID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5tYXJrU3ltYm9saWNMaW5rLCBmYWxzZSk7XG4gICAgICAgIHRoaXMudGhyb3dFcnJvck9uQnJva2VuU3ltYm9saWNMaW5rID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy50aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbmssIHRydWUpO1xuICAgIH1cbiAgICBfZ2V0VmFsdWUob3B0aW9uLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gb3B0aW9uICE9PSBudWxsICYmIG9wdGlvbiAhPT0gdm9pZCAwID8gb3B0aW9uIDogdmFsdWU7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU2V0dGluZ3M7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0YXRTeW5jID0gZXhwb3J0cy5zdGF0ID0gZXhwb3J0cy5TZXR0aW5ncyA9IHZvaWQgMDtcbmNvbnN0IGFzeW5jID0gcmVxdWlyZShcIi4vcHJvdmlkZXJzL2FzeW5jXCIpO1xuY29uc3Qgc3luYyA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVycy9zeW5jXCIpO1xuY29uc3Qgc2V0dGluZ3NfMSA9IHJlcXVpcmUoXCIuL3NldHRpbmdzXCIpO1xuZXhwb3J0cy5TZXR0aW5ncyA9IHNldHRpbmdzXzEuZGVmYXVsdDtcbmZ1bmN0aW9uIHN0YXQocGF0aCwgb3B0aW9uc09yU2V0dGluZ3NPckNhbGxiYWNrLCBjYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9uc09yU2V0dGluZ3NPckNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGFzeW5jLnJlYWQocGF0aCwgZ2V0U2V0dGluZ3MoKSwgb3B0aW9uc09yU2V0dGluZ3NPckNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhc3luYy5yZWFkKHBhdGgsIGdldFNldHRpbmdzKG9wdGlvbnNPclNldHRpbmdzT3JDYWxsYmFjayksIGNhbGxiYWNrKTtcbn1cbmV4cG9ydHMuc3RhdCA9IHN0YXQ7XG5mdW5jdGlvbiBzdGF0U3luYyhwYXRoLCBvcHRpb25zT3JTZXR0aW5ncykge1xuICAgIGNvbnN0IHNldHRpbmdzID0gZ2V0U2V0dGluZ3Mob3B0aW9uc09yU2V0dGluZ3MpO1xuICAgIHJldHVybiBzeW5jLnJlYWQocGF0aCwgc2V0dGluZ3MpO1xufVxuZXhwb3J0cy5zdGF0U3luYyA9IHN0YXRTeW5jO1xuZnVuY3Rpb24gZ2V0U2V0dGluZ3Moc2V0dGluZ3NPck9wdGlvbnMgPSB7fSkge1xuICAgIGlmIChzZXR0aW5nc09yT3B0aW9ucyBpbnN0YW5jZW9mIHNldHRpbmdzXzEuZGVmYXVsdCkge1xuICAgICAgICByZXR1cm4gc2V0dGluZ3NPck9wdGlvbnM7XG4gICAgfVxuICAgIHJldHVybiBuZXcgc2V0dGluZ3NfMS5kZWZhdWx0KHNldHRpbmdzT3JPcHRpb25zKTtcbn1cbiIsICIvKiEgcXVldWUtbWljcm90YXNrLiBNSVQgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICovXG5sZXQgcHJvbWlzZVxuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBxdWV1ZU1pY3JvdGFzayA9PT0gJ2Z1bmN0aW9uJ1xuICA/IHF1ZXVlTWljcm90YXNrLmJpbmQodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpXG4gIC8vIHJldXNlIHJlc29sdmVkIHByb21pc2UsIGFuZCBhbGxvY2F0ZSBpdCBsYXppbHlcbiAgOiBjYiA9PiAocHJvbWlzZSB8fCAocHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpKSlcbiAgICAudGhlbihjYilcbiAgICAuY2F0Y2goZXJyID0+IHNldFRpbWVvdXQoKCkgPT4geyB0aHJvdyBlcnIgfSwgMCkpXG4iLCAiLyohIHJ1bi1wYXJhbGxlbC4gTUlUIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xubW9kdWxlLmV4cG9ydHMgPSBydW5QYXJhbGxlbFxuXG5jb25zdCBxdWV1ZU1pY3JvdGFzayA9IHJlcXVpcmUoJ3F1ZXVlLW1pY3JvdGFzaycpXG5cbmZ1bmN0aW9uIHJ1blBhcmFsbGVsICh0YXNrcywgY2IpIHtcbiAgbGV0IHJlc3VsdHMsIHBlbmRpbmcsIGtleXNcbiAgbGV0IGlzU3luYyA9IHRydWVcblxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXNrcykpIHtcbiAgICByZXN1bHRzID0gW11cbiAgICBwZW5kaW5nID0gdGFza3MubGVuZ3RoXG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHRhc2tzKVxuICAgIHJlc3VsdHMgPSB7fVxuICAgIHBlbmRpbmcgPSBrZXlzLmxlbmd0aFxuICB9XG5cbiAgZnVuY3Rpb24gZG9uZSAoZXJyKSB7XG4gICAgZnVuY3Rpb24gZW5kICgpIHtcbiAgICAgIGlmIChjYikgY2IoZXJyLCByZXN1bHRzKVxuICAgICAgY2IgPSBudWxsXG4gICAgfVxuICAgIGlmIChpc1N5bmMpIHF1ZXVlTWljcm90YXNrKGVuZClcbiAgICBlbHNlIGVuZCgpXG4gIH1cblxuICBmdW5jdGlvbiBlYWNoIChpLCBlcnIsIHJlc3VsdCkge1xuICAgIHJlc3VsdHNbaV0gPSByZXN1bHRcbiAgICBpZiAoLS1wZW5kaW5nID09PSAwIHx8IGVycikge1xuICAgICAgZG9uZShlcnIpXG4gICAgfVxuICB9XG5cbiAgaWYgKCFwZW5kaW5nKSB7XG4gICAgLy8gZW1wdHlcbiAgICBkb25lKG51bGwpXG4gIH0gZWxzZSBpZiAoa2V5cykge1xuICAgIC8vIG9iamVjdFxuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB0YXNrc1trZXldKGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkgeyBlYWNoKGtleSwgZXJyLCByZXN1bHQpIH0pXG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICAvLyBhcnJheVxuICAgIHRhc2tzLmZvckVhY2goZnVuY3Rpb24gKHRhc2ssIGkpIHtcbiAgICAgIHRhc2soZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7IGVhY2goaSwgZXJyLCByZXN1bHQpIH0pXG4gICAgfSlcbiAgfVxuXG4gIGlzU3luYyA9IGZhbHNlXG59XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklTX1NVUFBPUlRfUkVBRERJUl9XSVRIX0ZJTEVfVFlQRVMgPSB2b2lkIDA7XG5jb25zdCBOT0RFX1BST0NFU1NfVkVSU0lPTl9QQVJUUyA9IHByb2Nlc3MudmVyc2lvbnMubm9kZS5zcGxpdCgnLicpO1xuaWYgKE5PREVfUFJPQ0VTU19WRVJTSU9OX1BBUlRTWzBdID09PSB1bmRlZmluZWQgfHwgTk9ERV9QUk9DRVNTX1ZFUlNJT05fUEFSVFNbMV0gPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBiZWhhdmlvci4gVGhlICdwcm9jZXNzLnZlcnNpb25zLm5vZGUnIHZhcmlhYmxlIGhhcyBpbnZhbGlkIHZhbHVlOiAke3Byb2Nlc3MudmVyc2lvbnMubm9kZX1gKTtcbn1cbmNvbnN0IE1BSk9SX1ZFUlNJT04gPSBOdW1iZXIucGFyc2VJbnQoTk9ERV9QUk9DRVNTX1ZFUlNJT05fUEFSVFNbMF0sIDEwKTtcbmNvbnN0IE1JTk9SX1ZFUlNJT04gPSBOdW1iZXIucGFyc2VJbnQoTk9ERV9QUk9DRVNTX1ZFUlNJT05fUEFSVFNbMV0sIDEwKTtcbmNvbnN0IFNVUFBPUlRFRF9NQUpPUl9WRVJTSU9OID0gMTA7XG5jb25zdCBTVVBQT1JURURfTUlOT1JfVkVSU0lPTiA9IDEwO1xuY29uc3QgSVNfTUFUQ0hFRF9CWV9NQUpPUiA9IE1BSk9SX1ZFUlNJT04gPiBTVVBQT1JURURfTUFKT1JfVkVSU0lPTjtcbmNvbnN0IElTX01BVENIRURfQllfTUFKT1JfQU5EX01JTk9SID0gTUFKT1JfVkVSU0lPTiA9PT0gU1VQUE9SVEVEX01BSk9SX1ZFUlNJT04gJiYgTUlOT1JfVkVSU0lPTiA+PSBTVVBQT1JURURfTUlOT1JfVkVSU0lPTjtcbi8qKlxuICogSVMgYHRydWVgIGZvciBOb2RlLmpzIDEwLjEwIGFuZCBncmVhdGVyLlxuICovXG5leHBvcnRzLklTX1NVUFBPUlRfUkVBRERJUl9XSVRIX0ZJTEVfVFlQRVMgPSBJU19NQVRDSEVEX0JZX01BSk9SIHx8IElTX01BVENIRURfQllfTUFKT1JfQU5EX01JTk9SO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVEaXJlbnRGcm9tU3RhdHMgPSB2b2lkIDA7XG5jbGFzcyBEaXJlbnRGcm9tU3RhdHMge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHN0YXRzKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuaXNCbG9ja0RldmljZSA9IHN0YXRzLmlzQmxvY2tEZXZpY2UuYmluZChzdGF0cyk7XG4gICAgICAgIHRoaXMuaXNDaGFyYWN0ZXJEZXZpY2UgPSBzdGF0cy5pc0NoYXJhY3RlckRldmljZS5iaW5kKHN0YXRzKTtcbiAgICAgICAgdGhpcy5pc0RpcmVjdG9yeSA9IHN0YXRzLmlzRGlyZWN0b3J5LmJpbmQoc3RhdHMpO1xuICAgICAgICB0aGlzLmlzRklGTyA9IHN0YXRzLmlzRklGTy5iaW5kKHN0YXRzKTtcbiAgICAgICAgdGhpcy5pc0ZpbGUgPSBzdGF0cy5pc0ZpbGUuYmluZChzdGF0cyk7XG4gICAgICAgIHRoaXMuaXNTb2NrZXQgPSBzdGF0cy5pc1NvY2tldC5iaW5kKHN0YXRzKTtcbiAgICAgICAgdGhpcy5pc1N5bWJvbGljTGluayA9IHN0YXRzLmlzU3ltYm9saWNMaW5rLmJpbmQoc3RhdHMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZURpcmVudEZyb21TdGF0cyhuYW1lLCBzdGF0cykge1xuICAgIHJldHVybiBuZXcgRGlyZW50RnJvbVN0YXRzKG5hbWUsIHN0YXRzKTtcbn1cbmV4cG9ydHMuY3JlYXRlRGlyZW50RnJvbVN0YXRzID0gY3JlYXRlRGlyZW50RnJvbVN0YXRzO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mcyA9IHZvaWQgMDtcbmNvbnN0IGZzID0gcmVxdWlyZShcIi4vZnNcIik7XG5leHBvcnRzLmZzID0gZnM7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmpvaW5QYXRoU2VnbWVudHMgPSB2b2lkIDA7XG5mdW5jdGlvbiBqb2luUGF0aFNlZ21lbnRzKGEsIGIsIHNlcGFyYXRvcikge1xuICAgIC8qKlxuICAgICAqIFRoZSBjb3JyZWN0IGhhbmRsaW5nIG9mIGNhc2VzIHdoZW4gdGhlIGZpcnN0IHNlZ21lbnQgaXMgYSByb290IChgL2AsIGBDOi9gKSBvciBVTkMgcGF0aCAoYC8vPy9DOi9gKS5cbiAgICAgKi9cbiAgICBpZiAoYS5lbmRzV2l0aChzZXBhcmF0b3IpKSB7XG4gICAgICAgIHJldHVybiBhICsgYjtcbiAgICB9XG4gICAgcmV0dXJuIGEgKyBzZXBhcmF0b3IgKyBiO1xufVxuZXhwb3J0cy5qb2luUGF0aFNlZ21lbnRzID0gam9pblBhdGhTZWdtZW50cztcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVhZGRpciA9IGV4cG9ydHMucmVhZGRpcldpdGhGaWxlVHlwZXMgPSBleHBvcnRzLnJlYWQgPSB2b2lkIDA7XG5jb25zdCBmc1N0YXQgPSByZXF1aXJlKFwiQG5vZGVsaWIvZnMuc3RhdFwiKTtcbmNvbnN0IHJwbCA9IHJlcXVpcmUoXCJydW4tcGFyYWxsZWxcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoXCIuL2NvbW1vblwiKTtcbmZ1bmN0aW9uIHJlYWQoZGlyZWN0b3J5LCBzZXR0aW5ncywgY2FsbGJhY2spIHtcbiAgICBpZiAoIXNldHRpbmdzLnN0YXRzICYmIGNvbnN0YW50c18xLklTX1NVUFBPUlRfUkVBRERJUl9XSVRIX0ZJTEVfVFlQRVMpIHtcbiAgICAgICAgcmVhZGRpcldpdGhGaWxlVHlwZXMoZGlyZWN0b3J5LCBzZXR0aW5ncywgY2FsbGJhY2spO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlYWRkaXIoZGlyZWN0b3J5LCBzZXR0aW5ncywgY2FsbGJhY2spO1xufVxuZXhwb3J0cy5yZWFkID0gcmVhZDtcbmZ1bmN0aW9uIHJlYWRkaXJXaXRoRmlsZVR5cGVzKGRpcmVjdG9yeSwgc2V0dGluZ3MsIGNhbGxiYWNrKSB7XG4gICAgc2V0dGluZ3MuZnMucmVhZGRpcihkaXJlY3RvcnksIHsgd2l0aEZpbGVUeXBlczogdHJ1ZSB9LCAocmVhZGRpckVycm9yLCBkaXJlbnRzKSA9PiB7XG4gICAgICAgIGlmIChyZWFkZGlyRXJyb3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNhbGxGYWlsdXJlQ2FsbGJhY2soY2FsbGJhY2ssIHJlYWRkaXJFcnJvcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZW50cmllcyA9IGRpcmVudHMubWFwKChkaXJlbnQpID0+ICh7XG4gICAgICAgICAgICBkaXJlbnQsXG4gICAgICAgICAgICBuYW1lOiBkaXJlbnQubmFtZSxcbiAgICAgICAgICAgIHBhdGg6IGNvbW1vbi5qb2luUGF0aFNlZ21lbnRzKGRpcmVjdG9yeSwgZGlyZW50Lm5hbWUsIHNldHRpbmdzLnBhdGhTZWdtZW50U2VwYXJhdG9yKVxuICAgICAgICB9KSk7XG4gICAgICAgIGlmICghc2V0dGluZ3MuZm9sbG93U3ltYm9saWNMaW5rcykge1xuICAgICAgICAgICAgY2FsbFN1Y2Nlc3NDYWxsYmFjayhjYWxsYmFjaywgZW50cmllcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFza3MgPSBlbnRyaWVzLm1hcCgoZW50cnkpID0+IG1ha2VScGxUYXNrRW50cnkoZW50cnksIHNldHRpbmdzKSk7XG4gICAgICAgIHJwbCh0YXNrcywgKHJwbEVycm9yLCBycGxFbnRyaWVzKSA9PiB7XG4gICAgICAgICAgICBpZiAocnBsRXJyb3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjYWxsRmFpbHVyZUNhbGxiYWNrKGNhbGxiYWNrLCBycGxFcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbFN1Y2Nlc3NDYWxsYmFjayhjYWxsYmFjaywgcnBsRW50cmllcyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5yZWFkZGlyV2l0aEZpbGVUeXBlcyA9IHJlYWRkaXJXaXRoRmlsZVR5cGVzO1xuZnVuY3Rpb24gbWFrZVJwbFRhc2tFbnRyeShlbnRyeSwgc2V0dGluZ3MpIHtcbiAgICByZXR1cm4gKGRvbmUpID0+IHtcbiAgICAgICAgaWYgKCFlbnRyeS5kaXJlbnQuaXNTeW1ib2xpY0xpbmsoKSkge1xuICAgICAgICAgICAgZG9uZShudWxsLCBlbnRyeSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2V0dGluZ3MuZnMuc3RhdChlbnRyeS5wYXRoLCAoc3RhdEVycm9yLCBzdGF0cykgPT4ge1xuICAgICAgICAgICAgaWYgKHN0YXRFcnJvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy50aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbmspIHtcbiAgICAgICAgICAgICAgICAgICAgZG9uZShzdGF0RXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRvbmUobnVsbCwgZW50cnkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVudHJ5LmRpcmVudCA9IHV0aWxzLmZzLmNyZWF0ZURpcmVudEZyb21TdGF0cyhlbnRyeS5uYW1lLCBzdGF0cyk7XG4gICAgICAgICAgICBkb25lKG51bGwsIGVudHJ5KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlYWRkaXIoZGlyZWN0b3J5LCBzZXR0aW5ncywgY2FsbGJhY2spIHtcbiAgICBzZXR0aW5ncy5mcy5yZWFkZGlyKGRpcmVjdG9yeSwgKHJlYWRkaXJFcnJvciwgbmFtZXMpID0+IHtcbiAgICAgICAgaWYgKHJlYWRkaXJFcnJvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY2FsbEZhaWx1cmVDYWxsYmFjayhjYWxsYmFjaywgcmVhZGRpckVycm9yKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YXNrcyA9IG5hbWVzLm1hcCgobmFtZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGNvbW1vbi5qb2luUGF0aFNlZ21lbnRzKGRpcmVjdG9yeSwgbmFtZSwgc2V0dGluZ3MucGF0aFNlZ21lbnRTZXBhcmF0b3IpO1xuICAgICAgICAgICAgcmV0dXJuIChkb25lKSA9PiB7XG4gICAgICAgICAgICAgICAgZnNTdGF0LnN0YXQocGF0aCwgc2V0dGluZ3MuZnNTdGF0U2V0dGluZ3MsIChlcnJvciwgc3RhdHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb25lKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbnRyeSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyZW50OiB1dGlscy5mcy5jcmVhdGVEaXJlbnRGcm9tU3RhdHMobmFtZSwgc3RhdHMpXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy5zdGF0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkuc3RhdHMgPSBzdGF0cztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkb25lKG51bGwsIGVudHJ5KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBycGwodGFza3MsIChycGxFcnJvciwgZW50cmllcykgPT4ge1xuICAgICAgICAgICAgaWYgKHJwbEVycm9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY2FsbEZhaWx1cmVDYWxsYmFjayhjYWxsYmFjaywgcnBsRXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxTdWNjZXNzQ2FsbGJhY2soY2FsbGJhY2ssIGVudHJpZXMpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMucmVhZGRpciA9IHJlYWRkaXI7XG5mdW5jdGlvbiBjYWxsRmFpbHVyZUNhbGxiYWNrKGNhbGxiYWNrLCBlcnJvcikge1xuICAgIGNhbGxiYWNrKGVycm9yKTtcbn1cbmZ1bmN0aW9uIGNhbGxTdWNjZXNzQ2FsbGJhY2soY2FsbGJhY2ssIHJlc3VsdCkge1xuICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdCk7XG59XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlYWRkaXIgPSBleHBvcnRzLnJlYWRkaXJXaXRoRmlsZVR5cGVzID0gZXhwb3J0cy5yZWFkID0gdm9pZCAwO1xuY29uc3QgZnNTdGF0ID0gcmVxdWlyZShcIkBub2RlbGliL2ZzLnN0YXRcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoXCIuL2NvbW1vblwiKTtcbmZ1bmN0aW9uIHJlYWQoZGlyZWN0b3J5LCBzZXR0aW5ncykge1xuICAgIGlmICghc2V0dGluZ3Muc3RhdHMgJiYgY29uc3RhbnRzXzEuSVNfU1VQUE9SVF9SRUFERElSX1dJVEhfRklMRV9UWVBFUykge1xuICAgICAgICByZXR1cm4gcmVhZGRpcldpdGhGaWxlVHlwZXMoZGlyZWN0b3J5LCBzZXR0aW5ncyk7XG4gICAgfVxuICAgIHJldHVybiByZWFkZGlyKGRpcmVjdG9yeSwgc2V0dGluZ3MpO1xufVxuZXhwb3J0cy5yZWFkID0gcmVhZDtcbmZ1bmN0aW9uIHJlYWRkaXJXaXRoRmlsZVR5cGVzKGRpcmVjdG9yeSwgc2V0dGluZ3MpIHtcbiAgICBjb25zdCBkaXJlbnRzID0gc2V0dGluZ3MuZnMucmVhZGRpclN5bmMoZGlyZWN0b3J5LCB7IHdpdGhGaWxlVHlwZXM6IHRydWUgfSk7XG4gICAgcmV0dXJuIGRpcmVudHMubWFwKChkaXJlbnQpID0+IHtcbiAgICAgICAgY29uc3QgZW50cnkgPSB7XG4gICAgICAgICAgICBkaXJlbnQsXG4gICAgICAgICAgICBuYW1lOiBkaXJlbnQubmFtZSxcbiAgICAgICAgICAgIHBhdGg6IGNvbW1vbi5qb2luUGF0aFNlZ21lbnRzKGRpcmVjdG9yeSwgZGlyZW50Lm5hbWUsIHNldHRpbmdzLnBhdGhTZWdtZW50U2VwYXJhdG9yKVxuICAgICAgICB9O1xuICAgICAgICBpZiAoZW50cnkuZGlyZW50LmlzU3ltYm9saWNMaW5rKCkgJiYgc2V0dGluZ3MuZm9sbG93U3ltYm9saWNMaW5rcykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0cyA9IHNldHRpbmdzLmZzLnN0YXRTeW5jKGVudHJ5LnBhdGgpO1xuICAgICAgICAgICAgICAgIGVudHJ5LmRpcmVudCA9IHV0aWxzLmZzLmNyZWF0ZURpcmVudEZyb21TdGF0cyhlbnRyeS5uYW1lLCBzdGF0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3MudGhyb3dFcnJvck9uQnJva2VuU3ltYm9saWNMaW5rKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgfSk7XG59XG5leHBvcnRzLnJlYWRkaXJXaXRoRmlsZVR5cGVzID0gcmVhZGRpcldpdGhGaWxlVHlwZXM7XG5mdW5jdGlvbiByZWFkZGlyKGRpcmVjdG9yeSwgc2V0dGluZ3MpIHtcbiAgICBjb25zdCBuYW1lcyA9IHNldHRpbmdzLmZzLnJlYWRkaXJTeW5jKGRpcmVjdG9yeSk7XG4gICAgcmV0dXJuIG5hbWVzLm1hcCgobmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBlbnRyeVBhdGggPSBjb21tb24uam9pblBhdGhTZWdtZW50cyhkaXJlY3RvcnksIG5hbWUsIHNldHRpbmdzLnBhdGhTZWdtZW50U2VwYXJhdG9yKTtcbiAgICAgICAgY29uc3Qgc3RhdHMgPSBmc1N0YXQuc3RhdFN5bmMoZW50cnlQYXRoLCBzZXR0aW5ncy5mc1N0YXRTZXR0aW5ncyk7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0ge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHBhdGg6IGVudHJ5UGF0aCxcbiAgICAgICAgICAgIGRpcmVudDogdXRpbHMuZnMuY3JlYXRlRGlyZW50RnJvbVN0YXRzKG5hbWUsIHN0YXRzKVxuICAgICAgICB9O1xuICAgICAgICBpZiAoc2V0dGluZ3Muc3RhdHMpIHtcbiAgICAgICAgICAgIGVudHJ5LnN0YXRzID0gc3RhdHM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgIH0pO1xufVxuZXhwb3J0cy5yZWFkZGlyID0gcmVhZGRpcjtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlRmlsZVN5c3RlbUFkYXB0ZXIgPSBleHBvcnRzLkZJTEVfU1lTVEVNX0FEQVBURVIgPSB2b2lkIDA7XG5jb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcbmV4cG9ydHMuRklMRV9TWVNURU1fQURBUFRFUiA9IHtcbiAgICBsc3RhdDogZnMubHN0YXQsXG4gICAgc3RhdDogZnMuc3RhdCxcbiAgICBsc3RhdFN5bmM6IGZzLmxzdGF0U3luYyxcbiAgICBzdGF0U3luYzogZnMuc3RhdFN5bmMsXG4gICAgcmVhZGRpcjogZnMucmVhZGRpcixcbiAgICByZWFkZGlyU3luYzogZnMucmVhZGRpclN5bmNcbn07XG5mdW5jdGlvbiBjcmVhdGVGaWxlU3lzdGVtQWRhcHRlcihmc01ldGhvZHMpIHtcbiAgICBpZiAoZnNNZXRob2RzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuRklMRV9TWVNURU1fQURBUFRFUjtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZXhwb3J0cy5GSUxFX1NZU1RFTV9BREFQVEVSKSwgZnNNZXRob2RzKTtcbn1cbmV4cG9ydHMuY3JlYXRlRmlsZVN5c3RlbUFkYXB0ZXIgPSBjcmVhdGVGaWxlU3lzdGVtQWRhcHRlcjtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcbmNvbnN0IGZzU3RhdCA9IHJlcXVpcmUoXCJAbm9kZWxpYi9mcy5zdGF0XCIpO1xuY29uc3QgZnMgPSByZXF1aXJlKFwiLi9hZGFwdGVycy9mc1wiKTtcbmNsYXNzIFNldHRpbmdzIHtcbiAgICBjb25zdHJ1Y3Rvcihfb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBfb3B0aW9ucztcbiAgICAgICAgdGhpcy5mb2xsb3dTeW1ib2xpY0xpbmtzID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5mb2xsb3dTeW1ib2xpY0xpbmtzLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuZnMgPSBmcy5jcmVhdGVGaWxlU3lzdGVtQWRhcHRlcih0aGlzLl9vcHRpb25zLmZzKTtcbiAgICAgICAgdGhpcy5wYXRoU2VnbWVudFNlcGFyYXRvciA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMucGF0aFNlZ21lbnRTZXBhcmF0b3IsIHBhdGguc2VwKTtcbiAgICAgICAgdGhpcy5zdGF0cyA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuc3RhdHMsIGZhbHNlKTtcbiAgICAgICAgdGhpcy50aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbmsgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnRocm93RXJyb3JPbkJyb2tlblN5bWJvbGljTGluaywgdHJ1ZSk7XG4gICAgICAgIHRoaXMuZnNTdGF0U2V0dGluZ3MgPSBuZXcgZnNTdGF0LlNldHRpbmdzKHtcbiAgICAgICAgICAgIGZvbGxvd1N5bWJvbGljTGluazogdGhpcy5mb2xsb3dTeW1ib2xpY0xpbmtzLFxuICAgICAgICAgICAgZnM6IHRoaXMuZnMsXG4gICAgICAgICAgICB0aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbms6IHRoaXMudGhyb3dFcnJvck9uQnJva2VuU3ltYm9saWNMaW5rXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfZ2V0VmFsdWUob3B0aW9uLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gb3B0aW9uICE9PSBudWxsICYmIG9wdGlvbiAhPT0gdm9pZCAwID8gb3B0aW9uIDogdmFsdWU7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU2V0dGluZ3M7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNldHRpbmdzID0gZXhwb3J0cy5zY2FuZGlyU3luYyA9IGV4cG9ydHMuc2NhbmRpciA9IHZvaWQgMDtcbmNvbnN0IGFzeW5jID0gcmVxdWlyZShcIi4vcHJvdmlkZXJzL2FzeW5jXCIpO1xuY29uc3Qgc3luYyA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVycy9zeW5jXCIpO1xuY29uc3Qgc2V0dGluZ3NfMSA9IHJlcXVpcmUoXCIuL3NldHRpbmdzXCIpO1xuZXhwb3J0cy5TZXR0aW5ncyA9IHNldHRpbmdzXzEuZGVmYXVsdDtcbmZ1bmN0aW9uIHNjYW5kaXIocGF0aCwgb3B0aW9uc09yU2V0dGluZ3NPckNhbGxiYWNrLCBjYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9uc09yU2V0dGluZ3NPckNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGFzeW5jLnJlYWQocGF0aCwgZ2V0U2V0dGluZ3MoKSwgb3B0aW9uc09yU2V0dGluZ3NPckNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhc3luYy5yZWFkKHBhdGgsIGdldFNldHRpbmdzKG9wdGlvbnNPclNldHRpbmdzT3JDYWxsYmFjayksIGNhbGxiYWNrKTtcbn1cbmV4cG9ydHMuc2NhbmRpciA9IHNjYW5kaXI7XG5mdW5jdGlvbiBzY2FuZGlyU3luYyhwYXRoLCBvcHRpb25zT3JTZXR0aW5ncykge1xuICAgIGNvbnN0IHNldHRpbmdzID0gZ2V0U2V0dGluZ3Mob3B0aW9uc09yU2V0dGluZ3MpO1xuICAgIHJldHVybiBzeW5jLnJlYWQocGF0aCwgc2V0dGluZ3MpO1xufVxuZXhwb3J0cy5zY2FuZGlyU3luYyA9IHNjYW5kaXJTeW5jO1xuZnVuY3Rpb24gZ2V0U2V0dGluZ3Moc2V0dGluZ3NPck9wdGlvbnMgPSB7fSkge1xuICAgIGlmIChzZXR0aW5nc09yT3B0aW9ucyBpbnN0YW5jZW9mIHNldHRpbmdzXzEuZGVmYXVsdCkge1xuICAgICAgICByZXR1cm4gc2V0dGluZ3NPck9wdGlvbnM7XG4gICAgfVxuICAgIHJldHVybiBuZXcgc2V0dGluZ3NfMS5kZWZhdWx0KHNldHRpbmdzT3JPcHRpb25zKTtcbn1cbiIsICIndXNlIHN0cmljdCdcblxuZnVuY3Rpb24gcmV1c2lmeSAoQ29uc3RydWN0b3IpIHtcbiAgdmFyIGhlYWQgPSBuZXcgQ29uc3RydWN0b3IoKVxuICB2YXIgdGFpbCA9IGhlYWRcblxuICBmdW5jdGlvbiBnZXQgKCkge1xuICAgIHZhciBjdXJyZW50ID0gaGVhZFxuXG4gICAgaWYgKGN1cnJlbnQubmV4dCkge1xuICAgICAgaGVhZCA9IGN1cnJlbnQubmV4dFxuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkID0gbmV3IENvbnN0cnVjdG9yKClcbiAgICAgIHRhaWwgPSBoZWFkXG4gICAgfVxuXG4gICAgY3VycmVudC5uZXh0ID0gbnVsbFxuXG4gICAgcmV0dXJuIGN1cnJlbnRcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbGVhc2UgKG9iaikge1xuICAgIHRhaWwubmV4dCA9IG9ialxuICAgIHRhaWwgPSBvYmpcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0OiBnZXQsXG4gICAgcmVsZWFzZTogcmVsZWFzZVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmV1c2lmeVxuIiwgIid1c2Ugc3RyaWN0J1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby12YXIgKi9cblxudmFyIHJldXNpZnkgPSByZXF1aXJlKCdyZXVzaWZ5JylcblxuZnVuY3Rpb24gZmFzdHF1ZXVlIChjb250ZXh0LCB3b3JrZXIsIGNvbmN1cnJlbmN5KSB7XG4gIGlmICh0eXBlb2YgY29udGV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbmN1cnJlbmN5ID0gd29ya2VyXG4gICAgd29ya2VyID0gY29udGV4dFxuICAgIGNvbnRleHQgPSBudWxsXG4gIH1cblxuICBpZiAoY29uY3VycmVuY3kgPCAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdmYXN0cXVldWUgY29uY3VycmVuY3kgbXVzdCBiZSBncmVhdGVyIHRoYW4gMScpXG4gIH1cblxuICB2YXIgY2FjaGUgPSByZXVzaWZ5KFRhc2spXG4gIHZhciBxdWV1ZUhlYWQgPSBudWxsXG4gIHZhciBxdWV1ZVRhaWwgPSBudWxsXG4gIHZhciBfcnVubmluZyA9IDBcbiAgdmFyIGVycm9ySGFuZGxlciA9IG51bGxcblxuICB2YXIgc2VsZiA9IHtcbiAgICBwdXNoOiBwdXNoLFxuICAgIGRyYWluOiBub29wLFxuICAgIHNhdHVyYXRlZDogbm9vcCxcbiAgICBwYXVzZTogcGF1c2UsXG4gICAgcGF1c2VkOiBmYWxzZSxcbiAgICBjb25jdXJyZW5jeTogY29uY3VycmVuY3ksXG4gICAgcnVubmluZzogcnVubmluZyxcbiAgICByZXN1bWU6IHJlc3VtZSxcbiAgICBpZGxlOiBpZGxlLFxuICAgIGxlbmd0aDogbGVuZ3RoLFxuICAgIGdldFF1ZXVlOiBnZXRRdWV1ZSxcbiAgICB1bnNoaWZ0OiB1bnNoaWZ0LFxuICAgIGVtcHR5OiBub29wLFxuICAgIGtpbGw6IGtpbGwsXG4gICAga2lsbEFuZERyYWluOiBraWxsQW5kRHJhaW4sXG4gICAgZXJyb3I6IGVycm9yXG4gIH1cblxuICByZXR1cm4gc2VsZlxuXG4gIGZ1bmN0aW9uIHJ1bm5pbmcgKCkge1xuICAgIHJldHVybiBfcnVubmluZ1xuICB9XG5cbiAgZnVuY3Rpb24gcGF1c2UgKCkge1xuICAgIHNlbGYucGF1c2VkID0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gbGVuZ3RoICgpIHtcbiAgICB2YXIgY3VycmVudCA9IHF1ZXVlSGVhZFxuICAgIHZhciBjb3VudGVyID0gMFxuXG4gICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHRcbiAgICAgIGNvdW50ZXIrK1xuICAgIH1cblxuICAgIHJldHVybiBjb3VudGVyXG4gIH1cblxuICBmdW5jdGlvbiBnZXRRdWV1ZSAoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBxdWV1ZUhlYWRcbiAgICB2YXIgdGFza3MgPSBbXVxuXG4gICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgIHRhc2tzLnB1c2goY3VycmVudC52YWx1ZSlcbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHRcbiAgICB9XG5cbiAgICByZXR1cm4gdGFza3NcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc3VtZSAoKSB7XG4gICAgaWYgKCFzZWxmLnBhdXNlZCkgcmV0dXJuXG4gICAgc2VsZi5wYXVzZWQgPSBmYWxzZVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5jb25jdXJyZW5jeTsgaSsrKSB7XG4gICAgICBfcnVubmluZysrXG4gICAgICByZWxlYXNlKClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpZGxlICgpIHtcbiAgICByZXR1cm4gX3J1bm5pbmcgPT09IDAgJiYgc2VsZi5sZW5ndGgoKSA9PT0gMFxuICB9XG5cbiAgZnVuY3Rpb24gcHVzaCAodmFsdWUsIGRvbmUpIHtcbiAgICB2YXIgY3VycmVudCA9IGNhY2hlLmdldCgpXG5cbiAgICBjdXJyZW50LmNvbnRleHQgPSBjb250ZXh0XG4gICAgY3VycmVudC5yZWxlYXNlID0gcmVsZWFzZVxuICAgIGN1cnJlbnQudmFsdWUgPSB2YWx1ZVxuICAgIGN1cnJlbnQuY2FsbGJhY2sgPSBkb25lIHx8IG5vb3BcbiAgICBjdXJyZW50LmVycm9ySGFuZGxlciA9IGVycm9ySGFuZGxlclxuXG4gICAgaWYgKF9ydW5uaW5nID09PSBzZWxmLmNvbmN1cnJlbmN5IHx8IHNlbGYucGF1c2VkKSB7XG4gICAgICBpZiAocXVldWVUYWlsKSB7XG4gICAgICAgIHF1ZXVlVGFpbC5uZXh0ID0gY3VycmVudFxuICAgICAgICBxdWV1ZVRhaWwgPSBjdXJyZW50XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUhlYWQgPSBjdXJyZW50XG4gICAgICAgIHF1ZXVlVGFpbCA9IGN1cnJlbnRcbiAgICAgICAgc2VsZi5zYXR1cmF0ZWQoKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBfcnVubmluZysrXG4gICAgICB3b3JrZXIuY2FsbChjb250ZXh0LCBjdXJyZW50LnZhbHVlLCBjdXJyZW50LndvcmtlZClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1bnNoaWZ0ICh2YWx1ZSwgZG9uZSkge1xuICAgIHZhciBjdXJyZW50ID0gY2FjaGUuZ2V0KClcblxuICAgIGN1cnJlbnQuY29udGV4dCA9IGNvbnRleHRcbiAgICBjdXJyZW50LnJlbGVhc2UgPSByZWxlYXNlXG4gICAgY3VycmVudC52YWx1ZSA9IHZhbHVlXG4gICAgY3VycmVudC5jYWxsYmFjayA9IGRvbmUgfHwgbm9vcFxuXG4gICAgaWYgKF9ydW5uaW5nID09PSBzZWxmLmNvbmN1cnJlbmN5IHx8IHNlbGYucGF1c2VkKSB7XG4gICAgICBpZiAocXVldWVIZWFkKSB7XG4gICAgICAgIGN1cnJlbnQubmV4dCA9IHF1ZXVlSGVhZFxuICAgICAgICBxdWV1ZUhlYWQgPSBjdXJyZW50XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUhlYWQgPSBjdXJyZW50XG4gICAgICAgIHF1ZXVlVGFpbCA9IGN1cnJlbnRcbiAgICAgICAgc2VsZi5zYXR1cmF0ZWQoKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBfcnVubmluZysrXG4gICAgICB3b3JrZXIuY2FsbChjb250ZXh0LCBjdXJyZW50LnZhbHVlLCBjdXJyZW50LndvcmtlZClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWxlYXNlIChob2xkZXIpIHtcbiAgICBpZiAoaG9sZGVyKSB7XG4gICAgICBjYWNoZS5yZWxlYXNlKGhvbGRlcilcbiAgICB9XG4gICAgdmFyIG5leHQgPSBxdWV1ZUhlYWRcbiAgICBpZiAobmV4dCkge1xuICAgICAgaWYgKCFzZWxmLnBhdXNlZCkge1xuICAgICAgICBpZiAocXVldWVUYWlsID09PSBxdWV1ZUhlYWQpIHtcbiAgICAgICAgICBxdWV1ZVRhaWwgPSBudWxsXG4gICAgICAgIH1cbiAgICAgICAgcXVldWVIZWFkID0gbmV4dC5uZXh0XG4gICAgICAgIG5leHQubmV4dCA9IG51bGxcbiAgICAgICAgd29ya2VyLmNhbGwoY29udGV4dCwgbmV4dC52YWx1ZSwgbmV4dC53b3JrZWQpXG4gICAgICAgIGlmIChxdWV1ZVRhaWwgPT09IG51bGwpIHtcbiAgICAgICAgICBzZWxmLmVtcHR5KClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3J1bm5pbmctLVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoLS1fcnVubmluZyA9PT0gMCkge1xuICAgICAgc2VsZi5kcmFpbigpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24ga2lsbCAoKSB7XG4gICAgcXVldWVIZWFkID0gbnVsbFxuICAgIHF1ZXVlVGFpbCA9IG51bGxcbiAgICBzZWxmLmRyYWluID0gbm9vcFxuICB9XG5cbiAgZnVuY3Rpb24ga2lsbEFuZERyYWluICgpIHtcbiAgICBxdWV1ZUhlYWQgPSBudWxsXG4gICAgcXVldWVUYWlsID0gbnVsbFxuICAgIHNlbGYuZHJhaW4oKVxuICAgIHNlbGYuZHJhaW4gPSBub29wXG4gIH1cblxuICBmdW5jdGlvbiBlcnJvciAoaGFuZGxlcikge1xuICAgIGVycm9ySGFuZGxlciA9IGhhbmRsZXJcbiAgfVxufVxuXG5mdW5jdGlvbiBub29wICgpIHt9XG5cbmZ1bmN0aW9uIFRhc2sgKCkge1xuICB0aGlzLnZhbHVlID0gbnVsbFxuICB0aGlzLmNhbGxiYWNrID0gbm9vcFxuICB0aGlzLm5leHQgPSBudWxsXG4gIHRoaXMucmVsZWFzZSA9IG5vb3BcbiAgdGhpcy5jb250ZXh0ID0gbnVsbFxuICB0aGlzLmVycm9ySGFuZGxlciA9IG51bGxcblxuICB2YXIgc2VsZiA9IHRoaXNcblxuICB0aGlzLndvcmtlZCA9IGZ1bmN0aW9uIHdvcmtlZCAoZXJyLCByZXN1bHQpIHtcbiAgICB2YXIgY2FsbGJhY2sgPSBzZWxmLmNhbGxiYWNrXG4gICAgdmFyIGVycm9ySGFuZGxlciA9IHNlbGYuZXJyb3JIYW5kbGVyXG4gICAgdmFyIHZhbCA9IHNlbGYudmFsdWVcbiAgICBzZWxmLnZhbHVlID0gbnVsbFxuICAgIHNlbGYuY2FsbGJhY2sgPSBub29wXG4gICAgaWYgKHNlbGYuZXJyb3JIYW5kbGVyKSB7XG4gICAgICBlcnJvckhhbmRsZXIoZXJyLCB2YWwpXG4gICAgfVxuICAgIGNhbGxiYWNrLmNhbGwoc2VsZi5jb250ZXh0LCBlcnIsIHJlc3VsdClcbiAgICBzZWxmLnJlbGVhc2Uoc2VsZilcbiAgfVxufVxuXG5mdW5jdGlvbiBxdWV1ZUFzUHJvbWlzZWQgKGNvbnRleHQsIHdvcmtlciwgY29uY3VycmVuY3kpIHtcbiAgaWYgKHR5cGVvZiBjb250ZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uY3VycmVuY3kgPSB3b3JrZXJcbiAgICB3b3JrZXIgPSBjb250ZXh0XG4gICAgY29udGV4dCA9IG51bGxcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzeW5jV3JhcHBlciAoYXJnLCBjYikge1xuICAgIHdvcmtlci5jYWxsKHRoaXMsIGFyZylcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgY2IobnVsbCwgcmVzKVxuICAgICAgfSwgY2IpXG4gIH1cblxuICB2YXIgcXVldWUgPSBmYXN0cXVldWUoY29udGV4dCwgYXN5bmNXcmFwcGVyLCBjb25jdXJyZW5jeSlcblxuICB2YXIgcHVzaENiID0gcXVldWUucHVzaFxuICB2YXIgdW5zaGlmdENiID0gcXVldWUudW5zaGlmdFxuXG4gIHF1ZXVlLnB1c2ggPSBwdXNoXG4gIHF1ZXVlLnVuc2hpZnQgPSB1bnNoaWZ0XG4gIHF1ZXVlLmRyYWluZWQgPSBkcmFpbmVkXG5cbiAgcmV0dXJuIHF1ZXVlXG5cbiAgZnVuY3Rpb24gcHVzaCAodmFsdWUpIHtcbiAgICB2YXIgcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHB1c2hDYih2YWx1ZSwgZnVuY3Rpb24gKGVyciwgcmVzdWx0KSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUocmVzdWx0KVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgLy8gTGV0J3MgZm9yayB0aGUgcHJvbWlzZSBjaGFpbiB0b1xuICAgIC8vIG1ha2UgdGhlIGVycm9yIGJ1YmJsZSB1cCB0byB0aGUgdXNlciBidXRcbiAgICAvLyBub3QgbGVhZCB0byBhIHVuaGFuZGxlZFJlamVjdGlvblxuICAgIHAuY2F0Y2gobm9vcClcblxuICAgIHJldHVybiBwXG4gIH1cblxuICBmdW5jdGlvbiB1bnNoaWZ0ICh2YWx1ZSkge1xuICAgIHZhciBwID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdW5zaGlmdENiKHZhbHVlLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICAvLyBMZXQncyBmb3JrIHRoZSBwcm9taXNlIGNoYWluIHRvXG4gICAgLy8gbWFrZSB0aGUgZXJyb3IgYnViYmxlIHVwIHRvIHRoZSB1c2VyIGJ1dFxuICAgIC8vIG5vdCBsZWFkIHRvIGEgdW5oYW5kbGVkUmVqZWN0aW9uXG4gICAgcC5jYXRjaChub29wKVxuXG4gICAgcmV0dXJuIHBcbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYWluZWQgKCkge1xuICAgIHZhciBwcmV2aW91c0RyYWluID0gcXVldWUuZHJhaW5cblxuICAgIHZhciBwID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHF1ZXVlLmRyYWluID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBwcmV2aW91c0RyYWluKClcbiAgICAgICAgcmVzb2x2ZSgpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHJldHVybiBwXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmYXN0cXVldWVcbm1vZHVsZS5leHBvcnRzLnByb21pc2UgPSBxdWV1ZUFzUHJvbWlzZWRcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuam9pblBhdGhTZWdtZW50cyA9IGV4cG9ydHMucmVwbGFjZVBhdGhTZWdtZW50U2VwYXJhdG9yID0gZXhwb3J0cy5pc0FwcGxpZWRGaWx0ZXIgPSBleHBvcnRzLmlzRmF0YWxFcnJvciA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzRmF0YWxFcnJvcihzZXR0aW5ncywgZXJyb3IpIHtcbiAgICBpZiAoc2V0dGluZ3MuZXJyb3JGaWx0ZXIgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiAhc2V0dGluZ3MuZXJyb3JGaWx0ZXIoZXJyb3IpO1xufVxuZXhwb3J0cy5pc0ZhdGFsRXJyb3IgPSBpc0ZhdGFsRXJyb3I7XG5mdW5jdGlvbiBpc0FwcGxpZWRGaWx0ZXIoZmlsdGVyLCB2YWx1ZSkge1xuICAgIHJldHVybiBmaWx0ZXIgPT09IG51bGwgfHwgZmlsdGVyKHZhbHVlKTtcbn1cbmV4cG9ydHMuaXNBcHBsaWVkRmlsdGVyID0gaXNBcHBsaWVkRmlsdGVyO1xuZnVuY3Rpb24gcmVwbGFjZVBhdGhTZWdtZW50U2VwYXJhdG9yKGZpbGVwYXRoLCBzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gZmlsZXBhdGguc3BsaXQoL1svXFxcXF0vKS5qb2luKHNlcGFyYXRvcik7XG59XG5leHBvcnRzLnJlcGxhY2VQYXRoU2VnbWVudFNlcGFyYXRvciA9IHJlcGxhY2VQYXRoU2VnbWVudFNlcGFyYXRvcjtcbmZ1bmN0aW9uIGpvaW5QYXRoU2VnbWVudHMoYSwgYiwgc2VwYXJhdG9yKSB7XG4gICAgaWYgKGEgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiBiO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY29ycmVjdCBoYW5kbGluZyBvZiBjYXNlcyB3aGVuIHRoZSBmaXJzdCBzZWdtZW50IGlzIGEgcm9vdCAoYC9gLCBgQzovYCkgb3IgVU5DIHBhdGggKGAvLz8vQzovYCkuXG4gICAgICovXG4gICAgaWYgKGEuZW5kc1dpdGgoc2VwYXJhdG9yKSkge1xuICAgICAgICByZXR1cm4gYSArIGI7XG4gICAgfVxuICAgIHJldHVybiBhICsgc2VwYXJhdG9yICsgYjtcbn1cbmV4cG9ydHMuam9pblBhdGhTZWdtZW50cyA9IGpvaW5QYXRoU2VnbWVudHM7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb21tb24gPSByZXF1aXJlKFwiLi9jb21tb25cIik7XG5jbGFzcyBSZWFkZXIge1xuICAgIGNvbnN0cnVjdG9yKF9yb290LCBfc2V0dGluZ3MpIHtcbiAgICAgICAgdGhpcy5fcm9vdCA9IF9yb290O1xuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IF9zZXR0aW5ncztcbiAgICAgICAgdGhpcy5fcm9vdCA9IGNvbW1vbi5yZXBsYWNlUGF0aFNlZ21lbnRTZXBhcmF0b3IoX3Jvb3QsIF9zZXR0aW5ncy5wYXRoU2VnbWVudFNlcGFyYXRvcik7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gUmVhZGVyO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZXZlbnRzXzEgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuY29uc3QgZnNTY2FuZGlyID0gcmVxdWlyZShcIkBub2RlbGliL2ZzLnNjYW5kaXJcIik7XG5jb25zdCBmYXN0cSA9IHJlcXVpcmUoXCJmYXN0cVwiKTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoXCIuL2NvbW1vblwiKTtcbmNvbnN0IHJlYWRlcl8xID0gcmVxdWlyZShcIi4vcmVhZGVyXCIpO1xuY2xhc3MgQXN5bmNSZWFkZXIgZXh0ZW5kcyByZWFkZXJfMS5kZWZhdWx0IHtcbiAgICBjb25zdHJ1Y3Rvcihfcm9vdCwgX3NldHRpbmdzKSB7XG4gICAgICAgIHN1cGVyKF9yb290LCBfc2V0dGluZ3MpO1xuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IF9zZXR0aW5ncztcbiAgICAgICAgdGhpcy5fc2NhbmRpciA9IGZzU2NhbmRpci5zY2FuZGlyO1xuICAgICAgICB0aGlzLl9lbWl0dGVyID0gbmV3IGV2ZW50c18xLkV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLl9xdWV1ZSA9IGZhc3RxKHRoaXMuX3dvcmtlci5iaW5kKHRoaXMpLCB0aGlzLl9zZXR0aW5ncy5jb25jdXJyZW5jeSk7XG4gICAgICAgIHRoaXMuX2lzRmF0YWxFcnJvciA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9xdWV1ZS5kcmFpbiA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5faXNGYXRhbEVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KCdlbmQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmVhZCgpIHtcbiAgICAgICAgdGhpcy5faXNGYXRhbEVycm9yID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lzRGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIHNldEltbWVkaWF0ZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9wdXNoVG9RdWV1ZSh0aGlzLl9yb290LCB0aGlzLl9zZXR0aW5ncy5iYXNlUGF0aCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5fZW1pdHRlcjtcbiAgICB9XG4gICAgZ2V0IGlzRGVzdHJveWVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNEZXN0cm95ZWQ7XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcmVhZGVyIGlzIGFscmVhZHkgZGVzdHJveWVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9xdWV1ZS5raWxsQW5kRHJhaW4oKTtcbiAgICB9XG4gICAgb25FbnRyeShjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9lbWl0dGVyLm9uKCdlbnRyeScsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgb25FcnJvcihjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9lbWl0dGVyLm9uY2UoJ2Vycm9yJywgY2FsbGJhY2spO1xuICAgIH1cbiAgICBvbkVuZChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9lbWl0dGVyLm9uY2UoJ2VuZCcsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgX3B1c2hUb1F1ZXVlKGRpcmVjdG9yeSwgYmFzZSkge1xuICAgICAgICBjb25zdCBxdWV1ZUl0ZW0gPSB7IGRpcmVjdG9yeSwgYmFzZSB9O1xuICAgICAgICB0aGlzLl9xdWV1ZS5wdXNoKHF1ZXVlSXRlbSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfd29ya2VyKGl0ZW0sIGRvbmUpIHtcbiAgICAgICAgdGhpcy5fc2NhbmRpcihpdGVtLmRpcmVjdG9yeSwgdGhpcy5fc2V0dGluZ3MuZnNTY2FuZGlyU2V0dGluZ3MsIChlcnJvciwgZW50cmllcykgPT4ge1xuICAgICAgICAgICAgaWYgKGVycm9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZG9uZShlcnJvciwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVFbnRyeShlbnRyeSwgaXRlbS5iYXNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvbmUobnVsbCwgdW5kZWZpbmVkKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9oYW5kbGVFcnJvcihlcnJvcikge1xuICAgICAgICBpZiAodGhpcy5faXNEZXN0cm95ZWQgfHwgIWNvbW1vbi5pc0ZhdGFsRXJyb3IodGhpcy5fc2V0dGluZ3MsIGVycm9yKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzRmF0YWxFcnJvciA9IHRydWU7XG4gICAgICAgIHRoaXMuX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KCdlcnJvcicsIGVycm9yKTtcbiAgICB9XG4gICAgX2hhbmRsZUVudHJ5KGVudHJ5LCBiYXNlKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0Rlc3Ryb3llZCB8fCB0aGlzLl9pc0ZhdGFsRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmdWxscGF0aCA9IGVudHJ5LnBhdGg7XG4gICAgICAgIGlmIChiYXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGVudHJ5LnBhdGggPSBjb21tb24uam9pblBhdGhTZWdtZW50cyhiYXNlLCBlbnRyeS5uYW1lLCB0aGlzLl9zZXR0aW5ncy5wYXRoU2VnbWVudFNlcGFyYXRvcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbW1vbi5pc0FwcGxpZWRGaWx0ZXIodGhpcy5fc2V0dGluZ3MuZW50cnlGaWx0ZXIsIGVudHJ5KSkge1xuICAgICAgICAgICAgdGhpcy5fZW1pdEVudHJ5KGVudHJ5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW50cnkuZGlyZW50LmlzRGlyZWN0b3J5KCkgJiYgY29tbW9uLmlzQXBwbGllZEZpbHRlcih0aGlzLl9zZXR0aW5ncy5kZWVwRmlsdGVyLCBlbnRyeSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3B1c2hUb1F1ZXVlKGZ1bGxwYXRoLCBiYXNlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBlbnRyeS5wYXRoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfZW1pdEVudHJ5KGVudHJ5KSB7XG4gICAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdCgnZW50cnknLCBlbnRyeSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gQXN5bmNSZWFkZXI7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBhc3luY18xID0gcmVxdWlyZShcIi4uL3JlYWRlcnMvYXN5bmNcIik7XG5jbGFzcyBBc3luY1Byb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihfcm9vdCwgX3NldHRpbmdzKSB7XG4gICAgICAgIHRoaXMuX3Jvb3QgPSBfcm9vdDtcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBfc2V0dGluZ3M7XG4gICAgICAgIHRoaXMuX3JlYWRlciA9IG5ldyBhc3luY18xLmRlZmF1bHQodGhpcy5fcm9vdCwgdGhpcy5fc2V0dGluZ3MpO1xuICAgICAgICB0aGlzLl9zdG9yYWdlID0gW107XG4gICAgfVxuICAgIHJlYWQoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fcmVhZGVyLm9uRXJyb3IoKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBjYWxsRmFpbHVyZUNhbGxiYWNrKGNhbGxiYWNrLCBlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9yZWFkZXIub25FbnRyeSgoZW50cnkpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3N0b3JhZ2UucHVzaChlbnRyeSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9yZWFkZXIub25FbmQoKCkgPT4ge1xuICAgICAgICAgICAgY2FsbFN1Y2Nlc3NDYWxsYmFjayhjYWxsYmFjaywgdGhpcy5fc3RvcmFnZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9yZWFkZXIucmVhZCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEFzeW5jUHJvdmlkZXI7XG5mdW5jdGlvbiBjYWxsRmFpbHVyZUNhbGxiYWNrKGNhbGxiYWNrLCBlcnJvcikge1xuICAgIGNhbGxiYWNrKGVycm9yKTtcbn1cbmZ1bmN0aW9uIGNhbGxTdWNjZXNzQ2FsbGJhY2soY2FsbGJhY2ssIGVudHJpZXMpIHtcbiAgICBjYWxsYmFjayhudWxsLCBlbnRyaWVzKTtcbn1cbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHN0cmVhbV8xID0gcmVxdWlyZShcInN0cmVhbVwiKTtcbmNvbnN0IGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vcmVhZGVycy9hc3luY1wiKTtcbmNsYXNzIFN0cmVhbVByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihfcm9vdCwgX3NldHRpbmdzKSB7XG4gICAgICAgIHRoaXMuX3Jvb3QgPSBfcm9vdDtcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBfc2V0dGluZ3M7XG4gICAgICAgIHRoaXMuX3JlYWRlciA9IG5ldyBhc3luY18xLmRlZmF1bHQodGhpcy5fcm9vdCwgdGhpcy5fc2V0dGluZ3MpO1xuICAgICAgICB0aGlzLl9zdHJlYW0gPSBuZXcgc3RyZWFtXzEuUmVhZGFibGUoe1xuICAgICAgICAgICAgb2JqZWN0TW9kZTogdHJ1ZSxcbiAgICAgICAgICAgIHJlYWQ6ICgpID0+IHsgfSxcbiAgICAgICAgICAgIGRlc3Ryb3k6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3JlYWRlci5pc0Rlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkZXIuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlYWQoKSB7XG4gICAgICAgIHRoaXMuX3JlYWRlci5vbkVycm9yKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fcmVhZGVyLm9uRW50cnkoKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9zdHJlYW0ucHVzaChlbnRyeSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9yZWFkZXIub25FbmQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc3RyZWFtLnB1c2gobnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9yZWFkZXIucmVhZCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RyZWFtO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFN0cmVhbVByb3ZpZGVyO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZnNTY2FuZGlyID0gcmVxdWlyZShcIkBub2RlbGliL2ZzLnNjYW5kaXJcIik7XG5jb25zdCBjb21tb24gPSByZXF1aXJlKFwiLi9jb21tb25cIik7XG5jb25zdCByZWFkZXJfMSA9IHJlcXVpcmUoXCIuL3JlYWRlclwiKTtcbmNsYXNzIFN5bmNSZWFkZXIgZXh0ZW5kcyByZWFkZXJfMS5kZWZhdWx0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5fc2NhbmRpciA9IGZzU2NhbmRpci5zY2FuZGlyU3luYztcbiAgICAgICAgdGhpcy5fc3RvcmFnZSA9IFtdO1xuICAgICAgICB0aGlzLl9xdWV1ZSA9IG5ldyBTZXQoKTtcbiAgICB9XG4gICAgcmVhZCgpIHtcbiAgICAgICAgdGhpcy5fcHVzaFRvUXVldWUodGhpcy5fcm9vdCwgdGhpcy5fc2V0dGluZ3MuYmFzZVBhdGgpO1xuICAgICAgICB0aGlzLl9oYW5kbGVRdWV1ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RvcmFnZTtcbiAgICB9XG4gICAgX3B1c2hUb1F1ZXVlKGRpcmVjdG9yeSwgYmFzZSkge1xuICAgICAgICB0aGlzLl9xdWV1ZS5hZGQoeyBkaXJlY3RvcnksIGJhc2UgfSk7XG4gICAgfVxuICAgIF9oYW5kbGVRdWV1ZSgpIHtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMuX3F1ZXVlLnZhbHVlcygpKSB7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVEaXJlY3RvcnkoaXRlbS5kaXJlY3RvcnksIGl0ZW0uYmFzZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2hhbmRsZURpcmVjdG9yeShkaXJlY3RvcnksIGJhc2UpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSB0aGlzLl9zY2FuZGlyKGRpcmVjdG9yeSwgdGhpcy5fc2V0dGluZ3MuZnNTY2FuZGlyU2V0dGluZ3MpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlRW50cnkoZW50cnksIGJhc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9oYW5kbGVFcnJvcihlcnJvcikge1xuICAgICAgICBpZiAoIWNvbW1vbi5pc0ZhdGFsRXJyb3IodGhpcy5fc2V0dGluZ3MsIGVycm9yKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBfaGFuZGxlRW50cnkoZW50cnksIGJhc2UpIHtcbiAgICAgICAgY29uc3QgZnVsbHBhdGggPSBlbnRyeS5wYXRoO1xuICAgICAgICBpZiAoYmFzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBlbnRyeS5wYXRoID0gY29tbW9uLmpvaW5QYXRoU2VnbWVudHMoYmFzZSwgZW50cnkubmFtZSwgdGhpcy5fc2V0dGluZ3MucGF0aFNlZ21lbnRTZXBhcmF0b3IpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21tb24uaXNBcHBsaWVkRmlsdGVyKHRoaXMuX3NldHRpbmdzLmVudHJ5RmlsdGVyLCBlbnRyeSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3B1c2hUb1N0b3JhZ2UoZW50cnkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbnRyeS5kaXJlbnQuaXNEaXJlY3RvcnkoKSAmJiBjb21tb24uaXNBcHBsaWVkRmlsdGVyKHRoaXMuX3NldHRpbmdzLmRlZXBGaWx0ZXIsIGVudHJ5KSkge1xuICAgICAgICAgICAgdGhpcy5fcHVzaFRvUXVldWUoZnVsbHBhdGgsIGJhc2UgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGVudHJ5LnBhdGgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9wdXNoVG9TdG9yYWdlKGVudHJ5KSB7XG4gICAgICAgIHRoaXMuX3N0b3JhZ2UucHVzaChlbnRyeSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU3luY1JlYWRlcjtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHN5bmNfMSA9IHJlcXVpcmUoXCIuLi9yZWFkZXJzL3N5bmNcIik7XG5jbGFzcyBTeW5jUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKF9yb290LCBfc2V0dGluZ3MpIHtcbiAgICAgICAgdGhpcy5fcm9vdCA9IF9yb290O1xuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IF9zZXR0aW5ncztcbiAgICAgICAgdGhpcy5fcmVhZGVyID0gbmV3IHN5bmNfMS5kZWZhdWx0KHRoaXMuX3Jvb3QsIHRoaXMuX3NldHRpbmdzKTtcbiAgICB9XG4gICAgcmVhZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlYWRlci5yZWFkKCk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU3luY1Byb3ZpZGVyO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY29uc3QgZnNTY2FuZGlyID0gcmVxdWlyZShcIkBub2RlbGliL2ZzLnNjYW5kaXJcIik7XG5jbGFzcyBTZXR0aW5ncyB7XG4gICAgY29uc3RydWN0b3IoX29wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gX29wdGlvbnM7XG4gICAgICAgIHRoaXMuYmFzZVBhdGggPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmJhc2VQYXRoLCB1bmRlZmluZWQpO1xuICAgICAgICB0aGlzLmNvbmN1cnJlbmN5ID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5jb25jdXJyZW5jeSwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKTtcbiAgICAgICAgdGhpcy5kZWVwRmlsdGVyID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5kZWVwRmlsdGVyLCBudWxsKTtcbiAgICAgICAgdGhpcy5lbnRyeUZpbHRlciA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuZW50cnlGaWx0ZXIsIG51bGwpO1xuICAgICAgICB0aGlzLmVycm9yRmlsdGVyID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5lcnJvckZpbHRlciwgbnVsbCk7XG4gICAgICAgIHRoaXMucGF0aFNlZ21lbnRTZXBhcmF0b3IgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLnBhdGhTZWdtZW50U2VwYXJhdG9yLCBwYXRoLnNlcCk7XG4gICAgICAgIHRoaXMuZnNTY2FuZGlyU2V0dGluZ3MgPSBuZXcgZnNTY2FuZGlyLlNldHRpbmdzKHtcbiAgICAgICAgICAgIGZvbGxvd1N5bWJvbGljTGlua3M6IHRoaXMuX29wdGlvbnMuZm9sbG93U3ltYm9saWNMaW5rcyxcbiAgICAgICAgICAgIGZzOiB0aGlzLl9vcHRpb25zLmZzLFxuICAgICAgICAgICAgcGF0aFNlZ21lbnRTZXBhcmF0b3I6IHRoaXMuX29wdGlvbnMucGF0aFNlZ21lbnRTZXBhcmF0b3IsXG4gICAgICAgICAgICBzdGF0czogdGhpcy5fb3B0aW9ucy5zdGF0cyxcbiAgICAgICAgICAgIHRocm93RXJyb3JPbkJyb2tlblN5bWJvbGljTGluazogdGhpcy5fb3B0aW9ucy50aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbmtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9nZXRWYWx1ZShvcHRpb24sIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBvcHRpb24gIT09IG51bGwgJiYgb3B0aW9uICE9PSB2b2lkIDAgPyBvcHRpb24gOiB2YWx1ZTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTZXR0aW5ncztcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2V0dGluZ3MgPSBleHBvcnRzLndhbGtTdHJlYW0gPSBleHBvcnRzLndhbGtTeW5jID0gZXhwb3J0cy53YWxrID0gdm9pZCAwO1xuY29uc3QgYXN5bmNfMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVycy9hc3luY1wiKTtcbmNvbnN0IHN0cmVhbV8xID0gcmVxdWlyZShcIi4vcHJvdmlkZXJzL3N0cmVhbVwiKTtcbmNvbnN0IHN5bmNfMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVycy9zeW5jXCIpO1xuY29uc3Qgc2V0dGluZ3NfMSA9IHJlcXVpcmUoXCIuL3NldHRpbmdzXCIpO1xuZXhwb3J0cy5TZXR0aW5ncyA9IHNldHRpbmdzXzEuZGVmYXVsdDtcbmZ1bmN0aW9uIHdhbGsoZGlyZWN0b3J5LCBvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2ssIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zT3JTZXR0aW5nc09yQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbmV3IGFzeW5jXzEuZGVmYXVsdChkaXJlY3RvcnksIGdldFNldHRpbmdzKCkpLnJlYWQob3B0aW9uc09yU2V0dGluZ3NPckNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBuZXcgYXN5bmNfMS5kZWZhdWx0KGRpcmVjdG9yeSwgZ2V0U2V0dGluZ3Mob3B0aW9uc09yU2V0dGluZ3NPckNhbGxiYWNrKSkucmVhZChjYWxsYmFjayk7XG59XG5leHBvcnRzLndhbGsgPSB3YWxrO1xuZnVuY3Rpb24gd2Fsa1N5bmMoZGlyZWN0b3J5LCBvcHRpb25zT3JTZXR0aW5ncykge1xuICAgIGNvbnN0IHNldHRpbmdzID0gZ2V0U2V0dGluZ3Mob3B0aW9uc09yU2V0dGluZ3MpO1xuICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IHN5bmNfMS5kZWZhdWx0KGRpcmVjdG9yeSwgc2V0dGluZ3MpO1xuICAgIHJldHVybiBwcm92aWRlci5yZWFkKCk7XG59XG5leHBvcnRzLndhbGtTeW5jID0gd2Fsa1N5bmM7XG5mdW5jdGlvbiB3YWxrU3RyZWFtKGRpcmVjdG9yeSwgb3B0aW9uc09yU2V0dGluZ3MpIHtcbiAgICBjb25zdCBzZXR0aW5ncyA9IGdldFNldHRpbmdzKG9wdGlvbnNPclNldHRpbmdzKTtcbiAgICBjb25zdCBwcm92aWRlciA9IG5ldyBzdHJlYW1fMS5kZWZhdWx0KGRpcmVjdG9yeSwgc2V0dGluZ3MpO1xuICAgIHJldHVybiBwcm92aWRlci5yZWFkKCk7XG59XG5leHBvcnRzLndhbGtTdHJlYW0gPSB3YWxrU3RyZWFtO1xuZnVuY3Rpb24gZ2V0U2V0dGluZ3Moc2V0dGluZ3NPck9wdGlvbnMgPSB7fSkge1xuICAgIGlmIChzZXR0aW5nc09yT3B0aW9ucyBpbnN0YW5jZW9mIHNldHRpbmdzXzEuZGVmYXVsdCkge1xuICAgICAgICByZXR1cm4gc2V0dGluZ3NPck9wdGlvbnM7XG4gICAgfVxuICAgIHJldHVybiBuZXcgc2V0dGluZ3NfMS5kZWZhdWx0KHNldHRpbmdzT3JPcHRpb25zKTtcbn1cbiIsICJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XHJcbmNvbnN0IGZzU3RhdCA9IHJlcXVpcmUoXCJAbm9kZWxpYi9mcy5zdGF0XCIpO1xyXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcclxuY2xhc3MgUmVhZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKF9zZXR0aW5ncykge1xyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gX3NldHRpbmdzO1xyXG4gICAgICAgIHRoaXMuX2ZzU3RhdFNldHRpbmdzID0gbmV3IGZzU3RhdC5TZXR0aW5ncyh7XHJcbiAgICAgICAgICAgIGZvbGxvd1N5bWJvbGljTGluazogdGhpcy5fc2V0dGluZ3MuZm9sbG93U3ltYm9saWNMaW5rcyxcclxuICAgICAgICAgICAgZnM6IHRoaXMuX3NldHRpbmdzLmZzLFxyXG4gICAgICAgICAgICB0aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbms6IHRoaXMuX3NldHRpbmdzLmZvbGxvd1N5bWJvbGljTGlua3NcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIF9nZXRGdWxsRW50cnlQYXRoKGZpbGVwYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdGgucmVzb2x2ZSh0aGlzLl9zZXR0aW5ncy5jd2QsIGZpbGVwYXRoKTtcclxuICAgIH1cclxuICAgIF9tYWtlRW50cnkoc3RhdHMsIHBhdHRlcm4pIHtcclxuICAgICAgICBjb25zdCBlbnRyeSA9IHtcclxuICAgICAgICAgICAgbmFtZTogcGF0dGVybixcclxuICAgICAgICAgICAgcGF0aDogcGF0dGVybixcclxuICAgICAgICAgICAgZGlyZW50OiB1dGlscy5mcy5jcmVhdGVEaXJlbnRGcm9tU3RhdHMocGF0dGVybiwgc3RhdHMpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3Muc3RhdHMpIHtcclxuICAgICAgICAgICAgZW50cnkuc3RhdHMgPSBzdGF0cztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVudHJ5O1xyXG4gICAgfVxyXG4gICAgX2lzRmF0YWxFcnJvcihlcnJvcikge1xyXG4gICAgICAgIHJldHVybiAhdXRpbHMuZXJybm8uaXNFbm9lbnRDb2RlRXJyb3IoZXJyb3IpICYmICF0aGlzLl9zZXR0aW5ncy5zdXBwcmVzc0Vycm9ycztcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBSZWFkZXI7XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBzdHJlYW1fMSA9IHJlcXVpcmUoXCJzdHJlYW1cIik7XHJcbmNvbnN0IGZzU3RhdCA9IHJlcXVpcmUoXCJAbm9kZWxpYi9mcy5zdGF0XCIpO1xyXG5jb25zdCBmc1dhbGsgPSByZXF1aXJlKFwiQG5vZGVsaWIvZnMud2Fsa1wiKTtcclxuY29uc3QgcmVhZGVyXzEgPSByZXF1aXJlKFwiLi9yZWFkZXJcIik7XHJcbmNsYXNzIFJlYWRlclN0cmVhbSBleHRlbmRzIHJlYWRlcl8xLmRlZmF1bHQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLl93YWxrU3RyZWFtID0gZnNXYWxrLndhbGtTdHJlYW07XHJcbiAgICAgICAgdGhpcy5fc3RhdCA9IGZzU3RhdC5zdGF0O1xyXG4gICAgfVxyXG4gICAgZHluYW1pYyhyb290LCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dhbGtTdHJlYW0ocm9vdCwgb3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMocGF0dGVybnMsIG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBmaWxlcGF0aHMgPSBwYXR0ZXJucy5tYXAodGhpcy5fZ2V0RnVsbEVudHJ5UGF0aCwgdGhpcyk7XHJcbiAgICAgICAgY29uc3Qgc3RyZWFtID0gbmV3IHN0cmVhbV8xLlBhc3NUaHJvdWdoKHsgb2JqZWN0TW9kZTogdHJ1ZSB9KTtcclxuICAgICAgICBzdHJlYW0uX3dyaXRlID0gKGluZGV4LCBfZW5jLCBkb25lKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRFbnRyeShmaWxlcGF0aHNbaW5kZXhdLCBwYXR0ZXJuc1tpbmRleF0sIG9wdGlvbnMpXHJcbiAgICAgICAgICAgICAgICAudGhlbigoZW50cnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlbnRyeSAhPT0gbnVsbCAmJiBvcHRpb25zLmVudHJ5RmlsdGVyKGVudHJ5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbS5wdXNoKGVudHJ5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gZmlsZXBhdGhzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJlYW0uZW5kKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkb25lKCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZG9uZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVwYXRocy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBzdHJlYW0ud3JpdGUoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdHJlYW07XHJcbiAgICB9XHJcbiAgICBfZ2V0RW50cnkoZmlsZXBhdGgsIHBhdHRlcm4sIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0U3RhdChmaWxlcGF0aClcclxuICAgICAgICAgICAgLnRoZW4oKHN0YXRzKSA9PiB0aGlzLl9tYWtlRW50cnkoc3RhdHMsIHBhdHRlcm4pKVxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmVycm9yRmlsdGVyKGVycm9yKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBfZ2V0U3RhdChmaWxlcGF0aCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0YXQoZmlsZXBhdGgsIHRoaXMuX2ZzU3RhdFNldHRpbmdzLCAoZXJyb3IsIHN0YXRzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3IgPT09IG51bGwgPyByZXNvbHZlKHN0YXRzKSA6IHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IFJlYWRlclN0cmVhbTtcclxuIiwgIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGZzV2FsayA9IHJlcXVpcmUoXCJAbm9kZWxpYi9mcy53YWxrXCIpO1xyXG5jb25zdCByZWFkZXJfMSA9IHJlcXVpcmUoXCIuL3JlYWRlclwiKTtcclxuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwiLi9zdHJlYW1cIik7XHJcbmNsYXNzIFJlYWRlckFzeW5jIGV4dGVuZHMgcmVhZGVyXzEuZGVmYXVsdCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMuX3dhbGtBc3luYyA9IGZzV2Fsay53YWxrO1xyXG4gICAgICAgIHRoaXMuX3JlYWRlclN0cmVhbSA9IG5ldyBzdHJlYW1fMS5kZWZhdWx0KHRoaXMuX3NldHRpbmdzKTtcclxuICAgIH1cclxuICAgIGR5bmFtaWMocm9vdCwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3dhbGtBc3luYyhyb290LCBvcHRpb25zLCAoZXJyb3IsIGVudHJpZXMpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnJvciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZW50cmllcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGFzeW5jIHN0YXRpYyhwYXR0ZXJucywgb3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IGVudHJpZXMgPSBbXTtcclxuICAgICAgICBjb25zdCBzdHJlYW0gPSB0aGlzLl9yZWFkZXJTdHJlYW0uc3RhdGljKHBhdHRlcm5zLCBvcHRpb25zKTtcclxuICAgICAgICAvLyBBZnRlciAjMjM1LCByZXBsYWNlIGl0IHdpdGggYW4gYXN5bmNocm9ub3VzIGl0ZXJhdG9yLlxyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHN0cmVhbS5vbmNlKCdlcnJvcicsIHJlamVjdCk7XHJcbiAgICAgICAgICAgIHN0cmVhbS5vbignZGF0YScsIChlbnRyeSkgPT4gZW50cmllcy5wdXNoKGVudHJ5KSk7XHJcbiAgICAgICAgICAgIHN0cmVhbS5vbmNlKCdlbmQnLCAoKSA9PiByZXNvbHZlKGVudHJpZXMpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBSZWFkZXJBc3luYztcclxuIiwgIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHV0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xyXG5jbGFzcyBNYXRjaGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKF9wYXR0ZXJucywgX3NldHRpbmdzLCBfbWljcm9tYXRjaE9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLl9wYXR0ZXJucyA9IF9wYXR0ZXJucztcclxuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IF9zZXR0aW5ncztcclxuICAgICAgICB0aGlzLl9taWNyb21hdGNoT3B0aW9ucyA9IF9taWNyb21hdGNoT3B0aW9ucztcclxuICAgICAgICB0aGlzLl9zdG9yYWdlID0gW107XHJcbiAgICAgICAgdGhpcy5fZmlsbFN0b3JhZ2UoKTtcclxuICAgIH1cclxuICAgIF9maWxsU3RvcmFnZSgpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgb3JpZ2luYWwgcGF0dGVybiBtYXkgaW5jbHVkZSBgeywqLCoqLGEvKn1gLCB3aGljaCB3aWxsIGxlYWQgdG8gcHJvYmxlbXMgd2l0aCBtYXRjaGluZyAodW5yZXNvbHZlZCBsZXZlbCkuXHJcbiAgICAgICAgICogU28sIGJlZm9yZSBleHBhbmQgcGF0dGVybnMgd2l0aCBicmFjZSBleHBhbnNpb24gaW50byBzZXBhcmF0ZWQgcGF0dGVybnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3QgcGF0dGVybnMgPSB1dGlscy5wYXR0ZXJuLmV4cGFuZFBhdHRlcm5zV2l0aEJyYWNlRXhwYW5zaW9uKHRoaXMuX3BhdHRlcm5zKTtcclxuICAgICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgcGF0dGVybnMpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2VnbWVudHMgPSB0aGlzLl9nZXRQYXR0ZXJuU2VnbWVudHMocGF0dGVybik7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlY3Rpb25zID0gdGhpcy5fc3BsaXRTZWdtZW50c0ludG9TZWN0aW9ucyhzZWdtZW50cyk7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0b3JhZ2UucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogc2VjdGlvbnMubGVuZ3RoIDw9IDEsXHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuLFxyXG4gICAgICAgICAgICAgICAgc2VnbWVudHMsXHJcbiAgICAgICAgICAgICAgICBzZWN0aW9uc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfZ2V0UGF0dGVyblNlZ21lbnRzKHBhdHRlcm4pIHtcclxuICAgICAgICBjb25zdCBwYXJ0cyA9IHV0aWxzLnBhdHRlcm4uZ2V0UGF0dGVyblBhcnRzKHBhdHRlcm4sIHRoaXMuX21pY3JvbWF0Y2hPcHRpb25zKTtcclxuICAgICAgICByZXR1cm4gcGFydHMubWFwKChwYXJ0KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGR5bmFtaWMgPSB1dGlscy5wYXR0ZXJuLmlzRHluYW1pY1BhdHRlcm4ocGFydCwgdGhpcy5fc2V0dGluZ3MpO1xyXG4gICAgICAgICAgICBpZiAoIWR5bmFtaWMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pYzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogcGFydFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgZHluYW1pYzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHBhdHRlcm46IHBhcnQsXHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuUmU6IHV0aWxzLnBhdHRlcm4ubWFrZVJlKHBhcnQsIHRoaXMuX21pY3JvbWF0Y2hPcHRpb25zKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgX3NwbGl0U2VnbWVudHNJbnRvU2VjdGlvbnMoc2VnbWVudHMpIHtcclxuICAgICAgICByZXR1cm4gdXRpbHMuYXJyYXkuc3BsaXRXaGVuKHNlZ21lbnRzLCAoc2VnbWVudCkgPT4gc2VnbWVudC5keW5hbWljICYmIHV0aWxzLnBhdHRlcm4uaGFzR2xvYlN0YXIoc2VnbWVudC5wYXR0ZXJuKSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gTWF0Y2hlcjtcclxuIiwgIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IG1hdGNoZXJfMSA9IHJlcXVpcmUoXCIuL21hdGNoZXJcIik7XHJcbmNsYXNzIFBhcnRpYWxNYXRjaGVyIGV4dGVuZHMgbWF0Y2hlcl8xLmRlZmF1bHQge1xyXG4gICAgbWF0Y2goZmlsZXBhdGgpIHtcclxuICAgICAgICBjb25zdCBwYXJ0cyA9IGZpbGVwYXRoLnNwbGl0KCcvJyk7XHJcbiAgICAgICAgY29uc3QgbGV2ZWxzID0gcGFydHMubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IHBhdHRlcm5zID0gdGhpcy5fc3RvcmFnZS5maWx0ZXIoKGluZm8pID0+ICFpbmZvLmNvbXBsZXRlIHx8IGluZm8uc2VnbWVudHMubGVuZ3RoID4gbGV2ZWxzKTtcclxuICAgICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgcGF0dGVybnMpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2VjdGlvbiA9IHBhdHRlcm4uc2VjdGlvbnNbMF07XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBJbiB0aGlzIGNhc2UsIHRoZSBwYXR0ZXJuIGhhcyBhIGdsb2JzdGFyIGFuZCB3ZSBtdXN0IHJlYWQgYWxsIGRpcmVjdG9yaWVzIHVuY29uZGl0aW9uYWxseSxcclxuICAgICAgICAgICAgICogYnV0IG9ubHkgaWYgdGhlIGxldmVsIGhhcyByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIGZpcnN0IGdyb3VwLlxyXG4gICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICAgKiBmaXh0dXJlcy97YSxifS8qKlxyXG4gICAgICAgICAgICAgKiAgXiB0cnVlL2ZhbHNlICBeIGFsd2F5cyB0cnVlXHJcbiAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGlmICghcGF0dGVybi5jb21wbGV0ZSAmJiBsZXZlbHMgPiBzZWN0aW9uLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBwYXJ0cy5ldmVyeSgocGFydCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlZ21lbnQgPSBwYXR0ZXJuLnNlZ21lbnRzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIGlmIChzZWdtZW50LmR5bmFtaWMgJiYgc2VnbWVudC5wYXR0ZXJuUmUudGVzdChwYXJ0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFzZWdtZW50LmR5bmFtaWMgJiYgc2VnbWVudC5wYXR0ZXJuID09PSBwYXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBQYXJ0aWFsTWF0Y2hlcjtcclxuIiwgIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHV0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xyXG5jb25zdCBwYXJ0aWFsXzEgPSByZXF1aXJlKFwiLi4vbWF0Y2hlcnMvcGFydGlhbFwiKTtcclxuY2xhc3MgRGVlcEZpbHRlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihfc2V0dGluZ3MsIF9taWNyb21hdGNoT3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gX3NldHRpbmdzO1xyXG4gICAgICAgIHRoaXMuX21pY3JvbWF0Y2hPcHRpb25zID0gX21pY3JvbWF0Y2hPcHRpb25zO1xyXG4gICAgfVxyXG4gICAgZ2V0RmlsdGVyKGJhc2VQYXRoLCBwb3NpdGl2ZSwgbmVnYXRpdmUpIHtcclxuICAgICAgICBjb25zdCBtYXRjaGVyID0gdGhpcy5fZ2V0TWF0Y2hlcihwb3NpdGl2ZSk7XHJcbiAgICAgICAgY29uc3QgbmVnYXRpdmVSZSA9IHRoaXMuX2dldE5lZ2F0aXZlUGF0dGVybnNSZShuZWdhdGl2ZSk7XHJcbiAgICAgICAgcmV0dXJuIChlbnRyeSkgPT4gdGhpcy5fZmlsdGVyKGJhc2VQYXRoLCBlbnRyeSwgbWF0Y2hlciwgbmVnYXRpdmVSZSk7XHJcbiAgICB9XHJcbiAgICBfZ2V0TWF0Y2hlcihwYXR0ZXJucykge1xyXG4gICAgICAgIHJldHVybiBuZXcgcGFydGlhbF8xLmRlZmF1bHQocGF0dGVybnMsIHRoaXMuX3NldHRpbmdzLCB0aGlzLl9taWNyb21hdGNoT3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICBfZ2V0TmVnYXRpdmVQYXR0ZXJuc1JlKHBhdHRlcm5zKSB7XHJcbiAgICAgICAgY29uc3QgYWZmZWN0RGVwdGhPZlJlYWRpbmdQYXR0ZXJucyA9IHBhdHRlcm5zLmZpbHRlcih1dGlscy5wYXR0ZXJuLmlzQWZmZWN0RGVwdGhPZlJlYWRpbmdQYXR0ZXJuKTtcclxuICAgICAgICByZXR1cm4gdXRpbHMucGF0dGVybi5jb252ZXJ0UGF0dGVybnNUb1JlKGFmZmVjdERlcHRoT2ZSZWFkaW5nUGF0dGVybnMsIHRoaXMuX21pY3JvbWF0Y2hPcHRpb25zKTtcclxuICAgIH1cclxuICAgIF9maWx0ZXIoYmFzZVBhdGgsIGVudHJ5LCBtYXRjaGVyLCBuZWdhdGl2ZVJlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzU2tpcHBlZEJ5RGVlcChiYXNlUGF0aCwgZW50cnkucGF0aCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5faXNTa2lwcGVkU3ltYm9saWNMaW5rKGVudHJ5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGZpbGVwYXRoID0gdXRpbHMucGF0aC5yZW1vdmVMZWFkaW5nRG90U2VnbWVudChlbnRyeS5wYXRoKTtcclxuICAgICAgICBpZiAodGhpcy5faXNTa2lwcGVkQnlQb3NpdGl2ZVBhdHRlcm5zKGZpbGVwYXRoLCBtYXRjaGVyKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc1NraXBwZWRCeU5lZ2F0aXZlUGF0dGVybnMoZmlsZXBhdGgsIG5lZ2F0aXZlUmUpO1xyXG4gICAgfVxyXG4gICAgX2lzU2tpcHBlZEJ5RGVlcChiYXNlUGF0aCwgZW50cnlQYXRoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQXZvaWQgdW5uZWNlc3NhcnkgZGVwdGggY2FsY3VsYXRpb25zIHdoZW4gaXQgZG9lc24ndCBtYXR0ZXIuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLmRlZXAgPT09IEluZmluaXR5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEVudHJ5TGV2ZWwoYmFzZVBhdGgsIGVudHJ5UGF0aCkgPj0gdGhpcy5fc2V0dGluZ3MuZGVlcDtcclxuICAgIH1cclxuICAgIF9nZXRFbnRyeUxldmVsKGJhc2VQYXRoLCBlbnRyeVBhdGgpIHtcclxuICAgICAgICBjb25zdCBlbnRyeVBhdGhEZXB0aCA9IGVudHJ5UGF0aC5zcGxpdCgnLycpLmxlbmd0aDtcclxuICAgICAgICBpZiAoYmFzZVBhdGggPT09ICcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbnRyeVBhdGhEZXB0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYmFzZVBhdGhEZXB0aCA9IGJhc2VQYXRoLnNwbGl0KCcvJykubGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiBlbnRyeVBhdGhEZXB0aCAtIGJhc2VQYXRoRGVwdGg7XHJcbiAgICB9XHJcbiAgICBfaXNTa2lwcGVkU3ltYm9saWNMaW5rKGVudHJ5KSB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLl9zZXR0aW5ncy5mb2xsb3dTeW1ib2xpY0xpbmtzICYmIGVudHJ5LmRpcmVudC5pc1N5bWJvbGljTGluaygpO1xyXG4gICAgfVxyXG4gICAgX2lzU2tpcHBlZEJ5UG9zaXRpdmVQYXR0ZXJucyhlbnRyeVBhdGgsIG1hdGNoZXIpIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuX3NldHRpbmdzLmJhc2VOYW1lTWF0Y2ggJiYgIW1hdGNoZXIubWF0Y2goZW50cnlQYXRoKTtcclxuICAgIH1cclxuICAgIF9pc1NraXBwZWRCeU5lZ2F0aXZlUGF0dGVybnMoZW50cnlQYXRoLCBwYXR0ZXJuc1JlKSB7XHJcbiAgICAgICAgcmV0dXJuICF1dGlscy5wYXR0ZXJuLm1hdGNoQW55KGVudHJ5UGF0aCwgcGF0dGVybnNSZSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gRGVlcEZpbHRlcjtcclxuIiwgIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHV0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xyXG5jbGFzcyBFbnRyeUZpbHRlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihfc2V0dGluZ3MsIF9taWNyb21hdGNoT3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gX3NldHRpbmdzO1xyXG4gICAgICAgIHRoaXMuX21pY3JvbWF0Y2hPcHRpb25zID0gX21pY3JvbWF0Y2hPcHRpb25zO1xyXG4gICAgICAgIHRoaXMuaW5kZXggPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICBnZXRGaWx0ZXIocG9zaXRpdmUsIG5lZ2F0aXZlKSB7XHJcbiAgICAgICAgY29uc3QgcG9zaXRpdmVSZSA9IHV0aWxzLnBhdHRlcm4uY29udmVydFBhdHRlcm5zVG9SZShwb3NpdGl2ZSwgdGhpcy5fbWljcm9tYXRjaE9wdGlvbnMpO1xyXG4gICAgICAgIGNvbnN0IG5lZ2F0aXZlUmUgPSB1dGlscy5wYXR0ZXJuLmNvbnZlcnRQYXR0ZXJuc1RvUmUobmVnYXRpdmUsIHRoaXMuX21pY3JvbWF0Y2hPcHRpb25zKTtcclxuICAgICAgICByZXR1cm4gKGVudHJ5KSA9PiB0aGlzLl9maWx0ZXIoZW50cnksIHBvc2l0aXZlUmUsIG5lZ2F0aXZlUmUpO1xyXG4gICAgfVxyXG4gICAgX2ZpbHRlcihlbnRyeSwgcG9zaXRpdmVSZSwgbmVnYXRpdmVSZSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy51bmlxdWUgJiYgdGhpcy5faXNEdXBsaWNhdGVFbnRyeShlbnRyeSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fb25seUZpbGVGaWx0ZXIoZW50cnkpIHx8IHRoaXMuX29ubHlEaXJlY3RvcnlGaWx0ZXIoZW50cnkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzU2tpcHBlZEJ5QWJzb2x1dGVOZWdhdGl2ZVBhdHRlcm5zKGVudHJ5LnBhdGgsIG5lZ2F0aXZlUmUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZmlsZXBhdGggPSB0aGlzLl9zZXR0aW5ncy5iYXNlTmFtZU1hdGNoID8gZW50cnkubmFtZSA6IGVudHJ5LnBhdGg7XHJcbiAgICAgICAgY29uc3QgaXNEaXJlY3RvcnkgPSBlbnRyeS5kaXJlbnQuaXNEaXJlY3RvcnkoKTtcclxuICAgICAgICBjb25zdCBpc01hdGNoZWQgPSB0aGlzLl9pc01hdGNoVG9QYXR0ZXJucyhmaWxlcGF0aCwgcG9zaXRpdmVSZSwgaXNEaXJlY3RvcnkpICYmICF0aGlzLl9pc01hdGNoVG9QYXR0ZXJucyhlbnRyeS5wYXRoLCBuZWdhdGl2ZVJlLCBpc0RpcmVjdG9yeSk7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLnVuaXF1ZSAmJiBpc01hdGNoZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fY3JlYXRlSW5kZXhSZWNvcmQoZW50cnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXNNYXRjaGVkO1xyXG4gICAgfVxyXG4gICAgX2lzRHVwbGljYXRlRW50cnkoZW50cnkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbmRleC5oYXMoZW50cnkucGF0aCk7XHJcbiAgICB9XHJcbiAgICBfY3JlYXRlSW5kZXhSZWNvcmQoZW50cnkpIHtcclxuICAgICAgICB0aGlzLmluZGV4LnNldChlbnRyeS5wYXRoLCB1bmRlZmluZWQpO1xyXG4gICAgfVxyXG4gICAgX29ubHlGaWxlRmlsdGVyKGVudHJ5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzLm9ubHlGaWxlcyAmJiAhZW50cnkuZGlyZW50LmlzRmlsZSgpO1xyXG4gICAgfVxyXG4gICAgX29ubHlEaXJlY3RvcnlGaWx0ZXIoZW50cnkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3Mub25seURpcmVjdG9yaWVzICYmICFlbnRyeS5kaXJlbnQuaXNEaXJlY3RvcnkoKTtcclxuICAgIH1cclxuICAgIF9pc1NraXBwZWRCeUFic29sdXRlTmVnYXRpdmVQYXR0ZXJucyhlbnRyeVBhdGgsIHBhdHRlcm5zUmUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3NldHRpbmdzLmFic29sdXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZnVsbHBhdGggPSB1dGlscy5wYXRoLm1ha2VBYnNvbHV0ZSh0aGlzLl9zZXR0aW5ncy5jd2QsIGVudHJ5UGF0aCk7XHJcbiAgICAgICAgcmV0dXJuIHV0aWxzLnBhdHRlcm4ubWF0Y2hBbnkoZnVsbHBhdGgsIHBhdHRlcm5zUmUpO1xyXG4gICAgfVxyXG4gICAgX2lzTWF0Y2hUb1BhdHRlcm5zKGVudHJ5UGF0aCwgcGF0dGVybnNSZSwgaXNEaXJlY3RvcnkpIHtcclxuICAgICAgICBjb25zdCBmaWxlcGF0aCA9IHV0aWxzLnBhdGgucmVtb3ZlTGVhZGluZ0RvdFNlZ21lbnQoZW50cnlQYXRoKTtcclxuICAgICAgICAvLyBUcnlpbmcgdG8gbWF0Y2ggZmlsZXMgYW5kIGRpcmVjdG9yaWVzIGJ5IHBhdHRlcm5zLlxyXG4gICAgICAgIGNvbnN0IGlzTWF0Y2hlZCA9IHV0aWxzLnBhdHRlcm4ubWF0Y2hBbnkoZmlsZXBhdGgsIHBhdHRlcm5zUmUpO1xyXG4gICAgICAgIC8vIEEgcGF0dGVybiB3aXRoIGEgdHJhaWxsaW5nIHNsYXNoIGNhbiBiZSB1c2VkIGZvciBkaXJlY3RvcnkgbWF0Y2hpbmcuXHJcbiAgICAgICAgLy8gVG8gYXBwbHkgc3VjaCBwYXR0ZXJuLCB3ZSBuZWVkIHRvIGFkZCBhIHRyYWxsaW5nIHNsYXNoIHRvIHRoZSBwYXRoLlxyXG4gICAgICAgIGlmICghaXNNYXRjaGVkICYmIGlzRGlyZWN0b3J5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1dGlscy5wYXR0ZXJuLm1hdGNoQW55KGZpbGVwYXRoICsgJy8nLCBwYXR0ZXJuc1JlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlzTWF0Y2hlZDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBFbnRyeUZpbHRlcjtcclxuIiwgIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHV0aWxzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xyXG5jbGFzcyBFcnJvckZpbHRlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihfc2V0dGluZ3MpIHtcclxuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IF9zZXR0aW5ncztcclxuICAgIH1cclxuICAgIGdldEZpbHRlcigpIHtcclxuICAgICAgICByZXR1cm4gKGVycm9yKSA9PiB0aGlzLl9pc05vbkZhdGFsRXJyb3IoZXJyb3IpO1xyXG4gICAgfVxyXG4gICAgX2lzTm9uRmF0YWxFcnJvcihlcnJvcikge1xyXG4gICAgICAgIHJldHVybiB1dGlscy5lcnJuby5pc0Vub2VudENvZGVFcnJvcihlcnJvcikgfHwgdGhpcy5fc2V0dGluZ3Muc3VwcHJlc3NFcnJvcnM7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gRXJyb3JGaWx0ZXI7XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcclxuY2xhc3MgRW50cnlUcmFuc2Zvcm1lciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihfc2V0dGluZ3MpIHtcclxuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IF9zZXR0aW5ncztcclxuICAgIH1cclxuICAgIGdldFRyYW5zZm9ybWVyKCkge1xyXG4gICAgICAgIHJldHVybiAoZW50cnkpID0+IHRoaXMuX3RyYW5zZm9ybShlbnRyeSk7XHJcbiAgICB9XHJcbiAgICBfdHJhbnNmb3JtKGVudHJ5KSB7XHJcbiAgICAgICAgbGV0IGZpbGVwYXRoID0gZW50cnkucGF0aDtcclxuICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3MuYWJzb2x1dGUpIHtcclxuICAgICAgICAgICAgZmlsZXBhdGggPSB1dGlscy5wYXRoLm1ha2VBYnNvbHV0ZSh0aGlzLl9zZXR0aW5ncy5jd2QsIGZpbGVwYXRoKTtcclxuICAgICAgICAgICAgZmlsZXBhdGggPSB1dGlscy5wYXRoLnVuaXhpZnkoZmlsZXBhdGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3MubWFya0RpcmVjdG9yaWVzICYmIGVudHJ5LmRpcmVudC5pc0RpcmVjdG9yeSgpKSB7XHJcbiAgICAgICAgICAgIGZpbGVwYXRoICs9ICcvJztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLl9zZXR0aW5ncy5vYmplY3RNb2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWxlcGF0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZW50cnkpLCB7IHBhdGg6IGZpbGVwYXRoIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IEVudHJ5VHJhbnNmb3JtZXI7XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XHJcbmNvbnN0IGRlZXBfMSA9IHJlcXVpcmUoXCIuL2ZpbHRlcnMvZGVlcFwiKTtcclxuY29uc3QgZW50cnlfMSA9IHJlcXVpcmUoXCIuL2ZpbHRlcnMvZW50cnlcIik7XHJcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9maWx0ZXJzL2Vycm9yXCIpO1xyXG5jb25zdCBlbnRyeV8yID0gcmVxdWlyZShcIi4vdHJhbnNmb3JtZXJzL2VudHJ5XCIpO1xyXG5jbGFzcyBQcm92aWRlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihfc2V0dGluZ3MpIHtcclxuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IF9zZXR0aW5ncztcclxuICAgICAgICB0aGlzLmVycm9yRmlsdGVyID0gbmV3IGVycm9yXzEuZGVmYXVsdCh0aGlzLl9zZXR0aW5ncyk7XHJcbiAgICAgICAgdGhpcy5lbnRyeUZpbHRlciA9IG5ldyBlbnRyeV8xLmRlZmF1bHQodGhpcy5fc2V0dGluZ3MsIHRoaXMuX2dldE1pY3JvbWF0Y2hPcHRpb25zKCkpO1xyXG4gICAgICAgIHRoaXMuZGVlcEZpbHRlciA9IG5ldyBkZWVwXzEuZGVmYXVsdCh0aGlzLl9zZXR0aW5ncywgdGhpcy5fZ2V0TWljcm9tYXRjaE9wdGlvbnMoKSk7XHJcbiAgICAgICAgdGhpcy5lbnRyeVRyYW5zZm9ybWVyID0gbmV3IGVudHJ5XzIuZGVmYXVsdCh0aGlzLl9zZXR0aW5ncyk7XHJcbiAgICB9XHJcbiAgICBfZ2V0Um9vdERpcmVjdG9yeSh0YXNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdGgucmVzb2x2ZSh0aGlzLl9zZXR0aW5ncy5jd2QsIHRhc2suYmFzZSk7XHJcbiAgICB9XHJcbiAgICBfZ2V0UmVhZGVyT3B0aW9ucyh0YXNrKSB7XHJcbiAgICAgICAgY29uc3QgYmFzZVBhdGggPSB0YXNrLmJhc2UgPT09ICcuJyA/ICcnIDogdGFzay5iYXNlO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGJhc2VQYXRoLFxyXG4gICAgICAgICAgICBwYXRoU2VnbWVudFNlcGFyYXRvcjogJy8nLFxyXG4gICAgICAgICAgICBjb25jdXJyZW5jeTogdGhpcy5fc2V0dGluZ3MuY29uY3VycmVuY3ksXHJcbiAgICAgICAgICAgIGRlZXBGaWx0ZXI6IHRoaXMuZGVlcEZpbHRlci5nZXRGaWx0ZXIoYmFzZVBhdGgsIHRhc2sucG9zaXRpdmUsIHRhc2submVnYXRpdmUpLFxyXG4gICAgICAgICAgICBlbnRyeUZpbHRlcjogdGhpcy5lbnRyeUZpbHRlci5nZXRGaWx0ZXIodGFzay5wb3NpdGl2ZSwgdGFzay5uZWdhdGl2ZSksXHJcbiAgICAgICAgICAgIGVycm9yRmlsdGVyOiB0aGlzLmVycm9yRmlsdGVyLmdldEZpbHRlcigpLFxyXG4gICAgICAgICAgICBmb2xsb3dTeW1ib2xpY0xpbmtzOiB0aGlzLl9zZXR0aW5ncy5mb2xsb3dTeW1ib2xpY0xpbmtzLFxyXG4gICAgICAgICAgICBmczogdGhpcy5fc2V0dGluZ3MuZnMsXHJcbiAgICAgICAgICAgIHN0YXRzOiB0aGlzLl9zZXR0aW5ncy5zdGF0cyxcclxuICAgICAgICAgICAgdGhyb3dFcnJvck9uQnJva2VuU3ltYm9saWNMaW5rOiB0aGlzLl9zZXR0aW5ncy50aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbmssXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdGhpcy5lbnRyeVRyYW5zZm9ybWVyLmdldFRyYW5zZm9ybWVyKClcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgX2dldE1pY3JvbWF0Y2hPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGRvdDogdGhpcy5fc2V0dGluZ3MuZG90LFxyXG4gICAgICAgICAgICBtYXRjaEJhc2U6IHRoaXMuX3NldHRpbmdzLmJhc2VOYW1lTWF0Y2gsXHJcbiAgICAgICAgICAgIG5vYnJhY2U6ICF0aGlzLl9zZXR0aW5ncy5icmFjZUV4cGFuc2lvbixcclxuICAgICAgICAgICAgbm9jYXNlOiAhdGhpcy5fc2V0dGluZ3MuY2FzZVNlbnNpdGl2ZU1hdGNoLFxyXG4gICAgICAgICAgICBub2V4dDogIXRoaXMuX3NldHRpbmdzLmV4dGdsb2IsXHJcbiAgICAgICAgICAgIG5vZ2xvYnN0YXI6ICF0aGlzLl9zZXR0aW5ncy5nbG9ic3RhcixcclxuICAgICAgICAgICAgcG9zaXg6IHRydWUsXHJcbiAgICAgICAgICAgIHN0cmljdFNsYXNoZXM6IGZhbHNlXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBQcm92aWRlcjtcclxuIiwgIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vcmVhZGVycy9hc3luY1wiKTtcclxuY29uc3QgcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVyXCIpO1xyXG5jbGFzcyBQcm92aWRlckFzeW5jIGV4dGVuZHMgcHJvdmlkZXJfMS5kZWZhdWx0IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5fcmVhZGVyID0gbmV3IGFzeW5jXzEuZGVmYXVsdCh0aGlzLl9zZXR0aW5ncyk7XHJcbiAgICB9XHJcbiAgICBhc3luYyByZWFkKHRhc2spIHtcclxuICAgICAgICBjb25zdCByb290ID0gdGhpcy5fZ2V0Um9vdERpcmVjdG9yeSh0YXNrKTtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fZ2V0UmVhZGVyT3B0aW9ucyh0YXNrKTtcclxuICAgICAgICBjb25zdCBlbnRyaWVzID0gYXdhaXQgdGhpcy5hcGkocm9vdCwgdGFzaywgb3B0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIGVudHJpZXMubWFwKChlbnRyeSkgPT4gb3B0aW9ucy50cmFuc2Zvcm0oZW50cnkpKTtcclxuICAgIH1cclxuICAgIGFwaShyb290LCB0YXNrLCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKHRhc2suZHluYW1pYykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVhZGVyLmR5bmFtaWMocm9vdCwgb3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZWFkZXIuc3RhdGljKHRhc2sucGF0dGVybnMsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IFByb3ZpZGVyQXN5bmM7XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBzdHJlYW1fMSA9IHJlcXVpcmUoXCJzdHJlYW1cIik7XHJcbmNvbnN0IHN0cmVhbV8yID0gcmVxdWlyZShcIi4uL3JlYWRlcnMvc3RyZWFtXCIpO1xyXG5jb25zdCBwcm92aWRlcl8xID0gcmVxdWlyZShcIi4vcHJvdmlkZXJcIik7XHJcbmNsYXNzIFByb3ZpZGVyU3RyZWFtIGV4dGVuZHMgcHJvdmlkZXJfMS5kZWZhdWx0IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5fcmVhZGVyID0gbmV3IHN0cmVhbV8yLmRlZmF1bHQodGhpcy5fc2V0dGluZ3MpO1xyXG4gICAgfVxyXG4gICAgcmVhZCh0YXNrKSB7XHJcbiAgICAgICAgY29uc3Qgcm9vdCA9IHRoaXMuX2dldFJvb3REaXJlY3RvcnkodGFzayk7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX2dldFJlYWRlck9wdGlvbnModGFzayk7XHJcbiAgICAgICAgY29uc3Qgc291cmNlID0gdGhpcy5hcGkocm9vdCwgdGFzaywgb3B0aW9ucyk7XHJcbiAgICAgICAgY29uc3QgZGVzdGluYXRpb24gPSBuZXcgc3RyZWFtXzEuUmVhZGFibGUoeyBvYmplY3RNb2RlOiB0cnVlLCByZWFkOiAoKSA9PiB7IH0gfSk7XHJcbiAgICAgICAgc291cmNlXHJcbiAgICAgICAgICAgIC5vbmNlKCdlcnJvcicsIChlcnJvcikgPT4gZGVzdGluYXRpb24uZW1pdCgnZXJyb3InLCBlcnJvcikpXHJcbiAgICAgICAgICAgIC5vbignZGF0YScsIChlbnRyeSkgPT4gZGVzdGluYXRpb24uZW1pdCgnZGF0YScsIG9wdGlvbnMudHJhbnNmb3JtKGVudHJ5KSkpXHJcbiAgICAgICAgICAgIC5vbmNlKCdlbmQnLCAoKSA9PiBkZXN0aW5hdGlvbi5lbWl0KCdlbmQnKSk7XHJcbiAgICAgICAgZGVzdGluYXRpb25cclxuICAgICAgICAgICAgLm9uY2UoJ2Nsb3NlJywgKCkgPT4gc291cmNlLmRlc3Ryb3koKSk7XHJcbiAgICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xyXG4gICAgfVxyXG4gICAgYXBpKHJvb3QsIHRhc2ssIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAodGFzay5keW5hbWljKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWFkZXIuZHluYW1pYyhyb290LCBvcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlYWRlci5zdGF0aWModGFzay5wYXR0ZXJucywgb3B0aW9ucyk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gUHJvdmlkZXJTdHJlYW07XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBmc1N0YXQgPSByZXF1aXJlKFwiQG5vZGVsaWIvZnMuc3RhdFwiKTtcclxuY29uc3QgZnNXYWxrID0gcmVxdWlyZShcIkBub2RlbGliL2ZzLndhbGtcIik7XHJcbmNvbnN0IHJlYWRlcl8xID0gcmVxdWlyZShcIi4vcmVhZGVyXCIpO1xyXG5jbGFzcyBSZWFkZXJTeW5jIGV4dGVuZHMgcmVhZGVyXzEuZGVmYXVsdCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMuX3dhbGtTeW5jID0gZnNXYWxrLndhbGtTeW5jO1xyXG4gICAgICAgIHRoaXMuX3N0YXRTeW5jID0gZnNTdGF0LnN0YXRTeW5jO1xyXG4gICAgfVxyXG4gICAgZHluYW1pYyhyb290LCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dhbGtTeW5jKHJvb3QsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljKHBhdHRlcm5zLCBvcHRpb25zKSB7XHJcbiAgICAgICAgY29uc3QgZW50cmllcyA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiBwYXR0ZXJucykge1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlcGF0aCA9IHRoaXMuX2dldEZ1bGxFbnRyeVBhdGgocGF0dGVybik7XHJcbiAgICAgICAgICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5fZ2V0RW50cnkoZmlsZXBhdGgsIHBhdHRlcm4sIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICBpZiAoZW50cnkgPT09IG51bGwgfHwgIW9wdGlvbnMuZW50cnlGaWx0ZXIoZW50cnkpKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbnRyaWVzLnB1c2goZW50cnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZW50cmllcztcclxuICAgIH1cclxuICAgIF9nZXRFbnRyeShmaWxlcGF0aCwgcGF0dGVybiwgb3B0aW9ucykge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXRzID0gdGhpcy5fZ2V0U3RhdChmaWxlcGF0aCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYWtlRW50cnkoc3RhdHMsIHBhdHRlcm4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZXJyb3JGaWx0ZXIoZXJyb3IpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfZ2V0U3RhdChmaWxlcGF0aCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0U3luYyhmaWxlcGF0aCwgdGhpcy5fZnNTdGF0U2V0dGluZ3MpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IFJlYWRlclN5bmM7XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBzeW5jXzEgPSByZXF1aXJlKFwiLi4vcmVhZGVycy9zeW5jXCIpO1xyXG5jb25zdCBwcm92aWRlcl8xID0gcmVxdWlyZShcIi4vcHJvdmlkZXJcIik7XHJcbmNsYXNzIFByb3ZpZGVyU3luYyBleHRlbmRzIHByb3ZpZGVyXzEuZGVmYXVsdCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xyXG4gICAgICAgIHRoaXMuX3JlYWRlciA9IG5ldyBzeW5jXzEuZGVmYXVsdCh0aGlzLl9zZXR0aW5ncyk7XHJcbiAgICB9XHJcbiAgICByZWFkKHRhc2spIHtcclxuICAgICAgICBjb25zdCByb290ID0gdGhpcy5fZ2V0Um9vdERpcmVjdG9yeSh0YXNrKTtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fZ2V0UmVhZGVyT3B0aW9ucyh0YXNrKTtcclxuICAgICAgICBjb25zdCBlbnRyaWVzID0gdGhpcy5hcGkocm9vdCwgdGFzaywgb3B0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIGVudHJpZXMubWFwKG9wdGlvbnMudHJhbnNmb3JtKTtcclxuICAgIH1cclxuICAgIGFwaShyb290LCB0YXNrLCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKHRhc2suZHluYW1pYykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVhZGVyLmR5bmFtaWMocm9vdCwgb3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZWFkZXIuc3RhdGljKHRhc2sucGF0dGVybnMsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IFByb3ZpZGVyU3luYztcclxuIiwgIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuREVGQVVMVF9GSUxFX1NZU1RFTV9BREFQVEVSID0gdm9pZCAwO1xyXG5jb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcclxuY29uc3Qgb3MgPSByZXF1aXJlKFwib3NcIik7XHJcbi8qKlxyXG4gKiBUaGUgYG9zLmNwdXNgIG1ldGhvZCBjYW4gcmV0dXJuIHplcm8uIFdlIGV4cGVjdCB0aGUgbnVtYmVyIG9mIGNvcmVzIHRvIGJlIGdyZWF0ZXIgdGhhbiB6ZXJvLlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi83ZmFlZGRmMjNhOThjNTM4OTZmOGI1NzRhNmU2NjU4OWU4ZmIxZWI4L2xpYi9vcy5qcyNMMTA2LUwxMDdcclxuICovXHJcbmNvbnN0IENQVV9DT1VOVCA9IE1hdGgubWF4KG9zLmNwdXMoKS5sZW5ndGgsIDEpO1xyXG5leHBvcnRzLkRFRkFVTFRfRklMRV9TWVNURU1fQURBUFRFUiA9IHtcclxuICAgIGxzdGF0OiBmcy5sc3RhdCxcclxuICAgIGxzdGF0U3luYzogZnMubHN0YXRTeW5jLFxyXG4gICAgc3RhdDogZnMuc3RhdCxcclxuICAgIHN0YXRTeW5jOiBmcy5zdGF0U3luYyxcclxuICAgIHJlYWRkaXI6IGZzLnJlYWRkaXIsXHJcbiAgICByZWFkZGlyU3luYzogZnMucmVhZGRpclN5bmNcclxufTtcclxuY2xhc3MgU2V0dGluZ3Mge1xyXG4gICAgY29uc3RydWN0b3IoX29wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBfb3B0aW9ucztcclxuICAgICAgICB0aGlzLmFic29sdXRlID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5hYnNvbHV0ZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuYmFzZU5hbWVNYXRjaCA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuYmFzZU5hbWVNYXRjaCwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuYnJhY2VFeHBhbnNpb24gPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmJyYWNlRXhwYW5zaW9uLCB0cnVlKTtcclxuICAgICAgICB0aGlzLmNhc2VTZW5zaXRpdmVNYXRjaCA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuY2FzZVNlbnNpdGl2ZU1hdGNoLCB0cnVlKTtcclxuICAgICAgICB0aGlzLmNvbmN1cnJlbmN5ID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5jb25jdXJyZW5jeSwgQ1BVX0NPVU5UKTtcclxuICAgICAgICB0aGlzLmN3ZCA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuY3dkLCBwcm9jZXNzLmN3ZCgpKTtcclxuICAgICAgICB0aGlzLmRlZXAgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmRlZXAsIEluZmluaXR5KTtcclxuICAgICAgICB0aGlzLmRvdCA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuZG90LCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5leHRnbG9iID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5leHRnbG9iLCB0cnVlKTtcclxuICAgICAgICB0aGlzLmZvbGxvd1N5bWJvbGljTGlua3MgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmZvbGxvd1N5bWJvbGljTGlua3MsIHRydWUpO1xyXG4gICAgICAgIHRoaXMuZnMgPSB0aGlzLl9nZXRGaWxlU3lzdGVtTWV0aG9kcyh0aGlzLl9vcHRpb25zLmZzKTtcclxuICAgICAgICB0aGlzLmdsb2JzdGFyID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5nbG9ic3RhciwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5pZ25vcmUgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLmlnbm9yZSwgW10pO1xyXG4gICAgICAgIHRoaXMubWFya0RpcmVjdG9yaWVzID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5tYXJrRGlyZWN0b3JpZXMsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLm9iamVjdE1vZGUsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLm9ubHlEaXJlY3RvcmllcyA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMub25seURpcmVjdG9yaWVzLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5vbmx5RmlsZXMgPSB0aGlzLl9nZXRWYWx1ZSh0aGlzLl9vcHRpb25zLm9ubHlGaWxlcywgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5zdGF0cyA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMuc3RhdHMsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnN1cHByZXNzRXJyb3JzID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy5zdXBwcmVzc0Vycm9ycywgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudGhyb3dFcnJvck9uQnJva2VuU3ltYm9saWNMaW5rID0gdGhpcy5fZ2V0VmFsdWUodGhpcy5fb3B0aW9ucy50aHJvd0Vycm9yT25Ccm9rZW5TeW1ib2xpY0xpbmssIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnVuaXF1ZSA9IHRoaXMuX2dldFZhbHVlKHRoaXMuX29wdGlvbnMudW5pcXVlLCB0cnVlKTtcclxuICAgICAgICBpZiAodGhpcy5vbmx5RGlyZWN0b3JpZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5vbmx5RmlsZXMgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdHMpIHtcclxuICAgICAgICAgICAgdGhpcy5vYmplY3RNb2RlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfZ2V0VmFsdWUob3B0aW9uLCB2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiBvcHRpb24gPT09IHVuZGVmaW5lZCA/IHZhbHVlIDogb3B0aW9uO1xyXG4gICAgfVxyXG4gICAgX2dldEZpbGVTeXN0ZW1NZXRob2RzKG1ldGhvZHMgPSB7fSkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGV4cG9ydHMuREVGQVVMVF9GSUxFX1NZU1RFTV9BREFQVEVSKSwgbWV0aG9kcyk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gU2V0dGluZ3M7XHJcbiIsICJcInVzZSBzdHJpY3RcIjtcclxuY29uc3QgdGFza01hbmFnZXIgPSByZXF1aXJlKFwiLi9tYW5hZ2Vycy90YXNrc1wiKTtcclxuY29uc3QgcGF0dGVybk1hbmFnZXIgPSByZXF1aXJlKFwiLi9tYW5hZ2Vycy9wYXR0ZXJuc1wiKTtcclxuY29uc3QgYXN5bmNfMSA9IHJlcXVpcmUoXCIuL3Byb3ZpZGVycy9hc3luY1wiKTtcclxuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwiLi9wcm92aWRlcnMvc3RyZWFtXCIpO1xyXG5jb25zdCBzeW5jXzEgPSByZXF1aXJlKFwiLi9wcm92aWRlcnMvc3luY1wiKTtcclxuY29uc3Qgc2V0dGluZ3NfMSA9IHJlcXVpcmUoXCIuL3NldHRpbmdzXCIpO1xyXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xyXG5hc3luYyBmdW5jdGlvbiBGYXN0R2xvYihzb3VyY2UsIG9wdGlvbnMpIHtcclxuICAgIGFzc2VydFBhdHRlcm5zSW5wdXQoc291cmNlKTtcclxuICAgIGNvbnN0IHdvcmtzID0gZ2V0V29ya3Moc291cmNlLCBhc3luY18xLmRlZmF1bHQsIG9wdGlvbnMpO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgUHJvbWlzZS5hbGwod29ya3MpO1xyXG4gICAgcmV0dXJuIHV0aWxzLmFycmF5LmZsYXR0ZW4ocmVzdWx0KTtcclxufVxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdHlwZXNjcmlwdC1lc2xpbnQvdHlwZXNjcmlwdC1lc2xpbnQvaXNzdWVzLzYwXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZWRlY2xhcmVcclxuKGZ1bmN0aW9uIChGYXN0R2xvYikge1xyXG4gICAgZnVuY3Rpb24gc3luYyhzb3VyY2UsIG9wdGlvbnMpIHtcclxuICAgICAgICBhc3NlcnRQYXR0ZXJuc0lucHV0KHNvdXJjZSk7XHJcbiAgICAgICAgY29uc3Qgd29ya3MgPSBnZXRXb3Jrcyhzb3VyY2UsIHN5bmNfMS5kZWZhdWx0LCBvcHRpb25zKTtcclxuICAgICAgICByZXR1cm4gdXRpbHMuYXJyYXkuZmxhdHRlbih3b3Jrcyk7XHJcbiAgICB9XHJcbiAgICBGYXN0R2xvYi5zeW5jID0gc3luYztcclxuICAgIGZ1bmN0aW9uIHN0cmVhbShzb3VyY2UsIG9wdGlvbnMpIHtcclxuICAgICAgICBhc3NlcnRQYXR0ZXJuc0lucHV0KHNvdXJjZSk7XHJcbiAgICAgICAgY29uc3Qgd29ya3MgPSBnZXRXb3Jrcyhzb3VyY2UsIHN0cmVhbV8xLmRlZmF1bHQsIG9wdGlvbnMpO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBzdHJlYW0gcmV0dXJuZWQgYnkgdGhlIHByb3ZpZGVyIGNhbm5vdCB3b3JrIHdpdGggYW4gYXN5bmNocm9ub3VzIGl0ZXJhdG9yLlxyXG4gICAgICAgICAqIFRvIHN1cHBvcnQgYXN5bmNocm9ub3VzIGl0ZXJhdG9ycywgcmVnYXJkbGVzcyBvZiB0aGUgbnVtYmVyIG9mIHRhc2tzLCB3ZSBhbHdheXMgbXVsdGlwbGV4IHN0cmVhbXMuXHJcbiAgICAgICAgICogVGhpcyBhZmZlY3RzIHBlcmZvcm1hbmNlICgrMjUlKS4gSSBkb24ndCBzZWUgYmVzdCBzb2x1dGlvbiByaWdodCBub3cuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmV0dXJuIHV0aWxzLnN0cmVhbS5tZXJnZSh3b3Jrcyk7XHJcbiAgICB9XHJcbiAgICBGYXN0R2xvYi5zdHJlYW0gPSBzdHJlYW07XHJcbiAgICBmdW5jdGlvbiBnZW5lcmF0ZVRhc2tzKHNvdXJjZSwgb3B0aW9ucykge1xyXG4gICAgICAgIGFzc2VydFBhdHRlcm5zSW5wdXQoc291cmNlKTtcclxuICAgICAgICBjb25zdCBwYXR0ZXJucyA9IHBhdHRlcm5NYW5hZ2VyLnRyYW5zZm9ybShbXS5jb25jYXQoc291cmNlKSk7XHJcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSBuZXcgc2V0dGluZ3NfMS5kZWZhdWx0KG9wdGlvbnMpO1xyXG4gICAgICAgIHJldHVybiB0YXNrTWFuYWdlci5nZW5lcmF0ZShwYXR0ZXJucywgc2V0dGluZ3MpO1xyXG4gICAgfVxyXG4gICAgRmFzdEdsb2IuZ2VuZXJhdGVUYXNrcyA9IGdlbmVyYXRlVGFza3M7XHJcbiAgICBmdW5jdGlvbiBpc0R5bmFtaWNQYXR0ZXJuKHNvdXJjZSwgb3B0aW9ucykge1xyXG4gICAgICAgIGFzc2VydFBhdHRlcm5zSW5wdXQoc291cmNlKTtcclxuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IG5ldyBzZXR0aW5nc18xLmRlZmF1bHQob3B0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuIHV0aWxzLnBhdHRlcm4uaXNEeW5hbWljUGF0dGVybihzb3VyY2UsIHNldHRpbmdzKTtcclxuICAgIH1cclxuICAgIEZhc3RHbG9iLmlzRHluYW1pY1BhdHRlcm4gPSBpc0R5bmFtaWNQYXR0ZXJuO1xyXG4gICAgZnVuY3Rpb24gZXNjYXBlUGF0aChzb3VyY2UpIHtcclxuICAgICAgICBhc3NlcnRQYXR0ZXJuc0lucHV0KHNvdXJjZSk7XHJcbiAgICAgICAgcmV0dXJuIHV0aWxzLnBhdGguZXNjYXBlKHNvdXJjZSk7XHJcbiAgICB9XHJcbiAgICBGYXN0R2xvYi5lc2NhcGVQYXRoID0gZXNjYXBlUGF0aDtcclxufSkoRmFzdEdsb2IgfHwgKEZhc3RHbG9iID0ge30pKTtcclxuZnVuY3Rpb24gZ2V0V29ya3Moc291cmNlLCBfUHJvdmlkZXIsIG9wdGlvbnMpIHtcclxuICAgIGNvbnN0IHBhdHRlcm5zID0gcGF0dGVybk1hbmFnZXIudHJhbnNmb3JtKFtdLmNvbmNhdChzb3VyY2UpKTtcclxuICAgIGNvbnN0IHNldHRpbmdzID0gbmV3IHNldHRpbmdzXzEuZGVmYXVsdChvcHRpb25zKTtcclxuICAgIGNvbnN0IHRhc2tzID0gdGFza01hbmFnZXIuZ2VuZXJhdGUocGF0dGVybnMsIHNldHRpbmdzKTtcclxuICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IF9Qcm92aWRlcihzZXR0aW5ncyk7XHJcbiAgICByZXR1cm4gdGFza3MubWFwKHByb3ZpZGVyLnJlYWQsIHByb3ZpZGVyKTtcclxufVxyXG5mdW5jdGlvbiBhc3NlcnRQYXR0ZXJuc0lucHV0KGlucHV0KSB7XHJcbiAgICBjb25zdCBzb3VyY2UgPSBbXS5jb25jYXQoaW5wdXQpO1xyXG4gICAgY29uc3QgaXNWYWxpZFNvdXJjZSA9IHNvdXJjZS5ldmVyeSgoaXRlbSkgPT4gdXRpbHMuc3RyaW5nLmlzU3RyaW5nKGl0ZW0pICYmICF1dGlscy5zdHJpbmcuaXNFbXB0eShpdGVtKSk7XHJcbiAgICBpZiAoIWlzVmFsaWRTb3VyY2UpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQYXR0ZXJucyBtdXN0IGJlIGEgc3RyaW5nIChub24gZW1wdHkpIG9yIGFuIGFycmF5IG9mIHN0cmluZ3MnKTtcclxuICAgIH1cclxufVxyXG5tb2R1bGUuZXhwb3J0cyA9IEZhc3RHbG9iO1xyXG4iLCAiXG52YXIgRHVja0RCID0gKCgpID0+IHtcbiAgdmFyIF9zY3JpcHREaXIgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgPyBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyA6IHVuZGVmaW5lZDtcbiAgaWYgKHR5cGVvZiBfX2ZpbGVuYW1lICE9PSAndW5kZWZpbmVkJykgX3NjcmlwdERpciA9IF9zY3JpcHREaXIgfHwgX19maWxlbmFtZTtcbiAgcmV0dXJuIChcbmZ1bmN0aW9uKER1Y2tEQiA9IHt9KSAge1xuXG52YXIgTW9kdWxlPXR5cGVvZiBEdWNrREIhPVwidW5kZWZpbmVkXCI/RHVja0RCOnt9O3ZhciByZWFkeVByb21pc2VSZXNvbHZlLHJlYWR5UHJvbWlzZVJlamVjdDtNb2R1bGVbXCJyZWFkeVwiXT1uZXcgUHJvbWlzZSgocmVzb2x2ZSxyZWplY3QpPT57cmVhZHlQcm9taXNlUmVzb2x2ZT1yZXNvbHZlO3JlYWR5UHJvbWlzZVJlamVjdD1yZWplY3R9KTt2YXIgbW9kdWxlT3ZlcnJpZGVzPU9iamVjdC5hc3NpZ24oe30sTW9kdWxlKTt2YXIgYXJndW1lbnRzXz1bXTt2YXIgdGhpc1Byb2dyYW09XCIuL3RoaXMucHJvZ3JhbVwiO3ZhciBxdWl0Xz0oc3RhdHVzLHRvVGhyb3cpPT57dGhyb3cgdG9UaHJvd307dmFyIEVOVklST05NRU5UX0lTX1dFQj10eXBlb2Ygd2luZG93PT1cIm9iamVjdFwiO3ZhciBFTlZJUk9OTUVOVF9JU19XT1JLRVI9dHlwZW9mIGltcG9ydFNjcmlwdHM9PVwiZnVuY3Rpb25cIjt2YXIgRU5WSVJPTk1FTlRfSVNfTk9ERT10eXBlb2YgcHJvY2Vzcz09XCJvYmplY3RcIiYmdHlwZW9mIHByb2Nlc3MudmVyc2lvbnM9PVwib2JqZWN0XCImJnR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGU9PVwic3RyaW5nXCI7dmFyIHNjcmlwdERpcmVjdG9yeT1cIlwiO2Z1bmN0aW9uIGxvY2F0ZUZpbGUocGF0aCl7aWYoTW9kdWxlW1wibG9jYXRlRmlsZVwiXSl7cmV0dXJuIE1vZHVsZVtcImxvY2F0ZUZpbGVcIl0ocGF0aCxzY3JpcHREaXJlY3RvcnkpfXJldHVybiBzY3JpcHREaXJlY3RvcnkrcGF0aH12YXIgcmVhZF8scmVhZEFzeW5jLHJlYWRCaW5hcnksc2V0V2luZG93VGl0bGU7aWYoRU5WSVJPTk1FTlRfSVNfTk9ERSl7dmFyIGZzPXJlcXVpcmUoXCJmc1wiKTt2YXIgbm9kZVBhdGg9cmVxdWlyZShcInBhdGhcIik7aWYoRU5WSVJPTk1FTlRfSVNfV09SS0VSKXtzY3JpcHREaXJlY3Rvcnk9bm9kZVBhdGguZGlybmFtZShzY3JpcHREaXJlY3RvcnkpK1wiL1wifWVsc2V7c2NyaXB0RGlyZWN0b3J5PV9fZGlybmFtZStcIi9cIn1yZWFkXz0oZmlsZW5hbWUsYmluYXJ5KT0+e2ZpbGVuYW1lPWlzRmlsZVVSSShmaWxlbmFtZSk/bmV3IFVSTChmaWxlbmFtZSk6bm9kZVBhdGgubm9ybWFsaXplKGZpbGVuYW1lKTtyZXR1cm4gZnMucmVhZEZpbGVTeW5jKGZpbGVuYW1lLGJpbmFyeT91bmRlZmluZWQ6XCJ1dGY4XCIpfTtyZWFkQmluYXJ5PWZpbGVuYW1lPT57dmFyIHJldD1yZWFkXyhmaWxlbmFtZSx0cnVlKTtpZighcmV0LmJ1ZmZlcil7cmV0PW5ldyBVaW50OEFycmF5KHJldCl9cmV0dXJuIHJldH07cmVhZEFzeW5jPShmaWxlbmFtZSxvbmxvYWQsb25lcnJvcixiaW5hcnk9dHJ1ZSk9PntmaWxlbmFtZT1pc0ZpbGVVUkkoZmlsZW5hbWUpP25ldyBVUkwoZmlsZW5hbWUpOm5vZGVQYXRoLm5vcm1hbGl6ZShmaWxlbmFtZSk7ZnMucmVhZEZpbGUoZmlsZW5hbWUsYmluYXJ5P3VuZGVmaW5lZDpcInV0ZjhcIiwoZXJyLGRhdGEpPT57aWYoZXJyKW9uZXJyb3IoZXJyKTtlbHNlIG9ubG9hZChiaW5hcnk/ZGF0YS5idWZmZXI6ZGF0YSl9KX07aWYoIU1vZHVsZVtcInRoaXNQcm9ncmFtXCJdJiZwcm9jZXNzLmFyZ3YubGVuZ3RoPjEpe3RoaXNQcm9ncmFtPXByb2Nlc3MuYXJndlsxXS5yZXBsYWNlKC9cXFxcL2csXCIvXCIpfWFyZ3VtZW50c189cHJvY2Vzcy5hcmd2LnNsaWNlKDIpO3F1aXRfPShzdGF0dXMsdG9UaHJvdyk9Pntwcm9jZXNzLmV4aXRDb2RlPXN0YXR1czt0aHJvdyB0b1Rocm93fTtNb2R1bGVbXCJpbnNwZWN0XCJdPSgpPT5cIltFbXNjcmlwdGVuIE1vZHVsZSBvYmplY3RdXCJ9ZWxzZSBpZihFTlZJUk9OTUVOVF9JU19XRUJ8fEVOVklST05NRU5UX0lTX1dPUktFUil7aWYoRU5WSVJPTk1FTlRfSVNfV09SS0VSKXtzY3JpcHREaXJlY3Rvcnk9c2VsZi5sb2NhdGlvbi5ocmVmfWVsc2UgaWYodHlwZW9mIGRvY3VtZW50IT1cInVuZGVmaW5lZFwiJiZkb2N1bWVudC5jdXJyZW50U2NyaXB0KXtzY3JpcHREaXJlY3Rvcnk9ZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmN9aWYoX3NjcmlwdERpcil7c2NyaXB0RGlyZWN0b3J5PV9zY3JpcHREaXJ9aWYoc2NyaXB0RGlyZWN0b3J5LmluZGV4T2YoXCJibG9iOlwiKSE9PTApe3NjcmlwdERpcmVjdG9yeT1zY3JpcHREaXJlY3Rvcnkuc3Vic3RyKDAsc2NyaXB0RGlyZWN0b3J5LnJlcGxhY2UoL1s/I10uKi8sXCJcIikubGFzdEluZGV4T2YoXCIvXCIpKzEpfWVsc2V7c2NyaXB0RGlyZWN0b3J5PVwiXCJ9e3JlYWRfPXVybD0+e3ZhciB4aHI9bmV3IFhNTEh0dHBSZXF1ZXN0O3hoci5vcGVuKFwiR0VUXCIsdXJsLGZhbHNlKTt4aHIuc2VuZChudWxsKTtyZXR1cm4geGhyLnJlc3BvbnNlVGV4dH07aWYoRU5WSVJPTk1FTlRfSVNfV09SS0VSKXtyZWFkQmluYXJ5PXVybD0+e3ZhciB4aHI9bmV3IFhNTEh0dHBSZXF1ZXN0O3hoci5vcGVuKFwiR0VUXCIsdXJsLGZhbHNlKTt4aHIucmVzcG9uc2VUeXBlPVwiYXJyYXlidWZmZXJcIjt4aHIuc2VuZChudWxsKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoeGhyLnJlc3BvbnNlKX19cmVhZEFzeW5jPSh1cmwsb25sb2FkLG9uZXJyb3IpPT57dmFyIHhocj1uZXcgWE1MSHR0cFJlcXVlc3Q7eGhyLm9wZW4oXCJHRVRcIix1cmwsdHJ1ZSk7eGhyLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCI7eGhyLm9ubG9hZD0oKT0+e2lmKHhoci5zdGF0dXM9PTIwMHx8eGhyLnN0YXR1cz09MCYmeGhyLnJlc3BvbnNlKXtvbmxvYWQoeGhyLnJlc3BvbnNlKTtyZXR1cm59b25lcnJvcigpfTt4aHIub25lcnJvcj1vbmVycm9yO3hoci5zZW5kKG51bGwpfX1zZXRXaW5kb3dUaXRsZT10aXRsZT0+ZG9jdW1lbnQudGl0bGU9dGl0bGV9ZWxzZXt9dmFyIG91dD1Nb2R1bGVbXCJwcmludFwiXXx8Y29uc29sZS5sb2cuYmluZChjb25zb2xlKTt2YXIgZXJyPU1vZHVsZVtcInByaW50RXJyXCJdfHxjb25zb2xlLmVycm9yLmJpbmQoY29uc29sZSk7T2JqZWN0LmFzc2lnbihNb2R1bGUsbW9kdWxlT3ZlcnJpZGVzKTttb2R1bGVPdmVycmlkZXM9bnVsbDtpZihNb2R1bGVbXCJhcmd1bWVudHNcIl0pYXJndW1lbnRzXz1Nb2R1bGVbXCJhcmd1bWVudHNcIl07aWYoTW9kdWxlW1widGhpc1Byb2dyYW1cIl0pdGhpc1Byb2dyYW09TW9kdWxlW1widGhpc1Byb2dyYW1cIl07aWYoTW9kdWxlW1wicXVpdFwiXSlxdWl0Xz1Nb2R1bGVbXCJxdWl0XCJdO3ZhciB3YXNtQmluYXJ5O2lmKE1vZHVsZVtcIndhc21CaW5hcnlcIl0pd2FzbUJpbmFyeT1Nb2R1bGVbXCJ3YXNtQmluYXJ5XCJdO3ZhciBub0V4aXRSdW50aW1lPU1vZHVsZVtcIm5vRXhpdFJ1bnRpbWVcIl18fHRydWU7aWYodHlwZW9mIFdlYkFzc2VtYmx5IT1cIm9iamVjdFwiKXthYm9ydChcIm5vIG5hdGl2ZSB3YXNtIHN1cHBvcnQgZGV0ZWN0ZWRcIil9dmFyIHdhc21NZW1vcnk7dmFyIEFCT1JUPWZhbHNlO3ZhciBFWElUU1RBVFVTO2Z1bmN0aW9uIGFzc2VydChjb25kaXRpb24sdGV4dCl7aWYoIWNvbmRpdGlvbil7YWJvcnQodGV4dCl9fXZhciBIRUFQOCxIRUFQVTgsSEVBUDE2LEhFQVBVMTYsSEVBUDMyLEhFQVBVMzIsSEVBUEYzMixIRUFQRjY0O2Z1bmN0aW9uIHVwZGF0ZU1lbW9yeVZpZXdzKCl7dmFyIGI9d2FzbU1lbW9yeS5idWZmZXI7TW9kdWxlW1wiSEVBUDhcIl09SEVBUDg9bmV3IEludDhBcnJheShiKTtNb2R1bGVbXCJIRUFQMTZcIl09SEVBUDE2PW5ldyBJbnQxNkFycmF5KGIpO01vZHVsZVtcIkhFQVAzMlwiXT1IRUFQMzI9bmV3IEludDMyQXJyYXkoYik7TW9kdWxlW1wiSEVBUFU4XCJdPUhFQVBVOD1uZXcgVWludDhBcnJheShiKTtNb2R1bGVbXCJIRUFQVTE2XCJdPUhFQVBVMTY9bmV3IFVpbnQxNkFycmF5KGIpO01vZHVsZVtcIkhFQVBVMzJcIl09SEVBUFUzMj1uZXcgVWludDMyQXJyYXkoYik7TW9kdWxlW1wiSEVBUEYzMlwiXT1IRUFQRjMyPW5ldyBGbG9hdDMyQXJyYXkoYik7TW9kdWxlW1wiSEVBUEY2NFwiXT1IRUFQRjY0PW5ldyBGbG9hdDY0QXJyYXkoYil9dmFyIHdhc21UYWJsZTt2YXIgX19BVFBSRVJVTl9fPVtdO3ZhciBfX0FUSU5JVF9fPVtdO3ZhciBfX0FUTUFJTl9fPVtdO3ZhciBfX0FUUE9TVFJVTl9fPVtdO3ZhciBydW50aW1lSW5pdGlhbGl6ZWQ9ZmFsc2U7dmFyIHJ1bnRpbWVLZWVwYWxpdmVDb3VudGVyPTA7ZnVuY3Rpb24ga2VlcFJ1bnRpbWVBbGl2ZSgpe3JldHVybiBub0V4aXRSdW50aW1lfHxydW50aW1lS2VlcGFsaXZlQ291bnRlcj4wfWZ1bmN0aW9uIHByZVJ1bigpe2lmKE1vZHVsZVtcInByZVJ1blwiXSl7aWYodHlwZW9mIE1vZHVsZVtcInByZVJ1blwiXT09XCJmdW5jdGlvblwiKU1vZHVsZVtcInByZVJ1blwiXT1bTW9kdWxlW1wicHJlUnVuXCJdXTt3aGlsZShNb2R1bGVbXCJwcmVSdW5cIl0ubGVuZ3RoKXthZGRPblByZVJ1bihNb2R1bGVbXCJwcmVSdW5cIl0uc2hpZnQoKSl9fWNhbGxSdW50aW1lQ2FsbGJhY2tzKF9fQVRQUkVSVU5fXyl9ZnVuY3Rpb24gaW5pdFJ1bnRpbWUoKXtydW50aW1lSW5pdGlhbGl6ZWQ9dHJ1ZTtjYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUSU5JVF9fKX1mdW5jdGlvbiBwcmVNYWluKCl7Y2FsbFJ1bnRpbWVDYWxsYmFja3MoX19BVE1BSU5fXyl9ZnVuY3Rpb24gcG9zdFJ1bigpe2lmKE1vZHVsZVtcInBvc3RSdW5cIl0pe2lmKHR5cGVvZiBNb2R1bGVbXCJwb3N0UnVuXCJdPT1cImZ1bmN0aW9uXCIpTW9kdWxlW1wicG9zdFJ1blwiXT1bTW9kdWxlW1wicG9zdFJ1blwiXV07d2hpbGUoTW9kdWxlW1wicG9zdFJ1blwiXS5sZW5ndGgpe2FkZE9uUG9zdFJ1bihNb2R1bGVbXCJwb3N0UnVuXCJdLnNoaWZ0KCkpfX1jYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUUE9TVFJVTl9fKX1mdW5jdGlvbiBhZGRPblByZVJ1bihjYil7X19BVFBSRVJVTl9fLnVuc2hpZnQoY2IpfWZ1bmN0aW9uIGFkZE9uSW5pdChjYil7X19BVElOSVRfXy51bnNoaWZ0KGNiKX1mdW5jdGlvbiBhZGRPblBvc3RSdW4oY2Ipe19fQVRQT1NUUlVOX18udW5zaGlmdChjYil9dmFyIHJ1bkRlcGVuZGVuY2llcz0wO3ZhciBydW5EZXBlbmRlbmN5V2F0Y2hlcj1udWxsO3ZhciBkZXBlbmRlbmNpZXNGdWxmaWxsZWQ9bnVsbDtmdW5jdGlvbiBhZGRSdW5EZXBlbmRlbmN5KGlkKXtydW5EZXBlbmRlbmNpZXMrKztpZihNb2R1bGVbXCJtb25pdG9yUnVuRGVwZW5kZW5jaWVzXCJdKXtNb2R1bGVbXCJtb25pdG9yUnVuRGVwZW5kZW5jaWVzXCJdKHJ1bkRlcGVuZGVuY2llcyl9fWZ1bmN0aW9uIHJlbW92ZVJ1bkRlcGVuZGVuY3koaWQpe3J1bkRlcGVuZGVuY2llcy0tO2lmKE1vZHVsZVtcIm1vbml0b3JSdW5EZXBlbmRlbmNpZXNcIl0pe01vZHVsZVtcIm1vbml0b3JSdW5EZXBlbmRlbmNpZXNcIl0ocnVuRGVwZW5kZW5jaWVzKX1pZihydW5EZXBlbmRlbmNpZXM9PTApe2lmKHJ1bkRlcGVuZGVuY3lXYXRjaGVyIT09bnVsbCl7Y2xlYXJJbnRlcnZhbChydW5EZXBlbmRlbmN5V2F0Y2hlcik7cnVuRGVwZW5kZW5jeVdhdGNoZXI9bnVsbH1pZihkZXBlbmRlbmNpZXNGdWxmaWxsZWQpe3ZhciBjYWxsYmFjaz1kZXBlbmRlbmNpZXNGdWxmaWxsZWQ7ZGVwZW5kZW5jaWVzRnVsZmlsbGVkPW51bGw7Y2FsbGJhY2soKX19fWZ1bmN0aW9uIGFib3J0KHdoYXQpe2lmKE1vZHVsZVtcIm9uQWJvcnRcIl0pe01vZHVsZVtcIm9uQWJvcnRcIl0od2hhdCl9d2hhdD1cIkFib3J0ZWQoXCIrd2hhdCtcIilcIjtlcnIod2hhdCk7QUJPUlQ9dHJ1ZTtFWElUU1RBVFVTPTE7d2hhdCs9XCIuIEJ1aWxkIHdpdGggLXNBU1NFUlRJT05TIGZvciBtb3JlIGluZm8uXCI7dmFyIGU9bmV3IFdlYkFzc2VtYmx5LlJ1bnRpbWVFcnJvcih3aGF0KTtyZWFkeVByb21pc2VSZWplY3QoZSk7dGhyb3cgZX12YXIgZGF0YVVSSVByZWZpeD1cImRhdGE6YXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtO2Jhc2U2NCxcIjtmdW5jdGlvbiBpc0RhdGFVUkkoZmlsZW5hbWUpe3JldHVybiBmaWxlbmFtZS5zdGFydHNXaXRoKGRhdGFVUklQcmVmaXgpfWZ1bmN0aW9uIGlzRmlsZVVSSShmaWxlbmFtZSl7cmV0dXJuIGZpbGVuYW1lLnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpfXZhciB3YXNtQmluYXJ5RmlsZTt3YXNtQmluYXJ5RmlsZT1cIi4vZHVja2RiLW12cC53YXNtXCI7aWYoIWlzRGF0YVVSSSh3YXNtQmluYXJ5RmlsZSkpe3dhc21CaW5hcnlGaWxlPWxvY2F0ZUZpbGUod2FzbUJpbmFyeUZpbGUpfWZ1bmN0aW9uIGdldEJpbmFyeShmaWxlKXt0cnl7aWYoZmlsZT09d2FzbUJpbmFyeUZpbGUmJndhc21CaW5hcnkpe3JldHVybiBuZXcgVWludDhBcnJheSh3YXNtQmluYXJ5KX1pZihyZWFkQmluYXJ5KXtyZXR1cm4gcmVhZEJpbmFyeShmaWxlKX10aHJvd1wiYm90aCBhc3luYyBhbmQgc3luYyBmZXRjaGluZyBvZiB0aGUgd2FzbSBmYWlsZWRcIn1jYXRjaChlcnIpe2Fib3J0KGVycil9fWZ1bmN0aW9uIGdldEJpbmFyeVByb21pc2UoYmluYXJ5RmlsZSl7aWYoIXdhc21CaW5hcnkmJihFTlZJUk9OTUVOVF9JU19XRUJ8fEVOVklST05NRU5UX0lTX1dPUktFUikpe2lmKHR5cGVvZiBmZXRjaD09XCJmdW5jdGlvblwiKXtyZXR1cm4gZmV0Y2goYmluYXJ5RmlsZSx7Y3JlZGVudGlhbHM6XCJzYW1lLW9yaWdpblwifSkudGhlbihyZXNwb25zZT0+e2lmKCFyZXNwb25zZVtcIm9rXCJdKXt0aHJvd1wiZmFpbGVkIHRvIGxvYWQgd2FzbSBiaW5hcnkgZmlsZSBhdCAnXCIrYmluYXJ5RmlsZStcIidcIn1yZXR1cm4gcmVzcG9uc2VbXCJhcnJheUJ1ZmZlclwiXSgpfSkuY2F0Y2goKCk9PmdldEJpbmFyeShiaW5hcnlGaWxlKSl9fXJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT5nZXRCaW5hcnkoYmluYXJ5RmlsZSkpfWZ1bmN0aW9uIGluc3RhbnRpYXRlQXJyYXlCdWZmZXIoYmluYXJ5RmlsZSxpbXBvcnRzLHJlY2VpdmVyKXtyZXR1cm4gZ2V0QmluYXJ5UHJvbWlzZShiaW5hcnlGaWxlKS50aGVuKGJpbmFyeT0+e3JldHVybiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShiaW5hcnksaW1wb3J0cyl9KS50aGVuKGluc3RhbmNlPT57cmV0dXJuIGluc3RhbmNlfSkudGhlbihyZWNlaXZlcixyZWFzb249PntlcnIoXCJmYWlsZWQgdG8gYXN5bmNocm9ub3VzbHkgcHJlcGFyZSB3YXNtOiBcIityZWFzb24pO2Fib3J0KHJlYXNvbil9KX1mdW5jdGlvbiBpbnN0YW50aWF0ZUFzeW5jKGJpbmFyeSxiaW5hcnlGaWxlLGltcG9ydHMsY2FsbGJhY2spe2lmKCFiaW5hcnkmJnR5cGVvZiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZz09XCJmdW5jdGlvblwiJiYhaXNEYXRhVVJJKGJpbmFyeUZpbGUpJiYhRU5WSVJPTk1FTlRfSVNfTk9ERSYmdHlwZW9mIGZldGNoPT1cImZ1bmN0aW9uXCIpe3JldHVybiBmZXRjaChiaW5hcnlGaWxlLHtjcmVkZW50aWFsczpcInNhbWUtb3JpZ2luXCJ9KS50aGVuKHJlc3BvbnNlPT57dmFyIHJlc3VsdD1XZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyhyZXNwb25zZSxpbXBvcnRzKTtyZXR1cm4gcmVzdWx0LnRoZW4oY2FsbGJhY2ssZnVuY3Rpb24ocmVhc29uKXtlcnIoXCJ3YXNtIHN0cmVhbWluZyBjb21waWxlIGZhaWxlZDogXCIrcmVhc29uKTtlcnIoXCJmYWxsaW5nIGJhY2sgdG8gQXJyYXlCdWZmZXIgaW5zdGFudGlhdGlvblwiKTtyZXR1cm4gaW5zdGFudGlhdGVBcnJheUJ1ZmZlcihiaW5hcnlGaWxlLGltcG9ydHMsY2FsbGJhY2spfSl9KX1lbHNle3JldHVybiBpbnN0YW50aWF0ZUFycmF5QnVmZmVyKGJpbmFyeUZpbGUsaW1wb3J0cyxjYWxsYmFjayl9fWZ1bmN0aW9uIGNyZWF0ZVdhc20oKXt2YXIgaW5mbz17XCJhXCI6d2FzbUltcG9ydHN9O2Z1bmN0aW9uIHJlY2VpdmVJbnN0YW5jZShpbnN0YW5jZSxtb2R1bGUpe3ZhciBleHBvcnRzPWluc3RhbmNlLmV4cG9ydHM7TW9kdWxlW1wiYXNtXCJdPWV4cG9ydHM7d2FzbU1lbW9yeT1Nb2R1bGVbXCJhc21cIl1bXCJSYVwiXTt1cGRhdGVNZW1vcnlWaWV3cygpO3dhc21UYWJsZT1Nb2R1bGVbXCJhc21cIl1bXCJVYVwiXTthZGRPbkluaXQoTW9kdWxlW1wiYXNtXCJdW1wiU2FcIl0pO3JlbW92ZVJ1bkRlcGVuZGVuY3koXCJ3YXNtLWluc3RhbnRpYXRlXCIpO3JldHVybiBleHBvcnRzfWFkZFJ1bkRlcGVuZGVuY3koXCJ3YXNtLWluc3RhbnRpYXRlXCIpO2Z1bmN0aW9uIHJlY2VpdmVJbnN0YW50aWF0aW9uUmVzdWx0KHJlc3VsdCl7cmVjZWl2ZUluc3RhbmNlKHJlc3VsdFtcImluc3RhbmNlXCJdKX1pZihNb2R1bGVbXCJpbnN0YW50aWF0ZVdhc21cIl0pe3RyeXtyZXR1cm4gTW9kdWxlW1wiaW5zdGFudGlhdGVXYXNtXCJdKGluZm8scmVjZWl2ZUluc3RhbmNlKX1jYXRjaChlKXtlcnIoXCJNb2R1bGUuaW5zdGFudGlhdGVXYXNtIGNhbGxiYWNrIGZhaWxlZCB3aXRoIGVycm9yOiBcIitlKTtyZWFkeVByb21pc2VSZWplY3QoZSl9fWluc3RhbnRpYXRlQXN5bmMod2FzbUJpbmFyeSx3YXNtQmluYXJ5RmlsZSxpbmZvLHJlY2VpdmVJbnN0YW50aWF0aW9uUmVzdWx0KS5jYXRjaChyZWFkeVByb21pc2VSZWplY3QpO3JldHVybnt9fXZhciB0ZW1wRG91YmxlO3ZhciB0ZW1wSTY0O2Z1bmN0aW9uIEV4aXRTdGF0dXMoc3RhdHVzKXt0aGlzLm5hbWU9XCJFeGl0U3RhdHVzXCI7dGhpcy5tZXNzYWdlPWBQcm9ncmFtIHRlcm1pbmF0ZWQgd2l0aCBleGl0KCR7c3RhdHVzfSlgO3RoaXMuc3RhdHVzPXN0YXR1c31mdW5jdGlvbiBjYWxsUnVudGltZUNhbGxiYWNrcyhjYWxsYmFja3Mpe3doaWxlKGNhbGxiYWNrcy5sZW5ndGg+MCl7Y2FsbGJhY2tzLnNoaWZ0KCkoTW9kdWxlKX19ZnVuY3Rpb24gX1hNTF9HZXRCdWZmZXIoKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiBYTUxfR2V0QnVmZmVyXCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfWE1MX0dldEVycm9yQ29kZSgpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IFhNTF9HZXRFcnJvckNvZGVcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF9YTUxfUGFyc2UoKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiBYTUxfUGFyc2VcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF9YTUxfUGFyc2VCdWZmZXIoKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiBYTUxfUGFyc2VCdWZmZXJcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF9YTUxfUGFyc2VyQ3JlYXRlKCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogWE1MX1BhcnNlckNyZWF0ZVwiKTthYm9ydCgtMSl9ZnVuY3Rpb24gX1hNTF9QYXJzZXJGcmVlKCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogWE1MX1BhcnNlckZyZWVcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF9YTUxfUmVzdW1lUGFyc2VyKCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogWE1MX1Jlc3VtZVBhcnNlclwiKTthYm9ydCgtMSl9ZnVuY3Rpb24gX1hNTF9TZXRDaGFyYWN0ZXJEYXRhSGFuZGxlcigpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IFhNTF9TZXRDaGFyYWN0ZXJEYXRhSGFuZGxlclwiKTthYm9ydCgtMSl9ZnVuY3Rpb24gX1hNTF9TZXRFbGVtZW50SGFuZGxlcigpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IFhNTF9TZXRFbGVtZW50SGFuZGxlclwiKTthYm9ydCgtMSl9ZnVuY3Rpb24gX1hNTF9TZXRVc2VyRGF0YSgpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IFhNTF9TZXRVc2VyRGF0YVwiKTthYm9ydCgtMSl9ZnVuY3Rpb24gX1hNTF9TdG9wUGFyc2VyKCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogWE1MX1N0b3BQYXJzZXJcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIEV4Y2VwdGlvbkluZm8oZXhjUHRyKXt0aGlzLmV4Y1B0cj1leGNQdHI7dGhpcy5wdHI9ZXhjUHRyLTI0O3RoaXMuc2V0X3R5cGU9ZnVuY3Rpb24odHlwZSl7SEVBUFUzMlt0aGlzLnB0cis0Pj4+Ml09dHlwZX07dGhpcy5nZXRfdHlwZT1mdW5jdGlvbigpe3JldHVybiBIRUFQVTMyW3RoaXMucHRyKzQ+Pj4yXX07dGhpcy5zZXRfZGVzdHJ1Y3Rvcj1mdW5jdGlvbihkZXN0cnVjdG9yKXtIRUFQVTMyW3RoaXMucHRyKzg+Pj4yXT1kZXN0cnVjdG9yfTt0aGlzLmdldF9kZXN0cnVjdG9yPWZ1bmN0aW9uKCl7cmV0dXJuIEhFQVBVMzJbdGhpcy5wdHIrOD4+PjJdfTt0aGlzLnNldF9jYXVnaHQ9ZnVuY3Rpb24oY2F1Z2h0KXtjYXVnaHQ9Y2F1Z2h0PzE6MDtIRUFQOFt0aGlzLnB0cisxMj4+PjBdPWNhdWdodH07dGhpcy5nZXRfY2F1Z2h0PWZ1bmN0aW9uKCl7cmV0dXJuIEhFQVA4W3RoaXMucHRyKzEyPj4+MF0hPTB9O3RoaXMuc2V0X3JldGhyb3duPWZ1bmN0aW9uKHJldGhyb3duKXtyZXRocm93bj1yZXRocm93bj8xOjA7SEVBUDhbdGhpcy5wdHIrMTM+Pj4wXT1yZXRocm93bn07dGhpcy5nZXRfcmV0aHJvd249ZnVuY3Rpb24oKXtyZXR1cm4gSEVBUDhbdGhpcy5wdHIrMTM+Pj4wXSE9MH07dGhpcy5pbml0PWZ1bmN0aW9uKHR5cGUsZGVzdHJ1Y3Rvcil7dGhpcy5zZXRfYWRqdXN0ZWRfcHRyKDApO3RoaXMuc2V0X3R5cGUodHlwZSk7dGhpcy5zZXRfZGVzdHJ1Y3RvcihkZXN0cnVjdG9yKX07dGhpcy5zZXRfYWRqdXN0ZWRfcHRyPWZ1bmN0aW9uKGFkanVzdGVkUHRyKXtIRUFQVTMyW3RoaXMucHRyKzE2Pj4+Ml09YWRqdXN0ZWRQdHJ9O3RoaXMuZ2V0X2FkanVzdGVkX3B0cj1mdW5jdGlvbigpe3JldHVybiBIRUFQVTMyW3RoaXMucHRyKzE2Pj4+Ml19O3RoaXMuZ2V0X2V4Y2VwdGlvbl9wdHI9ZnVuY3Rpb24oKXt2YXIgaXNQb2ludGVyPV9fX2N4YV9pc19wb2ludGVyX3R5cGUodGhpcy5nZXRfdHlwZSgpKTtpZihpc1BvaW50ZXIpe3JldHVybiBIRUFQVTMyW3RoaXMuZXhjUHRyPj4+Ml19dmFyIGFkanVzdGVkPXRoaXMuZ2V0X2FkanVzdGVkX3B0cigpO2lmKGFkanVzdGVkIT09MClyZXR1cm4gYWRqdXN0ZWQ7cmV0dXJuIHRoaXMuZXhjUHRyfX12YXIgZXhjZXB0aW9uTGFzdD0wO3ZhciB1bmNhdWdodEV4Y2VwdGlvbkNvdW50PTA7ZnVuY3Rpb24gX19fY3hhX3Rocm93KHB0cix0eXBlLGRlc3RydWN0b3Ipe3ZhciBpbmZvPW5ldyBFeGNlcHRpb25JbmZvKHB0cik7aW5mby5pbml0KHR5cGUsZGVzdHJ1Y3Rvcik7ZXhjZXB0aW9uTGFzdD1wdHI7dW5jYXVnaHRFeGNlcHRpb25Db3VudCsrO3Rocm93IGV4Y2VwdGlvbkxhc3R9dmFyIGRsb3Blbk1pc3NpbmdFcnJvcj1cIlRvIHVzZSBkbG9wZW4sIHlvdSBuZWVkIGVuYWJsZSBkeW5hbWljIGxpbmtpbmcsIHNlZSBodHRwczovL2Vtc2NyaXB0ZW4ub3JnL2RvY3MvY29tcGlsaW5nL0R5bmFtaWMtTGlua2luZy5odG1sXCI7ZnVuY3Rpb24gX19fZGxzeW0oaGFuZGxlLHN5bWJvbCxyYSl7YWJvcnQoZGxvcGVuTWlzc2luZ0Vycm9yKX12YXIgVVRGOERlY29kZXI9dHlwZW9mIFRleHREZWNvZGVyIT1cInVuZGVmaW5lZFwiP25ldyBUZXh0RGVjb2RlcihcInV0ZjhcIik6dW5kZWZpbmVkO2Z1bmN0aW9uIFVURjhBcnJheVRvU3RyaW5nKGhlYXBPckFycmF5LGlkeCxtYXhCeXRlc1RvUmVhZCl7aWR4Pj4+PTA7dmFyIGVuZElkeD1pZHgrbWF4Qnl0ZXNUb1JlYWQ7dmFyIGVuZFB0cj1pZHg7d2hpbGUoaGVhcE9yQXJyYXlbZW5kUHRyXSYmIShlbmRQdHI+PWVuZElkeCkpKytlbmRQdHI7aWYoZW5kUHRyLWlkeD4xNiYmaGVhcE9yQXJyYXkuYnVmZmVyJiZVVEY4RGVjb2Rlcil7cmV0dXJuIFVURjhEZWNvZGVyLmRlY29kZShoZWFwT3JBcnJheS5zdWJhcnJheShpZHgsZW5kUHRyKSl9dmFyIHN0cj1cIlwiO3doaWxlKGlkeDxlbmRQdHIpe3ZhciB1MD1oZWFwT3JBcnJheVtpZHgrK107aWYoISh1MCYxMjgpKXtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUodTApO2NvbnRpbnVlfXZhciB1MT1oZWFwT3JBcnJheVtpZHgrK10mNjM7aWYoKHUwJjIyNCk9PTE5Mil7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKCh1MCYzMSk8PDZ8dTEpO2NvbnRpbnVlfXZhciB1Mj1oZWFwT3JBcnJheVtpZHgrK10mNjM7aWYoKHUwJjI0MCk9PTIyNCl7dTA9KHUwJjE1KTw8MTJ8dTE8PDZ8dTJ9ZWxzZXt1MD0odTAmNyk8PDE4fHUxPDwxMnx1Mjw8NnxoZWFwT3JBcnJheVtpZHgrK10mNjN9aWYodTA8NjU1MzYpe3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSh1MCl9ZWxzZXt2YXIgY2g9dTAtNjU1MzY7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2fGNoPj4xMCw1NjMyMHxjaCYxMDIzKX19cmV0dXJuIHN0cn1mdW5jdGlvbiBVVEY4VG9TdHJpbmcocHRyLG1heEJ5dGVzVG9SZWFkKXtwdHI+Pj49MDtyZXR1cm4gcHRyP1VURjhBcnJheVRvU3RyaW5nKEhFQVBVOCxwdHIsbWF4Qnl0ZXNUb1JlYWQpOlwiXCJ9dmFyIFNZU0NBTExTPXt2YXJhcmdzOnVuZGVmaW5lZCxnZXQ6ZnVuY3Rpb24oKXtTWVNDQUxMUy52YXJhcmdzKz00O3ZhciByZXQ9SEVBUDMyW1NZU0NBTExTLnZhcmFyZ3MtND4+PjJdO3JldHVybiByZXR9LGdldFN0cjpmdW5jdGlvbihwdHIpe3ZhciByZXQ9VVRGOFRvU3RyaW5nKHB0cik7cmV0dXJuIHJldH19O2Z1bmN0aW9uIF9fX3N5c2NhbGxfX25ld3NlbGVjdChuZmRzLHJlYWRmZHMsd3JpdGVmZHMsZXhjZXB0ZmRzLHRpbWVvdXQpe3ZhciB0b3RhbD0wO3ZhciBzcmNSZWFkTG93PXJlYWRmZHM/SEVBUDMyW3JlYWRmZHM+Pj4yXTowLHNyY1JlYWRIaWdoPXJlYWRmZHM/SEVBUDMyW3JlYWRmZHMrND4+PjJdOjA7dmFyIHNyY1dyaXRlTG93PXdyaXRlZmRzP0hFQVAzMlt3cml0ZWZkcz4+PjJdOjAsc3JjV3JpdGVIaWdoPXdyaXRlZmRzP0hFQVAzMlt3cml0ZWZkcys0Pj4+Ml06MDt2YXIgc3JjRXhjZXB0TG93PWV4Y2VwdGZkcz9IRUFQMzJbZXhjZXB0ZmRzPj4+Ml06MCxzcmNFeGNlcHRIaWdoPWV4Y2VwdGZkcz9IRUFQMzJbZXhjZXB0ZmRzKzQ+Pj4yXTowO3ZhciBkc3RSZWFkTG93PTAsZHN0UmVhZEhpZ2g9MDt2YXIgZHN0V3JpdGVMb3c9MCxkc3RXcml0ZUhpZ2g9MDt2YXIgZHN0RXhjZXB0TG93PTAsZHN0RXhjZXB0SGlnaD0wO3ZhciBhbGxMb3c9KHJlYWRmZHM/SEVBUDMyW3JlYWRmZHM+Pj4yXTowKXwod3JpdGVmZHM/SEVBUDMyW3dyaXRlZmRzPj4+Ml06MCl8KGV4Y2VwdGZkcz9IRUFQMzJbZXhjZXB0ZmRzPj4+Ml06MCk7dmFyIGFsbEhpZ2g9KHJlYWRmZHM/SEVBUDMyW3JlYWRmZHMrND4+PjJdOjApfCh3cml0ZWZkcz9IRUFQMzJbd3JpdGVmZHMrND4+PjJdOjApfChleGNlcHRmZHM/SEVBUDMyW2V4Y2VwdGZkcys0Pj4+Ml06MCk7dmFyIGNoZWNrPWZ1bmN0aW9uKGZkLGxvdyxoaWdoLHZhbCl7cmV0dXJuIGZkPDMyP2xvdyZ2YWw6aGlnaCZ2YWx9O2Zvcih2YXIgZmQ9MDtmZDxuZmRzO2ZkKyspe3ZhciBtYXNrPTE8PGZkJTMyO2lmKCFjaGVjayhmZCxhbGxMb3csYWxsSGlnaCxtYXNrKSl7Y29udGludWV9dmFyIHN0cmVhbT1TWVNDQUxMUy5nZXRTdHJlYW1Gcm9tRkQoZmQpO3ZhciBmbGFncz1TWVNDQUxMUy5ERUZBVUxUX1BPTExNQVNLO2lmKHN0cmVhbS5zdHJlYW1fb3BzLnBvbGwpe2ZsYWdzPXN0cmVhbS5zdHJlYW1fb3BzLnBvbGwoc3RyZWFtKX1pZihmbGFncyYxJiZjaGVjayhmZCxzcmNSZWFkTG93LHNyY1JlYWRIaWdoLG1hc2spKXtmZDwzMj9kc3RSZWFkTG93PWRzdFJlYWRMb3d8bWFzazpkc3RSZWFkSGlnaD1kc3RSZWFkSGlnaHxtYXNrO3RvdGFsKyt9aWYoZmxhZ3MmNCYmY2hlY2soZmQsc3JjV3JpdGVMb3csc3JjV3JpdGVIaWdoLG1hc2spKXtmZDwzMj9kc3RXcml0ZUxvdz1kc3RXcml0ZUxvd3xtYXNrOmRzdFdyaXRlSGlnaD1kc3RXcml0ZUhpZ2h8bWFzazt0b3RhbCsrfWlmKGZsYWdzJjImJmNoZWNrKGZkLHNyY0V4Y2VwdExvdyxzcmNFeGNlcHRIaWdoLG1hc2spKXtmZDwzMj9kc3RFeGNlcHRMb3c9ZHN0RXhjZXB0TG93fG1hc2s6ZHN0RXhjZXB0SGlnaD1kc3RFeGNlcHRIaWdofG1hc2s7dG90YWwrK319aWYocmVhZGZkcyl7SEVBUDMyW3JlYWRmZHM+Pj4yXT1kc3RSZWFkTG93O0hFQVAzMltyZWFkZmRzKzQ+Pj4yXT1kc3RSZWFkSGlnaH1pZih3cml0ZWZkcyl7SEVBUDMyW3dyaXRlZmRzPj4+Ml09ZHN0V3JpdGVMb3c7SEVBUDMyW3dyaXRlZmRzKzQ+Pj4yXT1kc3RXcml0ZUhpZ2h9aWYoZXhjZXB0ZmRzKXtIRUFQMzJbZXhjZXB0ZmRzPj4+Ml09ZHN0RXhjZXB0TG93O0hFQVAzMltleGNlcHRmZHMrND4+PjJdPWRzdEV4Y2VwdEhpZ2h9cmV0dXJuIHRvdGFsfWZ1bmN0aW9uIFNPQ0tGUygpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246ICRTT0NLRlNcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIEZTKCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogJEZTXCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBnZXRTb2NrZXRGcm9tRkQoZmQpe3ZhciBzb2NrZXQ9U09DS0ZTLmdldFNvY2tldChmZCk7aWYoIXNvY2tldCl0aHJvdyBuZXcgRlMuRXJybm9FcnJvcig4KTtyZXR1cm4gc29ja2V0fWZ1bmN0aW9uIGluZXROdG9wNChhZGRyKXtyZXR1cm4oYWRkciYyNTUpK1wiLlwiKyhhZGRyPj44JjI1NSkrXCIuXCIrKGFkZHI+PjE2JjI1NSkrXCIuXCIrKGFkZHI+PjI0JjI1NSl9ZnVuY3Rpb24gaW5ldE50b3A2KGludHMpe3ZhciBzdHI9XCJcIjt2YXIgd29yZD0wO3ZhciBsb25nZXN0PTA7dmFyIGxhc3R6ZXJvPTA7dmFyIHpzdGFydD0wO3ZhciBsZW49MDt2YXIgaT0wO3ZhciBwYXJ0cz1baW50c1swXSY2NTUzNSxpbnRzWzBdPj4xNixpbnRzWzFdJjY1NTM1LGludHNbMV0+PjE2LGludHNbMl0mNjU1MzUsaW50c1syXT4+MTYsaW50c1szXSY2NTUzNSxpbnRzWzNdPj4xNl07dmFyIGhhc2lwdjQ9dHJ1ZTt2YXIgdjRwYXJ0PVwiXCI7Zm9yKGk9MDtpPDU7aSsrKXtpZihwYXJ0c1tpXSE9PTApe2hhc2lwdjQ9ZmFsc2U7YnJlYWt9fWlmKGhhc2lwdjQpe3Y0cGFydD1pbmV0TnRvcDQocGFydHNbNl18cGFydHNbN108PDE2KTtpZihwYXJ0c1s1XT09PS0xKXtzdHI9XCI6OmZmZmY6XCI7c3RyKz12NHBhcnQ7cmV0dXJuIHN0cn1pZihwYXJ0c1s1XT09PTApe3N0cj1cIjo6XCI7aWYodjRwYXJ0PT09XCIwLjAuMC4wXCIpdjRwYXJ0PVwiXCI7aWYodjRwYXJ0PT09XCIwLjAuMC4xXCIpdjRwYXJ0PVwiMVwiO3N0cis9djRwYXJ0O3JldHVybiBzdHJ9fWZvcih3b3JkPTA7d29yZDw4O3dvcmQrKyl7aWYocGFydHNbd29yZF09PT0wKXtpZih3b3JkLWxhc3R6ZXJvPjEpe2xlbj0wfWxhc3R6ZXJvPXdvcmQ7bGVuKyt9aWYobGVuPmxvbmdlc3Qpe2xvbmdlc3Q9bGVuO3pzdGFydD13b3JkLWxvbmdlc3QrMX19Zm9yKHdvcmQ9MDt3b3JkPDg7d29yZCsrKXtpZihsb25nZXN0PjEpe2lmKHBhcnRzW3dvcmRdPT09MCYmd29yZD49enN0YXJ0JiZ3b3JkPHpzdGFydCtsb25nZXN0KXtpZih3b3JkPT09enN0YXJ0KXtzdHIrPVwiOlwiO2lmKHpzdGFydD09PTApc3RyKz1cIjpcIn1jb250aW51ZX19c3RyKz1OdW1iZXIoX250b2hzKHBhcnRzW3dvcmRdJjY1NTM1KSkudG9TdHJpbmcoMTYpO3N0cis9d29yZDw3P1wiOlwiOlwiXCJ9cmV0dXJuIHN0cn1mdW5jdGlvbiByZWFkU29ja2FkZHIoc2Esc2FsZW4pe3ZhciBmYW1pbHk9SEVBUDE2W3NhPj4+MV07dmFyIHBvcnQ9X250b2hzKEhFQVBVMTZbc2ErMj4+PjFdKTt2YXIgYWRkcjtzd2l0Y2goZmFtaWx5KXtjYXNlIDI6aWYoc2FsZW4hPT0xNil7cmV0dXJue2Vycm5vOjI4fX1hZGRyPUhFQVAzMltzYSs0Pj4+Ml07YWRkcj1pbmV0TnRvcDQoYWRkcik7YnJlYWs7Y2FzZSAxMDppZihzYWxlbiE9PTI4KXtyZXR1cm57ZXJybm86Mjh9fWFkZHI9W0hFQVAzMltzYSs4Pj4+Ml0sSEVBUDMyW3NhKzEyPj4+Ml0sSEVBUDMyW3NhKzE2Pj4+Ml0sSEVBUDMyW3NhKzIwPj4+Ml1dO2FkZHI9aW5ldE50b3A2KGFkZHIpO2JyZWFrO2RlZmF1bHQ6cmV0dXJue2Vycm5vOjV9fXJldHVybntmYW1pbHk6ZmFtaWx5LGFkZHI6YWRkcixwb3J0OnBvcnR9fWZ1bmN0aW9uIGluZXRQdG9uNChzdHIpe3ZhciBiPXN0ci5zcGxpdChcIi5cIik7Zm9yKHZhciBpPTA7aTw0O2krKyl7dmFyIHRtcD1OdW1iZXIoYltpXSk7aWYoaXNOYU4odG1wKSlyZXR1cm4gbnVsbDtiW2ldPXRtcH1yZXR1cm4oYlswXXxiWzFdPDw4fGJbMl08PDE2fGJbM108PDI0KT4+PjB9ZnVuY3Rpb24ganN0b2lfcShzdHIpe3JldHVybiBwYXJzZUludChzdHIpfWZ1bmN0aW9uIGluZXRQdG9uNihzdHIpe3ZhciB3b3Jkczt2YXIgdyxvZmZzZXQsejt2YXIgdmFsaWQ2cmVneD0vXigoPz0uKjo6KSg/IS4qOjouKzo6KSg6Oik/KFtcXGRBLUZdezEsNH06KDp8XFxiKXwpezV9fChbXFxkQS1GXXsxLDR9Oil7Nn0pKCgoW1xcZEEtRl17MSw0fSgoPyFcXDMpOjp8OlxcYnwkKSl8KD8hXFwyXFwzKSl7Mn18KCgoMlswLTRdfDFcXGR8WzEtOV0pP1xcZHwyNVswLTVdKVxcLj9cXGIpezR9KSQvaTt2YXIgcGFydHM9W107aWYoIXZhbGlkNnJlZ3gudGVzdChzdHIpKXtyZXR1cm4gbnVsbH1pZihzdHI9PT1cIjo6XCIpe3JldHVyblswLDAsMCwwLDAsMCwwLDBdfWlmKHN0ci5zdGFydHNXaXRoKFwiOjpcIikpe3N0cj1zdHIucmVwbGFjZShcIjo6XCIsXCJaOlwiKX1lbHNle3N0cj1zdHIucmVwbGFjZShcIjo6XCIsXCI6WjpcIil9aWYoc3RyLmluZGV4T2YoXCIuXCIpPjApe3N0cj1zdHIucmVwbGFjZShuZXcgUmVnRXhwKFwiWy5dXCIsXCJnXCIpLFwiOlwiKTt3b3Jkcz1zdHIuc3BsaXQoXCI6XCIpO3dvcmRzW3dvcmRzLmxlbmd0aC00XT1qc3RvaV9xKHdvcmRzW3dvcmRzLmxlbmd0aC00XSkranN0b2lfcSh3b3Jkc1t3b3Jkcy5sZW5ndGgtM10pKjI1Njt3b3Jkc1t3b3Jkcy5sZW5ndGgtM109anN0b2lfcSh3b3Jkc1t3b3Jkcy5sZW5ndGgtMl0pK2pzdG9pX3Eod29yZHNbd29yZHMubGVuZ3RoLTFdKSoyNTY7d29yZHM9d29yZHMuc2xpY2UoMCx3b3Jkcy5sZW5ndGgtMil9ZWxzZXt3b3Jkcz1zdHIuc3BsaXQoXCI6XCIpfW9mZnNldD0wO3o9MDtmb3Iodz0wO3c8d29yZHMubGVuZ3RoO3crKyl7aWYodHlwZW9mIHdvcmRzW3ddPT1cInN0cmluZ1wiKXtpZih3b3Jkc1t3XT09PVwiWlwiKXtmb3Ioej0wO3o8OC13b3Jkcy5sZW5ndGgrMTt6Kyspe3BhcnRzW3crel09MH1vZmZzZXQ9ei0xfWVsc2V7cGFydHNbdytvZmZzZXRdPV9odG9ucyhwYXJzZUludCh3b3Jkc1t3XSwxNikpfX1lbHNle3BhcnRzW3crb2Zmc2V0XT13b3Jkc1t3XX19cmV0dXJuW3BhcnRzWzFdPDwxNnxwYXJ0c1swXSxwYXJ0c1szXTw8MTZ8cGFydHNbMl0scGFydHNbNV08PDE2fHBhcnRzWzRdLHBhcnRzWzddPDwxNnxwYXJ0c1s2XV19dmFyIEROUz17YWRkcmVzc19tYXA6e2lkOjEsYWRkcnM6e30sbmFtZXM6e319LGxvb2t1cF9uYW1lOmZ1bmN0aW9uKG5hbWUpe3ZhciByZXM9aW5ldFB0b240KG5hbWUpO2lmKHJlcyE9PW51bGwpe3JldHVybiBuYW1lfXJlcz1pbmV0UHRvbjYobmFtZSk7aWYocmVzIT09bnVsbCl7cmV0dXJuIG5hbWV9dmFyIGFkZHI7aWYoRE5TLmFkZHJlc3NfbWFwLmFkZHJzW25hbWVdKXthZGRyPUROUy5hZGRyZXNzX21hcC5hZGRyc1tuYW1lXX1lbHNle3ZhciBpZD1ETlMuYWRkcmVzc19tYXAuaWQrKzthc3NlcnQoaWQ8NjU1MzUsXCJleGNlZWRlZCBtYXggYWRkcmVzcyBtYXBwaW5ncyBvZiA2NTUzNVwiKTthZGRyPVwiMTcyLjI5LlwiKyhpZCYyNTUpK1wiLlwiKyhpZCY2NTI4MCk7RE5TLmFkZHJlc3NfbWFwLm5hbWVzW2FkZHJdPW5hbWU7RE5TLmFkZHJlc3NfbWFwLmFkZHJzW25hbWVdPWFkZHJ9cmV0dXJuIGFkZHJ9LGxvb2t1cF9hZGRyOmZ1bmN0aW9uKGFkZHIpe2lmKEROUy5hZGRyZXNzX21hcC5uYW1lc1thZGRyXSl7cmV0dXJuIEROUy5hZGRyZXNzX21hcC5uYW1lc1thZGRyXX1yZXR1cm4gbnVsbH19O2Z1bmN0aW9uIGdldFNvY2tldEFkZHJlc3MoYWRkcnAsYWRkcmxlbixhbGxvd051bGwpe2lmKGFsbG93TnVsbCYmYWRkcnA9PT0wKXJldHVybiBudWxsO3ZhciBpbmZvPXJlYWRTb2NrYWRkcihhZGRycCxhZGRybGVuKTtpZihpbmZvLmVycm5vKXRocm93IG5ldyBGUy5FcnJub0Vycm9yKGluZm8uZXJybm8pO2luZm8uYWRkcj1ETlMubG9va3VwX2FkZHIoaW5mby5hZGRyKXx8aW5mby5hZGRyO3JldHVybiBpbmZvfWZ1bmN0aW9uIF9fX3N5c2NhbGxfYmluZChmZCxhZGRyLGFkZHJsZW4sZDEsZDIsZDMpe3ZhciBzb2NrPWdldFNvY2tldEZyb21GRChmZCk7dmFyIGluZm89Z2V0U29ja2V0QWRkcmVzcyhhZGRyLGFkZHJsZW4pO3NvY2suc29ja19vcHMuYmluZChzb2NrLGluZm8uYWRkcixpbmZvLnBvcnQpO3JldHVybiAwfWZ1bmN0aW9uIF9fX3N5c2NhbGxfY29ubmVjdChmZCxhZGRyLGFkZHJsZW4sZDEsZDIsZDMpe3ZhciBzb2NrPWdldFNvY2tldEZyb21GRChmZCk7dmFyIGluZm89Z2V0U29ja2V0QWRkcmVzcyhhZGRyLGFkZHJsZW4pO3NvY2suc29ja19vcHMuY29ubmVjdChzb2NrLGluZm8uYWRkcixpbmZvLnBvcnQpO3JldHVybiAwfWZ1bmN0aW9uIF9fX3N5c2NhbGxfZmFjY2Vzc2F0KGRpcmZkLHBhdGgsYW1vZGUsZmxhZ3Mpe31mdW5jdGlvbiBfX19zeXNjYWxsX2ZjbnRsNjQoZmQsY21kLHZhcmFyZ3Mpe1NZU0NBTExTLnZhcmFyZ3M9dmFyYXJncztyZXR1cm4gMH1mdW5jdGlvbiBfX19zeXNjYWxsX2ZzdGF0NjQoZmQsYnVmKXt9ZnVuY3Rpb24gX19fc3lzY2FsbF9mdHJ1bmNhdGU2NChmZCxsZW5ndGhfbG93LGxlbmd0aF9oaWdoKXt9ZnVuY3Rpb24gc3RyaW5nVG9VVEY4QXJyYXkoc3RyLGhlYXAsb3V0SWR4LG1heEJ5dGVzVG9Xcml0ZSl7b3V0SWR4Pj4+PTA7aWYoIShtYXhCeXRlc1RvV3JpdGU+MCkpcmV0dXJuIDA7dmFyIHN0YXJ0SWR4PW91dElkeDt2YXIgZW5kSWR4PW91dElkeCttYXhCeXRlc1RvV3JpdGUtMTtmb3IodmFyIGk9MDtpPHN0ci5sZW5ndGg7KytpKXt2YXIgdT1zdHIuY2hhckNvZGVBdChpKTtpZih1Pj01NTI5NiYmdTw9NTczNDMpe3ZhciB1MT1zdHIuY2hhckNvZGVBdCgrK2kpO3U9NjU1MzYrKCh1JjEwMjMpPDwxMCl8dTEmMTAyM31pZih1PD0xMjcpe2lmKG91dElkeD49ZW5kSWR4KWJyZWFrO2hlYXBbb3V0SWR4Kys+Pj4wXT11fWVsc2UgaWYodTw9MjA0Nyl7aWYob3V0SWR4KzE+PWVuZElkeClicmVhaztoZWFwW291dElkeCsrPj4+MF09MTkyfHU+PjY7aGVhcFtvdXRJZHgrKz4+PjBdPTEyOHx1JjYzfWVsc2UgaWYodTw9NjU1MzUpe2lmKG91dElkeCsyPj1lbmRJZHgpYnJlYWs7aGVhcFtvdXRJZHgrKz4+PjBdPTIyNHx1Pj4xMjtoZWFwW291dElkeCsrPj4+MF09MTI4fHU+PjYmNjM7aGVhcFtvdXRJZHgrKz4+PjBdPTEyOHx1JjYzfWVsc2V7aWYob3V0SWR4KzM+PWVuZElkeClicmVhaztoZWFwW291dElkeCsrPj4+MF09MjQwfHU+PjE4O2hlYXBbb3V0SWR4Kys+Pj4wXT0xMjh8dT4+MTImNjM7aGVhcFtvdXRJZHgrKz4+PjBdPTEyOHx1Pj42JjYzO2hlYXBbb3V0SWR4Kys+Pj4wXT0xMjh8dSY2M319aGVhcFtvdXRJZHg+Pj4wXT0wO3JldHVybiBvdXRJZHgtc3RhcnRJZHh9ZnVuY3Rpb24gc3RyaW5nVG9VVEY4KHN0cixvdXRQdHIsbWF4Qnl0ZXNUb1dyaXRlKXtyZXR1cm4gc3RyaW5nVG9VVEY4QXJyYXkoc3RyLEhFQVBVOCxvdXRQdHIsbWF4Qnl0ZXNUb1dyaXRlKX1mdW5jdGlvbiBfX19zeXNjYWxsX2dldGRlbnRzNjQoZmQsZGlycCxjb3VudCl7fWZ1bmN0aW9uIHplcm9NZW1vcnkoYWRkcmVzcyxzaXplKXtIRUFQVTguZmlsbCgwLGFkZHJlc3MsYWRkcmVzcytzaXplKTtyZXR1cm4gYWRkcmVzc31mdW5jdGlvbiB3cml0ZVNvY2thZGRyKHNhLGZhbWlseSxhZGRyLHBvcnQsYWRkcmxlbil7c3dpdGNoKGZhbWlseSl7Y2FzZSAyOmFkZHI9aW5ldFB0b240KGFkZHIpO3plcm9NZW1vcnkoc2EsMTYpO2lmKGFkZHJsZW4pe0hFQVAzMlthZGRybGVuPj4+Ml09MTZ9SEVBUDE2W3NhPj4+MV09ZmFtaWx5O0hFQVAzMltzYSs0Pj4+Ml09YWRkcjtIRUFQMTZbc2ErMj4+PjFdPV9odG9ucyhwb3J0KTticmVhaztjYXNlIDEwOmFkZHI9aW5ldFB0b242KGFkZHIpO3plcm9NZW1vcnkoc2EsMjgpO2lmKGFkZHJsZW4pe0hFQVAzMlthZGRybGVuPj4+Ml09Mjh9SEVBUDMyW3NhPj4+Ml09ZmFtaWx5O0hFQVAzMltzYSs4Pj4+Ml09YWRkclswXTtIRUFQMzJbc2ErMTI+Pj4yXT1hZGRyWzFdO0hFQVAzMltzYSsxNj4+PjJdPWFkZHJbMl07SEVBUDMyW3NhKzIwPj4+Ml09YWRkclszXTtIRUFQMTZbc2ErMj4+PjFdPV9odG9ucyhwb3J0KTticmVhaztkZWZhdWx0OnJldHVybiA1fXJldHVybiAwfWZ1bmN0aW9uIF9fX3N5c2NhbGxfZ2V0cGVlcm5hbWUoZmQsYWRkcixhZGRybGVuLGQxLGQyLGQzKXt2YXIgc29jaz1nZXRTb2NrZXRGcm9tRkQoZmQpO2lmKCFzb2NrLmRhZGRyKXtyZXR1cm4tNTN9dmFyIGVycm5vPXdyaXRlU29ja2FkZHIoYWRkcixzb2NrLmZhbWlseSxETlMubG9va3VwX25hbWUoc29jay5kYWRkciksc29jay5kcG9ydCxhZGRybGVuKTtyZXR1cm4gMH1mdW5jdGlvbiBfX19zeXNjYWxsX2dldHNvY2tvcHQoZmQsbGV2ZWwsb3B0bmFtZSxvcHR2YWwsb3B0bGVuLGQxKXt2YXIgc29jaz1nZXRTb2NrZXRGcm9tRkQoZmQpO2lmKGxldmVsPT09MSl7aWYob3B0bmFtZT09PTQpe0hFQVAzMltvcHR2YWw+Pj4yXT1zb2NrLmVycm9yO0hFQVAzMltvcHRsZW4+Pj4yXT00O3NvY2suZXJyb3I9bnVsbDtyZXR1cm4gMH19cmV0dXJuLTUwfWZ1bmN0aW9uIF9fX3N5c2NhbGxfaW9jdGwoZmQsb3AsdmFyYXJncyl7U1lTQ0FMTFMudmFyYXJncz12YXJhcmdzO3JldHVybiAwfWZ1bmN0aW9uIF9fX3N5c2NhbGxfbHN0YXQ2NChwYXRoLGJ1Zil7fWZ1bmN0aW9uIF9fX3N5c2NhbGxfbWtkaXJhdChkaXJmZCxwYXRoLG1vZGUpe31mdW5jdGlvbiBfX19zeXNjYWxsX25ld2ZzdGF0YXQoZGlyZmQscGF0aCxidWYsZmxhZ3Mpe31mdW5jdGlvbiBfX19zeXNjYWxsX29wZW5hdChkaXJmZCxwYXRoLGZsYWdzLHZhcmFyZ3Mpe1NZU0NBTExTLnZhcmFyZ3M9dmFyYXJnc31mdW5jdGlvbiBfX19zeXNjYWxsX3JlY3Zmcm9tKGZkLGJ1ZixsZW4sZmxhZ3MsYWRkcixhZGRybGVuKXt2YXIgc29jaz1nZXRTb2NrZXRGcm9tRkQoZmQpO3ZhciBtc2c9c29jay5zb2NrX29wcy5yZWN2bXNnKHNvY2ssbGVuKTtpZighbXNnKXJldHVybiAwO2lmKGFkZHIpe3ZhciBlcnJubz13cml0ZVNvY2thZGRyKGFkZHIsc29jay5mYW1pbHksRE5TLmxvb2t1cF9uYW1lKG1zZy5hZGRyKSxtc2cucG9ydCxhZGRybGVuKX1IRUFQVTguc2V0KG1zZy5idWZmZXIsYnVmPj4+MCk7cmV0dXJuIG1zZy5idWZmZXIuYnl0ZUxlbmd0aH1mdW5jdGlvbiBfX19zeXNjYWxsX3JlbmFtZWF0KG9sZGRpcmZkLG9sZHBhdGgsbmV3ZGlyZmQsbmV3cGF0aCl7fWZ1bmN0aW9uIF9fX3N5c2NhbGxfcm1kaXIocGF0aCl7fWZ1bmN0aW9uIF9fX3N5c2NhbGxfc2VuZHRvKGZkLG1lc3NhZ2UsbGVuZ3RoLGZsYWdzLGFkZHIsYWRkcl9sZW4pe31mdW5jdGlvbiBfX19zeXNjYWxsX3NvY2tldChkb21haW4sdHlwZSxwcm90b2NvbCl7fWZ1bmN0aW9uIF9fX3N5c2NhbGxfc3RhdDY0KHBhdGgsYnVmKXt9ZnVuY3Rpb24gX19fc3lzY2FsbF91bmxpbmthdChkaXJmZCxwYXRoLGZsYWdzKXt9dmFyIG5vd0lzTW9ub3RvbmljPXRydWU7ZnVuY3Rpb24gX19lbXNjcmlwdGVuX2dldF9ub3dfaXNfbW9ub3RvbmljKCl7cmV0dXJuIG5vd0lzTW9ub3RvbmljfWZ1bmN0aW9uIHJlYWRJNTNGcm9tSTY0KHB0cil7cmV0dXJuIEhFQVBVMzJbcHRyPj4+Ml0rSEVBUDMyW3B0cis0Pj4+Ml0qNDI5NDk2NzI5Nn1mdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpe3JldHVybiB5ZWFyJTQ9PT0wJiYoeWVhciUxMDAhPT0wfHx5ZWFyJTQwMD09PTApfXZhciBNT05USF9EQVlTX0xFQVBfQ1VNVUxBVElWRT1bMCwzMSw2MCw5MSwxMjEsMTUyLDE4MiwyMTMsMjQ0LDI3NCwzMDUsMzM1XTt2YXIgTU9OVEhfREFZU19SRUdVTEFSX0NVTVVMQVRJVkU9WzAsMzEsNTksOTAsMTIwLDE1MSwxODEsMjEyLDI0MywyNzMsMzA0LDMzNF07ZnVuY3Rpb24geWRheUZyb21EYXRlKGRhdGUpe3ZhciBsZWFwPWlzTGVhcFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpKTt2YXIgbW9udGhEYXlzQ3VtdWxhdGl2ZT1sZWFwP01PTlRIX0RBWVNfTEVBUF9DVU1VTEFUSVZFOk1PTlRIX0RBWVNfUkVHVUxBUl9DVU1VTEFUSVZFO3ZhciB5ZGF5PW1vbnRoRGF5c0N1bXVsYXRpdmVbZGF0ZS5nZXRNb250aCgpXStkYXRlLmdldERhdGUoKS0xO3JldHVybiB5ZGF5fWZ1bmN0aW9uIF9fbG9jYWx0aW1lX2pzKHRpbWUsdG1QdHIpe3ZhciBkYXRlPW5ldyBEYXRlKHJlYWRJNTNGcm9tSTY0KHRpbWUpKjFlMyk7SEVBUDMyW3RtUHRyPj4+Ml09ZGF0ZS5nZXRTZWNvbmRzKCk7SEVBUDMyW3RtUHRyKzQ+Pj4yXT1kYXRlLmdldE1pbnV0ZXMoKTtIRUFQMzJbdG1QdHIrOD4+PjJdPWRhdGUuZ2V0SG91cnMoKTtIRUFQMzJbdG1QdHIrMTI+Pj4yXT1kYXRlLmdldERhdGUoKTtIRUFQMzJbdG1QdHIrMTY+Pj4yXT1kYXRlLmdldE1vbnRoKCk7SEVBUDMyW3RtUHRyKzIwPj4+Ml09ZGF0ZS5nZXRGdWxsWWVhcigpLTE5MDA7SEVBUDMyW3RtUHRyKzI0Pj4+Ml09ZGF0ZS5nZXREYXkoKTt2YXIgeWRheT15ZGF5RnJvbURhdGUoZGF0ZSl8MDtIRUFQMzJbdG1QdHIrMjg+Pj4yXT15ZGF5O0hFQVAzMlt0bVB0ciszNj4+PjJdPS0oZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKjYwKTt2YXIgc3RhcnQ9bmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLDAsMSk7dmFyIHN1bW1lck9mZnNldD1uZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksNiwxKS5nZXRUaW1lem9uZU9mZnNldCgpO3ZhciB3aW50ZXJPZmZzZXQ9c3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKTt2YXIgZHN0PShzdW1tZXJPZmZzZXQhPXdpbnRlck9mZnNldCYmZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpPT1NYXRoLm1pbih3aW50ZXJPZmZzZXQsc3VtbWVyT2Zmc2V0KSl8MDtIRUFQMzJbdG1QdHIrMzI+Pj4yXT1kc3R9ZnVuY3Rpb24gbGVuZ3RoQnl0ZXNVVEY4KHN0cil7dmFyIGxlbj0wO2Zvcih2YXIgaT0wO2k8c3RyLmxlbmd0aDsrK2kpe3ZhciBjPXN0ci5jaGFyQ29kZUF0KGkpO2lmKGM8PTEyNyl7bGVuKyt9ZWxzZSBpZihjPD0yMDQ3KXtsZW4rPTJ9ZWxzZSBpZihjPj01NTI5NiYmYzw9NTczNDMpe2xlbis9NDsrK2l9ZWxzZXtsZW4rPTN9fXJldHVybiBsZW59ZnVuY3Rpb24gc3RyaW5nVG9OZXdVVEY4KHN0cil7dmFyIHNpemU9bGVuZ3RoQnl0ZXNVVEY4KHN0cikrMTt2YXIgcmV0PV9tYWxsb2Moc2l6ZSk7aWYocmV0KXN0cmluZ1RvVVRGOChzdHIscmV0LHNpemUpO3JldHVybiByZXR9ZnVuY3Rpb24gX190enNldF9qcyh0aW1lem9uZSxkYXlsaWdodCx0em5hbWUpe3ZhciBjdXJyZW50WWVhcj0obmV3IERhdGUpLmdldEZ1bGxZZWFyKCk7dmFyIHdpbnRlcj1uZXcgRGF0ZShjdXJyZW50WWVhciwwLDEpO3ZhciBzdW1tZXI9bmV3IERhdGUoY3VycmVudFllYXIsNiwxKTt2YXIgd2ludGVyT2Zmc2V0PXdpbnRlci5nZXRUaW1lem9uZU9mZnNldCgpO3ZhciBzdW1tZXJPZmZzZXQ9c3VtbWVyLmdldFRpbWV6b25lT2Zmc2V0KCk7dmFyIHN0ZFRpbWV6b25lT2Zmc2V0PU1hdGgubWF4KHdpbnRlck9mZnNldCxzdW1tZXJPZmZzZXQpO0hFQVBVMzJbdGltZXpvbmU+Pj4yXT1zdGRUaW1lem9uZU9mZnNldCo2MDtIRUFQMzJbZGF5bGlnaHQ+Pj4yXT1OdW1iZXIod2ludGVyT2Zmc2V0IT1zdW1tZXJPZmZzZXQpO2Z1bmN0aW9uIGV4dHJhY3Rab25lKGRhdGUpe3ZhciBtYXRjaD1kYXRlLnRvVGltZVN0cmluZygpLm1hdGNoKC9cXCgoW0EtWmEteiBdKylcXCkkLyk7cmV0dXJuIG1hdGNoP21hdGNoWzFdOlwiR01UXCJ9dmFyIHdpbnRlck5hbWU9ZXh0cmFjdFpvbmUod2ludGVyKTt2YXIgc3VtbWVyTmFtZT1leHRyYWN0Wm9uZShzdW1tZXIpO3ZhciB3aW50ZXJOYW1lUHRyPXN0cmluZ1RvTmV3VVRGOCh3aW50ZXJOYW1lKTt2YXIgc3VtbWVyTmFtZVB0cj1zdHJpbmdUb05ld1VURjgoc3VtbWVyTmFtZSk7aWYoc3VtbWVyT2Zmc2V0PHdpbnRlck9mZnNldCl7SEVBUFUzMlt0em5hbWU+Pj4yXT13aW50ZXJOYW1lUHRyO0hFQVBVMzJbdHpuYW1lKzQ+Pj4yXT1zdW1tZXJOYW1lUHRyfWVsc2V7SEVBUFUzMlt0em5hbWU+Pj4yXT1zdW1tZXJOYW1lUHRyO0hFQVBVMzJbdHpuYW1lKzQ+Pj4yXT13aW50ZXJOYW1lUHRyfX1mdW5jdGlvbiBfYWJvcnQoKXthYm9ydChcIlwiKX1mdW5jdGlvbiBfZGxvcGVuKGZpbGVuYW1lLGZsYWdzKXthYm9ydChkbG9wZW5NaXNzaW5nRXJyb3IpfWZ1bmN0aW9uIF9kdWNrZGJfd2ViX2ZzX2RpcmVjdG9yeV9jcmVhdGUocGF0aCxwYXRoTGVuKXtyZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS5jcmVhdGVEaXJlY3RvcnkoTW9kdWxlLHBhdGgscGF0aExlbil9ZnVuY3Rpb24gX2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X2V4aXN0cyhwYXRoLHBhdGhMZW4pe3JldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLmNoZWNrRGlyZWN0b3J5KE1vZHVsZSxwYXRoLHBhdGhMZW4pfWZ1bmN0aW9uIF9kdWNrZGJfd2ViX2ZzX2RpcmVjdG9yeV9saXN0X2ZpbGVzKHBhdGgscGF0aExlbil7cmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUubGlzdERpcmVjdG9yeUVudHJpZXMoTW9kdWxlLHBhdGgscGF0aExlbil9ZnVuY3Rpb24gX2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X3JlbW92ZShwYXRoLHBhdGhMZW4pe3JldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLnJlbW92ZURpcmVjdG9yeShNb2R1bGUscGF0aCxwYXRoTGVuKX1mdW5jdGlvbiBfZHVja2RiX3dlYl9mc19maWxlX2Nsb3NlKGZpbGVJZCl7cmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUuY2xvc2VGaWxlKE1vZHVsZSxmaWxlSWQpfWZ1bmN0aW9uIF9kdWNrZGJfd2ViX2ZzX2ZpbGVfZXhpc3RzKHBhdGgscGF0aExlbil7cmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUuY2hlY2tGaWxlKE1vZHVsZSxwYXRoLHBhdGhMZW4pfWZ1bmN0aW9uIF9kdWNrZGJfd2ViX2ZzX2ZpbGVfZ2V0X2xhc3RfbW9kaWZpZWRfdGltZShmaWxlSWQpe3JldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLmdldExhc3RGaWxlTW9kaWZpY2F0aW9uVGltZShNb2R1bGUsZmlsZUlkKX1mdW5jdGlvbiBfZHVja2RiX3dlYl9mc19maWxlX21vdmUoZnJvbSxmcm9tTGVuLHRvLHRvTGVuKXtyZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS5tb3ZlRmlsZShNb2R1bGUsZnJvbSxmcm9tTGVuLHRvLHRvTGVuKX1mdW5jdGlvbiBfZHVja2RiX3dlYl9mc19maWxlX29wZW4oZmlsZUlkLGZsYWdzKXtyZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS5vcGVuRmlsZShNb2R1bGUsZmlsZUlkLGZsYWdzKX1mdW5jdGlvbiBfZHVja2RiX3dlYl9mc19maWxlX3JlYWQoZmlsZUlkLGJ1ZixzaXplLGxvY2F0aW9uKXtyZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS5yZWFkRmlsZShNb2R1bGUsZmlsZUlkLGJ1ZixzaXplLGxvY2F0aW9uKX1mdW5jdGlvbiBfZHVja2RiX3dlYl9mc19maWxlX3RydW5jYXRlKGZpbGVJZCxuZXdTaXplKXtyZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS50cnVuY2F0ZUZpbGUoTW9kdWxlLGZpbGVJZCxuZXdTaXplKX1mdW5jdGlvbiBfZHVja2RiX3dlYl9mc19maWxlX3dyaXRlKGZpbGVJZCxidWYsc2l6ZSxsb2NhdGlvbil7cmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUud3JpdGVGaWxlKE1vZHVsZSxmaWxlSWQsYnVmLHNpemUsbG9jYXRpb24pfWZ1bmN0aW9uIF9kdWNrZGJfd2ViX2ZzX2dldF9kZWZhdWx0X2RhdGFfcHJvdG9jb2woTW9kdWxlKXtyZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS5nZXREZWZhdWx0RGF0YVByb3RvY29sKE1vZHVsZSl9ZnVuY3Rpb24gX2R1Y2tkYl93ZWJfZnNfZ2xvYihwYXRoLHBhdGhMZW4pe3JldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLmdsb2IoTW9kdWxlLHBhdGgscGF0aExlbil9ZnVuY3Rpb24gX2R1Y2tkYl93ZWJfdGVzdF9wbGF0Zm9ybV9mZWF0dXJlKGZlYXR1cmUpe3JldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLnRlc3RQbGF0Zm9ybUZlYXR1cmUoTW9kdWxlLGZlYXR1cmUpfWZ1bmN0aW9uIF9kdWNrZGJfd2ViX3VkZl9zY2FsYXJfY2FsbChmdW5jSWQsZGVzY1B0cixkZXNjU2l6ZSxwdHJzUHRyLHB0cnNTaXplLHJlc3BvbnNlKXtyZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS5jYWxsU2NhbGFyVURGKE1vZHVsZSxmdW5jSWQsZGVzY1B0cixkZXNjU2l6ZSxwdHJzUHRyLHB0cnNTaXplLHJlc3BvbnNlKX1mdW5jdGlvbiBfZW1zY3JpcHRlbl9kYXRlX25vdygpe3JldHVybiBEYXRlLm5vdygpfWZ1bmN0aW9uIGdldEhlYXBNYXgoKXtyZXR1cm4gNDI5NDkwMTc2MH1mdW5jdGlvbiBfZW1zY3JpcHRlbl9nZXRfaGVhcF9tYXgoKXtyZXR1cm4gZ2V0SGVhcE1heCgpfXZhciBfZW1zY3JpcHRlbl9nZXRfbm93O2lmKEVOVklST05NRU5UX0lTX05PREUpe2dsb2JhbC5wZXJmb3JtYW5jZT1yZXF1aXJlKFwicGVyZl9ob29rc1wiKS5wZXJmb3JtYW5jZX1fZW1zY3JpcHRlbl9nZXRfbm93PSgpPT5wZXJmb3JtYW5jZS5ub3coKTtmdW5jdGlvbiBfZW1zY3JpcHRlbl9tZW1jcHlfYmlnKGRlc3Qsc3JjLG51bSl7SEVBUFU4LmNvcHlXaXRoaW4oZGVzdD4+PjAsc3JjPj4+MCxzcmMrbnVtPj4+MCl9ZnVuY3Rpb24gZW1zY3JpcHRlbl9yZWFsbG9jX2J1ZmZlcihzaXplKXt2YXIgYj13YXNtTWVtb3J5LmJ1ZmZlcjt2YXIgcGFnZXM9c2l6ZS1iLmJ5dGVMZW5ndGgrNjU1MzU+Pj4xNjt0cnl7d2FzbU1lbW9yeS5ncm93KHBhZ2VzKTt1cGRhdGVNZW1vcnlWaWV3cygpO3JldHVybiAxfWNhdGNoKGUpe319ZnVuY3Rpb24gX2Vtc2NyaXB0ZW5fcmVzaXplX2hlYXAocmVxdWVzdGVkU2l6ZSl7dmFyIG9sZFNpemU9SEVBUFU4Lmxlbmd0aDtyZXF1ZXN0ZWRTaXplPXJlcXVlc3RlZFNpemU+Pj4wO3ZhciBtYXhIZWFwU2l6ZT1nZXRIZWFwTWF4KCk7aWYocmVxdWVzdGVkU2l6ZT5tYXhIZWFwU2l6ZSl7cmV0dXJuIGZhbHNlfXZhciBhbGlnblVwPSh4LG11bHRpcGxlKT0+eCsobXVsdGlwbGUteCVtdWx0aXBsZSklbXVsdGlwbGU7Zm9yKHZhciBjdXREb3duPTE7Y3V0RG93bjw9NDtjdXREb3duKj0yKXt2YXIgb3Zlckdyb3duSGVhcFNpemU9b2xkU2l6ZSooMSsuMi9jdXREb3duKTtvdmVyR3Jvd25IZWFwU2l6ZT1NYXRoLm1pbihvdmVyR3Jvd25IZWFwU2l6ZSxyZXF1ZXN0ZWRTaXplKzEwMDY2MzI5Nik7dmFyIG5ld1NpemU9TWF0aC5taW4obWF4SGVhcFNpemUsYWxpZ25VcChNYXRoLm1heChyZXF1ZXN0ZWRTaXplLG92ZXJHcm93bkhlYXBTaXplKSw2NTUzNikpO3ZhciByZXBsYWNlbWVudD1lbXNjcmlwdGVuX3JlYWxsb2NfYnVmZmVyKG5ld1NpemUpO2lmKHJlcGxhY2VtZW50KXtyZXR1cm4gdHJ1ZX19cmV0dXJuIGZhbHNlfXZhciBFTlY9e307ZnVuY3Rpb24gZ2V0RXhlY3V0YWJsZU5hbWUoKXtyZXR1cm4gdGhpc1Byb2dyYW18fFwiLi90aGlzLnByb2dyYW1cIn1mdW5jdGlvbiBnZXRFbnZTdHJpbmdzKCl7aWYoIWdldEVudlN0cmluZ3Muc3RyaW5ncyl7dmFyIGxhbmc9KHR5cGVvZiBuYXZpZ2F0b3I9PVwib2JqZWN0XCImJm5hdmlnYXRvci5sYW5ndWFnZXMmJm5hdmlnYXRvci5sYW5ndWFnZXNbMF18fFwiQ1wiKS5yZXBsYWNlKFwiLVwiLFwiX1wiKStcIi5VVEYtOFwiO3ZhciBlbnY9e1wiVVNFUlwiOlwid2ViX3VzZXJcIixcIkxPR05BTUVcIjpcIndlYl91c2VyXCIsXCJQQVRIXCI6XCIvXCIsXCJQV0RcIjpcIi9cIixcIkhPTUVcIjpcIi9ob21lL3dlYl91c2VyXCIsXCJMQU5HXCI6bGFuZyxcIl9cIjpnZXRFeGVjdXRhYmxlTmFtZSgpfTtmb3IodmFyIHggaW4gRU5WKXtpZihFTlZbeF09PT11bmRlZmluZWQpZGVsZXRlIGVudlt4XTtlbHNlIGVudlt4XT1FTlZbeF19dmFyIHN0cmluZ3M9W107Zm9yKHZhciB4IGluIGVudil7c3RyaW5ncy5wdXNoKGAke3h9PSR7ZW52W3hdfWApfWdldEVudlN0cmluZ3Muc3RyaW5ncz1zdHJpbmdzfXJldHVybiBnZXRFbnZTdHJpbmdzLnN0cmluZ3N9ZnVuY3Rpb24gc3RyaW5nVG9Bc2NpaShzdHIsYnVmZmVyKXtmb3IodmFyIGk9MDtpPHN0ci5sZW5ndGg7KytpKXtIRUFQOFtidWZmZXIrKz4+PjBdPXN0ci5jaGFyQ29kZUF0KGkpfUhFQVA4W2J1ZmZlcj4+PjBdPTB9ZnVuY3Rpb24gX2Vudmlyb25fZ2V0KF9fZW52aXJvbixlbnZpcm9uX2J1Zil7dmFyIGJ1ZlNpemU9MDtnZXRFbnZTdHJpbmdzKCkuZm9yRWFjaChmdW5jdGlvbihzdHJpbmcsaSl7dmFyIHB0cj1lbnZpcm9uX2J1ZitidWZTaXplO0hFQVBVMzJbX19lbnZpcm9uK2kqND4+PjJdPXB0cjtzdHJpbmdUb0FzY2lpKHN0cmluZyxwdHIpO2J1ZlNpemUrPXN0cmluZy5sZW5ndGgrMX0pO3JldHVybiAwfWZ1bmN0aW9uIF9lbnZpcm9uX3NpemVzX2dldChwZW52aXJvbl9jb3VudCxwZW52aXJvbl9idWZfc2l6ZSl7dmFyIHN0cmluZ3M9Z2V0RW52U3RyaW5ncygpO0hFQVBVMzJbcGVudmlyb25fY291bnQ+Pj4yXT1zdHJpbmdzLmxlbmd0aDt2YXIgYnVmU2l6ZT0wO3N0cmluZ3MuZm9yRWFjaChmdW5jdGlvbihzdHJpbmcpe2J1ZlNpemUrPXN0cmluZy5sZW5ndGgrMX0pO0hFQVBVMzJbcGVudmlyb25fYnVmX3NpemU+Pj4yXT1idWZTaXplO3JldHVybiAwfWZ1bmN0aW9uIF9mZF9jbG9zZShmZCl7cmV0dXJuIDUyfWZ1bmN0aW9uIF9mZF9mZHN0YXRfZ2V0KGZkLHBidWYpe3ZhciByaWdodHNCYXNlPTA7dmFyIHJpZ2h0c0luaGVyaXRpbmc9MDt2YXIgZmxhZ3M9MDt7dmFyIHR5cGU9MjtpZihmZD09MCl7cmlnaHRzQmFzZT0yfWVsc2UgaWYoZmQ9PTF8fGZkPT0yKXtyaWdodHNCYXNlPTY0fWZsYWdzPTF9SEVBUDhbcGJ1Zj4+PjBdPXR5cGU7SEVBUDE2W3BidWYrMj4+PjFdPWZsYWdzO3RlbXBJNjQ9W3JpZ2h0c0Jhc2U+Pj4wLCh0ZW1wRG91YmxlPXJpZ2h0c0Jhc2UsK01hdGguYWJzKHRlbXBEb3VibGUpPj0xP3RlbXBEb3VibGU+MD8rTWF0aC5mbG9vcih0ZW1wRG91YmxlLzQyOTQ5NjcyOTYpPj4+MDp+fitNYXRoLmNlaWwoKHRlbXBEb3VibGUtKyh+fnRlbXBEb3VibGU+Pj4wKSkvNDI5NDk2NzI5Nik+Pj4wOjApXSxIRUFQMzJbcGJ1Zis4Pj4+Ml09dGVtcEk2NFswXSxIRUFQMzJbcGJ1ZisxMj4+PjJdPXRlbXBJNjRbMV07dGVtcEk2ND1bcmlnaHRzSW5oZXJpdGluZz4+PjAsKHRlbXBEb3VibGU9cmlnaHRzSW5oZXJpdGluZywrTWF0aC5hYnModGVtcERvdWJsZSk+PTE/dGVtcERvdWJsZT4wPytNYXRoLmZsb29yKHRlbXBEb3VibGUvNDI5NDk2NzI5Nik+Pj4wOn5+K01hdGguY2VpbCgodGVtcERvdWJsZS0rKH5+dGVtcERvdWJsZT4+PjApKS80Mjk0OTY3Mjk2KT4+PjA6MCldLEhFQVAzMltwYnVmKzE2Pj4+Ml09dGVtcEk2NFswXSxIRUFQMzJbcGJ1ZisyMD4+PjJdPXRlbXBJNjRbMV07cmV0dXJuIDB9ZnVuY3Rpb24gX2ZkX3ByZWFkKGZkLGlvdixpb3ZjbnQsb2Zmc2V0X2xvdyxvZmZzZXRfaGlnaCxwbnVtKXtyZXR1cm4gNTJ9ZnVuY3Rpb24gX2ZkX3B3cml0ZShmZCxpb3YsaW92Y250LG9mZnNldF9sb3csb2Zmc2V0X2hpZ2gscG51bSl7cmV0dXJuIDUyfWZ1bmN0aW9uIF9mZF9yZWFkKGZkLGlvdixpb3ZjbnQscG51bSl7cmV0dXJuIDUyfWZ1bmN0aW9uIF9mZF9zZWVrKGZkLG9mZnNldF9sb3csb2Zmc2V0X2hpZ2gsd2hlbmNlLG5ld09mZnNldCl7cmV0dXJuIDcwfWZ1bmN0aW9uIF9mZF9zeW5jKGZkKXtyZXR1cm4gNTJ9dmFyIHByaW50Q2hhckJ1ZmZlcnM9W251bGwsW10sW11dO2Z1bmN0aW9uIHByaW50Q2hhcihzdHJlYW0sY3Vycil7dmFyIGJ1ZmZlcj1wcmludENoYXJCdWZmZXJzW3N0cmVhbV07aWYoY3Vycj09PTB8fGN1cnI9PT0xMCl7KHN0cmVhbT09PTE/b3V0OmVycikoVVRGOEFycmF5VG9TdHJpbmcoYnVmZmVyLDApKTtidWZmZXIubGVuZ3RoPTB9ZWxzZXtidWZmZXIucHVzaChjdXJyKX19ZnVuY3Rpb24gX2ZkX3dyaXRlKGZkLGlvdixpb3ZjbnQscG51bSl7dmFyIG51bT0wO2Zvcih2YXIgaT0wO2k8aW92Y250O2krKyl7dmFyIHB0cj1IRUFQVTMyW2lvdj4+PjJdO3ZhciBsZW49SEVBUFUzMltpb3YrND4+PjJdO2lvdis9ODtmb3IodmFyIGo9MDtqPGxlbjtqKyspe3ByaW50Q2hhcihmZCxIRUFQVThbcHRyK2o+Pj4wXSl9bnVtKz1sZW59SEVBUFUzMltwbnVtPj4+Ml09bnVtO3JldHVybiAwfWZ1bmN0aW9uIF9nZXRhZGRyaW5mbyhub2RlLHNlcnZpY2UsaGludCxvdXQpe3ZhciBhZGRyPTA7dmFyIHBvcnQ9MDt2YXIgZmxhZ3M9MDt2YXIgZmFtaWx5PTA7dmFyIHR5cGU9MDt2YXIgcHJvdG89MDt2YXIgYWk7ZnVuY3Rpb24gYWxsb2NhZGRyaW5mbyhmYW1pbHksdHlwZSxwcm90byxjYW5vbixhZGRyLHBvcnQpe3ZhciBzYSxzYWxlbixhaTt2YXIgZXJybm87c2FsZW49ZmFtaWx5PT09MTA/Mjg6MTY7YWRkcj1mYW1pbHk9PT0xMD9pbmV0TnRvcDYoYWRkcik6aW5ldE50b3A0KGFkZHIpO3NhPV9tYWxsb2Moc2FsZW4pO2Vycm5vPXdyaXRlU29ja2FkZHIoc2EsZmFtaWx5LGFkZHIscG9ydCk7YXNzZXJ0KCFlcnJubyk7YWk9X21hbGxvYygzMik7SEVBUDMyW2FpKzQ+Pj4yXT1mYW1pbHk7SEVBUDMyW2FpKzg+Pj4yXT10eXBlO0hFQVAzMlthaSsxMj4+PjJdPXByb3RvO0hFQVBVMzJbYWkrMjQ+Pj4yXT1jYW5vbjtIRUFQVTMyW2FpKzIwPj4+Ml09c2E7aWYoZmFtaWx5PT09MTApe0hFQVAzMlthaSsxNj4+PjJdPTI4fWVsc2V7SEVBUDMyW2FpKzE2Pj4+Ml09MTZ9SEVBUDMyW2FpKzI4Pj4+Ml09MDtyZXR1cm4gYWl9aWYoaGludCl7ZmxhZ3M9SEVBUDMyW2hpbnQ+Pj4yXTtmYW1pbHk9SEVBUDMyW2hpbnQrND4+PjJdO3R5cGU9SEVBUDMyW2hpbnQrOD4+PjJdO3Byb3RvPUhFQVAzMltoaW50KzEyPj4+Ml19aWYodHlwZSYmIXByb3RvKXtwcm90bz10eXBlPT09Mj8xNzo2fWlmKCF0eXBlJiZwcm90byl7dHlwZT1wcm90bz09PTE3PzI6MX1pZihwcm90bz09PTApe3Byb3RvPTZ9aWYodHlwZT09PTApe3R5cGU9MX1pZighbm9kZSYmIXNlcnZpY2Upe3JldHVybi0yfWlmKGZsYWdzJn4oMXwyfDR8MTAyNHw4fDE2fDMyKSl7cmV0dXJuLTF9aWYoaGludCE9PTAmJkhFQVAzMltoaW50Pj4+Ml0mMiYmIW5vZGUpe3JldHVybi0xfWlmKGZsYWdzJjMyKXtyZXR1cm4tMn1pZih0eXBlIT09MCYmdHlwZSE9PTEmJnR5cGUhPT0yKXtyZXR1cm4tN31pZihmYW1pbHkhPT0wJiZmYW1pbHkhPT0yJiZmYW1pbHkhPT0xMCl7cmV0dXJuLTZ9aWYoc2VydmljZSl7c2VydmljZT1VVEY4VG9TdHJpbmcoc2VydmljZSk7cG9ydD1wYXJzZUludChzZXJ2aWNlLDEwKTtpZihpc05hTihwb3J0KSl7aWYoZmxhZ3MmMTAyNCl7cmV0dXJuLTJ9cmV0dXJuLTh9fWlmKCFub2RlKXtpZihmYW1pbHk9PT0wKXtmYW1pbHk9Mn1pZigoZmxhZ3MmMSk9PT0wKXtpZihmYW1pbHk9PT0yKXthZGRyPV9odG9ubCgyMTMwNzA2NDMzKX1lbHNle2FkZHI9WzAsMCwwLDFdfX1haT1hbGxvY2FkZHJpbmZvKGZhbWlseSx0eXBlLHByb3RvLG51bGwsYWRkcixwb3J0KTtIRUFQVTMyW291dD4+PjJdPWFpO3JldHVybiAwfW5vZGU9VVRGOFRvU3RyaW5nKG5vZGUpO2FkZHI9aW5ldFB0b240KG5vZGUpO2lmKGFkZHIhPT1udWxsKXtpZihmYW1pbHk9PT0wfHxmYW1pbHk9PT0yKXtmYW1pbHk9Mn1lbHNlIGlmKGZhbWlseT09PTEwJiZmbGFncyY4KXthZGRyPVswLDAsX2h0b25sKDY1NTM1KSxhZGRyXTtmYW1pbHk9MTB9ZWxzZXtyZXR1cm4tMn19ZWxzZXthZGRyPWluZXRQdG9uNihub2RlKTtpZihhZGRyIT09bnVsbCl7aWYoZmFtaWx5PT09MHx8ZmFtaWx5PT09MTApe2ZhbWlseT0xMH1lbHNle3JldHVybi0yfX19aWYoYWRkciE9bnVsbCl7YWk9YWxsb2NhZGRyaW5mbyhmYW1pbHksdHlwZSxwcm90byxub2RlLGFkZHIscG9ydCk7SEVBUFUzMltvdXQ+Pj4yXT1haTtyZXR1cm4gMH1pZihmbGFncyY0KXtyZXR1cm4tMn1ub2RlPUROUy5sb29rdXBfbmFtZShub2RlKTthZGRyPWluZXRQdG9uNChub2RlKTtpZihmYW1pbHk9PT0wKXtmYW1pbHk9Mn1lbHNlIGlmKGZhbWlseT09PTEwKXthZGRyPVswLDAsX2h0b25sKDY1NTM1KSxhZGRyXX1haT1hbGxvY2FkZHJpbmZvKGZhbWlseSx0eXBlLHByb3RvLG51bGwsYWRkcixwb3J0KTtIRUFQVTMyW291dD4+PjJdPWFpO3JldHVybiAwfWZ1bmN0aW9uIGluaXRSYW5kb21GaWxsKCl7aWYodHlwZW9mIGNyeXB0bz09XCJvYmplY3RcIiYmdHlwZW9mIGNyeXB0b1tcImdldFJhbmRvbVZhbHVlc1wiXT09XCJmdW5jdGlvblwiKXtyZXR1cm4gdmlldz0+Y3J5cHRvLmdldFJhbmRvbVZhbHVlcyh2aWV3KX1lbHNlIGlmKEVOVklST05NRU5UX0lTX05PREUpe3RyeXt2YXIgY3J5cHRvX21vZHVsZT1yZXF1aXJlKFwiY3J5cHRvXCIpO3ZhciByYW5kb21GaWxsU3luYz1jcnlwdG9fbW9kdWxlW1wicmFuZG9tRmlsbFN5bmNcIl07aWYocmFuZG9tRmlsbFN5bmMpe3JldHVybiB2aWV3PT5jcnlwdG9fbW9kdWxlW1wicmFuZG9tRmlsbFN5bmNcIl0odmlldyl9dmFyIHJhbmRvbUJ5dGVzPWNyeXB0b19tb2R1bGVbXCJyYW5kb21CeXRlc1wiXTtyZXR1cm4gdmlldz0+KHZpZXcuc2V0KHJhbmRvbUJ5dGVzKHZpZXcuYnl0ZUxlbmd0aCkpLHZpZXcpfWNhdGNoKGUpe319YWJvcnQoXCJpbml0UmFuZG9tRGV2aWNlXCIpfWZ1bmN0aW9uIHJhbmRvbUZpbGwodmlldyl7cmV0dXJuKHJhbmRvbUZpbGw9aW5pdFJhbmRvbUZpbGwoKSkodmlldyl9ZnVuY3Rpb24gX2dldGVudHJvcHkoYnVmZmVyLHNpemUpe3JhbmRvbUZpbGwoSEVBUFU4LnN1YmFycmF5KGJ1ZmZlcj4+PjAsYnVmZmVyK3NpemU+Pj4wKSk7cmV0dXJuIDB9ZnVuY3Rpb24gX2dldG5hbWVpbmZvKHNhLHNhbGVuLG5vZGUsbm9kZWxlbixzZXJ2LHNlcnZsZW4sZmxhZ3Mpe3ZhciBpbmZvPXJlYWRTb2NrYWRkcihzYSxzYWxlbik7aWYoaW5mby5lcnJubyl7cmV0dXJuLTZ9dmFyIHBvcnQ9aW5mby5wb3J0O3ZhciBhZGRyPWluZm8uYWRkcjt2YXIgb3ZlcmZsb3dlZD1mYWxzZTtpZihub2RlJiZub2RlbGVuKXt2YXIgbG9va3VwO2lmKGZsYWdzJjF8fCEobG9va3VwPUROUy5sb29rdXBfYWRkcihhZGRyKSkpe2lmKGZsYWdzJjgpe3JldHVybi0yfX1lbHNle2FkZHI9bG9va3VwfXZhciBudW1CeXRlc1dyaXR0ZW5FeGNsTnVsbD1zdHJpbmdUb1VURjgoYWRkcixub2RlLG5vZGVsZW4pO2lmKG51bUJ5dGVzV3JpdHRlbkV4Y2xOdWxsKzE+PW5vZGVsZW4pe292ZXJmbG93ZWQ9dHJ1ZX19aWYoc2VydiYmc2Vydmxlbil7cG9ydD1cIlwiK3BvcnQ7dmFyIG51bUJ5dGVzV3JpdHRlbkV4Y2xOdWxsPXN0cmluZ1RvVVRGOChwb3J0LHNlcnYsc2Vydmxlbik7aWYobnVtQnl0ZXNXcml0dGVuRXhjbE51bGwrMT49c2Vydmxlbil7b3ZlcmZsb3dlZD10cnVlfX1pZihvdmVyZmxvd2VkKXtyZXR1cm4tMTJ9cmV0dXJuIDB9ZnVuY3Rpb24gYXJyYXlTdW0oYXJyYXksaW5kZXgpe3ZhciBzdW09MDtmb3IodmFyIGk9MDtpPD1pbmRleDtzdW0rPWFycmF5W2krK10pe31yZXR1cm4gc3VtfXZhciBNT05USF9EQVlTX0xFQVA9WzMxLDI5LDMxLDMwLDMxLDMwLDMxLDMxLDMwLDMxLDMwLDMxXTt2YXIgTU9OVEhfREFZU19SRUdVTEFSPVszMSwyOCwzMSwzMCwzMSwzMCwzMSwzMSwzMCwzMSwzMCwzMV07ZnVuY3Rpb24gYWRkRGF5cyhkYXRlLGRheXMpe3ZhciBuZXdEYXRlPW5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTt3aGlsZShkYXlzPjApe3ZhciBsZWFwPWlzTGVhcFllYXIobmV3RGF0ZS5nZXRGdWxsWWVhcigpKTt2YXIgY3VycmVudE1vbnRoPW5ld0RhdGUuZ2V0TW9udGgoKTt2YXIgZGF5c0luQ3VycmVudE1vbnRoPShsZWFwP01PTlRIX0RBWVNfTEVBUDpNT05USF9EQVlTX1JFR1VMQVIpW2N1cnJlbnRNb250aF07aWYoZGF5cz5kYXlzSW5DdXJyZW50TW9udGgtbmV3RGF0ZS5nZXREYXRlKCkpe2RheXMtPWRheXNJbkN1cnJlbnRNb250aC1uZXdEYXRlLmdldERhdGUoKSsxO25ld0RhdGUuc2V0RGF0ZSgxKTtpZihjdXJyZW50TW9udGg8MTEpe25ld0RhdGUuc2V0TW9udGgoY3VycmVudE1vbnRoKzEpfWVsc2V7bmV3RGF0ZS5zZXRNb250aCgwKTtuZXdEYXRlLnNldEZ1bGxZZWFyKG5ld0RhdGUuZ2V0RnVsbFllYXIoKSsxKX19ZWxzZXtuZXdEYXRlLnNldERhdGUobmV3RGF0ZS5nZXREYXRlKCkrZGF5cyk7cmV0dXJuIG5ld0RhdGV9fXJldHVybiBuZXdEYXRlfWZ1bmN0aW9uIGludEFycmF5RnJvbVN0cmluZyhzdHJpbmd5LGRvbnRBZGROdWxsLGxlbmd0aCl7dmFyIGxlbj1sZW5ndGg+MD9sZW5ndGg6bGVuZ3RoQnl0ZXNVVEY4KHN0cmluZ3kpKzE7dmFyIHU4YXJyYXk9bmV3IEFycmF5KGxlbik7dmFyIG51bUJ5dGVzV3JpdHRlbj1zdHJpbmdUb1VURjhBcnJheShzdHJpbmd5LHU4YXJyYXksMCx1OGFycmF5Lmxlbmd0aCk7aWYoZG9udEFkZE51bGwpdThhcnJheS5sZW5ndGg9bnVtQnl0ZXNXcml0dGVuO3JldHVybiB1OGFycmF5fWZ1bmN0aW9uIHdyaXRlQXJyYXlUb01lbW9yeShhcnJheSxidWZmZXIpe0hFQVA4LnNldChhcnJheSxidWZmZXI+Pj4wKX1mdW5jdGlvbiBfc3RyZnRpbWUocyxtYXhzaXplLGZvcm1hdCx0bSl7dmFyIHRtX3pvbmU9SEVBUDMyW3RtKzQwPj4+Ml07dmFyIGRhdGU9e3RtX3NlYzpIRUFQMzJbdG0+Pj4yXSx0bV9taW46SEVBUDMyW3RtKzQ+Pj4yXSx0bV9ob3VyOkhFQVAzMlt0bSs4Pj4+Ml0sdG1fbWRheTpIRUFQMzJbdG0rMTI+Pj4yXSx0bV9tb246SEVBUDMyW3RtKzE2Pj4+Ml0sdG1feWVhcjpIRUFQMzJbdG0rMjA+Pj4yXSx0bV93ZGF5OkhFQVAzMlt0bSsyND4+PjJdLHRtX3lkYXk6SEVBUDMyW3RtKzI4Pj4+Ml0sdG1faXNkc3Q6SEVBUDMyW3RtKzMyPj4+Ml0sdG1fZ210b2ZmOkhFQVAzMlt0bSszNj4+PjJdLHRtX3pvbmU6dG1fem9uZT9VVEY4VG9TdHJpbmcodG1fem9uZSk6XCJcIn07dmFyIHBhdHRlcm49VVRGOFRvU3RyaW5nKGZvcm1hdCk7dmFyIEVYUEFOU0lPTl9SVUxFU18xPXtcIiVjXCI6XCIlYSAlYiAlZCAlSDolTTolUyAlWVwiLFwiJURcIjpcIiVtLyVkLyV5XCIsXCIlRlwiOlwiJVktJW0tJWRcIixcIiVoXCI6XCIlYlwiLFwiJXJcIjpcIiVJOiVNOiVTICVwXCIsXCIlUlwiOlwiJUg6JU1cIixcIiVUXCI6XCIlSDolTTolU1wiLFwiJXhcIjpcIiVtLyVkLyV5XCIsXCIlWFwiOlwiJUg6JU06JVNcIixcIiVFY1wiOlwiJWNcIixcIiVFQ1wiOlwiJUNcIixcIiVFeFwiOlwiJW0vJWQvJXlcIixcIiVFWFwiOlwiJUg6JU06JVNcIixcIiVFeVwiOlwiJXlcIixcIiVFWVwiOlwiJVlcIixcIiVPZFwiOlwiJWRcIixcIiVPZVwiOlwiJWVcIixcIiVPSFwiOlwiJUhcIixcIiVPSVwiOlwiJUlcIixcIiVPbVwiOlwiJW1cIixcIiVPTVwiOlwiJU1cIixcIiVPU1wiOlwiJVNcIixcIiVPdVwiOlwiJXVcIixcIiVPVVwiOlwiJVVcIixcIiVPVlwiOlwiJVZcIixcIiVPd1wiOlwiJXdcIixcIiVPV1wiOlwiJVdcIixcIiVPeVwiOlwiJXlcIn07Zm9yKHZhciBydWxlIGluIEVYUEFOU0lPTl9SVUxFU18xKXtwYXR0ZXJuPXBhdHRlcm4ucmVwbGFjZShuZXcgUmVnRXhwKHJ1bGUsXCJnXCIpLEVYUEFOU0lPTl9SVUxFU18xW3J1bGVdKX12YXIgV0VFS0RBWVM9W1wiU3VuZGF5XCIsXCJNb25kYXlcIixcIlR1ZXNkYXlcIixcIldlZG5lc2RheVwiLFwiVGh1cnNkYXlcIixcIkZyaWRheVwiLFwiU2F0dXJkYXlcIl07dmFyIE1PTlRIUz1bXCJKYW51YXJ5XCIsXCJGZWJydWFyeVwiLFwiTWFyY2hcIixcIkFwcmlsXCIsXCJNYXlcIixcIkp1bmVcIixcIkp1bHlcIixcIkF1Z3VzdFwiLFwiU2VwdGVtYmVyXCIsXCJPY3RvYmVyXCIsXCJOb3ZlbWJlclwiLFwiRGVjZW1iZXJcIl07ZnVuY3Rpb24gbGVhZGluZ1NvbWV0aGluZyh2YWx1ZSxkaWdpdHMsY2hhcmFjdGVyKXt2YXIgc3RyPXR5cGVvZiB2YWx1ZT09XCJudW1iZXJcIj92YWx1ZS50b1N0cmluZygpOnZhbHVlfHxcIlwiO3doaWxlKHN0ci5sZW5ndGg8ZGlnaXRzKXtzdHI9Y2hhcmFjdGVyWzBdK3N0cn1yZXR1cm4gc3RyfWZ1bmN0aW9uIGxlYWRpbmdOdWxscyh2YWx1ZSxkaWdpdHMpe3JldHVybiBsZWFkaW5nU29tZXRoaW5nKHZhbHVlLGRpZ2l0cyxcIjBcIil9ZnVuY3Rpb24gY29tcGFyZUJ5RGF5KGRhdGUxLGRhdGUyKXtmdW5jdGlvbiBzZ24odmFsdWUpe3JldHVybiB2YWx1ZTwwPy0xOnZhbHVlPjA/MTowfXZhciBjb21wYXJlO2lmKChjb21wYXJlPXNnbihkYXRlMS5nZXRGdWxsWWVhcigpLWRhdGUyLmdldEZ1bGxZZWFyKCkpKT09PTApe2lmKChjb21wYXJlPXNnbihkYXRlMS5nZXRNb250aCgpLWRhdGUyLmdldE1vbnRoKCkpKT09PTApe2NvbXBhcmU9c2duKGRhdGUxLmdldERhdGUoKS1kYXRlMi5nZXREYXRlKCkpfX1yZXR1cm4gY29tcGFyZX1mdW5jdGlvbiBnZXRGaXJzdFdlZWtTdGFydERhdGUoamFuRm91cnRoKXtzd2l0Y2goamFuRm91cnRoLmdldERheSgpKXtjYXNlIDA6cmV0dXJuIG5ldyBEYXRlKGphbkZvdXJ0aC5nZXRGdWxsWWVhcigpLTEsMTEsMjkpO2Nhc2UgMTpyZXR1cm4gamFuRm91cnRoO2Nhc2UgMjpyZXR1cm4gbmV3IERhdGUoamFuRm91cnRoLmdldEZ1bGxZZWFyKCksMCwzKTtjYXNlIDM6cmV0dXJuIG5ldyBEYXRlKGphbkZvdXJ0aC5nZXRGdWxsWWVhcigpLDAsMik7Y2FzZSA0OnJldHVybiBuZXcgRGF0ZShqYW5Gb3VydGguZ2V0RnVsbFllYXIoKSwwLDEpO2Nhc2UgNTpyZXR1cm4gbmV3IERhdGUoamFuRm91cnRoLmdldEZ1bGxZZWFyKCktMSwxMSwzMSk7Y2FzZSA2OnJldHVybiBuZXcgRGF0ZShqYW5Gb3VydGguZ2V0RnVsbFllYXIoKS0xLDExLDMwKX19ZnVuY3Rpb24gZ2V0V2Vla0Jhc2VkWWVhcihkYXRlKXt2YXIgdGhpc0RhdGU9YWRkRGF5cyhuZXcgRGF0ZShkYXRlLnRtX3llYXIrMTkwMCwwLDEpLGRhdGUudG1feWRheSk7dmFyIGphbkZvdXJ0aFRoaXNZZWFyPW5ldyBEYXRlKHRoaXNEYXRlLmdldEZ1bGxZZWFyKCksMCw0KTt2YXIgamFuRm91cnRoTmV4dFllYXI9bmV3IERhdGUodGhpc0RhdGUuZ2V0RnVsbFllYXIoKSsxLDAsNCk7dmFyIGZpcnN0V2Vla1N0YXJ0VGhpc1llYXI9Z2V0Rmlyc3RXZWVrU3RhcnREYXRlKGphbkZvdXJ0aFRoaXNZZWFyKTt2YXIgZmlyc3RXZWVrU3RhcnROZXh0WWVhcj1nZXRGaXJzdFdlZWtTdGFydERhdGUoamFuRm91cnRoTmV4dFllYXIpO2lmKGNvbXBhcmVCeURheShmaXJzdFdlZWtTdGFydFRoaXNZZWFyLHRoaXNEYXRlKTw9MCl7aWYoY29tcGFyZUJ5RGF5KGZpcnN0V2Vla1N0YXJ0TmV4dFllYXIsdGhpc0RhdGUpPD0wKXtyZXR1cm4gdGhpc0RhdGUuZ2V0RnVsbFllYXIoKSsxfXJldHVybiB0aGlzRGF0ZS5nZXRGdWxsWWVhcigpfXJldHVybiB0aGlzRGF0ZS5nZXRGdWxsWWVhcigpLTF9dmFyIEVYUEFOU0lPTl9SVUxFU18yPXtcIiVhXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIFdFRUtEQVlTW2RhdGUudG1fd2RheV0uc3Vic3RyaW5nKDAsMyl9LFwiJUFcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gV0VFS0RBWVNbZGF0ZS50bV93ZGF5XX0sXCIlYlwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBNT05USFNbZGF0ZS50bV9tb25dLnN1YnN0cmluZygwLDMpfSxcIiVCXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIE1PTlRIU1tkYXRlLnRtX21vbl19LFwiJUNcIjpmdW5jdGlvbihkYXRlKXt2YXIgeWVhcj1kYXRlLnRtX3llYXIrMTkwMDtyZXR1cm4gbGVhZGluZ051bGxzKHllYXIvMTAwfDAsMil9LFwiJWRcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gbGVhZGluZ051bGxzKGRhdGUudG1fbWRheSwyKX0sXCIlZVwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nU29tZXRoaW5nKGRhdGUudG1fbWRheSwyLFwiIFwiKX0sXCIlZ1wiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBnZXRXZWVrQmFzZWRZZWFyKGRhdGUpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpfSxcIiVHXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIGdldFdlZWtCYXNlZFllYXIoZGF0ZSl9LFwiJUhcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gbGVhZGluZ051bGxzKGRhdGUudG1faG91ciwyKX0sXCIlSVwiOmZ1bmN0aW9uKGRhdGUpe3ZhciB0d2VsdmVIb3VyPWRhdGUudG1faG91cjtpZih0d2VsdmVIb3VyPT0wKXR3ZWx2ZUhvdXI9MTI7ZWxzZSBpZih0d2VsdmVIb3VyPjEyKXR3ZWx2ZUhvdXItPTEyO3JldHVybiBsZWFkaW5nTnVsbHModHdlbHZlSG91ciwyKX0sXCIlalwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9tZGF5K2FycmF5U3VtKGlzTGVhcFllYXIoZGF0ZS50bV95ZWFyKzE5MDApP01PTlRIX0RBWVNfTEVBUDpNT05USF9EQVlTX1JFR1VMQVIsZGF0ZS50bV9tb24tMSksMyl9LFwiJW1cIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gbGVhZGluZ051bGxzKGRhdGUudG1fbW9uKzEsMil9LFwiJU1cIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gbGVhZGluZ051bGxzKGRhdGUudG1fbWluLDIpfSxcIiVuXCI6ZnVuY3Rpb24oKXtyZXR1cm5cIlxcblwifSxcIiVwXCI6ZnVuY3Rpb24oZGF0ZSl7aWYoZGF0ZS50bV9ob3VyPj0wJiZkYXRlLnRtX2hvdXI8MTIpe3JldHVyblwiQU1cIn1yZXR1cm5cIlBNXCJ9LFwiJVNcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gbGVhZGluZ051bGxzKGRhdGUudG1fc2VjLDIpfSxcIiV0XCI6ZnVuY3Rpb24oKXtyZXR1cm5cIlxcdFwifSxcIiV1XCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIGRhdGUudG1fd2RheXx8N30sXCIlVVwiOmZ1bmN0aW9uKGRhdGUpe3ZhciBkYXlzPWRhdGUudG1feWRheSs3LWRhdGUudG1fd2RheTtyZXR1cm4gbGVhZGluZ051bGxzKE1hdGguZmxvb3IoZGF5cy83KSwyKX0sXCIlVlwiOmZ1bmN0aW9uKGRhdGUpe3ZhciB2YWw9TWF0aC5mbG9vcigoZGF0ZS50bV95ZGF5KzctKGRhdGUudG1fd2RheSs2KSU3KS83KTtpZigoZGF0ZS50bV93ZGF5KzM3MS1kYXRlLnRtX3lkYXktMiklNzw9Mil7dmFsKyt9aWYoIXZhbCl7dmFsPTUyO3ZhciBkZWMzMT0oZGF0ZS50bV93ZGF5KzctZGF0ZS50bV95ZGF5LTEpJTc7aWYoZGVjMzE9PTR8fGRlYzMxPT01JiZpc0xlYXBZZWFyKGRhdGUudG1feWVhciU0MDAtMSkpe3ZhbCsrfX1lbHNlIGlmKHZhbD09NTMpe3ZhciBqYW4xPShkYXRlLnRtX3dkYXkrMzcxLWRhdGUudG1feWRheSklNztpZihqYW4xIT00JiYoamFuMSE9M3x8IWlzTGVhcFllYXIoZGF0ZS50bV95ZWFyKSkpdmFsPTF9cmV0dXJuIGxlYWRpbmdOdWxscyh2YWwsMil9LFwiJXdcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gZGF0ZS50bV93ZGF5fSxcIiVXXCI6ZnVuY3Rpb24oZGF0ZSl7dmFyIGRheXM9ZGF0ZS50bV95ZGF5KzctKGRhdGUudG1fd2RheSs2KSU3O3JldHVybiBsZWFkaW5nTnVsbHMoTWF0aC5mbG9vcihkYXlzLzcpLDIpfSxcIiV5XCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuKGRhdGUudG1feWVhcisxOTAwKS50b1N0cmluZygpLnN1YnN0cmluZygyKX0sXCIlWVwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBkYXRlLnRtX3llYXIrMTkwMH0sXCIlelwiOmZ1bmN0aW9uKGRhdGUpe3ZhciBvZmY9ZGF0ZS50bV9nbXRvZmY7dmFyIGFoZWFkPW9mZj49MDtvZmY9TWF0aC5hYnMob2ZmKS82MDtvZmY9b2ZmLzYwKjEwMCtvZmYlNjA7cmV0dXJuKGFoZWFkP1wiK1wiOlwiLVwiKStTdHJpbmcoXCIwMDAwXCIrb2ZmKS5zbGljZSgtNCl9LFwiJVpcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gZGF0ZS50bV96b25lfSxcIiUlXCI6ZnVuY3Rpb24oKXtyZXR1cm5cIiVcIn19O3BhdHRlcm49cGF0dGVybi5yZXBsYWNlKC8lJS9nLFwiXFwwXFwwXCIpO2Zvcih2YXIgcnVsZSBpbiBFWFBBTlNJT05fUlVMRVNfMil7aWYocGF0dGVybi5pbmNsdWRlcyhydWxlKSl7cGF0dGVybj1wYXR0ZXJuLnJlcGxhY2UobmV3IFJlZ0V4cChydWxlLFwiZ1wiKSxFWFBBTlNJT05fUlVMRVNfMltydWxlXShkYXRlKSl9fXBhdHRlcm49cGF0dGVybi5yZXBsYWNlKC9cXDBcXDAvZyxcIiVcIik7dmFyIGJ5dGVzPWludEFycmF5RnJvbVN0cmluZyhwYXR0ZXJuLGZhbHNlKTtpZihieXRlcy5sZW5ndGg+bWF4c2l6ZSl7cmV0dXJuIDB9d3JpdGVBcnJheVRvTWVtb3J5KGJ5dGVzLHMpO3JldHVybiBieXRlcy5sZW5ndGgtMX1mdW5jdGlvbiBfc3RyZnRpbWVfbChzLG1heHNpemUsZm9ybWF0LHRtLGxvYyl7cmV0dXJuIF9zdHJmdGltZShzLG1heHNpemUsZm9ybWF0LHRtKX1mdW5jdGlvbiBfdWNudl9jbG9zZV82NCgpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IHVjbnZfY2xvc2VfNjRcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF91Y252X2NvbnZlcnRFeF82NCgpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IHVjbnZfY29udmVydEV4XzY0XCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfdWNudl9vcGVuXzY0KCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogdWNudl9vcGVuXzY0XCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfdWNudl90b0FsZ29yaXRobWljXzY0KCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogdWNudl90b0FsZ29yaXRobWljXzY0XCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfdWNzZGV0X2Nsb3NlXzY0KCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogdWNzZGV0X2Nsb3NlXzY0XCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfdWNzZGV0X2RldGVjdF82NCgpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IHVjc2RldF9kZXRlY3RfNjRcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF91Y3NkZXRfZ2V0Q29uZmlkZW5jZV82NCgpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IHVjc2RldF9nZXRDb25maWRlbmNlXzY0XCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfdWNzZGV0X2dldE5hbWVfNjQoKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiB1Y3NkZXRfZ2V0TmFtZV82NFwiKTthYm9ydCgtMSl9ZnVuY3Rpb24gX3Vjc2RldF9vcGVuXzY0KCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogdWNzZGV0X29wZW5fNjRcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF91Y3NkZXRfc2V0VGV4dF82NCgpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IHVjc2RldF9zZXRUZXh0XzY0XCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfdW56Q2xvc2UoKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiB1bnpDbG9zZVwiKTthYm9ydCgtMSl9ZnVuY3Rpb24gX3VuekNsb3NlQ3VycmVudEZpbGUoKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiB1bnpDbG9zZUN1cnJlbnRGaWxlXCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfdW56R2V0Q3VycmVudEZpbGVJbmZvKCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogdW56R2V0Q3VycmVudEZpbGVJbmZvXCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfdW56R2V0Q3VycmVudEZpbGVJbmZvNjQoKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiB1bnpHZXRDdXJyZW50RmlsZUluZm82NFwiKTthYm9ydCgtMSl9ZnVuY3Rpb24gX3VuekdldEdsb2JhbEluZm8oKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiB1bnpHZXRHbG9iYWxJbmZvXCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfdW56R29Ub0ZpcnN0RmlsZSgpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IHVuekdvVG9GaXJzdEZpbGVcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF91bnpHb1RvTmV4dEZpbGUoKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiB1bnpHb1RvTmV4dEZpbGVcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF91bnpMb2NhdGVGaWxlKCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogdW56TG9jYXRlRmlsZVwiKTthYm9ydCgtMSl9ZnVuY3Rpb24gX3Vuek9wZW4oKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiB1bnpPcGVuXCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfdW56T3BlbjIoKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiB1bnpPcGVuMlwiKTthYm9ydCgtMSl9ZnVuY3Rpb24gX3Vuek9wZW5DdXJyZW50RmlsZSgpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IHVuek9wZW5DdXJyZW50RmlsZVwiKTthYm9ydCgtMSl9ZnVuY3Rpb24gX3VuelJlYWRDdXJyZW50RmlsZSgpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IHVuelJlYWRDdXJyZW50RmlsZVwiKTthYm9ydCgtMSl9ZnVuY3Rpb24gX3Byb2NfZXhpdChjb2RlKXtFWElUU1RBVFVTPWNvZGU7aWYoIWtlZXBSdW50aW1lQWxpdmUoKSl7aWYoTW9kdWxlW1wib25FeGl0XCJdKU1vZHVsZVtcIm9uRXhpdFwiXShjb2RlKTtBQk9SVD10cnVlfXF1aXRfKGNvZGUsbmV3IEV4aXRTdGF0dXMoY29kZSkpfWZ1bmN0aW9uIGV4aXRKUyhzdGF0dXMsaW1wbGljaXQpe0VYSVRTVEFUVVM9c3RhdHVzO19wcm9jX2V4aXQoc3RhdHVzKX1mdW5jdGlvbiBoYW5kbGVFeGNlcHRpb24oZSl7aWYoZSBpbnN0YW5jZW9mIEV4aXRTdGF0dXN8fGU9PVwidW53aW5kXCIpe3JldHVybiBFWElUU1RBVFVTfXF1aXRfKDEsZSl9ZnVuY3Rpb24gZ2V0Q0Z1bmMoaWRlbnQpe3ZhciBmdW5jPU1vZHVsZVtcIl9cIitpZGVudF07cmV0dXJuIGZ1bmN9ZnVuY3Rpb24gc3RyaW5nVG9VVEY4T25TdGFjayhzdHIpe3ZhciBzaXplPWxlbmd0aEJ5dGVzVVRGOChzdHIpKzE7dmFyIHJldD1zdGFja0FsbG9jKHNpemUpO3N0cmluZ1RvVVRGOChzdHIscmV0LHNpemUpO3JldHVybiByZXR9ZnVuY3Rpb24gY2NhbGwoaWRlbnQscmV0dXJuVHlwZSxhcmdUeXBlcyxhcmdzLG9wdHMpe3ZhciB0b0M9e1wic3RyaW5nXCI6c3RyPT57dmFyIHJldD0wO2lmKHN0ciE9PW51bGwmJnN0ciE9PXVuZGVmaW5lZCYmc3RyIT09MCl7cmV0PXN0cmluZ1RvVVRGOE9uU3RhY2soc3RyKX1yZXR1cm4gcmV0fSxcImFycmF5XCI6YXJyPT57dmFyIHJldD1zdGFja0FsbG9jKGFyci5sZW5ndGgpO3dyaXRlQXJyYXlUb01lbW9yeShhcnIscmV0KTtyZXR1cm4gcmV0fX07ZnVuY3Rpb24gY29udmVydFJldHVyblZhbHVlKHJldCl7aWYocmV0dXJuVHlwZT09PVwic3RyaW5nXCIpe3JldHVybiBVVEY4VG9TdHJpbmcocmV0KX1pZihyZXR1cm5UeXBlPT09XCJib29sZWFuXCIpcmV0dXJuIEJvb2xlYW4ocmV0KTtyZXR1cm4gcmV0fXZhciBmdW5jPWdldENGdW5jKGlkZW50KTt2YXIgY0FyZ3M9W107dmFyIHN0YWNrPTA7aWYoYXJncyl7Zm9yKHZhciBpPTA7aTxhcmdzLmxlbmd0aDtpKyspe3ZhciBjb252ZXJ0ZXI9dG9DW2FyZ1R5cGVzW2ldXTtpZihjb252ZXJ0ZXIpe2lmKHN0YWNrPT09MClzdGFjaz1zdGFja1NhdmUoKTtjQXJnc1tpXT1jb252ZXJ0ZXIoYXJnc1tpXSl9ZWxzZXtjQXJnc1tpXT1hcmdzW2ldfX19dmFyIHJldD1mdW5jLmFwcGx5KG51bGwsY0FyZ3MpO2Z1bmN0aW9uIG9uRG9uZShyZXQpe2lmKHN0YWNrIT09MClzdGFja1Jlc3RvcmUoc3RhY2spO3JldHVybiBjb252ZXJ0UmV0dXJuVmFsdWUocmV0KX1yZXQ9b25Eb25lKHJldCk7cmV0dXJuIHJldH12YXIgd2FzbUltcG9ydHM9e1wiZ1wiOl9YTUxfR2V0QnVmZmVyLFwiVlwiOl9YTUxfR2V0RXJyb3JDb2RlLFwiZGFcIjpfWE1MX1BhcnNlLFwiblwiOl9YTUxfUGFyc2VCdWZmZXIsXCJwXCI6X1hNTF9QYXJzZXJDcmVhdGUsXCJkXCI6X1hNTF9QYXJzZXJGcmVlLFwiQlwiOl9YTUxfUmVzdW1lUGFyc2VyLFwiZlwiOl9YTUxfU2V0Q2hhcmFjdGVyRGF0YUhhbmRsZXIsXCJiXCI6X1hNTF9TZXRFbGVtZW50SGFuZGxlcixcIm9cIjpfWE1MX1NldFVzZXJEYXRhLFwiaFwiOl9YTUxfU3RvcFBhcnNlcixcImFcIjpfX19jeGFfdGhyb3csXCJMYVwiOl9fX2Rsc3ltLFwiRmFcIjpfX19zeXNjYWxsX19uZXdzZWxlY3QsXCJKYVwiOl9fX3N5c2NhbGxfYmluZCxcIklhXCI6X19fc3lzY2FsbF9jb25uZWN0LFwiQmFcIjpfX19zeXNjYWxsX2ZhY2Nlc3NhdCxcImVcIjpfX19zeXNjYWxsX2ZjbnRsNjQsXCJBYVwiOl9fX3N5c2NhbGxfZnN0YXQ2NCxcIk9cIjpfX19zeXNjYWxsX2Z0cnVuY2F0ZTY0LFwidmFcIjpfX19zeXNjYWxsX2dldGRlbnRzNjQsXCJEYVwiOl9fX3N5c2NhbGxfZ2V0cGVlcm5hbWUsXCJFYVwiOl9fX3N5c2NhbGxfZ2V0c29ja29wdCxcIktcIjpfX19zeXNjYWxsX2lvY3RsLFwieGFcIjpfX19zeXNjYWxsX2xzdGF0NjQsXCJ3YVwiOl9fX3N5c2NhbGxfbWtkaXJhdCxcInlhXCI6X19fc3lzY2FsbF9uZXdmc3RhdGF0LFwiTFwiOl9fX3N5c2NhbGxfb3BlbmF0LFwiR2FcIjpfX19zeXNjYWxsX3JlY3Zmcm9tLFwidGFcIjpfX19zeXNjYWxsX3JlbmFtZWF0LFwiRlwiOl9fX3N5c2NhbGxfcm1kaXIsXCJIYVwiOl9fX3N5c2NhbGxfc2VuZHRvLFwiSFwiOl9fX3N5c2NhbGxfc29ja2V0LFwiemFcIjpfX19zeXNjYWxsX3N0YXQ2NCxcIkdcIjpfX19zeXNjYWxsX3VubGlua2F0LFwiTmFcIjpfX2Vtc2NyaXB0ZW5fZ2V0X25vd19pc19tb25vdG9uaWMsXCJmYVwiOl9fbG9jYWx0aW1lX2pzLFwiZ2FcIjpfX3R6c2V0X2pzLFwialwiOl9hYm9ydCxcIk1hXCI6X2Rsb3BlbixcIm1hXCI6X2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X2NyZWF0ZSxcIm5hXCI6X2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X2V4aXN0cyxcImthXCI6X2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X2xpc3RfZmlsZXMsXCJsYVwiOl9kdWNrZGJfd2ViX2ZzX2RpcmVjdG9yeV9yZW1vdmUsXCJEXCI6X2R1Y2tkYl93ZWJfZnNfZmlsZV9jbG9zZSxcImlhXCI6X2R1Y2tkYl93ZWJfZnNfZmlsZV9leGlzdHMsXCJOXCI6X2R1Y2tkYl93ZWJfZnNfZmlsZV9nZXRfbGFzdF9tb2RpZmllZF90aW1lLFwiamFcIjpfZHVja2RiX3dlYl9mc19maWxlX21vdmUsXCJwYVwiOl9kdWNrZGJfd2ViX2ZzX2ZpbGVfb3BlbixcInFcIjpfZHVja2RiX3dlYl9mc19maWxlX3JlYWQsXCJvYVwiOl9kdWNrZGJfd2ViX2ZzX2ZpbGVfdHJ1bmNhdGUsXCJFXCI6X2R1Y2tkYl93ZWJfZnNfZmlsZV93cml0ZSxcInFhXCI6X2R1Y2tkYl93ZWJfZnNfZ2V0X2RlZmF1bHRfZGF0YV9wcm90b2NvbCxcImhhXCI6X2R1Y2tkYl93ZWJfZnNfZ2xvYixcIkNcIjpfZHVja2RiX3dlYl90ZXN0X3BsYXRmb3JtX2ZlYXR1cmUsXCJyYVwiOl9kdWNrZGJfd2ViX3VkZl9zY2FsYXJfY2FsbCxcIk1cIjpfZW1zY3JpcHRlbl9kYXRlX25vdyxcIk9hXCI6X2Vtc2NyaXB0ZW5fZ2V0X2hlYXBfbWF4LFwiaVwiOl9lbXNjcmlwdGVuX2dldF9ub3csXCJLYVwiOl9lbXNjcmlwdGVuX21lbWNweV9iaWcsXCJRYVwiOl9lbXNjcmlwdGVuX3Jlc2l6ZV9oZWFwLFwiVFwiOl9lbnZpcm9uX2dldCxcIldcIjpfZW52aXJvbl9zaXplc19nZXQsXCJsXCI6X2ZkX2Nsb3NlLFwiZWFcIjpfZmRfZmRzdGF0X2dldCxcIlFcIjpfZmRfcHJlYWQsXCJQXCI6X2ZkX3B3cml0ZSxcIkpcIjpfZmRfcmVhZCxcIlJcIjpfZmRfc2VlayxcInVhXCI6X2ZkX3N5bmMsXCJ3XCI6X2ZkX3dyaXRlLFwiSVwiOl9nZXRhZGRyaW5mbyxcInNhXCI6X2dldGVudHJvcHksXCJDYVwiOl9nZXRuYW1laW5mbyxcIlBhXCI6X3N0cmZ0aW1lX2wsXCJjXCI6X3VjbnZfY2xvc2VfNjQsXCJYXCI6X3VjbnZfY29udmVydEV4XzY0LFwidlwiOl91Y252X29wZW5fNjQsXCJaXCI6X3VjbnZfdG9BbGdvcml0aG1pY182NCxcIllcIjpfdWNzZGV0X2Nsb3NlXzY0LFwiYWFcIjpfdWNzZGV0X2RldGVjdF82NCxcIiRcIjpfdWNzZGV0X2dldENvbmZpZGVuY2VfNjQsXCJfXCI6X3Vjc2RldF9nZXROYW1lXzY0LFwiY2FcIjpfdWNzZGV0X29wZW5fNjQsXCJiYVwiOl91Y3NkZXRfc2V0VGV4dF82NCxcImtcIjpfdW56Q2xvc2UsXCJ1XCI6X3VuekNsb3NlQ3VycmVudEZpbGUsXCJ6XCI6X3VuekdldEN1cnJlbnRGaWxlSW5mbyxcInJcIjpfdW56R2V0Q3VycmVudEZpbGVJbmZvNjQsXCJVXCI6X3VuekdldEdsb2JhbEluZm8sXCJBXCI6X3VuekdvVG9GaXJzdEZpbGUsXCJ5XCI6X3VuekdvVG9OZXh0RmlsZSxcInRcIjpfdW56TG9jYXRlRmlsZSxcInhcIjpfdW56T3BlbixcIlNcIjpfdW56T3BlbjIsXCJzXCI6X3Vuek9wZW5DdXJyZW50RmlsZSxcIm1cIjpfdW56UmVhZEN1cnJlbnRGaWxlfTt2YXIgYXNtPWNyZWF0ZVdhc20oKTt2YXIgX19fd2FzbV9jYWxsX2N0b3JzPWZ1bmN0aW9uKCl7cmV0dXJuKF9fX3dhc21fY2FsbF9jdG9ycz1Nb2R1bGVbXCJhc21cIl1bXCJTYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX21haW49TW9kdWxlW1wiX21haW5cIl09ZnVuY3Rpb24oKXtyZXR1cm4oX21haW49TW9kdWxlW1wiX21haW5cIl09TW9kdWxlW1wiYXNtXCJdW1wiVGFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX2ZzX2dsb2JfYWRkX3BhdGg9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZnNfZ2xvYl9hZGRfcGF0aFwiXT1mdW5jdGlvbigpe3JldHVybihfZHVja2RiX3dlYl9mc19nbG9iX2FkZF9wYXRoPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZzX2dsb2JfYWRkX3BhdGhcIl09TW9kdWxlW1wiYXNtXCJdW1wiVmFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX2NsZWFyX3Jlc3BvbnNlPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2NsZWFyX3Jlc3BvbnNlXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2NsZWFyX3Jlc3BvbnNlPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2NsZWFyX3Jlc3BvbnNlXCJdPU1vZHVsZVtcImFzbVwiXVtcIldhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9mYWlsX3dpdGg9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZmFpbF93aXRoXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2ZhaWxfd2l0aD1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mYWlsX3dpdGhcIl09TW9kdWxlW1wiYXNtXCJdW1wiWGFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX3Jlc2V0PU1vZHVsZVtcIl9kdWNrZGJfd2ViX3Jlc2V0XCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX3Jlc2V0PU1vZHVsZVtcIl9kdWNrZGJfd2ViX3Jlc2V0XCJdPU1vZHVsZVtcImFzbVwiXVtcIllhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9jb25uZWN0PU1vZHVsZVtcIl9kdWNrZGJfd2ViX2Nvbm5lY3RcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfY29ubmVjdD1Nb2R1bGVbXCJfZHVja2RiX3dlYl9jb25uZWN0XCJdPU1vZHVsZVtcImFzbVwiXVtcIlphXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9kaXNjb25uZWN0PU1vZHVsZVtcIl9kdWNrZGJfd2ViX2Rpc2Nvbm5lY3RcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfZGlzY29ubmVjdD1Nb2R1bGVbXCJfZHVja2RiX3dlYl9kaXNjb25uZWN0XCJdPU1vZHVsZVtcImFzbVwiXVtcIl9hXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9mbHVzaF9maWxlcz1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mbHVzaF9maWxlc1wiXT1mdW5jdGlvbigpe3JldHVybihfZHVja2RiX3dlYl9mbHVzaF9maWxlcz1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mbHVzaF9maWxlc1wiXT1Nb2R1bGVbXCJhc21cIl1bXCIkYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfZmx1c2hfZmlsZT1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mbHVzaF9maWxlXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2ZsdXNoX2ZpbGU9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZmx1c2hfZmlsZVwiXT1Nb2R1bGVbXCJhc21cIl1bXCJhYlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfb3Blbj1Nb2R1bGVbXCJfZHVja2RiX3dlYl9vcGVuXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX29wZW49TW9kdWxlW1wiX2R1Y2tkYl93ZWJfb3BlblwiXT1Nb2R1bGVbXCJhc21cIl1bXCJiYlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfZ2V0X2dsb2JhbF9maWxlX2luZm89TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZ2V0X2dsb2JhbF9maWxlX2luZm9cIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfZ2V0X2dsb2JhbF9maWxlX2luZm89TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZ2V0X2dsb2JhbF9maWxlX2luZm9cIl09TW9kdWxlW1wiYXNtXCJdW1wiY2JcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX2NvbGxlY3RfZmlsZV9zdGF0cz1Nb2R1bGVbXCJfZHVja2RiX3dlYl9jb2xsZWN0X2ZpbGVfc3RhdHNcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfY29sbGVjdF9maWxlX3N0YXRzPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2NvbGxlY3RfZmlsZV9zdGF0c1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJkYlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfZXhwb3J0X2ZpbGVfc3RhdHM9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZXhwb3J0X2ZpbGVfc3RhdHNcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfZXhwb3J0X2ZpbGVfc3RhdHM9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZXhwb3J0X2ZpbGVfc3RhdHNcIl09TW9kdWxlW1wiYXNtXCJdW1wiZWJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX2ZzX2Ryb3BfZmlsZT1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mc19kcm9wX2ZpbGVcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZzX2Ryb3BfZmlsZVwiXT1Nb2R1bGVbXCJhc21cIl1bXCJmYlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlcz1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mc19kcm9wX2ZpbGVzXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2ZzX2Ryb3BfZmlsZXM9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlc1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJnYlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfZnNfZ2xvYl9maWxlX2luZm9zPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZzX2dsb2JfZmlsZV9pbmZvc1wiXT1mdW5jdGlvbigpe3JldHVybihfZHVja2RiX3dlYl9mc19nbG9iX2ZpbGVfaW5mb3M9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZnNfZ2xvYl9maWxlX2luZm9zXCJdPU1vZHVsZVtcImFzbVwiXVtcImhiXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X2lkPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZzX2dldF9maWxlX2luZm9fYnlfaWRcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfZnNfZ2V0X2ZpbGVfaW5mb19ieV9pZD1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X2lkXCJdPU1vZHVsZVtcImFzbVwiXVtcImliXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X25hbWU9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZnNfZ2V0X2ZpbGVfaW5mb19ieV9uYW1lXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2ZzX2dldF9maWxlX2luZm9fYnlfbmFtZT1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X25hbWVcIl09TW9kdWxlW1wiYXNtXCJdW1wiamJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfdXJsPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfdXJsXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfdXJsPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfdXJsXCJdPU1vZHVsZVtcImFzbVwiXVtcImtiXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX2J1ZmZlcj1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX2J1ZmZlclwiXT1mdW5jdGlvbigpe3JldHVybihfZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX2J1ZmZlcj1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX2J1ZmZlclwiXT1Nb2R1bGVbXCJhc21cIl1bXCJsYlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX2J1ZmZlcj1Nb2R1bGVbXCJfZHVja2RiX3dlYl9jb3B5X2ZpbGVfdG9fYnVmZmVyXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2NvcHlfZmlsZV90b19idWZmZXI9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX2J1ZmZlclwiXT1Nb2R1bGVbXCJhc21cIl1bXCJtYlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX3BhdGg9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX3BhdGhcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX3BhdGg9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX3BhdGhcIl09TW9kdWxlW1wiYXNtXCJdW1wibmJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX2dldF92ZXJzaW9uPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2dldF92ZXJzaW9uXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2dldF92ZXJzaW9uPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2dldF92ZXJzaW9uXCJdPU1vZHVsZVtcImFzbVwiXVtcIm9iXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9nZXRfZmVhdHVyZV9mbGFncz1Nb2R1bGVbXCJfZHVja2RiX3dlYl9nZXRfZmVhdHVyZV9mbGFnc1wiXT1mdW5jdGlvbigpe3JldHVybihfZHVja2RiX3dlYl9nZXRfZmVhdHVyZV9mbGFncz1Nb2R1bGVbXCJfZHVja2RiX3dlYl9nZXRfZmVhdHVyZV9mbGFnc1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJwYlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfdG9rZW5pemU9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfdG9rZW5pemVcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfdG9rZW5pemU9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfdG9rZW5pemVcIl09TW9kdWxlW1wiYXNtXCJdW1wicWJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX3VkZl9zY2FsYXJfY3JlYXRlPU1vZHVsZVtcIl9kdWNrZGJfd2ViX3VkZl9zY2FsYXJfY3JlYXRlXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX3VkZl9zY2FsYXJfY3JlYXRlPU1vZHVsZVtcIl9kdWNrZGJfd2ViX3VkZl9zY2FsYXJfY3JlYXRlXCJdPU1vZHVsZVtcImFzbVwiXVtcInJiXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9wcmVwYXJlZF9jcmVhdGU9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfY3JlYXRlXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX3ByZXBhcmVkX2NyZWF0ZT1Nb2R1bGVbXCJfZHVja2RiX3dlYl9wcmVwYXJlZF9jcmVhdGVcIl09TW9kdWxlW1wiYXNtXCJdW1wic2JcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX3ByZXBhcmVkX2Nsb3NlPU1vZHVsZVtcIl9kdWNrZGJfd2ViX3ByZXBhcmVkX2Nsb3NlXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX3ByZXBhcmVkX2Nsb3NlPU1vZHVsZVtcIl9kdWNrZGJfd2ViX3ByZXBhcmVkX2Nsb3NlXCJdPU1vZHVsZVtcImFzbVwiXVtcInRiXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9wcmVwYXJlZF9ydW49TW9kdWxlW1wiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfcnVuXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX3ByZXBhcmVkX3J1bj1Nb2R1bGVbXCJfZHVja2RiX3dlYl9wcmVwYXJlZF9ydW5cIl09TW9kdWxlW1wiYXNtXCJdW1widWJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX3ByZXBhcmVkX3NlbmQ9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfc2VuZFwiXT1mdW5jdGlvbigpe3JldHVybihfZHVja2RiX3dlYl9wcmVwYXJlZF9zZW5kPU1vZHVsZVtcIl9kdWNrZGJfd2ViX3ByZXBhcmVkX3NlbmRcIl09TW9kdWxlW1wiYXNtXCJdW1widmJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX3F1ZXJ5X3J1bj1Nb2R1bGVbXCJfZHVja2RiX3dlYl9xdWVyeV9ydW5cIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfcXVlcnlfcnVuPU1vZHVsZVtcIl9kdWNrZGJfd2ViX3F1ZXJ5X3J1blwiXT1Nb2R1bGVbXCJhc21cIl1bXCJ3YlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9zdGFydD1Nb2R1bGVbXCJfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X3N0YXJ0XCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfc3RhcnQ9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9zdGFydFwiXT1Nb2R1bGVbXCJhc21cIl1bXCJ4YlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9wb2xsPU1vZHVsZVtcIl9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfcG9sbFwiXT1mdW5jdGlvbigpe3JldHVybihfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X3BvbGw9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9wb2xsXCJdPU1vZHVsZVtcImFzbVwiXVtcInliXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X2NhbmNlbD1Nb2R1bGVbXCJfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X2NhbmNlbFwiXT1mdW5jdGlvbigpe3JldHVybihfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X2NhbmNlbD1Nb2R1bGVbXCJfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X2NhbmNlbFwiXT1Nb2R1bGVbXCJhc21cIl1bXCJ6YlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfcXVlcnlfZmV0Y2hfcmVzdWx0cz1Nb2R1bGVbXCJfZHVja2RiX3dlYl9xdWVyeV9mZXRjaF9yZXN1bHRzXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX3F1ZXJ5X2ZldGNoX3Jlc3VsdHM9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfcXVlcnlfZmV0Y2hfcmVzdWx0c1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJBYlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfZ2V0X3RhYmxlbmFtZXM9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZ2V0X3RhYmxlbmFtZXNcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfZ2V0X3RhYmxlbmFtZXM9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZ2V0X3RhYmxlbmFtZXNcIl09TW9kdWxlW1wiYXNtXCJdW1wiQmJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX2luc2VydF9hcnJvd19mcm9tX2lwY19zdHJlYW09TW9kdWxlW1wiX2R1Y2tkYl93ZWJfaW5zZXJ0X2Fycm93X2Zyb21faXBjX3N0cmVhbVwiXT1mdW5jdGlvbigpe3JldHVybihfZHVja2RiX3dlYl9pbnNlcnRfYXJyb3dfZnJvbV9pcGNfc3RyZWFtPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2luc2VydF9hcnJvd19mcm9tX2lwY19zdHJlYW1cIl09TW9kdWxlW1wiYXNtXCJdW1wiQ2JcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX2luc2VydF9jc3ZfZnJvbV9wYXRoPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2luc2VydF9jc3ZfZnJvbV9wYXRoXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2luc2VydF9jc3ZfZnJvbV9wYXRoPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2luc2VydF9jc3ZfZnJvbV9wYXRoXCJdPU1vZHVsZVtcImFzbVwiXVtcIkRiXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9pbnNlcnRfanNvbl9mcm9tX3BhdGg9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfaW5zZXJ0X2pzb25fZnJvbV9wYXRoXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2luc2VydF9qc29uX2Zyb21fcGF0aD1Nb2R1bGVbXCJfZHVja2RiX3dlYl9pbnNlcnRfanNvbl9mcm9tX3BhdGhcIl09TW9kdWxlW1wiYXNtXCJdW1wiRWJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9fX2Vycm5vX2xvY2F0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuKF9fX2Vycm5vX2xvY2F0aW9uPU1vZHVsZVtcImFzbVwiXVtcIl9fZXJybm9fbG9jYXRpb25cIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9odG9ubD1mdW5jdGlvbigpe3JldHVybihfaHRvbmw9TW9kdWxlW1wiYXNtXCJdW1wiRmJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9odG9ucz1mdW5jdGlvbigpe3JldHVybihfaHRvbnM9TW9kdWxlW1wiYXNtXCJdW1wiR2JcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9udG9ocz1mdW5jdGlvbigpe3JldHVybihfbnRvaHM9TW9kdWxlW1wiYXNtXCJdW1wiSGJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9tYWxsb2M9TW9kdWxlW1wiX21hbGxvY1wiXT1mdW5jdGlvbigpe3JldHVybihfbWFsbG9jPU1vZHVsZVtcIl9tYWxsb2NcIl09TW9kdWxlW1wiYXNtXCJdW1wiSWJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9mcmVlPU1vZHVsZVtcIl9mcmVlXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9mcmVlPU1vZHVsZVtcIl9mcmVlXCJdPU1vZHVsZVtcImFzbVwiXVtcIkpiXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBzdGFja1NhdmU9ZnVuY3Rpb24oKXtyZXR1cm4oc3RhY2tTYXZlPU1vZHVsZVtcImFzbVwiXVtcIktiXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBzdGFja1Jlc3RvcmU9ZnVuY3Rpb24oKXtyZXR1cm4oc3RhY2tSZXN0b3JlPU1vZHVsZVtcImFzbVwiXVtcIkxiXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBzdGFja0FsbG9jPWZ1bmN0aW9uKCl7cmV0dXJuKHN0YWNrQWxsb2M9TW9kdWxlW1wiYXNtXCJdW1wiTWJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9fX2N4YV9pc19wb2ludGVyX3R5cGU9ZnVuY3Rpb24oKXtyZXR1cm4oX19fY3hhX2lzX3BvaW50ZXJfdHlwZT1Nb2R1bGVbXCJhc21cIl1bXCJOYlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTtNb2R1bGVbXCJzdGFja0FsbG9jXCJdPXN0YWNrQWxsb2M7TW9kdWxlW1wic3RhY2tTYXZlXCJdPXN0YWNrU2F2ZTtNb2R1bGVbXCJzdGFja1Jlc3RvcmVcIl09c3RhY2tSZXN0b3JlO01vZHVsZVtcImNjYWxsXCJdPWNjYWxsO3ZhciBjYWxsZWRSdW47ZGVwZW5kZW5jaWVzRnVsZmlsbGVkPWZ1bmN0aW9uIHJ1bkNhbGxlcigpe2lmKCFjYWxsZWRSdW4pcnVuKCk7aWYoIWNhbGxlZFJ1bilkZXBlbmRlbmNpZXNGdWxmaWxsZWQ9cnVuQ2FsbGVyfTtmdW5jdGlvbiBjYWxsTWFpbigpe3ZhciBlbnRyeUZ1bmN0aW9uPV9tYWluO3ZhciBhcmdjPTA7dmFyIGFyZ3Y9MDt0cnl7dmFyIHJldD1lbnRyeUZ1bmN0aW9uKGFyZ2MsYXJndik7ZXhpdEpTKHJldCx0cnVlKTtyZXR1cm4gcmV0fWNhdGNoKGUpe3JldHVybiBoYW5kbGVFeGNlcHRpb24oZSl9fWZ1bmN0aW9uIHJ1bigpe2lmKHJ1bkRlcGVuZGVuY2llcz4wKXtyZXR1cm59cHJlUnVuKCk7aWYocnVuRGVwZW5kZW5jaWVzPjApe3JldHVybn1mdW5jdGlvbiBkb1J1bigpe2lmKGNhbGxlZFJ1bilyZXR1cm47Y2FsbGVkUnVuPXRydWU7TW9kdWxlW1wiY2FsbGVkUnVuXCJdPXRydWU7aWYoQUJPUlQpcmV0dXJuO2luaXRSdW50aW1lKCk7cHJlTWFpbigpO3JlYWR5UHJvbWlzZVJlc29sdmUoTW9kdWxlKTtpZihNb2R1bGVbXCJvblJ1bnRpbWVJbml0aWFsaXplZFwiXSlNb2R1bGVbXCJvblJ1bnRpbWVJbml0aWFsaXplZFwiXSgpO2lmKHNob3VsZFJ1bk5vdyljYWxsTWFpbigpO3Bvc3RSdW4oKX1pZihNb2R1bGVbXCJzZXRTdGF0dXNcIl0pe01vZHVsZVtcInNldFN0YXR1c1wiXShcIlJ1bm5pbmcuLi5cIik7c2V0VGltZW91dChmdW5jdGlvbigpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtNb2R1bGVbXCJzZXRTdGF0dXNcIl0oXCJcIil9LDEpO2RvUnVuKCl9LDEpfWVsc2V7ZG9SdW4oKX19aWYoTW9kdWxlW1wicHJlSW5pdFwiXSl7aWYodHlwZW9mIE1vZHVsZVtcInByZUluaXRcIl09PVwiZnVuY3Rpb25cIilNb2R1bGVbXCJwcmVJbml0XCJdPVtNb2R1bGVbXCJwcmVJbml0XCJdXTt3aGlsZShNb2R1bGVbXCJwcmVJbml0XCJdLmxlbmd0aD4wKXtNb2R1bGVbXCJwcmVJbml0XCJdLnBvcCgpKCl9fXZhciBzaG91bGRSdW5Ob3c9dHJ1ZTtpZihNb2R1bGVbXCJub0luaXRpYWxSdW5cIl0pc2hvdWxkUnVuTm93PWZhbHNlO3J1bigpO1xuXG5cbiAgcmV0dXJuIER1Y2tEQi5yZWFkeVxufVxuXG4pO1xufSkoKTtcbmlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG4gIG1vZHVsZS5leHBvcnRzID0gRHVja0RCO1xuZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmVbJ2FtZCddKVxuICBkZWZpbmUoW10sIGZ1bmN0aW9uKCkgeyByZXR1cm4gRHVja0RCOyB9KTtcbmVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JylcbiAgZXhwb3J0c1tcIkR1Y2tEQlwiXSA9IER1Y2tEQjtcbiIsICJcbnZhciBEdWNrREIgPSAoKCkgPT4ge1xuICB2YXIgX3NjcmlwdERpciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuY3VycmVudFNjcmlwdCA/IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjIDogdW5kZWZpbmVkO1xuICBpZiAodHlwZW9mIF9fZmlsZW5hbWUgIT09ICd1bmRlZmluZWQnKSBfc2NyaXB0RGlyID0gX3NjcmlwdERpciB8fCBfX2ZpbGVuYW1lO1xuICByZXR1cm4gKFxuZnVuY3Rpb24oRHVja0RCID0ge30pICB7XG5cbnZhciBNb2R1bGU9dHlwZW9mIER1Y2tEQiE9XCJ1bmRlZmluZWRcIj9EdWNrREI6e307dmFyIHJlYWR5UHJvbWlzZVJlc29sdmUscmVhZHlQcm9taXNlUmVqZWN0O01vZHVsZVtcInJlYWR5XCJdPW5ldyBQcm9taXNlKChyZXNvbHZlLHJlamVjdCk9PntyZWFkeVByb21pc2VSZXNvbHZlPXJlc29sdmU7cmVhZHlQcm9taXNlUmVqZWN0PXJlamVjdH0pO3ZhciBtb2R1bGVPdmVycmlkZXM9T2JqZWN0LmFzc2lnbih7fSxNb2R1bGUpO3ZhciBhcmd1bWVudHNfPVtdO3ZhciB0aGlzUHJvZ3JhbT1cIi4vdGhpcy5wcm9ncmFtXCI7dmFyIHF1aXRfPShzdGF0dXMsdG9UaHJvdyk9Pnt0aHJvdyB0b1Rocm93fTt2YXIgRU5WSVJPTk1FTlRfSVNfV0VCPXR5cGVvZiB3aW5kb3c9PVwib2JqZWN0XCI7dmFyIEVOVklST05NRU5UX0lTX1dPUktFUj10eXBlb2YgaW1wb3J0U2NyaXB0cz09XCJmdW5jdGlvblwiO3ZhciBFTlZJUk9OTUVOVF9JU19OT0RFPXR5cGVvZiBwcm9jZXNzPT1cIm9iamVjdFwiJiZ0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucz09XCJvYmplY3RcIiYmdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZT09XCJzdHJpbmdcIjt2YXIgc2NyaXB0RGlyZWN0b3J5PVwiXCI7ZnVuY3Rpb24gbG9jYXRlRmlsZShwYXRoKXtpZihNb2R1bGVbXCJsb2NhdGVGaWxlXCJdKXtyZXR1cm4gTW9kdWxlW1wibG9jYXRlRmlsZVwiXShwYXRoLHNjcmlwdERpcmVjdG9yeSl9cmV0dXJuIHNjcmlwdERpcmVjdG9yeStwYXRofXZhciByZWFkXyxyZWFkQXN5bmMscmVhZEJpbmFyeSxzZXRXaW5kb3dUaXRsZTtpZihFTlZJUk9OTUVOVF9JU19OT0RFKXt2YXIgZnM9cmVxdWlyZShcImZzXCIpO3ZhciBub2RlUGF0aD1yZXF1aXJlKFwicGF0aFwiKTtpZihFTlZJUk9OTUVOVF9JU19XT1JLRVIpe3NjcmlwdERpcmVjdG9yeT1ub2RlUGF0aC5kaXJuYW1lKHNjcmlwdERpcmVjdG9yeSkrXCIvXCJ9ZWxzZXtzY3JpcHREaXJlY3Rvcnk9X19kaXJuYW1lK1wiL1wifXJlYWRfPShmaWxlbmFtZSxiaW5hcnkpPT57ZmlsZW5hbWU9aXNGaWxlVVJJKGZpbGVuYW1lKT9uZXcgVVJMKGZpbGVuYW1lKTpub2RlUGF0aC5ub3JtYWxpemUoZmlsZW5hbWUpO3JldHVybiBmcy5yZWFkRmlsZVN5bmMoZmlsZW5hbWUsYmluYXJ5P3VuZGVmaW5lZDpcInV0ZjhcIil9O3JlYWRCaW5hcnk9ZmlsZW5hbWU9Pnt2YXIgcmV0PXJlYWRfKGZpbGVuYW1lLHRydWUpO2lmKCFyZXQuYnVmZmVyKXtyZXQ9bmV3IFVpbnQ4QXJyYXkocmV0KX1yZXR1cm4gcmV0fTtyZWFkQXN5bmM9KGZpbGVuYW1lLG9ubG9hZCxvbmVycm9yLGJpbmFyeT10cnVlKT0+e2ZpbGVuYW1lPWlzRmlsZVVSSShmaWxlbmFtZSk/bmV3IFVSTChmaWxlbmFtZSk6bm9kZVBhdGgubm9ybWFsaXplKGZpbGVuYW1lKTtmcy5yZWFkRmlsZShmaWxlbmFtZSxiaW5hcnk/dW5kZWZpbmVkOlwidXRmOFwiLChlcnIsZGF0YSk9PntpZihlcnIpb25lcnJvcihlcnIpO2Vsc2Ugb25sb2FkKGJpbmFyeT9kYXRhLmJ1ZmZlcjpkYXRhKX0pfTtpZighTW9kdWxlW1widGhpc1Byb2dyYW1cIl0mJnByb2Nlc3MuYXJndi5sZW5ndGg+MSl7dGhpc1Byb2dyYW09cHJvY2Vzcy5hcmd2WzFdLnJlcGxhY2UoL1xcXFwvZyxcIi9cIil9YXJndW1lbnRzXz1wcm9jZXNzLmFyZ3Yuc2xpY2UoMik7cXVpdF89KHN0YXR1cyx0b1Rocm93KT0+e3Byb2Nlc3MuZXhpdENvZGU9c3RhdHVzO3Rocm93IHRvVGhyb3d9O01vZHVsZVtcImluc3BlY3RcIl09KCk9PlwiW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF1cIn1lbHNlIGlmKEVOVklST05NRU5UX0lTX1dFQnx8RU5WSVJPTk1FTlRfSVNfV09SS0VSKXtpZihFTlZJUk9OTUVOVF9JU19XT1JLRVIpe3NjcmlwdERpcmVjdG9yeT1zZWxmLmxvY2F0aW9uLmhyZWZ9ZWxzZSBpZih0eXBlb2YgZG9jdW1lbnQhPVwidW5kZWZpbmVkXCImJmRvY3VtZW50LmN1cnJlbnRTY3JpcHQpe3NjcmlwdERpcmVjdG9yeT1kb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY31pZihfc2NyaXB0RGlyKXtzY3JpcHREaXJlY3Rvcnk9X3NjcmlwdERpcn1pZihzY3JpcHREaXJlY3RvcnkuaW5kZXhPZihcImJsb2I6XCIpIT09MCl7c2NyaXB0RGlyZWN0b3J5PXNjcmlwdERpcmVjdG9yeS5zdWJzdHIoMCxzY3JpcHREaXJlY3RvcnkucmVwbGFjZSgvWz8jXS4qLyxcIlwiKS5sYXN0SW5kZXhPZihcIi9cIikrMSl9ZWxzZXtzY3JpcHREaXJlY3Rvcnk9XCJcIn17cmVhZF89dXJsPT57dmFyIHhocj1uZXcgWE1MSHR0cFJlcXVlc3Q7eGhyLm9wZW4oXCJHRVRcIix1cmwsZmFsc2UpO3hoci5zZW5kKG51bGwpO3JldHVybiB4aHIucmVzcG9uc2VUZXh0fTtpZihFTlZJUk9OTUVOVF9JU19XT1JLRVIpe3JlYWRCaW5hcnk9dXJsPT57dmFyIHhocj1uZXcgWE1MSHR0cFJlcXVlc3Q7eGhyLm9wZW4oXCJHRVRcIix1cmwsZmFsc2UpO3hoci5yZXNwb25zZVR5cGU9XCJhcnJheWJ1ZmZlclwiO3hoci5zZW5kKG51bGwpO3JldHVybiBuZXcgVWludDhBcnJheSh4aHIucmVzcG9uc2UpfX1yZWFkQXN5bmM9KHVybCxvbmxvYWQsb25lcnJvcik9Pnt2YXIgeGhyPW5ldyBYTUxIdHRwUmVxdWVzdDt4aHIub3BlbihcIkdFVFwiLHVybCx0cnVlKTt4aHIucmVzcG9uc2VUeXBlPVwiYXJyYXlidWZmZXJcIjt4aHIub25sb2FkPSgpPT57aWYoeGhyLnN0YXR1cz09MjAwfHx4aHIuc3RhdHVzPT0wJiZ4aHIucmVzcG9uc2Upe29ubG9hZCh4aHIucmVzcG9uc2UpO3JldHVybn1vbmVycm9yKCl9O3hoci5vbmVycm9yPW9uZXJyb3I7eGhyLnNlbmQobnVsbCl9fXNldFdpbmRvd1RpdGxlPXRpdGxlPT5kb2N1bWVudC50aXRsZT10aXRsZX1lbHNle312YXIgb3V0PU1vZHVsZVtcInByaW50XCJdfHxjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO3ZhciBlcnI9TW9kdWxlW1wicHJpbnRFcnJcIl18fGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlKTtPYmplY3QuYXNzaWduKE1vZHVsZSxtb2R1bGVPdmVycmlkZXMpO21vZHVsZU92ZXJyaWRlcz1udWxsO2lmKE1vZHVsZVtcImFyZ3VtZW50c1wiXSlhcmd1bWVudHNfPU1vZHVsZVtcImFyZ3VtZW50c1wiXTtpZihNb2R1bGVbXCJ0aGlzUHJvZ3JhbVwiXSl0aGlzUHJvZ3JhbT1Nb2R1bGVbXCJ0aGlzUHJvZ3JhbVwiXTtpZihNb2R1bGVbXCJxdWl0XCJdKXF1aXRfPU1vZHVsZVtcInF1aXRcIl07dmFyIHdhc21CaW5hcnk7aWYoTW9kdWxlW1wid2FzbUJpbmFyeVwiXSl3YXNtQmluYXJ5PU1vZHVsZVtcIndhc21CaW5hcnlcIl07dmFyIG5vRXhpdFJ1bnRpbWU9TW9kdWxlW1wibm9FeGl0UnVudGltZVwiXXx8dHJ1ZTtpZih0eXBlb2YgV2ViQXNzZW1ibHkhPVwib2JqZWN0XCIpe2Fib3J0KFwibm8gbmF0aXZlIHdhc20gc3VwcG9ydCBkZXRlY3RlZFwiKX12YXIgd2FzbU1lbW9yeTt2YXIgQUJPUlQ9ZmFsc2U7dmFyIEVYSVRTVEFUVVM7ZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbix0ZXh0KXtpZighY29uZGl0aW9uKXthYm9ydCh0ZXh0KX19dmFyIEhFQVA4LEhFQVBVOCxIRUFQMTYsSEVBUFUxNixIRUFQMzIsSEVBUFUzMixIRUFQRjMyLEhFQVBGNjQ7ZnVuY3Rpb24gdXBkYXRlTWVtb3J5Vmlld3MoKXt2YXIgYj13YXNtTWVtb3J5LmJ1ZmZlcjtNb2R1bGVbXCJIRUFQOFwiXT1IRUFQOD1uZXcgSW50OEFycmF5KGIpO01vZHVsZVtcIkhFQVAxNlwiXT1IRUFQMTY9bmV3IEludDE2QXJyYXkoYik7TW9kdWxlW1wiSEVBUDMyXCJdPUhFQVAzMj1uZXcgSW50MzJBcnJheShiKTtNb2R1bGVbXCJIRUFQVThcIl09SEVBUFU4PW5ldyBVaW50OEFycmF5KGIpO01vZHVsZVtcIkhFQVBVMTZcIl09SEVBUFUxNj1uZXcgVWludDE2QXJyYXkoYik7TW9kdWxlW1wiSEVBUFUzMlwiXT1IRUFQVTMyPW5ldyBVaW50MzJBcnJheShiKTtNb2R1bGVbXCJIRUFQRjMyXCJdPUhFQVBGMzI9bmV3IEZsb2F0MzJBcnJheShiKTtNb2R1bGVbXCJIRUFQRjY0XCJdPUhFQVBGNjQ9bmV3IEZsb2F0NjRBcnJheShiKX12YXIgd2FzbVRhYmxlO3ZhciBfX0FUUFJFUlVOX189W107dmFyIF9fQVRJTklUX189W107dmFyIF9fQVRNQUlOX189W107dmFyIF9fQVRQT1NUUlVOX189W107dmFyIHJ1bnRpbWVJbml0aWFsaXplZD1mYWxzZTt2YXIgcnVudGltZUtlZXBhbGl2ZUNvdW50ZXI9MDtmdW5jdGlvbiBrZWVwUnVudGltZUFsaXZlKCl7cmV0dXJuIG5vRXhpdFJ1bnRpbWV8fHJ1bnRpbWVLZWVwYWxpdmVDb3VudGVyPjB9ZnVuY3Rpb24gcHJlUnVuKCl7aWYoTW9kdWxlW1wicHJlUnVuXCJdKXtpZih0eXBlb2YgTW9kdWxlW1wicHJlUnVuXCJdPT1cImZ1bmN0aW9uXCIpTW9kdWxlW1wicHJlUnVuXCJdPVtNb2R1bGVbXCJwcmVSdW5cIl1dO3doaWxlKE1vZHVsZVtcInByZVJ1blwiXS5sZW5ndGgpe2FkZE9uUHJlUnVuKE1vZHVsZVtcInByZVJ1blwiXS5zaGlmdCgpKX19Y2FsbFJ1bnRpbWVDYWxsYmFja3MoX19BVFBSRVJVTl9fKX1mdW5jdGlvbiBpbml0UnVudGltZSgpe3J1bnRpbWVJbml0aWFsaXplZD10cnVlO2NhbGxSdW50aW1lQ2FsbGJhY2tzKF9fQVRJTklUX18pfWZ1bmN0aW9uIHByZU1haW4oKXtjYWxsUnVudGltZUNhbGxiYWNrcyhfX0FUTUFJTl9fKX1mdW5jdGlvbiBwb3N0UnVuKCl7aWYoTW9kdWxlW1wicG9zdFJ1blwiXSl7aWYodHlwZW9mIE1vZHVsZVtcInBvc3RSdW5cIl09PVwiZnVuY3Rpb25cIilNb2R1bGVbXCJwb3N0UnVuXCJdPVtNb2R1bGVbXCJwb3N0UnVuXCJdXTt3aGlsZShNb2R1bGVbXCJwb3N0UnVuXCJdLmxlbmd0aCl7YWRkT25Qb3N0UnVuKE1vZHVsZVtcInBvc3RSdW5cIl0uc2hpZnQoKSl9fWNhbGxSdW50aW1lQ2FsbGJhY2tzKF9fQVRQT1NUUlVOX18pfWZ1bmN0aW9uIGFkZE9uUHJlUnVuKGNiKXtfX0FUUFJFUlVOX18udW5zaGlmdChjYil9ZnVuY3Rpb24gYWRkT25Jbml0KGNiKXtfX0FUSU5JVF9fLnVuc2hpZnQoY2IpfWZ1bmN0aW9uIGFkZE9uUG9zdFJ1bihjYil7X19BVFBPU1RSVU5fXy51bnNoaWZ0KGNiKX12YXIgcnVuRGVwZW5kZW5jaWVzPTA7dmFyIHJ1bkRlcGVuZGVuY3lXYXRjaGVyPW51bGw7dmFyIGRlcGVuZGVuY2llc0Z1bGZpbGxlZD1udWxsO2Z1bmN0aW9uIGFkZFJ1bkRlcGVuZGVuY3koaWQpe3J1bkRlcGVuZGVuY2llcysrO2lmKE1vZHVsZVtcIm1vbml0b3JSdW5EZXBlbmRlbmNpZXNcIl0pe01vZHVsZVtcIm1vbml0b3JSdW5EZXBlbmRlbmNpZXNcIl0ocnVuRGVwZW5kZW5jaWVzKX19ZnVuY3Rpb24gcmVtb3ZlUnVuRGVwZW5kZW5jeShpZCl7cnVuRGVwZW5kZW5jaWVzLS07aWYoTW9kdWxlW1wibW9uaXRvclJ1bkRlcGVuZGVuY2llc1wiXSl7TW9kdWxlW1wibW9uaXRvclJ1bkRlcGVuZGVuY2llc1wiXShydW5EZXBlbmRlbmNpZXMpfWlmKHJ1bkRlcGVuZGVuY2llcz09MCl7aWYocnVuRGVwZW5kZW5jeVdhdGNoZXIhPT1udWxsKXtjbGVhckludGVydmFsKHJ1bkRlcGVuZGVuY3lXYXRjaGVyKTtydW5EZXBlbmRlbmN5V2F0Y2hlcj1udWxsfWlmKGRlcGVuZGVuY2llc0Z1bGZpbGxlZCl7dmFyIGNhbGxiYWNrPWRlcGVuZGVuY2llc0Z1bGZpbGxlZDtkZXBlbmRlbmNpZXNGdWxmaWxsZWQ9bnVsbDtjYWxsYmFjaygpfX19ZnVuY3Rpb24gYWJvcnQod2hhdCl7aWYoTW9kdWxlW1wib25BYm9ydFwiXSl7TW9kdWxlW1wib25BYm9ydFwiXSh3aGF0KX13aGF0PVwiQWJvcnRlZChcIit3aGF0K1wiKVwiO2Vycih3aGF0KTtBQk9SVD10cnVlO0VYSVRTVEFUVVM9MTt3aGF0Kz1cIi4gQnVpbGQgd2l0aCAtc0FTU0VSVElPTlMgZm9yIG1vcmUgaW5mby5cIjtpZihydW50aW1lSW5pdGlhbGl6ZWQpe19fX3RyYXAoKX12YXIgZT1uZXcgV2ViQXNzZW1ibHkuUnVudGltZUVycm9yKHdoYXQpO3JlYWR5UHJvbWlzZVJlamVjdChlKTt0aHJvdyBlfXZhciBkYXRhVVJJUHJlZml4PVwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiO2Z1bmN0aW9uIGlzRGF0YVVSSShmaWxlbmFtZSl7cmV0dXJuIGZpbGVuYW1lLnN0YXJ0c1dpdGgoZGF0YVVSSVByZWZpeCl9ZnVuY3Rpb24gaXNGaWxlVVJJKGZpbGVuYW1lKXtyZXR1cm4gZmlsZW5hbWUuc3RhcnRzV2l0aChcImZpbGU6Ly9cIil9dmFyIHdhc21CaW5hcnlGaWxlO3dhc21CaW5hcnlGaWxlPVwiLi9kdWNrZGItZWgud2FzbVwiO2lmKCFpc0RhdGFVUkkod2FzbUJpbmFyeUZpbGUpKXt3YXNtQmluYXJ5RmlsZT1sb2NhdGVGaWxlKHdhc21CaW5hcnlGaWxlKX1mdW5jdGlvbiBnZXRCaW5hcnkoZmlsZSl7dHJ5e2lmKGZpbGU9PXdhc21CaW5hcnlGaWxlJiZ3YXNtQmluYXJ5KXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkod2FzbUJpbmFyeSl9aWYocmVhZEJpbmFyeSl7cmV0dXJuIHJlYWRCaW5hcnkoZmlsZSl9dGhyb3dcImJvdGggYXN5bmMgYW5kIHN5bmMgZmV0Y2hpbmcgb2YgdGhlIHdhc20gZmFpbGVkXCJ9Y2F0Y2goZXJyKXthYm9ydChlcnIpfX1mdW5jdGlvbiBnZXRCaW5hcnlQcm9taXNlKGJpbmFyeUZpbGUpe2lmKCF3YXNtQmluYXJ5JiYoRU5WSVJPTk1FTlRfSVNfV0VCfHxFTlZJUk9OTUVOVF9JU19XT1JLRVIpKXtpZih0eXBlb2YgZmV0Y2g9PVwiZnVuY3Rpb25cIil7cmV0dXJuIGZldGNoKGJpbmFyeUZpbGUse2NyZWRlbnRpYWxzOlwic2FtZS1vcmlnaW5cIn0pLnRoZW4ocmVzcG9uc2U9PntpZighcmVzcG9uc2VbXCJva1wiXSl7dGhyb3dcImZhaWxlZCB0byBsb2FkIHdhc20gYmluYXJ5IGZpbGUgYXQgJ1wiK2JpbmFyeUZpbGUrXCInXCJ9cmV0dXJuIHJlc3BvbnNlW1wiYXJyYXlCdWZmZXJcIl0oKX0pLmNhdGNoKCgpPT5nZXRCaW5hcnkoYmluYXJ5RmlsZSkpfX1yZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+Z2V0QmluYXJ5KGJpbmFyeUZpbGUpKX1mdW5jdGlvbiBpbnN0YW50aWF0ZUFycmF5QnVmZmVyKGJpbmFyeUZpbGUsaW1wb3J0cyxyZWNlaXZlcil7cmV0dXJuIGdldEJpbmFyeVByb21pc2UoYmluYXJ5RmlsZSkudGhlbihiaW5hcnk9PntyZXR1cm4gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoYmluYXJ5LGltcG9ydHMpfSkudGhlbihpbnN0YW5jZT0+e3JldHVybiBpbnN0YW5jZX0pLnRoZW4ocmVjZWl2ZXIscmVhc29uPT57ZXJyKFwiZmFpbGVkIHRvIGFzeW5jaHJvbm91c2x5IHByZXBhcmUgd2FzbTogXCIrcmVhc29uKTthYm9ydChyZWFzb24pfSl9ZnVuY3Rpb24gaW5zdGFudGlhdGVBc3luYyhiaW5hcnksYmluYXJ5RmlsZSxpbXBvcnRzLGNhbGxiYWNrKXtpZighYmluYXJ5JiZ0eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmc9PVwiZnVuY3Rpb25cIiYmIWlzRGF0YVVSSShiaW5hcnlGaWxlKSYmIUVOVklST05NRU5UX0lTX05PREUmJnR5cGVvZiBmZXRjaD09XCJmdW5jdGlvblwiKXtyZXR1cm4gZmV0Y2goYmluYXJ5RmlsZSx7Y3JlZGVudGlhbHM6XCJzYW1lLW9yaWdpblwifSkudGhlbihyZXNwb25zZT0+e3ZhciByZXN1bHQ9V2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcocmVzcG9uc2UsaW1wb3J0cyk7cmV0dXJuIHJlc3VsdC50aGVuKGNhbGxiYWNrLGZ1bmN0aW9uKHJlYXNvbil7ZXJyKFwid2FzbSBzdHJlYW1pbmcgY29tcGlsZSBmYWlsZWQ6IFwiK3JlYXNvbik7ZXJyKFwiZmFsbGluZyBiYWNrIHRvIEFycmF5QnVmZmVyIGluc3RhbnRpYXRpb25cIik7cmV0dXJuIGluc3RhbnRpYXRlQXJyYXlCdWZmZXIoYmluYXJ5RmlsZSxpbXBvcnRzLGNhbGxiYWNrKX0pfSl9ZWxzZXtyZXR1cm4gaW5zdGFudGlhdGVBcnJheUJ1ZmZlcihiaW5hcnlGaWxlLGltcG9ydHMsY2FsbGJhY2spfX1mdW5jdGlvbiBjcmVhdGVXYXNtKCl7dmFyIGluZm89e1wiYVwiOndhc21JbXBvcnRzfTtmdW5jdGlvbiByZWNlaXZlSW5zdGFuY2UoaW5zdGFuY2UsbW9kdWxlKXt2YXIgZXhwb3J0cz1pbnN0YW5jZS5leHBvcnRzO01vZHVsZVtcImFzbVwiXT1leHBvcnRzO3dhc21NZW1vcnk9TW9kdWxlW1wiYXNtXCJdW1wiUWFcIl07dXBkYXRlTWVtb3J5Vmlld3MoKTt3YXNtVGFibGU9TW9kdWxlW1wiYXNtXCJdW1wiVGFcIl07YWRkT25Jbml0KE1vZHVsZVtcImFzbVwiXVtcIlJhXCJdKTtyZW1vdmVSdW5EZXBlbmRlbmN5KFwid2FzbS1pbnN0YW50aWF0ZVwiKTtyZXR1cm4gZXhwb3J0c31hZGRSdW5EZXBlbmRlbmN5KFwid2FzbS1pbnN0YW50aWF0ZVwiKTtmdW5jdGlvbiByZWNlaXZlSW5zdGFudGlhdGlvblJlc3VsdChyZXN1bHQpe3JlY2VpdmVJbnN0YW5jZShyZXN1bHRbXCJpbnN0YW5jZVwiXSl9aWYoTW9kdWxlW1wiaW5zdGFudGlhdGVXYXNtXCJdKXt0cnl7cmV0dXJuIE1vZHVsZVtcImluc3RhbnRpYXRlV2FzbVwiXShpbmZvLHJlY2VpdmVJbnN0YW5jZSl9Y2F0Y2goZSl7ZXJyKFwiTW9kdWxlLmluc3RhbnRpYXRlV2FzbSBjYWxsYmFjayBmYWlsZWQgd2l0aCBlcnJvcjogXCIrZSk7cmVhZHlQcm9taXNlUmVqZWN0KGUpfX1pbnN0YW50aWF0ZUFzeW5jKHdhc21CaW5hcnksd2FzbUJpbmFyeUZpbGUsaW5mbyxyZWNlaXZlSW5zdGFudGlhdGlvblJlc3VsdCkuY2F0Y2gocmVhZHlQcm9taXNlUmVqZWN0KTtyZXR1cm57fX12YXIgdGVtcERvdWJsZTt2YXIgdGVtcEk2NDtmdW5jdGlvbiBFeGl0U3RhdHVzKHN0YXR1cyl7dGhpcy5uYW1lPVwiRXhpdFN0YXR1c1wiO3RoaXMubWVzc2FnZT1gUHJvZ3JhbSB0ZXJtaW5hdGVkIHdpdGggZXhpdCgke3N0YXR1c30pYDt0aGlzLnN0YXR1cz1zdGF0dXN9ZnVuY3Rpb24gY2FsbFJ1bnRpbWVDYWxsYmFja3MoY2FsbGJhY2tzKXt3aGlsZShjYWxsYmFja3MubGVuZ3RoPjApe2NhbGxiYWNrcy5zaGlmdCgpKE1vZHVsZSl9fWZ1bmN0aW9uIF9YTUxfR2V0QnVmZmVyKCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogWE1MX0dldEJ1ZmZlclwiKTthYm9ydCgtMSl9ZnVuY3Rpb24gX1hNTF9HZXRFcnJvckNvZGUoKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiBYTUxfR2V0RXJyb3JDb2RlXCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfWE1MX1BhcnNlKCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogWE1MX1BhcnNlXCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfWE1MX1BhcnNlQnVmZmVyKCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogWE1MX1BhcnNlQnVmZmVyXCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfWE1MX1BhcnNlckNyZWF0ZSgpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IFhNTF9QYXJzZXJDcmVhdGVcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF9YTUxfUGFyc2VyRnJlZSgpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IFhNTF9QYXJzZXJGcmVlXCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfWE1MX1Jlc3VtZVBhcnNlcigpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IFhNTF9SZXN1bWVQYXJzZXJcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF9YTUxfU2V0Q2hhcmFjdGVyRGF0YUhhbmRsZXIoKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiBYTUxfU2V0Q2hhcmFjdGVyRGF0YUhhbmRsZXJcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF9YTUxfU2V0RWxlbWVudEhhbmRsZXIoKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiBYTUxfU2V0RWxlbWVudEhhbmRsZXJcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF9YTUxfU2V0VXNlckRhdGEoKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiBYTUxfU2V0VXNlckRhdGFcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF9YTUxfU3RvcFBhcnNlcigpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IFhNTF9TdG9wUGFyc2VyXCIpO2Fib3J0KC0xKX12YXIgZGxvcGVuTWlzc2luZ0Vycm9yPVwiVG8gdXNlIGRsb3BlbiwgeW91IG5lZWQgZW5hYmxlIGR5bmFtaWMgbGlua2luZywgc2VlIGh0dHBzOi8vZW1zY3JpcHRlbi5vcmcvZG9jcy9jb21waWxpbmcvRHluYW1pYy1MaW5raW5nLmh0bWxcIjtmdW5jdGlvbiBfX19kbHN5bShoYW5kbGUsc3ltYm9sLHJhKXthYm9ydChkbG9wZW5NaXNzaW5nRXJyb3IpfXZhciBVVEY4RGVjb2Rlcj10eXBlb2YgVGV4dERlY29kZXIhPVwidW5kZWZpbmVkXCI/bmV3IFRleHREZWNvZGVyKFwidXRmOFwiKTp1bmRlZmluZWQ7ZnVuY3Rpb24gVVRGOEFycmF5VG9TdHJpbmcoaGVhcE9yQXJyYXksaWR4LG1heEJ5dGVzVG9SZWFkKXtpZHg+Pj49MDt2YXIgZW5kSWR4PWlkeCttYXhCeXRlc1RvUmVhZDt2YXIgZW5kUHRyPWlkeDt3aGlsZShoZWFwT3JBcnJheVtlbmRQdHJdJiYhKGVuZFB0cj49ZW5kSWR4KSkrK2VuZFB0cjtpZihlbmRQdHItaWR4PjE2JiZoZWFwT3JBcnJheS5idWZmZXImJlVURjhEZWNvZGVyKXtyZXR1cm4gVVRGOERlY29kZXIuZGVjb2RlKGhlYXBPckFycmF5LnN1YmFycmF5KGlkeCxlbmRQdHIpKX12YXIgc3RyPVwiXCI7d2hpbGUoaWR4PGVuZFB0cil7dmFyIHUwPWhlYXBPckFycmF5W2lkeCsrXTtpZighKHUwJjEyOCkpe3N0cis9U3RyaW5nLmZyb21DaGFyQ29kZSh1MCk7Y29udGludWV9dmFyIHUxPWhlYXBPckFycmF5W2lkeCsrXSY2MztpZigodTAmMjI0KT09MTkyKXtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUoKHUwJjMxKTw8Nnx1MSk7Y29udGludWV9dmFyIHUyPWhlYXBPckFycmF5W2lkeCsrXSY2MztpZigodTAmMjQwKT09MjI0KXt1MD0odTAmMTUpPDwxMnx1MTw8Nnx1Mn1lbHNle3UwPSh1MCY3KTw8MTh8dTE8PDEyfHUyPDw2fGhlYXBPckFycmF5W2lkeCsrXSY2M31pZih1MDw2NTUzNil7c3RyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHUwKX1lbHNle3ZhciBjaD11MC02NTUzNjtzdHIrPVN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8Y2g+PjEwLDU2MzIwfGNoJjEwMjMpfX1yZXR1cm4gc3RyfWZ1bmN0aW9uIFVURjhUb1N0cmluZyhwdHIsbWF4Qnl0ZXNUb1JlYWQpe3B0cj4+Pj0wO3JldHVybiBwdHI/VVRGOEFycmF5VG9TdHJpbmcoSEVBUFU4LHB0cixtYXhCeXRlc1RvUmVhZCk6XCJcIn12YXIgU1lTQ0FMTFM9e3ZhcmFyZ3M6dW5kZWZpbmVkLGdldDpmdW5jdGlvbigpe1NZU0NBTExTLnZhcmFyZ3MrPTQ7dmFyIHJldD1IRUFQMzJbU1lTQ0FMTFMudmFyYXJncy00Pj4+Ml07cmV0dXJuIHJldH0sZ2V0U3RyOmZ1bmN0aW9uKHB0cil7dmFyIHJldD1VVEY4VG9TdHJpbmcocHRyKTtyZXR1cm4gcmV0fX07ZnVuY3Rpb24gX19fc3lzY2FsbF9fbmV3c2VsZWN0KG5mZHMscmVhZGZkcyx3cml0ZWZkcyxleGNlcHRmZHMsdGltZW91dCl7dmFyIHRvdGFsPTA7dmFyIHNyY1JlYWRMb3c9cmVhZGZkcz9IRUFQMzJbcmVhZGZkcz4+PjJdOjAsc3JjUmVhZEhpZ2g9cmVhZGZkcz9IRUFQMzJbcmVhZGZkcys0Pj4+Ml06MDt2YXIgc3JjV3JpdGVMb3c9d3JpdGVmZHM/SEVBUDMyW3dyaXRlZmRzPj4+Ml06MCxzcmNXcml0ZUhpZ2g9d3JpdGVmZHM/SEVBUDMyW3dyaXRlZmRzKzQ+Pj4yXTowO3ZhciBzcmNFeGNlcHRMb3c9ZXhjZXB0ZmRzP0hFQVAzMltleGNlcHRmZHM+Pj4yXTowLHNyY0V4Y2VwdEhpZ2g9ZXhjZXB0ZmRzP0hFQVAzMltleGNlcHRmZHMrND4+PjJdOjA7dmFyIGRzdFJlYWRMb3c9MCxkc3RSZWFkSGlnaD0wO3ZhciBkc3RXcml0ZUxvdz0wLGRzdFdyaXRlSGlnaD0wO3ZhciBkc3RFeGNlcHRMb3c9MCxkc3RFeGNlcHRIaWdoPTA7dmFyIGFsbExvdz0ocmVhZGZkcz9IRUFQMzJbcmVhZGZkcz4+PjJdOjApfCh3cml0ZWZkcz9IRUFQMzJbd3JpdGVmZHM+Pj4yXTowKXwoZXhjZXB0ZmRzP0hFQVAzMltleGNlcHRmZHM+Pj4yXTowKTt2YXIgYWxsSGlnaD0ocmVhZGZkcz9IRUFQMzJbcmVhZGZkcys0Pj4+Ml06MCl8KHdyaXRlZmRzP0hFQVAzMlt3cml0ZWZkcys0Pj4+Ml06MCl8KGV4Y2VwdGZkcz9IRUFQMzJbZXhjZXB0ZmRzKzQ+Pj4yXTowKTt2YXIgY2hlY2s9ZnVuY3Rpb24oZmQsbG93LGhpZ2gsdmFsKXtyZXR1cm4gZmQ8MzI/bG93JnZhbDpoaWdoJnZhbH07Zm9yKHZhciBmZD0wO2ZkPG5mZHM7ZmQrKyl7dmFyIG1hc2s9MTw8ZmQlMzI7aWYoIWNoZWNrKGZkLGFsbExvdyxhbGxIaWdoLG1hc2spKXtjb250aW51ZX12YXIgc3RyZWFtPVNZU0NBTExTLmdldFN0cmVhbUZyb21GRChmZCk7dmFyIGZsYWdzPVNZU0NBTExTLkRFRkFVTFRfUE9MTE1BU0s7aWYoc3RyZWFtLnN0cmVhbV9vcHMucG9sbCl7ZmxhZ3M9c3RyZWFtLnN0cmVhbV9vcHMucG9sbChzdHJlYW0pfWlmKGZsYWdzJjEmJmNoZWNrKGZkLHNyY1JlYWRMb3csc3JjUmVhZEhpZ2gsbWFzaykpe2ZkPDMyP2RzdFJlYWRMb3c9ZHN0UmVhZExvd3xtYXNrOmRzdFJlYWRIaWdoPWRzdFJlYWRIaWdofG1hc2s7dG90YWwrK31pZihmbGFncyY0JiZjaGVjayhmZCxzcmNXcml0ZUxvdyxzcmNXcml0ZUhpZ2gsbWFzaykpe2ZkPDMyP2RzdFdyaXRlTG93PWRzdFdyaXRlTG93fG1hc2s6ZHN0V3JpdGVIaWdoPWRzdFdyaXRlSGlnaHxtYXNrO3RvdGFsKyt9aWYoZmxhZ3MmMiYmY2hlY2soZmQsc3JjRXhjZXB0TG93LHNyY0V4Y2VwdEhpZ2gsbWFzaykpe2ZkPDMyP2RzdEV4Y2VwdExvdz1kc3RFeGNlcHRMb3d8bWFzazpkc3RFeGNlcHRIaWdoPWRzdEV4Y2VwdEhpZ2h8bWFzazt0b3RhbCsrfX1pZihyZWFkZmRzKXtIRUFQMzJbcmVhZGZkcz4+PjJdPWRzdFJlYWRMb3c7SEVBUDMyW3JlYWRmZHMrND4+PjJdPWRzdFJlYWRIaWdofWlmKHdyaXRlZmRzKXtIRUFQMzJbd3JpdGVmZHM+Pj4yXT1kc3RXcml0ZUxvdztIRUFQMzJbd3JpdGVmZHMrND4+PjJdPWRzdFdyaXRlSGlnaH1pZihleGNlcHRmZHMpe0hFQVAzMltleGNlcHRmZHM+Pj4yXT1kc3RFeGNlcHRMb3c7SEVBUDMyW2V4Y2VwdGZkcys0Pj4+Ml09ZHN0RXhjZXB0SGlnaH1yZXR1cm4gdG90YWx9ZnVuY3Rpb24gU09DS0ZTKCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogJFNPQ0tGU1wiKTthYm9ydCgtMSl9ZnVuY3Rpb24gRlMoKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiAkRlNcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIGdldFNvY2tldEZyb21GRChmZCl7dmFyIHNvY2tldD1TT0NLRlMuZ2V0U29ja2V0KGZkKTtpZighc29ja2V0KXRocm93IG5ldyBGUy5FcnJub0Vycm9yKDgpO3JldHVybiBzb2NrZXR9ZnVuY3Rpb24gaW5ldE50b3A0KGFkZHIpe3JldHVybihhZGRyJjI1NSkrXCIuXCIrKGFkZHI+PjgmMjU1KStcIi5cIisoYWRkcj4+MTYmMjU1KStcIi5cIisoYWRkcj4+MjQmMjU1KX1mdW5jdGlvbiBpbmV0TnRvcDYoaW50cyl7dmFyIHN0cj1cIlwiO3ZhciB3b3JkPTA7dmFyIGxvbmdlc3Q9MDt2YXIgbGFzdHplcm89MDt2YXIgenN0YXJ0PTA7dmFyIGxlbj0wO3ZhciBpPTA7dmFyIHBhcnRzPVtpbnRzWzBdJjY1NTM1LGludHNbMF0+PjE2LGludHNbMV0mNjU1MzUsaW50c1sxXT4+MTYsaW50c1syXSY2NTUzNSxpbnRzWzJdPj4xNixpbnRzWzNdJjY1NTM1LGludHNbM10+PjE2XTt2YXIgaGFzaXB2ND10cnVlO3ZhciB2NHBhcnQ9XCJcIjtmb3IoaT0wO2k8NTtpKyspe2lmKHBhcnRzW2ldIT09MCl7aGFzaXB2ND1mYWxzZTticmVha319aWYoaGFzaXB2NCl7djRwYXJ0PWluZXROdG9wNChwYXJ0c1s2XXxwYXJ0c1s3XTw8MTYpO2lmKHBhcnRzWzVdPT09LTEpe3N0cj1cIjo6ZmZmZjpcIjtzdHIrPXY0cGFydDtyZXR1cm4gc3RyfWlmKHBhcnRzWzVdPT09MCl7c3RyPVwiOjpcIjtpZih2NHBhcnQ9PT1cIjAuMC4wLjBcIil2NHBhcnQ9XCJcIjtpZih2NHBhcnQ9PT1cIjAuMC4wLjFcIil2NHBhcnQ9XCIxXCI7c3RyKz12NHBhcnQ7cmV0dXJuIHN0cn19Zm9yKHdvcmQ9MDt3b3JkPDg7d29yZCsrKXtpZihwYXJ0c1t3b3JkXT09PTApe2lmKHdvcmQtbGFzdHplcm8+MSl7bGVuPTB9bGFzdHplcm89d29yZDtsZW4rK31pZihsZW4+bG9uZ2VzdCl7bG9uZ2VzdD1sZW47enN0YXJ0PXdvcmQtbG9uZ2VzdCsxfX1mb3Iod29yZD0wO3dvcmQ8ODt3b3JkKyspe2lmKGxvbmdlc3Q+MSl7aWYocGFydHNbd29yZF09PT0wJiZ3b3JkPj16c3RhcnQmJndvcmQ8enN0YXJ0K2xvbmdlc3Qpe2lmKHdvcmQ9PT16c3RhcnQpe3N0cis9XCI6XCI7aWYoenN0YXJ0PT09MClzdHIrPVwiOlwifWNvbnRpbnVlfX1zdHIrPU51bWJlcihfbnRvaHMocGFydHNbd29yZF0mNjU1MzUpKS50b1N0cmluZygxNik7c3RyKz13b3JkPDc/XCI6XCI6XCJcIn1yZXR1cm4gc3RyfWZ1bmN0aW9uIHJlYWRTb2NrYWRkcihzYSxzYWxlbil7dmFyIGZhbWlseT1IRUFQMTZbc2E+Pj4xXTt2YXIgcG9ydD1fbnRvaHMoSEVBUFUxNltzYSsyPj4+MV0pO3ZhciBhZGRyO3N3aXRjaChmYW1pbHkpe2Nhc2UgMjppZihzYWxlbiE9PTE2KXtyZXR1cm57ZXJybm86Mjh9fWFkZHI9SEVBUDMyW3NhKzQ+Pj4yXTthZGRyPWluZXROdG9wNChhZGRyKTticmVhaztjYXNlIDEwOmlmKHNhbGVuIT09Mjgpe3JldHVybntlcnJubzoyOH19YWRkcj1bSEVBUDMyW3NhKzg+Pj4yXSxIRUFQMzJbc2ErMTI+Pj4yXSxIRUFQMzJbc2ErMTY+Pj4yXSxIRUFQMzJbc2ErMjA+Pj4yXV07YWRkcj1pbmV0TnRvcDYoYWRkcik7YnJlYWs7ZGVmYXVsdDpyZXR1cm57ZXJybm86NX19cmV0dXJue2ZhbWlseTpmYW1pbHksYWRkcjphZGRyLHBvcnQ6cG9ydH19ZnVuY3Rpb24gaW5ldFB0b240KHN0cil7dmFyIGI9c3RyLnNwbGl0KFwiLlwiKTtmb3IodmFyIGk9MDtpPDQ7aSsrKXt2YXIgdG1wPU51bWJlcihiW2ldKTtpZihpc05hTih0bXApKXJldHVybiBudWxsO2JbaV09dG1wfXJldHVybihiWzBdfGJbMV08PDh8YlsyXTw8MTZ8YlszXTw8MjQpPj4+MH1mdW5jdGlvbiBqc3RvaV9xKHN0cil7cmV0dXJuIHBhcnNlSW50KHN0cil9ZnVuY3Rpb24gaW5ldFB0b242KHN0cil7dmFyIHdvcmRzO3ZhciB3LG9mZnNldCx6O3ZhciB2YWxpZDZyZWd4PS9eKCg/PS4qOjopKD8hLio6Oi4rOjopKDo6KT8oW1xcZEEtRl17MSw0fTooOnxcXGIpfCl7NX18KFtcXGRBLUZdezEsNH06KXs2fSkoKChbXFxkQS1GXXsxLDR9KCg/IVxcMyk6Onw6XFxifCQpKXwoPyFcXDJcXDMpKXsyfXwoKCgyWzAtNF18MVxcZHxbMS05XSk/XFxkfDI1WzAtNV0pXFwuP1xcYil7NH0pJC9pO3ZhciBwYXJ0cz1bXTtpZighdmFsaWQ2cmVneC50ZXN0KHN0cikpe3JldHVybiBudWxsfWlmKHN0cj09PVwiOjpcIil7cmV0dXJuWzAsMCwwLDAsMCwwLDAsMF19aWYoc3RyLnN0YXJ0c1dpdGgoXCI6OlwiKSl7c3RyPXN0ci5yZXBsYWNlKFwiOjpcIixcIlo6XCIpfWVsc2V7c3RyPXN0ci5yZXBsYWNlKFwiOjpcIixcIjpaOlwiKX1pZihzdHIuaW5kZXhPZihcIi5cIik+MCl7c3RyPXN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoXCJbLl1cIixcImdcIiksXCI6XCIpO3dvcmRzPXN0ci5zcGxpdChcIjpcIik7d29yZHNbd29yZHMubGVuZ3RoLTRdPWpzdG9pX3Eod29yZHNbd29yZHMubGVuZ3RoLTRdKStqc3RvaV9xKHdvcmRzW3dvcmRzLmxlbmd0aC0zXSkqMjU2O3dvcmRzW3dvcmRzLmxlbmd0aC0zXT1qc3RvaV9xKHdvcmRzW3dvcmRzLmxlbmd0aC0yXSkranN0b2lfcSh3b3Jkc1t3b3Jkcy5sZW5ndGgtMV0pKjI1Njt3b3Jkcz13b3Jkcy5zbGljZSgwLHdvcmRzLmxlbmd0aC0yKX1lbHNle3dvcmRzPXN0ci5zcGxpdChcIjpcIil9b2Zmc2V0PTA7ej0wO2Zvcih3PTA7dzx3b3Jkcy5sZW5ndGg7dysrKXtpZih0eXBlb2Ygd29yZHNbd109PVwic3RyaW5nXCIpe2lmKHdvcmRzW3ddPT09XCJaXCIpe2Zvcih6PTA7ejw4LXdvcmRzLmxlbmd0aCsxO3orKyl7cGFydHNbdyt6XT0wfW9mZnNldD16LTF9ZWxzZXtwYXJ0c1t3K29mZnNldF09X2h0b25zKHBhcnNlSW50KHdvcmRzW3ddLDE2KSl9fWVsc2V7cGFydHNbdytvZmZzZXRdPXdvcmRzW3ddfX1yZXR1cm5bcGFydHNbMV08PDE2fHBhcnRzWzBdLHBhcnRzWzNdPDwxNnxwYXJ0c1syXSxwYXJ0c1s1XTw8MTZ8cGFydHNbNF0scGFydHNbN108PDE2fHBhcnRzWzZdXX12YXIgRE5TPXthZGRyZXNzX21hcDp7aWQ6MSxhZGRyczp7fSxuYW1lczp7fX0sbG9va3VwX25hbWU6ZnVuY3Rpb24obmFtZSl7dmFyIHJlcz1pbmV0UHRvbjQobmFtZSk7aWYocmVzIT09bnVsbCl7cmV0dXJuIG5hbWV9cmVzPWluZXRQdG9uNihuYW1lKTtpZihyZXMhPT1udWxsKXtyZXR1cm4gbmFtZX12YXIgYWRkcjtpZihETlMuYWRkcmVzc19tYXAuYWRkcnNbbmFtZV0pe2FkZHI9RE5TLmFkZHJlc3NfbWFwLmFkZHJzW25hbWVdfWVsc2V7dmFyIGlkPUROUy5hZGRyZXNzX21hcC5pZCsrO2Fzc2VydChpZDw2NTUzNSxcImV4Y2VlZGVkIG1heCBhZGRyZXNzIG1hcHBpbmdzIG9mIDY1NTM1XCIpO2FkZHI9XCIxNzIuMjkuXCIrKGlkJjI1NSkrXCIuXCIrKGlkJjY1MjgwKTtETlMuYWRkcmVzc19tYXAubmFtZXNbYWRkcl09bmFtZTtETlMuYWRkcmVzc19tYXAuYWRkcnNbbmFtZV09YWRkcn1yZXR1cm4gYWRkcn0sbG9va3VwX2FkZHI6ZnVuY3Rpb24oYWRkcil7aWYoRE5TLmFkZHJlc3NfbWFwLm5hbWVzW2FkZHJdKXtyZXR1cm4gRE5TLmFkZHJlc3NfbWFwLm5hbWVzW2FkZHJdfXJldHVybiBudWxsfX07ZnVuY3Rpb24gZ2V0U29ja2V0QWRkcmVzcyhhZGRycCxhZGRybGVuLGFsbG93TnVsbCl7aWYoYWxsb3dOdWxsJiZhZGRycD09PTApcmV0dXJuIG51bGw7dmFyIGluZm89cmVhZFNvY2thZGRyKGFkZHJwLGFkZHJsZW4pO2lmKGluZm8uZXJybm8pdGhyb3cgbmV3IEZTLkVycm5vRXJyb3IoaW5mby5lcnJubyk7aW5mby5hZGRyPUROUy5sb29rdXBfYWRkcihpbmZvLmFkZHIpfHxpbmZvLmFkZHI7cmV0dXJuIGluZm99ZnVuY3Rpb24gX19fc3lzY2FsbF9iaW5kKGZkLGFkZHIsYWRkcmxlbixkMSxkMixkMyl7dmFyIHNvY2s9Z2V0U29ja2V0RnJvbUZEKGZkKTt2YXIgaW5mbz1nZXRTb2NrZXRBZGRyZXNzKGFkZHIsYWRkcmxlbik7c29jay5zb2NrX29wcy5iaW5kKHNvY2ssaW5mby5hZGRyLGluZm8ucG9ydCk7cmV0dXJuIDB9ZnVuY3Rpb24gX19fc3lzY2FsbF9jb25uZWN0KGZkLGFkZHIsYWRkcmxlbixkMSxkMixkMyl7dmFyIHNvY2s9Z2V0U29ja2V0RnJvbUZEKGZkKTt2YXIgaW5mbz1nZXRTb2NrZXRBZGRyZXNzKGFkZHIsYWRkcmxlbik7c29jay5zb2NrX29wcy5jb25uZWN0KHNvY2ssaW5mby5hZGRyLGluZm8ucG9ydCk7cmV0dXJuIDB9ZnVuY3Rpb24gX19fc3lzY2FsbF9mYWNjZXNzYXQoZGlyZmQscGF0aCxhbW9kZSxmbGFncyl7fWZ1bmN0aW9uIF9fX3N5c2NhbGxfZmNudGw2NChmZCxjbWQsdmFyYXJncyl7U1lTQ0FMTFMudmFyYXJncz12YXJhcmdzO3JldHVybiAwfWZ1bmN0aW9uIF9fX3N5c2NhbGxfZnN0YXQ2NChmZCxidWYpe31mdW5jdGlvbiBfX19zeXNjYWxsX2Z0cnVuY2F0ZTY0KGZkLGxlbmd0aF9sb3csbGVuZ3RoX2hpZ2gpe31mdW5jdGlvbiBzdHJpbmdUb1VURjhBcnJheShzdHIsaGVhcCxvdXRJZHgsbWF4Qnl0ZXNUb1dyaXRlKXtvdXRJZHg+Pj49MDtpZighKG1heEJ5dGVzVG9Xcml0ZT4wKSlyZXR1cm4gMDt2YXIgc3RhcnRJZHg9b3V0SWR4O3ZhciBlbmRJZHg9b3V0SWR4K21heEJ5dGVzVG9Xcml0ZS0xO2Zvcih2YXIgaT0wO2k8c3RyLmxlbmd0aDsrK2kpe3ZhciB1PXN0ci5jaGFyQ29kZUF0KGkpO2lmKHU+PTU1Mjk2JiZ1PD01NzM0Myl7dmFyIHUxPXN0ci5jaGFyQ29kZUF0KCsraSk7dT02NTUzNisoKHUmMTAyMyk8PDEwKXx1MSYxMDIzfWlmKHU8PTEyNyl7aWYob3V0SWR4Pj1lbmRJZHgpYnJlYWs7aGVhcFtvdXRJZHgrKz4+PjBdPXV9ZWxzZSBpZih1PD0yMDQ3KXtpZihvdXRJZHgrMT49ZW5kSWR4KWJyZWFrO2hlYXBbb3V0SWR4Kys+Pj4wXT0xOTJ8dT4+NjtoZWFwW291dElkeCsrPj4+MF09MTI4fHUmNjN9ZWxzZSBpZih1PD02NTUzNSl7aWYob3V0SWR4KzI+PWVuZElkeClicmVhaztoZWFwW291dElkeCsrPj4+MF09MjI0fHU+PjEyO2hlYXBbb3V0SWR4Kys+Pj4wXT0xMjh8dT4+NiY2MztoZWFwW291dElkeCsrPj4+MF09MTI4fHUmNjN9ZWxzZXtpZihvdXRJZHgrMz49ZW5kSWR4KWJyZWFrO2hlYXBbb3V0SWR4Kys+Pj4wXT0yNDB8dT4+MTg7aGVhcFtvdXRJZHgrKz4+PjBdPTEyOHx1Pj4xMiY2MztoZWFwW291dElkeCsrPj4+MF09MTI4fHU+PjYmNjM7aGVhcFtvdXRJZHgrKz4+PjBdPTEyOHx1JjYzfX1oZWFwW291dElkeD4+PjBdPTA7cmV0dXJuIG91dElkeC1zdGFydElkeH1mdW5jdGlvbiBzdHJpbmdUb1VURjgoc3RyLG91dFB0cixtYXhCeXRlc1RvV3JpdGUpe3JldHVybiBzdHJpbmdUb1VURjhBcnJheShzdHIsSEVBUFU4LG91dFB0cixtYXhCeXRlc1RvV3JpdGUpfWZ1bmN0aW9uIF9fX3N5c2NhbGxfZ2V0ZGVudHM2NChmZCxkaXJwLGNvdW50KXt9ZnVuY3Rpb24gemVyb01lbW9yeShhZGRyZXNzLHNpemUpe0hFQVBVOC5maWxsKDAsYWRkcmVzcyxhZGRyZXNzK3NpemUpO3JldHVybiBhZGRyZXNzfWZ1bmN0aW9uIHdyaXRlU29ja2FkZHIoc2EsZmFtaWx5LGFkZHIscG9ydCxhZGRybGVuKXtzd2l0Y2goZmFtaWx5KXtjYXNlIDI6YWRkcj1pbmV0UHRvbjQoYWRkcik7emVyb01lbW9yeShzYSwxNik7aWYoYWRkcmxlbil7SEVBUDMyW2FkZHJsZW4+Pj4yXT0xNn1IRUFQMTZbc2E+Pj4xXT1mYW1pbHk7SEVBUDMyW3NhKzQ+Pj4yXT1hZGRyO0hFQVAxNltzYSsyPj4+MV09X2h0b25zKHBvcnQpO2JyZWFrO2Nhc2UgMTA6YWRkcj1pbmV0UHRvbjYoYWRkcik7emVyb01lbW9yeShzYSwyOCk7aWYoYWRkcmxlbil7SEVBUDMyW2FkZHJsZW4+Pj4yXT0yOH1IRUFQMzJbc2E+Pj4yXT1mYW1pbHk7SEVBUDMyW3NhKzg+Pj4yXT1hZGRyWzBdO0hFQVAzMltzYSsxMj4+PjJdPWFkZHJbMV07SEVBUDMyW3NhKzE2Pj4+Ml09YWRkclsyXTtIRUFQMzJbc2ErMjA+Pj4yXT1hZGRyWzNdO0hFQVAxNltzYSsyPj4+MV09X2h0b25zKHBvcnQpO2JyZWFrO2RlZmF1bHQ6cmV0dXJuIDV9cmV0dXJuIDB9ZnVuY3Rpb24gX19fc3lzY2FsbF9nZXRwZWVybmFtZShmZCxhZGRyLGFkZHJsZW4sZDEsZDIsZDMpe3ZhciBzb2NrPWdldFNvY2tldEZyb21GRChmZCk7aWYoIXNvY2suZGFkZHIpe3JldHVybi01M312YXIgZXJybm89d3JpdGVTb2NrYWRkcihhZGRyLHNvY2suZmFtaWx5LEROUy5sb29rdXBfbmFtZShzb2NrLmRhZGRyKSxzb2NrLmRwb3J0LGFkZHJsZW4pO3JldHVybiAwfWZ1bmN0aW9uIF9fX3N5c2NhbGxfZ2V0c29ja29wdChmZCxsZXZlbCxvcHRuYW1lLG9wdHZhbCxvcHRsZW4sZDEpe3ZhciBzb2NrPWdldFNvY2tldEZyb21GRChmZCk7aWYobGV2ZWw9PT0xKXtpZihvcHRuYW1lPT09NCl7SEVBUDMyW29wdHZhbD4+PjJdPXNvY2suZXJyb3I7SEVBUDMyW29wdGxlbj4+PjJdPTQ7c29jay5lcnJvcj1udWxsO3JldHVybiAwfX1yZXR1cm4tNTB9ZnVuY3Rpb24gX19fc3lzY2FsbF9pb2N0bChmZCxvcCx2YXJhcmdzKXtTWVNDQUxMUy52YXJhcmdzPXZhcmFyZ3M7cmV0dXJuIDB9ZnVuY3Rpb24gX19fc3lzY2FsbF9sc3RhdDY0KHBhdGgsYnVmKXt9ZnVuY3Rpb24gX19fc3lzY2FsbF9ta2RpcmF0KGRpcmZkLHBhdGgsbW9kZSl7fWZ1bmN0aW9uIF9fX3N5c2NhbGxfbmV3ZnN0YXRhdChkaXJmZCxwYXRoLGJ1ZixmbGFncyl7fWZ1bmN0aW9uIF9fX3N5c2NhbGxfb3BlbmF0KGRpcmZkLHBhdGgsZmxhZ3MsdmFyYXJncyl7U1lTQ0FMTFMudmFyYXJncz12YXJhcmdzfWZ1bmN0aW9uIF9fX3N5c2NhbGxfcmVjdmZyb20oZmQsYnVmLGxlbixmbGFncyxhZGRyLGFkZHJsZW4pe3ZhciBzb2NrPWdldFNvY2tldEZyb21GRChmZCk7dmFyIG1zZz1zb2NrLnNvY2tfb3BzLnJlY3Ztc2coc29jayxsZW4pO2lmKCFtc2cpcmV0dXJuIDA7aWYoYWRkcil7dmFyIGVycm5vPXdyaXRlU29ja2FkZHIoYWRkcixzb2NrLmZhbWlseSxETlMubG9va3VwX25hbWUobXNnLmFkZHIpLG1zZy5wb3J0LGFkZHJsZW4pfUhFQVBVOC5zZXQobXNnLmJ1ZmZlcixidWY+Pj4wKTtyZXR1cm4gbXNnLmJ1ZmZlci5ieXRlTGVuZ3RofWZ1bmN0aW9uIF9fX3N5c2NhbGxfcmVuYW1lYXQob2xkZGlyZmQsb2xkcGF0aCxuZXdkaXJmZCxuZXdwYXRoKXt9ZnVuY3Rpb24gX19fc3lzY2FsbF9ybWRpcihwYXRoKXt9ZnVuY3Rpb24gX19fc3lzY2FsbF9zZW5kdG8oZmQsbWVzc2FnZSxsZW5ndGgsZmxhZ3MsYWRkcixhZGRyX2xlbil7fWZ1bmN0aW9uIF9fX3N5c2NhbGxfc29ja2V0KGRvbWFpbix0eXBlLHByb3RvY29sKXt9ZnVuY3Rpb24gX19fc3lzY2FsbF9zdGF0NjQocGF0aCxidWYpe31mdW5jdGlvbiBfX19zeXNjYWxsX3VubGlua2F0KGRpcmZkLHBhdGgsZmxhZ3Mpe312YXIgbm93SXNNb25vdG9uaWM9dHJ1ZTtmdW5jdGlvbiBfX2Vtc2NyaXB0ZW5fZ2V0X25vd19pc19tb25vdG9uaWMoKXtyZXR1cm4gbm93SXNNb25vdG9uaWN9ZnVuY3Rpb24gcmVhZEk1M0Zyb21JNjQocHRyKXtyZXR1cm4gSEVBUFUzMltwdHI+Pj4yXStIRUFQMzJbcHRyKzQ+Pj4yXSo0Mjk0OTY3Mjk2fWZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcil7cmV0dXJuIHllYXIlND09PTAmJih5ZWFyJTEwMCE9PTB8fHllYXIlNDAwPT09MCl9dmFyIE1PTlRIX0RBWVNfTEVBUF9DVU1VTEFUSVZFPVswLDMxLDYwLDkxLDEyMSwxNTIsMTgyLDIxMywyNDQsMjc0LDMwNSwzMzVdO3ZhciBNT05USF9EQVlTX1JFR1VMQVJfQ1VNVUxBVElWRT1bMCwzMSw1OSw5MCwxMjAsMTUxLDE4MSwyMTIsMjQzLDI3MywzMDQsMzM0XTtmdW5jdGlvbiB5ZGF5RnJvbURhdGUoZGF0ZSl7dmFyIGxlYXA9aXNMZWFwWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpO3ZhciBtb250aERheXNDdW11bGF0aXZlPWxlYXA/TU9OVEhfREFZU19MRUFQX0NVTVVMQVRJVkU6TU9OVEhfREFZU19SRUdVTEFSX0NVTVVMQVRJVkU7dmFyIHlkYXk9bW9udGhEYXlzQ3VtdWxhdGl2ZVtkYXRlLmdldE1vbnRoKCldK2RhdGUuZ2V0RGF0ZSgpLTE7cmV0dXJuIHlkYXl9ZnVuY3Rpb24gX19sb2NhbHRpbWVfanModGltZSx0bVB0cil7dmFyIGRhdGU9bmV3IERhdGUocmVhZEk1M0Zyb21JNjQodGltZSkqMWUzKTtIRUFQMzJbdG1QdHI+Pj4yXT1kYXRlLmdldFNlY29uZHMoKTtIRUFQMzJbdG1QdHIrND4+PjJdPWRhdGUuZ2V0TWludXRlcygpO0hFQVAzMlt0bVB0cis4Pj4+Ml09ZGF0ZS5nZXRIb3VycygpO0hFQVAzMlt0bVB0cisxMj4+PjJdPWRhdGUuZ2V0RGF0ZSgpO0hFQVAzMlt0bVB0cisxNj4+PjJdPWRhdGUuZ2V0TW9udGgoKTtIRUFQMzJbdG1QdHIrMjA+Pj4yXT1kYXRlLmdldEZ1bGxZZWFyKCktMTkwMDtIRUFQMzJbdG1QdHIrMjQ+Pj4yXT1kYXRlLmdldERheSgpO3ZhciB5ZGF5PXlkYXlGcm9tRGF0ZShkYXRlKXwwO0hFQVAzMlt0bVB0cisyOD4+PjJdPXlkYXk7SEVBUDMyW3RtUHRyKzM2Pj4+Ml09LShkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkqNjApO3ZhciBzdGFydD1uZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksMCwxKTt2YXIgc3VtbWVyT2Zmc2V0PW5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSw2LDEpLmdldFRpbWV6b25lT2Zmc2V0KCk7dmFyIHdpbnRlck9mZnNldD1zdGFydC5nZXRUaW1lem9uZU9mZnNldCgpO3ZhciBkc3Q9KHN1bW1lck9mZnNldCE9d2ludGVyT2Zmc2V0JiZkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk9PU1hdGgubWluKHdpbnRlck9mZnNldCxzdW1tZXJPZmZzZXQpKXwwO0hFQVAzMlt0bVB0ciszMj4+PjJdPWRzdH1mdW5jdGlvbiBsZW5ndGhCeXRlc1VURjgoc3RyKXt2YXIgbGVuPTA7Zm9yKHZhciBpPTA7aTxzdHIubGVuZ3RoOysraSl7dmFyIGM9c3RyLmNoYXJDb2RlQXQoaSk7aWYoYzw9MTI3KXtsZW4rK31lbHNlIGlmKGM8PTIwNDcpe2xlbis9Mn1lbHNlIGlmKGM+PTU1Mjk2JiZjPD01NzM0Myl7bGVuKz00OysraX1lbHNle2xlbis9M319cmV0dXJuIGxlbn1mdW5jdGlvbiBzdHJpbmdUb05ld1VURjgoc3RyKXt2YXIgc2l6ZT1sZW5ndGhCeXRlc1VURjgoc3RyKSsxO3ZhciByZXQ9X21hbGxvYyhzaXplKTtpZihyZXQpc3RyaW5nVG9VVEY4KHN0cixyZXQsc2l6ZSk7cmV0dXJuIHJldH1mdW5jdGlvbiBfX3R6c2V0X2pzKHRpbWV6b25lLGRheWxpZ2h0LHR6bmFtZSl7dmFyIGN1cnJlbnRZZWFyPShuZXcgRGF0ZSkuZ2V0RnVsbFllYXIoKTt2YXIgd2ludGVyPW5ldyBEYXRlKGN1cnJlbnRZZWFyLDAsMSk7dmFyIHN1bW1lcj1uZXcgRGF0ZShjdXJyZW50WWVhciw2LDEpO3ZhciB3aW50ZXJPZmZzZXQ9d2ludGVyLmdldFRpbWV6b25lT2Zmc2V0KCk7dmFyIHN1bW1lck9mZnNldD1zdW1tZXIuZ2V0VGltZXpvbmVPZmZzZXQoKTt2YXIgc3RkVGltZXpvbmVPZmZzZXQ9TWF0aC5tYXgod2ludGVyT2Zmc2V0LHN1bW1lck9mZnNldCk7SEVBUFUzMlt0aW1lem9uZT4+PjJdPXN0ZFRpbWV6b25lT2Zmc2V0KjYwO0hFQVAzMltkYXlsaWdodD4+PjJdPU51bWJlcih3aW50ZXJPZmZzZXQhPXN1bW1lck9mZnNldCk7ZnVuY3Rpb24gZXh0cmFjdFpvbmUoZGF0ZSl7dmFyIG1hdGNoPWRhdGUudG9UaW1lU3RyaW5nKCkubWF0Y2goL1xcKChbQS1aYS16IF0rKVxcKSQvKTtyZXR1cm4gbWF0Y2g/bWF0Y2hbMV06XCJHTVRcIn12YXIgd2ludGVyTmFtZT1leHRyYWN0Wm9uZSh3aW50ZXIpO3ZhciBzdW1tZXJOYW1lPWV4dHJhY3Rab25lKHN1bW1lcik7dmFyIHdpbnRlck5hbWVQdHI9c3RyaW5nVG9OZXdVVEY4KHdpbnRlck5hbWUpO3ZhciBzdW1tZXJOYW1lUHRyPXN0cmluZ1RvTmV3VVRGOChzdW1tZXJOYW1lKTtpZihzdW1tZXJPZmZzZXQ8d2ludGVyT2Zmc2V0KXtIRUFQVTMyW3R6bmFtZT4+PjJdPXdpbnRlck5hbWVQdHI7SEVBUFUzMlt0em5hbWUrND4+PjJdPXN1bW1lck5hbWVQdHJ9ZWxzZXtIRUFQVTMyW3R6bmFtZT4+PjJdPXN1bW1lck5hbWVQdHI7SEVBUFUzMlt0em5hbWUrND4+PjJdPXdpbnRlck5hbWVQdHJ9fWZ1bmN0aW9uIF9hYm9ydCgpe2Fib3J0KFwiXCIpfWZ1bmN0aW9uIF9kbG9wZW4oZmlsZW5hbWUsZmxhZ3Mpe2Fib3J0KGRsb3Blbk1pc3NpbmdFcnJvcil9ZnVuY3Rpb24gX2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X2NyZWF0ZShwYXRoLHBhdGhMZW4pe3JldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLmNyZWF0ZURpcmVjdG9yeShNb2R1bGUscGF0aCxwYXRoTGVuKX1mdW5jdGlvbiBfZHVja2RiX3dlYl9mc19kaXJlY3RvcnlfZXhpc3RzKHBhdGgscGF0aExlbil7cmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUuY2hlY2tEaXJlY3RvcnkoTW9kdWxlLHBhdGgscGF0aExlbil9ZnVuY3Rpb24gX2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X2xpc3RfZmlsZXMocGF0aCxwYXRoTGVuKXtyZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS5saXN0RGlyZWN0b3J5RW50cmllcyhNb2R1bGUscGF0aCxwYXRoTGVuKX1mdW5jdGlvbiBfZHVja2RiX3dlYl9mc19kaXJlY3RvcnlfcmVtb3ZlKHBhdGgscGF0aExlbil7cmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUucmVtb3ZlRGlyZWN0b3J5KE1vZHVsZSxwYXRoLHBhdGhMZW4pfWZ1bmN0aW9uIF9kdWNrZGJfd2ViX2ZzX2ZpbGVfY2xvc2UoZmlsZUlkKXtyZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS5jbG9zZUZpbGUoTW9kdWxlLGZpbGVJZCl9ZnVuY3Rpb24gX2R1Y2tkYl93ZWJfZnNfZmlsZV9leGlzdHMocGF0aCxwYXRoTGVuKXtyZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS5jaGVja0ZpbGUoTW9kdWxlLHBhdGgscGF0aExlbil9ZnVuY3Rpb24gX2R1Y2tkYl93ZWJfZnNfZmlsZV9nZXRfbGFzdF9tb2RpZmllZF90aW1lKGZpbGVJZCl7cmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUuZ2V0TGFzdEZpbGVNb2RpZmljYXRpb25UaW1lKE1vZHVsZSxmaWxlSWQpfWZ1bmN0aW9uIF9kdWNrZGJfd2ViX2ZzX2ZpbGVfbW92ZShmcm9tLGZyb21MZW4sdG8sdG9MZW4pe3JldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLm1vdmVGaWxlKE1vZHVsZSxmcm9tLGZyb21MZW4sdG8sdG9MZW4pfWZ1bmN0aW9uIF9kdWNrZGJfd2ViX2ZzX2ZpbGVfb3BlbihmaWxlSWQsZmxhZ3Mpe3JldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLm9wZW5GaWxlKE1vZHVsZSxmaWxlSWQsZmxhZ3MpfWZ1bmN0aW9uIF9kdWNrZGJfd2ViX2ZzX2ZpbGVfcmVhZChmaWxlSWQsYnVmLHNpemUsbG9jYXRpb24pe3JldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLnJlYWRGaWxlKE1vZHVsZSxmaWxlSWQsYnVmLHNpemUsbG9jYXRpb24pfWZ1bmN0aW9uIF9kdWNrZGJfd2ViX2ZzX2ZpbGVfdHJ1bmNhdGUoZmlsZUlkLG5ld1NpemUpe3JldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLnRydW5jYXRlRmlsZShNb2R1bGUsZmlsZUlkLG5ld1NpemUpfWZ1bmN0aW9uIF9kdWNrZGJfd2ViX2ZzX2ZpbGVfd3JpdGUoZmlsZUlkLGJ1ZixzaXplLGxvY2F0aW9uKXtyZXR1cm4gZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRS53cml0ZUZpbGUoTW9kdWxlLGZpbGVJZCxidWYsc2l6ZSxsb2NhdGlvbil9ZnVuY3Rpb24gX2R1Y2tkYl93ZWJfZnNfZ2V0X2RlZmF1bHRfZGF0YV9wcm90b2NvbChNb2R1bGUpe3JldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLmdldERlZmF1bHREYXRhUHJvdG9jb2woTW9kdWxlKX1mdW5jdGlvbiBfZHVja2RiX3dlYl9mc19nbG9iKHBhdGgscGF0aExlbil7cmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUuZ2xvYihNb2R1bGUscGF0aCxwYXRoTGVuKX1mdW5jdGlvbiBfZHVja2RiX3dlYl90ZXN0X3BsYXRmb3JtX2ZlYXR1cmUoZmVhdHVyZSl7cmV0dXJuIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUudGVzdFBsYXRmb3JtRmVhdHVyZShNb2R1bGUsZmVhdHVyZSl9ZnVuY3Rpb24gX2R1Y2tkYl93ZWJfdWRmX3NjYWxhcl9jYWxsKGZ1bmNJZCxkZXNjUHRyLGRlc2NTaXplLHB0cnNQdHIscHRyc1NpemUscmVzcG9uc2Upe3JldHVybiBnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLmNhbGxTY2FsYXJVREYoTW9kdWxlLGZ1bmNJZCxkZXNjUHRyLGRlc2NTaXplLHB0cnNQdHIscHRyc1NpemUscmVzcG9uc2UpfWZ1bmN0aW9uIF9lbXNjcmlwdGVuX2RhdGVfbm93KCl7cmV0dXJuIERhdGUubm93KCl9ZnVuY3Rpb24gZ2V0SGVhcE1heCgpe3JldHVybiA0Mjk0OTAxNzYwfWZ1bmN0aW9uIF9lbXNjcmlwdGVuX2dldF9oZWFwX21heCgpe3JldHVybiBnZXRIZWFwTWF4KCl9dmFyIF9lbXNjcmlwdGVuX2dldF9ub3c7aWYoRU5WSVJPTk1FTlRfSVNfTk9ERSl7Z2xvYmFsLnBlcmZvcm1hbmNlPXJlcXVpcmUoXCJwZXJmX2hvb2tzXCIpLnBlcmZvcm1hbmNlfV9lbXNjcmlwdGVuX2dldF9ub3c9KCk9PnBlcmZvcm1hbmNlLm5vdygpO2Z1bmN0aW9uIF9lbXNjcmlwdGVuX21lbWNweV9iaWcoZGVzdCxzcmMsbnVtKXtIRUFQVTguY29weVdpdGhpbihkZXN0Pj4+MCxzcmM+Pj4wLHNyYytudW0+Pj4wKX1mdW5jdGlvbiBlbXNjcmlwdGVuX3JlYWxsb2NfYnVmZmVyKHNpemUpe3ZhciBiPXdhc21NZW1vcnkuYnVmZmVyO3ZhciBwYWdlcz1zaXplLWIuYnl0ZUxlbmd0aCs2NTUzNT4+PjE2O3RyeXt3YXNtTWVtb3J5Lmdyb3cocGFnZXMpO3VwZGF0ZU1lbW9yeVZpZXdzKCk7cmV0dXJuIDF9Y2F0Y2goZSl7fX1mdW5jdGlvbiBfZW1zY3JpcHRlbl9yZXNpemVfaGVhcChyZXF1ZXN0ZWRTaXplKXt2YXIgb2xkU2l6ZT1IRUFQVTgubGVuZ3RoO3JlcXVlc3RlZFNpemU9cmVxdWVzdGVkU2l6ZT4+PjA7dmFyIG1heEhlYXBTaXplPWdldEhlYXBNYXgoKTtpZihyZXF1ZXN0ZWRTaXplPm1heEhlYXBTaXplKXtyZXR1cm4gZmFsc2V9dmFyIGFsaWduVXA9KHgsbXVsdGlwbGUpPT54KyhtdWx0aXBsZS14JW11bHRpcGxlKSVtdWx0aXBsZTtmb3IodmFyIGN1dERvd249MTtjdXREb3duPD00O2N1dERvd24qPTIpe3ZhciBvdmVyR3Jvd25IZWFwU2l6ZT1vbGRTaXplKigxKy4yL2N1dERvd24pO292ZXJHcm93bkhlYXBTaXplPU1hdGgubWluKG92ZXJHcm93bkhlYXBTaXplLHJlcXVlc3RlZFNpemUrMTAwNjYzMjk2KTt2YXIgbmV3U2l6ZT1NYXRoLm1pbihtYXhIZWFwU2l6ZSxhbGlnblVwKE1hdGgubWF4KHJlcXVlc3RlZFNpemUsb3Zlckdyb3duSGVhcFNpemUpLDY1NTM2KSk7dmFyIHJlcGxhY2VtZW50PWVtc2NyaXB0ZW5fcmVhbGxvY19idWZmZXIobmV3U2l6ZSk7aWYocmVwbGFjZW1lbnQpe3JldHVybiB0cnVlfX1yZXR1cm4gZmFsc2V9dmFyIEVOVj17fTtmdW5jdGlvbiBnZXRFeGVjdXRhYmxlTmFtZSgpe3JldHVybiB0aGlzUHJvZ3JhbXx8XCIuL3RoaXMucHJvZ3JhbVwifWZ1bmN0aW9uIGdldEVudlN0cmluZ3MoKXtpZighZ2V0RW52U3RyaW5ncy5zdHJpbmdzKXt2YXIgbGFuZz0odHlwZW9mIG5hdmlnYXRvcj09XCJvYmplY3RcIiYmbmF2aWdhdG9yLmxhbmd1YWdlcyYmbmF2aWdhdG9yLmxhbmd1YWdlc1swXXx8XCJDXCIpLnJlcGxhY2UoXCItXCIsXCJfXCIpK1wiLlVURi04XCI7dmFyIGVudj17XCJVU0VSXCI6XCJ3ZWJfdXNlclwiLFwiTE9HTkFNRVwiOlwid2ViX3VzZXJcIixcIlBBVEhcIjpcIi9cIixcIlBXRFwiOlwiL1wiLFwiSE9NRVwiOlwiL2hvbWUvd2ViX3VzZXJcIixcIkxBTkdcIjpsYW5nLFwiX1wiOmdldEV4ZWN1dGFibGVOYW1lKCl9O2Zvcih2YXIgeCBpbiBFTlYpe2lmKEVOVlt4XT09PXVuZGVmaW5lZClkZWxldGUgZW52W3hdO2Vsc2UgZW52W3hdPUVOVlt4XX12YXIgc3RyaW5ncz1bXTtmb3IodmFyIHggaW4gZW52KXtzdHJpbmdzLnB1c2goYCR7eH09JHtlbnZbeF19YCl9Z2V0RW52U3RyaW5ncy5zdHJpbmdzPXN0cmluZ3N9cmV0dXJuIGdldEVudlN0cmluZ3Muc3RyaW5nc31mdW5jdGlvbiBzdHJpbmdUb0FzY2lpKHN0cixidWZmZXIpe2Zvcih2YXIgaT0wO2k8c3RyLmxlbmd0aDsrK2kpe0hFQVA4W2J1ZmZlcisrPj4+MF09c3RyLmNoYXJDb2RlQXQoaSl9SEVBUDhbYnVmZmVyPj4+MF09MH1mdW5jdGlvbiBfZW52aXJvbl9nZXQoX19lbnZpcm9uLGVudmlyb25fYnVmKXt2YXIgYnVmU2l6ZT0wO2dldEVudlN0cmluZ3MoKS5mb3JFYWNoKGZ1bmN0aW9uKHN0cmluZyxpKXt2YXIgcHRyPWVudmlyb25fYnVmK2J1ZlNpemU7SEVBUFUzMltfX2Vudmlyb24raSo0Pj4+Ml09cHRyO3N0cmluZ1RvQXNjaWkoc3RyaW5nLHB0cik7YnVmU2l6ZSs9c3RyaW5nLmxlbmd0aCsxfSk7cmV0dXJuIDB9ZnVuY3Rpb24gX2Vudmlyb25fc2l6ZXNfZ2V0KHBlbnZpcm9uX2NvdW50LHBlbnZpcm9uX2J1Zl9zaXplKXt2YXIgc3RyaW5ncz1nZXRFbnZTdHJpbmdzKCk7SEVBUFUzMltwZW52aXJvbl9jb3VudD4+PjJdPXN0cmluZ3MubGVuZ3RoO3ZhciBidWZTaXplPTA7c3RyaW5ncy5mb3JFYWNoKGZ1bmN0aW9uKHN0cmluZyl7YnVmU2l6ZSs9c3RyaW5nLmxlbmd0aCsxfSk7SEVBUFUzMltwZW52aXJvbl9idWZfc2l6ZT4+PjJdPWJ1ZlNpemU7cmV0dXJuIDB9ZnVuY3Rpb24gX2ZkX2Nsb3NlKGZkKXtyZXR1cm4gNTJ9ZnVuY3Rpb24gX2ZkX2Zkc3RhdF9nZXQoZmQscGJ1Zil7dmFyIHJpZ2h0c0Jhc2U9MDt2YXIgcmlnaHRzSW5oZXJpdGluZz0wO3ZhciBmbGFncz0wO3t2YXIgdHlwZT0yO2lmKGZkPT0wKXtyaWdodHNCYXNlPTJ9ZWxzZSBpZihmZD09MXx8ZmQ9PTIpe3JpZ2h0c0Jhc2U9NjR9ZmxhZ3M9MX1IRUFQOFtwYnVmPj4+MF09dHlwZTtIRUFQMTZbcGJ1ZisyPj4+MV09ZmxhZ3M7dGVtcEk2ND1bcmlnaHRzQmFzZT4+PjAsKHRlbXBEb3VibGU9cmlnaHRzQmFzZSwrTWF0aC5hYnModGVtcERvdWJsZSk+PTE/dGVtcERvdWJsZT4wPytNYXRoLmZsb29yKHRlbXBEb3VibGUvNDI5NDk2NzI5Nik+Pj4wOn5+K01hdGguY2VpbCgodGVtcERvdWJsZS0rKH5+dGVtcERvdWJsZT4+PjApKS80Mjk0OTY3Mjk2KT4+PjA6MCldLEhFQVAzMltwYnVmKzg+Pj4yXT10ZW1wSTY0WzBdLEhFQVAzMltwYnVmKzEyPj4+Ml09dGVtcEk2NFsxXTt0ZW1wSTY0PVtyaWdodHNJbmhlcml0aW5nPj4+MCwodGVtcERvdWJsZT1yaWdodHNJbmhlcml0aW5nLCtNYXRoLmFicyh0ZW1wRG91YmxlKT49MT90ZW1wRG91YmxlPjA/K01hdGguZmxvb3IodGVtcERvdWJsZS80Mjk0OTY3Mjk2KT4+PjA6fn4rTWF0aC5jZWlsKCh0ZW1wRG91YmxlLSsofn50ZW1wRG91YmxlPj4+MCkpLzQyOTQ5NjcyOTYpPj4+MDowKV0sSEVBUDMyW3BidWYrMTY+Pj4yXT10ZW1wSTY0WzBdLEhFQVAzMltwYnVmKzIwPj4+Ml09dGVtcEk2NFsxXTtyZXR1cm4gMH1mdW5jdGlvbiBfZmRfcHJlYWQoZmQsaW92LGlvdmNudCxvZmZzZXRfbG93LG9mZnNldF9oaWdoLHBudW0pe3JldHVybiA1Mn1mdW5jdGlvbiBfZmRfcHdyaXRlKGZkLGlvdixpb3ZjbnQsb2Zmc2V0X2xvdyxvZmZzZXRfaGlnaCxwbnVtKXtyZXR1cm4gNTJ9ZnVuY3Rpb24gX2ZkX3JlYWQoZmQsaW92LGlvdmNudCxwbnVtKXtyZXR1cm4gNTJ9ZnVuY3Rpb24gX2ZkX3NlZWsoZmQsb2Zmc2V0X2xvdyxvZmZzZXRfaGlnaCx3aGVuY2UsbmV3T2Zmc2V0KXtyZXR1cm4gNzB9ZnVuY3Rpb24gX2ZkX3N5bmMoZmQpe3JldHVybiA1Mn12YXIgcHJpbnRDaGFyQnVmZmVycz1bbnVsbCxbXSxbXV07ZnVuY3Rpb24gcHJpbnRDaGFyKHN0cmVhbSxjdXJyKXt2YXIgYnVmZmVyPXByaW50Q2hhckJ1ZmZlcnNbc3RyZWFtXTtpZihjdXJyPT09MHx8Y3Vycj09PTEwKXsoc3RyZWFtPT09MT9vdXQ6ZXJyKShVVEY4QXJyYXlUb1N0cmluZyhidWZmZXIsMCkpO2J1ZmZlci5sZW5ndGg9MH1lbHNle2J1ZmZlci5wdXNoKGN1cnIpfX1mdW5jdGlvbiBfZmRfd3JpdGUoZmQsaW92LGlvdmNudCxwbnVtKXt2YXIgbnVtPTA7Zm9yKHZhciBpPTA7aTxpb3ZjbnQ7aSsrKXt2YXIgcHRyPUhFQVBVMzJbaW92Pj4+Ml07dmFyIGxlbj1IRUFQVTMyW2lvdis0Pj4+Ml07aW92Kz04O2Zvcih2YXIgaj0wO2o8bGVuO2orKyl7cHJpbnRDaGFyKGZkLEhFQVBVOFtwdHIraj4+PjBdKX1udW0rPWxlbn1IRUFQVTMyW3BudW0+Pj4yXT1udW07cmV0dXJuIDB9ZnVuY3Rpb24gX2dldGFkZHJpbmZvKG5vZGUsc2VydmljZSxoaW50LG91dCl7dmFyIGFkZHI9MDt2YXIgcG9ydD0wO3ZhciBmbGFncz0wO3ZhciBmYW1pbHk9MDt2YXIgdHlwZT0wO3ZhciBwcm90bz0wO3ZhciBhaTtmdW5jdGlvbiBhbGxvY2FkZHJpbmZvKGZhbWlseSx0eXBlLHByb3RvLGNhbm9uLGFkZHIscG9ydCl7dmFyIHNhLHNhbGVuLGFpO3ZhciBlcnJubztzYWxlbj1mYW1pbHk9PT0xMD8yODoxNjthZGRyPWZhbWlseT09PTEwP2luZXROdG9wNihhZGRyKTppbmV0TnRvcDQoYWRkcik7c2E9X21hbGxvYyhzYWxlbik7ZXJybm89d3JpdGVTb2NrYWRkcihzYSxmYW1pbHksYWRkcixwb3J0KTthc3NlcnQoIWVycm5vKTthaT1fbWFsbG9jKDMyKTtIRUFQMzJbYWkrND4+PjJdPWZhbWlseTtIRUFQMzJbYWkrOD4+PjJdPXR5cGU7SEVBUDMyW2FpKzEyPj4+Ml09cHJvdG87SEVBUFUzMlthaSsyND4+PjJdPWNhbm9uO0hFQVBVMzJbYWkrMjA+Pj4yXT1zYTtpZihmYW1pbHk9PT0xMCl7SEVBUDMyW2FpKzE2Pj4+Ml09Mjh9ZWxzZXtIRUFQMzJbYWkrMTY+Pj4yXT0xNn1IRUFQMzJbYWkrMjg+Pj4yXT0wO3JldHVybiBhaX1pZihoaW50KXtmbGFncz1IRUFQMzJbaGludD4+PjJdO2ZhbWlseT1IRUFQMzJbaGludCs0Pj4+Ml07dHlwZT1IRUFQMzJbaGludCs4Pj4+Ml07cHJvdG89SEVBUDMyW2hpbnQrMTI+Pj4yXX1pZih0eXBlJiYhcHJvdG8pe3Byb3RvPXR5cGU9PT0yPzE3OjZ9aWYoIXR5cGUmJnByb3RvKXt0eXBlPXByb3RvPT09MTc/MjoxfWlmKHByb3RvPT09MCl7cHJvdG89Nn1pZih0eXBlPT09MCl7dHlwZT0xfWlmKCFub2RlJiYhc2VydmljZSl7cmV0dXJuLTJ9aWYoZmxhZ3MmfigxfDJ8NHwxMDI0fDh8MTZ8MzIpKXtyZXR1cm4tMX1pZihoaW50IT09MCYmSEVBUDMyW2hpbnQ+Pj4yXSYyJiYhbm9kZSl7cmV0dXJuLTF9aWYoZmxhZ3MmMzIpe3JldHVybi0yfWlmKHR5cGUhPT0wJiZ0eXBlIT09MSYmdHlwZSE9PTIpe3JldHVybi03fWlmKGZhbWlseSE9PTAmJmZhbWlseSE9PTImJmZhbWlseSE9PTEwKXtyZXR1cm4tNn1pZihzZXJ2aWNlKXtzZXJ2aWNlPVVURjhUb1N0cmluZyhzZXJ2aWNlKTtwb3J0PXBhcnNlSW50KHNlcnZpY2UsMTApO2lmKGlzTmFOKHBvcnQpKXtpZihmbGFncyYxMDI0KXtyZXR1cm4tMn1yZXR1cm4tOH19aWYoIW5vZGUpe2lmKGZhbWlseT09PTApe2ZhbWlseT0yfWlmKChmbGFncyYxKT09PTApe2lmKGZhbWlseT09PTIpe2FkZHI9X2h0b25sKDIxMzA3MDY0MzMpfWVsc2V7YWRkcj1bMCwwLDAsMV19fWFpPWFsbG9jYWRkcmluZm8oZmFtaWx5LHR5cGUscHJvdG8sbnVsbCxhZGRyLHBvcnQpO0hFQVBVMzJbb3V0Pj4+Ml09YWk7cmV0dXJuIDB9bm9kZT1VVEY4VG9TdHJpbmcobm9kZSk7YWRkcj1pbmV0UHRvbjQobm9kZSk7aWYoYWRkciE9PW51bGwpe2lmKGZhbWlseT09PTB8fGZhbWlseT09PTIpe2ZhbWlseT0yfWVsc2UgaWYoZmFtaWx5PT09MTAmJmZsYWdzJjgpe2FkZHI9WzAsMCxfaHRvbmwoNjU1MzUpLGFkZHJdO2ZhbWlseT0xMH1lbHNle3JldHVybi0yfX1lbHNle2FkZHI9aW5ldFB0b242KG5vZGUpO2lmKGFkZHIhPT1udWxsKXtpZihmYW1pbHk9PT0wfHxmYW1pbHk9PT0xMCl7ZmFtaWx5PTEwfWVsc2V7cmV0dXJuLTJ9fX1pZihhZGRyIT1udWxsKXthaT1hbGxvY2FkZHJpbmZvKGZhbWlseSx0eXBlLHByb3RvLG5vZGUsYWRkcixwb3J0KTtIRUFQVTMyW291dD4+PjJdPWFpO3JldHVybiAwfWlmKGZsYWdzJjQpe3JldHVybi0yfW5vZGU9RE5TLmxvb2t1cF9uYW1lKG5vZGUpO2FkZHI9aW5ldFB0b240KG5vZGUpO2lmKGZhbWlseT09PTApe2ZhbWlseT0yfWVsc2UgaWYoZmFtaWx5PT09MTApe2FkZHI9WzAsMCxfaHRvbmwoNjU1MzUpLGFkZHJdfWFpPWFsbG9jYWRkcmluZm8oZmFtaWx5LHR5cGUscHJvdG8sbnVsbCxhZGRyLHBvcnQpO0hFQVBVMzJbb3V0Pj4+Ml09YWk7cmV0dXJuIDB9ZnVuY3Rpb24gaW5pdFJhbmRvbUZpbGwoKXtpZih0eXBlb2YgY3J5cHRvPT1cIm9iamVjdFwiJiZ0eXBlb2YgY3J5cHRvW1wiZ2V0UmFuZG9tVmFsdWVzXCJdPT1cImZ1bmN0aW9uXCIpe3JldHVybiB2aWV3PT5jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHZpZXcpfWVsc2UgaWYoRU5WSVJPTk1FTlRfSVNfTk9ERSl7dHJ5e3ZhciBjcnlwdG9fbW9kdWxlPXJlcXVpcmUoXCJjcnlwdG9cIik7dmFyIHJhbmRvbUZpbGxTeW5jPWNyeXB0b19tb2R1bGVbXCJyYW5kb21GaWxsU3luY1wiXTtpZihyYW5kb21GaWxsU3luYyl7cmV0dXJuIHZpZXc9PmNyeXB0b19tb2R1bGVbXCJyYW5kb21GaWxsU3luY1wiXSh2aWV3KX12YXIgcmFuZG9tQnl0ZXM9Y3J5cHRvX21vZHVsZVtcInJhbmRvbUJ5dGVzXCJdO3JldHVybiB2aWV3PT4odmlldy5zZXQocmFuZG9tQnl0ZXModmlldy5ieXRlTGVuZ3RoKSksdmlldyl9Y2F0Y2goZSl7fX1hYm9ydChcImluaXRSYW5kb21EZXZpY2VcIil9ZnVuY3Rpb24gcmFuZG9tRmlsbCh2aWV3KXtyZXR1cm4ocmFuZG9tRmlsbD1pbml0UmFuZG9tRmlsbCgpKSh2aWV3KX1mdW5jdGlvbiBfZ2V0ZW50cm9weShidWZmZXIsc2l6ZSl7cmFuZG9tRmlsbChIRUFQVTguc3ViYXJyYXkoYnVmZmVyPj4+MCxidWZmZXIrc2l6ZT4+PjApKTtyZXR1cm4gMH1mdW5jdGlvbiBfZ2V0bmFtZWluZm8oc2Esc2FsZW4sbm9kZSxub2RlbGVuLHNlcnYsc2VydmxlbixmbGFncyl7dmFyIGluZm89cmVhZFNvY2thZGRyKHNhLHNhbGVuKTtpZihpbmZvLmVycm5vKXtyZXR1cm4tNn12YXIgcG9ydD1pbmZvLnBvcnQ7dmFyIGFkZHI9aW5mby5hZGRyO3ZhciBvdmVyZmxvd2VkPWZhbHNlO2lmKG5vZGUmJm5vZGVsZW4pe3ZhciBsb29rdXA7aWYoZmxhZ3MmMXx8IShsb29rdXA9RE5TLmxvb2t1cF9hZGRyKGFkZHIpKSl7aWYoZmxhZ3MmOCl7cmV0dXJuLTJ9fWVsc2V7YWRkcj1sb29rdXB9dmFyIG51bUJ5dGVzV3JpdHRlbkV4Y2xOdWxsPXN0cmluZ1RvVVRGOChhZGRyLG5vZGUsbm9kZWxlbik7aWYobnVtQnl0ZXNXcml0dGVuRXhjbE51bGwrMT49bm9kZWxlbil7b3ZlcmZsb3dlZD10cnVlfX1pZihzZXJ2JiZzZXJ2bGVuKXtwb3J0PVwiXCIrcG9ydDt2YXIgbnVtQnl0ZXNXcml0dGVuRXhjbE51bGw9c3RyaW5nVG9VVEY4KHBvcnQsc2VydixzZXJ2bGVuKTtpZihudW1CeXRlc1dyaXR0ZW5FeGNsTnVsbCsxPj1zZXJ2bGVuKXtvdmVyZmxvd2VkPXRydWV9fWlmKG92ZXJmbG93ZWQpe3JldHVybi0xMn1yZXR1cm4gMH1mdW5jdGlvbiBhcnJheVN1bShhcnJheSxpbmRleCl7dmFyIHN1bT0wO2Zvcih2YXIgaT0wO2k8PWluZGV4O3N1bSs9YXJyYXlbaSsrXSl7fXJldHVybiBzdW19dmFyIE1PTlRIX0RBWVNfTEVBUD1bMzEsMjksMzEsMzAsMzEsMzAsMzEsMzEsMzAsMzEsMzAsMzFdO3ZhciBNT05USF9EQVlTX1JFR1VMQVI9WzMxLDI4LDMxLDMwLDMxLDMwLDMxLDMxLDMwLDMxLDMwLDMxXTtmdW5jdGlvbiBhZGREYXlzKGRhdGUsZGF5cyl7dmFyIG5ld0RhdGU9bmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO3doaWxlKGRheXM+MCl7dmFyIGxlYXA9aXNMZWFwWWVhcihuZXdEYXRlLmdldEZ1bGxZZWFyKCkpO3ZhciBjdXJyZW50TW9udGg9bmV3RGF0ZS5nZXRNb250aCgpO3ZhciBkYXlzSW5DdXJyZW50TW9udGg9KGxlYXA/TU9OVEhfREFZU19MRUFQOk1PTlRIX0RBWVNfUkVHVUxBUilbY3VycmVudE1vbnRoXTtpZihkYXlzPmRheXNJbkN1cnJlbnRNb250aC1uZXdEYXRlLmdldERhdGUoKSl7ZGF5cy09ZGF5c0luQ3VycmVudE1vbnRoLW5ld0RhdGUuZ2V0RGF0ZSgpKzE7bmV3RGF0ZS5zZXREYXRlKDEpO2lmKGN1cnJlbnRNb250aDwxMSl7bmV3RGF0ZS5zZXRNb250aChjdXJyZW50TW9udGgrMSl9ZWxzZXtuZXdEYXRlLnNldE1vbnRoKDApO25ld0RhdGUuc2V0RnVsbFllYXIobmV3RGF0ZS5nZXRGdWxsWWVhcigpKzEpfX1lbHNle25ld0RhdGUuc2V0RGF0ZShuZXdEYXRlLmdldERhdGUoKStkYXlzKTtyZXR1cm4gbmV3RGF0ZX19cmV0dXJuIG5ld0RhdGV9ZnVuY3Rpb24gaW50QXJyYXlGcm9tU3RyaW5nKHN0cmluZ3ksZG9udEFkZE51bGwsbGVuZ3RoKXt2YXIgbGVuPWxlbmd0aD4wP2xlbmd0aDpsZW5ndGhCeXRlc1VURjgoc3RyaW5neSkrMTt2YXIgdThhcnJheT1uZXcgQXJyYXkobGVuKTt2YXIgbnVtQnl0ZXNXcml0dGVuPXN0cmluZ1RvVVRGOEFycmF5KHN0cmluZ3ksdThhcnJheSwwLHU4YXJyYXkubGVuZ3RoKTtpZihkb250QWRkTnVsbCl1OGFycmF5Lmxlbmd0aD1udW1CeXRlc1dyaXR0ZW47cmV0dXJuIHU4YXJyYXl9ZnVuY3Rpb24gd3JpdGVBcnJheVRvTWVtb3J5KGFycmF5LGJ1ZmZlcil7SEVBUDguc2V0KGFycmF5LGJ1ZmZlcj4+PjApfWZ1bmN0aW9uIF9zdHJmdGltZShzLG1heHNpemUsZm9ybWF0LHRtKXt2YXIgdG1fem9uZT1IRUFQMzJbdG0rNDA+Pj4yXTt2YXIgZGF0ZT17dG1fc2VjOkhFQVAzMlt0bT4+PjJdLHRtX21pbjpIRUFQMzJbdG0rND4+PjJdLHRtX2hvdXI6SEVBUDMyW3RtKzg+Pj4yXSx0bV9tZGF5OkhFQVAzMlt0bSsxMj4+PjJdLHRtX21vbjpIRUFQMzJbdG0rMTY+Pj4yXSx0bV95ZWFyOkhFQVAzMlt0bSsyMD4+PjJdLHRtX3dkYXk6SEVBUDMyW3RtKzI0Pj4+Ml0sdG1feWRheTpIRUFQMzJbdG0rMjg+Pj4yXSx0bV9pc2RzdDpIRUFQMzJbdG0rMzI+Pj4yXSx0bV9nbXRvZmY6SEVBUDMyW3RtKzM2Pj4+Ml0sdG1fem9uZTp0bV96b25lP1VURjhUb1N0cmluZyh0bV96b25lKTpcIlwifTt2YXIgcGF0dGVybj1VVEY4VG9TdHJpbmcoZm9ybWF0KTt2YXIgRVhQQU5TSU9OX1JVTEVTXzE9e1wiJWNcIjpcIiVhICViICVkICVIOiVNOiVTICVZXCIsXCIlRFwiOlwiJW0vJWQvJXlcIixcIiVGXCI6XCIlWS0lbS0lZFwiLFwiJWhcIjpcIiViXCIsXCIlclwiOlwiJUk6JU06JVMgJXBcIixcIiVSXCI6XCIlSDolTVwiLFwiJVRcIjpcIiVIOiVNOiVTXCIsXCIleFwiOlwiJW0vJWQvJXlcIixcIiVYXCI6XCIlSDolTTolU1wiLFwiJUVjXCI6XCIlY1wiLFwiJUVDXCI6XCIlQ1wiLFwiJUV4XCI6XCIlbS8lZC8leVwiLFwiJUVYXCI6XCIlSDolTTolU1wiLFwiJUV5XCI6XCIleVwiLFwiJUVZXCI6XCIlWVwiLFwiJU9kXCI6XCIlZFwiLFwiJU9lXCI6XCIlZVwiLFwiJU9IXCI6XCIlSFwiLFwiJU9JXCI6XCIlSVwiLFwiJU9tXCI6XCIlbVwiLFwiJU9NXCI6XCIlTVwiLFwiJU9TXCI6XCIlU1wiLFwiJU91XCI6XCIldVwiLFwiJU9VXCI6XCIlVVwiLFwiJU9WXCI6XCIlVlwiLFwiJU93XCI6XCIld1wiLFwiJU9XXCI6XCIlV1wiLFwiJU95XCI6XCIleVwifTtmb3IodmFyIHJ1bGUgaW4gRVhQQU5TSU9OX1JVTEVTXzEpe3BhdHRlcm49cGF0dGVybi5yZXBsYWNlKG5ldyBSZWdFeHAocnVsZSxcImdcIiksRVhQQU5TSU9OX1JVTEVTXzFbcnVsZV0pfXZhciBXRUVLREFZUz1bXCJTdW5kYXlcIixcIk1vbmRheVwiLFwiVHVlc2RheVwiLFwiV2VkbmVzZGF5XCIsXCJUaHVyc2RheVwiLFwiRnJpZGF5XCIsXCJTYXR1cmRheVwiXTt2YXIgTU9OVEhTPVtcIkphbnVhcnlcIixcIkZlYnJ1YXJ5XCIsXCJNYXJjaFwiLFwiQXByaWxcIixcIk1heVwiLFwiSnVuZVwiLFwiSnVseVwiLFwiQXVndXN0XCIsXCJTZXB0ZW1iZXJcIixcIk9jdG9iZXJcIixcIk5vdmVtYmVyXCIsXCJEZWNlbWJlclwiXTtmdW5jdGlvbiBsZWFkaW5nU29tZXRoaW5nKHZhbHVlLGRpZ2l0cyxjaGFyYWN0ZXIpe3ZhciBzdHI9dHlwZW9mIHZhbHVlPT1cIm51bWJlclwiP3ZhbHVlLnRvU3RyaW5nKCk6dmFsdWV8fFwiXCI7d2hpbGUoc3RyLmxlbmd0aDxkaWdpdHMpe3N0cj1jaGFyYWN0ZXJbMF0rc3RyfXJldHVybiBzdHJ9ZnVuY3Rpb24gbGVhZGluZ051bGxzKHZhbHVlLGRpZ2l0cyl7cmV0dXJuIGxlYWRpbmdTb21ldGhpbmcodmFsdWUsZGlnaXRzLFwiMFwiKX1mdW5jdGlvbiBjb21wYXJlQnlEYXkoZGF0ZTEsZGF0ZTIpe2Z1bmN0aW9uIHNnbih2YWx1ZSl7cmV0dXJuIHZhbHVlPDA/LTE6dmFsdWU+MD8xOjB9dmFyIGNvbXBhcmU7aWYoKGNvbXBhcmU9c2duKGRhdGUxLmdldEZ1bGxZZWFyKCktZGF0ZTIuZ2V0RnVsbFllYXIoKSkpPT09MCl7aWYoKGNvbXBhcmU9c2duKGRhdGUxLmdldE1vbnRoKCktZGF0ZTIuZ2V0TW9udGgoKSkpPT09MCl7Y29tcGFyZT1zZ24oZGF0ZTEuZ2V0RGF0ZSgpLWRhdGUyLmdldERhdGUoKSl9fXJldHVybiBjb21wYXJlfWZ1bmN0aW9uIGdldEZpcnN0V2Vla1N0YXJ0RGF0ZShqYW5Gb3VydGgpe3N3aXRjaChqYW5Gb3VydGguZ2V0RGF5KCkpe2Nhc2UgMDpyZXR1cm4gbmV3IERhdGUoamFuRm91cnRoLmdldEZ1bGxZZWFyKCktMSwxMSwyOSk7Y2FzZSAxOnJldHVybiBqYW5Gb3VydGg7Y2FzZSAyOnJldHVybiBuZXcgRGF0ZShqYW5Gb3VydGguZ2V0RnVsbFllYXIoKSwwLDMpO2Nhc2UgMzpyZXR1cm4gbmV3IERhdGUoamFuRm91cnRoLmdldEZ1bGxZZWFyKCksMCwyKTtjYXNlIDQ6cmV0dXJuIG5ldyBEYXRlKGphbkZvdXJ0aC5nZXRGdWxsWWVhcigpLDAsMSk7Y2FzZSA1OnJldHVybiBuZXcgRGF0ZShqYW5Gb3VydGguZ2V0RnVsbFllYXIoKS0xLDExLDMxKTtjYXNlIDY6cmV0dXJuIG5ldyBEYXRlKGphbkZvdXJ0aC5nZXRGdWxsWWVhcigpLTEsMTEsMzApfX1mdW5jdGlvbiBnZXRXZWVrQmFzZWRZZWFyKGRhdGUpe3ZhciB0aGlzRGF0ZT1hZGREYXlzKG5ldyBEYXRlKGRhdGUudG1feWVhcisxOTAwLDAsMSksZGF0ZS50bV95ZGF5KTt2YXIgamFuRm91cnRoVGhpc1llYXI9bmV3IERhdGUodGhpc0RhdGUuZ2V0RnVsbFllYXIoKSwwLDQpO3ZhciBqYW5Gb3VydGhOZXh0WWVhcj1uZXcgRGF0ZSh0aGlzRGF0ZS5nZXRGdWxsWWVhcigpKzEsMCw0KTt2YXIgZmlyc3RXZWVrU3RhcnRUaGlzWWVhcj1nZXRGaXJzdFdlZWtTdGFydERhdGUoamFuRm91cnRoVGhpc1llYXIpO3ZhciBmaXJzdFdlZWtTdGFydE5leHRZZWFyPWdldEZpcnN0V2Vla1N0YXJ0RGF0ZShqYW5Gb3VydGhOZXh0WWVhcik7aWYoY29tcGFyZUJ5RGF5KGZpcnN0V2Vla1N0YXJ0VGhpc1llYXIsdGhpc0RhdGUpPD0wKXtpZihjb21wYXJlQnlEYXkoZmlyc3RXZWVrU3RhcnROZXh0WWVhcix0aGlzRGF0ZSk8PTApe3JldHVybiB0aGlzRGF0ZS5nZXRGdWxsWWVhcigpKzF9cmV0dXJuIHRoaXNEYXRlLmdldEZ1bGxZZWFyKCl9cmV0dXJuIHRoaXNEYXRlLmdldEZ1bGxZZWFyKCktMX12YXIgRVhQQU5TSU9OX1JVTEVTXzI9e1wiJWFcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gV0VFS0RBWVNbZGF0ZS50bV93ZGF5XS5zdWJzdHJpbmcoMCwzKX0sXCIlQVwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBXRUVLREFZU1tkYXRlLnRtX3dkYXldfSxcIiViXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIE1PTlRIU1tkYXRlLnRtX21vbl0uc3Vic3RyaW5nKDAsMyl9LFwiJUJcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gTU9OVEhTW2RhdGUudG1fbW9uXX0sXCIlQ1wiOmZ1bmN0aW9uKGRhdGUpe3ZhciB5ZWFyPWRhdGUudG1feWVhcisxOTAwO3JldHVybiBsZWFkaW5nTnVsbHMoeWVhci8xMDB8MCwyKX0sXCIlZFwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9tZGF5LDIpfSxcIiVlXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIGxlYWRpbmdTb21ldGhpbmcoZGF0ZS50bV9tZGF5LDIsXCIgXCIpfSxcIiVnXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIGdldFdlZWtCYXNlZFllYXIoZGF0ZSkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMil9LFwiJUdcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gZ2V0V2Vla0Jhc2VkWWVhcihkYXRlKX0sXCIlSFwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9ob3VyLDIpfSxcIiVJXCI6ZnVuY3Rpb24oZGF0ZSl7dmFyIHR3ZWx2ZUhvdXI9ZGF0ZS50bV9ob3VyO2lmKHR3ZWx2ZUhvdXI9PTApdHdlbHZlSG91cj0xMjtlbHNlIGlmKHR3ZWx2ZUhvdXI+MTIpdHdlbHZlSG91ci09MTI7cmV0dXJuIGxlYWRpbmdOdWxscyh0d2VsdmVIb3VyLDIpfSxcIiVqXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIGxlYWRpbmdOdWxscyhkYXRlLnRtX21kYXkrYXJyYXlTdW0oaXNMZWFwWWVhcihkYXRlLnRtX3llYXIrMTkwMCk/TU9OVEhfREFZU19MRUFQOk1PTlRIX0RBWVNfUkVHVUxBUixkYXRlLnRtX21vbi0xKSwzKX0sXCIlbVwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9tb24rMSwyKX0sXCIlTVwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9taW4sMil9LFwiJW5cIjpmdW5jdGlvbigpe3JldHVyblwiXFxuXCJ9LFwiJXBcIjpmdW5jdGlvbihkYXRlKXtpZihkYXRlLnRtX2hvdXI+PTAmJmRhdGUudG1faG91cjwxMil7cmV0dXJuXCJBTVwifXJldHVyblwiUE1cIn0sXCIlU1wiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBsZWFkaW5nTnVsbHMoZGF0ZS50bV9zZWMsMil9LFwiJXRcIjpmdW5jdGlvbigpe3JldHVyblwiXFx0XCJ9LFwiJXVcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4gZGF0ZS50bV93ZGF5fHw3fSxcIiVVXCI6ZnVuY3Rpb24oZGF0ZSl7dmFyIGRheXM9ZGF0ZS50bV95ZGF5KzctZGF0ZS50bV93ZGF5O3JldHVybiBsZWFkaW5nTnVsbHMoTWF0aC5mbG9vcihkYXlzLzcpLDIpfSxcIiVWXCI6ZnVuY3Rpb24oZGF0ZSl7dmFyIHZhbD1NYXRoLmZsb29yKChkYXRlLnRtX3lkYXkrNy0oZGF0ZS50bV93ZGF5KzYpJTcpLzcpO2lmKChkYXRlLnRtX3dkYXkrMzcxLWRhdGUudG1feWRheS0yKSU3PD0yKXt2YWwrK31pZighdmFsKXt2YWw9NTI7dmFyIGRlYzMxPShkYXRlLnRtX3dkYXkrNy1kYXRlLnRtX3lkYXktMSklNztpZihkZWMzMT09NHx8ZGVjMzE9PTUmJmlzTGVhcFllYXIoZGF0ZS50bV95ZWFyJTQwMC0xKSl7dmFsKyt9fWVsc2UgaWYodmFsPT01Myl7dmFyIGphbjE9KGRhdGUudG1fd2RheSszNzEtZGF0ZS50bV95ZGF5KSU3O2lmKGphbjEhPTQmJihqYW4xIT0zfHwhaXNMZWFwWWVhcihkYXRlLnRtX3llYXIpKSl2YWw9MX1yZXR1cm4gbGVhZGluZ051bGxzKHZhbCwyKX0sXCIld1wiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBkYXRlLnRtX3dkYXl9LFwiJVdcIjpmdW5jdGlvbihkYXRlKXt2YXIgZGF5cz1kYXRlLnRtX3lkYXkrNy0oZGF0ZS50bV93ZGF5KzYpJTc7cmV0dXJuIGxlYWRpbmdOdWxscyhNYXRoLmZsb29yKGRheXMvNyksMil9LFwiJXlcIjpmdW5jdGlvbihkYXRlKXtyZXR1cm4oZGF0ZS50bV95ZWFyKzE5MDApLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpfSxcIiVZXCI6ZnVuY3Rpb24oZGF0ZSl7cmV0dXJuIGRhdGUudG1feWVhcisxOTAwfSxcIiV6XCI6ZnVuY3Rpb24oZGF0ZSl7dmFyIG9mZj1kYXRlLnRtX2dtdG9mZjt2YXIgYWhlYWQ9b2ZmPj0wO29mZj1NYXRoLmFicyhvZmYpLzYwO29mZj1vZmYvNjAqMTAwK29mZiU2MDtyZXR1cm4oYWhlYWQ/XCIrXCI6XCItXCIpK1N0cmluZyhcIjAwMDBcIitvZmYpLnNsaWNlKC00KX0sXCIlWlwiOmZ1bmN0aW9uKGRhdGUpe3JldHVybiBkYXRlLnRtX3pvbmV9LFwiJSVcIjpmdW5jdGlvbigpe3JldHVyblwiJVwifX07cGF0dGVybj1wYXR0ZXJuLnJlcGxhY2UoLyUlL2csXCJcXDBcXDBcIik7Zm9yKHZhciBydWxlIGluIEVYUEFOU0lPTl9SVUxFU18yKXtpZihwYXR0ZXJuLmluY2x1ZGVzKHJ1bGUpKXtwYXR0ZXJuPXBhdHRlcm4ucmVwbGFjZShuZXcgUmVnRXhwKHJ1bGUsXCJnXCIpLEVYUEFOU0lPTl9SVUxFU18yW3J1bGVdKGRhdGUpKX19cGF0dGVybj1wYXR0ZXJuLnJlcGxhY2UoL1xcMFxcMC9nLFwiJVwiKTt2YXIgYnl0ZXM9aW50QXJyYXlGcm9tU3RyaW5nKHBhdHRlcm4sZmFsc2UpO2lmKGJ5dGVzLmxlbmd0aD5tYXhzaXplKXtyZXR1cm4gMH13cml0ZUFycmF5VG9NZW1vcnkoYnl0ZXMscyk7cmV0dXJuIGJ5dGVzLmxlbmd0aC0xfWZ1bmN0aW9uIF9zdHJmdGltZV9sKHMsbWF4c2l6ZSxmb3JtYXQsdG0sbG9jKXtyZXR1cm4gX3N0cmZ0aW1lKHMsbWF4c2l6ZSxmb3JtYXQsdG0pfWZ1bmN0aW9uIF91Y252X2Nsb3NlXzY0KCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogdWNudl9jbG9zZV82NFwiKTthYm9ydCgtMSl9ZnVuY3Rpb24gX3VjbnZfY29udmVydEV4XzY0KCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogdWNudl9jb252ZXJ0RXhfNjRcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF91Y252X29wZW5fNjQoKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiB1Y252X29wZW5fNjRcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF91Y252X3RvQWxnb3JpdGhtaWNfNjQoKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiB1Y252X3RvQWxnb3JpdGhtaWNfNjRcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF91Y3NkZXRfY2xvc2VfNjQoKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiB1Y3NkZXRfY2xvc2VfNjRcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF91Y3NkZXRfZGV0ZWN0XzY0KCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogdWNzZGV0X2RldGVjdF82NFwiKTthYm9ydCgtMSl9ZnVuY3Rpb24gX3Vjc2RldF9nZXRDb25maWRlbmNlXzY0KCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogdWNzZGV0X2dldENvbmZpZGVuY2VfNjRcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF91Y3NkZXRfZ2V0TmFtZV82NCgpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IHVjc2RldF9nZXROYW1lXzY0XCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfdWNzZGV0X29wZW5fNjQoKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiB1Y3NkZXRfb3Blbl82NFwiKTthYm9ydCgtMSl9ZnVuY3Rpb24gX3Vjc2RldF9zZXRUZXh0XzY0KCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogdWNzZGV0X3NldFRleHRfNjRcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF91bnpDbG9zZSgpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IHVuekNsb3NlXCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfdW56Q2xvc2VDdXJyZW50RmlsZSgpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IHVuekNsb3NlQ3VycmVudEZpbGVcIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF91bnpHZXRDdXJyZW50RmlsZUluZm8oKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiB1bnpHZXRDdXJyZW50RmlsZUluZm9cIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF91bnpHZXRDdXJyZW50RmlsZUluZm82NCgpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IHVuekdldEN1cnJlbnRGaWxlSW5mbzY0XCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfdW56R2V0R2xvYmFsSW5mbygpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IHVuekdldEdsb2JhbEluZm9cIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF91bnpHb1RvRmlyc3RGaWxlKCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogdW56R29Ub0ZpcnN0RmlsZVwiKTthYm9ydCgtMSl9ZnVuY3Rpb24gX3VuekdvVG9OZXh0RmlsZSgpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IHVuekdvVG9OZXh0RmlsZVwiKTthYm9ydCgtMSl9ZnVuY3Rpb24gX3VuekxvY2F0ZUZpbGUoKXtlcnIoXCJtaXNzaW5nIGZ1bmN0aW9uOiB1bnpMb2NhdGVGaWxlXCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfdW56T3Blbigpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IHVuek9wZW5cIik7YWJvcnQoLTEpfWZ1bmN0aW9uIF91bnpPcGVuMigpe2VycihcIm1pc3NpbmcgZnVuY3Rpb246IHVuek9wZW4yXCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfdW56T3BlbkN1cnJlbnRGaWxlKCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogdW56T3BlbkN1cnJlbnRGaWxlXCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfdW56UmVhZEN1cnJlbnRGaWxlKCl7ZXJyKFwibWlzc2luZyBmdW5jdGlvbjogdW56UmVhZEN1cnJlbnRGaWxlXCIpO2Fib3J0KC0xKX1mdW5jdGlvbiBfcHJvY19leGl0KGNvZGUpe0VYSVRTVEFUVVM9Y29kZTtpZigha2VlcFJ1bnRpbWVBbGl2ZSgpKXtpZihNb2R1bGVbXCJvbkV4aXRcIl0pTW9kdWxlW1wib25FeGl0XCJdKGNvZGUpO0FCT1JUPXRydWV9cXVpdF8oY29kZSxuZXcgRXhpdFN0YXR1cyhjb2RlKSl9ZnVuY3Rpb24gZXhpdEpTKHN0YXR1cyxpbXBsaWNpdCl7RVhJVFNUQVRVUz1zdGF0dXM7X3Byb2NfZXhpdChzdGF0dXMpfWZ1bmN0aW9uIGhhbmRsZUV4Y2VwdGlvbihlKXtpZihlIGluc3RhbmNlb2YgRXhpdFN0YXR1c3x8ZT09XCJ1bndpbmRcIil7cmV0dXJuIEVYSVRTVEFUVVN9cXVpdF8oMSxlKX1mdW5jdGlvbiBnZXRDRnVuYyhpZGVudCl7dmFyIGZ1bmM9TW9kdWxlW1wiX1wiK2lkZW50XTtyZXR1cm4gZnVuY31mdW5jdGlvbiBzdHJpbmdUb1VURjhPblN0YWNrKHN0cil7dmFyIHNpemU9bGVuZ3RoQnl0ZXNVVEY4KHN0cikrMTt2YXIgcmV0PXN0YWNrQWxsb2Moc2l6ZSk7c3RyaW5nVG9VVEY4KHN0cixyZXQsc2l6ZSk7cmV0dXJuIHJldH1mdW5jdGlvbiBjY2FsbChpZGVudCxyZXR1cm5UeXBlLGFyZ1R5cGVzLGFyZ3Msb3B0cyl7dmFyIHRvQz17XCJzdHJpbmdcIjpzdHI9Pnt2YXIgcmV0PTA7aWYoc3RyIT09bnVsbCYmc3RyIT09dW5kZWZpbmVkJiZzdHIhPT0wKXtyZXQ9c3RyaW5nVG9VVEY4T25TdGFjayhzdHIpfXJldHVybiByZXR9LFwiYXJyYXlcIjphcnI9Pnt2YXIgcmV0PXN0YWNrQWxsb2MoYXJyLmxlbmd0aCk7d3JpdGVBcnJheVRvTWVtb3J5KGFycixyZXQpO3JldHVybiByZXR9fTtmdW5jdGlvbiBjb252ZXJ0UmV0dXJuVmFsdWUocmV0KXtpZihyZXR1cm5UeXBlPT09XCJzdHJpbmdcIil7cmV0dXJuIFVURjhUb1N0cmluZyhyZXQpfWlmKHJldHVyblR5cGU9PT1cImJvb2xlYW5cIilyZXR1cm4gQm9vbGVhbihyZXQpO3JldHVybiByZXR9dmFyIGZ1bmM9Z2V0Q0Z1bmMoaWRlbnQpO3ZhciBjQXJncz1bXTt2YXIgc3RhY2s9MDtpZihhcmdzKXtmb3IodmFyIGk9MDtpPGFyZ3MubGVuZ3RoO2krKyl7dmFyIGNvbnZlcnRlcj10b0NbYXJnVHlwZXNbaV1dO2lmKGNvbnZlcnRlcil7aWYoc3RhY2s9PT0wKXN0YWNrPXN0YWNrU2F2ZSgpO2NBcmdzW2ldPWNvbnZlcnRlcihhcmdzW2ldKX1lbHNle2NBcmdzW2ldPWFyZ3NbaV19fX12YXIgcmV0PWZ1bmMuYXBwbHkobnVsbCxjQXJncyk7ZnVuY3Rpb24gb25Eb25lKHJldCl7aWYoc3RhY2shPT0wKXN0YWNrUmVzdG9yZShzdGFjayk7cmV0dXJuIGNvbnZlcnRSZXR1cm5WYWx1ZShyZXQpfXJldD1vbkRvbmUocmV0KTtyZXR1cm4gcmV0fXZhciB3YXNtSW1wb3J0cz17XCJmXCI6X1hNTF9HZXRCdWZmZXIsXCJWXCI6X1hNTF9HZXRFcnJvckNvZGUsXCJXXCI6X1hNTF9QYXJzZSxcIm1cIjpfWE1MX1BhcnNlQnVmZmVyLFwib1wiOl9YTUxfUGFyc2VyQ3JlYXRlLFwiYlwiOl9YTUxfUGFyc2VyRnJlZSxcIkJcIjpfWE1MX1Jlc3VtZVBhcnNlcixcImRcIjpfWE1MX1NldENoYXJhY3RlckRhdGFIYW5kbGVyLFwiYVwiOl9YTUxfU2V0RWxlbWVudEhhbmRsZXIsXCJuXCI6X1hNTF9TZXRVc2VyRGF0YSxcImlcIjpfWE1MX1N0b3BQYXJzZXIsXCJMYVwiOl9fX2Rsc3ltLFwiR2FcIjpfX19zeXNjYWxsX19uZXdzZWxlY3QsXCJLYVwiOl9fX3N5c2NhbGxfYmluZCxcIkphXCI6X19fc3lzY2FsbF9jb25uZWN0LFwiQ2FcIjpfX19zeXNjYWxsX2ZhY2Nlc3NhdCxcImNcIjpfX19zeXNjYWxsX2ZjbnRsNjQsXCJCYVwiOl9fX3N5c2NhbGxfZnN0YXQ2NCxcIk9cIjpfX19zeXNjYWxsX2Z0cnVuY2F0ZTY0LFwid2FcIjpfX19zeXNjYWxsX2dldGRlbnRzNjQsXCJFYVwiOl9fX3N5c2NhbGxfZ2V0cGVlcm5hbWUsXCJGYVwiOl9fX3N5c2NhbGxfZ2V0c29ja29wdCxcIkxcIjpfX19zeXNjYWxsX2lvY3RsLFwieWFcIjpfX19zeXNjYWxsX2xzdGF0NjQsXCJ4YVwiOl9fX3N5c2NhbGxfbWtkaXJhdCxcInphXCI6X19fc3lzY2FsbF9uZXdmc3RhdGF0LFwiTVwiOl9fX3N5c2NhbGxfb3BlbmF0LFwiSGFcIjpfX19zeXNjYWxsX3JlY3Zmcm9tLFwidWFcIjpfX19zeXNjYWxsX3JlbmFtZWF0LFwiR1wiOl9fX3N5c2NhbGxfcm1kaXIsXCJJYVwiOl9fX3N5c2NhbGxfc2VuZHRvLFwiSVwiOl9fX3N5c2NhbGxfc29ja2V0LFwiQWFcIjpfX19zeXNjYWxsX3N0YXQ2NCxcIkhcIjpfX19zeXNjYWxsX3VubGlua2F0LFwiU1wiOl9fZW1zY3JpcHRlbl9nZXRfbm93X2lzX21vbm90b25pYyxcImVhXCI6X19sb2NhbHRpbWVfanMsXCJmYVwiOl9fdHpzZXRfanMsXCJqXCI6X2Fib3J0LFwiTWFcIjpfZGxvcGVuLFwibWFcIjpfZHVja2RiX3dlYl9mc19kaXJlY3RvcnlfY3JlYXRlLFwibmFcIjpfZHVja2RiX3dlYl9mc19kaXJlY3RvcnlfZXhpc3RzLFwiamFcIjpfZHVja2RiX3dlYl9mc19kaXJlY3RvcnlfbGlzdF9maWxlcyxcImthXCI6X2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X3JlbW92ZSxcIkVcIjpfZHVja2RiX3dlYl9mc19maWxlX2Nsb3NlLFwiaGFcIjpfZHVja2RiX3dlYl9mc19maWxlX2V4aXN0cyxcIk5cIjpfZHVja2RiX3dlYl9mc19maWxlX2dldF9sYXN0X21vZGlmaWVkX3RpbWUsXCJpYVwiOl9kdWNrZGJfd2ViX2ZzX2ZpbGVfbW92ZSxcInBhXCI6X2R1Y2tkYl93ZWJfZnNfZmlsZV9vcGVuLFwicFwiOl9kdWNrZGJfd2ViX2ZzX2ZpbGVfcmVhZCxcIm9hXCI6X2R1Y2tkYl93ZWJfZnNfZmlsZV90cnVuY2F0ZSxcIkZcIjpfZHVja2RiX3dlYl9mc19maWxlX3dyaXRlLFwicWFcIjpfZHVja2RiX3dlYl9mc19nZXRfZGVmYXVsdF9kYXRhX3Byb3RvY29sLFwiZ2FcIjpfZHVja2RiX3dlYl9mc19nbG9iLFwiRFwiOl9kdWNrZGJfd2ViX3Rlc3RfcGxhdGZvcm1fZmVhdHVyZSxcInJhXCI6X2R1Y2tkYl93ZWJfdWRmX3NjYWxhcl9jYWxsLFwiQVwiOl9lbXNjcmlwdGVuX2RhdGVfbm93LFwiWFwiOl9lbXNjcmlwdGVuX2dldF9oZWFwX21heCxcImdcIjpfZW1zY3JpcHRlbl9nZXRfbm93LFwiT2FcIjpfZW1zY3JpcHRlbl9tZW1jcHlfYmlnLFwiUGFcIjpfZW1zY3JpcHRlbl9yZXNpemVfaGVhcCxcImxhXCI6X2Vudmlyb25fZ2V0LFwidGFcIjpfZW52aXJvbl9zaXplc19nZXQsXCJrXCI6X2ZkX2Nsb3NlLFwiTmFcIjpfZmRfZmRzdGF0X2dldCxcIlFcIjpfZmRfcHJlYWQsXCJQXCI6X2ZkX3B3cml0ZSxcIktcIjpfZmRfcmVhZCxcIlJcIjpfZmRfc2VlayxcInZhXCI6X2ZkX3N5bmMsXCJ2XCI6X2ZkX3dyaXRlLFwiSlwiOl9nZXRhZGRyaW5mbyxcInNhXCI6X2dldGVudHJvcHksXCJEYVwiOl9nZXRuYW1laW5mbyxcImJhXCI6X3N0cmZ0aW1lX2wsXCJlXCI6X3VjbnZfY2xvc2VfNjQsXCJZXCI6X3VjbnZfY29udmVydEV4XzY0LFwidVwiOl91Y252X29wZW5fNjQsXCJaXCI6X3VjbnZfdG9BbGdvcml0aG1pY182NCxcIkNcIjpfdWNzZGV0X2Nsb3NlXzY0LFwiYWFcIjpfdWNzZGV0X2RldGVjdF82NCxcIiRcIjpfdWNzZGV0X2dldENvbmZpZGVuY2VfNjQsXCJfXCI6X3Vjc2RldF9nZXROYW1lXzY0LFwiZGFcIjpfdWNzZGV0X29wZW5fNjQsXCJjYVwiOl91Y3NkZXRfc2V0VGV4dF82NCxcImhcIjpfdW56Q2xvc2UsXCJ0XCI6X3VuekNsb3NlQ3VycmVudEZpbGUsXCJ5XCI6X3VuekdldEN1cnJlbnRGaWxlSW5mbyxcInFcIjpfdW56R2V0Q3VycmVudEZpbGVJbmZvNjQsXCJVXCI6X3VuekdldEdsb2JhbEluZm8sXCJ6XCI6X3VuekdvVG9GaXJzdEZpbGUsXCJ4XCI6X3VuekdvVG9OZXh0RmlsZSxcInNcIjpfdW56TG9jYXRlRmlsZSxcIndcIjpfdW56T3BlbixcIlRcIjpfdW56T3BlbjIsXCJyXCI6X3Vuek9wZW5DdXJyZW50RmlsZSxcImxcIjpfdW56UmVhZEN1cnJlbnRGaWxlfTt2YXIgYXNtPWNyZWF0ZVdhc20oKTt2YXIgX19fd2FzbV9jYWxsX2N0b3JzPWZ1bmN0aW9uKCl7cmV0dXJuKF9fX3dhc21fY2FsbF9jdG9ycz1Nb2R1bGVbXCJhc21cIl1bXCJSYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX21haW49TW9kdWxlW1wiX21haW5cIl09ZnVuY3Rpb24oKXtyZXR1cm4oX21haW49TW9kdWxlW1wiX21haW5cIl09TW9kdWxlW1wiYXNtXCJdW1wiU2FcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX2ZzX2dsb2JfYWRkX3BhdGg9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZnNfZ2xvYl9hZGRfcGF0aFwiXT1mdW5jdGlvbigpe3JldHVybihfZHVja2RiX3dlYl9mc19nbG9iX2FkZF9wYXRoPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZzX2dsb2JfYWRkX3BhdGhcIl09TW9kdWxlW1wiYXNtXCJdW1wiVWFcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX2NsZWFyX3Jlc3BvbnNlPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2NsZWFyX3Jlc3BvbnNlXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2NsZWFyX3Jlc3BvbnNlPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2NsZWFyX3Jlc3BvbnNlXCJdPU1vZHVsZVtcImFzbVwiXVtcIlZhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9mYWlsX3dpdGg9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZmFpbF93aXRoXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2ZhaWxfd2l0aD1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mYWlsX3dpdGhcIl09TW9kdWxlW1wiYXNtXCJdW1wiV2FcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX3Jlc2V0PU1vZHVsZVtcIl9kdWNrZGJfd2ViX3Jlc2V0XCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX3Jlc2V0PU1vZHVsZVtcIl9kdWNrZGJfd2ViX3Jlc2V0XCJdPU1vZHVsZVtcImFzbVwiXVtcIlhhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9jb25uZWN0PU1vZHVsZVtcIl9kdWNrZGJfd2ViX2Nvbm5lY3RcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfY29ubmVjdD1Nb2R1bGVbXCJfZHVja2RiX3dlYl9jb25uZWN0XCJdPU1vZHVsZVtcImFzbVwiXVtcIllhXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9kaXNjb25uZWN0PU1vZHVsZVtcIl9kdWNrZGJfd2ViX2Rpc2Nvbm5lY3RcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfZGlzY29ubmVjdD1Nb2R1bGVbXCJfZHVja2RiX3dlYl9kaXNjb25uZWN0XCJdPU1vZHVsZVtcImFzbVwiXVtcIlphXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9mbHVzaF9maWxlcz1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mbHVzaF9maWxlc1wiXT1mdW5jdGlvbigpe3JldHVybihfZHVja2RiX3dlYl9mbHVzaF9maWxlcz1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mbHVzaF9maWxlc1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJfYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfZmx1c2hfZmlsZT1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mbHVzaF9maWxlXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2ZsdXNoX2ZpbGU9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZmx1c2hfZmlsZVwiXT1Nb2R1bGVbXCJhc21cIl1bXCIkYVwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfb3Blbj1Nb2R1bGVbXCJfZHVja2RiX3dlYl9vcGVuXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX29wZW49TW9kdWxlW1wiX2R1Y2tkYl93ZWJfb3BlblwiXT1Nb2R1bGVbXCJhc21cIl1bXCJhYlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfZ2V0X2dsb2JhbF9maWxlX2luZm89TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZ2V0X2dsb2JhbF9maWxlX2luZm9cIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfZ2V0X2dsb2JhbF9maWxlX2luZm89TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZ2V0X2dsb2JhbF9maWxlX2luZm9cIl09TW9kdWxlW1wiYXNtXCJdW1wiYmJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX2NvbGxlY3RfZmlsZV9zdGF0cz1Nb2R1bGVbXCJfZHVja2RiX3dlYl9jb2xsZWN0X2ZpbGVfc3RhdHNcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfY29sbGVjdF9maWxlX3N0YXRzPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2NvbGxlY3RfZmlsZV9zdGF0c1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJjYlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfZXhwb3J0X2ZpbGVfc3RhdHM9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZXhwb3J0X2ZpbGVfc3RhdHNcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfZXhwb3J0X2ZpbGVfc3RhdHM9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZXhwb3J0X2ZpbGVfc3RhdHNcIl09TW9kdWxlW1wiYXNtXCJdW1wiZGJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX2ZzX2Ryb3BfZmlsZT1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mc19kcm9wX2ZpbGVcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZzX2Ryb3BfZmlsZVwiXT1Nb2R1bGVbXCJhc21cIl1bXCJlYlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlcz1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mc19kcm9wX2ZpbGVzXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2ZzX2Ryb3BfZmlsZXM9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlc1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJmYlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfZnNfZ2xvYl9maWxlX2luZm9zPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZzX2dsb2JfZmlsZV9pbmZvc1wiXT1mdW5jdGlvbigpe3JldHVybihfZHVja2RiX3dlYl9mc19nbG9iX2ZpbGVfaW5mb3M9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZnNfZ2xvYl9maWxlX2luZm9zXCJdPU1vZHVsZVtcImFzbVwiXVtcImdiXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X2lkPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZzX2dldF9maWxlX2luZm9fYnlfaWRcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfZnNfZ2V0X2ZpbGVfaW5mb19ieV9pZD1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X2lkXCJdPU1vZHVsZVtcImFzbVwiXVtcImhiXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X25hbWU9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZnNfZ2V0X2ZpbGVfaW5mb19ieV9uYW1lXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2ZzX2dldF9maWxlX2luZm9fYnlfbmFtZT1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X25hbWVcIl09TW9kdWxlW1wiYXNtXCJdW1wiaWJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfdXJsPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfdXJsXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfdXJsPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2ZzX3JlZ2lzdGVyX2ZpbGVfdXJsXCJdPU1vZHVsZVtcImFzbVwiXVtcImpiXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX2J1ZmZlcj1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX2J1ZmZlclwiXT1mdW5jdGlvbigpe3JldHVybihfZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX2J1ZmZlcj1Nb2R1bGVbXCJfZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX2J1ZmZlclwiXT1Nb2R1bGVbXCJhc21cIl1bXCJrYlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX2J1ZmZlcj1Nb2R1bGVbXCJfZHVja2RiX3dlYl9jb3B5X2ZpbGVfdG9fYnVmZmVyXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2NvcHlfZmlsZV90b19idWZmZXI9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX2J1ZmZlclwiXT1Nb2R1bGVbXCJhc21cIl1bXCJsYlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX3BhdGg9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX3BhdGhcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX3BhdGg9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX3BhdGhcIl09TW9kdWxlW1wiYXNtXCJdW1wibWJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX2dldF92ZXJzaW9uPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2dldF92ZXJzaW9uXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2dldF92ZXJzaW9uPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2dldF92ZXJzaW9uXCJdPU1vZHVsZVtcImFzbVwiXVtcIm5iXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9nZXRfZmVhdHVyZV9mbGFncz1Nb2R1bGVbXCJfZHVja2RiX3dlYl9nZXRfZmVhdHVyZV9mbGFnc1wiXT1mdW5jdGlvbigpe3JldHVybihfZHVja2RiX3dlYl9nZXRfZmVhdHVyZV9mbGFncz1Nb2R1bGVbXCJfZHVja2RiX3dlYl9nZXRfZmVhdHVyZV9mbGFnc1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJvYlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfdG9rZW5pemU9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfdG9rZW5pemVcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfdG9rZW5pemU9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfdG9rZW5pemVcIl09TW9kdWxlW1wiYXNtXCJdW1wicGJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX3VkZl9zY2FsYXJfY3JlYXRlPU1vZHVsZVtcIl9kdWNrZGJfd2ViX3VkZl9zY2FsYXJfY3JlYXRlXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX3VkZl9zY2FsYXJfY3JlYXRlPU1vZHVsZVtcIl9kdWNrZGJfd2ViX3VkZl9zY2FsYXJfY3JlYXRlXCJdPU1vZHVsZVtcImFzbVwiXVtcInFiXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9wcmVwYXJlZF9jcmVhdGU9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfY3JlYXRlXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX3ByZXBhcmVkX2NyZWF0ZT1Nb2R1bGVbXCJfZHVja2RiX3dlYl9wcmVwYXJlZF9jcmVhdGVcIl09TW9kdWxlW1wiYXNtXCJdW1wicmJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX3ByZXBhcmVkX2Nsb3NlPU1vZHVsZVtcIl9kdWNrZGJfd2ViX3ByZXBhcmVkX2Nsb3NlXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX3ByZXBhcmVkX2Nsb3NlPU1vZHVsZVtcIl9kdWNrZGJfd2ViX3ByZXBhcmVkX2Nsb3NlXCJdPU1vZHVsZVtcImFzbVwiXVtcInNiXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9wcmVwYXJlZF9ydW49TW9kdWxlW1wiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfcnVuXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX3ByZXBhcmVkX3J1bj1Nb2R1bGVbXCJfZHVja2RiX3dlYl9wcmVwYXJlZF9ydW5cIl09TW9kdWxlW1wiYXNtXCJdW1widGJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX3ByZXBhcmVkX3NlbmQ9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfc2VuZFwiXT1mdW5jdGlvbigpe3JldHVybihfZHVja2RiX3dlYl9wcmVwYXJlZF9zZW5kPU1vZHVsZVtcIl9kdWNrZGJfd2ViX3ByZXBhcmVkX3NlbmRcIl09TW9kdWxlW1wiYXNtXCJdW1widWJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX3F1ZXJ5X3J1bj1Nb2R1bGVbXCJfZHVja2RiX3dlYl9xdWVyeV9ydW5cIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfcXVlcnlfcnVuPU1vZHVsZVtcIl9kdWNrZGJfd2ViX3F1ZXJ5X3J1blwiXT1Nb2R1bGVbXCJhc21cIl1bXCJ2YlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9zdGFydD1Nb2R1bGVbXCJfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X3N0YXJ0XCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfc3RhcnQ9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9zdGFydFwiXT1Nb2R1bGVbXCJhc21cIl1bXCJ3YlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9wb2xsPU1vZHVsZVtcIl9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfcG9sbFwiXT1mdW5jdGlvbigpe3JldHVybihfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X3BvbGw9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9wb2xsXCJdPU1vZHVsZVtcImFzbVwiXVtcInhiXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X2NhbmNlbD1Nb2R1bGVbXCJfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X2NhbmNlbFwiXT1mdW5jdGlvbigpe3JldHVybihfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X2NhbmNlbD1Nb2R1bGVbXCJfZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X2NhbmNlbFwiXT1Nb2R1bGVbXCJhc21cIl1bXCJ5YlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfcXVlcnlfZmV0Y2hfcmVzdWx0cz1Nb2R1bGVbXCJfZHVja2RiX3dlYl9xdWVyeV9mZXRjaF9yZXN1bHRzXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX3F1ZXJ5X2ZldGNoX3Jlc3VsdHM9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfcXVlcnlfZmV0Y2hfcmVzdWx0c1wiXT1Nb2R1bGVbXCJhc21cIl1bXCJ6YlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTt2YXIgX2R1Y2tkYl93ZWJfZ2V0X3RhYmxlbmFtZXM9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZ2V0X3RhYmxlbmFtZXNcIl09ZnVuY3Rpb24oKXtyZXR1cm4oX2R1Y2tkYl93ZWJfZ2V0X3RhYmxlbmFtZXM9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfZ2V0X3RhYmxlbmFtZXNcIl09TW9kdWxlW1wiYXNtXCJdW1wiQWJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX2luc2VydF9hcnJvd19mcm9tX2lwY19zdHJlYW09TW9kdWxlW1wiX2R1Y2tkYl93ZWJfaW5zZXJ0X2Fycm93X2Zyb21faXBjX3N0cmVhbVwiXT1mdW5jdGlvbigpe3JldHVybihfZHVja2RiX3dlYl9pbnNlcnRfYXJyb3dfZnJvbV9pcGNfc3RyZWFtPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2luc2VydF9hcnJvd19mcm9tX2lwY19zdHJlYW1cIl09TW9kdWxlW1wiYXNtXCJdW1wiQmJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9kdWNrZGJfd2ViX2luc2VydF9jc3ZfZnJvbV9wYXRoPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2luc2VydF9jc3ZfZnJvbV9wYXRoXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2luc2VydF9jc3ZfZnJvbV9wYXRoPU1vZHVsZVtcIl9kdWNrZGJfd2ViX2luc2VydF9jc3ZfZnJvbV9wYXRoXCJdPU1vZHVsZVtcImFzbVwiXVtcIkNiXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfZHVja2RiX3dlYl9pbnNlcnRfanNvbl9mcm9tX3BhdGg9TW9kdWxlW1wiX2R1Y2tkYl93ZWJfaW5zZXJ0X2pzb25fZnJvbV9wYXRoXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9kdWNrZGJfd2ViX2luc2VydF9qc29uX2Zyb21fcGF0aD1Nb2R1bGVbXCJfZHVja2RiX3dlYl9pbnNlcnRfanNvbl9mcm9tX3BhdGhcIl09TW9kdWxlW1wiYXNtXCJdW1wiRGJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9fX2Vycm5vX2xvY2F0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuKF9fX2Vycm5vX2xvY2F0aW9uPU1vZHVsZVtcImFzbVwiXVtcIl9fZXJybm9fbG9jYXRpb25cIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9odG9ubD1mdW5jdGlvbigpe3JldHVybihfaHRvbmw9TW9kdWxlW1wiYXNtXCJdW1wiRWJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9odG9ucz1mdW5jdGlvbigpe3JldHVybihfaHRvbnM9TW9kdWxlW1wiYXNtXCJdW1wiRmJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9udG9ocz1mdW5jdGlvbigpe3JldHVybihfbnRvaHM9TW9kdWxlW1wiYXNtXCJdW1wiR2JcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9tYWxsb2M9TW9kdWxlW1wiX21hbGxvY1wiXT1mdW5jdGlvbigpe3JldHVybihfbWFsbG9jPU1vZHVsZVtcIl9tYWxsb2NcIl09TW9kdWxlW1wiYXNtXCJdW1wiSGJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIF9mcmVlPU1vZHVsZVtcIl9mcmVlXCJdPWZ1bmN0aW9uKCl7cmV0dXJuKF9mcmVlPU1vZHVsZVtcIl9mcmVlXCJdPU1vZHVsZVtcImFzbVwiXVtcIkliXCJdKS5hcHBseShudWxsLGFyZ3VtZW50cyl9O3ZhciBfX190cmFwPWZ1bmN0aW9uKCl7cmV0dXJuKF9fX3RyYXA9TW9kdWxlW1wiYXNtXCJdW1wiSmJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIHN0YWNrU2F2ZT1mdW5jdGlvbigpe3JldHVybihzdGFja1NhdmU9TW9kdWxlW1wiYXNtXCJdW1wiS2JcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIHN0YWNrUmVzdG9yZT1mdW5jdGlvbigpe3JldHVybihzdGFja1Jlc3RvcmU9TW9kdWxlW1wiYXNtXCJdW1wiTGJcIl0pLmFwcGx5KG51bGwsYXJndW1lbnRzKX07dmFyIHN0YWNrQWxsb2M9ZnVuY3Rpb24oKXtyZXR1cm4oc3RhY2tBbGxvYz1Nb2R1bGVbXCJhc21cIl1bXCJNYlwiXSkuYXBwbHkobnVsbCxhcmd1bWVudHMpfTtNb2R1bGVbXCJzdGFja0FsbG9jXCJdPXN0YWNrQWxsb2M7TW9kdWxlW1wic3RhY2tTYXZlXCJdPXN0YWNrU2F2ZTtNb2R1bGVbXCJzdGFja1Jlc3RvcmVcIl09c3RhY2tSZXN0b3JlO01vZHVsZVtcImNjYWxsXCJdPWNjYWxsO3ZhciBjYWxsZWRSdW47ZGVwZW5kZW5jaWVzRnVsZmlsbGVkPWZ1bmN0aW9uIHJ1bkNhbGxlcigpe2lmKCFjYWxsZWRSdW4pcnVuKCk7aWYoIWNhbGxlZFJ1bilkZXBlbmRlbmNpZXNGdWxmaWxsZWQ9cnVuQ2FsbGVyfTtmdW5jdGlvbiBjYWxsTWFpbigpe3ZhciBlbnRyeUZ1bmN0aW9uPV9tYWluO3ZhciBhcmdjPTA7dmFyIGFyZ3Y9MDt0cnl7dmFyIHJldD1lbnRyeUZ1bmN0aW9uKGFyZ2MsYXJndik7ZXhpdEpTKHJldCx0cnVlKTtyZXR1cm4gcmV0fWNhdGNoKGUpe3JldHVybiBoYW5kbGVFeGNlcHRpb24oZSl9fWZ1bmN0aW9uIHJ1bigpe2lmKHJ1bkRlcGVuZGVuY2llcz4wKXtyZXR1cm59cHJlUnVuKCk7aWYocnVuRGVwZW5kZW5jaWVzPjApe3JldHVybn1mdW5jdGlvbiBkb1J1bigpe2lmKGNhbGxlZFJ1bilyZXR1cm47Y2FsbGVkUnVuPXRydWU7TW9kdWxlW1wiY2FsbGVkUnVuXCJdPXRydWU7aWYoQUJPUlQpcmV0dXJuO2luaXRSdW50aW1lKCk7cHJlTWFpbigpO3JlYWR5UHJvbWlzZVJlc29sdmUoTW9kdWxlKTtpZihNb2R1bGVbXCJvblJ1bnRpbWVJbml0aWFsaXplZFwiXSlNb2R1bGVbXCJvblJ1bnRpbWVJbml0aWFsaXplZFwiXSgpO2lmKHNob3VsZFJ1bk5vdyljYWxsTWFpbigpO3Bvc3RSdW4oKX1pZihNb2R1bGVbXCJzZXRTdGF0dXNcIl0pe01vZHVsZVtcInNldFN0YXR1c1wiXShcIlJ1bm5pbmcuLi5cIik7c2V0VGltZW91dChmdW5jdGlvbigpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtNb2R1bGVbXCJzZXRTdGF0dXNcIl0oXCJcIil9LDEpO2RvUnVuKCl9LDEpfWVsc2V7ZG9SdW4oKX19aWYoTW9kdWxlW1wicHJlSW5pdFwiXSl7aWYodHlwZW9mIE1vZHVsZVtcInByZUluaXRcIl09PVwiZnVuY3Rpb25cIilNb2R1bGVbXCJwcmVJbml0XCJdPVtNb2R1bGVbXCJwcmVJbml0XCJdXTt3aGlsZShNb2R1bGVbXCJwcmVJbml0XCJdLmxlbmd0aD4wKXtNb2R1bGVbXCJwcmVJbml0XCJdLnBvcCgpKCl9fXZhciBzaG91bGRSdW5Ob3c9dHJ1ZTtpZihNb2R1bGVbXCJub0luaXRpYWxSdW5cIl0pc2hvdWxkUnVuTm93PWZhbHNlO3J1bigpO1xuXG5cbiAgcmV0dXJuIER1Y2tEQi5yZWFkeVxufVxuXG4pO1xufSkoKTtcbmlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG4gIG1vZHVsZS5leHBvcnRzID0gRHVja0RCO1xuZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmVbJ2FtZCddKVxuICBkZWZpbmUoW10sIGZ1bmN0aW9uKCkgeyByZXR1cm4gRHVja0RCOyB9KTtcbmVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JylcbiAgZXhwb3J0c1tcIkR1Y2tEQlwiXSA9IER1Y2tEQjtcbiIsICJleHBvcnQgKiBmcm9tICcuLi9iaW5kaW5ncyc7XHJcbmV4cG9ydCAqIGZyb20gJy4uL2xvZyc7XHJcbmV4cG9ydCAqIGZyb20gJy4uL3BsYXRmb3JtJztcclxuZXhwb3J0ICogZnJvbSAnLi4vc3RhdHVzJztcclxuZXhwb3J0ICogZnJvbSAnLi4vdmVyc2lvbic7XHJcbmV4cG9ydCB7IER1Y2tEQkRhdGFQcm90b2NvbCB9IGZyb20gJy4uL2JpbmRpbmdzL3J1bnRpbWUnO1xyXG5leHBvcnQgeyBERUZBVUxUX1JVTlRJTUUgfSBmcm9tICcuLi9iaW5kaW5ncy9ydW50aW1lJztcclxuZXhwb3J0IHsgTk9ERV9SVU5USU1FIH0gZnJvbSAnLi4vYmluZGluZ3MvcnVudGltZV9ub2RlJztcclxuXHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2xvZyc7XHJcbmltcG9ydCB7IER1Y2tEQlJ1bnRpbWUgfSBmcm9tICcuLi9iaW5kaW5ncyc7XHJcbmltcG9ydCB7IER1Y2tEQk5vZGVCaW5kaW5ncyB9IGZyb20gJy4uL2JpbmRpbmdzL2JpbmRpbmdzX25vZGVfYmFzZSc7XHJcbmltcG9ydCB7IER1Y2tEQkJ1bmRsZXMsIGdldFBsYXRmb3JtRmVhdHVyZXMgfSBmcm9tICcuLi9wbGF0Zm9ybSc7XHJcbmltcG9ydCB7IER1Y2tEQiBhcyBEdWNrREJNVlAgfSBmcm9tICcuLi9iaW5kaW5ncy9iaW5kaW5nc19ub2RlX212cCc7XHJcbmltcG9ydCB7IER1Y2tEQiBhcyBEdWNrREJOZXh0IH0gZnJvbSAnLi4vYmluZGluZ3MvYmluZGluZ3Nfbm9kZV9laCc7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlRHVja0RCKFxyXG4gICAgYnVuZGxlczogRHVja0RCQnVuZGxlcyxcclxuICAgIGxvZ2dlcjogTG9nZ2VyLFxyXG4gICAgcnVudGltZTogRHVja0RCUnVudGltZSxcclxuKTogUHJvbWlzZTxEdWNrREJOb2RlQmluZGluZ3M+IHtcclxuICAgIGNvbnN0IHBsYXRmb3JtID0gYXdhaXQgZ2V0UGxhdGZvcm1GZWF0dXJlcygpO1xyXG4gICAgaWYgKHBsYXRmb3JtLndhc21FeGNlcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKGJ1bmRsZXMuZWgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEdWNrREJOZXh0KGxvZ2dlciwgcnVudGltZSwgYnVuZGxlcy5laCEubWFpbk1vZHVsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBEdWNrREJNVlAobG9nZ2VyLCBydW50aW1lLCBidW5kbGVzLm12cC5tYWluTW9kdWxlKTtcclxufVxyXG4iLCAiaW1wb3J0ICogYXMgYXJyb3cgZnJvbSAnYXBhY2hlLWFycm93JztcclxuaW1wb3J0IHsgRHVja0RCQmluZGluZ3MgfSBmcm9tICcuL2JpbmRpbmdzX2ludGVyZmFjZSc7XHJcbmltcG9ydCB7IENTVkluc2VydE9wdGlvbnMsIEpTT05JbnNlcnRPcHRpb25zLCBBcnJvd0luc2VydE9wdGlvbnMgfSBmcm9tICcuL2luc2VydF9vcHRpb25zJztcclxuXHJcbi8qKiBBIHRoaW4gaGVscGVyIHRvIGJpbmQgdGhlIGNvbm5lY3Rpb24gaWQgYW5kIHRhbGsgcmVjb3JkIGJhdGNoZXMgKi9cclxuZXhwb3J0IGNsYXNzIER1Y2tEQkNvbm5lY3Rpb24ge1xyXG4gICAgLyoqIFRoZSBiaW5kaW5ncyAqL1xyXG4gICAgcHJvdGVjdGVkIF9iaW5kaW5nczogRHVja0RCQmluZGluZ3M7XHJcbiAgICAvKiogVGhlIGNvbm5lY3Rpb24gaGFuZGxlICovXHJcbiAgICBwcm90ZWN0ZWQgX2Nvbm46IG51bWJlcjtcclxuXHJcbiAgICAvKiogQ29uc3RydWN0b3IgKi9cclxuICAgIGNvbnN0cnVjdG9yKGJpbmRpbmdzOiBEdWNrREJCaW5kaW5ncywgY29ubjogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fYmluZGluZ3MgPSBiaW5kaW5ncztcclxuICAgICAgICB0aGlzLl9jb25uID0gY29ubjtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQ2xvc2UgYSBjb25uZWN0aW9uICovXHJcbiAgICBwdWJsaWMgY2xvc2UoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fYmluZGluZ3MuZGlzY29ubmVjdCh0aGlzLl9jb25uKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQnJhdmUgc291bHMgbWF5IHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGNvbnN1bWUgdGhlIHVuZGVybHlpbmcgY29ubmVjdGlvbiBpZCAqL1xyXG4gICAgcHVibGljIHVzZVVuc2FmZTxSPihjYWxsYmFjazogKGJpbmRpbmdzOiBEdWNrREJCaW5kaW5ncywgY29ubjogbnVtYmVyKSA9PiBSKSB7XHJcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHRoaXMuX2JpbmRpbmdzLCB0aGlzLl9jb25uKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogUnVuIGEgcXVlcnkgKi9cclxuICAgIHB1YmxpYyBxdWVyeTxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBhcnJvdy5EYXRhVHlwZSB9ID0gYW55Pih0ZXh0OiBzdHJpbmcpOiBhcnJvdy5UYWJsZTxUPiB7XHJcbiAgICAgICAgY29uc3QgYnVmZmVyID0gdGhpcy5fYmluZGluZ3MucnVuUXVlcnkodGhpcy5fY29ubiwgdGV4dCk7XHJcbiAgICAgICAgY29uc3QgcmVhZGVyID0gYXJyb3cuUmVjb3JkQmF0Y2hSZWFkZXIuZnJvbTxUPihidWZmZXIpO1xyXG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHJlYWRlci5pc1N5bmMoKSk7XHJcbiAgICAgICAgY29uc29sZS5hc3NlcnQocmVhZGVyLmlzRmlsZSgpKTtcclxuICAgICAgICByZXR1cm4gbmV3IGFycm93LlRhYmxlKHJlYWRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFNlbmQgYSBxdWVyeSAqL1xyXG4gICAgcHVibGljIGFzeW5jIHNlbmQ8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogYXJyb3cuRGF0YVR5cGUgfSA9IGFueT4oXHJcbiAgICAgICAgdGV4dDogc3RyaW5nLFxyXG4gICAgKTogUHJvbWlzZTxhcnJvdy5SZWNvcmRCYXRjaFN0cmVhbVJlYWRlcjxUPj4ge1xyXG4gICAgICAgIGxldCBoZWFkZXIgPSB0aGlzLl9iaW5kaW5ncy5zdGFydFBlbmRpbmdRdWVyeSh0aGlzLl9jb25uLCB0ZXh0KTtcclxuICAgICAgICB3aGlsZSAoaGVhZGVyID09IG51bGwpIHtcclxuICAgICAgICAgICAgaGVhZGVyID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMuX2JpbmRpbmdzLnBvbGxQZW5kaW5nUXVlcnkodGhpcy5fY29ubikpO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZTogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaXRlciA9IG5ldyBSZXN1bHRTdHJlYW1JdGVyYXRvcih0aGlzLl9iaW5kaW5ncywgdGhpcy5fY29ubiwgaGVhZGVyKTtcclxuICAgICAgICBjb25zdCByZWFkZXIgPSBhcnJvdy5SZWNvcmRCYXRjaFJlYWRlci5mcm9tPFQ+KGl0ZXIpO1xyXG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHJlYWRlci5pc1N5bmMoKSk7XHJcbiAgICAgICAgY29uc29sZS5hc3NlcnQocmVhZGVyLmlzU3RyZWFtKCkpO1xyXG4gICAgICAgIHJldHVybiByZWFkZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIENhbmNlbCBhIHF1ZXJ5IHRoYXQgd2FzIHNlbnQgZWFybGllciAqL1xyXG4gICAgcHVibGljIGNhbmNlbFNlbnQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRpbmdzLmNhbmNlbFBlbmRpbmdRdWVyeSh0aGlzLl9jb25uKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0IHRhYmxlIG5hbWVzICovXHJcbiAgICBwdWJsaWMgZ2V0VGFibGVOYW1lcyhxdWVyeTogc3RyaW5nKTogc3RyaW5nW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kaW5ncy5nZXRUYWJsZU5hbWVzKHRoaXMuX2Nvbm4sIHF1ZXJ5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQ3JlYXRlIGEgcHJlcGFyZWQgc3RhdGVtZW50ICovXHJcbiAgICBwdWJsaWMgcHJlcGFyZTxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBhcnJvdy5EYXRhVHlwZSB9ID0gYW55Pih0ZXh0OiBzdHJpbmcpOiBQcmVwYXJlZFN0YXRlbWVudCB7XHJcbiAgICAgICAgY29uc3Qgc3RtdCA9IHRoaXMuX2JpbmRpbmdzLmNyZWF0ZVByZXBhcmVkKHRoaXMuX2Nvbm4sIHRleHQpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJlcGFyZWRTdGF0ZW1lbnQ8VD4odGhpcy5fYmluZGluZ3MsIHRoaXMuX2Nvbm4sIHN0bXQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBDcmVhdGUgYSBzY2FsYXIgZnVuY3Rpb24gKi9cclxuICAgIHB1YmxpYyBjcmVhdGVTY2FsYXJGdW5jdGlvbihuYW1lOiBzdHJpbmcsIHJldHVybnM6IGFycm93LkRhdGFUeXBlLCBmdW5jOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9iaW5kaW5ncy5jcmVhdGVTY2FsYXJGdW5jdGlvbih0aGlzLl9jb25uLCBuYW1lLCByZXR1cm5zLCBmdW5jKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogSW5zZXJ0IGFuIGFycm93IHRhYmxlICovXHJcbiAgICBwdWJsaWMgaW5zZXJ0QXJyb3dUYWJsZSh0YWJsZTogYXJyb3cuVGFibGUsIG9wdGlvbnM6IEFycm93SW5zZXJ0T3B0aW9ucyk6IHZvaWQge1xyXG5cdGNvbnN0IGJ1ZmZlciA9IGFycm93LnRhYmxlVG9JUEModGFibGUsICdzdHJlYW0nKTtcclxuICAgICAgICB0aGlzLmluc2VydEFycm93RnJvbUlQQ1N0cmVhbShidWZmZXIsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgLyoqIEluc2VydCBhbiBhcnJvdyB0YWJsZSBmcm9tIGFuIGlwYyBzdHJlYW0gKi9cclxuICAgIHB1YmxpYyBpbnNlcnRBcnJvd0Zyb21JUENTdHJlYW0oYnVmZmVyOiBVaW50OEFycmF5LCBvcHRpb25zOiBBcnJvd0luc2VydE9wdGlvbnMpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9iaW5kaW5ncy5pbnNlcnRBcnJvd0Zyb21JUENTdHJlYW0odGhpcy5fY29ubiwgYnVmZmVyLCBvcHRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogSW5lc3J0IGNzdiBmaWxlIGZyb20gcGF0aCAqL1xyXG4gICAgcHVibGljIGluc2VydENTVkZyb21QYXRoKHBhdGg6IHN0cmluZywgb3B0aW9uczogQ1NWSW5zZXJ0T3B0aW9ucyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2JpbmRpbmdzLmluc2VydENTVkZyb21QYXRoKHRoaXMuX2Nvbm4sIHBhdGgsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgLyoqIEluc2VydCBqc29uIGZpbGUgZnJvbSBwYXRoICovXHJcbiAgICBwdWJsaWMgaW5zZXJ0SlNPTkZyb21QYXRoKHBhdGg6IHN0cmluZywgb3B0aW9uczogSlNPTkluc2VydE9wdGlvbnMpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9iaW5kaW5ncy5pbnNlcnRKU09ORnJvbVBhdGgodGhpcy5fY29ubiwgcGF0aCwgb3B0aW9ucyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBBIHJlc3VsdCBzdHJlYW0gaXRlcmF0b3IgKi9cclxuZXhwb3J0IGNsYXNzIFJlc3VsdFN0cmVhbUl0ZXJhdG9yIGltcGxlbWVudHMgSXRlcmFibGU8VWludDhBcnJheT4ge1xyXG4gICAgLyoqIEZpcnN0IGNodW5rPyAqL1xyXG4gICAgX2ZpcnN0OiBib29sZWFuO1xyXG4gICAgLyoqIFJlYWNoZWQgZW5kIG9mIHN0cmVhbT8gKi9cclxuICAgIF9kZXBsZXRlZDogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgYmluZGluZ3M6IER1Y2tEQkJpbmRpbmdzLCBwcm90ZWN0ZWQgY29ubjogbnVtYmVyLCBwcm90ZWN0ZWQgaGVhZGVyOiBVaW50OEFycmF5KSB7XHJcbiAgICAgICAgdGhpcy5fZmlyc3QgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2RlcGxldGVkID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgbmV4dCgpOiBJdGVyYXRvclJlc3VsdDxVaW50OEFycmF5PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2ZpcnN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZpcnN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogdGhpcy5oZWFkZXIgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX2RlcGxldGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBudWxsIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGJ1ZmZlckk4ID0gdGhpcy5iaW5kaW5ncy5mZXRjaFF1ZXJ5UmVzdWx0cyh0aGlzLmNvbm4pO1xyXG4gICAgICAgIHRoaXMuX2RlcGxldGVkID0gYnVmZmVySTgubGVuZ3RoID09IDA7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZG9uZTogdGhpcy5fZGVwbGV0ZWQsXHJcbiAgICAgICAgICAgIHZhbHVlOiBidWZmZXJJOCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQSB0aGluIGhlbHBlciB0byBiaW5kIHRoZSBwcmVwYXJlZCBzdGF0ZW1lbnQgaWQqL1xyXG5leHBvcnQgY2xhc3MgUHJlcGFyZWRTdGF0ZW1lbnQ8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogYXJyb3cuRGF0YVR5cGUgfSA9IGFueT4ge1xyXG4gICAgLyoqIFRoZSBiaW5kaW5ncyAqL1xyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGJpbmRpbmdzOiBEdWNrREJCaW5kaW5ncztcclxuICAgIC8qKiBUaGUgY29ubmVjdGlvbiBpZCAqL1xyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGNvbm5lY3Rpb25JZDogbnVtYmVyO1xyXG4gICAgLyoqIFRoZSBzdGF0ZW1lbnQgaWQgKi9cclxuICAgIHByb3RlY3RlZCByZWFkb25seSBzdGF0ZW1lbnRJZDogbnVtYmVyO1xyXG5cclxuICAgIC8qKiBDb25zdHJ1Y3RvciAqL1xyXG4gICAgY29uc3RydWN0b3IoYmluZGluZ3M6IER1Y2tEQkJpbmRpbmdzLCBjb25uZWN0aW9uSWQ6IG51bWJlciwgc3RhdGVtZW50SWQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuYmluZGluZ3MgPSBiaW5kaW5ncztcclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25JZCA9IGNvbm5lY3Rpb25JZDtcclxuICAgICAgICB0aGlzLnN0YXRlbWVudElkID0gc3RhdGVtZW50SWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIENsb3NlIGEgcHJlcGFyZWQgc3RhdGVtZW50ICovXHJcbiAgICBwdWJsaWMgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5iaW5kaW5ncy5jbG9zZVByZXBhcmVkKHRoaXMuY29ubmVjdGlvbklkLCB0aGlzLnN0YXRlbWVudElkKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogUnVuIGEgcHJlcGFyZWQgc3RhdGVtZW50ICovXHJcbiAgICBwdWJsaWMgcXVlcnkoLi4ucGFyYW1zOiBhbnlbXSk6IGFycm93LlRhYmxlPFQ+IHtcclxuICAgICAgICBjb25zdCBidWZmZXIgPSB0aGlzLmJpbmRpbmdzLnJ1blByZXBhcmVkKHRoaXMuY29ubmVjdGlvbklkLCB0aGlzLnN0YXRlbWVudElkLCBwYXJhbXMpO1xyXG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGFycm93LlJlY29yZEJhdGNoUmVhZGVyLmZyb208VD4oYnVmZmVyKTtcclxuICAgICAgICBjb25zb2xlLmFzc2VydChyZWFkZXIuaXNTeW5jKCkpO1xyXG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHJlYWRlci5pc0ZpbGUoKSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBhcnJvdy5UYWJsZShyZWFkZXIgYXMgYXJyb3cuUmVjb3JkQmF0Y2hGaWxlUmVhZGVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogU2VuZCBhIHByZXBhcmVkIHN0YXRlbWVudCAqL1xyXG4gICAgcHVibGljIHNlbmQoLi4ucGFyYW1zOiBhbnlbXSk6IGFycm93LlJlY29yZEJhdGNoU3RyZWFtUmVhZGVyPFQ+IHtcclxuICAgICAgICBjb25zdCBoZWFkZXIgPSB0aGlzLmJpbmRpbmdzLnNlbmRQcmVwYXJlZCh0aGlzLmNvbm5lY3Rpb25JZCwgdGhpcy5zdGF0ZW1lbnRJZCwgcGFyYW1zKTtcclxuICAgICAgICBjb25zdCBpdGVyID0gbmV3IFJlc3VsdFN0cmVhbUl0ZXJhdG9yKHRoaXMuYmluZGluZ3MsIHRoaXMuY29ubmVjdGlvbklkLCBoZWFkZXIpO1xyXG4gICAgICAgIGNvbnN0IHJlYWRlciA9IGFycm93LlJlY29yZEJhdGNoUmVhZGVyLmZyb208VD4oaXRlcik7XHJcbiAgICAgICAgY29uc29sZS5hc3NlcnQocmVhZGVyLmlzU3luYygpKTtcclxuICAgICAgICBjb25zb2xlLmFzc2VydChyZWFkZXIuaXNTdHJlYW0oKSk7XHJcbiAgICAgICAgcmV0dXJuIHJlYWRlciBhcyBhcnJvdy5SZWNvcmRCYXRjaFN0cmVhbVJlYWRlcjtcclxuICAgIH1cclxufVxyXG4iLCAiZXhwb3J0IGVudW0gU3RhdHVzQ29kZSB7XHJcbiAgICBTVUNDRVNTID0gMCxcclxufVxyXG4iLCAiaW1wb3J0IHsgRHVja0RCUnVudGltZSB9IGZyb20gJy4vcnVudGltZSc7XHJcbmltcG9ydCB7IER1Y2tEQk1vZHVsZSB9IGZyb20gJy4vZHVja2RiX21vZHVsZSc7XHJcblxyXG5jb25zdCBURVhUX0VOQ09ERVIgPSBuZXcgVGV4dEVuY29kZXIoKTtcclxuY29uc3QgVEVYVF9ERUNPREVSID0gbmV3IFRleHREZWNvZGVyKCd1dGYtOCcpO1xyXG5cclxuZnVuY3Rpb24gc3RvcmVFcnJvcihtb2Q6IER1Y2tEQk1vZHVsZSwgcmVzcG9uc2U6IG51bWJlciwgbWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBtc2dCdWZmZXIgPSBURVhUX0VOQ09ERVIuZW5jb2RlKG1lc3NhZ2UpO1xyXG4gICAgY29uc3QgaGVhcEFkZHIgPSBtb2QuX21hbGxvYyhtc2dCdWZmZXIuYnl0ZUxlbmd0aCk7XHJcbiAgICBjb25zdCBoZWFwQXJyYXkgPSBtb2QuSEVBUFU4LnN1YmFycmF5KGhlYXBBZGRyLCBoZWFwQWRkciArIG1zZ0J1ZmZlci5ieXRlTGVuZ3RoKTtcclxuICAgIGhlYXBBcnJheS5zZXQobXNnQnVmZmVyKTtcclxuICAgIG1vZC5IRUFQRjY0WyhyZXNwb25zZSA+PiAzKSArIDBdID0gMTtcclxuICAgIG1vZC5IRUFQRjY0WyhyZXNwb25zZSA+PiAzKSArIDFdID0gaGVhcEFkZHI7XHJcbiAgICBtb2QuSEVBUEY2NFsocmVzcG9uc2UgPj4gMykgKyAyXSA9IGhlYXBBcnJheS5ieXRlTGVuZ3RoO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUeXBlU2l6ZShwdHlwZTogc3RyaW5nKSB7XHJcbiAgICBzd2l0Y2ggKHB0eXBlKSB7XHJcbiAgICAgICAgY2FzZSAnVUlOVDgnOlxyXG4gICAgICAgIGNhc2UgJ0lOVDgnOlxyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICBjYXNlICdJTlQzMic6XHJcbiAgICAgICAgY2FzZSAnRkxPQVQnOlxyXG4gICAgICAgICAgICByZXR1cm4gNDtcclxuICAgICAgICBjYXNlICdJTlQ2NCc6XHJcbiAgICAgICAgY2FzZSAnVUlOVDY0JzpcclxuICAgICAgICBjYXNlICdET1VCTEUnOlxyXG4gICAgICAgIGNhc2UgJ1ZBUkNIQVInOlxyXG4gICAgICAgICAgICByZXR1cm4gODtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcHRyVG9BcnJheShtb2Q6IER1Y2tEQk1vZHVsZSwgcHRyOiBudW1iZXIsIHB0eXBlOiBzdHJpbmcsIG46IG51bWJlcikge1xyXG4gICAgY29uc3QgaGVhcCA9IG1vZC5IRUFQVTguc3ViYXJyYXkocHRyLCBwdHIgKyBuICogZ2V0VHlwZVNpemUocHR5cGUpKTtcclxuICAgIHN3aXRjaCAocHR5cGUpIHtcclxuICAgICAgICBjYXNlICdVSU5UOCc6XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShoZWFwLmJ1ZmZlciwgaGVhcC5ieXRlT2Zmc2V0LCBuKTtcclxuICAgICAgICBjYXNlICdJTlQ4JzpcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnQ4QXJyYXkoaGVhcC5idWZmZXIsIGhlYXAuYnl0ZU9mZnNldCwgbik7XHJcbiAgICAgICAgY2FzZSAnSU5UMzInOlxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEludDMyQXJyYXkoaGVhcC5idWZmZXIsIGhlYXAuYnl0ZU9mZnNldCwgbik7XHJcbiAgICAgICAgY2FzZSAnRkxPQVQnOlxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShoZWFwLmJ1ZmZlciwgaGVhcC5ieXRlT2Zmc2V0LCBuKTtcclxuICAgICAgICBjYXNlICdET1VCTEUnOlxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0NjRBcnJheShoZWFwLmJ1ZmZlciwgaGVhcC5ieXRlT2Zmc2V0LCBuKTtcclxuICAgICAgICBjYXNlICdWQVJDSEFSJzpcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDY0QXJyYXkoaGVhcC5idWZmZXIsIGhlYXAuYnl0ZU9mZnNldCwgbik7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBBcnJheTxzdHJpbmcgfCB1bmRlZmluZWQgfCBudWxsPigwKTsgLy8gY291Z2hcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcHRyVG9VaW50OEFycmF5KG1vZDogRHVja0RCTW9kdWxlLCBwdHI6IG51bWJlciwgbjogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBoZWFwID0gbW9kLkhFQVBVOC5zdWJhcnJheShwdHIsIHB0ciArIG4pO1xyXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGhlYXAuYnVmZmVyLCBoZWFwLmJ5dGVPZmZzZXQsIG4pO1xyXG59XHJcbmZ1bmN0aW9uIHB0clRvRmxvYXQ2NEFycmF5KG1vZDogRHVja0RCTW9kdWxlLCBwdHI6IG51bWJlciwgbjogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBoZWFwID0gbW9kLkhFQVBVOC5zdWJhcnJheShwdHIsIHB0ciArIG4gKiA4KTtcclxuICAgIHJldHVybiBuZXcgRmxvYXQ2NEFycmF5KGhlYXAuYnVmZmVyLCBoZWFwLmJ5dGVPZmZzZXQsIG4pO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQXJndW1lbnRUeXBlRGVzY3JpcHRpb24ge1xyXG4gICAgbmFtZT86IHN0cmluZztcclxuICAgIHNxbFR5cGU6IHN0cmluZztcclxuICAgIHBoeXNpY2FsVHlwZTogc3RyaW5nO1xyXG4gICAgdmFsaWRpdHlCdWZmZXI/OiBudW1iZXI7XHJcbiAgICBkYXRhQnVmZmVyPzogbnVtYmVyO1xyXG4gICAgbGVuZ3RoQnVmZmVyPzogbnVtYmVyO1xyXG4gICAgY2hpbGRyZW4/OiBBcmd1bWVudFR5cGVEZXNjcmlwdGlvbltdO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgUmV0dXJuVHlwZURlc2NyaXB0aW9uIHtcclxuICAgIHNxbFR5cGU6IHN0cmluZztcclxuICAgIHBoeXNpY2FsVHlwZTogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU2NoZW1hRGVzY3JpcHRpb24ge1xyXG4gICAgcm93czogbnVtYmVyO1xyXG4gICAgYXJnczogQXJndW1lbnRUeXBlRGVzY3JpcHRpb25bXTtcclxuICAgIHJldDogUmV0dXJuVHlwZURlc2NyaXB0aW9uO1xyXG59XHJcblxyXG50eXBlIEFyZ3VtZW50UmVzb2x2ZXIgPSAocm93OiBudW1iZXIpID0+IGFueSB8IG51bGw7XHJcblxyXG4vLyB0aGlzIGlzIGNhbGxlZCBmcm9tIHdlYmRiLmNjL0NhbGxTY2FsYXJVREZGdW5jdGlvbiwgY2hhbmdlcyBoZXJlIG5lZWQgdG8gYmUgbWF0Y2hlZCB0aGVyZVxyXG5leHBvcnQgZnVuY3Rpb24gY2FsbFNjYWxhclVERihcclxuICAgIHJ1bnRpbWU6IER1Y2tEQlJ1bnRpbWUsXHJcbiAgICBtb2Q6IER1Y2tEQk1vZHVsZSxcclxuICAgIHJlc3BvbnNlOiBudW1iZXIsXHJcbiAgICBmdW5jSWQ6IG51bWJlcixcclxuICAgIGRlc2NQdHI6IG51bWJlcixcclxuICAgIGRlc2NTaXplOiBudW1iZXIsXHJcbiAgICBwdHJzUHRyOiBudW1iZXIsXHJcbiAgICBwdHJzU2l6ZTogbnVtYmVyLFxyXG4pIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgdWRmID0gcnVudGltZS5fdWRmRnVuY3Rpb25zLmdldChmdW5jSWQpO1xyXG4gICAgICAgIGlmICghdWRmKSB7XHJcbiAgICAgICAgICAgIHN0b3JlRXJyb3IobW9kLCByZXNwb25zZSwgJ1Vua25vd24gVURGIHdpdGggaWQ6ICcgKyBmdW5jSWQpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJhd0Rlc2MgPSBURVhUX0RFQ09ERVIuZGVjb2RlKG1vZC5IRUFQVTguc3ViYXJyYXkoZGVzY1B0ciwgZGVzY1B0ciArIGRlc2NTaXplKSk7XHJcbiAgICAgICAgY29uc3QgZGVzYyA9IEpTT04ucGFyc2UocmF3RGVzYykgYXMgU2NoZW1hRGVzY3JpcHRpb247XHJcbiAgICAgICAgY29uc3QgcHRycyA9IHB0clRvRmxvYXQ2NEFycmF5KG1vZCwgcHRyc1B0ciwgcHRyc1NpemUgLyA4KTtcclxuXHJcbiAgICAgICAgY29uc3QgYnVpbGRSZXNvbHZlciA9IChhcmc6IEFyZ3VtZW50VHlwZURlc2NyaXB0aW9uKTogQXJndW1lbnRSZXNvbHZlciA9PiB7XHJcbiAgICAgICAgICAgIGxldCB2YWxpZGl0eTogVWludDhBcnJheSB8IG51bGwgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoYXJnLnZhbGlkaXR5QnVmZmVyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhbGlkaXR5ID0gcHRyVG9VaW50OEFycmF5KG1vZCwgcHRyc1thcmcudmFsaWRpdHlCdWZmZXJdIGFzIG51bWJlciwgZGVzYy5yb3dzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzd2l0Y2ggKGFyZy5waHlzaWNhbFR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1ZBUkNIQVInOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZy5kYXRhQnVmZmVyID09PSBudWxsIHx8IGFyZy5kYXRhQnVmZmVyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYWxmb3JtZWQgZGF0YSB2aWV3LCBleHBlY3RlZCBkYXRhIGJ1ZmZlciBmb3IgVkFSQ0hBUiBhcmd1bWVudCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJnLmxlbmd0aEJ1ZmZlciA9PT0gbnVsbCB8fCBhcmcubGVuZ3RoQnVmZmVyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYWxmb3JtZWQgZGF0YSB2aWV3LCBleHBlY3RlZCBkYXRhIGxlbmd0aCBidWZmZXIgZm9yIFZBUkNIQVIgYXJndW1lbnQnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmF3ID0gcHRyVG9BcnJheShtb2QsIHB0cnNbYXJnLmRhdGFCdWZmZXJdIGFzIG51bWJlciwgYXJnLnBoeXNpY2FsVHlwZSwgZGVzYy5yb3dzKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmdzOiAoc3RyaW5nIHwgbnVsbClbXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmluZ0xlbmd0aHMgPSBwdHJUb0Zsb2F0NjRBcnJheShtb2QsIHB0cnNbYXJnLmxlbmd0aEJ1ZmZlcl0gYXMgbnVtYmVyLCBkZXNjLnJvd3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZGVzYy5yb3dzOyArK2opIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkaXR5ICE9IG51bGwgJiYgIXZhbGlkaXR5W2pdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdzLnB1c2gobnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWJhcnJheSA9IG1vZC5IRUFQVTguc3ViYXJyYXkoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdbal0gYXMgbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHJhd1tqXSBhcyBudW1iZXIpICsgKHN0cmluZ0xlbmd0aHNbal0gYXMgbnVtYmVyKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyID0gVEVYVF9ERUNPREVSLmRlY29kZShzdWJhcnJheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ3MucHVzaChzdHIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHJvdzogbnVtYmVyKSA9PiBzdHJpbmdzW3Jvd107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlICdTVFJVQ1QnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wOiBhbnkgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZHJlbjogQXJndW1lbnRSZXNvbHZlcltdID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAoYXJnLmNoaWxkcmVuPy5sZW5ndGggfHwgMCk7ICsraikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyID0gYXJnLmNoaWxkcmVuIVtqXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBidWlsZFJlc29sdmVyKGF0dHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKChyb3c6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wW2F0dHIubmFtZSFdID0gY2hpbGQocm93KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZGl0eSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAocm93OiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdmFsaWRpdHkhW3Jvd10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcmVzb2x2ZXIgb2YgY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlcihyb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRtcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHJvdzogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJlc29sdmVyIG9mIGNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZXIocm93KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0bXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmcuZGF0YUJ1ZmZlciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtYWxmb3JtZWQgZGF0YSB2aWV3LCBleHBlY3RlZCBkYXRhIGJ1ZmZlciBmb3IgYXJndW1lbnQgb2YgdHlwZTogJyArIGFyZy5waHlzaWNhbFR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBwdHJUb0FycmF5KG1vZCwgcHRyc1thcmcuZGF0YUJ1ZmZlcl0gYXMgbnVtYmVyLCBhcmcucGh5c2ljYWxUeXBlLCBkZXNjLnJvd3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZGl0eSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAocm93OiBudW1iZXIpID0+ICghdmFsaWRpdHkhW3Jvd10gPyBudWxsIDogZGF0YVtyb3ddKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHJvdzogbnVtYmVyKSA9PiBkYXRhW3Jvd107XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gVHJhbnNsYXRlIGFyZ3VtZW50IGRhdGFcclxuICAgICAgICBjb25zdCBhcmdSZXNvbHZlcnMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlc2MuYXJncy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBhcmdSZXNvbHZlcnMucHVzaChidWlsZFJlc29sdmVyKGRlc2MuYXJnc1tpXSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUHJlcGFyZSByZXN1bHQgYnVmZmVyc1xyXG4gICAgICAgIC8vIFRPRE86IHdlIHByb2JhYmx5IGRvIG5vdCB3YW50IHRvIHJlY3JlYXRlIHRob3NlIGV2ZXJ5IHRpbWVcclxuICAgICAgICBjb25zdCByZXN1bHREYXRhTGVuID0gZGVzYy5yb3dzICogZ2V0VHlwZVNpemUoZGVzYy5yZXQucGh5c2ljYWxUeXBlKTtcclxuICAgICAgICBjb25zdCByZXN1bHREYXRhUHRyID0gbW9kLl9tYWxsb2MocmVzdWx0RGF0YUxlbik7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0RGF0YSA9IHB0clRvQXJyYXkobW9kLCByZXN1bHREYXRhUHRyLCBkZXNjLnJldC5waHlzaWNhbFR5cGUsIGRlc2Mucm93cyk7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0VmFsaWRpdHlQdHIgPSBtb2QuX21hbGxvYyhkZXNjLnJvd3MpO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdFZhbGlkaXR5ID0gcHRyVG9VaW50OEFycmF5KG1vZCwgcmVzdWx0VmFsaWRpdHlQdHIsIGRlc2Mucm93cyk7XHJcbiAgICAgICAgaWYgKHJlc3VsdERhdGEubGVuZ3RoID09IDAgfHwgcmVzdWx0VmFsaWRpdHkubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgc3RvcmVFcnJvcihtb2QsIHJlc3BvbnNlLCBcIkNhbid0IGNyZWF0ZSBwaHlzaWNhbCBhcnJheXMgZm9yIHJlc3VsdFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcmF3UmVzdWx0RGF0YSA9IHJlc3VsdERhdGE7XHJcbiAgICAgICAgaWYgKGRlc2MucmV0LnBoeXNpY2FsVHlwZSA9PSAnVkFSQ0hBUicpIHtcclxuICAgICAgICAgICAgcmF3UmVzdWx0RGF0YSA9IG5ldyBBcnJheTxzdHJpbmcgfCB1bmRlZmluZWQgfCBudWxsPihkZXNjLnJvd3MpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2FsbCB0aGUgZnVuY3Rpb25cclxuICAgICAgICBjb25zdCBhcmdzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXNjLmFyZ3MubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgYXJncy5wdXNoKG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlc2Mucm93czsgKytpKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZGVzYy5hcmdzLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICBhcmdzW2pdID0gYXJnUmVzb2x2ZXJzW2pdKGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IHVkZi5mdW5jKC4uLmFyZ3MpO1xyXG4gICAgICAgICAgICByYXdSZXN1bHREYXRhW2ldID0gcmVzO1xyXG4gICAgICAgICAgICByZXN1bHRWYWxpZGl0eVtpXSA9IHJlcyA9PT0gdW5kZWZpbmVkIHx8IHJlcyA9PT0gbnVsbCA/IDAgOiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRW5jb2RlIHJldHVybiB2YWx1ZXNcclxuICAgICAgICBsZXQgcmVzdWx0TGVuZ3Roc1B0ciA9IDA7XHJcbiAgICAgICAgc3dpdGNoIChkZXNjLnJldC5waHlzaWNhbFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnVkFSQ0hBUic6IHtcclxuICAgICAgICAgICAgICAgIC8vIEFsbG9jYXRlIHJlc3VsdCBidWZmZXJzXHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHREYXRhVVRGOCA9IG5ldyBBcnJheTxVaW50OEFycmF5PigwKTsgLy8gY291Z2hcclxuICAgICAgICAgICAgICAgIHJlc3VsdExlbmd0aHNQdHIgPSBtb2QuX21hbGxvYyhkZXNjLnJvd3MgKiBnZXRUeXBlU2l6ZSgnRE9VQkxFJykpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0TGVuZ3RocyA9IHB0clRvRmxvYXQ2NEFycmF5KG1vZCwgcmVzdWx0TGVuZ3Roc1B0ciwgZGVzYy5yb3dzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBXZSBuZWVkIHR3byBsb29wcyB0byBmaWd1cmUgb3V0IHRoZSB0b3RhbCBsZW5ndGggYnV0IG1heWJlIHdlIGNhbiBhdm9pZCB0aGUgZG91YmxlIGFsbG9jYXRpb25cclxuICAgICAgICAgICAgICAgIGxldCB0b3RhbExlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCBkZXNjLnJvd3M7ICsrcm93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXRmOCA9IFRFWFRfRU5DT0RFUi5lbmNvZGUoKHJhd1Jlc3VsdERhdGEgYXMgKHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQpW10pW3Jvd10gfHwgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdERhdGFVVEY4LnB1c2godXRmOCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0TGVuZ3Roc1tyb3ddID0gdXRmOC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdG90YWxMZW5ndGggKz0gdXRmOC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gV2UgbWFsbG9jIGEgYnVmZmVyIGZvciB0aGUgc3RyaW5ncyB0byBsaXZlIGluIGZvciBub3dcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdFN0cmluZ1B0ciA9IG1vZC5fbWFsbG9jKHRvdGFsTGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdFN0cmluZ0J1ZiA9IG1vZC5IRUFQVTguc3ViYXJyYXkocmVzdWx0U3RyaW5nUHRyLCByZXN1bHRTdHJpbmdQdHIgKyB0b3RhbExlbmd0aCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gTm93IGNvcHkgYWxsIHRoZSBzdHJpbmdzIHRvIHRoZSBuZXcgYnVmZmVyIGJhY2sgdG8gYmFja1xyXG4gICAgICAgICAgICAgICAgbGV0IHdyaXRlck9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCBkZXNjLnJvd3M7ICsrcm93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0RGF0YVtyb3ddID0gd3JpdGVyT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdFVURjggPSByZXN1bHREYXRhVVRGOFtyb3ddO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdyaXRlciA9IHJlc3VsdFN0cmluZ0J1Zi5zdWJhcnJheSh3cml0ZXJPZmZzZXQsIHdyaXRlck9mZnNldCArIHJlc3VsdFVURjgubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICB3cml0ZXIuc2V0KHJlc3VsdFVURjgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlck9mZnNldCArPSByZXN1bHRVVEY4Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTmVlZCB0byBzdG9yZSB0aHJlZSBwb2ludGVycywgZGF0YSwgdmFsaWRpdHkgYW5kIGxlbmd0aFxyXG4gICAgICAgIGNvbnN0IHJldExlbiA9IDMgKiA4O1xyXG4gICAgICAgIGNvbnN0IHJldFB0ciA9IG1vZC5fbWFsbG9jKHJldExlbik7XHJcbiAgICAgICAgY29uc3QgcmV0QnVmZmVyID0gcHRyVG9GbG9hdDY0QXJyYXkobW9kLCByZXRQdHIsIDMpO1xyXG4gICAgICAgIHJldEJ1ZmZlclswXSA9IHJlc3VsdERhdGFQdHI7XHJcbiAgICAgICAgcmV0QnVmZmVyWzFdID0gcmVzdWx0VmFsaWRpdHlQdHI7XHJcbiAgICAgICAgcmV0QnVmZmVyWzJdID0gcmVzdWx0TGVuZ3Roc1B0cjtcclxuXHJcbiAgICAgICAgLy8gUGFjayByZXNwb25zZVxyXG4gICAgICAgIG1vZC5IRUFQRjY0WyhyZXNwb25zZSA+PiAzKSArIDBdID0gMDtcclxuICAgICAgICBtb2QuSEVBUEY2NFsocmVzcG9uc2UgPj4gMykgKyAxXSA9IHJldFB0cjtcclxuICAgICAgICBtb2QuSEVBUEY2NFsocmVzcG9uc2UgPj4gMykgKyAyXSA9IDA7XHJcbiAgICB9IGNhdGNoIChlOiBhbnkpIHtcclxuICAgICAgICBzdG9yZUVycm9yKG1vZCwgcmVzcG9uc2UsIGUudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcbn1cclxuIiwgImltcG9ydCB7IER1Y2tEQk1vZHVsZSB9IGZyb20gJy4vZHVja2RiX21vZHVsZSc7XHJcbmltcG9ydCB7IFVERkZ1bmN0aW9uIH0gZnJvbSAnLi91ZGZfZnVuY3Rpb24nO1xyXG5pbXBvcnQgKiBhcyB1ZGZfcnQgZnJvbSAnLi91ZGZfcnVudGltZSc7XHJcblxyXG4vKiogV3JhcHBlciBmb3IgVGV4dERlY29kZXIgdG8gc3VwcG9ydCBzaGFyZWQgYXJyYXkgYnVmZmVycyAqL1xyXG5mdW5jdGlvbiBUZXh0RGVjb2RlcldyYXBwZXIoKTogKGlucHV0PzogQnVmZmVyU291cmNlKSA9PiBzdHJpbmcge1xyXG4gICAgY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xyXG4gICAgcmV0dXJuIChkYXRhOiBhbnkpID0+IHtcclxuICAgICAgICBpZiAodHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiBkYXRhLmJ1ZmZlciBpbnN0YW5jZW9mIFNoYXJlZEFycmF5QnVmZmVyKSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSBuZXcgVWludDhBcnJheShkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRlY29kZXIuZGVjb2RlKGRhdGEpO1xyXG4gICAgfTtcclxufVxyXG4vKiogSGVscGVyIHRvIGRlY29kZSB0ZXh0ICovXHJcbmV4cG9ydCBjb25zdCBkZWNvZGVUZXh0ID0gVGV4dERlY29kZXJXcmFwcGVyKCk7XHJcblxyXG4vKiogQ29weSBhIGJ1ZmZlciAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZmFpbFdpdGgobW9kOiBEdWNrREJNb2R1bGUsIG1zZzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBjb25zb2xlLmVycm9yKGBGQUlMIFdJVEg6ICR7bXNnfWApO1xyXG4gICAgbW9kLmNjYWxsKCdkdWNrZGJfd2ViX2ZhaWxfd2l0aCcsIG51bGwsIFsnc3RyaW5nJ10sIFttc2ddKTtcclxufVxyXG5cclxuLyoqIENvcHkgYSBidWZmZXIgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvcHlCdWZmZXIobW9kOiBEdWNrREJNb2R1bGUsIGJlZ2luOiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKTogVWludDhBcnJheSB7XHJcbiAgICBjb25zdCBidWZmZXIgPSBtb2QuSEVBUFU4LnN1YmFycmF5KGJlZ2luLCBiZWdpbiArIGxlbmd0aCk7XHJcbiAgICBjb25zdCBjb3B5ID0gbmV3IFVpbnQ4QXJyYXkobmV3IEFycmF5QnVmZmVyKGJ1ZmZlci5ieXRlTGVuZ3RoKSk7XHJcbiAgICBjb3B5LnNldChidWZmZXIpO1xyXG4gICAgcmV0dXJuIGNvcHk7XHJcbn1cclxuXHJcbi8qKiBEZWNvZGUgYSBzdHJpbmcgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRTdHJpbmcobW9kOiBEdWNrREJNb2R1bGUsIGJlZ2luOiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBkZWNvZGVUZXh0KG1vZC5IRUFQVTguc3ViYXJyYXkoYmVnaW4sIGJlZ2luICsgbGVuZ3RoKSk7XHJcbn1cclxuXHJcbi8qKiBUaGUgZGF0YSBwcm90b2NvbCAqL1xyXG5leHBvcnQgZW51bSBEdWNrREJEYXRhUHJvdG9jb2wge1xyXG4gICAgQlVGRkVSID0gMCxcclxuICAgIE5PREVfRlMgPSAxLFxyXG4gICAgQlJPV1NFUl9GSUxFUkVBREVSID0gMixcclxuICAgIEJST1dTRVJfRlNBQ0NFU1MgPSAzLFxyXG4gICAgSFRUUCA9IDQsXHJcbiAgICBTMyA9IDUsXHJcbn1cclxuXHJcbi8qKiBGaWxlIGZsYWdzIGZvciBvcGVuaW5nIGZpbGVzKi9cclxuZXhwb3J0IGVudW0gRmlsZUZsYWdzIHtcclxuICAgIC8vISBPcGVuIGZpbGUgd2l0aCByZWFkIGFjY2Vzc1xyXG4gICAgRklMRV9GTEFHU19SRUFEID0gMSA8PCAwLFxyXG4gICAgLy8hIE9wZW4gZmlsZSB3aXRoIHdyaXRlIGFjY2Vzc1xyXG4gICAgRklMRV9GTEFHU19XUklURSA9IDEgPDwgMSxcclxuICAgIC8vISBVc2UgZGlyZWN0IElPIHdoZW4gcmVhZGluZy93cml0aW5nIHRvIHRoZSBmaWxlXHJcbiAgICBGSUxFX0ZMQUdTX0RJUkVDVF9JTyA9IDEgPDwgMixcclxuICAgIC8vISBDcmVhdGUgZmlsZSBpZiBub3QgZXhpc3RzLCBjYW4gb25seSBiZSB1c2VkIHRvZ2V0aGVyIHdpdGggV1JJVEVcclxuICAgIEZJTEVfRkxBR1NfRklMRV9DUkVBVEUgPSAxIDw8IDMsXHJcbiAgICAvLyEgQWx3YXlzIGNyZWF0ZSBhIG5ldyBmaWxlLiBJZiBhIGZpbGUgZXhpc3RzLCB0aGUgZmlsZSBpcyB0cnVuY2F0ZWQuIENhbm5vdCBiZSB1c2VkIHRvZ2V0aGVyIHdpdGggQ1JFQVRFLlxyXG4gICAgRklMRV9GTEFHU19GSUxFX0NSRUFURV9ORVcgPSAxIDw8IDQsXHJcbiAgICAvLyEgT3BlbiBmaWxlIGluIGFwcGVuZCBtb2RlXHJcbiAgICBGSUxFX0ZMQUdTX0FQUEVORCA9IDEgPDwgNSxcclxufVxyXG5cclxuLyoqIENvbmZpZ3VyYXRpb24gZm9yIHRoZSBBV1MgUzMgRmlsZXN5c3RlbSAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFMzQ29uZmlnIHtcclxuICAgIHJlZ2lvbj86IHN0cmluZztcclxuICAgIGVuZHBvaW50Pzogc3RyaW5nO1xyXG4gICAgYWNjZXNzS2V5SWQ/OiBzdHJpbmc7XHJcbiAgICBzZWNyZXRBY2Nlc3NLZXk/OiBzdHJpbmc7XHJcbiAgICBzZXNzaW9uVG9rZW4/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKiBBbiBpbmZvIGZvciBhIGZpbGUgcmVnaXN0ZXJlZCB3aXRoIER1Y2tEQiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIER1Y2tEQkZpbGVJbmZvIHtcclxuICAgIGNhY2hlRXBvY2g6IG51bWJlcjtcclxuICAgIGZpbGVJZDogbnVtYmVyO1xyXG4gICAgZmlsZU5hbWU6IHN0cmluZztcclxuICAgIGRhdGFQcm90b2NvbDogRHVja0RCRGF0YVByb3RvY29sO1xyXG4gICAgZGF0YVVybDogc3RyaW5nIHwgbnVsbDtcclxuICAgIGFsbG93RnVsbEh0dHBSZWFkcz86IGJvb2xlYW47XHJcbiAgICBzM0NvbmZpZz86IFMzQ29uZmlnO1xyXG59XHJcblxyXG4vKiogR2xvYmFsIGluZm8gZm9yIGFsbCBmaWxlcyByZWdpc3RlcmVkIHdpdGggRHVja0RCICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRHVja0RCR2xvYmFsRmlsZUluZm8ge1xyXG4gICAgY2FjaGVFcG9jaDogbnVtYmVyO1xyXG4gICAgYWxsb3dGdWxsSHR0cFJlYWRzPzogYm9vbGVhbjtcclxuICAgIHMzQ29uZmlnPzogUzNDb25maWc7XHJcbn1cclxuXHJcbi8qKiBDYWxsIGEgZnVuY3Rpb24gd2l0aCBwYWNrZWQgcmVzcG9uc2UgYnVmZmVyICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxsU1JldChcclxuICAgIG1vZDogRHVja0RCTW9kdWxlLFxyXG4gICAgZnVuY05hbWU6IHN0cmluZyxcclxuICAgIGFyZ1R5cGVzOiBBcnJheTxFbXNjcmlwdGVuLkpTVHlwZT4sXHJcbiAgICBhcmdzOiBBcnJheTxhbnk+LFxyXG4pOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0ge1xyXG4gICAgY29uc3Qgc3RhY2tQb2ludGVyID0gbW9kLnN0YWNrU2F2ZSgpO1xyXG5cclxuICAgIC8vIEFsbG9jYXRlIHRoZSBwYWNrZWQgcmVzcG9uc2UgYnVmZmVyXHJcbiAgICBjb25zdCByZXNwb25zZSA9IG1vZC5zdGFja0FsbG9jKDMgKiA4KTtcclxuICAgIGFyZ1R5cGVzLnVuc2hpZnQoJ251bWJlcicpO1xyXG4gICAgYXJncy51bnNoaWZ0KHJlc3BvbnNlKTtcclxuXHJcbiAgICAvLyBEbyB0aGUgY2FsbFxyXG4gICAgbW9kLmNjYWxsKGZ1bmNOYW1lLCBudWxsLCBhcmdUeXBlcywgYXJncyk7XHJcblxyXG4gICAgLy8gUmVhZCB0aGUgcmVzcG9uc2VcclxuICAgIGNvbnN0IHN0YXR1cyA9IG1vZC5IRUFQRjY0WyhyZXNwb25zZSA+PiAzKSArIDBdO1xyXG4gICAgY29uc3QgZGF0YSA9IG1vZC5IRUFQRjY0WyhyZXNwb25zZSA+PiAzKSArIDFdO1xyXG4gICAgY29uc3QgZGF0YVNpemUgPSBtb2QuSEVBUEY2NFsocmVzcG9uc2UgPj4gMykgKyAyXTtcclxuXHJcbiAgICAvLyBSZXN0b3JlIHRoZSBzdGFja1xyXG4gICAgbW9kLnN0YWNrUmVzdG9yZShzdGFja1BvaW50ZXIpO1xyXG4gICAgcmV0dXJuIFtzdGF0dXMsIGRhdGEsIGRhdGFTaXplXTtcclxufVxyXG5cclxuLyoqIERyb3AgcmVzcG9uc2UgYnVmZmVycyAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZHJvcFJlc3BvbnNlQnVmZmVycyhtb2Q6IER1Y2tEQk1vZHVsZSk6IHZvaWQge1xyXG4gICAgbW9kLmNjYWxsKCdkdWNrZGJfd2ViX2NsZWFyX3Jlc3BvbnNlJywgbnVsbCwgW10sIFtdKTtcclxufVxyXG5cclxuLyoqIFRoZSBkdWNrZGIgcnVudGltZSAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIER1Y2tEQlJ1bnRpbWUge1xyXG4gICAgX2ZpbGVzPzogTWFwPHN0cmluZywgYW55PjtcclxuICAgIF91ZGZGdW5jdGlvbnM6IE1hcDxudW1iZXIsIFVERkZ1bmN0aW9uPjtcclxuXHJcbiAgICAvLyBUZXN0IGEgcGxhdGZvcm0gZmVhdHVyZVxyXG4gICAgdGVzdFBsYXRmb3JtRmVhdHVyZShtb2Q6IER1Y2tEQk1vZHVsZSwgZmVhdHVyZTogbnVtYmVyKTogYm9vbGVhbjtcclxuXHJcbiAgICAvLyBGaWxlIEFQSXMgd2l0aCBkZWRpY2F0ZWQgZmlsZSBpZGVudGlmaWVyXHJcbiAgICBnZXREZWZhdWx0RGF0YVByb3RvY29sKG1vZDogRHVja0RCTW9kdWxlKTogbnVtYmVyO1xyXG4gICAgb3BlbkZpbGUobW9kOiBEdWNrREJNb2R1bGUsIGZpbGVJZDogbnVtYmVyLCBmbGFnczogRmlsZUZsYWdzKTogdm9pZDtcclxuICAgIHN5bmNGaWxlKG1vZDogRHVja0RCTW9kdWxlLCBmaWxlSWQ6IG51bWJlcik6IHZvaWQ7XHJcbiAgICBjbG9zZUZpbGUobW9kOiBEdWNrREJNb2R1bGUsIGZpbGVJZDogbnVtYmVyKTogdm9pZDtcclxuICAgIGdldExhc3RGaWxlTW9kaWZpY2F0aW9uVGltZShtb2Q6IER1Y2tEQk1vZHVsZSwgZmlsZUlkOiBudW1iZXIpOiBudW1iZXI7XHJcbiAgICB0cnVuY2F0ZUZpbGUobW9kOiBEdWNrREJNb2R1bGUsIGZpbGVJZDogbnVtYmVyLCBuZXdTaXplOiBudW1iZXIpOiB2b2lkO1xyXG4gICAgcmVhZEZpbGUobW9kOiBEdWNrREJNb2R1bGUsIGZpbGVJZDogbnVtYmVyLCBidWZmZXI6IG51bWJlciwgYnl0ZXM6IG51bWJlciwgbG9jYXRpb246IG51bWJlcik6IG51bWJlcjtcclxuICAgIHdyaXRlRmlsZShtb2Q6IER1Y2tEQk1vZHVsZSwgZmlsZUlkOiBudW1iZXIsIGJ1ZmZlcjogbnVtYmVyLCBieXRlczogbnVtYmVyLCBsb2NhdGlvbjogbnVtYmVyKTogbnVtYmVyO1xyXG5cclxuICAgIC8vIEZpbGUgQVBJcyB3aXRoIHBhdGggcGFyYW1ldGVyXHJcbiAgICByZW1vdmVEaXJlY3RvcnkobW9kOiBEdWNrREJNb2R1bGUsIHBhdGhQdHI6IG51bWJlciwgcGF0aExlbjogbnVtYmVyKTogdm9pZDtcclxuICAgIGNoZWNrRGlyZWN0b3J5KG1vZDogRHVja0RCTW9kdWxlLCBwYXRoUHRyOiBudW1iZXIsIHBhdGhMZW46IG51bWJlcik6IGJvb2xlYW47XHJcbiAgICBjcmVhdGVEaXJlY3RvcnkobW9kOiBEdWNrREJNb2R1bGUsIHBhdGhQdHI6IG51bWJlciwgcGF0aExlbjogbnVtYmVyKTogdm9pZDtcclxuICAgIGxpc3REaXJlY3RvcnlFbnRyaWVzKG1vZDogRHVja0RCTW9kdWxlLCBwYXRoUHRyOiBudW1iZXIsIHBhdGhMZW46IG51bWJlcik6IGJvb2xlYW47XHJcbiAgICBnbG9iKG1vZDogRHVja0RCTW9kdWxlLCBwYXRoUHRyOiBudW1iZXIsIHBhdGhMZW46IG51bWJlcik6IHZvaWQ7XHJcbiAgICBtb3ZlRmlsZShtb2Q6IER1Y2tEQk1vZHVsZSwgZnJvbVB0cjogbnVtYmVyLCBmcm9tTGVuOiBudW1iZXIsIHRvUHRyOiBudW1iZXIsIHRvTGVuOiBudW1iZXIpOiB2b2lkO1xyXG4gICAgY2hlY2tGaWxlKG1vZDogRHVja0RCTW9kdWxlLCBwYXRoUHRyOiBudW1iZXIsIHBhdGhMZW46IG51bWJlcik6IGJvb2xlYW47XHJcbiAgICByZW1vdmVGaWxlKG1vZDogRHVja0RCTW9kdWxlLCBwYXRoUHRyOiBudW1iZXIsIHBhdGhMZW46IG51bWJlcik6IHZvaWQ7XHJcblxyXG4gICAgLy8gQ2FsbCBhIHNjYWxhciBVREYgZnVuY3Rpb25cclxuICAgIGNhbGxTY2FsYXJVREYoXHJcbiAgICAgICAgbW9kOiBEdWNrREJNb2R1bGUsXHJcbiAgICAgICAgcmVzcG9uc2U6IG51bWJlcixcclxuICAgICAgICBmdW5jSWQ6IG51bWJlcixcclxuICAgICAgICBkZXNjUHRyOiBudW1iZXIsXHJcbiAgICAgICAgZGVzY1NpemU6IG51bWJlcixcclxuICAgICAgICBwdHJzUHRyOiBudW1iZXIsXHJcbiAgICAgICAgcHRyc1NpemU6IG51bWJlcixcclxuICAgICk6IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1JVTlRJTUU6IER1Y2tEQlJ1bnRpbWUgPSB7XHJcbiAgICBfdWRmRnVuY3Rpb25zOiBuZXcgTWFwKCksXHJcblxyXG4gICAgdGVzdFBsYXRmb3JtRmVhdHVyZTogKF9tb2Q6IER1Y2tEQk1vZHVsZSwgX2ZlYXR1cmU6IG51bWJlcik6IGJvb2xlYW4gPT4gZmFsc2UsXHJcbiAgICBnZXREZWZhdWx0RGF0YVByb3RvY29sOiAoX21vZDogRHVja0RCTW9kdWxlKTogbnVtYmVyID0+IER1Y2tEQkRhdGFQcm90b2NvbC5CVUZGRVIsXHJcbiAgICBvcGVuRmlsZTogKF9tb2Q6IER1Y2tEQk1vZHVsZSwgX2ZpbGVJZDogbnVtYmVyLCBmbGFnczogRmlsZUZsYWdzKTogdm9pZCA9PiB7fSxcclxuICAgIHN5bmNGaWxlOiAoX21vZDogRHVja0RCTW9kdWxlLCBfZmlsZUlkOiBudW1iZXIpOiB2b2lkID0+IHt9LFxyXG4gICAgY2xvc2VGaWxlOiAoX21vZDogRHVja0RCTW9kdWxlLCBfZmlsZUlkOiBudW1iZXIpOiB2b2lkID0+IHt9LFxyXG4gICAgZ2V0TGFzdEZpbGVNb2RpZmljYXRpb25UaW1lOiAoX21vZDogRHVja0RCTW9kdWxlLCBfZmlsZUlkOiBudW1iZXIpOiBudW1iZXIgPT4ge1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfSxcclxuICAgIHRydW5jYXRlRmlsZTogKF9tb2Q6IER1Y2tEQk1vZHVsZSwgX2ZpbGVJZDogbnVtYmVyLCBfbmV3U2l6ZTogbnVtYmVyKTogdm9pZCA9PiB7fSxcclxuICAgIHJlYWRGaWxlOiAoX21vZDogRHVja0RCTW9kdWxlLCBfZmlsZUlkOiBudW1iZXIsIF9idWZmZXI6IG51bWJlciwgX2J5dGVzOiBudW1iZXIsIF9sb2NhdGlvbjogbnVtYmVyKTogbnVtYmVyID0+IHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH0sXHJcbiAgICB3cml0ZUZpbGU6IChfbW9kOiBEdWNrREJNb2R1bGUsIF9maWxlSWQ6IG51bWJlciwgX2J1ZmZlcjogbnVtYmVyLCBfYnl0ZXM6IG51bWJlciwgX2xvY2F0aW9uOiBudW1iZXIpOiBudW1iZXIgPT4ge1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfSxcclxuXHJcbiAgICByZW1vdmVEaXJlY3Rvcnk6IChfbW9kOiBEdWNrREJNb2R1bGUsIF9wYXRoUHRyOiBudW1iZXIsIF9wYXRoTGVuOiBudW1iZXIpOiB2b2lkID0+IHt9LFxyXG4gICAgY2hlY2tEaXJlY3Rvcnk6IChfbW9kOiBEdWNrREJNb2R1bGUsIF9wYXRoUHRyOiBudW1iZXIsIF9wYXRoTGVuOiBudW1iZXIpOiBib29sZWFuID0+IHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgY3JlYXRlRGlyZWN0b3J5OiAoX21vZDogRHVja0RCTW9kdWxlLCBfcGF0aFB0cjogbnVtYmVyLCBfcGF0aExlbjogbnVtYmVyKTogdm9pZCA9PiB7fSxcclxuICAgIGxpc3REaXJlY3RvcnlFbnRyaWVzOiAoX21vZDogRHVja0RCTW9kdWxlLCBfcGF0aFB0cjogbnVtYmVyLCBfcGF0aExlbjogbnVtYmVyKTogYm9vbGVhbiA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGdsb2I6IChfbW9kOiBEdWNrREJNb2R1bGUsIF9wYXRoUHRyOiBudW1iZXIsIF9wYXRoTGVuOiBudW1iZXIpOiB2b2lkID0+IHt9LFxyXG4gICAgbW92ZUZpbGU6IChfbW9kOiBEdWNrREJNb2R1bGUsIF9mcm9tUHRyOiBudW1iZXIsIF9mcm9tTGVuOiBudW1iZXIsIF90b1B0cjogbnVtYmVyLCBfdG9MZW46IG51bWJlcik6IHZvaWQgPT4ge30sXHJcbiAgICBjaGVja0ZpbGU6IChfbW9kOiBEdWNrREJNb2R1bGUsIF9wYXRoUHRyOiBudW1iZXIsIF9wYXRoTGVuOiBudW1iZXIpOiBib29sZWFuID0+IHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlRmlsZTogKF9tb2Q6IER1Y2tEQk1vZHVsZSwgX3BhdGhQdHI6IG51bWJlciwgX3BhdGhMZW46IG51bWJlcik6IHZvaWQgPT4ge30sXHJcbiAgICBjYWxsU2NhbGFyVURGOiAoXHJcbiAgICAgICAgbW9kOiBEdWNrREJNb2R1bGUsXHJcbiAgICAgICAgcmVzcG9uc2U6IG51bWJlcixcclxuICAgICAgICBmdW5jSWQ6IG51bWJlcixcclxuICAgICAgICBkZXNjUHRyOiBudW1iZXIsXHJcbiAgICAgICAgZGVzY1NpemU6IG51bWJlcixcclxuICAgICAgICBwdHJzUHRyOiBudW1iZXIsXHJcbiAgICAgICAgcHRyc1NpemU6IG51bWJlcixcclxuICAgICk6IHZvaWQgPT4ge1xyXG4gICAgICAgIHVkZl9ydC5jYWxsU2NhbGFyVURGKERFRkFVTFRfUlVOVElNRSwgbW9kLCByZXNwb25zZSwgZnVuY0lkLCBkZXNjUHRyLCBkZXNjU2l6ZSwgcHRyc1B0ciwgcHRyc1NpemUpO1xyXG4gICAgfSxcclxufTtcclxuIiwgImV4cG9ydCBpbnRlcmZhY2UgRmlsZUJsb2NrU3RhdGlzdGljcyB7XHJcbiAgICAvKiogVGhlIGZpbGUgcmVhZHMgY29sZCAqL1xyXG4gICAgZmlsZV9yZWFkc19jb2xkOiBudW1iZXI7XHJcbiAgICAvKiogVGhlIGZpbGUgcmVhZHMgYWhlYWRzICovXHJcbiAgICBmaWxlX3JlYWRzX2FoZWFkOiBudW1iZXI7XHJcbiAgICAvKiogVGhlIGZpbGUgcmVhZHMgY2FjaGVkICovXHJcbiAgICBmaWxlX3JlYWRzX2NhY2hlZDogbnVtYmVyO1xyXG4gICAgLyoqIFRoZSBmaWxlIHdyaXRlcyAqL1xyXG4gICAgZmlsZV93cml0ZXM6IG51bWJlcjtcclxuICAgIC8qKiBUaGUgcGFnZSBhY2Nlc3NlcyAqL1xyXG4gICAgcGFnZV9hY2Nlc3NlczogbnVtYmVyO1xyXG4gICAgLyoqIFRoZSBwYWdlIGxvYWRzICovXHJcbiAgICBwYWdlX2xvYWRzOiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKiBUaGUgZmlsZSBibG9jayBzdGF0aXN0aWNzICovXHJcbmV4cG9ydCBjbGFzcyBGaWxlU3RhdGlzdGljcyB7XHJcbiAgICAvKiogVGhlIGNvbGQgZmlsZSByZWFkcyAqL1xyXG4gICAgcHVibGljIHRvdGFsRmlsZVJlYWRzQ29sZDogbnVtYmVyO1xyXG4gICAgLyoqIFRoZSBmaWxlIHJlYWRhaGVhZHMgKi9cclxuICAgIHB1YmxpYyB0b3RhbEZpbGVSZWFkc0FoZWFkOiBudW1iZXI7XHJcbiAgICAvKiogVGhlIGNhY2hlZCBmaWxlIHJlYWRzICovXHJcbiAgICBwdWJsaWMgdG90YWxGaWxlUmVhZHNDYWNoZWQ6IG51bWJlcjtcclxuICAgIC8qKiBUaGUgZmlsZSB3cml0ZXMgKi9cclxuICAgIHB1YmxpYyB0b3RhbEZpbGVXcml0ZXM6IG51bWJlcjtcclxuICAgIC8qKiBUaGUgcGFnZSBhY2Nlc3NlcyAqL1xyXG4gICAgcHVibGljIHRvdGFsUGFnZUFjY2Vzc2VzOiBudW1iZXI7XHJcbiAgICAvKiogVGhlIHBhZ2UgbG9hZHMgKi9cclxuICAgIHB1YmxpYyB0b3RhbFBhZ2VMb2FkczogbnVtYmVyO1xyXG4gICAgLyoqIFRoZSBibG9ja3MgKi9cclxuICAgIHB1YmxpYyBibG9ja1NpemU6IG51bWJlcjtcclxuICAgIC8qKiBUaGUgYmxvY2tzICovXHJcbiAgICBwdWJsaWMgYmxvY2tTdGF0czogVWludDhBcnJheTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih1OGFycmF5OiBVaW50OEFycmF5KSB7XHJcbiAgICAgICAgY29uc3QgZjY0ID0gbmV3IEZsb2F0NjRBcnJheSh1OGFycmF5LmJ1ZmZlciwgdThhcnJheS5ieXRlT2Zmc2V0LCB1OGFycmF5LmJ5dGVMZW5ndGggLyA4KTtcclxuICAgICAgICBjb25zdCBibG9ja3MgPSBuZXcgVWludDhBcnJheShuZXcgQXJyYXlCdWZmZXIodThhcnJheS5ieXRlTGVuZ3RoKSk7XHJcbiAgICAgICAgYmxvY2tzLnNldCh1OGFycmF5LnN1YmFycmF5KDcgKiA4KSk7XHJcbiAgICAgICAgdGhpcy50b3RhbEZpbGVSZWFkc0NvbGQgPSBmNjRbMF07XHJcbiAgICAgICAgdGhpcy50b3RhbEZpbGVSZWFkc0FoZWFkID0gZjY0WzFdO1xyXG4gICAgICAgIHRoaXMudG90YWxGaWxlUmVhZHNDYWNoZWQgPSBmNjRbMl07XHJcbiAgICAgICAgdGhpcy50b3RhbEZpbGVXcml0ZXMgPSBmNjRbM107XHJcbiAgICAgICAgdGhpcy50b3RhbFBhZ2VBY2Nlc3NlcyA9IGY2NFs0XTtcclxuICAgICAgICB0aGlzLnRvdGFsUGFnZUxvYWRzID0gZjY0WzVdO1xyXG4gICAgICAgIHRoaXMuYmxvY2tTaXplID0gZjY0WzZdO1xyXG4gICAgICAgIHRoaXMuYmxvY2tTdGF0cyA9IGJsb2NrcztcclxuICAgIH1cclxuXHJcbiAgICAvKiogVGhlIGJsb2NrIHN0YXRzICovXHJcbiAgICBwdWJsaWMgZ2V0QmxvY2tTdGF0cyhpbmRleDogbnVtYmVyLCBvdXQ/OiBGaWxlQmxvY2tTdGF0aXN0aWNzKTogRmlsZUJsb2NrU3RhdGlzdGljcyB7XHJcbiAgICAgICAgb3V0ID0gb3V0IHx8IHtcclxuICAgICAgICAgICAgZmlsZV9yZWFkc19jb2xkOiAwLFxyXG4gICAgICAgICAgICBmaWxlX3JlYWRzX2FoZWFkOiAwLFxyXG4gICAgICAgICAgICBmaWxlX3JlYWRzX2NhY2hlZDogMCxcclxuICAgICAgICAgICAgZmlsZV93cml0ZXM6IDAsXHJcbiAgICAgICAgICAgIHBhZ2VfYWNjZXNzZXM6IDAsXHJcbiAgICAgICAgICAgIHBhZ2VfbG9hZHM6IDAsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBvdXQuZmlsZV93cml0ZXMgPSB0aGlzLmJsb2NrU3RhdHNbaW5kZXggKiAzICsgMF0gJiAwYjExMTE7XHJcbiAgICAgICAgb3V0LmZpbGVfcmVhZHNfY29sZCA9IHRoaXMuYmxvY2tTdGF0c1tpbmRleCAqIDMgKyAwXSA+PiA0O1xyXG4gICAgICAgIG91dC5maWxlX3JlYWRzX2FoZWFkID0gdGhpcy5ibG9ja1N0YXRzW2luZGV4ICogMyArIDFdICYgMGIxMTExO1xyXG4gICAgICAgIG91dC5maWxlX3JlYWRzX2NhY2hlZCA9IHRoaXMuYmxvY2tTdGF0c1tpbmRleCAqIDMgKyAxXSA+PiA0O1xyXG4gICAgICAgIG91dC5wYWdlX2FjY2Vzc2VzID0gdGhpcy5ibG9ja1N0YXRzW2luZGV4ICogMyArIDFdICYgMGIxMTExO1xyXG4gICAgICAgIG91dC5wYWdlX2xvYWRzID0gdGhpcy5ibG9ja1N0YXRzW2luZGV4ICogMyArIDFdID4+IDQ7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxufVxyXG4iLCAiaW1wb3J0ICogYXMgYXJyb3cgZnJvbSAnYXBhY2hlLWFycm93JztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU1FMVHlwZSB7XHJcbiAgICAvLy8gVGhlIHNxbCB0eXBlXHJcbiAgICBzcWxUeXBlOiBzdHJpbmc7XHJcbiAgICAvLy8gSXMgbnVsbGFibGU/XHJcbiAgICBudWxsYWJsZT86IGJvb2xlYW47XHJcbiAgICAvLy8gRGVjaW1hbCBwcmVjaXNpb25cclxuICAgIHByZWNpc2lvbj86IG51bWJlcjtcclxuICAgIC8vLyBEZWNpbWFsIHNjYWxpbmdcclxuICAgIHNjYWxlPzogbnVtYmVyO1xyXG4gICAgLy8vIFRpbWV6b25lXHJcbiAgICB0aW1lem9uZT86IHN0cmluZztcclxuICAgIC8vLyBCeXRlIHdpZHRoIChGaXhlZFNpemVCaW5hcnkpXHJcbiAgICBieXRlV2lkdGg/OiBudW1iZXI7XHJcbiAgICAvLy8gS2V5IHR5cGVcclxuICAgIGtleVR5cGU/OiBTUUxUeXBlO1xyXG4gICAgLy8vIFZhbHVlIHR5cGVcclxuICAgIHZhbHVlVHlwZT86IFNRTFR5cGU7XHJcbiAgICAvLy8gRmllbGRzXHJcbiAgICBmaWVsZHM/OiBTUUxGaWVsZFtdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXJyb3dUb1NRTFR5cGUodHlwZTogYXJyb3cuRGF0YVR5cGUpOiBTUUxUeXBlIHtcclxuICAgIHN3aXRjaCAodHlwZS50eXBlSWQpIHtcclxuICAgICAgICBjYXNlIGFycm93LlR5cGUuQmluYXJ5OlxyXG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAnYmluYXJ5JyB9O1xyXG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5Cb29sOlxyXG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAnYm9vbCcgfTtcclxuICAgICAgICBjYXNlIGFycm93LlR5cGUuRGF0ZTpcclxuICAgICAgICAgICAgcmV0dXJuIHsgc3FsVHlwZTogJ2RhdGUnIH07XHJcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLkRhdGVEYXk6XHJcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICdkYXRlMzJbZF0nIH07XHJcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLkRhdGVNaWxsaXNlY29uZDpcclxuICAgICAgICAgICAgcmV0dXJuIHsgc3FsVHlwZTogJ2RhdGU2NFttc10nIH07XHJcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLkRlY2ltYWw6IHtcclxuICAgICAgICAgICAgY29uc3QgZGVjID0gdHlwZSBhcyBhcnJvdy5EZWNpbWFsO1xyXG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAnZGVjaW1hbCcsIHByZWNpc2lvbjogZGVjLnByZWNpc2lvbiwgc2NhbGU6IGRlYy5zY2FsZSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIGFycm93LlR5cGUuRmxvYXQ6XHJcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICdmbG9hdCcgfTtcclxuICAgICAgICBjYXNlIGFycm93LlR5cGUuRmxvYXQxNjpcclxuICAgICAgICAgICAgcmV0dXJuIHsgc3FsVHlwZTogJ2Zsb2F0MTYnIH07XHJcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLkZsb2F0MzI6XHJcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICdmbG9hdDMyJyB9O1xyXG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5GbG9hdDY0OlxyXG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAnZmxvYXQ2NCcgfTtcclxuICAgICAgICBjYXNlIGFycm93LlR5cGUuSW50OlxyXG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAnaW50MzInIH07XHJcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLkludDE2OlxyXG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAnaW50MTYnIH07XHJcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLkludDMyOlxyXG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAnaW50MzInIH07XHJcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLkludDY0OlxyXG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAnaW50NjQnIH07XHJcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLlVpbnQxNjpcclxuICAgICAgICAgICAgcmV0dXJuIHsgc3FsVHlwZTogJ3VpbnQxNicgfTtcclxuICAgICAgICBjYXNlIGFycm93LlR5cGUuVWludDMyOlxyXG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAndWludDMyJyB9O1xyXG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5VaW50NjQ6XHJcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICd1aW50NjQnIH07XHJcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLlVpbnQ4OlxyXG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAndWludDgnIH07XHJcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLkludGVydmFsRGF5VGltZTpcclxuICAgICAgICAgICAgcmV0dXJuIHsgc3FsVHlwZTogJ2ludGVydmFsW2R0XScgfTtcclxuICAgICAgICBjYXNlIGFycm93LlR5cGUuSW50ZXJ2YWxZZWFyTW9udGg6XHJcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICdpbnRlcnZhbFttXScgfTtcclxuICAgICAgICBjYXNlIGFycm93LlR5cGUuTGlzdDoge1xyXG4gICAgICAgICAgICBjb25zdCBsaXN0ID0gdHlwZSBhcyBhcnJvdy5MaXN0O1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc3FsVHlwZTogJ2xpc3QnLFxyXG4gICAgICAgICAgICAgICAgdmFsdWVUeXBlOiBhcnJvd1RvU1FMVHlwZShsaXN0LnZhbHVlVHlwZSksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5GaXhlZFNpemVCaW5hcnk6IHtcclxuICAgICAgICAgICAgY29uc3QgYmluID0gdHlwZSBhcyBhcnJvdy5GaXhlZFNpemVCaW5hcnk7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICdmaXhlZHNpemViaW5hcnknLCBieXRlV2lkdGg6IGJpbi5ieXRlV2lkdGggfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLk51bGw6XHJcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICdudWxsJyB9O1xyXG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5VdGY4OlxyXG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAndXRmOCcgfTtcclxuICAgICAgICBjYXNlIGFycm93LlR5cGUuU3RydWN0OiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0cnVjdF8gPSB0eXBlIGFzIGFycm93LlN0cnVjdDtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHNxbFR5cGU6ICdzdHJ1Y3QnLFxyXG4gICAgICAgICAgICAgICAgZmllbGRzOiBzdHJ1Y3RfLmNoaWxkcmVuLm1hcChjID0+IGFycm93VG9TUUxGaWVsZChjLm5hbWUsIGMudHlwZSkpLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIGFycm93LlR5cGUuTWFwOiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hcF8gPSB0eXBlIGFzIGFycm93Lk1hcF87XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzcWxUeXBlOiAnbWFwJyxcclxuICAgICAgICAgICAgICAgIGtleVR5cGU6IGFycm93VG9TUUxUeXBlKG1hcF8ua2V5VHlwZSksXHJcbiAgICAgICAgICAgICAgICB2YWx1ZVR5cGU6IGFycm93VG9TUUxUeXBlKG1hcF8udmFsdWVUeXBlKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLlRpbWU6XHJcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICd0aW1lW3NdJyB9O1xyXG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5UaW1lTWljcm9zZWNvbmQ6XHJcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICd0aW1lW3VzXScgfTtcclxuICAgICAgICBjYXNlIGFycm93LlR5cGUuVGltZU1pbGxpc2Vjb25kOlxyXG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAndGltZVttc10nIH07XHJcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLlRpbWVOYW5vc2Vjb25kOlxyXG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAndGltZVtuc10nIH07XHJcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLlRpbWVTZWNvbmQ6XHJcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICd0aW1lW3NdJyB9O1xyXG4gICAgICAgIGNhc2UgYXJyb3cuVHlwZS5UaW1lc3RhbXA6IHtcclxuICAgICAgICAgICAgY29uc3QgdHMgPSB0eXBlIGFzIGFycm93LlRpbWVzdGFtcDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgc3FsVHlwZTogJ3RpbWVzdGFtcCcsIHRpbWV6b25lOiB0cy50aW1lem9uZSB8fCB1bmRlZmluZWQgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLlRpbWVzdGFtcFNlY29uZDoge1xyXG4gICAgICAgICAgICBjb25zdCB0cyA9IHR5cGUgYXMgYXJyb3cuVGltZXN0YW1wU2Vjb25kO1xyXG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAndGltZXN0YW1wW3NdJywgdGltZXpvbmU6IHRzLnRpbWV6b25lIHx8IHVuZGVmaW5lZCB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIGFycm93LlR5cGUuVGltZXN0YW1wTWljcm9zZWNvbmQ6IHtcclxuICAgICAgICAgICAgY29uc3QgdHMgPSB0eXBlIGFzIGFycm93LlRpbWVzdGFtcE1pY3Jvc2Vjb25kO1xyXG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAndGltZXN0YW1wW3VzXScsIHRpbWV6b25lOiB0cy50aW1lem9uZSB8fCB1bmRlZmluZWQgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBhcnJvdy5UeXBlLlRpbWVzdGFtcE5hbm9zZWNvbmQ6IHtcclxuICAgICAgICAgICAgY29uc3QgdHMgPSB0eXBlIGFzIGFycm93LlRpbWVzdGFtcE5hbm9zZWNvbmQ7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHNxbFR5cGU6ICd0aW1lc3RhbXBbbnNdJywgdGltZXpvbmU6IHRzLnRpbWV6b25lIHx8IHVuZGVmaW5lZCB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIGFycm93LlR5cGUuVGltZXN0YW1wTWlsbGlzZWNvbmQ6IHtcclxuICAgICAgICAgICAgY29uc3QgdHMgPSB0eXBlIGFzIGFycm93LlRpbWVzdGFtcE1pbGxpc2Vjb25kO1xyXG4gICAgICAgICAgICByZXR1cm4geyBzcWxUeXBlOiAndGltZXN0YW1wW21zXScsIHRpbWV6b25lOiB0cy50aW1lem9uZSB8fCB1bmRlZmluZWQgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIGFycm93IHR5cGU6ICR7dHlwZS50b1N0cmluZygpfWApO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBTUUxGaWVsZCA9IFNRTFR5cGUgJiB7IG5hbWU6IHN0cmluZyB9O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFycm93VG9TUUxGaWVsZChuYW1lOiBzdHJpbmcsIHR5cGU6IGFycm93LkRhdGFUeXBlKTogU1FMRmllbGQge1xyXG4gICAgY29uc3QgdCA9IGFycm93VG9TUUxUeXBlKHR5cGUpIGFzIFNRTEZpZWxkO1xyXG4gICAgdC5uYW1lID0gbmFtZTtcclxuICAgIHJldHVybiB0O1xyXG59XHJcbiIsICJpbXBvcnQgeyBEdWNrREJNb2R1bGUsIFBUaHJlYWQgfSBmcm9tICcuL2R1Y2tkYl9tb2R1bGUnO1xyXG5pbXBvcnQgeyBEdWNrREJDb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2xvZyc7XHJcbmltcG9ydCB7IEluc3RhbnRpYXRpb25Qcm9ncmVzcyB9IGZyb20gJy4vcHJvZ3Jlc3MnO1xyXG5pbXBvcnQgeyBEdWNrREJCaW5kaW5ncyB9IGZyb20gJy4vYmluZGluZ3NfaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgRHVja0RCQ29ubmVjdGlvbiB9IGZyb20gJy4vY29ubmVjdGlvbic7XHJcbmltcG9ydCB7IFN0YXR1c0NvZGUgfSBmcm9tICcuLi9zdGF0dXMnO1xyXG5pbXBvcnQgeyBkcm9wUmVzcG9uc2VCdWZmZXJzLCBEdWNrREJSdW50aW1lLCByZWFkU3RyaW5nLCBjYWxsU1JldCwgY29weUJ1ZmZlciwgRHVja0RCRGF0YVByb3RvY29sIH0gZnJvbSAnLi9ydW50aW1lJztcclxuaW1wb3J0IHsgQ1NWSW5zZXJ0T3B0aW9ucywgSlNPTkluc2VydE9wdGlvbnMsIEFycm93SW5zZXJ0T3B0aW9ucyB9IGZyb20gJy4vaW5zZXJ0X29wdGlvbnMnO1xyXG5pbXBvcnQgeyBTY3JpcHRUb2tlbnMgfSBmcm9tICcuL3Rva2Vucyc7XHJcbmltcG9ydCB7IEZpbGVTdGF0aXN0aWNzIH0gZnJvbSAnLi9maWxlX3N0YXRzJztcclxuaW1wb3J0IHsgYXJyb3dUb1NRTEZpZWxkLCBhcnJvd1RvU1FMVHlwZSB9IGZyb20gJy4uL2pzb25fdHlwZWRlZic7XHJcbmltcG9ydCB7IFdlYkZpbGUgfSBmcm9tICcuL3dlYl9maWxlJztcclxuaW1wb3J0IHsgVURGRnVuY3Rpb24sIFVERkZ1bmN0aW9uRGVjbGFyYXRpb24gfSBmcm9tICcuL3VkZl9mdW5jdGlvbic7XHJcbmltcG9ydCAqIGFzIGFycm93IGZyb20gJ2FwYWNoZS1hcnJvdyc7XHJcblxyXG5jb25zdCBURVhUX0VOQ09ERVIgPSBuZXcgVGV4dEVuY29kZXIoKTtcclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby12YXJcclxuICAgIHZhciBEVUNLREJfUlVOVElNRTogYW55O1xyXG59XHJcblxyXG4vKiogQSBEdWNrREIgRmVhdHVyZSAqL1xyXG5leHBvcnQgZW51bSBEdWNrREJGZWF0dXJlIHtcclxuICAgIFdBU01fRVhDRVBUSU9OUyA9IDEgPDwgMCxcclxuICAgIFdBU01fVEhSRUFEUyA9IDEgPDwgMSxcclxuICAgIFdBU01fU0lNRCA9IDEgPDwgMixcclxuICAgIFdBU01fQlVMS19NRU1PUlkgPSAxIDw8IDMsXHJcbiAgICBFTUlUX0JJR0lOVCA9IDEgPDwgNCxcclxufVxyXG5cclxuLyoqIFRoZSBwcm94eSBmb3IgZWl0aGVyIHRoZSBicm93c2VyLSBvcmRlciBub2RlLWJhc2VkIER1Y2tEQiBBUEkgKi9cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIER1Y2tEQkJpbmRpbmdzQmFzZSBpbXBsZW1lbnRzIER1Y2tEQkJpbmRpbmdzIHtcclxuICAgIC8qKiBUaGUgbG9nZ2VyICovXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2xvZ2dlcjogTG9nZ2VyO1xyXG4gICAgLyoqIEJhY2tlbmQtZGVwZW5kZW50IG5hdGl2ZS1nbHVlIGNvZGUgZm9yIER1Y2tEQiAqL1xyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IF9ydW50aW1lOiBEdWNrREJSdW50aW1lO1xyXG4gICAgLyoqIFRoZSBpbnN0YW5jZSAqL1xyXG4gICAgcHJvdGVjdGVkIF9pbnN0YW5jZTogRHVja0RCTW9kdWxlIHwgbnVsbCA9IG51bGw7XHJcbiAgICAvKiogVGhlIGxvYWRpbmcgcHJvbWlzZSAqL1xyXG4gICAgcHJvdGVjdGVkIF9pbml0UHJvbWlzZTogUHJvbWlzZTx2b2lkPiB8IG51bGwgPSBudWxsO1xyXG4gICAgLyoqIFRoZSByZXNvbHZlciBmb3IgdGhlIG9wZW4gcHJvbWlzZSAoY2FsbGVkIGJ5IG9uUnVudGltZUluaXRpYWxpemVkKSAqL1xyXG4gICAgcHJvdGVjdGVkIF9pbml0UHJvbWlzZVJlc29sdmVyOiAoKSA9PiB2b2lkID0gKCkgPT4ge307XHJcbiAgICAvKiogVGhlIG5leHQgVURGIGlkICovXHJcbiAgICBwcm90ZWN0ZWQgX25leHRVREZJZDogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGxvZ2dlcjogTG9nZ2VyLCBydW50aW1lOiBEdWNrREJSdW50aW1lKSB7XHJcbiAgICAgICAgdGhpcy5fbG9nZ2VyID0gbG9nZ2VyO1xyXG4gICAgICAgIHRoaXMuX3J1bnRpbWUgPSBydW50aW1lO1xyXG4gICAgICAgIHRoaXMuX25leHRVREZJZCA9IDE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEdldCB0aGUgbG9nZ2VyICovXHJcbiAgICBwdWJsaWMgZ2V0IGxvZ2dlcigpOiBMb2dnZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9sb2dnZXI7XHJcbiAgICB9XHJcbiAgICAvKiogR2V0IHRoZSBpbnN0YW5jZSAqL1xyXG4gICAgcHVibGljIGdldCBtb2QoKTogRHVja0RCTW9kdWxlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2UhO1xyXG4gICAgfVxyXG4gICAgLyoqIEdldCB0aGUgaW5zdGFuY2UgKi9cclxuICAgIHB1YmxpYyBnZXQgcHRocmVhZCgpOiBQVGhyZWFkIHwgbnVsbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kLlBUaHJlYWQgfHwgbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogSW5zdGFudGlhdGUgdGhlIG1vZHVsZSAqL1xyXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGluc3RhbnRpYXRlSW1wbChtb2R1bGVPdmVycmlkZXM6IFBhcnRpYWw8RHVja0RCTW9kdWxlPik6IFByb21pc2U8RHVja0RCTW9kdWxlPjtcclxuICAgIC8qKiBJbnN0YW50aWF0ZSB0aGUgbW9kdWxlICovXHJcbiAgICBwcm90ZWN0ZWQgb25JbnN0YW50aWF0aW9uUHJvZ3Jlc3M6ICgocDogSW5zdGFudGlhdGlvblByb2dyZXNzKSA9PiB2b2lkKVtdID0gW107XHJcbiAgICAvKiogSW5zdGFudGlhdGUgdGhlIGRhdGFiYXNlICovXHJcbiAgICBwdWJsaWMgYXN5bmMgaW5zdGFudGlhdGUob25Qcm9ncmVzczogKHByb2dyZXNzOiBJbnN0YW50aWF0aW9uUHJvZ3Jlc3MpID0+IHZvaWQgPSBfID0+IHt9KTogUHJvbWlzZTx0aGlzPiB7XHJcbiAgICAgICAgLy8gQWxyZWFkeSBvcGVuZWQ/XHJcbiAgICAgICAgaWYgKHRoaXMuX2luc3RhbmNlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE9wZW4gaW4gcHJvZ3Jlc3M/XHJcbiAgICAgICAgaWYgKHRoaXMuX2luaXRQcm9taXNlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkluc3RhbnRpYXRpb25Qcm9ncmVzcy5wdXNoKG9uUHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9pbml0UHJvbWlzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQ3JlYXRlIGEgcHJvbWlzZSB0aGF0IHdlIGNhbiBhd2FpdFxyXG4gICAgICAgIHRoaXMuX2luaXRQcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2luaXRQcm9taXNlUmVzb2x2ZXIgPSByZXNvbHZlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIFJlZ2lzdGVyIHByb2dyZXNzIGhhbmRsZXJcclxuICAgICAgICB0aGlzLm9uSW5zdGFudGlhdGlvblByb2dyZXNzID0gW29uUHJvZ3Jlc3NdO1xyXG4gICAgICAgIC8vIEluaXRpYWxpemUgZHVja2RiXHJcbiAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBhd2FpdCB0aGlzLmluc3RhbnRpYXRlSW1wbCh7XHJcbiAgICAgICAgICAgIHByaW50OiBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpLFxyXG4gICAgICAgICAgICBwcmludEVycjogY29uc29sZS5sb2cuYmluZChjb25zb2xlKSxcclxuICAgICAgICAgICAgb25SdW50aW1lSW5pdGlhbGl6ZWQ6IHRoaXMuX2luaXRQcm9taXNlUmVzb2x2ZXIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gV2FpdCBmb3Igb25SdW50aW1lSW5pdGlhbGl6ZWRcclxuICAgICAgICBhd2FpdCB0aGlzLl9pbml0UHJvbWlzZTtcclxuICAgICAgICB0aGlzLl9pbml0UHJvbWlzZSA9IG51bGw7XHJcbiAgICAgICAgLy8gUmVtb3ZlIG93biBwcm9ncmVzcyBjYWxsYmFja1xyXG4gICAgICAgIHRoaXMub25JbnN0YW50aWF0aW9uUHJvZ3Jlc3MgPSB0aGlzLm9uSW5zdGFudGlhdGlvblByb2dyZXNzLmZpbHRlcih4ID0+IHggIT0gb25Qcm9ncmVzcyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKiogT3BlbiBhIGRhdGFiYXNlIHdpdGggYSBjb25maWcgKi9cclxuICAgIHB1YmxpYyBvcGVuKGNvbmZpZzogRHVja0RCQ29uZmlnKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgW3MsIGQsIG5dID0gY2FsbFNSZXQodGhpcy5tb2QsICdkdWNrZGJfd2ViX29wZW4nLCBbJ3N0cmluZyddLCBbSlNPTi5zdHJpbmdpZnkoY29uZmlnKV0pO1xyXG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZHJvcFJlc3BvbnNlQnVmZmVycyh0aGlzLm1vZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFJlc2V0IHRoZSBkYXRhYmFzZSAqL1xyXG4gICAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KHRoaXMubW9kLCAnZHVja2RiX3dlYl9yZXNldCcsIFtdLCBbXSk7XHJcbiAgICAgICAgaWYgKHMgIT09IFN0YXR1c0NvZGUuU1VDQ0VTUykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkcm9wUmVzcG9uc2VCdWZmZXJzKHRoaXMubW9kKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogR2V0IHRoZSB2ZXJzaW9uICovXHJcbiAgICBwdWJsaWMgZ2V0VmVyc2lvbigpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KHRoaXMubW9kLCAnZHVja2RiX3dlYl9nZXRfdmVyc2lvbicsIFtdLCBbXSk7XHJcbiAgICAgICAgaWYgKHMgIT09IFN0YXR1c0NvZGUuU1VDQ0VTUykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB2ZXJzaW9uID0gcmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbik7XHJcbiAgICAgICAgZHJvcFJlc3BvbnNlQnVmZmVycyh0aGlzLm1vZCk7XHJcbiAgICAgICAgcmV0dXJuIHZlcnNpb247XHJcbiAgICB9XHJcbiAgICAvKiogR2V0IHRoZSBmZWF0dXJlIGZsYWdzICovXHJcbiAgICBwdWJsaWMgZ2V0RmVhdHVyZUZsYWdzKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kLmNjYWxsKCdkdWNrZGJfd2ViX2dldF9mZWF0dXJlX2ZsYWdzJywgJ251bWJlcicsIFtdLCBbXSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFRva2VuaXplIGEgc2NyaXB0ICovXHJcbiAgICBwdWJsaWMgdG9rZW5pemUodGV4dDogc3RyaW5nKTogU2NyaXB0VG9rZW5zIHtcclxuICAgICAgICBjb25zdCBbcywgZCwgbl0gPSBjYWxsU1JldCh0aGlzLm1vZCwgJ2R1Y2tkYl93ZWJfdG9rZW5pemUnLCBbJ3N0cmluZyddLCBbdGV4dF0pO1xyXG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzID0gcmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbik7XHJcbiAgICAgICAgZHJvcFJlc3BvbnNlQnVmZmVycyh0aGlzLm1vZCk7XHJcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVzKSBhcyBTY3JpcHRUb2tlbnM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIENvbm5lY3QgdG8gZGF0YWJhc2UgKi9cclxuICAgIHB1YmxpYyBjb25uZWN0KCk6IER1Y2tEQkNvbm5lY3Rpb24ge1xyXG4gICAgICAgIGNvbnN0IGNvbm4gPSB0aGlzLm1vZC5jY2FsbCgnZHVja2RiX3dlYl9jb25uZWN0JywgJ251bWJlcicsIFtdLCBbXSk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEdWNrREJDb25uZWN0aW9uKHRoaXMsIGNvbm4pO1xyXG4gICAgfVxyXG4gICAgLyoqIERpc2Nvbm5lY3QgZnJvbSBkYXRhYmFzZSAqL1xyXG4gICAgcHVibGljIGRpc2Nvbm5lY3QoY29ubjogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5tb2QuY2NhbGwoJ2R1Y2tkYl93ZWJfZGlzY29ubmVjdCcsIG51bGwsIFsnbnVtYmVyJ10sIFtjb25uXSk7XHJcbiAgICAgICAgaWYgKHRoaXMucHRocmVhZCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHdvcmtlciBvZiBbLi4udGhpcy5wdGhyZWFkLnJ1bm5pbmdXb3JrZXJzLCAuLi50aGlzLnB0aHJlYWQudW51c2VkV29ya2Vyc10pIHtcclxuICAgICAgICAgICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgY21kOiAnZHJvcFVERkZ1bmN0aW9ucycsXHJcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbklkOiBjb25uLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFNlbmQgYSBxdWVyeSBhbmQgcmV0dXJuIHRoZSBmdWxsIHJlc3VsdCAqL1xyXG4gICAgcHVibGljIHJ1blF1ZXJ5KGNvbm46IG51bWJlciwgdGV4dDogc3RyaW5nKTogVWludDhBcnJheSB7XHJcbiAgICAgICAgY29uc3QgW3MsIGQsIG5dID0gY2FsbFNSZXQodGhpcy5tb2QsICdkdWNrZGJfd2ViX3F1ZXJ5X3J1bicsIFsnbnVtYmVyJywgJ3N0cmluZyddLCBbY29ubiwgdGV4dF0pO1xyXG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzID0gY29weUJ1ZmZlcih0aGlzLm1vZCwgZCwgbik7XHJcbiAgICAgICAgZHJvcFJlc3BvbnNlQnVmZmVycyh0aGlzLm1vZCk7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogIFN0YXJ0IGEgcGVuZGluZyBxdWVyeSBhc3luY2hyb25vdXNseS5cclxuICAgICAqICBUaGlzIG1ldGhvZCByZXR1cm5zIGVpdGhlciB0aGUgYXJyb3cgaXBjIHNjaGVtYSBvciBudWxsLlxyXG4gICAgICogIE9uIG51bGwsIHRoZSBxdWVyeSBoYXMgdG8gYmUgZXhlY3V0ZWQgdXNpbmcgYHBvbGxQZW5kaW5nUXVlcnlgIHVudGlsIHRoYXQgcmV0dXJucyAhPSBudWxsLlxyXG4gICAgICogIFJlc3VsdHMgY2FuIHRoZW4gYmUgZmV0Y2hlZCB1c2luZyBgZmV0Y2hRdWVyeVJlc3VsdHNgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGFydFBlbmRpbmdRdWVyeShjb25uOiBudW1iZXIsIHRleHQ6IHN0cmluZyk6IFVpbnQ4QXJyYXkgfCBudWxsIHtcclxuICAgICAgICBjb25zdCBbcywgZCwgbl0gPSBjYWxsU1JldCh0aGlzLm1vZCwgJ2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9zdGFydCcsIFsnbnVtYmVyJywgJ3N0cmluZyddLCBbY29ubiwgdGV4dF0pO1xyXG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGQgPT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzID0gY29weUJ1ZmZlcih0aGlzLm1vZCwgZCwgbik7XHJcbiAgICAgICAgZHJvcFJlc3BvbnNlQnVmZmVycyh0aGlzLm1vZCk7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIC8qKiBQb2xsIGEgcGVuZGluZyBxdWVyeSAqL1xyXG4gICAgcHVibGljIHBvbGxQZW5kaW5nUXVlcnkoY29ubjogbnVtYmVyKTogVWludDhBcnJheSB8IG51bGwge1xyXG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KHRoaXMubW9kLCAnZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X3BvbGwnLCBbJ251bWJlciddLCBbY29ubl0pO1xyXG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGQgPT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzID0gY29weUJ1ZmZlcih0aGlzLm1vZCwgZCwgbik7XHJcbiAgICAgICAgZHJvcFJlc3BvbnNlQnVmZmVycyh0aGlzLm1vZCk7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIC8qKiBDYW5jZWwgYSBwZW5kaW5nIHF1ZXJ5ICovXHJcbiAgICBwdWJsaWMgY2FuY2VsUGVuZGluZ1F1ZXJ5KGNvbm46IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1vZC5jY2FsbCgnZHVja2RiX3dlYl9wZW5kaW5nX3F1ZXJ5X2NhbmNlbCcsICdib29sZWFuJywgWydudW1iZXInXSwgW2Nvbm5dKTtcclxuICAgIH1cclxuICAgIC8qKiBGZXRjaCBxdWVyeSByZXN1bHRzICovXHJcbiAgICBwdWJsaWMgZmV0Y2hRdWVyeVJlc3VsdHMoY29ubjogbnVtYmVyKTogVWludDhBcnJheSB7XHJcbiAgICAgICAgY29uc3QgW3MsIGQsIG5dID0gY2FsbFNSZXQodGhpcy5tb2QsICdkdWNrZGJfd2ViX3F1ZXJ5X2ZldGNoX3Jlc3VsdHMnLCBbJ251bWJlciddLCBbY29ubl0pO1xyXG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzID0gY29weUJ1ZmZlcih0aGlzLm1vZCwgZCwgbik7XHJcbiAgICAgICAgZHJvcFJlc3BvbnNlQnVmZmVycyh0aGlzLm1vZCk7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIC8qKiBHZXQgdGFibGUgbmFtZXMgKi9cclxuICAgIHB1YmxpYyBnZXRUYWJsZU5hbWVzKGNvbm46IG51bWJlciwgdGV4dDogc3RyaW5nKTogc3RyaW5nW10ge1xyXG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KHRoaXMubW9kLCAnZHVja2RiX3dlYl9nZXRfdGFibGVuYW1lcycsIFsnbnVtYmVyJywgJ3N0cmluZyddLCBbY29ubiwgdGV4dF0pO1xyXG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzID0gcmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbik7XHJcbiAgICAgICAgZHJvcFJlc3BvbnNlQnVmZmVycyh0aGlzLm1vZCk7XHJcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVzKSBhcyBzdHJpbmdbXTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQ3JlYXRlIGEgc2NhbGFyIGZ1bmN0aW9uICovXHJcbiAgICBwdWJsaWMgY3JlYXRlU2NhbGFyRnVuY3Rpb24oXHJcbiAgICAgICAgY29ubjogbnVtYmVyLFxyXG4gICAgICAgIG5hbWU6IHN0cmluZyxcclxuICAgICAgICByZXR1cm5zOiBhcnJvdy5EYXRhVHlwZSxcclxuICAgICAgICBmdW5jOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQsXHJcbiAgICApOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBkZWNsOiBVREZGdW5jdGlvbkRlY2xhcmF0aW9uID0ge1xyXG4gICAgICAgICAgICBmdW5jdGlvbklkOiB0aGlzLl9uZXh0VURGSWQsXHJcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgIHJldHVyblR5cGU6IGFycm93VG9TUUxUeXBlKHJldHVybnMpLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgZGVmOiBVREZGdW5jdGlvbiA9IHtcclxuICAgICAgICAgICAgZnVuY3Rpb25JZDogZGVjbC5mdW5jdGlvbklkLFxyXG4gICAgICAgICAgICBjb25uZWN0aW9uSWQ6IGNvbm4sXHJcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgIHJldHVyblR5cGU6IHJldHVybnMsXHJcbiAgICAgICAgICAgIGZ1bmMsXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLl9uZXh0VURGSWQgKz0gMTtcclxuICAgICAgICBjb25zdCBbcywgZCwgbl0gPSBjYWxsU1JldChcclxuICAgICAgICAgICAgdGhpcy5tb2QsXHJcbiAgICAgICAgICAgICdkdWNrZGJfd2ViX3VkZl9zY2FsYXJfY3JlYXRlJyxcclxuICAgICAgICAgICAgWydudW1iZXInLCAnc3RyaW5nJ10sXHJcbiAgICAgICAgICAgIFtjb25uLCBKU09OLnN0cmluZ2lmeShkZWNsKV0sXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAocyAhPT0gU3RhdHVzQ29kZS5TVUNDRVNTKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZWFkU3RyaW5nKHRoaXMubW9kLCBkLCBuKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRyb3BSZXNwb25zZUJ1ZmZlcnModGhpcy5tb2QpO1xyXG4gICAgICAgIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUuX3VkZkZ1bmN0aW9ucyA9IChnbG9iYWxUaGlzLkRVQ0tEQl9SVU5USU1FLl91ZGZGdW5jdGlvbnMgfHwgbmV3IE1hcCgpKS5zZXQoXHJcbiAgICAgICAgICAgIGRlZi5mdW5jdGlvbklkLFxyXG4gICAgICAgICAgICBkZWYsXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAodGhpcy5wdGhyZWFkKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qgd29ya2VyIG9mIFsuLi50aGlzLnB0aHJlYWQucnVubmluZ1dvcmtlcnMsIC4uLnRoaXMucHRocmVhZC51bnVzZWRXb3JrZXJzXSkge1xyXG4gICAgICAgICAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHtcclxuICAgICAgICAgICAgICAgICAgICBjbWQ6ICdyZWdpc3RlclVERkZ1bmN0aW9uJyxcclxuICAgICAgICAgICAgICAgICAgICB1ZGY6IGRlZixcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBQcmVwYXJlIGEgc3RhdGVtZW50IGFuZCByZXR1cm4gaXRzIGlkZW50aWZpZXIgKi9cclxuICAgIHB1YmxpYyBjcmVhdGVQcmVwYXJlZChjb25uOiBudW1iZXIsIHRleHQ6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgW3MsIGQsIG5dID0gY2FsbFNSZXQodGhpcy5tb2QsICdkdWNrZGJfd2ViX3ByZXBhcmVkX2NyZWF0ZScsIFsnbnVtYmVyJywgJ3N0cmluZyddLCBbY29ubiwgdGV4dF0pO1xyXG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZHJvcFJlc3BvbnNlQnVmZmVycyh0aGlzLm1vZCk7XHJcbiAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIENsb3NlIGEgcHJlcGFyZWQgc3RhdGVtZW50ICovXHJcbiAgICBwdWJsaWMgY2xvc2VQcmVwYXJlZChjb25uOiBudW1iZXIsIHN0YXRlbWVudDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgW3MsIGQsIG5dID0gY2FsbFNSZXQodGhpcy5tb2QsICdkdWNrZGJfd2ViX3ByZXBhcmVkX2Nsb3NlJywgWydudW1iZXInLCAnbnVtYmVyJ10sIFtjb25uLCBzdGF0ZW1lbnRdKTtcclxuICAgICAgICBpZiAocyAhPT0gU3RhdHVzQ29kZS5TVUNDRVNTKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZWFkU3RyaW5nKHRoaXMubW9kLCBkLCBuKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRyb3BSZXNwb25zZUJ1ZmZlcnModGhpcy5tb2QpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBFeGVjdXRlIGEgcHJlcGFyZWQgc3RhdGVtZW50IGFuZCByZXR1cm4gdGhlIGZ1bGwgcmVzdWx0ICovXHJcbiAgICBwdWJsaWMgcnVuUHJlcGFyZWQoY29ubjogbnVtYmVyLCBzdGF0ZW1lbnQ6IG51bWJlciwgcGFyYW1zOiBhbnlbXSk6IFVpbnQ4QXJyYXkge1xyXG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KFxyXG4gICAgICAgICAgICB0aGlzLm1vZCxcclxuICAgICAgICAgICAgJ2R1Y2tkYl93ZWJfcHJlcGFyZWRfcnVuJyxcclxuICAgICAgICAgICAgWydudW1iZXInLCAnbnVtYmVyJywgJ3N0cmluZyddLFxyXG4gICAgICAgICAgICBbY29ubiwgc3RhdGVtZW50LCBKU09OLnN0cmluZ2lmeShwYXJhbXMpXSxcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzID0gY29weUJ1ZmZlcih0aGlzLm1vZCwgZCwgbik7XHJcbiAgICAgICAgZHJvcFJlc3BvbnNlQnVmZmVycyh0aGlzLm1vZCk7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuXHJcbiAgICAvKiogRXhlY3V0ZSBhIHByZXBhcmVkIHN0YXRlbWVudCBhbmQgc3RyZWFtIHRoZSByZXN1bHQgKi9cclxuICAgIHB1YmxpYyBzZW5kUHJlcGFyZWQoY29ubjogbnVtYmVyLCBzdGF0ZW1lbnQ6IG51bWJlciwgcGFyYW1zOiBhbnlbXSk6IFVpbnQ4QXJyYXkge1xyXG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KFxyXG4gICAgICAgICAgICB0aGlzLm1vZCxcclxuICAgICAgICAgICAgJ2R1Y2tkYl93ZWJfcHJlcGFyZWRfc2VuZCcsXHJcbiAgICAgICAgICAgIFsnbnVtYmVyJywgJ251bWJlcicsICdzdHJpbmcnXSxcclxuICAgICAgICAgICAgW2Nvbm4sIHN0YXRlbWVudCwgSlNPTi5zdHJpbmdpZnkocGFyYW1zKV0sXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAocyAhPT0gU3RhdHVzQ29kZS5TVUNDRVNTKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZWFkU3RyaW5nKHRoaXMubW9kLCBkLCBuKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlcyA9IGNvcHlCdWZmZXIodGhpcy5tb2QsIGQsIG4pO1xyXG4gICAgICAgIGRyb3BSZXNwb25zZUJ1ZmZlcnModGhpcy5tb2QpO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEluc2VydCByZWNvcmQgYmF0Y2hlcyBmcm9tIGFuIGFycm93IGlwYyBzdHJlYW0gKi9cclxuICAgIHB1YmxpYyBpbnNlcnRBcnJvd0Zyb21JUENTdHJlYW0oY29ubjogbnVtYmVyLCBidWZmZXI6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBBcnJvd0luc2VydE9wdGlvbnMpOiB2b2lkIHtcclxuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PSAwKSByZXR1cm47XHJcbiAgICAgICAgLy8gU3RvcmUgYnVmZmVyXHJcbiAgICAgICAgY29uc3QgYnVmZmVyUHRyID0gdGhpcy5tb2QuX21hbGxvYyhidWZmZXIubGVuZ3RoKTtcclxuICAgICAgICBjb25zdCBidWZmZXJPZnMgPSB0aGlzLm1vZC5IRUFQVTguc3ViYXJyYXkoYnVmZmVyUHRyLCBidWZmZXJQdHIgKyBidWZmZXIubGVuZ3RoKTtcclxuICAgICAgICBidWZmZXJPZnMuc2V0KGJ1ZmZlcik7XHJcbiAgICAgICAgY29uc3Qgb3B0SlNPTiA9IG9wdGlvbnMgPyBKU09OLnN0cmluZ2lmeShvcHRpb25zKSA6ICcnO1xyXG5cclxuICAgICAgICAvLyBDYWxsIHdhc20gZnVuY3Rpb25cclxuICAgICAgICBjb25zdCBbcywgZCwgbl0gPSBjYWxsU1JldChcclxuICAgICAgICAgICAgdGhpcy5tb2QsXHJcbiAgICAgICAgICAgICdkdWNrZGJfd2ViX2luc2VydF9hcnJvd19mcm9tX2lwY19zdHJlYW0nLFxyXG4gICAgICAgICAgICBbJ251bWJlcicsICdudW1iZXInLCAnbnVtYmVyJywgJ3N0cmluZyddLFxyXG4gICAgICAgICAgICBbY29ubiwgYnVmZmVyUHRyLCBidWZmZXIubGVuZ3RoLCBvcHRKU09OXSxcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEluc2VydCBjc3YgZnJvbSBwYXRoICovXHJcbiAgICBwdWJsaWMgaW5zZXJ0Q1NWRnJvbVBhdGgoY29ubjogbnVtYmVyLCBwYXRoOiBzdHJpbmcsIG9wdGlvbnM6IENTVkluc2VydE9wdGlvbnMpOiB2b2lkIHtcclxuICAgICAgICAvLyBTdHJpbmdpZnkgb3B0aW9uc1xyXG4gICAgICAgIGlmIChvcHRpb25zLmNvbHVtbnMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmNvbHVtbnNGbGF0ID0gW107XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgayBpbiBvcHRpb25zLmNvbHVtbnMpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMuY29sdW1uc0ZsYXQucHVzaChhcnJvd1RvU1FMRmllbGQoaywgb3B0aW9ucy5jb2x1bW5zW2tdKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgb3B0ID0geyAuLi5vcHRpb25zIH0gYXMgYW55O1xyXG4gICAgICAgIG9wdC5jb2x1bW5zID0gb3B0LmNvbHVtbnNGbGF0O1xyXG4gICAgICAgIGRlbGV0ZSBvcHQuY29sdW1uc0ZsYXQ7XHJcbiAgICAgICAgY29uc3Qgb3B0SlNPTiA9IEpTT04uc3RyaW5naWZ5KG9wdCk7XHJcblxyXG4gICAgICAgIC8vIENhbGwgd2FzbSBmdW5jdGlvblxyXG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KFxyXG4gICAgICAgICAgICB0aGlzLm1vZCxcclxuICAgICAgICAgICAgJ2R1Y2tkYl93ZWJfaW5zZXJ0X2Nzdl9mcm9tX3BhdGgnLFxyXG4gICAgICAgICAgICBbJ251bWJlcicsICdzdHJpbmcnLCAnc3RyaW5nJ10sXHJcbiAgICAgICAgICAgIFtjb25uLCBwYXRoLCBvcHRKU09OXSxcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKiogSW5zZXJ0IGpzb24gZnJvbSBwYXRoICovXHJcbiAgICBwdWJsaWMgaW5zZXJ0SlNPTkZyb21QYXRoKGNvbm46IG51bWJlciwgcGF0aDogc3RyaW5nLCBvcHRpb25zOiBKU09OSW5zZXJ0T3B0aW9ucyk6IHZvaWQge1xyXG4gICAgICAgIC8vIFN0cmluZ2lmeSBvcHRpb25zXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuY29sdW1ucyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbnMuY29sdW1uc0ZsYXQgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrIGluIG9wdGlvbnMuY29sdW1ucykge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5jb2x1bW5zRmxhdC5wdXNoKGFycm93VG9TUUxGaWVsZChrLCBvcHRpb25zLmNvbHVtbnNba10pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBvcHQgPSB7IC4uLm9wdGlvbnMgfSBhcyBhbnk7XHJcbiAgICAgICAgb3B0LmNvbHVtbnMgPSBvcHQuY29sdW1uc0ZsYXQ7XHJcbiAgICAgICAgZGVsZXRlIG9wdC5jb2x1bW5zRmxhdDtcclxuICAgICAgICBjb25zdCBvcHRKU09OID0gSlNPTi5zdHJpbmdpZnkob3B0KTtcclxuXHJcbiAgICAgICAgLy8gQ2FsbCB3YXNtIGZ1bmN0aW9uXHJcbiAgICAgICAgY29uc3QgW3MsIGQsIG5dID0gY2FsbFNSZXQoXHJcbiAgICAgICAgICAgIHRoaXMubW9kLFxyXG4gICAgICAgICAgICAnZHVja2RiX3dlYl9pbnNlcnRfanNvbl9mcm9tX3BhdGgnLFxyXG4gICAgICAgICAgICBbJ251bWJlcicsICdzdHJpbmcnLCAnc3RyaW5nJ10sXHJcbiAgICAgICAgICAgIFtjb25uLCBwYXRoLCBvcHRKU09OXSxcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKiogR2xvYiBmaWxlIGluZm9zICovXHJcbiAgICBwdWJsaWMgZ2xvYkZpbGVzKHBhdGg6IHN0cmluZyk6IFdlYkZpbGVbXSB7XHJcbiAgICAgICAgY29uc3QgW3MsIGQsIG5dID0gY2FsbFNSZXQodGhpcy5tb2QsICdkdWNrZGJfd2ViX2ZzX2dsb2JfZmlsZV9pbmZvcycsIFsnc3RyaW5nJ10sIFtwYXRoXSk7XHJcbiAgICAgICAgaWYgKHMgIT09IFN0YXR1c0NvZGUuU1VDQ0VTUykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpbmZvU3RyID0gcmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbik7XHJcbiAgICAgICAgZHJvcFJlc3BvbnNlQnVmZmVycyh0aGlzLm1vZCk7XHJcbiAgICAgICAgY29uc3QgaW5mbyA9IEpTT04ucGFyc2UoaW5mb1N0cikgYXMgV2ViRmlsZVtdO1xyXG4gICAgICAgIGlmIChpbmZvID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaW5mbztcclxuICAgIH1cclxuICAgIC8qKiBSZWdpc3RlciBhIGZpbGUgb2JqZWN0IFVSTCAqL1xyXG4gICAgcHVibGljIHJlZ2lzdGVyRmlsZVVSTChuYW1lOiBzdHJpbmcsIHVybDogc3RyaW5nLCBwcm90bzogRHVja0RCRGF0YVByb3RvY29sLCBkaXJlY3RJTyA9IGZhbHNlKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHVybCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHVybCA9IG5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KFxyXG4gICAgICAgICAgICB0aGlzLm1vZCxcclxuICAgICAgICAgICAgJ2R1Y2tkYl93ZWJfZnNfcmVnaXN0ZXJfZmlsZV91cmwnLFxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdzdHJpbmcnXSxcclxuICAgICAgICAgICAgW25hbWUsIHVybCwgcHJvdG8sIGRpcmVjdElPXSxcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZHJvcFJlc3BvbnNlQnVmZmVycyh0aGlzLm1vZCk7XHJcbiAgICB9XHJcbiAgICAvKiogUmVnaXN0ZXIgZmlsZSB0ZXh0ICovXHJcbiAgICBwdWJsaWMgcmVnaXN0ZXJGaWxlVGV4dChuYW1lOiBzdHJpbmcsIHRleHQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IFRFWFRfRU5DT0RFUi5lbmNvZGUodGV4dCk7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlckZpbGVCdWZmZXIobmFtZSwgYnVmZmVyKTtcclxuICAgIH1cclxuICAgIC8qKiBSZWdpc3RlciBhIGZpbGUgYnVmZmVyICovXHJcbiAgICBwdWJsaWMgcmVnaXN0ZXJGaWxlQnVmZmVyKG5hbWU6IHN0cmluZywgYnVmZmVyOiBVaW50OEFycmF5KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgcHRyID0gdGhpcy5tb2QuX21hbGxvYyhidWZmZXIubGVuZ3RoKTtcclxuICAgICAgICBjb25zdCBkc3QgPSB0aGlzLm1vZC5IRUFQVTguc3ViYXJyYXkocHRyLCBwdHIgKyBidWZmZXIubGVuZ3RoKTtcclxuICAgICAgICBkc3Quc2V0KGJ1ZmZlcik7XHJcbiAgICAgICAgY29uc3QgW3MsIGQsIG5dID0gY2FsbFNSZXQoXHJcbiAgICAgICAgICAgIHRoaXMubW9kLFxyXG4gICAgICAgICAgICAnZHVja2RiX3dlYl9mc19yZWdpc3Rlcl9maWxlX2J1ZmZlcicsXHJcbiAgICAgICAgICAgIFsnc3RyaW5nJywgJ251bWJlcicsICdudW1iZXInXSxcclxuICAgICAgICAgICAgW25hbWUsIHB0ciwgYnVmZmVyLmxlbmd0aF0sXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAocyAhPT0gU3RhdHVzQ29kZS5TVUNDRVNTKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZWFkU3RyaW5nKHRoaXMubW9kLCBkLCBuKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRyb3BSZXNwb25zZUJ1ZmZlcnModGhpcy5tb2QpO1xyXG4gICAgfVxyXG4gICAgLyoqIFJlZ2lzdGVyIGEgZmlsZSBvYmplY3QgVVJMICovXHJcbiAgICBwdWJsaWMgcmVnaXN0ZXJGaWxlSGFuZGxlPEhhbmRsZVR5cGU+KFxyXG4gICAgICAgIG5hbWU6IHN0cmluZyxcclxuICAgICAgICBoYW5kbGU6IEhhbmRsZVR5cGUsXHJcbiAgICAgICAgcHJvdG9jb2w6IER1Y2tEQkRhdGFQcm90b2NvbCxcclxuICAgICAgICBkaXJlY3RJTzogYm9vbGVhbixcclxuICAgICk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KFxyXG4gICAgICAgICAgICB0aGlzLm1vZCxcclxuICAgICAgICAgICAgJ2R1Y2tkYl93ZWJfZnNfcmVnaXN0ZXJfZmlsZV91cmwnLFxyXG4gICAgICAgICAgICBbJ3N0cmluZycsICdzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXSxcclxuICAgICAgICAgICAgW25hbWUsIG5hbWUsIHByb3RvY29sLCBkaXJlY3RJT10sXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAocyAhPT0gU3RhdHVzQ29kZS5TVUNDRVNTKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZWFkU3RyaW5nKHRoaXMubW9kLCBkLCBuKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRyb3BSZXNwb25zZUJ1ZmZlcnModGhpcy5tb2QpO1xyXG4gICAgICAgIGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUuX2ZpbGVzID0gKGdsb2JhbFRoaXMuRFVDS0RCX1JVTlRJTUUuX2ZpbGVzIHx8IG5ldyBNYXAoKSkuc2V0KG5hbWUsIGhhbmRsZSk7XHJcbiAgICAgICAgaWYgKHRoaXMucHRocmVhZCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHdvcmtlciBvZiB0aGlzLnB0aHJlYWQucnVubmluZ1dvcmtlcnMpIHtcclxuICAgICAgICAgICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgY21kOiAncmVnaXN0ZXJGaWxlSGFuZGxlJyxcclxuICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogbmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBmaWxlSGFuZGxlOiBoYW5kbGUsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHdvcmtlciBvZiB0aGlzLnB0aHJlYWQudW51c2VkV29ya2Vycykge1xyXG4gICAgICAgICAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHtcclxuICAgICAgICAgICAgICAgICAgICBjbWQ6ICdkcm9wRmlsZUhhbmRsZScsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKiBEcm9wIGZpbGUgKi9cclxuICAgIHB1YmxpYyBkcm9wRmlsZShuYW1lOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBbcywgZCwgbl0gPSBjYWxsU1JldCh0aGlzLm1vZCwgJ2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlJywgWydzdHJpbmcnXSwgW25hbWVdKTtcclxuICAgICAgICBpZiAocyAhPT0gU3RhdHVzQ29kZS5TVUNDRVNTKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZWFkU3RyaW5nKHRoaXMubW9kLCBkLCBuKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRyb3BSZXNwb25zZUJ1ZmZlcnModGhpcy5tb2QpO1xyXG4gICAgfVxyXG4gICAgLyoqIERyb3AgZmlsZXMgKi9cclxuICAgIHB1YmxpYyBkcm9wRmlsZXMoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgW3MsIGQsIG5dID0gY2FsbFNSZXQodGhpcy5tb2QsICdkdWNrZGJfd2ViX2ZzX2Ryb3BfZmlsZXMnLCBbXSwgW10pO1xyXG4gICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlYWRTdHJpbmcodGhpcy5tb2QsIGQsIG4pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZHJvcFJlc3BvbnNlQnVmZmVycyh0aGlzLm1vZCk7XHJcbiAgICB9XHJcbiAgICAvKiogRmx1c2ggYWxsIGZpbGVzICovXHJcbiAgICBwdWJsaWMgZmx1c2hGaWxlcygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm1vZC5jY2FsbCgnZHVja2RiX3dlYl9mbHVzaF9maWxlcycsIG51bGwsIFtdLCBbXSk7XHJcbiAgICB9XHJcbiAgICAvKiogV3JpdGUgYSBmaWxlIHRvIGEgcGF0aCAqL1xyXG4gICAgcHVibGljIGNvcHlGaWxlVG9QYXRoKG5hbWU6IHN0cmluZywgcGF0aDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgW3MsIGQsIG5dID0gY2FsbFNSZXQodGhpcy5tb2QsICdkdWNrZGJfd2ViX2NvcHlfZmlsZV90b19wYXRoJywgWydzdHJpbmcnLCAnc3RyaW5nJ10sIFtuYW1lLCBwYXRoXSk7XHJcbiAgICAgICAgaWYgKHMgIT09IFN0YXR1c0NvZGUuU1VDQ0VTUykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkcm9wUmVzcG9uc2VCdWZmZXJzKHRoaXMubW9kKTtcclxuICAgIH1cclxuICAgIC8qKiBXcml0ZSBhIGZpbGUgdG8gYSBidWZmZXIgKi9cclxuICAgIHB1YmxpYyBjb3B5RmlsZVRvQnVmZmVyKG5hbWU6IHN0cmluZyk6IFVpbnQ4QXJyYXkge1xyXG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KHRoaXMubW9kLCAnZHVja2RiX3dlYl9jb3B5X2ZpbGVfdG9fYnVmZmVyJywgWydzdHJpbmcnXSwgW25hbWVdKTtcclxuICAgICAgICBpZiAocyAhPT0gU3RhdHVzQ29kZS5TVUNDRVNTKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZWFkU3RyaW5nKHRoaXMubW9kLCBkLCBuKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMubW9kLkhFQVBVOC5zdWJhcnJheShkLCBkICsgbik7XHJcbiAgICAgICAgY29uc3QgY29weSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlci5sZW5ndGgpO1xyXG4gICAgICAgIGNvcHkuc2V0KGJ1ZmZlcik7XHJcbiAgICAgICAgZHJvcFJlc3BvbnNlQnVmZmVycyh0aGlzLm1vZCk7XHJcbiAgICAgICAgcmV0dXJuIGNvcHk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEVuYWJsZSB0cmFja2luZyBvZiBmaWxlIHN0YXRpc3RpY3MgKi9cclxuICAgIHB1YmxpYyBjb2xsZWN0RmlsZVN0YXRpc3RpY3MoZmlsZTogc3RyaW5nLCBlbmFibGU6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBbcywgZCwgbl0gPSBjYWxsU1JldCh0aGlzLm1vZCwgJ2R1Y2tkYl93ZWJfY29sbGVjdF9maWxlX3N0YXRzJywgWydzdHJpbmcnLCAnYm9vbGVhbiddLCBbZmlsZSwgZW5hYmxlXSk7XHJcbiAgICAgICAgaWYgKHMgIT09IFN0YXR1c0NvZGUuU1VDQ0VTUykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbikpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKiBFeHBvcnQgZmlsZSBzdGF0aXN0aWNzICovXHJcbiAgICBwdWJsaWMgZXhwb3J0RmlsZVN0YXRpc3RpY3MoZmlsZTogc3RyaW5nKTogRmlsZVN0YXRpc3RpY3Mge1xyXG4gICAgICAgIGNvbnN0IFtzLCBkLCBuXSA9IGNhbGxTUmV0KHRoaXMubW9kLCAnZHVja2RiX3dlYl9leHBvcnRfZmlsZV9zdGF0cycsIFsnc3RyaW5nJ10sIFtmaWxlXSk7XHJcbiAgICAgICAgaWYgKHMgIT09IFN0YXR1c0NvZGUuU1VDQ0VTUykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVhZFN0cmluZyh0aGlzLm1vZCwgZCwgbikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IEZpbGVTdGF0aXN0aWNzKHRoaXMubW9kLkhFQVBVOC5zdWJhcnJheShkLCBkICsgbikpO1xyXG4gICAgfVxyXG59XHJcbiIsICJleHBvcnQgaW50ZXJmYWNlIER1Y2tEQlF1ZXJ5Q29uZmlnIHtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHBvbGxpbmcgaW50ZXJ2YWwgZm9yIHF1ZXJpZXNcclxuICAgICAqL1xyXG4gICAgcXVlcnlQb2xsaW5nSW50ZXJ2YWw/OiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIENhc3QgQmlnSW50IHRvIERvdWJsZT9cclxuICAgICAqL1xyXG4gICAgY2FzdEJpZ0ludFRvRG91YmxlPzogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogQ2FzdCBUaW1lc3RhbXAgdG8gRGF0ZTY0P1xyXG4gICAgICovXHJcbiAgICBjYXN0VGltZXN0YW1wVG9EYXRlPzogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogQ2FzdCBUaW1lc3RhbXAgdG8gRGF0ZTY0P1xyXG4gICAgICovXHJcbiAgICBjYXN0RHVyYXRpb25Ub1RpbWU2ND86IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIENhc3QgRGVjaW1hbCB0byBEb3VibGU/XHJcbiAgICAgKi9cclxuICAgIGNhc3REZWNpbWFsVG9Eb3VibGU/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIER1Y2tEQkZpbGVzeXN0ZW1Db25maWcge1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbGxvdyBmYWxsaW5nIGJhY2sgdG8gZnVsbCBIVFRQIHJlYWRzIGlmIHRoZSBzZXJ2ZXIgZG9lcyBub3Qgc3VwcG9ydCByYW5nZSByZXF1ZXN0cy5cclxuICAgICAqL1xyXG4gICAgYWxsb3dGdWxsSFRUUFJlYWRzPzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGVudW0gRHVja0RCQWNjZXNzTW9kZSB7XHJcbiAgICBVTkRFRklORUQgPSAwLFxyXG4gICAgQVVUT01BVElDID0gMSxcclxuICAgIFJFQURfT05MWSA9IDIsXHJcbiAgICBSRUFEX1dSSVRFID0gMyxcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEdWNrREJDb25maWcge1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZGF0YWJhc2UgcGF0aFxyXG4gICAgICovXHJcbiAgICBwYXRoPzogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgYWNjZXNzIG1vZGVcclxuICAgICAqL1xyXG4gICAgYWNjZXNzTW9kZT86IER1Y2tEQkFjY2Vzc01vZGU7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiB0aHJlYWRzLlxyXG4gICAgICogTm90ZSB0aGF0IHRoaXMgd2lsbCBvbmx5IHdvcmsgd2l0aCBjcm9zcy1vcmlnaW4gaXNvbGF0ZWQgc2l0ZXMgc2luY2UgaXQgcmVxdWlyZXMgU2hhcmVkQXJyYXlCdWZmZXJzLlxyXG4gICAgICovXHJcbiAgICBtYXhpbXVtVGhyZWFkcz86IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHF1ZXJ5IGNvbmZpZ1xyXG4gICAgICovXHJcbiAgICBxdWVyeT86IER1Y2tEQlF1ZXJ5Q29uZmlnO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZmlsZXN5c3RlbSBjb25maWdcclxuICAgICAqL1xyXG4gICAgZmlsZXN5c3RlbT86IER1Y2tEQkZpbGVzeXN0ZW1Db25maWc7XHJcbn1cclxuIiwgImltcG9ydCAqIGFzIGFycm93IGZyb20gJ2FwYWNoZS1hcnJvdyc7XHJcbmltcG9ydCB7IFNRTEZpZWxkIH0gZnJvbSAnLi4vanNvbl90eXBlZGVmJztcclxuXHJcbmV4cG9ydCBlbnVtIEpTT05UYWJsZVNoYXBlIHtcclxuICAgIFJPV19BUlJBWSA9ICdyb3ctYXJyYXknLFxyXG4gICAgQ09MVU1OX09CSkVDVCA9ICdjb2x1bW4tb2JqZWN0JyxcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBKU09OSW5zZXJ0T3B0aW9ucyB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBzY2hlbWE/OiBzdHJpbmc7XHJcbiAgICBjcmVhdGU/OiBib29sZWFuO1xyXG4gICAgc2hhcGU/OiBKU09OVGFibGVTaGFwZTtcclxuICAgIGNvbHVtbnM/OiB7XHJcbiAgICAgICAgW2tleTogc3RyaW5nXTogYXJyb3cuRGF0YVR5cGU7XHJcbiAgICB9O1xyXG4gICAgY29sdW1uc0ZsYXQ/OiBTUUxGaWVsZFtdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENTVkluc2VydE9wdGlvbnMge1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgc2NoZW1hPzogc3RyaW5nO1xyXG4gICAgY3JlYXRlPzogYm9vbGVhbjtcclxuICAgIGhlYWRlcj86IGJvb2xlYW47XHJcbiAgICBkZWxpbWl0ZXI/OiBzdHJpbmc7XHJcbiAgICBxdW90ZT86IHN0cmluZztcclxuICAgIGVzY2FwZT86IHN0cmluZztcclxuICAgIHNraXA/OiBudW1iZXI7XHJcbiAgICBkZXRlY3Q/OiBib29sZWFuO1xyXG4gICAgZGF0ZUZvcm1hdD86IHN0cmluZztcclxuICAgIHRpbWVzdGFtcEZvcm1hdD86IHN0cmluZztcclxuICAgIGNvbHVtbnM/OiB7XHJcbiAgICAgICAgW2tleTogc3RyaW5nXTogYXJyb3cuRGF0YVR5cGU7XHJcbiAgICB9O1xyXG4gICAgY29sdW1uc0ZsYXQ/OiBTUUxGaWVsZFtdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFycm93SW5zZXJ0T3B0aW9ucyB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBzY2hlbWE/OiBzdHJpbmc7XHJcbiAgICBjcmVhdGU/OiBib29sZWFuO1xyXG59XHJcbiIsICJleHBvcnQgZW51bSBMb2dMZXZlbCB7XHJcbiAgICBOT05FID0gMCxcclxuICAgIERFQlVHID0gMSxcclxuICAgIElORk8gPSAyLFxyXG4gICAgV0FSTklORyA9IDMsXHJcbiAgICBFUlJPUiA9IDQsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIExvZ1RvcGljIHtcclxuICAgIE5PTkUgPSAwLFxyXG4gICAgQ09OTkVDVCA9IDEsXHJcbiAgICBESVNDT05ORUNUID0gMixcclxuICAgIE9QRU4gPSAzLFxyXG4gICAgUVVFUlkgPSA0LFxyXG4gICAgSU5TVEFOVElBVEUgPSA1LFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBMb2dFdmVudCB7XHJcbiAgICBOT05FID0gMCxcclxuICAgIE9LID0gMSxcclxuICAgIEVSUk9SID0gMixcclxuICAgIFNUQVJUID0gMyxcclxuICAgIFJVTiA9IDQsXHJcbiAgICBDQVBUVVJFID0gNSxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gTG9nT3JpZ2luIHtcclxuICAgIE5PTkUgPSAwLFxyXG4gICAgV0VCX1dPUktFUiA9IDEsXHJcbiAgICBOT0RFX1dPUktFUiA9IDIsXHJcbiAgICBCSU5ESU5HUyA9IDMsXHJcbiAgICBBU1lOQ19EVUNLREIgPSA0LFxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBMb2dFbnRyeTxPLCBULCBFLCBWPiA9IHtcclxuICAgIHJlYWRvbmx5IHRpbWVzdGFtcDogRGF0ZTtcclxuICAgIHJlYWRvbmx5IGxldmVsOiBMb2dMZXZlbDtcclxuICAgIHJlYWRvbmx5IG9yaWdpbjogTztcclxuICAgIHJlYWRvbmx5IHRvcGljOiBUO1xyXG4gICAgcmVhZG9ubHkgZXZlbnQ6IEU7XHJcbiAgICByZWFkb25seSB2YWx1ZTogVjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIExvZ0VudHJ5VmFyaWFudCA9XHJcbiAgICB8IExvZ0VudHJ5PExvZ09yaWdpbi5CSU5ESU5HUywgTG9nVG9waWMuSU5TVEFOVElBVEUsIExvZ0V2ZW50LkVSUk9SLCBzdHJpbmc+XHJcbiAgICB8IExvZ0VudHJ5PExvZ09yaWdpbi5CSU5ESU5HUywgTG9nVG9waWMuUVVFUlksIExvZ0V2ZW50LlNUQVJULCB2b2lkPlxyXG4gICAgfCBMb2dFbnRyeTxMb2dPcmlnaW4uQklORElOR1MsIExvZ1RvcGljLlFVRVJZLCBMb2dFdmVudC5PSywgdm9pZD5cclxuICAgIHwgTG9nRW50cnk8TG9nT3JpZ2luLkJJTkRJTkdTLCBMb2dUb3BpYy5RVUVSWSwgTG9nRXZlbnQuRVJST1IsIHZvaWQ+XHJcbiAgICB8IExvZ0VudHJ5PExvZ09yaWdpbi5CSU5ESU5HUywgTG9nVG9waWMuQ09OTkVDVCwgTG9nRXZlbnQuT0ssIHZvaWQ+XHJcbiAgICB8IExvZ0VudHJ5PExvZ09yaWdpbi5CSU5ESU5HUywgTG9nVG9waWMuQ09OTkVDVCwgTG9nRXZlbnQuRVJST1IsIHZvaWQ+XHJcbiAgICB8IExvZ0VudHJ5PExvZ09yaWdpbi5CSU5ESU5HUywgTG9nVG9waWMuRElTQ09OTkVDVCwgTG9nRXZlbnQuT0ssIHZvaWQ+XHJcbiAgICB8IExvZ0VudHJ5PExvZ09yaWdpbi5CSU5ESU5HUywgTG9nVG9waWMuRElTQ09OTkVDVCwgTG9nRXZlbnQuRVJST1IsIHZvaWQ+XHJcbiAgICB8IExvZ0VudHJ5PExvZ09yaWdpbi5CSU5ESU5HUywgTG9nVG9waWMuT1BFTiwgTG9nRXZlbnQuU1RBUlQsIHZvaWQ+XHJcbiAgICB8IExvZ0VudHJ5PExvZ09yaWdpbi5CSU5ESU5HUywgTG9nVG9waWMuT1BFTiwgTG9nRXZlbnQuT0ssIHZvaWQ+XHJcbiAgICB8IExvZ0VudHJ5PExvZ09yaWdpbi5CSU5ESU5HUywgTG9nVG9waWMuT1BFTiwgTG9nRXZlbnQuRVJST1IsIHZvaWQ+XHJcbiAgICB8IExvZ0VudHJ5PExvZ09yaWdpbi5BU1lOQ19EVUNLREIsIExvZ1RvcGljLlFVRVJZLCBMb2dFdmVudC5SVU4sIHN0cmluZz47XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExvZ2dlciB7XHJcbiAgICBsb2coZW50cnk6IExvZ0VudHJ5VmFyaWFudCk6IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBWb2lkTG9nZ2VyIGltcGxlbWVudHMgTG9nZ2VyIHtcclxuICAgIHB1YmxpYyBsb2coX2VudHJ5OiBMb2dFbnRyeVZhcmlhbnQpOiB2b2lkIHt9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDb25zb2xlTG9nZ2VyIGltcGxlbWVudHMgTG9nZ2VyIHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBsZXZlbDogTG9nTGV2ZWwgPSBMb2dMZXZlbC5JTkZPKSB7fVxyXG4gICAgcHVibGljIGxvZyhlbnRyeTogTG9nRW50cnlWYXJpYW50KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGVudHJ5LmxldmVsID49IHRoaXMubGV2ZWwpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZW50cnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldExvZ0xldmVsTGFiZWwobGV2ZWw6IExvZ0xldmVsKTogc3RyaW5nIHtcclxuICAgIHN3aXRjaCAobGV2ZWwpIHtcclxuICAgICAgICBjYXNlIExvZ0xldmVsLk5PTkU6XHJcbiAgICAgICAgICAgIHJldHVybiAnTk9ORSc7XHJcbiAgICAgICAgY2FzZSBMb2dMZXZlbC5ERUJVRzpcclxuICAgICAgICAgICAgcmV0dXJuICdERUJVRyc7XHJcbiAgICAgICAgY2FzZSBMb2dMZXZlbC5JTkZPOlxyXG4gICAgICAgICAgICByZXR1cm4gJ0lORk8nO1xyXG4gICAgICAgIGNhc2UgTG9nTGV2ZWwuV0FSTklORzpcclxuICAgICAgICAgICAgcmV0dXJuICdXQVJOSU5HJztcclxuICAgICAgICBjYXNlIExvZ0xldmVsLkVSUk9SOlxyXG4gICAgICAgICAgICByZXR1cm4gJ0VSUk9SJztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gJz8nO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9nRXZlbnRMYWJlbChldmVudDogTG9nRXZlbnQpOiBzdHJpbmcge1xyXG4gICAgc3dpdGNoIChldmVudCkge1xyXG4gICAgICAgIGNhc2UgTG9nRXZlbnQuTk9ORTpcclxuICAgICAgICAgICAgcmV0dXJuICdOT05FJztcclxuICAgICAgICBjYXNlIExvZ0V2ZW50Lk9LOlxyXG4gICAgICAgICAgICByZXR1cm4gJ09LJztcclxuICAgICAgICBjYXNlIExvZ0V2ZW50LkVSUk9SOlxyXG4gICAgICAgICAgICByZXR1cm4gJ0VSUk9SJztcclxuICAgICAgICBjYXNlIExvZ0V2ZW50LlNUQVJUOlxyXG4gICAgICAgICAgICByZXR1cm4gJ1NUQVJUJztcclxuICAgICAgICBjYXNlIExvZ0V2ZW50LlJVTjpcclxuICAgICAgICAgICAgcmV0dXJuICdSVU4nO1xyXG4gICAgICAgIGNhc2UgTG9nRXZlbnQuQ0FQVFVSRTpcclxuICAgICAgICAgICAgcmV0dXJuICdDQVBUVVJFJztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gJz8nO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9nVG9waWNMYWJlbCh0b3BpYzogTG9nVG9waWMpOiBzdHJpbmcge1xyXG4gICAgc3dpdGNoICh0b3BpYykge1xyXG4gICAgICAgIGNhc2UgTG9nVG9waWMuQ09OTkVDVDpcclxuICAgICAgICAgICAgcmV0dXJuICdDT05ORUNUJztcclxuICAgICAgICBjYXNlIExvZ1RvcGljLkRJU0NPTk5FQ1Q6XHJcbiAgICAgICAgICAgIHJldHVybiAnRElTQ09OTkVDVCc7XHJcbiAgICAgICAgY2FzZSBMb2dUb3BpYy5JTlNUQU5USUFURTpcclxuICAgICAgICAgICAgcmV0dXJuICdJTlNUQU5USUFURSc7XHJcbiAgICAgICAgY2FzZSBMb2dUb3BpYy5PUEVOOlxyXG4gICAgICAgICAgICByZXR1cm4gJ09QRU4nO1xyXG4gICAgICAgIGNhc2UgTG9nVG9waWMuUVVFUlk6XHJcbiAgICAgICAgICAgIHJldHVybiAnUVVFUlknO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiAnPyc7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2dPcmlnaW5MYWJlbChvcmlnaW46IExvZ09yaWdpbik6IHN0cmluZyB7XHJcbiAgICBzd2l0Y2ggKG9yaWdpbikge1xyXG4gICAgICAgIGNhc2UgTG9nT3JpZ2luLk5PTkU6XHJcbiAgICAgICAgICAgIHJldHVybiAnTk9ORSc7XHJcbiAgICAgICAgY2FzZSBMb2dPcmlnaW4uV0VCX1dPUktFUjpcclxuICAgICAgICAgICAgcmV0dXJuICdXRUIgV09SS0VSJztcclxuICAgICAgICBjYXNlIExvZ09yaWdpbi5OT0RFX1dPUktFUjpcclxuICAgICAgICAgICAgcmV0dXJuICdOT0RFIFdPUktFUic7XHJcbiAgICAgICAgY2FzZSBMb2dPcmlnaW4uQklORElOR1M6XHJcbiAgICAgICAgICAgIHJldHVybiAnRFVDS0RCIEJJTkRJTkdTJztcclxuICAgICAgICBjYXNlIExvZ09yaWdpbi5BU1lOQ19EVUNLREI6XHJcbiAgICAgICAgICAgIHJldHVybiAnRFVDS0RCJztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gJz8nO1xyXG4gICAgfVxyXG59XHJcbiIsICJleHBvcnQgY29uc3QgYmlnSW50PSgpPT4oYXN5bmMgZT0+e3RyeXtyZXR1cm4oYXdhaXQgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoZSkpLmluc3RhbmNlLmV4cG9ydHMuYihCaWdJbnQoMCkpPT09QmlnSW50KDApfWNhdGNoKGUpe3JldHVybiExfX0pKG5ldyBVaW50OEFycmF5KFswLDk3LDExNSwxMDksMSwwLDAsMCwxLDYsMSw5NiwxLDEyNiwxLDEyNiwzLDIsMSwwLDcsNSwxLDEsOTgsMCwwLDEwLDYsMSw0LDAsMzIsMCwxMV0pKSxidWxrTWVtb3J5PWFzeW5jKCk9PldlYkFzc2VtYmx5LnZhbGlkYXRlKG5ldyBVaW50OEFycmF5KFswLDk3LDExNSwxMDksMSwwLDAsMCwxLDQsMSw5NiwwLDAsMywyLDEsMCw1LDMsMSwwLDEsMTAsMTQsMSwxMiwwLDY1LDAsNjUsMCw2NSwwLDI1MiwxMCwwLDAsMTFdKSksZXhjZXB0aW9ucz1hc3luYygpPT5XZWJBc3NlbWJseS52YWxpZGF0ZShuZXcgVWludDhBcnJheShbMCw5NywxMTUsMTA5LDEsMCwwLDAsMSw0LDEsOTYsMCwwLDMsMiwxLDAsMTAsOCwxLDYsMCw2LDY0LDI1LDExLDExXSkpLGV4dGVuZGVkQ29uc3Q9YXN5bmMoKT0+V2ViQXNzZW1ibHkudmFsaWRhdGUobmV3IFVpbnQ4QXJyYXkoWzAsOTcsMTE1LDEwOSwxLDAsMCwwLDUsMywxLDAsMSwxMSw5LDEsMCw2NSwxLDY1LDIsMTA2LDExLDBdKSksZ2M9YXN5bmMoKT0+V2ViQXNzZW1ibHkudmFsaWRhdGUobmV3IFVpbnQ4QXJyYXkoWzAsOTcsMTE1LDEwOSwxLDAsMCwwLDEsMTAsMiw5NSwxLDEyNSwwLDk2LDAsMSwxMDcsMCwzLDIsMSwxLDEwLDEyLDEsMTAsMCw2NywwLDAsMCwwLDI1MSw3LDAsMTFdKSksbWVtb3J5NjQ9YXN5bmMoKT0+V2ViQXNzZW1ibHkudmFsaWRhdGUobmV3IFVpbnQ4QXJyYXkoWzAsOTcsMTE1LDEwOSwxLDAsMCwwLDUsMywxLDQsMV0pKSxtdWx0aVZhbHVlPWFzeW5jKCk9PldlYkFzc2VtYmx5LnZhbGlkYXRlKG5ldyBVaW50OEFycmF5KFswLDk3LDExNSwxMDksMSwwLDAsMCwxLDYsMSw5NiwwLDIsMTI3LDEyNywzLDIsMSwwLDEwLDgsMSw2LDAsNjUsMCw2NSwwLDExXSkpLG11dGFibGVHbG9iYWxzPWFzeW5jKCk9PldlYkFzc2VtYmx5LnZhbGlkYXRlKG5ldyBVaW50OEFycmF5KFswLDk3LDExNSwxMDksMSwwLDAsMCwyLDgsMSwxLDk3LDEsOTgsMywxMjcsMSw2LDYsMSwxMjcsMSw2NSwwLDExLDcsNSwxLDEsOTcsMywxXSkpLHJlZmVyZW5jZVR5cGVzPWFzeW5jKCk9PldlYkFzc2VtYmx5LnZhbGlkYXRlKG5ldyBVaW50OEFycmF5KFswLDk3LDExNSwxMDksMSwwLDAsMCwxLDQsMSw5NiwwLDAsMywyLDEsMCwxMCw3LDEsNSwwLDIwOCwxMTIsMjYsMTFdKSkscmVsYXhlZFNpbWQ9YXN5bmMoKT0+V2ViQXNzZW1ibHkudmFsaWRhdGUobmV3IFVpbnQ4QXJyYXkoWzAsOTcsMTE1LDEwOSwxLDAsMCwwLDEsNSwxLDk2LDAsMSwxMjMsMywyLDEsMCwxMCwxNSwxLDEzLDAsNjUsMSwyNTMsMTUsNjUsMiwyNTMsMTUsMjUzLDEyOCwyLDExXSkpLHNhdHVyYXRlZEZsb2F0VG9JbnQ9YXN5bmMoKT0+V2ViQXNzZW1ibHkudmFsaWRhdGUobmV3IFVpbnQ4QXJyYXkoWzAsOTcsMTE1LDEwOSwxLDAsMCwwLDEsNCwxLDk2LDAsMCwzLDIsMSwwLDEwLDEyLDEsMTAsMCw2NywwLDAsMCwwLDI1MiwwLDI2LDExXSkpLHNpZ25FeHRlbnNpb25zPWFzeW5jKCk9PldlYkFzc2VtYmx5LnZhbGlkYXRlKG5ldyBVaW50OEFycmF5KFswLDk3LDExNSwxMDksMSwwLDAsMCwxLDQsMSw5NiwwLDAsMywyLDEsMCwxMCw4LDEsNiwwLDY1LDAsMTkyLDI2LDExXSkpLHNpbWQ9YXN5bmMoKT0+V2ViQXNzZW1ibHkudmFsaWRhdGUobmV3IFVpbnQ4QXJyYXkoWzAsOTcsMTE1LDEwOSwxLDAsMCwwLDEsNSwxLDk2LDAsMSwxMjMsMywyLDEsMCwxMCwxMCwxLDgsMCw2NSwwLDI1MywxNSwyNTMsOTgsMTFdKSksc3RyZWFtaW5nQ29tcGlsYXRpb249KCk9Pihhc3luYygpPT5cImNvbXBpbGVTdHJlYW1pbmdcImluIFdlYkFzc2VtYmx5KSgpLHRhaWxDYWxsPWFzeW5jKCk9PldlYkFzc2VtYmx5LnZhbGlkYXRlKG5ldyBVaW50OEFycmF5KFswLDk3LDExNSwxMDksMSwwLDAsMCwxLDQsMSw5NiwwLDAsMywyLDEsMCwxMCw2LDEsNCwwLDE4LDAsMTFdKSksdGhyZWFkcz0oKT0+KGFzeW5jIGU9Pnt0cnl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIE1lc3NhZ2VDaGFubmVsJiYobmV3IE1lc3NhZ2VDaGFubmVsKS5wb3J0MS5wb3N0TWVzc2FnZShuZXcgU2hhcmVkQXJyYXlCdWZmZXIoMSkpLFdlYkFzc2VtYmx5LnZhbGlkYXRlKGUpfWNhdGNoKGUpe3JldHVybiExfX0pKG5ldyBVaW50OEFycmF5KFswLDk3LDExNSwxMDksMSwwLDAsMCwxLDQsMSw5NiwwLDAsMywyLDEsMCw1LDQsMSwzLDEsMSwxMCwxMSwxLDksMCw2NSwwLDI1NCwxNiwyLDAsMjYsMTFdKSk7XG4iLCAie1xyXG4gICAgXCJuYW1lXCI6IFwiQGR1Y2tkYi9kdWNrZGItd2FzbVwiLFxyXG4gICAgXCJ2ZXJzaW9uXCI6IFwiMS4xMS4wXCIsXHJcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiRHVja0RCIHBvd2VyZWQgYnkgV2ViQXNzZW1ibHlcIixcclxuICAgIFwibGljZW5zZVwiOiBcIk1JVFwiLFxyXG4gICAgXCJyZXBvc2l0b3J5XCI6IHtcclxuICAgICAgICBcInR5cGVcIjogXCJnaXRcIixcclxuICAgICAgICBcInVybFwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9kdWNrZGIvZHVja2RiLXdhc20uZ2l0XCJcclxuICAgIH0sXHJcbiAgICBcImtleXdvcmRzXCI6IFtcclxuICAgICAgICBcInNxbFwiLFxyXG4gICAgICAgIFwiZHVja2RiXCIsXHJcbiAgICAgICAgXCJyZWxhdGlvbmFsXCIsXHJcbiAgICAgICAgXCJkYXRhYmFzZVwiLFxyXG4gICAgICAgIFwiZGF0YVwiLFxyXG4gICAgICAgIFwicXVlcnlcIixcclxuICAgICAgICBcIndhc21cIixcclxuICAgICAgICBcImFuYWx5dGljc1wiLFxyXG4gICAgICAgIFwib2xhcFwiLFxyXG4gICAgICAgIFwiYXJyb3dcIixcclxuICAgICAgICBcInBhcnF1ZXRcIixcclxuICAgICAgICBcImpzb25cIixcclxuICAgICAgICBcImNzdlwiXHJcbiAgICBdLFxyXG4gICAgXCJkZXBlbmRlbmNpZXNcIjoge1xyXG4gICAgICAgIFwiYXBhY2hlLWFycm93XCI6IFwiXjEyLjAuMFwiXHJcbiAgICB9LFxyXG4gICAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xyXG4gICAgICAgIFwiQHR5cGVzL2Vtc2NyaXB0ZW5cIjogXCJeMS4zOS42XCIsXHJcbiAgICAgICAgXCJAdHlwZXMvamFzbWluZVwiOiBcIl40LjMuMVwiLFxyXG4gICAgICAgIFwiQHR5cGVzY3JpcHQtZXNsaW50L2VzbGludC1wbHVnaW5cIjogXCJeNS42MS4wXCIsXHJcbiAgICAgICAgXCJAdHlwZXNjcmlwdC1lc2xpbnQvcGFyc2VyXCI6IFwiXjUuNDkuMFwiLFxyXG4gICAgICAgIFwiZXNidWlsZFwiOiBcIl4wLjE4LjEzXCIsXHJcbiAgICAgICAgXCJlc2xpbnRcIjogXCJeOC4zNS4wXCIsXHJcbiAgICAgICAgXCJlc2xpbnQtcGx1Z2luLWphc21pbmVcIjogXCJeNC4xLjNcIixcclxuICAgICAgICBcImVzbGludC1wbHVnaW4tcmVhY3RcIjogXCJeNy4zMi4yXCIsXHJcbiAgICAgICAgXCJmYXN0LWdsb2JcIjogXCJeMy4yLjEyXCIsXHJcbiAgICAgICAgXCJqYXNtaW5lXCI6IFwiXjUuMC4yXCIsXHJcbiAgICAgICAgXCJqYXNtaW5lLWNvcmVcIjogXCJeNS4wLjBcIixcclxuICAgICAgICBcImphc21pbmUtc3BlYy1yZXBvcnRlclwiOiBcIl43LjAuMFwiLFxyXG4gICAgICAgIFwianMtc2hhMjU2XCI6IFwiXjAuOS4wXCIsXHJcbiAgICAgICAgXCJrYXJtYVwiOiBcIl42LjQuMlwiLFxyXG4gICAgICAgIFwia2FybWEtY2hyb21lLWxhdW5jaGVyXCI6IFwiXjMuMi4wXCIsXHJcbiAgICAgICAgXCJrYXJtYS1jb3ZlcmFnZVwiOiBcIl4yLjIuMFwiLFxyXG4gICAgICAgIFwia2FybWEtZmlyZWZveC1sYXVuY2hlclwiOiBcIl4yLjEuMlwiLFxyXG4gICAgICAgIFwia2FybWEtamFzbWluZVwiOiBcIl41LjEuMFwiLFxyXG4gICAgICAgIFwia2FybWEtamFzbWluZS1odG1sLXJlcG9ydGVyXCI6IFwiXjIuMC4wXCIsXHJcbiAgICAgICAgXCJrYXJtYS1zb3VyY2VtYXAtbG9hZGVyXCI6IFwiXjAuMy44XCIsXHJcbiAgICAgICAgXCJrYXJtYS1zcGVjLXJlcG9ydGVyXCI6IFwiXjAuMC4zNlwiLFxyXG4gICAgICAgIFwibWFrZS1kaXJcIjogXCJeMy4xLjBcIixcclxuICAgICAgICBcIm55Y1wiOiBcIl4xNS4xLjBcIixcclxuICAgICAgICBcInByZXR0aWVyXCI6IFwiXjIuOC40XCIsXHJcbiAgICAgICAgXCJwdXBwZXRlZXJcIjogXCJeMjAuOC4wXCIsXHJcbiAgICAgICAgXCJyaW1yYWZcIjogXCJeNC4zLjBcIixcclxuICAgICAgICBcInMzcnZlclwiOiBcIl4zLjcuMVwiLFxyXG4gICAgICAgIFwidHlwZWRvY1wiOiBcIl4wLjI0LjhcIixcclxuICAgICAgICBcInR5cGVzY3JpcHRcIjogXCJeNC44LjRcIixcclxuICAgICAgICBcIndhc20tZmVhdHVyZS1kZXRlY3RcIjogXCJeMS41LjFcIixcclxuICAgICAgICBcIndlYi13b3JrZXJcIjogXCJeMS4yLjBcIlxyXG4gICAgfSxcclxuICAgIFwic2NyaXB0c1wiOiB7XHJcbiAgICAgICAgXCJidWlsZDpkZWJ1Z1wiOiBcIm5vZGUgYnVuZGxlLm1qcyBkZWJ1ZyAmJiB0c2MgLS1lbWl0RGVjbGFyYXRpb25Pbmx5XCIsXHJcbiAgICAgICAgXCJidWlsZDpyZWxlYXNlXCI6IFwibm9kZSBidW5kbGUubWpzIHJlbGVhc2UgJiYgdHNjIC0tZW1pdERlY2xhcmF0aW9uT25seVwiLFxyXG4gICAgICAgIFwiZG9jc1wiOiBcInR5cGVkb2NcIixcclxuICAgICAgICBcInJlcG9ydFwiOiBcIm5vZGUgLi9jb3ZlcmFnZS5tanNcIixcclxuICAgICAgICBcInRlc3Q6bm9kZVwiOiBcIm5vZGUgLS1lbmFibGUtc291cmNlLW1hcHMgLi4vLi4vbm9kZV9tb2R1bGVzL2phc21pbmUvYmluL2phc21pbmUgLi9kaXN0L3Rlc3RzLW5vZGUuY2pzXCIsXHJcbiAgICAgICAgXCJ0ZXN0Om5vZGU6ZGVidWdcIjogXCJub2RlIC0taW5zcGVjdC1icmsgLS1lbmFibGUtc291cmNlLW1hcHMgLi4vLi4vbm9kZV9tb2R1bGVzL2phc21pbmUvYmluL2phc21pbmUgLi9kaXN0L3Rlc3RzLW5vZGUuY2pzXCIsXHJcbiAgICAgICAgXCJ0ZXN0Om5vZGU6Y292ZXJhZ2VcIjogXCJueWMgLXIganNvbiAtLXJlcG9ydC1kaXIgLi9jb3ZlcmFnZS9ub2RlIG5vZGUgLi4vLi4vbm9kZV9tb2R1bGVzL2phc21pbmUvYmluL2phc21pbmUgLi9kaXN0L3Rlc3RzLW5vZGUuY2pzXCIsXHJcbiAgICAgICAgXCJ0ZXN0OmZpcmVmb3hcIjogXCJrYXJtYSBzdGFydCAuL2thcm1hL3Rlc3RzLWZpcmVmb3guY2pzXCIsXHJcbiAgICAgICAgXCJ0ZXN0OmNocm9tZVwiOiBcImthcm1hIHN0YXJ0IC4va2FybWEvdGVzdHMtY2hyb21lLmNqc1wiLFxyXG4gICAgICAgIFwidGVzdDpjaHJvbWU6ZWhcIjogXCJrYXJtYSBzdGFydCAuL2thcm1hL3Rlc3RzLWNocm9tZS1laC5janNcIixcclxuICAgICAgICBcInRlc3Q6Y2hyb21lOmNvdmVyYWdlXCI6IFwia2FybWEgc3RhcnQgLi9rYXJtYS90ZXN0cy1jaHJvbWUtY292ZXJhZ2UuY2pzXCIsXHJcbiAgICAgICAgXCJ0ZXN0OmJyb3dzZXJcIjogXCJrYXJtYSBzdGFydCAuL2thcm1hL3Rlc3RzLWFsbC5janNcIixcclxuICAgICAgICBcInRlc3Q6YnJvd3NlcjpkZWJ1Z1wiOiBcImthcm1hIHN0YXJ0IC4va2FybWEvdGVzdHMtZGVidWcuY2pzXCIsXHJcbiAgICAgICAgXCJ0ZXN0XCI6IFwibnBtIHJ1biB0ZXN0OmNocm9tZSAmJiBucG0gcnVuIHRlc3Q6bm9kZVwiLFxyXG4gICAgICAgIFwidGVzdDpjb3ZlcmFnZVwiOiBcIm5wbSBydW4gdGVzdDpjaHJvbWU6Y292ZXJhZ2UgJiYgbnBtIHJ1biB0ZXN0Om5vZGU6Y292ZXJhZ2UgJiYgbnBtIHJ1biByZXBvcnRcIixcclxuICAgICAgICBcImxpbnRcIjogXCJlc2xpbnQgc3JjIHRlc3RcIlxyXG4gICAgfSxcclxuICAgIFwiZmlsZXNcIjogW1xyXG4gICAgICAgIFwiZGlzdFwiLFxyXG4gICAgICAgIFwiIWRpc3QvdHlwZXMvdGVzdFwiXHJcbiAgICBdLFxyXG4gICAgXCJtYWluXCI6IFwiZGlzdC9kdWNrZGItYnJvd3Nlci5janNcIixcclxuICAgIFwibW9kdWxlXCI6IFwiZGlzdC9kdWNrZGItYnJvd3Nlci5tanNcIixcclxuICAgIFwidHlwZXNcIjogXCJkaXN0L2R1Y2tkYi1icm93c2VyLmQudHNcIixcclxuICAgIFwianNkZWxpdnJcIjogXCJkaXN0L2R1Y2tkYi1icm93c2VyLmNqc1wiLFxyXG4gICAgXCJ1bnBrZ1wiOiBcImRpc3QvZHVja2RiLWJyb3dzZXIubWpzXCIsXHJcbiAgICBcInNpZGVFZmZlY3RzXCI6IGZhbHNlLFxyXG4gICAgXCJicm93c2VyXCI6IHtcclxuICAgICAgICBcImZzXCI6IGZhbHNlLFxyXG4gICAgICAgIFwicGF0aFwiOiBmYWxzZSxcclxuICAgICAgICBcInBlcmZfaG9va3NcIjogZmFsc2UsXHJcbiAgICAgICAgXCJvc1wiOiBmYWxzZSxcclxuICAgICAgICBcIndvcmtlcl90aHJlYWRzXCI6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgXCJleHBvcnRzXCI6IHtcclxuICAgICAgICBcIi4vZGlzdC9kdWNrZGItbXZwLndhc21cIjogXCIuL2Rpc3QvZHVja2RiLW12cC53YXNtXCIsXHJcbiAgICAgICAgXCIuL2Rpc3QvZHVja2RiLWVoLndhc21cIjogXCIuL2Rpc3QvZHVja2RiLWVoLndhc21cIixcclxuICAgICAgICBcIi4vZGlzdC9kdWNrZGItY29pLndhc21cIjogXCIuL2Rpc3QvZHVja2RiLWNvaS53YXNtXCIsXHJcbiAgICAgICAgXCIuL2Rpc3QvZHVja2RiLWJyb3dzZXJcIjogXCIuL2Rpc3QvZHVja2RiLWJyb3dzZXIubWpzXCIsXHJcbiAgICAgICAgXCIuL2Rpc3QvZHVja2RiLWJyb3dzZXIuY2pzXCI6IFwiLi9kaXN0L2R1Y2tkYi1icm93c2VyLmNqc1wiLFxyXG4gICAgICAgIFwiLi9kaXN0L2R1Y2tkYi1icm93c2VyLm1qc1wiOiBcIi4vZGlzdC9kdWNrZGItYnJvd3Nlci5tanNcIixcclxuICAgICAgICBcIi4vZGlzdC9kdWNrZGItYnJvd3Nlci1ibG9ja2luZ1wiOiBcIi4vZGlzdC9kdWNrZGItYnJvd3Nlci1ibG9ja2luZy5tanNcIixcclxuICAgICAgICBcIi4vZGlzdC9kdWNrZGItYnJvd3Nlci1ibG9ja2luZy5tanNcIjogXCIuL2Rpc3QvZHVja2RiLWJyb3dzZXItYmxvY2tpbmcubWpzXCIsXHJcbiAgICAgICAgXCIuL2Rpc3QvZHVja2RiLWJyb3dzZXItYmxvY2tpbmcuY2pzXCI6IFwiLi9kaXN0L2R1Y2tkYi1icm93c2VyLWJsb2NraW5nLmNqc1wiLFxyXG4gICAgICAgIFwiLi9kaXN0L2R1Y2tkYi1icm93c2VyLWNvaS5wdGhyZWFkLndvcmtlci5qc1wiOiBcIi4vZGlzdC9kdWNrZGItYnJvd3Nlci1jb2kucHRocmVhZC53b3JrZXIuanNcIixcclxuICAgICAgICBcIi4vZGlzdC9kdWNrZGItYnJvd3Nlci1jb2kud29ya2VyLmpzXCI6IFwiLi9kaXN0L2R1Y2tkYi1icm93c2VyLWNvaS53b3JrZXIuanNcIixcclxuICAgICAgICBcIi4vZGlzdC9kdWNrZGItYnJvd3Nlci1laC53b3JrZXIuanNcIjogXCIuL2Rpc3QvZHVja2RiLWJyb3dzZXItZWgud29ya2VyLmpzXCIsXHJcbiAgICAgICAgXCIuL2Rpc3QvZHVja2RiLWJyb3dzZXItbXZwLndvcmtlci5qc1wiOiBcIi4vZGlzdC9kdWNrZGItYnJvd3Nlci1tdnAud29ya2VyLmpzXCIsXHJcbiAgICAgICAgXCIuL2Rpc3QvZHVja2RiLW5vZGVcIjogXCIuL2Rpc3QvZHVja2RiLW5vZGUuY2pzXCIsXHJcbiAgICAgICAgXCIuL2Rpc3QvZHVja2RiLW5vZGUuY2pzXCI6IFwiLi9kaXN0L2R1Y2tkYi1ub2RlLmNqc1wiLFxyXG4gICAgICAgIFwiLi9kaXN0L2R1Y2tkYi1ub2RlLWJsb2NraW5nXCI6IFwiLi9kaXN0L2R1Y2tkYi1ub2RlLWJsb2NraW5nLmNqc1wiLFxyXG4gICAgICAgIFwiLi9kaXN0L2R1Y2tkYi1ub2RlLWJsb2NraW5nLmNqc1wiOiBcIi4vZGlzdC9kdWNrZGItbm9kZS1ibG9ja2luZy5janNcIixcclxuICAgICAgICBcIi4vZGlzdC9kdWNrZGItbm9kZS1laC53b3JrZXIuY2pzXCI6IFwiLi9kaXN0L2R1Y2tkYi1ub2RlLWVoLndvcmtlci5janNcIixcclxuICAgICAgICBcIi4vZGlzdC9kdWNrZGItbm9kZS1tdnAud29ya2VyLmNqc1wiOiBcIi4vZGlzdC9kdWNrZGItbm9kZS1tdnAud29ya2VyLmNqc1wiLFxyXG4gICAgICAgIFwiLi9ibG9ja2luZ1wiOiB7XHJcbiAgICAgICAgICAgIFwiYnJvd3NlclwiOiB7XHJcbiAgICAgICAgICAgICAgICBcInR5cGVzXCI6IFwiLi9kaXN0L2R1Y2tkYi1icm93c2VyLWJsb2NraW5nLmQudHNcIixcclxuICAgICAgICAgICAgICAgIFwiaW1wb3J0XCI6IFwiLi9kaXN0L2R1Y2tkYi1icm93c2VyLWJsb2NraW5nLm1qc1wiLFxyXG4gICAgICAgICAgICAgICAgXCJyZXF1aXJlXCI6IFwiLi9kaXN0L2R1Y2tkYi1icm93c2VyLWJsb2NraW5nLmNqc1wiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFwibm9kZVwiOiB7XHJcbiAgICAgICAgICAgICAgICBcInR5cGVzXCI6IFwiLi9kaXN0L2R1Y2tkYi1ub2RlLWJsb2NraW5nLmQudHNcIixcclxuICAgICAgICAgICAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC9kdWNrZGItbm9kZS1ibG9ja2luZy5janNcIixcclxuICAgICAgICAgICAgICAgIFwiaW1wb3J0XCI6IFwiLi9kaXN0L2R1Y2tkYi1ub2RlLWJsb2NraW5nLmNqc1wiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFwidHlwZXNcIjogXCIuL2Rpc3QvZHVja2RiLWJyb3dzZXItYmxvY2tpbmcuZC50c1wiLFxyXG4gICAgICAgICAgICBcImltcG9ydFwiOiBcIi4vZGlzdC9kdWNrZGItYnJvd3Nlci1ibG9ja2luZy5tanNcIixcclxuICAgICAgICAgICAgXCJyZXF1aXJlXCI6IFwiLi9kaXN0L2R1Y2tkYi1icm93c2VyLWJsb2NraW5nLmNqc1wiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcIi5cIjoge1xyXG4gICAgICAgICAgICBcImJyb3dzZXJcIjoge1xyXG4gICAgICAgICAgICAgICAgXCJ0eXBlc1wiOiBcIi4vZGlzdC9kdWNrZGItYnJvd3Nlci5kLnRzXCIsXHJcbiAgICAgICAgICAgICAgICBcImltcG9ydFwiOiBcIi4vZGlzdC9kdWNrZGItYnJvd3Nlci5tanNcIixcclxuICAgICAgICAgICAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC9kdWNrZGItYnJvd3Nlci5janNcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBcIm5vZGVcIjoge1xyXG4gICAgICAgICAgICAgICAgXCJ0eXBlc1wiOiBcIi4vZGlzdC9kdWNrZGItbm9kZS5kLnRzXCIsXHJcbiAgICAgICAgICAgICAgICBcImltcG9ydFwiOiBcIi4vZGlzdC9kdWNrZGItbm9kZS5janNcIixcclxuICAgICAgICAgICAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC9kdWNrZGItbm9kZS5janNcIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBcInR5cGVzXCI6IFwiLi9kaXN0L2R1Y2tkYi1icm93c2VyLmQudHNcIixcclxuICAgICAgICAgICAgXCJpbXBvcnRcIjogXCIuL2Rpc3QvZHVja2RiLWJyb3dzZXIubWpzXCIsXHJcbiAgICAgICAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC9kdWNrZGItYnJvd3Nlci5janNcIlxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCAiaW1wb3J0IGNvbmZpZyBmcm9tICcuLi9wYWNrYWdlLmpzb24nO1xyXG5cclxuZXhwb3J0IGNvbnN0IFBBQ0tBR0VfTkFNRSA9IGNvbmZpZy5uYW1lO1xyXG5leHBvcnQgY29uc3QgUEFDS0FHRV9WRVJTSU9OID0gY29uZmlnLnZlcnNpb247XHJcblxyXG5jb25zdCBWRVJTSU9OX1BBUlRTID0gY29uZmlnLnZlcnNpb24uc3BsaXQoJy4nKTtcclxuZXhwb3J0IGNvbnN0IFBBQ0tBR0VfVkVSU0lPTl9NQUpPUiA9IFZFUlNJT05fUEFSVFNbMF07XHJcbmV4cG9ydCBjb25zdCBQQUNLQUdFX1ZFUlNJT05fTUlOT1IgPSBWRVJTSU9OX1BBUlRTWzFdO1xyXG5leHBvcnQgY29uc3QgUEFDS0FHRV9WRVJTSU9OX1BBVENIID0gVkVSU0lPTl9QQVJUU1syXTtcclxuIiwgImltcG9ydCAqIGFzIGNoZWNrIGZyb20gJ3dhc20tZmVhdHVyZS1kZXRlY3QnO1xyXG5pbXBvcnQgeyBQQUNLQUdFX05BTUUsIFBBQ0tBR0VfVkVSU0lPTiB9IGZyb20gJy4vdmVyc2lvbic7XHJcblxyXG4vLyBQbGF0Zm9ybSBjaGVjayB0YWtlbiBmcm9tIGhlcmU6XHJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS94dGVybWpzL3h0ZXJtLmpzL2Jsb2IvbWFzdGVyL3NyYy9jb21tb24vUGxhdGZvcm0udHMjTDIxXHJcblxyXG5pbnRlcmZhY2UgSU5hdmlnYXRvciB7XHJcbiAgICB1c2VyQWdlbnQ6IHN0cmluZztcclxuICAgIGxhbmd1YWdlOiBzdHJpbmc7XHJcbiAgICBwbGF0Zm9ybTogc3RyaW5nO1xyXG59XHJcblxyXG4vLyBXZSdyZSBkZWNsYXJpbmcgYSBuYXZpZ2F0b3IgZ2xvYmFsIGhlcmUgYXMgd2UgZXhwZWN0IGl0IGluIGFsbCBydW50aW1lcyAobm9kZSBhbmQgYnJvd3NlciksIGJ1dFxyXG4vLyB3ZSB3YW50IHRoaXMgbW9kdWxlIHRvIGxpdmUgaW4gY29tbW9uLlxyXG5kZWNsYXJlIGNvbnN0IG5hdmlnYXRvcjogSU5hdmlnYXRvcjtcclxuXHJcbmV4cG9ydCBjb25zdCBpc05vZGUgPSAoKSA9PiAodHlwZW9mIG5hdmlnYXRvciA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogZmFsc2UpO1xyXG5jb25zdCB1c2VyQWdlbnQgPSAoKSA9PiAoaXNOb2RlKCkgPyAnbm9kZScgOiBuYXZpZ2F0b3IudXNlckFnZW50KTtcclxuZXhwb3J0IGNvbnN0IGlzRmlyZWZveCA9ICgpID0+IHVzZXJBZ2VudCgpLmluY2x1ZGVzKCdGaXJlZm94Jyk7XHJcbmV4cG9ydCBjb25zdCBpc1NhZmFyaSA9ICgpID0+IC9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QodXNlckFnZW50KCkpO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEdWNrREJCdW5kbGVzIHtcclxuICAgIG12cDoge1xyXG4gICAgICAgIG1haW5Nb2R1bGU6IHN0cmluZztcclxuICAgICAgICBtYWluV29ya2VyOiBzdHJpbmc7XHJcbiAgICB9O1xyXG4gICAgZWg/OiB7XHJcbiAgICAgICAgbWFpbk1vZHVsZTogc3RyaW5nO1xyXG4gICAgICAgIG1haW5Xb3JrZXI6IHN0cmluZztcclxuICAgIH07XHJcbiAgICBjb2k/OiB7XHJcbiAgICAgICAgbWFpbk1vZHVsZTogc3RyaW5nO1xyXG4gICAgICAgIG1haW5Xb3JrZXI6IHN0cmluZztcclxuICAgICAgICBwdGhyZWFkV29ya2VyOiBzdHJpbmc7XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0SnNEZWxpdnJCdW5kbGVzKCk6IER1Y2tEQkJ1bmRsZXMge1xyXG4gICAgY29uc3QganNkZWxpdnJfZGlzdF91cmwgPSBgaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS8ke1BBQ0tBR0VfTkFNRX1AJHtQQUNLQUdFX1ZFUlNJT059L2Rpc3QvYDtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbXZwOiB7XHJcbiAgICAgICAgICAgIG1haW5Nb2R1bGU6IGAke2pzZGVsaXZyX2Rpc3RfdXJsfWR1Y2tkYi1tdnAud2FzbWAsXHJcbiAgICAgICAgICAgIG1haW5Xb3JrZXI6IGAke2pzZGVsaXZyX2Rpc3RfdXJsfWR1Y2tkYi1icm93c2VyLW12cC53b3JrZXIuanNgLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWg6IHtcclxuICAgICAgICAgICAgbWFpbk1vZHVsZTogYCR7anNkZWxpdnJfZGlzdF91cmx9ZHVja2RiLWVoLndhc21gLFxyXG4gICAgICAgICAgICBtYWluV29ya2VyOiBgJHtqc2RlbGl2cl9kaXN0X3VybH1kdWNrZGItYnJvd3Nlci1laC53b3JrZXIuanNgLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gQ09JIGlzIHN0aWxsIGV4cGVyaW1lbnRhbCwgbGV0IHRoZSB1c2VyIG9wdCBpbiBleHBsaWNpdGx5XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIER1Y2tEQkJ1bmRsZSB7XHJcbiAgICBtYWluTW9kdWxlOiBzdHJpbmc7XHJcbiAgICBtYWluV29ya2VyOiBzdHJpbmcgfCBudWxsO1xyXG4gICAgcHRocmVhZFdvcmtlcjogc3RyaW5nIHwgbnVsbDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQbGF0Zm9ybUZlYXR1cmVzIHtcclxuICAgIGJpZ0ludDY0QXJyYXk6IGJvb2xlYW47XHJcbiAgICBjcm9zc09yaWdpbklzb2xhdGVkOiBib29sZWFuO1xyXG4gICAgd2FzbUV4Y2VwdGlvbnM6IGJvb2xlYW47XHJcbiAgICB3YXNtU0lNRDogYm9vbGVhbjtcclxuICAgIHdhc21CdWxrTWVtb3J5OiBib29sZWFuO1xyXG4gICAgd2FzbVRocmVhZHM6IGJvb2xlYW47XHJcbn1cclxuXHJcbmxldCBiaWdJbnQ2NEFycmF5OiBib29sZWFuIHwgbnVsbCA9IG51bGw7XHJcbmxldCB3YXNtRXhjZXB0aW9uczogYm9vbGVhbiB8IG51bGwgPSBudWxsO1xyXG5sZXQgd2FzbVRocmVhZHM6IGJvb2xlYW4gfCBudWxsID0gbnVsbDtcclxubGV0IHdhc21TSU1EOiBib29sZWFuIHwgbnVsbCA9IG51bGw7XHJcbmxldCB3YXNtQnVsa01lbW9yeTogYm9vbGVhbiB8IG51bGwgPSBudWxsO1xyXG5cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2VcclxuZGVjbGFyZSBuYW1lc3BhY2UgZ2xvYmFsVGhpcyB7XHJcbiAgICBsZXQgY3Jvc3NPcmlnaW5Jc29sYXRlZDogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFBsYXRmb3JtRmVhdHVyZXMoKTogUHJvbWlzZTxQbGF0Zm9ybUZlYXR1cmVzPiB7XHJcbiAgICBpZiAoYmlnSW50NjRBcnJheSA9PSBudWxsKSB7XHJcbiAgICAgICAgYmlnSW50NjRBcnJheSA9IHR5cGVvZiBCaWdJbnQ2NEFycmF5ICE9ICd1bmRlZmluZWQnO1xyXG4gICAgfVxyXG4gICAgaWYgKHdhc21FeGNlcHRpb25zID09IG51bGwpIHtcclxuICAgICAgICB3YXNtRXhjZXB0aW9ucyA9IGF3YWl0IGNoZWNrLmV4Y2VwdGlvbnMoKTtcclxuICAgIH1cclxuICAgIGlmICh3YXNtVGhyZWFkcyA9PSBudWxsKSB7XHJcbiAgICAgICAgd2FzbVRocmVhZHMgPSBhd2FpdCBjaGVjay50aHJlYWRzKCk7XHJcbiAgICB9XHJcbiAgICBpZiAod2FzbVNJTUQgPT0gbnVsbCkge1xyXG4gICAgICAgIHdhc21TSU1EID0gYXdhaXQgY2hlY2suc2ltZCgpO1xyXG4gICAgfVxyXG4gICAgaWYgKHdhc21CdWxrTWVtb3J5ID09IG51bGwpIHtcclxuICAgICAgICB3YXNtQnVsa01lbW9yeSA9IGF3YWl0IGNoZWNrLmJ1bGtNZW1vcnkoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYmlnSW50NjRBcnJheTogYmlnSW50NjRBcnJheSEsXHJcbiAgICAgICAgY3Jvc3NPcmlnaW5Jc29sYXRlZDogaXNOb2RlKCkgfHwgZ2xvYmFsVGhpcy5jcm9zc09yaWdpbklzb2xhdGVkIHx8IGZhbHNlLFxyXG4gICAgICAgIHdhc21FeGNlcHRpb25zOiB3YXNtRXhjZXB0aW9ucyEsXHJcbiAgICAgICAgd2FzbVNJTUQ6IHdhc21TSU1EISxcclxuICAgICAgICB3YXNtVGhyZWFkczogd2FzbVRocmVhZHMhLFxyXG4gICAgICAgIHdhc21CdWxrTWVtb3J5OiB3YXNtQnVsa01lbW9yeSEsXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VsZWN0QnVuZGxlKGJ1bmRsZXM6IER1Y2tEQkJ1bmRsZXMpOiBQcm9taXNlPER1Y2tEQkJ1bmRsZT4ge1xyXG4gICAgY29uc3QgcGxhdGZvcm0gPSBhd2FpdCBnZXRQbGF0Zm9ybUZlYXR1cmVzKCk7XHJcbiAgICBpZiAocGxhdGZvcm0ud2FzbUV4Y2VwdGlvbnMpIHtcclxuICAgICAgICBpZiAocGxhdGZvcm0ud2FzbVNJTUQgJiYgcGxhdGZvcm0ud2FzbVRocmVhZHMgJiYgcGxhdGZvcm0uY3Jvc3NPcmlnaW5Jc29sYXRlZCAmJiBidW5kbGVzLmNvaSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgbWFpbk1vZHVsZTogYnVuZGxlcy5jb2kubWFpbk1vZHVsZSxcclxuICAgICAgICAgICAgICAgIG1haW5Xb3JrZXI6IGJ1bmRsZXMuY29pLm1haW5Xb3JrZXIsXHJcbiAgICAgICAgICAgICAgICBwdGhyZWFkV29ya2VyOiBidW5kbGVzLmNvaS5wdGhyZWFkV29ya2VyLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYnVuZGxlcy5laCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgbWFpbk1vZHVsZTogYnVuZGxlcy5laC5tYWluTW9kdWxlLFxyXG4gICAgICAgICAgICAgICAgbWFpbldvcmtlcjogYnVuZGxlcy5laC5tYWluV29ya2VyLFxyXG4gICAgICAgICAgICAgICAgcHRocmVhZFdvcmtlcjogbnVsbCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG1haW5Nb2R1bGU6IGJ1bmRsZXMubXZwLm1haW5Nb2R1bGUsXHJcbiAgICAgICAgbWFpbldvcmtlcjogYnVuZGxlcy5tdnAubWFpbldvcmtlcixcclxuICAgICAgICBwdGhyZWFkV29ya2VyOiBudWxsLFxyXG4gICAgfTtcclxufVxyXG4iLCAiaW1wb3J0IGZzIGZyb20gJ2ZzJztcclxuaW1wb3J0IHtcclxuICAgIER1Y2tEQlJ1bnRpbWUsXHJcbiAgICBEdWNrREJGaWxlSW5mbyxcclxuICAgIGNhbGxTUmV0LFxyXG4gICAgZHJvcFJlc3BvbnNlQnVmZmVycyxcclxuICAgIGZhaWxXaXRoLFxyXG4gICAgcmVhZFN0cmluZyxcclxuICAgIGRlY29kZVRleHQsXHJcbiAgICBEdWNrREJEYXRhUHJvdG9jb2wsXHJcbiAgICBGaWxlRmxhZ3MsXHJcbn0gZnJvbSAnLi9ydW50aW1lJztcclxuaW1wb3J0IHsgU3RhdHVzQ29kZSB9IGZyb20gJy4uL3N0YXR1cyc7XHJcbmltcG9ydCB7IER1Y2tEQk1vZHVsZSB9IGZyb20gJy4vZHVja2RiX21vZHVsZSc7XHJcbmltcG9ydCAqIGFzIGZnIGZyb20gJ2Zhc3QtZ2xvYic7XHJcbmltcG9ydCAqIGFzIHVkZiBmcm9tICcuL3VkZl9ydW50aW1lJztcclxuXHJcbmV4cG9ydCBjb25zdCBOT0RFX1JVTlRJTUU6IER1Y2tEQlJ1bnRpbWUgJiB7XHJcbiAgICBfZmlsZXNCeUlkOiBNYXA8bnVtYmVyLCBhbnk+O1xyXG4gICAgX2ZpbGVJbmZvQ2FjaGU6IE1hcDxudW1iZXIsIER1Y2tEQkZpbGVJbmZvPjtcclxuXHJcbiAgICByZXNvbHZlRmlsZUluZm8obW9kOiBEdWNrREJNb2R1bGUsIGZpbGVJZDogbnVtYmVyKTogRHVja0RCRmlsZUluZm8gfCBudWxsO1xyXG59ID0ge1xyXG4gICAgX2ZpbGVzOiBuZXcgTWFwPHN0cmluZywgYW55PigpLFxyXG4gICAgX2ZpbGVzQnlJZDogbmV3IE1hcDxudW1iZXIsIGFueT4oKSxcclxuICAgIF9maWxlSW5mb0NhY2hlOiBuZXcgTWFwPG51bWJlciwgRHVja0RCRmlsZUluZm8+KCksXHJcbiAgICBfdWRmRnVuY3Rpb25zOiBuZXcgTWFwKCksXHJcblxyXG4gICAgcmVzb2x2ZUZpbGVJbmZvKG1vZDogRHVja0RCTW9kdWxlLCBmaWxlSWQ6IG51bWJlcik6IER1Y2tEQkZpbGVJbmZvIHwgbnVsbCB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgY2FjaGVkID0gTk9ERV9SVU5USU1FLl9maWxlSW5mb0NhY2hlLmdldChmaWxlSWQpO1xyXG4gICAgICAgICAgICBjb25zdCBbcywgZCwgbl0gPSBjYWxsU1JldChcclxuICAgICAgICAgICAgICAgIG1vZCxcclxuICAgICAgICAgICAgICAgICdkdWNrZGJfd2ViX2ZzX2dldF9maWxlX2luZm9fYnlfaWQnLFxyXG4gICAgICAgICAgICAgICAgWydudW1iZXInLCAnbnVtYmVyJ10sXHJcbiAgICAgICAgICAgICAgICBbZmlsZUlkLCBjYWNoZWQ/LmNhY2hlRXBvY2ggfHwgMF0sXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGlmIChzICE9PSBTdGF0dXNDb2RlLlNVQ0NFU1MpIHtcclxuICAgICAgICAgICAgICAgIGZhaWxXaXRoKG1vZCwgcmVhZFN0cmluZyhtb2QsIGQsIG4pKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG4gPT09IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIEVwb2NoIGlzIHVwIHRvIGRhdGUgd2l0aCBXQVNNXHJcbiAgICAgICAgICAgICAgICBkcm9wUmVzcG9uc2VCdWZmZXJzKG1vZCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkITtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBpbmZvU3RyID0gcmVhZFN0cmluZyhtb2QsIGQsIG4pO1xyXG4gICAgICAgICAgICBkcm9wUmVzcG9uc2VCdWZmZXJzKG1vZCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZm8gPSBKU09OLnBhcnNlKGluZm9TdHIpIGFzIER1Y2tEQkZpbGVJbmZvO1xyXG4gICAgICAgICAgICBpZiAoaW5mbyA9PSBudWxsKSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgTk9ERV9SVU5USU1FLl9maWxlSW5mb0NhY2hlLnNldChmaWxlSWQsIGluZm8pO1xyXG4gICAgICAgICAgICByZXR1cm4gaW5mbyBhcyBEdWNrREJGaWxlSW5mbztcclxuICAgICAgICB9IGNhdGNoIChlOiBhbnkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgIGZhaWxXaXRoKG1vZCwgZS50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHRlc3RQbGF0Zm9ybUZlYXR1cmU6IChfbW9kOiBEdWNrREJNb2R1bGUsIGZlYXR1cmU6IG51bWJlcik6IGJvb2xlYW4gPT4ge1xyXG4gICAgICAgIHN3aXRjaCAoZmVhdHVyZSkge1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIEJpZ0ludDY0QXJyYXkgIT09ICd1bmRlZmluZWQnO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGB0ZXN0IGZvciB1bmtub3duIGZlYXR1cmU6ICR7ZmVhdHVyZX1gKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgZ2V0RGVmYXVsdERhdGFQcm90b2NvbChtb2Q6IER1Y2tEQk1vZHVsZSk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIER1Y2tEQkRhdGFQcm90b2NvbC5OT0RFX0ZTO1xyXG4gICAgfSxcclxuICAgIG9wZW5GaWxlKG1vZDogRHVja0RCTW9kdWxlLCBmaWxlSWQ6IG51bWJlciwgZmxhZ3M6IEZpbGVGbGFncyk6IG51bWJlciB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgTk9ERV9SVU5USU1FLl9maWxlSW5mb0NhY2hlLmRlbGV0ZShmaWxlSWQpO1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlID0gTk9ERV9SVU5USU1FLnJlc29sdmVGaWxlSW5mbyhtb2QsIGZpbGVJZCk7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZmlsZT8uZGF0YVByb3RvY29sKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBOYXRpdmUgZmlsZVxyXG4gICAgICAgICAgICAgICAgY2FzZSBEdWNrREJEYXRhUHJvdG9jb2wuTk9ERV9GUzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmZCA9IE5PREVfUlVOVElNRS5fZmlsZXM/LmdldChmaWxlLmRhdGFVcmwhKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmQgPT09IG51bGwgfHwgZmQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmZCA9IGZzLm9wZW5TeW5jKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZS5kYXRhVXJsISxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZzLmNvbnN0YW50cy5PX0NSRUFUIHwgZnMuY29uc3RhbnRzLk9fUkRXUixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZzLmNvbnN0YW50cy5TX0lSVVNSIHwgZnMuY29uc3RhbnRzLlNfSVdVU1IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE5PREVfUlVOVElNRS5fZmlsZXNCeUlkPy5zZXQoZmlsZS5maWxlSWQhLCBmZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVTaXplID0gZnMuZnN0YXRTeW5jKGZkKS5zaXplO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG1vZC5fbWFsbG9jKDIgKiA4KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2QuSEVBUEY2NFsocmVzdWx0ID4+IDMpICsgMF0gPSArZmlsZVNpemU7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kLkhFQVBGNjRbKHJlc3VsdCA+PiAzKSArIDFdID0gMDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBEdWNrREJEYXRhUHJvdG9jb2wuQlJPV1NFUl9GSUxFUkVBREVSOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBEdWNrREJEYXRhUHJvdG9jb2wuQlJPV1NFUl9GU0FDQ0VTUzpcclxuICAgICAgICAgICAgICAgIGNhc2UgRHVja0RCRGF0YVByb3RvY29sLkhUVFA6XHJcbiAgICAgICAgICAgICAgICBjYXNlIER1Y2tEQkRhdGFQcm90b2NvbC5TMzpcclxuICAgICAgICAgICAgICAgICAgICBmYWlsV2l0aChtb2QsICdVbnN1cHBvcnRlZCBkYXRhIHByb3RvY29sJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlOiBhbnkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgIGZhaWxXaXRoKG1vZCwgZS50b1N0cmluZygpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9LFxyXG4gICAgc3luY0ZpbGU6IChfbW9kOiBEdWNrREJNb2R1bGUsIF9maWxlSWQ6IG51bWJlcikgPT4ge30sXHJcbiAgICBjbG9zZUZpbGU6IChtb2Q6IER1Y2tEQk1vZHVsZSwgZmlsZUlkOiBudW1iZXIpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBmaWxlSW5mbyA9IE5PREVfUlVOVElNRS5fZmlsZUluZm9DYWNoZS5nZXQoZmlsZUlkKTtcclxuICAgICAgICAgICAgTk9ERV9SVU5USU1FLl9maWxlSW5mb0NhY2hlLmRlbGV0ZShmaWxlSWQpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGZpbGVJbmZvPy5kYXRhUHJvdG9jb2wpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgRHVja0RCRGF0YVByb3RvY29sLk5PREVfRlM6IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlSGFuZGxlID0gTk9ERV9SVU5USU1FLl9maWxlc0J5SWQuZ2V0KGZpbGVJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgTk9ERV9SVU5USU1FLl9maWxlc0J5SWQuZGVsZXRlKGZpbGVJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVIYW5kbGUgIT09IG51bGwgJiYgZmlsZUhhbmRsZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZzLmNsb3NlU3luYyhmaWxlSGFuZGxlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIER1Y2tEQkRhdGFQcm90b2NvbC5CUk9XU0VSX0ZJTEVSRUFERVI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIER1Y2tEQkRhdGFQcm90b2NvbC5CUk9XU0VSX0ZTQUNDRVNTOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBEdWNrREJEYXRhUHJvdG9jb2wuSFRUUDpcclxuICAgICAgICAgICAgICAgIGNhc2UgRHVja0RCRGF0YVByb3RvY29sLlMzOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZTogYW55KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICBmYWlsV2l0aChtb2QsIGUudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfSxcclxuICAgIHRydW5jYXRlRmlsZTogKG1vZDogRHVja0RCTW9kdWxlLCBmaWxlSWQ6IG51bWJlciwgbmV3U2l6ZTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgZmlsZSA9IE5PREVfUlVOVElNRS5yZXNvbHZlRmlsZUluZm8obW9kLCBmaWxlSWQpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGZpbGU/LmRhdGFQcm90b2NvbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBEdWNrREJEYXRhUHJvdG9jb2wuTk9ERV9GUzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZzLnRydW5jYXRlU3luYyhmaWxlLmRhdGFVcmwhLCBuZXdTaXplKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgRHVja0RCRGF0YVByb3RvY29sLkJST1dTRVJfRklMRVJFQURFUjpcclxuICAgICAgICAgICAgICAgIGNhc2UgRHVja0RCRGF0YVByb3RvY29sLkJST1dTRVJfRlNBQ0NFU1M6XHJcbiAgICAgICAgICAgICAgICBjYXNlIER1Y2tEQkRhdGFQcm90b2NvbC5IVFRQOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBEdWNrREJEYXRhUHJvdG9jb2wuUzM6XHJcbiAgICAgICAgICAgICAgICAgICAgZmFpbFdpdGgobW9kLCAnVW5zdXBwb3J0ZWQgZGF0YSBwcm90b2NvbCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZTogYW55KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICBmYWlsV2l0aChtb2QsIGUudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfSxcclxuICAgIHJlYWRGaWxlOiAobW9kOiBEdWNrREJNb2R1bGUsIGZpbGVJZDogbnVtYmVyLCBidWY6IG51bWJlciwgYnl0ZXM6IG51bWJlciwgbG9jYXRpb246IG51bWJlcikgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBOT0RFX1JVTlRJTUUucmVzb2x2ZUZpbGVJbmZvKG1vZCwgZmlsZUlkKTtcclxuICAgICAgICAgICAgc3dpdGNoIChmaWxlPy5kYXRhUHJvdG9jb2wpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgRHVja0RCRGF0YVByb3RvY29sLk5PREVfRlM6IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlSGFuZGxlID0gTk9ERV9SVU5USU1FLl9maWxlc0J5SWQuZ2V0KGZpbGVJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVIYW5kbGUgPT09IG51bGwgfHwgZmlsZUhhbmRsZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhaWxXaXRoKG1vZCwgYEZpbGUgJHtmaWxlSWR9IGlzIG1pc3NpbmcgYSBmaWxlIGRlc2NyaXB0b3JgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmcy5yZWFkU3luYyhmaWxlSGFuZGxlLCBtb2QuSEVBUFU4LCBidWYsIGJ5dGVzLCBsb2NhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIER1Y2tEQkRhdGFQcm90b2NvbC5CUk9XU0VSX0ZJTEVSRUFERVI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIER1Y2tEQkRhdGFQcm90b2NvbC5CUk9XU0VSX0ZTQUNDRVNTOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBEdWNrREJEYXRhUHJvdG9jb2wuSFRUUDpcclxuICAgICAgICAgICAgICAgIGNhc2UgRHVja0RCRGF0YVByb3RvY29sLlMzOlxyXG4gICAgICAgICAgICAgICAgICAgIGZhaWxXaXRoKG1vZCwgJ1Vuc3VwcG9ydGVkIGRhdGEgcHJvdG9jb2wnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGU6IGFueSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgZmFpbFdpdGgobW9kLCBlLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH0sXHJcbiAgICB3cml0ZUZpbGU6IChtb2Q6IER1Y2tEQk1vZHVsZSwgZmlsZUlkOiBudW1iZXIsIGJ1ZjogbnVtYmVyLCBieXRlczogbnVtYmVyLCBsb2NhdGlvbjogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgZmlsZSA9IE5PREVfUlVOVElNRS5yZXNvbHZlRmlsZUluZm8obW9kLCBmaWxlSWQpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGZpbGU/LmRhdGFQcm90b2NvbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBEdWNrREJEYXRhUHJvdG9jb2wuTk9ERV9GUzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVIYW5kbGUgPSBOT0RFX1JVTlRJTUUuX2ZpbGVzQnlJZC5nZXQoZmlsZUlkKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUhhbmRsZSA9PT0gbnVsbCB8fCBmaWxlSGFuZGxlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFpbFdpdGgobW9kLCBgRmlsZSAke2ZpbGVJZH0gaXMgbWlzc2luZyBhIGZpbGUgZGVzY3JpcHRvcmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3JjID0gbW9kLkhFQVBVOC5zdWJhcnJheShidWYsIGJ1ZiArIGJ5dGVzKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnMud3JpdGVTeW5jKGZpbGVIYW5kbGUsIHNyYywgMCwgc3JjLmxlbmd0aCwgbG9jYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBEdWNrREJEYXRhUHJvdG9jb2wuQlJPV1NFUl9GSUxFUkVBREVSOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBEdWNrREJEYXRhUHJvdG9jb2wuQlJPV1NFUl9GU0FDQ0VTUzpcclxuICAgICAgICAgICAgICAgIGNhc2UgRHVja0RCRGF0YVByb3RvY29sLkhUVFA6XHJcbiAgICAgICAgICAgICAgICBjYXNlIER1Y2tEQkRhdGFQcm90b2NvbC5TMzpcclxuICAgICAgICAgICAgICAgICAgICBmYWlsV2l0aChtb2QsICdVbnN1cHBvcnRlZCBkYXRhIHByb3RvY29sJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlOiBhbnkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgIGZhaWxXaXRoKG1vZCwgZS50b1N0cmluZygpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9LFxyXG4gICAgZ2V0TGFzdEZpbGVNb2RpZmljYXRpb25UaW1lOiAobW9kOiBEdWNrREJNb2R1bGUsIGZpbGVJZDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgZmlsZSA9IE5PREVfUlVOVElNRS5yZXNvbHZlRmlsZUluZm8obW9kLCBmaWxlSWQpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGZpbGU/LmRhdGFQcm90b2NvbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBEdWNrREJEYXRhUHJvdG9jb2wuTk9ERV9GUzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVIYW5kbGUgPSBOT0RFX1JVTlRJTUUuX2ZpbGVzQnlJZC5nZXQoZmlsZUlkKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUhhbmRsZSA9PT0gbnVsbCB8fCBmaWxlSGFuZGxlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFpbFdpdGgobW9kLCBgRmlsZSAke2ZpbGVJZH0gaXMgbWlzc2luZyBhIGZpbGUgZGVzY3JpcHRvcmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZzLmZzdGF0U3luYyhmaWxlSGFuZGxlISkubXRpbWUuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBEdWNrREJEYXRhUHJvdG9jb2wuQlJPV1NFUl9GSUxFUkVBREVSOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBEdWNrREJEYXRhUHJvdG9jb2wuQlJPV1NFUl9GU0FDQ0VTUzpcclxuICAgICAgICAgICAgICAgIGNhc2UgRHVja0RCRGF0YVByb3RvY29sLkhUVFA6XHJcbiAgICAgICAgICAgICAgICBjYXNlIER1Y2tEQkRhdGFQcm90b2NvbC5TMzpcclxuICAgICAgICAgICAgICAgICAgICBmYWlsV2l0aChtb2QsICdVbnN1cHBvcnRlZCBkYXRhIHByb3RvY29sJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlOiBhbnkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgIGZhaWxXaXRoKG1vZCwgZS50b1N0cmluZygpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9LFxyXG5cclxuICAgIGNoZWNrRGlyZWN0b3J5OiAobW9kOiBEdWNrREJNb2R1bGUsIHBhdGhQdHI6IG51bWJlciwgcGF0aExlbjogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGRlY29kZVRleHQobW9kLkhFQVBVOC5zdWJhcnJheShwYXRoUHRyLCBwYXRoUHRyICsgcGF0aExlbikpO1xyXG4gICAgICAgICAgICByZXR1cm4gZnMuZXhpc3RzU3luYyhwYXRoKTtcclxuICAgICAgICB9IGNhdGNoIChlOiBhbnkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgIGZhaWxXaXRoKG1vZCwgZS50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGVEaXJlY3Rvcnk6IChtb2Q6IER1Y2tEQk1vZHVsZSwgcGF0aFB0cjogbnVtYmVyLCBwYXRoTGVuOiBudW1iZXIpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBwYXRoID0gZGVjb2RlVGV4dChtb2QuSEVBUFU4LnN1YmFycmF5KHBhdGhQdHIsIHBhdGhQdHIgKyBwYXRoTGVuKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBmcy5ta2RpclN5bmMocGF0aCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZTogYW55KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICBmYWlsV2l0aChtb2QsIGUudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICByZW1vdmVEaXJlY3Rvcnk6IChtb2Q6IER1Y2tEQk1vZHVsZSwgcGF0aFB0cjogbnVtYmVyLCBwYXRoTGVuOiBudW1iZXIpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBwYXRoID0gZGVjb2RlVGV4dChtb2QuSEVBUFU4LnN1YmFycmF5KHBhdGhQdHIsIHBhdGhQdHIgKyBwYXRoTGVuKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBmcy5ybWRpclN5bmMocGF0aCk7XHJcbiAgICAgICAgfSBjYXRjaCAoZTogYW55KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICBmYWlsV2l0aChtb2QsIGUudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBsaXN0RGlyZWN0b3J5RW50cmllczogKG1vZDogRHVja0RCTW9kdWxlLCBfcGF0aFB0cjogbnVtYmVyLCBfcGF0aExlbjogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgZmFpbFdpdGgobW9kLCAnTm90IEltcGxlbWVudGVkJyk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGdsb2I6IChtb2Q6IER1Y2tEQk1vZHVsZSwgcGF0aFB0cjogbnVtYmVyLCBwYXRoTGVuOiBudW1iZXIpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBwYXRoID0gcmVhZFN0cmluZyhtb2QsIHBhdGhQdHIsIHBhdGhMZW4pO1xyXG4gICAgICAgICAgICBjb25zdCBlbnRyaWVzID0gZmcuc3luYyhbcGF0aF0sIHsgZG90OiB0cnVlIH0pO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcclxuICAgICAgICAgICAgICAgIG1vZC5jY2FsbCgnZHVja2RiX3dlYl9mc19nbG9iX2FkZF9wYXRoJywgbnVsbCwgWydzdHJpbmcnXSwgW2VudHJ5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlOiBhbnkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgIGZhaWxXaXRoKG1vZCwgZS50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG1vdmVGaWxlOiAobW9kOiBEdWNrREJNb2R1bGUsIGZyb21QdHI6IG51bWJlciwgZnJvbUxlbjogbnVtYmVyLCB0b1B0cjogbnVtYmVyLCB0b0xlbjogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZnJvbSA9IHJlYWRTdHJpbmcobW9kLCBmcm9tUHRyLCBmcm9tTGVuKTtcclxuICAgICAgICBjb25zdCB0byA9IHJlYWRTdHJpbmcobW9kLCB0b1B0ciwgdG9MZW4pO1xyXG4gICAgICAgIGNvbnN0IGhhbmRsZSA9IE5PREVfUlVOVElNRS5fZmlsZXM/LmdldChmcm9tKTtcclxuICAgICAgICBpZiAoaGFuZGxlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgTk9ERV9SVU5USU1FLl9maWxlcyEuZGVsZXRlKGhhbmRsZSk7XHJcbiAgICAgICAgICAgIE5PREVfUlVOVElNRS5fZmlsZXMhLnNldCh0bywgaGFuZGxlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgTk9ERV9SVU5USU1FLl9maWxlSW5mb0NhY2hlPy5lbnRyaWVzKCkgfHwgW10pIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlLmRhdGFVcmwgPT0gZnJvbSkge1xyXG4gICAgICAgICAgICAgICAgTk9ERV9SVU5USU1FLl9maWxlSW5mb0NhY2hlLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG4gICAgY2hlY2tGaWxlOiAobW9kOiBEdWNrREJNb2R1bGUsIHBhdGhQdHI6IG51bWJlciwgcGF0aExlbjogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGRlY29kZVRleHQobW9kLkhFQVBVOC5zdWJhcnJheShwYXRoUHRyLCBwYXRoUHRyICsgcGF0aExlbikpO1xyXG4gICAgICAgICAgICByZXR1cm4gZnMuZXhpc3RzU3luYyhwYXRoKTtcclxuICAgICAgICB9IGNhdGNoIChlOiBhbnkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgIGZhaWxXaXRoKG1vZCwgZS50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICByZW1vdmVGaWxlOiAobW9kOiBEdWNrREJNb2R1bGUsIHBhdGhQdHI6IG51bWJlciwgcGF0aExlbjogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGRlY29kZVRleHQobW9kLkhFQVBVOC5zdWJhcnJheShwYXRoUHRyLCBwYXRoUHRyICsgcGF0aExlbikpO1xyXG4gICAgICAgICAgICByZXR1cm4gZnMucm1TeW5jKHBhdGgpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGU6IGFueSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgZmFpbFdpdGgobW9kLCBlLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY2FsbFNjYWxhclVERjogKFxyXG4gICAgICAgIG1vZDogRHVja0RCTW9kdWxlLFxyXG4gICAgICAgIHJlc3BvbnNlOiBudW1iZXIsXHJcbiAgICAgICAgZnVuY0lkOiBudW1iZXIsXHJcbiAgICAgICAgZGVzY1B0cjogbnVtYmVyLFxyXG4gICAgICAgIGRlc2NTaXplOiBudW1iZXIsXHJcbiAgICAgICAgcHRyc1B0cjogbnVtYmVyLFxyXG4gICAgICAgIHB0cnNTaXplOiBudW1iZXIsXHJcbiAgICApOiB2b2lkID0+IHtcclxuICAgICAgICB1ZGYuY2FsbFNjYWxhclVERihOT0RFX1JVTlRJTUUsIG1vZCwgcmVzcG9uc2UsIGZ1bmNJZCwgZGVzY1B0ciwgZGVzY1NpemUsIHB0cnNQdHIsIHB0cnNTaXplKTtcclxuICAgIH0sXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBOT0RFX1JVTlRJTUU7XHJcbiIsICJpbXBvcnQgRHVja0RCV2FzbSBmcm9tICcuL2R1Y2tkYi1tdnAuanMnO1xyXG5pbXBvcnQgeyBEdWNrREJOb2RlQmluZGluZ3MgfSBmcm9tICcuL2JpbmRpbmdzX25vZGVfYmFzZS5qcyc7XHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2xvZy5qcyc7XHJcbmltcG9ydCB7IER1Y2tEQk1vZHVsZSB9IGZyb20gJy4vZHVja2RiX21vZHVsZSc7XHJcbmltcG9ydCB7IER1Y2tEQlJ1bnRpbWUgfSBmcm9tICcuL3J1bnRpbWUnO1xyXG5cclxuLyoqIER1Y2tEQiBiaW5kaW5ncyBmb3Igbm9kZS5qcyAqL1xyXG5leHBvcnQgY2xhc3MgRHVja0RCIGV4dGVuZHMgRHVja0RCTm9kZUJpbmRpbmdzIHtcclxuICAgIC8qKiBDb25zdHJ1Y3RvciAqL1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIGxvZ2dlcjogTG9nZ2VyLFxyXG4gICAgICAgIHJ1bnRpbWU6IER1Y2tEQlJ1bnRpbWUsXHJcbiAgICAgICAgbWFpbk1vZHVsZVBhdGg6IHN0cmluZyxcclxuICAgICAgICBwdGhyZWFkV29ya2VyUGF0aDogc3RyaW5nIHwgbnVsbCA9IG51bGwsXHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcihsb2dnZXIsIHJ1bnRpbWUsIG1haW5Nb2R1bGVQYXRoLCBwdGhyZWFkV29ya2VyUGF0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEluc3RhbnRpYXRlIHRoZSBiaW5kaW5ncyAqL1xyXG4gICAgcHJvdGVjdGVkIGluc3RhbnRpYXRlSW1wbChtb2R1bGVPdmVycmlkZXM6IFBhcnRpYWw8RHVja0RCTW9kdWxlPik6IFByb21pc2U8RHVja0RCTW9kdWxlPiB7XHJcbiAgICAgICAgcmV0dXJuIER1Y2tEQldhc20oe1xyXG4gICAgICAgICAgICAuLi5tb2R1bGVPdmVycmlkZXMsXHJcbiAgICAgICAgICAgIGluc3RhbnRpYXRlV2FzbTogdGhpcy5pbnN0YW50aWF0ZVdhc20uYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgbG9jYXRlRmlsZTogdGhpcy5sb2NhdGVGaWxlLmJpbmQodGhpcyksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IER1Y2tEQjtcclxuIiwgImltcG9ydCBEdWNrREJXYXNtIGZyb20gJy4vZHVja2RiLW12cC5qcyc7XHJcbmltcG9ydCB7IER1Y2tEQk1vZHVsZSB9IGZyb20gJy4vZHVja2RiX21vZHVsZSc7XHJcbmltcG9ydCB7IER1Y2tEQkJpbmRpbmdzQmFzZSB9IGZyb20gJy4vYmluZGluZ3NfYmFzZSc7XHJcbmltcG9ydCB7IER1Y2tEQlJ1bnRpbWUgfSBmcm9tICcuL3J1bnRpbWUnO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9sb2cnO1xyXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXZhclxyXG4gICAgdmFyIERVQ0tEQl9SVU5USU1FOiBhbnk7XHJcbn1cclxuXHJcbi8qKiBEdWNrREIgYmluZGluZ3MgZm9yIG5vZGUuanMgKi9cclxuZXhwb3J0IGNsYXNzIER1Y2tEQk5vZGVCaW5kaW5ncyBleHRlbmRzIER1Y2tEQkJpbmRpbmdzQmFzZSB7XHJcbiAgICAvKiogVGhlIHBhdGggb2YgdGhlIHdhc20gbW9kdWxlICovXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgbWFpbk1vZHVsZVBhdGg6IHN0cmluZztcclxuICAgIC8qKiBUaGUgcGF0aCBvZiB0aGUgcHRocmVhZCB3b3JrZXIgc2NyaXB0ICovXHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgcHRocmVhZFdvcmtlclBhdGg6IHN0cmluZyB8IG51bGw7XHJcblxyXG4gICAgLyoqIENvbnN0cnVjdG9yICovXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICAgICAgbG9nZ2VyOiBMb2dnZXIsXHJcbiAgICAgICAgcnVudGltZTogRHVja0RCUnVudGltZSxcclxuICAgICAgICBtYWluTW9kdWxlUGF0aDogc3RyaW5nLFxyXG4gICAgICAgIHB0aHJlYWRXb3JrZXJQYXRoOiBzdHJpbmcgfCBudWxsLFxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIobG9nZ2VyLCBydW50aW1lKTtcclxuICAgICAgICB0aGlzLm1haW5Nb2R1bGVQYXRoID0gbWFpbk1vZHVsZVBhdGg7XHJcbiAgICAgICAgdGhpcy5wdGhyZWFkV29ya2VyUGF0aCA9IHB0aHJlYWRXb3JrZXJQYXRoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBMb2NhdGUgYSBmaWxlICovXHJcbiAgICBwcm90ZWN0ZWQgbG9jYXRlRmlsZShwYXRoOiBzdHJpbmcsIHByZWZpeDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAocGF0aC5lbmRzV2l0aCgnLndhc20nKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYWluTW9kdWxlUGF0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhdGguZW5kc1dpdGgoJy53b3JrZXIuanMnKSkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMucHRocmVhZFdvcmtlclBhdGgpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBEdWNrREIgd29ya2VyIHBhdGghJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHRocmVhZFdvcmtlclBhdGghO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFdBU00gaW5zdGFudGlhdGlvbiByZXF1ZXN0ZWQgdW5leHBlY3RlZCBmaWxlOiBwcmVmaXg9JHtwcmVmaXh9IHBhdGg9JHtwYXRofWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBJbnN0YW50aWF0ZSB0aGUgd2FzbSBtb2R1bGUgKi9cclxuICAgIHByb3RlY3RlZCBpbnN0YW50aWF0ZVdhc20oXHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcclxuICAgICAgICBpbXBvcnRzOiBhbnksXHJcbiAgICAgICAgc3VjY2VzczogKGluc3RhbmNlOiBXZWJBc3NlbWJseS5JbnN0YW5jZSwgbW9kdWxlOiBXZWJBc3NlbWJseS5Nb2R1bGUpID0+IHZvaWQsXHJcbiAgICApOiBFbXNjcmlwdGVuLldlYkFzc2VtYmx5RXhwb3J0cyB7XHJcbiAgICAgICAgZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRSA9IHt9O1xyXG4gICAgICAgIGZvciAoY29uc3QgZnVuYyBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLl9ydW50aW1lKSkge1xyXG4gICAgICAgICAgICBpZiAoZnVuYyA9PSAnY29uc3RydWN0b3InKSBjb250aW51ZTtcclxuICAgICAgICAgICAgZ2xvYmFsVGhpcy5EVUNLREJfUlVOVElNRVtmdW5jXSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcy5fcnVudGltZSwgZnVuYykhLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBidWYgPSBmcy5yZWFkRmlsZVN5bmModGhpcy5tYWluTW9kdWxlUGF0aCk7XHJcbiAgICAgICAgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoYnVmLCBpbXBvcnRzKS50aGVuKG91dHB1dCA9PiB7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3Mob3V0cHV0Lmluc3RhbmNlLCBvdXRwdXQubW9kdWxlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEluc3RhbnRpYXRlIHRoZSBiaW5kaW5ncyAqL1xyXG4gICAgcHJvdGVjdGVkIGluc3RhbnRpYXRlSW1wbChtb2R1bGVPdmVycmlkZXM6IFBhcnRpYWw8RHVja0RCTW9kdWxlPik6IFByb21pc2U8RHVja0RCTW9kdWxlPiB7XHJcbiAgICAgICAgcmV0dXJuIER1Y2tEQldhc20oe1xyXG4gICAgICAgICAgICAuLi5tb2R1bGVPdmVycmlkZXMsXHJcbiAgICAgICAgICAgIGluc3RhbnRpYXRlV2FzbTogdGhpcy5pbnN0YW50aWF0ZVdhc20uYmluZCh0aGlzKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iLCAiaW1wb3J0IER1Y2tEQldhc20gZnJvbSAnLi9kdWNrZGItZWguanMnO1xyXG5pbXBvcnQgeyBEdWNrREJNb2R1bGUgfSBmcm9tICcuL2R1Y2tkYl9tb2R1bGUnO1xyXG5pbXBvcnQgeyBEdWNrREJOb2RlQmluZGluZ3MgfSBmcm9tICcuL2JpbmRpbmdzX25vZGVfYmFzZS5qcyc7XHJcbmltcG9ydCB7IER1Y2tEQlJ1bnRpbWUgfSBmcm9tICcuL3J1bnRpbWUnO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9sb2cnO1xyXG5cclxuLyoqIER1Y2tEQiBiaW5kaW5ncyBmb3Igbm9kZS5qcyAqL1xyXG5leHBvcnQgY2xhc3MgRHVja0RCIGV4dGVuZHMgRHVja0RCTm9kZUJpbmRpbmdzIHtcclxuICAgIC8qKiBDb25zdHJ1Y3RvciAqL1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIGxvZ2dlcjogTG9nZ2VyLFxyXG4gICAgICAgIHJ1bnRpbWU6IER1Y2tEQlJ1bnRpbWUsXHJcbiAgICAgICAgbWFpbk1vZHVsZVBhdGg6IHN0cmluZyxcclxuICAgICAgICBwdGhyZWFkV29ya2VyUGF0aDogc3RyaW5nIHwgbnVsbCA9IG51bGwsXHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcihsb2dnZXIsIHJ1bnRpbWUsIG1haW5Nb2R1bGVQYXRoLCBwdGhyZWFkV29ya2VyUGF0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEluc3RhbnRpYXRlIHRoZSBiaW5kaW5ncyAqL1xyXG4gICAgcHJvdGVjdGVkIGluc3RhbnRpYXRlSW1wbChtb2R1bGVPdmVycmlkZXM6IFBhcnRpYWw8RHVja0RCTW9kdWxlPik6IFByb21pc2U8RHVja0RCTW9kdWxlPiB7XHJcbiAgICAgICAgcmV0dXJuIER1Y2tEQldhc20oe1xyXG4gICAgICAgICAgICAuLi5tb2R1bGVPdmVycmlkZXMsXHJcbiAgICAgICAgICAgIGluc3RhbnRpYXRlV2FzbTogdGhpcy5pbnN0YW50aWF0ZVdhc20uYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgbG9jYXRlRmlsZTogdGhpcy5sb2NhdGVGaWxlLmJpbmQodGhpcyksXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IER1Y2tEQjtcclxuIl0sCiAgIm1hcHBpbmdzIjogInlvQkFBQSxJQUFB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QUNMSCxFQUFRLEdBQ0QsSUFBSUksR0FBV0gsRUFBUUMsRUFBU0YsRUFBUSxHQUFJLFVBQVUsRUFHOUQsSUFBSUksR0FBVUgsRUFBUUMsRUFBU0YsRUFBUSxJQUFJLFVBQVUsQ0FDaEUiLAogICJuYW1lcyI6IFsicmVxdWlyZV9hcnJheSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiZmxhdHRlbiIsICJpdGVtcyIsICJjb2xsZWN0aW9uIiwgIml0ZW0iLCAic3BsaXRXaGVuIiwgInByZWRpY2F0ZSIsICJyZXN1bHQiLCAiZ3JvdXBJbmRleCIsICJyZXF1aXJlX2Vycm5vIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJpc0Vub2VudENvZGVFcnJvciIsICJlcnJvciIsICJyZXF1aXJlX2ZzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJEaXJlbnRGcm9tU3RhdHMiLCAibmFtZSIsICJzdGF0cyIsICJjcmVhdGVEaXJlbnRGcm9tU3RhdHMiLCAicmVxdWlyZV9wYXRoIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJwYXRoIiwgIkxFQURJTkdfRE9UX1NFR01FTlRfQ0hBUkFDVEVSU19DT1VOVCIsICJVTkVTQ0FQRURfR0xPQl9TWU1CT0xTX1JFIiwgInVuaXhpZnkiLCAiZmlsZXBhdGgiLCAibWFrZUFic29sdXRlIiwgImN3ZCIsICJlc2NhcGUiLCAicGF0dGVybiIsICJyZW1vdmVMZWFkaW5nRG90U2VnbWVudCIsICJlbnRyeSIsICJzZWNvbmRDaGFyYWN0ZXJ5IiwgInJlcXVpcmVfaXNfZXh0Z2xvYiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInN0ciIsICJtYXRjaCIsICJyZXF1aXJlX2lzX2dsb2IiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJpc0V4dGdsb2IiLCAiY2hhcnMiLCAic3RyaWN0Q2hlY2siLCAic3RyIiwgImluZGV4IiwgInBpcGVJbmRleCIsICJjbG9zZVNxdWFyZUluZGV4IiwgImNsb3NlQ3VybHlJbmRleCIsICJjbG9zZVBhcmVuSW5kZXgiLCAiYmFja1NsYXNoSW5kZXgiLCAib3BlbiIsICJjbG9zZSIsICJuIiwgInJlbGF4ZWRDaGVjayIsICJvcHRpb25zIiwgImNoZWNrIiwgInJlcXVpcmVfZ2xvYl9wYXJlbnQiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJpc0dsb2IiLCAicGF0aFBvc2l4RGlybmFtZSIsICJpc1dpbjMyIiwgInNsYXNoIiwgImJhY2tzbGFzaCIsICJlbmNsb3N1cmUiLCAiZ2xvYmJ5IiwgImVzY2FwZWQiLCAic3RyIiwgIm9wdHMiLCAib3B0aW9ucyIsICJyZXF1aXJlX3V0aWxzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJudW0iLCAibm9kZSIsICJ0eXBlIiwgIm1pbiIsICJtYXgiLCAic3RlcCIsICJsaW1pdCIsICJibG9jayIsICJuIiwgIm5vZGVzIiwgImFjYyIsICJhcmdzIiwgInJlc3VsdCIsICJmbGF0IiwgImFyciIsICJpIiwgImVsZSIsICJyZXF1aXJlX3N0cmluZ2lmeSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInV0aWxzIiwgImFzdCIsICJvcHRpb25zIiwgInN0cmluZ2lmeSIsICJub2RlIiwgInBhcmVudCIsICJpbnZhbGlkQmxvY2siLCAiaW52YWxpZE5vZGUiLCAib3V0cHV0IiwgImNoaWxkIiwgInJlcXVpcmVfaXNfbnVtYmVyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAibnVtIiwgInJlcXVpcmVfdG9fcmVnZXhfcmFuZ2UiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJpc051bWJlciIsICJ0b1JlZ2V4UmFuZ2UiLCAibWluIiwgIm1heCIsICJvcHRpb25zIiwgIm9wdHMiLCAicmVsYXgiLCAic2hvcnRoYW5kIiwgImNhcHR1cmUiLCAid3JhcCIsICJjYWNoZUtleSIsICJhIiwgImIiLCAicmVzdWx0IiwgImlzUGFkZGVkIiwgImhhc1BhZGRpbmciLCAic3RhdGUiLCAicG9zaXRpdmVzIiwgIm5lZ2F0aXZlcyIsICJuZXdNaW4iLCAic3BsaXRUb1BhdHRlcm5zIiwgImNvbGxhdGVQYXR0ZXJucyIsICJuZWciLCAicG9zIiwgIm9ubHlOZWdhdGl2ZSIsICJmaWx0ZXJQYXR0ZXJucyIsICJvbmx5UG9zaXRpdmUiLCAiaW50ZXJzZWN0ZWQiLCAic3BsaXRUb1JhbmdlcyIsICJuaW5lcyIsICJ6ZXJvcyIsICJzdG9wIiwgImNvdW50TmluZXMiLCAic3RvcHMiLCAiY291bnRaZXJvcyIsICJjb21wYXJlIiwgInJhbmdlVG9QYXR0ZXJuIiwgInN0YXJ0IiwgInppcHBlZCIsICJ6aXAiLCAiZGlnaXRzIiwgInBhdHRlcm4iLCAiY291bnQiLCAiaSIsICJzdGFydERpZ2l0IiwgInN0b3BEaWdpdCIsICJ0b0NoYXJhY3RlckNsYXNzIiwgInRvayIsICJyYW5nZXMiLCAidG9rZW5zIiwgInByZXYiLCAib2JqIiwgInRvUXVhbnRpZmllciIsICJwYWRaZXJvcyIsICJhcnIiLCAiY29tcGFyaXNvbiIsICJwcmVmaXgiLCAiaW50ZXJzZWN0aW9uIiwgImVsZSIsICJzdHJpbmciLCAiY29udGFpbnMiLCAia2V5IiwgInZhbCIsICJsZW4iLCAiaW50ZWdlciIsICJzdHIiLCAidmFsdWUiLCAiZGlmZiIsICJyZXF1aXJlX2ZpbGxfcmFuZ2UiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJ1dGlsIiwgInRvUmVnZXhSYW5nZSIsICJpc09iamVjdCIsICJ2YWwiLCAidHJhbnNmb3JtIiwgInRvTnVtYmVyIiwgInZhbHVlIiwgImlzVmFsaWRWYWx1ZSIsICJpc051bWJlciIsICJudW0iLCAiemVyb3MiLCAiaW5wdXQiLCAiaW5kZXgiLCAic3RyaW5naWZ5IiwgInN0YXJ0IiwgImVuZCIsICJvcHRpb25zIiwgInBhZCIsICJtYXhMZW5ndGgiLCAiZGFzaCIsICJ0b01heExlbiIsICJuZWdhdGl2ZSIsICJ0b1NlcXVlbmNlIiwgInBhcnRzIiwgImEiLCAiYiIsICJwcmVmaXgiLCAicG9zaXRpdmVzIiwgIm5lZ2F0aXZlcyIsICJyZXN1bHQiLCAidG9SYW5nZSIsICJpc051bWJlcnMiLCAic3RvcCIsICJ0b1JlZ2V4IiwgIndyYXAiLCAicmFuZ2VFcnJvciIsICJhcmdzIiwgImludmFsaWRSYW5nZSIsICJpbnZhbGlkU3RlcCIsICJzdGVwIiwgImZpbGxOdW1iZXJzIiwgImRlc2NlbmRpbmciLCAic3RhcnRTdHJpbmciLCAiZW5kU3RyaW5nIiwgInN0ZXBTdHJpbmciLCAicGFkZGVkIiwgIm1heExlbiIsICJmb3JtYXQiLCAicHVzaCIsICJyYW5nZSIsICJmaWxsTGV0dGVycyIsICJtaW4iLCAibWF4IiwgImZpbGwiLCAib3B0cyIsICJyZXF1aXJlX2NvbXBpbGUiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJmaWxsIiwgInV0aWxzIiwgImNvbXBpbGUiLCAiYXN0IiwgIm9wdGlvbnMiLCAid2FsayIsICJub2RlIiwgInBhcmVudCIsICJpbnZhbGlkQmxvY2siLCAiaW52YWxpZE5vZGUiLCAiaW52YWxpZCIsICJwcmVmaXgiLCAib3V0cHV0IiwgImFyZ3MiLCAicmFuZ2UiLCAiY2hpbGQiLCAicmVxdWlyZV9leHBhbmQiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJmaWxsIiwgInN0cmluZ2lmeSIsICJ1dGlscyIsICJhcHBlbmQiLCAicXVldWUiLCAic3Rhc2giLCAiZW5jbG9zZSIsICJyZXN1bHQiLCAiZWxlIiwgIml0ZW0iLCAidmFsdWUiLCAiZXhwYW5kIiwgImFzdCIsICJvcHRpb25zIiwgInJhbmdlTGltaXQiLCAid2FsayIsICJub2RlIiwgInBhcmVudCIsICJwIiwgInEiLCAiYXJncyIsICJyYW5nZSIsICJibG9jayIsICJpIiwgImNoaWxkIiwgInJlcXVpcmVfY29uc3RhbnRzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmVxdWlyZV9wYXJzZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInN0cmluZ2lmeSIsICJNQVhfTEVOR1RIIiwgIkNIQVJfQkFDS1NMQVNIIiwgIkNIQVJfQkFDS1RJQ0siLCAiQ0hBUl9DT01NQSIsICJDSEFSX0RPVCIsICJDSEFSX0xFRlRfUEFSRU5USEVTRVMiLCAiQ0hBUl9SSUdIVF9QQVJFTlRIRVNFUyIsICJDSEFSX0xFRlRfQ1VSTFlfQlJBQ0UiLCAiQ0hBUl9SSUdIVF9DVVJMWV9CUkFDRSIsICJDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVQiLCAiQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVCIsICJDSEFSX0RPVUJMRV9RVU9URSIsICJDSEFSX1NJTkdMRV9RVU9URSIsICJDSEFSX05PX0JSRUFLX1NQQUNFIiwgIkNIQVJfWkVST19XSURUSF9OT0JSRUFLX1NQQUNFIiwgInBhcnNlIiwgImlucHV0IiwgIm9wdGlvbnMiLCAib3B0cyIsICJtYXgiLCAiYXN0IiwgInN0YWNrIiwgImJsb2NrIiwgInByZXYiLCAiYnJhY2tldHMiLCAibGVuZ3RoIiwgImluZGV4IiwgImRlcHRoIiwgInZhbHVlIiwgIm1lbW8iLCAiYWR2YW5jZSIsICJwdXNoIiwgIm5vZGUiLCAiY2xvc2VkIiwgIm5leHQiLCAib3BlbiIsICJicmFjZSIsICJ0eXBlIiwgInNpYmxpbmdzIiwgImJlZm9yZSIsICJwYXJlbnQiLCAicmVxdWlyZV9icmFjZXMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJzdHJpbmdpZnkiLCAiY29tcGlsZSIsICJleHBhbmQiLCAicGFyc2UiLCAiYnJhY2VzIiwgImlucHV0IiwgIm9wdGlvbnMiLCAib3V0cHV0IiwgInBhdHRlcm4iLCAicmVzdWx0IiwgInJlcXVpcmVfY29uc3RhbnRzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicGF0aCIsICJXSU5fU0xBU0giLCAiV0lOX05PX1NMQVNIIiwgIkRPVF9MSVRFUkFMIiwgIlBMVVNfTElURVJBTCIsICJRTUFSS19MSVRFUkFMIiwgIlNMQVNIX0xJVEVSQUwiLCAiT05FX0NIQVIiLCAiUU1BUksiLCAiRU5EX0FOQ0hPUiIsICJTVEFSVF9BTkNIT1IiLCAiRE9UU19TTEFTSCIsICJOT19ET1QiLCAiTk9fRE9UUyIsICJOT19ET1RfU0xBU0giLCAiTk9fRE9UU19TTEFTSCIsICJRTUFSS19OT19ET1QiLCAiU1RBUiIsICJQT1NJWF9DSEFSUyIsICJXSU5ET1dTX0NIQVJTIiwgIlBPU0lYX1JFR0VYX1NPVVJDRSIsICJjaGFycyIsICJ3aW4zMiIsICJyZXF1aXJlX3V0aWxzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJwYXRoIiwgIndpbjMyIiwgIlJFR0VYX0JBQ0tTTEFTSCIsICJSRUdFWF9SRU1PVkVfQkFDS1NMQVNIIiwgIlJFR0VYX1NQRUNJQUxfQ0hBUlMiLCAiUkVHRVhfU1BFQ0lBTF9DSEFSU19HTE9CQUwiLCAidmFsIiwgInN0ciIsICJtYXRjaCIsICJzZWdzIiwgIm9wdGlvbnMiLCAiaW5wdXQiLCAiY2hhciIsICJsYXN0SWR4IiwgImlkeCIsICJzdGF0ZSIsICJvdXRwdXQiLCAicHJlcGVuZCIsICJhcHBlbmQiLCAicmVxdWlyZV9zY2FuIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAidXRpbHMiLCAiQ0hBUl9BU1RFUklTSyIsICJDSEFSX0FUIiwgIkNIQVJfQkFDS1dBUkRfU0xBU0giLCAiQ0hBUl9DT01NQSIsICJDSEFSX0RPVCIsICJDSEFSX0VYQ0xBTUFUSU9OX01BUksiLCAiQ0hBUl9GT1JXQVJEX1NMQVNIIiwgIkNIQVJfTEVGVF9DVVJMWV9CUkFDRSIsICJDSEFSX0xFRlRfUEFSRU5USEVTRVMiLCAiQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VUIiwgIkNIQVJfUExVUyIsICJDSEFSX1FVRVNUSU9OX01BUksiLCAiQ0hBUl9SSUdIVF9DVVJMWV9CUkFDRSIsICJDSEFSX1JJR0hUX1BBUkVOVEhFU0VTIiwgIkNIQVJfUklHSFRfU1FVQVJFX0JSQUNLRVQiLCAiaXNQYXRoU2VwYXJhdG9yIiwgImNvZGUiLCAiZGVwdGgiLCAidG9rZW4iLCAic2NhbiIsICJpbnB1dCIsICJvcHRpb25zIiwgIm9wdHMiLCAibGVuZ3RoIiwgInNjYW5Ub0VuZCIsICJzbGFzaGVzIiwgInRva2VucyIsICJwYXJ0cyIsICJzdHIiLCAiaW5kZXgiLCAic3RhcnQiLCAibGFzdEluZGV4IiwgImlzQnJhY2UiLCAiaXNCcmFja2V0IiwgImlzR2xvYiIsICJpc0V4dGdsb2IiLCAiaXNHbG9ic3RhciIsICJicmFjZUVzY2FwZWQiLCAiYmFja3NsYXNoZXMiLCAibmVnYXRlZCIsICJuZWdhdGVkRXh0Z2xvYiIsICJmaW5pc2hlZCIsICJicmFjZXMiLCAicHJldiIsICJlb3MiLCAicGVlayIsICJhZHZhbmNlIiwgIm5leHQiLCAiYmFzZSIsICJwcmVmaXgiLCAiZ2xvYiIsICJzdGF0ZSIsICJwcmV2SW5kZXgiLCAiaWR4IiwgIm4iLCAiaSIsICJ2YWx1ZSIsICJyZXF1aXJlX3BhcnNlIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiY29uc3RhbnRzIiwgInV0aWxzIiwgIk1BWF9MRU5HVEgiLCAiUE9TSVhfUkVHRVhfU09VUkNFIiwgIlJFR0VYX05PTl9TUEVDSUFMX0NIQVJTIiwgIlJFR0VYX1NQRUNJQUxfQ0hBUlNfQkFDS1JFRiIsICJSRVBMQUNFTUVOVFMiLCAiZXhwYW5kUmFuZ2UiLCAiYXJncyIsICJvcHRpb25zIiwgInZhbHVlIiwgInYiLCAic3ludGF4RXJyb3IiLCAidHlwZSIsICJjaGFyIiwgInBhcnNlIiwgImlucHV0IiwgIm9wdHMiLCAibWF4IiwgImxlbiIsICJib3MiLCAidG9rZW5zIiwgImNhcHR1cmUiLCAid2luMzIiLCAiUExBVEZPUk1fQ0hBUlMiLCAiRVhUR0xPQl9DSEFSUyIsICJET1RfTElURVJBTCIsICJQTFVTX0xJVEVSQUwiLCAiU0xBU0hfTElURVJBTCIsICJPTkVfQ0hBUiIsICJET1RTX1NMQVNIIiwgIk5PX0RPVCIsICJOT19ET1RfU0xBU0giLCAiTk9fRE9UU19TTEFTSCIsICJRTUFSSyIsICJRTUFSS19OT19ET1QiLCAiU1RBUiIsICJTVEFSVF9BTkNIT1IiLCAiZ2xvYnN0YXIiLCAibm9kb3QiLCAicW1hcmtOb0RvdCIsICJzdGFyIiwgInN0YXRlIiwgImV4dGdsb2JzIiwgImJyYWNlcyIsICJzdGFjayIsICJwcmV2IiwgImVvcyIsICJwZWVrIiwgIm4iLCAiYWR2YW5jZSIsICJyZW1haW5pbmciLCAiY29uc3VtZSIsICJudW0iLCAiYXBwZW5kIiwgInRva2VuIiwgIm5lZ2F0ZSIsICJjb3VudCIsICJpbmNyZW1lbnQiLCAiZGVjcmVtZW50IiwgInB1c2giLCAidG9rIiwgImlzQnJhY2UiLCAiaXNFeHRnbG9iIiwgImV4dGdsb2JPcGVuIiwgIm91dHB1dCIsICJleHRnbG9iQ2xvc2UiLCAicmVzdCIsICJleHRnbG9iU3RhciIsICJiYWNrc2xhc2hlcyIsICJtIiwgImVzYyIsICJjaGFycyIsICJmaXJzdCIsICJpbmRleCIsICJuZXh0IiwgIm1hdGNoIiwgInNsYXNoZXMiLCAiaW5uZXIiLCAiaWR4IiwgInByZSIsICJwb3NpeCIsICJleHRnbG9iIiwgInByZXZWYWx1ZSIsICJlc2NhcGVkIiwgIm9wZW4iLCAiYnJhY2UiLCAiYXJyIiwgInJhbmdlIiwgImkiLCAib3V0IiwgInRva3MiLCAidCIsICJwcmlvciIsICJiZWZvcmUiLCAiaXNTdGFydCIsICJhZnRlclN0YXIiLCAiYWZ0ZXIiLCAiZW5kIiwgIk5PX0RPVFMiLCAic2xhc2hEb3QiLCAiY3JlYXRlIiwgInN0ciIsICJzb3VyY2UiLCAicmVxdWlyZV9waWNvbWF0Y2giLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJwYXRoIiwgInNjYW4iLCAicGFyc2UiLCAidXRpbHMiLCAiY29uc3RhbnRzIiwgImlzT2JqZWN0IiwgInZhbCIsICJwaWNvbWF0Y2giLCAiZ2xvYiIsICJvcHRpb25zIiwgInJldHVyblN0YXRlIiwgImZucyIsICJpbnB1dCIsICJzdHIiLCAiaXNNYXRjaCIsICJzdGF0ZSIsICJpc1N0YXRlIiwgIm9wdHMiLCAicG9zaXgiLCAicmVnZXgiLCAiaXNJZ25vcmVkIiwgImlnbm9yZU9wdHMiLCAibWF0Y2hlciIsICJyZXR1cm5PYmplY3QiLCAibWF0Y2giLCAib3V0cHV0IiwgInJlc3VsdCIsICJmb3JtYXQiLCAicGF0dGVybnMiLCAicGF0dGVybiIsICJwIiwgInJldHVybk91dHB1dCIsICJwcmVwZW5kIiwgImFwcGVuZCIsICJzb3VyY2UiLCAicGFyc2VkIiwgImVyciIsICJyZXF1aXJlX3BpY29tYXRjaCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInJlcXVpcmVfbWljcm9tYXRjaCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInV0aWwiLCAiYnJhY2VzIiwgInBpY29tYXRjaCIsICJ1dGlscyIsICJpc0VtcHR5U3RyaW5nIiwgInZhbCIsICJtaWNyb21hdGNoIiwgImxpc3QiLCAicGF0dGVybnMiLCAib3B0aW9ucyIsICJvbWl0IiwgImtlZXAiLCAiaXRlbXMiLCAibmVnYXRpdmVzIiwgIm9uUmVzdWx0IiwgInN0YXRlIiwgImkiLCAiaXNNYXRjaCIsICJuZWdhdGVkIiwgIml0ZW0iLCAibWF0Y2hlZCIsICJtYXRjaGVzIiwgInAiLCAicGF0dGVybiIsICJzdHIiLCAicmVzdWx0IiwgIm9iaiIsICJrZXlzIiwgInJlcyIsICJrZXkiLCAiZ2xvYiIsICJpbnB1dCIsICJwb3NpeCIsICJtYXRjaCIsICJ2IiwgImFyZ3MiLCAicmVxdWlyZV9wYXR0ZXJuIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJwYXRoIiwgImdsb2JQYXJlbnQiLCAibWljcm9tYXRjaCIsICJHTE9CU1RBUiIsICJFU0NBUEVfU1lNQk9MIiwgIkNPTU1PTl9HTE9CX1NZTUJPTFNfUkUiLCAiUkVHRVhfQ0hBUkFDVEVSX0NMQVNTX1NZTUJPTFNfUkUiLCAiUkVHRVhfR1JPVVBfU1lNQk9MU19SRSIsICJHTE9CX0VYVEVOU0lPTl9TWU1CT0xTX1JFIiwgIkJSQUNFX0VYUEFOU0lPTl9TRVBBUkFUT1JTX1JFIiwgImlzU3RhdGljUGF0dGVybiIsICJwYXR0ZXJuIiwgIm9wdGlvbnMiLCAiaXNEeW5hbWljUGF0dGVybiIsICJoYXNCcmFjZUV4cGFuc2lvbiIsICJvcGVuaW5nQnJhY2VJbmRleCIsICJjbG9zaW5nQnJhY2VJbmRleCIsICJicmFjZUNvbnRlbnQiLCAiY29udmVydFRvUG9zaXRpdmVQYXR0ZXJuIiwgImlzTmVnYXRpdmVQYXR0ZXJuIiwgImNvbnZlcnRUb05lZ2F0aXZlUGF0dGVybiIsICJpc1Bvc2l0aXZlUGF0dGVybiIsICJnZXROZWdhdGl2ZVBhdHRlcm5zIiwgInBhdHRlcm5zIiwgImdldFBvc2l0aXZlUGF0dGVybnMiLCAiZ2V0UGF0dGVybnNJbnNpZGVDdXJyZW50RGlyZWN0b3J5IiwgImlzUGF0dGVyblJlbGF0ZWRUb1BhcmVudERpcmVjdG9yeSIsICJnZXRQYXR0ZXJuc091dHNpZGVDdXJyZW50RGlyZWN0b3J5IiwgImdldEJhc2VEaXJlY3RvcnkiLCAiaGFzR2xvYlN0YXIiLCAiZW5kc1dpdGhTbGFzaEdsb2JTdGFyIiwgImlzQWZmZWN0RGVwdGhPZlJlYWRpbmdQYXR0ZXJuIiwgImJhc2VuYW1lIiwgImV4cGFuZFBhdHRlcm5zV2l0aEJyYWNlRXhwYW5zaW9uIiwgImNvbGxlY3Rpb24iLCAiZXhwYW5kQnJhY2VFeHBhbnNpb24iLCAiZ2V0UGF0dGVyblBhcnRzIiwgInBhcnRzIiwgIm1ha2VSZSIsICJjb252ZXJ0UGF0dGVybnNUb1JlIiwgIm1hdGNoQW55IiwgImVudHJ5IiwgInBhdHRlcm5zUmUiLCAicGF0dGVyblJlIiwgInJlcXVpcmVfbWVyZ2UyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiU3RyZWFtIiwgIlBhc3NUaHJvdWdoIiwgInNsaWNlIiwgIm1lcmdlMiIsICJzdHJlYW1zUXVldWUiLCAiYXJncyIsICJtZXJnaW5nIiwgIm9wdGlvbnMiLCAiZG9FbmQiLCAiZG9QaXBlRXJyb3IiLCAibWVyZ2VkU3RyZWFtIiwgImFkZFN0cmVhbSIsICJpIiwgImxlbiIsICJwYXVzZVN0cmVhbXMiLCAibWVyZ2VTdHJlYW0iLCAic3RyZWFtcyIsICJlbmRTdHJlYW0iLCAicGlwZXNDb3VudCIsICJuZXh0IiwgInBpcGUiLCAic3RyZWFtIiwgIm9uZW5kIiwgIm9uZXJyb3IiLCAiZXJyIiwgInJlcXVpcmVfc3RyZWFtIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtZXJnZTIiLCAibWVyZ2UiLCAic3RyZWFtcyIsICJtZXJnZWRTdHJlYW0iLCAic3RyZWFtIiwgImVycm9yIiwgInByb3BhZ2F0ZUNsb3NlRXZlbnRUb1NvdXJjZXMiLCAicmVxdWlyZV9zdHJpbmciLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImlzU3RyaW5nIiwgImlucHV0IiwgImlzRW1wdHkiLCAicmVxdWlyZV91dGlscyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiYXJyYXkiLCAiZXJybm8iLCAiZnMiLCAicGF0aCIsICJwYXR0ZXJuIiwgInN0cmVhbSIsICJzdHJpbmciLCAicmVxdWlyZV90YXNrcyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAidXRpbHMiLCAiZ2VuZXJhdGUiLCAicGF0dGVybnMiLCAic2V0dGluZ3MiLCAicG9zaXRpdmVQYXR0ZXJucyIsICJnZXRQb3NpdGl2ZVBhdHRlcm5zIiwgIm5lZ2F0aXZlUGF0dGVybnMiLCAiZ2V0TmVnYXRpdmVQYXR0ZXJuc0FzUG9zaXRpdmUiLCAic3RhdGljUGF0dGVybnMiLCAicGF0dGVybiIsICJkeW5hbWljUGF0dGVybnMiLCAic3RhdGljVGFza3MiLCAiY29udmVydFBhdHRlcm5zVG9UYXNrcyIsICJkeW5hbWljVGFza3MiLCAicG9zaXRpdmUiLCAibmVnYXRpdmUiLCAiZHluYW1pYyIsICJ0YXNrcyIsICJwYXR0ZXJuc091dHNpZGVDdXJyZW50RGlyZWN0b3J5IiwgInBhdHRlcm5zSW5zaWRlQ3VycmVudERpcmVjdG9yeSIsICJvdXRzaWRlQ3VycmVudERpcmVjdG9yeUdyb3VwIiwgImdyb3VwUGF0dGVybnNCeUJhc2VEaXJlY3RvcnkiLCAiaW5zaWRlQ3VycmVudERpcmVjdG9yeUdyb3VwIiwgImNvbnZlcnRQYXR0ZXJuR3JvdXBzVG9UYXNrcyIsICJjb252ZXJ0UGF0dGVybkdyb3VwVG9UYXNrIiwgImlnbm9yZSIsICJncm91cCIsICJjb2xsZWN0aW9uIiwgImJhc2UiLCAicmVxdWlyZV9wYXR0ZXJucyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiRE9VQkxFX1NMQVNIX1JFIiwgInRyYW5zZm9ybSIsICJwYXR0ZXJucyIsICJwYXR0ZXJuIiwgInJlbW92ZUR1cGxpY2F0ZVNsYXNoZXMiLCAicmVxdWlyZV9hc3luYyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAicmVhZCIsICJwYXRoIiwgInNldHRpbmdzIiwgImNhbGxiYWNrIiwgImxzdGF0RXJyb3IiLCAibHN0YXQiLCAiY2FsbEZhaWx1cmVDYWxsYmFjayIsICJjYWxsU3VjY2Vzc0NhbGxiYWNrIiwgInN0YXRFcnJvciIsICJzdGF0IiwgImVycm9yIiwgInJlc3VsdCIsICJyZXF1aXJlX3N5bmMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInJlYWQiLCAicGF0aCIsICJzZXR0aW5ncyIsICJsc3RhdCIsICJzdGF0IiwgImVycm9yIiwgInJlcXVpcmVfZnMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImZzIiwgImNyZWF0ZUZpbGVTeXN0ZW1BZGFwdGVyIiwgImZzTWV0aG9kcyIsICJyZXF1aXJlX3NldHRpbmdzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJmcyIsICJTZXR0aW5ncyIsICJfb3B0aW9ucyIsICJvcHRpb24iLCAidmFsdWUiLCAicmVxdWlyZV9vdXQiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImFzeW5jIiwgInN5bmMiLCAic2V0dGluZ3NfMSIsICJzdGF0IiwgInBhdGgiLCAib3B0aW9uc09yU2V0dGluZ3NPckNhbGxiYWNrIiwgImNhbGxiYWNrIiwgImdldFNldHRpbmdzIiwgInN0YXRTeW5jIiwgIm9wdGlvbnNPclNldHRpbmdzIiwgInNldHRpbmdzIiwgInNldHRpbmdzT3JPcHRpb25zIiwgInJlcXVpcmVfcXVldWVfbWljcm90YXNrIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicHJvbWlzZSIsICJjYiIsICJlcnIiLCAicmVxdWlyZV9ydW5fcGFyYWxsZWwiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJydW5QYXJhbGxlbCIsICJxdWV1ZU1pY3JvdGFzayIsICJ0YXNrcyIsICJjYiIsICJyZXN1bHRzIiwgInBlbmRpbmciLCAia2V5cyIsICJpc1N5bmMiLCAiZG9uZSIsICJlcnIiLCAiZW5kIiwgImVhY2giLCAiaSIsICJyZXN1bHQiLCAia2V5IiwgInRhc2siLCAicmVxdWlyZV9jb25zdGFudHMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIk5PREVfUFJPQ0VTU19WRVJTSU9OX1BBUlRTIiwgIk1BSk9SX1ZFUlNJT04iLCAiTUlOT1JfVkVSU0lPTiIsICJTVVBQT1JURURfTUFKT1JfVkVSU0lPTiIsICJTVVBQT1JURURfTUlOT1JfVkVSU0lPTiIsICJJU19NQVRDSEVEX0JZX01BSk9SIiwgIklTX01BVENIRURfQllfTUFKT1JfQU5EX01JTk9SIiwgInJlcXVpcmVfZnMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIkRpcmVudEZyb21TdGF0cyIsICJuYW1lIiwgInN0YXRzIiwgImNyZWF0ZURpcmVudEZyb21TdGF0cyIsICJyZXF1aXJlX3V0aWxzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJmcyIsICJyZXF1aXJlX2NvbW1vbiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiam9pblBhdGhTZWdtZW50cyIsICJhIiwgImIiLCAic2VwYXJhdG9yIiwgInJlcXVpcmVfYXN5bmMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImZzU3RhdCIsICJycGwiLCAiY29uc3RhbnRzXzEiLCAidXRpbHMiLCAiY29tbW9uIiwgInJlYWQiLCAiZGlyZWN0b3J5IiwgInNldHRpbmdzIiwgImNhbGxiYWNrIiwgInJlYWRkaXJXaXRoRmlsZVR5cGVzIiwgInJlYWRkaXIiLCAicmVhZGRpckVycm9yIiwgImRpcmVudHMiLCAiY2FsbEZhaWx1cmVDYWxsYmFjayIsICJlbnRyaWVzIiwgImRpcmVudCIsICJjYWxsU3VjY2Vzc0NhbGxiYWNrIiwgInRhc2tzIiwgImVudHJ5IiwgIm1ha2VScGxUYXNrRW50cnkiLCAicnBsRXJyb3IiLCAicnBsRW50cmllcyIsICJkb25lIiwgInN0YXRFcnJvciIsICJzdGF0cyIsICJuYW1lcyIsICJuYW1lIiwgInBhdGgiLCAiZXJyb3IiLCAicmVzdWx0IiwgInJlcXVpcmVfc3luYyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiZnNTdGF0IiwgImNvbnN0YW50c18xIiwgInV0aWxzIiwgImNvbW1vbiIsICJyZWFkIiwgImRpcmVjdG9yeSIsICJzZXR0aW5ncyIsICJyZWFkZGlyV2l0aEZpbGVUeXBlcyIsICJyZWFkZGlyIiwgImRpcmVudCIsICJlbnRyeSIsICJzdGF0cyIsICJlcnJvciIsICJuYW1lIiwgImVudHJ5UGF0aCIsICJyZXF1aXJlX2ZzIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJmcyIsICJjcmVhdGVGaWxlU3lzdGVtQWRhcHRlciIsICJmc01ldGhvZHMiLCAicmVxdWlyZV9zZXR0aW5ncyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAicGF0aCIsICJmc1N0YXQiLCAiZnMiLCAiU2V0dGluZ3MiLCAiX29wdGlvbnMiLCAib3B0aW9uIiwgInZhbHVlIiwgInJlcXVpcmVfb3V0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJhc3luYyIsICJzeW5jIiwgInNldHRpbmdzXzEiLCAic2NhbmRpciIsICJwYXRoIiwgIm9wdGlvbnNPclNldHRpbmdzT3JDYWxsYmFjayIsICJjYWxsYmFjayIsICJnZXRTZXR0aW5ncyIsICJzY2FuZGlyU3luYyIsICJvcHRpb25zT3JTZXR0aW5ncyIsICJzZXR0aW5ncyIsICJzZXR0aW5nc09yT3B0aW9ucyIsICJyZXF1aXJlX3JldXNpZnkiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJyZXVzaWZ5IiwgIkNvbnN0cnVjdG9yIiwgImhlYWQiLCAidGFpbCIsICJnZXQiLCAiY3VycmVudCIsICJyZWxlYXNlIiwgIm9iaiIsICJyZXF1aXJlX3F1ZXVlIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAicmV1c2lmeSIsICJmYXN0cXVldWUiLCAiY29udGV4dCIsICJ3b3JrZXIiLCAiY29uY3VycmVuY3kiLCAiY2FjaGUiLCAiVGFzayIsICJxdWV1ZUhlYWQiLCAicXVldWVUYWlsIiwgIl9ydW5uaW5nIiwgImVycm9ySGFuZGxlciIsICJzZWxmIiwgInB1c2giLCAibm9vcCIsICJwYXVzZSIsICJydW5uaW5nIiwgInJlc3VtZSIsICJpZGxlIiwgImxlbmd0aCIsICJnZXRRdWV1ZSIsICJ1bnNoaWZ0IiwgImtpbGwiLCAia2lsbEFuZERyYWluIiwgImVycm9yIiwgImN1cnJlbnQiLCAiY291bnRlciIsICJ0YXNrcyIsICJpIiwgInJlbGVhc2UiLCAidmFsdWUiLCAiZG9uZSIsICJob2xkZXIiLCAibmV4dCIsICJoYW5kbGVyIiwgImVyciIsICJyZXN1bHQiLCAiY2FsbGJhY2siLCAidmFsIiwgInF1ZXVlQXNQcm9taXNlZCIsICJhc3luY1dyYXBwZXIiLCAiYXJnIiwgImNiIiwgInJlcyIsICJxdWV1ZSIsICJwdXNoQ2IiLCAidW5zaGlmdENiIiwgImRyYWluZWQiLCAicCIsICJyZXNvbHZlIiwgInJlamVjdCIsICJwcmV2aW91c0RyYWluIiwgInJlcXVpcmVfY29tbW9uIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJpc0ZhdGFsRXJyb3IiLCAic2V0dGluZ3MiLCAiZXJyb3IiLCAiaXNBcHBsaWVkRmlsdGVyIiwgImZpbHRlciIsICJ2YWx1ZSIsICJyZXBsYWNlUGF0aFNlZ21lbnRTZXBhcmF0b3IiLCAiZmlsZXBhdGgiLCAic2VwYXJhdG9yIiwgImpvaW5QYXRoU2VnbWVudHMiLCAiYSIsICJiIiwgInJlcXVpcmVfcmVhZGVyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJjb21tb24iLCAiUmVhZGVyIiwgIl9yb290IiwgIl9zZXR0aW5ncyIsICJyZXF1aXJlX2FzeW5jIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJldmVudHNfMSIsICJmc1NjYW5kaXIiLCAiZmFzdHEiLCAiY29tbW9uIiwgInJlYWRlcl8xIiwgIkFzeW5jUmVhZGVyIiwgIl9yb290IiwgIl9zZXR0aW5ncyIsICJjYWxsYmFjayIsICJkaXJlY3RvcnkiLCAiYmFzZSIsICJxdWV1ZUl0ZW0iLCAiZXJyb3IiLCAiaXRlbSIsICJkb25lIiwgImVudHJpZXMiLCAiZW50cnkiLCAiZnVsbHBhdGgiLCAicmVxdWlyZV9hc3luYyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiYXN5bmNfMSIsICJBc3luY1Byb3ZpZGVyIiwgIl9yb290IiwgIl9zZXR0aW5ncyIsICJjYWxsYmFjayIsICJlcnJvciIsICJjYWxsRmFpbHVyZUNhbGxiYWNrIiwgImVudHJ5IiwgImNhbGxTdWNjZXNzQ2FsbGJhY2siLCAiZW50cmllcyIsICJyZXF1aXJlX3N0cmVhbSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAic3RyZWFtXzEiLCAiYXN5bmNfMSIsICJTdHJlYW1Qcm92aWRlciIsICJfcm9vdCIsICJfc2V0dGluZ3MiLCAiZXJyb3IiLCAiZW50cnkiLCAicmVxdWlyZV9zeW5jIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJmc1NjYW5kaXIiLCAiY29tbW9uIiwgInJlYWRlcl8xIiwgIlN5bmNSZWFkZXIiLCAiZGlyZWN0b3J5IiwgImJhc2UiLCAiaXRlbSIsICJlbnRyaWVzIiwgImVudHJ5IiwgImVycm9yIiwgImZ1bGxwYXRoIiwgInJlcXVpcmVfc3luYyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAic3luY18xIiwgIlN5bmNQcm92aWRlciIsICJfcm9vdCIsICJfc2V0dGluZ3MiLCAicmVxdWlyZV9zZXR0aW5ncyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAicGF0aCIsICJmc1NjYW5kaXIiLCAiU2V0dGluZ3MiLCAiX29wdGlvbnMiLCAib3B0aW9uIiwgInZhbHVlIiwgInJlcXVpcmVfb3V0IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJhc3luY18xIiwgInN0cmVhbV8xIiwgInN5bmNfMSIsICJzZXR0aW5nc18xIiwgIndhbGsiLCAiZGlyZWN0b3J5IiwgIm9wdGlvbnNPclNldHRpbmdzT3JDYWxsYmFjayIsICJjYWxsYmFjayIsICJnZXRTZXR0aW5ncyIsICJ3YWxrU3luYyIsICJvcHRpb25zT3JTZXR0aW5ncyIsICJzZXR0aW5ncyIsICJ3YWxrU3RyZWFtIiwgInNldHRpbmdzT3JPcHRpb25zIiwgInJlcXVpcmVfcmVhZGVyIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJwYXRoIiwgImZzU3RhdCIsICJ1dGlscyIsICJSZWFkZXIiLCAiX3NldHRpbmdzIiwgImZpbGVwYXRoIiwgInN0YXRzIiwgInBhdHRlcm4iLCAiZW50cnkiLCAiZXJyb3IiLCAicmVxdWlyZV9zdHJlYW0iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInN0cmVhbV8xIiwgImZzU3RhdCIsICJmc1dhbGsiLCAicmVhZGVyXzEiLCAiUmVhZGVyU3RyZWFtIiwgInJvb3QiLCAib3B0aW9ucyIsICJwYXR0ZXJucyIsICJmaWxlcGF0aHMiLCAic3RyZWFtIiwgImluZGV4IiwgIl9lbmMiLCAiZG9uZSIsICJlbnRyeSIsICJpIiwgImZpbGVwYXRoIiwgInBhdHRlcm4iLCAic3RhdHMiLCAiZXJyb3IiLCAicmVzb2x2ZSIsICJyZWplY3QiLCAicmVxdWlyZV9hc3luYyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiZnNXYWxrIiwgInJlYWRlcl8xIiwgInN0cmVhbV8xIiwgIlJlYWRlckFzeW5jIiwgInJvb3QiLCAib3B0aW9ucyIsICJyZXNvbHZlIiwgInJlamVjdCIsICJlcnJvciIsICJlbnRyaWVzIiwgInBhdHRlcm5zIiwgInN0cmVhbSIsICJlbnRyeSIsICJyZXF1aXJlX21hdGNoZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInV0aWxzIiwgIk1hdGNoZXIiLCAiX3BhdHRlcm5zIiwgIl9zZXR0aW5ncyIsICJfbWljcm9tYXRjaE9wdGlvbnMiLCAicGF0dGVybnMiLCAicGF0dGVybiIsICJzZWdtZW50cyIsICJzZWN0aW9ucyIsICJwYXJ0IiwgInNlZ21lbnQiLCAicmVxdWlyZV9wYXJ0aWFsIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtYXRjaGVyXzEiLCAiUGFydGlhbE1hdGNoZXIiLCAiZmlsZXBhdGgiLCAicGFydHMiLCAibGV2ZWxzIiwgInBhdHRlcm5zIiwgImluZm8iLCAicGF0dGVybiIsICJzZWN0aW9uIiwgInBhcnQiLCAiaW5kZXgiLCAic2VnbWVudCIsICJyZXF1aXJlX2RlZXAiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInV0aWxzIiwgInBhcnRpYWxfMSIsICJEZWVwRmlsdGVyIiwgIl9zZXR0aW5ncyIsICJfbWljcm9tYXRjaE9wdGlvbnMiLCAiYmFzZVBhdGgiLCAicG9zaXRpdmUiLCAibmVnYXRpdmUiLCAibWF0Y2hlciIsICJuZWdhdGl2ZVJlIiwgImVudHJ5IiwgInBhdHRlcm5zIiwgImFmZmVjdERlcHRoT2ZSZWFkaW5nUGF0dGVybnMiLCAiZmlsZXBhdGgiLCAiZW50cnlQYXRoIiwgImVudHJ5UGF0aERlcHRoIiwgImJhc2VQYXRoRGVwdGgiLCAicGF0dGVybnNSZSIsICJyZXF1aXJlX2VudHJ5IiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJ1dGlscyIsICJFbnRyeUZpbHRlciIsICJfc2V0dGluZ3MiLCAiX21pY3JvbWF0Y2hPcHRpb25zIiwgInBvc2l0aXZlIiwgIm5lZ2F0aXZlIiwgInBvc2l0aXZlUmUiLCAibmVnYXRpdmVSZSIsICJlbnRyeSIsICJmaWxlcGF0aCIsICJpc0RpcmVjdG9yeSIsICJpc01hdGNoZWQiLCAiZW50cnlQYXRoIiwgInBhdHRlcm5zUmUiLCAiZnVsbHBhdGgiLCAicmVxdWlyZV9lcnJvciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAidXRpbHMiLCAiRXJyb3JGaWx0ZXIiLCAiX3NldHRpbmdzIiwgImVycm9yIiwgInJlcXVpcmVfZW50cnkiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInV0aWxzIiwgIkVudHJ5VHJhbnNmb3JtZXIiLCAiX3NldHRpbmdzIiwgImVudHJ5IiwgImZpbGVwYXRoIiwgInJlcXVpcmVfcHJvdmlkZXIiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgInBhdGgiLCAiZGVlcF8xIiwgImVudHJ5XzEiLCAiZXJyb3JfMSIsICJlbnRyeV8yIiwgIlByb3ZpZGVyIiwgIl9zZXR0aW5ncyIsICJ0YXNrIiwgImJhc2VQYXRoIiwgInJlcXVpcmVfYXN5bmMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImFzeW5jXzEiLCAicHJvdmlkZXJfMSIsICJQcm92aWRlckFzeW5jIiwgInRhc2siLCAicm9vdCIsICJvcHRpb25zIiwgImVudHJ5IiwgInJlcXVpcmVfc3RyZWFtIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJzdHJlYW1fMSIsICJzdHJlYW1fMiIsICJwcm92aWRlcl8xIiwgIlByb3ZpZGVyU3RyZWFtIiwgInRhc2siLCAicm9vdCIsICJvcHRpb25zIiwgInNvdXJjZSIsICJkZXN0aW5hdGlvbiIsICJlcnJvciIsICJlbnRyeSIsICJyZXF1aXJlX3N5bmMiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImZzU3RhdCIsICJmc1dhbGsiLCAicmVhZGVyXzEiLCAiUmVhZGVyU3luYyIsICJyb290IiwgIm9wdGlvbnMiLCAicGF0dGVybnMiLCAiZW50cmllcyIsICJwYXR0ZXJuIiwgImZpbGVwYXRoIiwgImVudHJ5IiwgInN0YXRzIiwgImVycm9yIiwgInJlcXVpcmVfc3luYyIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAic3luY18xIiwgInByb3ZpZGVyXzEiLCAiUHJvdmlkZXJTeW5jIiwgInRhc2siLCAicm9vdCIsICJvcHRpb25zIiwgInJlcXVpcmVfc2V0dGluZ3MiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgImZzIiwgIm9zIiwgIkNQVV9DT1VOVCIsICJTZXR0aW5ncyIsICJfb3B0aW9ucyIsICJvcHRpb24iLCAidmFsdWUiLCAibWV0aG9kcyIsICJyZXF1aXJlX291dCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInRhc2tNYW5hZ2VyIiwgInBhdHRlcm5NYW5hZ2VyIiwgImFzeW5jXzEiLCAic3RyZWFtXzEiLCAic3luY18xIiwgInNldHRpbmdzXzEiLCAidXRpbHMiLCAiRmFzdEdsb2IiLCAic291cmNlIiwgIm9wdGlvbnMiLCAiYXNzZXJ0UGF0dGVybnNJbnB1dCIsICJ3b3JrcyIsICJnZXRXb3JrcyIsICJyZXN1bHQiLCAic3luYyIsICJzdHJlYW0iLCAiZ2VuZXJhdGVUYXNrcyIsICJwYXR0ZXJucyIsICJzZXR0aW5ncyIsICJpc0R5bmFtaWNQYXR0ZXJuIiwgImVzY2FwZVBhdGgiLCAiX1Byb3ZpZGVyIiwgInRhc2tzIiwgInByb3ZpZGVyIiwgImlucHV0IiwgIml0ZW0iLCAicmVxdWlyZV9kdWNrZGJfbXZwIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiRHVja0RCIiwgIl9zY3JpcHREaXIiLCAiTW9kdWxlIiwgInJlYWR5UHJvbWlzZVJlc29sdmUiLCAicmVhZHlQcm9taXNlUmVqZWN0IiwgInJlc29sdmUiLCAicmVqZWN0IiwgIm1vZHVsZU92ZXJyaWRlcyIsICJhcmd1bWVudHNfIiwgInRoaXNQcm9ncmFtIiwgInF1aXRfIiwgInN0YXR1cyIsICJ0b1Rocm93IiwgIkVOVklST05NRU5UX0lTX1dFQiIsICJFTlZJUk9OTUVOVF9JU19XT1JLRVIiLCAiRU5WSVJPTk1FTlRfSVNfTk9ERSIsICJzY3JpcHREaXJlY3RvcnkiLCAibG9jYXRlRmlsZSIsICJwYXRoIiwgInJlYWRfIiwgInJlYWRBc3luYyIsICJyZWFkQmluYXJ5IiwgInNldFdpbmRvd1RpdGxlIiwgImZzIiwgIm5vZGVQYXRoIiwgImZpbGVuYW1lIiwgImJpbmFyeSIsICJpc0ZpbGVVUkkiLCAicmV0IiwgIm9ubG9hZCIsICJvbmVycm9yIiwgImVyciIsICJkYXRhIiwgInVybCIsICJ4aHIiLCAidGl0bGUiLCAib3V0IiwgIndhc21CaW5hcnkiLCAibm9FeGl0UnVudGltZSIsICJhYm9ydCIsICJ3YXNtTWVtb3J5IiwgIkFCT1JUIiwgIkVYSVRTVEFUVVMiLCAiYXNzZXJ0IiwgImNvbmRpdGlvbiIsICJ0ZXh0IiwgIkhFQVA4IiwgIkhFQVBVOCIsICJIRUFQMTYiLCAiSEVBUFUxNiIsICJIRUFQMzIiLCAiSEVBUFUzMiIsICJIRUFQRjMyIiwgIkhFQVBGNjQiLCAidXBkYXRlTWVtb3J5Vmlld3MiLCAiYiIsICJ3YXNtVGFibGUiLCAiX19BVFBSRVJVTl9fIiwgIl9fQVRJTklUX18iLCAiX19BVE1BSU5fXyIsICJfX0FUUE9TVFJVTl9fIiwgInJ1bnRpbWVJbml0aWFsaXplZCIsICJydW50aW1lS2VlcGFsaXZlQ291bnRlciIsICJrZWVwUnVudGltZUFsaXZlIiwgInByZVJ1biIsICJhZGRPblByZVJ1biIsICJjYWxsUnVudGltZUNhbGxiYWNrcyIsICJpbml0UnVudGltZSIsICJwcmVNYWluIiwgInBvc3RSdW4iLCAiYWRkT25Qb3N0UnVuIiwgImNiIiwgImFkZE9uSW5pdCIsICJydW5EZXBlbmRlbmNpZXMiLCAicnVuRGVwZW5kZW5jeVdhdGNoZXIiLCAiZGVwZW5kZW5jaWVzRnVsZmlsbGVkIiwgImFkZFJ1bkRlcGVuZGVuY3kiLCAiaWQiLCAicmVtb3ZlUnVuRGVwZW5kZW5jeSIsICJjYWxsYmFjayIsICJ3aGF0IiwgImUiLCAiZGF0YVVSSVByZWZpeCIsICJpc0RhdGFVUkkiLCAid2FzbUJpbmFyeUZpbGUiLCAiZ2V0QmluYXJ5IiwgImZpbGUiLCAiZ2V0QmluYXJ5UHJvbWlzZSIsICJiaW5hcnlGaWxlIiwgInJlc3BvbnNlIiwgImluc3RhbnRpYXRlQXJyYXlCdWZmZXIiLCAiaW1wb3J0cyIsICJyZWNlaXZlciIsICJpbnN0YW5jZSIsICJyZWFzb24iLCAiaW5zdGFudGlhdGVBc3luYyIsICJyZXN1bHQiLCAiY3JlYXRlV2FzbSIsICJpbmZvIiwgIndhc21JbXBvcnRzIiwgInJlY2VpdmVJbnN0YW5jZSIsICJyZWNlaXZlSW5zdGFudGlhdGlvblJlc3VsdCIsICJ0ZW1wRG91YmxlIiwgInRlbXBJNjQiLCAiRXhpdFN0YXR1cyIsICJjYWxsYmFja3MiLCAiX1hNTF9HZXRCdWZmZXIiLCAiX1hNTF9HZXRFcnJvckNvZGUiLCAiX1hNTF9QYXJzZSIsICJfWE1MX1BhcnNlQnVmZmVyIiwgIl9YTUxfUGFyc2VyQ3JlYXRlIiwgIl9YTUxfUGFyc2VyRnJlZSIsICJfWE1MX1Jlc3VtZVBhcnNlciIsICJfWE1MX1NldENoYXJhY3RlckRhdGFIYW5kbGVyIiwgIl9YTUxfU2V0RWxlbWVudEhhbmRsZXIiLCAiX1hNTF9TZXRVc2VyRGF0YSIsICJfWE1MX1N0b3BQYXJzZXIiLCAiRXhjZXB0aW9uSW5mbyIsICJleGNQdHIiLCAidHlwZSIsICJkZXN0cnVjdG9yIiwgImNhdWdodCIsICJyZXRocm93biIsICJhZGp1c3RlZFB0ciIsICJpc1BvaW50ZXIiLCAiX19fY3hhX2lzX3BvaW50ZXJfdHlwZSIsICJhZGp1c3RlZCIsICJleGNlcHRpb25MYXN0IiwgInVuY2F1Z2h0RXhjZXB0aW9uQ291bnQiLCAiX19fY3hhX3Rocm93IiwgInB0ciIsICJkbG9wZW5NaXNzaW5nRXJyb3IiLCAiX19fZGxzeW0iLCAiaGFuZGxlIiwgInN5bWJvbCIsICJyYSIsICJVVEY4RGVjb2RlciIsICJVVEY4QXJyYXlUb1N0cmluZyIsICJoZWFwT3JBcnJheSIsICJpZHgiLCAibWF4Qnl0ZXNUb1JlYWQiLCAiZW5kSWR4IiwgImVuZFB0ciIsICJzdHIiLCAidTAiLCAidTEiLCAidTIiLCAiY2giLCAiVVRGOFRvU3RyaW5nIiwgIlNZU0NBTExTIiwgIl9fX3N5c2NhbGxfX25ld3NlbGVjdCIsICJuZmRzIiwgInJlYWRmZHMiLCAid3JpdGVmZHMiLCAiZXhjZXB0ZmRzIiwgInRpbWVvdXQiLCAidG90YWwiLCAic3JjUmVhZExvdyIsICJzcmNSZWFkSGlnaCIsICJzcmNXcml0ZUxvdyIsICJzcmNXcml0ZUhpZ2giLCAic3JjRXhjZXB0TG93IiwgInNyY0V4Y2VwdEhpZ2giLCAiZHN0UmVhZExvdyIsICJkc3RSZWFkSGlnaCIsICJkc3RXcml0ZUxvdyIsICJkc3RXcml0ZUhpZ2giLCAiZHN0RXhjZXB0TG93IiwgImRzdEV4Y2VwdEhpZ2giLCAiYWxsTG93IiwgImFsbEhpZ2giLCAiY2hlY2siLCAiZmQiLCAibG93IiwgImhpZ2giLCAidmFsIiwgIm1hc2siLCAic3RyZWFtIiwgImZsYWdzIiwgIlNPQ0tGUyIsICJGUyIsICJnZXRTb2NrZXRGcm9tRkQiLCAic29ja2V0IiwgImluZXROdG9wNCIsICJhZGRyIiwgImluZXROdG9wNiIsICJpbnRzIiwgIndvcmQiLCAibG9uZ2VzdCIsICJsYXN0emVybyIsICJ6c3RhcnQiLCAibGVuIiwgImkiLCAicGFydHMiLCAiaGFzaXB2NCIsICJ2NHBhcnQiLCAiX250b2hzIiwgInJlYWRTb2NrYWRkciIsICJzYSIsICJzYWxlbiIsICJmYW1pbHkiLCAicG9ydCIsICJpbmV0UHRvbjQiLCAidG1wIiwgImpzdG9pX3EiLCAiaW5ldFB0b242IiwgIndvcmRzIiwgInciLCAib2Zmc2V0IiwgInoiLCAidmFsaWQ2cmVneCIsICJfaHRvbnMiLCAiRE5TIiwgIm5hbWUiLCAicmVzIiwgImdldFNvY2tldEFkZHJlc3MiLCAiYWRkcnAiLCAiYWRkcmxlbiIsICJhbGxvd051bGwiLCAiX19fc3lzY2FsbF9iaW5kIiwgImQxIiwgImQyIiwgImQzIiwgInNvY2siLCAiX19fc3lzY2FsbF9jb25uZWN0IiwgIl9fX3N5c2NhbGxfZmFjY2Vzc2F0IiwgImRpcmZkIiwgImFtb2RlIiwgIl9fX3N5c2NhbGxfZmNudGw2NCIsICJjbWQiLCAidmFyYXJncyIsICJfX19zeXNjYWxsX2ZzdGF0NjQiLCAiYnVmIiwgIl9fX3N5c2NhbGxfZnRydW5jYXRlNjQiLCAibGVuZ3RoX2xvdyIsICJsZW5ndGhfaGlnaCIsICJzdHJpbmdUb1VURjhBcnJheSIsICJoZWFwIiwgIm91dElkeCIsICJtYXhCeXRlc1RvV3JpdGUiLCAic3RhcnRJZHgiLCAidSIsICJzdHJpbmdUb1VURjgiLCAib3V0UHRyIiwgIl9fX3N5c2NhbGxfZ2V0ZGVudHM2NCIsICJkaXJwIiwgImNvdW50IiwgInplcm9NZW1vcnkiLCAiYWRkcmVzcyIsICJzaXplIiwgIndyaXRlU29ja2FkZHIiLCAiX19fc3lzY2FsbF9nZXRwZWVybmFtZSIsICJlcnJubyIsICJfX19zeXNjYWxsX2dldHNvY2tvcHQiLCAibGV2ZWwiLCAib3B0bmFtZSIsICJvcHR2YWwiLCAib3B0bGVuIiwgIl9fX3N5c2NhbGxfaW9jdGwiLCAib3AiLCAiX19fc3lzY2FsbF9sc3RhdDY0IiwgIl9fX3N5c2NhbGxfbWtkaXJhdCIsICJtb2RlIiwgIl9fX3N5c2NhbGxfbmV3ZnN0YXRhdCIsICJfX19zeXNjYWxsX29wZW5hdCIsICJfX19zeXNjYWxsX3JlY3Zmcm9tIiwgIm1zZyIsICJfX19zeXNjYWxsX3JlbmFtZWF0IiwgIm9sZGRpcmZkIiwgIm9sZHBhdGgiLCAibmV3ZGlyZmQiLCAibmV3cGF0aCIsICJfX19zeXNjYWxsX3JtZGlyIiwgIl9fX3N5c2NhbGxfc2VuZHRvIiwgIm1lc3NhZ2UiLCAibGVuZ3RoIiwgImFkZHJfbGVuIiwgIl9fX3N5c2NhbGxfc29ja2V0IiwgImRvbWFpbiIsICJwcm90b2NvbCIsICJfX19zeXNjYWxsX3N0YXQ2NCIsICJfX19zeXNjYWxsX3VubGlua2F0IiwgIm5vd0lzTW9ub3RvbmljIiwgIl9fZW1zY3JpcHRlbl9nZXRfbm93X2lzX21vbm90b25pYyIsICJyZWFkSTUzRnJvbUk2NCIsICJpc0xlYXBZZWFyIiwgInllYXIiLCAiTU9OVEhfREFZU19MRUFQX0NVTVVMQVRJVkUiLCAiTU9OVEhfREFZU19SRUdVTEFSX0NVTVVMQVRJVkUiLCAieWRheUZyb21EYXRlIiwgImRhdGUiLCAibGVhcCIsICJtb250aERheXNDdW11bGF0aXZlIiwgInlkYXkiLCAiX19sb2NhbHRpbWVfanMiLCAidGltZSIsICJ0bVB0ciIsICJzdGFydCIsICJzdW1tZXJPZmZzZXQiLCAid2ludGVyT2Zmc2V0IiwgImRzdCIsICJsZW5ndGhCeXRlc1VURjgiLCAiYyIsICJzdHJpbmdUb05ld1VURjgiLCAiX21hbGxvYyIsICJfX3R6c2V0X2pzIiwgInRpbWV6b25lIiwgImRheWxpZ2h0IiwgInR6bmFtZSIsICJjdXJyZW50WWVhciIsICJ3aW50ZXIiLCAic3VtbWVyIiwgInN0ZFRpbWV6b25lT2Zmc2V0IiwgImV4dHJhY3Rab25lIiwgIm1hdGNoIiwgIndpbnRlck5hbWUiLCAic3VtbWVyTmFtZSIsICJ3aW50ZXJOYW1lUHRyIiwgInN1bW1lck5hbWVQdHIiLCAiX2Fib3J0IiwgIl9kbG9wZW4iLCAiX2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X2NyZWF0ZSIsICJwYXRoTGVuIiwgIl9kdWNrZGJfd2ViX2ZzX2RpcmVjdG9yeV9leGlzdHMiLCAiX2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X2xpc3RfZmlsZXMiLCAiX2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X3JlbW92ZSIsICJfZHVja2RiX3dlYl9mc19maWxlX2Nsb3NlIiwgImZpbGVJZCIsICJfZHVja2RiX3dlYl9mc19maWxlX2V4aXN0cyIsICJfZHVja2RiX3dlYl9mc19maWxlX2dldF9sYXN0X21vZGlmaWVkX3RpbWUiLCAiX2R1Y2tkYl93ZWJfZnNfZmlsZV9tb3ZlIiwgImZyb20iLCAiZnJvbUxlbiIsICJ0byIsICJ0b0xlbiIsICJfZHVja2RiX3dlYl9mc19maWxlX29wZW4iLCAiX2R1Y2tkYl93ZWJfZnNfZmlsZV9yZWFkIiwgImxvY2F0aW9uIiwgIl9kdWNrZGJfd2ViX2ZzX2ZpbGVfdHJ1bmNhdGUiLCAibmV3U2l6ZSIsICJfZHVja2RiX3dlYl9mc19maWxlX3dyaXRlIiwgIl9kdWNrZGJfd2ViX2ZzX2dldF9kZWZhdWx0X2RhdGFfcHJvdG9jb2wiLCAiX2R1Y2tkYl93ZWJfZnNfZ2xvYiIsICJfZHVja2RiX3dlYl90ZXN0X3BsYXRmb3JtX2ZlYXR1cmUiLCAiZmVhdHVyZSIsICJfZHVja2RiX3dlYl91ZGZfc2NhbGFyX2NhbGwiLCAiZnVuY0lkIiwgImRlc2NQdHIiLCAiZGVzY1NpemUiLCAicHRyc1B0ciIsICJwdHJzU2l6ZSIsICJfZW1zY3JpcHRlbl9kYXRlX25vdyIsICJnZXRIZWFwTWF4IiwgIl9lbXNjcmlwdGVuX2dldF9oZWFwX21heCIsICJfZW1zY3JpcHRlbl9nZXRfbm93IiwgIl9lbXNjcmlwdGVuX21lbWNweV9iaWciLCAiZGVzdCIsICJzcmMiLCAibnVtIiwgImVtc2NyaXB0ZW5fcmVhbGxvY19idWZmZXIiLCAicGFnZXMiLCAiX2Vtc2NyaXB0ZW5fcmVzaXplX2hlYXAiLCAicmVxdWVzdGVkU2l6ZSIsICJvbGRTaXplIiwgIm1heEhlYXBTaXplIiwgImFsaWduVXAiLCAieCIsICJtdWx0aXBsZSIsICJjdXREb3duIiwgIm92ZXJHcm93bkhlYXBTaXplIiwgInJlcGxhY2VtZW50IiwgIkVOViIsICJnZXRFeGVjdXRhYmxlTmFtZSIsICJnZXRFbnZTdHJpbmdzIiwgImxhbmciLCAiZW52IiwgInN0cmluZ3MiLCAic3RyaW5nVG9Bc2NpaSIsICJidWZmZXIiLCAiX2Vudmlyb25fZ2V0IiwgIl9fZW52aXJvbiIsICJlbnZpcm9uX2J1ZiIsICJidWZTaXplIiwgInN0cmluZyIsICJfZW52aXJvbl9zaXplc19nZXQiLCAicGVudmlyb25fY291bnQiLCAicGVudmlyb25fYnVmX3NpemUiLCAiX2ZkX2Nsb3NlIiwgIl9mZF9mZHN0YXRfZ2V0IiwgInBidWYiLCAicmlnaHRzQmFzZSIsICJyaWdodHNJbmhlcml0aW5nIiwgIl9mZF9wcmVhZCIsICJpb3YiLCAiaW92Y250IiwgIm9mZnNldF9sb3ciLCAib2Zmc2V0X2hpZ2giLCAicG51bSIsICJfZmRfcHdyaXRlIiwgIl9mZF9yZWFkIiwgIl9mZF9zZWVrIiwgIndoZW5jZSIsICJuZXdPZmZzZXQiLCAiX2ZkX3N5bmMiLCAicHJpbnRDaGFyQnVmZmVycyIsICJwcmludENoYXIiLCAiY3VyciIsICJfZmRfd3JpdGUiLCAiaiIsICJfZ2V0YWRkcmluZm8iLCAibm9kZSIsICJzZXJ2aWNlIiwgImhpbnQiLCAicHJvdG8iLCAiYWkiLCAiYWxsb2NhZGRyaW5mbyIsICJjYW5vbiIsICJfaHRvbmwiLCAiaW5pdFJhbmRvbUZpbGwiLCAidmlldyIsICJjcnlwdG9fbW9kdWxlIiwgInJhbmRvbUZpbGxTeW5jIiwgInJhbmRvbUJ5dGVzIiwgInJhbmRvbUZpbGwiLCAiX2dldGVudHJvcHkiLCAiX2dldG5hbWVpbmZvIiwgIm5vZGVsZW4iLCAic2VydiIsICJzZXJ2bGVuIiwgIm92ZXJmbG93ZWQiLCAibG9va3VwIiwgIm51bUJ5dGVzV3JpdHRlbkV4Y2xOdWxsIiwgImFycmF5U3VtIiwgImFycmF5IiwgImluZGV4IiwgInN1bSIsICJNT05USF9EQVlTX0xFQVAiLCAiTU9OVEhfREFZU19SRUdVTEFSIiwgImFkZERheXMiLCAiZGF5cyIsICJuZXdEYXRlIiwgImN1cnJlbnRNb250aCIsICJkYXlzSW5DdXJyZW50TW9udGgiLCAiaW50QXJyYXlGcm9tU3RyaW5nIiwgInN0cmluZ3kiLCAiZG9udEFkZE51bGwiLCAidThhcnJheSIsICJudW1CeXRlc1dyaXR0ZW4iLCAid3JpdGVBcnJheVRvTWVtb3J5IiwgIl9zdHJmdGltZSIsICJzIiwgIm1heHNpemUiLCAiZm9ybWF0IiwgInRtIiwgInRtX3pvbmUiLCAicGF0dGVybiIsICJFWFBBTlNJT05fUlVMRVNfMSIsICJydWxlIiwgIldFRUtEQVlTIiwgIk1PTlRIUyIsICJsZWFkaW5nU29tZXRoaW5nIiwgInZhbHVlIiwgImRpZ2l0cyIsICJjaGFyYWN0ZXIiLCAibGVhZGluZ051bGxzIiwgImNvbXBhcmVCeURheSIsICJkYXRlMSIsICJkYXRlMiIsICJzZ24iLCAiY29tcGFyZSIsICJnZXRGaXJzdFdlZWtTdGFydERhdGUiLCAiamFuRm91cnRoIiwgImdldFdlZWtCYXNlZFllYXIiLCAidGhpc0RhdGUiLCAiamFuRm91cnRoVGhpc1llYXIiLCAiamFuRm91cnRoTmV4dFllYXIiLCAiZmlyc3RXZWVrU3RhcnRUaGlzWWVhciIsICJmaXJzdFdlZWtTdGFydE5leHRZZWFyIiwgIkVYUEFOU0lPTl9SVUxFU18yIiwgInR3ZWx2ZUhvdXIiLCAiamFuMSIsICJkZWMzMSIsICJvZmYiLCAiYWhlYWQiLCAiYnl0ZXMiLCAiX3N0cmZ0aW1lX2wiLCAibG9jIiwgIl91Y252X2Nsb3NlXzY0IiwgIl91Y252X2NvbnZlcnRFeF82NCIsICJfdWNudl9vcGVuXzY0IiwgIl91Y252X3RvQWxnb3JpdGhtaWNfNjQiLCAiX3Vjc2RldF9jbG9zZV82NCIsICJfdWNzZGV0X2RldGVjdF82NCIsICJfdWNzZGV0X2dldENvbmZpZGVuY2VfNjQiLCAiX3Vjc2RldF9nZXROYW1lXzY0IiwgIl91Y3NkZXRfb3Blbl82NCIsICJfdWNzZGV0X3NldFRleHRfNjQiLCAiX3VuekNsb3NlIiwgIl91bnpDbG9zZUN1cnJlbnRGaWxlIiwgIl91bnpHZXRDdXJyZW50RmlsZUluZm8iLCAiX3VuekdldEN1cnJlbnRGaWxlSW5mbzY0IiwgIl91bnpHZXRHbG9iYWxJbmZvIiwgIl91bnpHb1RvRmlyc3RGaWxlIiwgIl91bnpHb1RvTmV4dEZpbGUiLCAiX3VuekxvY2F0ZUZpbGUiLCAiX3Vuek9wZW4iLCAiX3Vuek9wZW4yIiwgIl91bnpPcGVuQ3VycmVudEZpbGUiLCAiX3VuelJlYWRDdXJyZW50RmlsZSIsICJfcHJvY19leGl0IiwgImNvZGUiLCAiZXhpdEpTIiwgImltcGxpY2l0IiwgImhhbmRsZUV4Y2VwdGlvbiIsICJnZXRDRnVuYyIsICJpZGVudCIsICJmdW5jIiwgInN0cmluZ1RvVVRGOE9uU3RhY2siLCAic3RhY2tBbGxvYyIsICJjY2FsbCIsICJyZXR1cm5UeXBlIiwgImFyZ1R5cGVzIiwgImFyZ3MiLCAib3B0cyIsICJ0b0MiLCAiYXJyIiwgImNvbnZlcnRSZXR1cm5WYWx1ZSIsICJjQXJncyIsICJzdGFjayIsICJjb252ZXJ0ZXIiLCAic3RhY2tTYXZlIiwgIm9uRG9uZSIsICJzdGFja1Jlc3RvcmUiLCAiYXNtIiwgIl9fX3dhc21fY2FsbF9jdG9ycyIsICJfbWFpbiIsICJfZHVja2RiX3dlYl9mc19nbG9iX2FkZF9wYXRoIiwgIl9kdWNrZGJfd2ViX2NsZWFyX3Jlc3BvbnNlIiwgIl9kdWNrZGJfd2ViX2ZhaWxfd2l0aCIsICJfZHVja2RiX3dlYl9yZXNldCIsICJfZHVja2RiX3dlYl9jb25uZWN0IiwgIl9kdWNrZGJfd2ViX2Rpc2Nvbm5lY3QiLCAiX2R1Y2tkYl93ZWJfZmx1c2hfZmlsZXMiLCAiX2R1Y2tkYl93ZWJfZmx1c2hfZmlsZSIsICJfZHVja2RiX3dlYl9vcGVuIiwgIl9kdWNrZGJfd2ViX2dldF9nbG9iYWxfZmlsZV9pbmZvIiwgIl9kdWNrZGJfd2ViX2NvbGxlY3RfZmlsZV9zdGF0cyIsICJfZHVja2RiX3dlYl9leHBvcnRfZmlsZV9zdGF0cyIsICJfZHVja2RiX3dlYl9mc19kcm9wX2ZpbGUiLCAiX2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlcyIsICJfZHVja2RiX3dlYl9mc19nbG9iX2ZpbGVfaW5mb3MiLCAiX2R1Y2tkYl93ZWJfZnNfZ2V0X2ZpbGVfaW5mb19ieV9pZCIsICJfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X25hbWUiLCAiX2R1Y2tkYl93ZWJfZnNfcmVnaXN0ZXJfZmlsZV91cmwiLCAiX2R1Y2tkYl93ZWJfZnNfcmVnaXN0ZXJfZmlsZV9idWZmZXIiLCAiX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX2J1ZmZlciIsICJfZHVja2RiX3dlYl9jb3B5X2ZpbGVfdG9fcGF0aCIsICJfZHVja2RiX3dlYl9nZXRfdmVyc2lvbiIsICJfZHVja2RiX3dlYl9nZXRfZmVhdHVyZV9mbGFncyIsICJfZHVja2RiX3dlYl90b2tlbml6ZSIsICJfZHVja2RiX3dlYl91ZGZfc2NhbGFyX2NyZWF0ZSIsICJfZHVja2RiX3dlYl9wcmVwYXJlZF9jcmVhdGUiLCAiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfY2xvc2UiLCAiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfcnVuIiwgIl9kdWNrZGJfd2ViX3ByZXBhcmVkX3NlbmQiLCAiX2R1Y2tkYl93ZWJfcXVlcnlfcnVuIiwgIl9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfc3RhcnQiLCAiX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9wb2xsIiwgIl9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfY2FuY2VsIiwgIl9kdWNrZGJfd2ViX3F1ZXJ5X2ZldGNoX3Jlc3VsdHMiLCAiX2R1Y2tkYl93ZWJfZ2V0X3RhYmxlbmFtZXMiLCAiX2R1Y2tkYl93ZWJfaW5zZXJ0X2Fycm93X2Zyb21faXBjX3N0cmVhbSIsICJfZHVja2RiX3dlYl9pbnNlcnRfY3N2X2Zyb21fcGF0aCIsICJfZHVja2RiX3dlYl9pbnNlcnRfanNvbl9mcm9tX3BhdGgiLCAiX19fZXJybm9fbG9jYXRpb24iLCAiX2ZyZWUiLCAiY2FsbGVkUnVuIiwgInJ1bkNhbGxlciIsICJydW4iLCAiY2FsbE1haW4iLCAiZW50cnlGdW5jdGlvbiIsICJhcmdjIiwgImFyZ3YiLCAiZG9SdW4iLCAic2hvdWxkUnVuTm93IiwgInJlcXVpcmVfZHVja2RiX2VoIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiRHVja0RCIiwgIl9zY3JpcHREaXIiLCAiTW9kdWxlIiwgInJlYWR5UHJvbWlzZVJlc29sdmUiLCAicmVhZHlQcm9taXNlUmVqZWN0IiwgInJlc29sdmUiLCAicmVqZWN0IiwgIm1vZHVsZU92ZXJyaWRlcyIsICJhcmd1bWVudHNfIiwgInRoaXNQcm9ncmFtIiwgInF1aXRfIiwgInN0YXR1cyIsICJ0b1Rocm93IiwgIkVOVklST05NRU5UX0lTX1dFQiIsICJFTlZJUk9OTUVOVF9JU19XT1JLRVIiLCAiRU5WSVJPTk1FTlRfSVNfTk9ERSIsICJzY3JpcHREaXJlY3RvcnkiLCAibG9jYXRlRmlsZSIsICJwYXRoIiwgInJlYWRfIiwgInJlYWRBc3luYyIsICJyZWFkQmluYXJ5IiwgInNldFdpbmRvd1RpdGxlIiwgImZzIiwgIm5vZGVQYXRoIiwgImZpbGVuYW1lIiwgImJpbmFyeSIsICJpc0ZpbGVVUkkiLCAicmV0IiwgIm9ubG9hZCIsICJvbmVycm9yIiwgImVyciIsICJkYXRhIiwgInVybCIsICJ4aHIiLCAidGl0bGUiLCAib3V0IiwgIndhc21CaW5hcnkiLCAibm9FeGl0UnVudGltZSIsICJhYm9ydCIsICJ3YXNtTWVtb3J5IiwgIkFCT1JUIiwgIkVYSVRTVEFUVVMiLCAiYXNzZXJ0IiwgImNvbmRpdGlvbiIsICJ0ZXh0IiwgIkhFQVA4IiwgIkhFQVBVOCIsICJIRUFQMTYiLCAiSEVBUFUxNiIsICJIRUFQMzIiLCAiSEVBUFUzMiIsICJIRUFQRjMyIiwgIkhFQVBGNjQiLCAidXBkYXRlTWVtb3J5Vmlld3MiLCAiYiIsICJ3YXNtVGFibGUiLCAiX19BVFBSRVJVTl9fIiwgIl9fQVRJTklUX18iLCAiX19BVE1BSU5fXyIsICJfX0FUUE9TVFJVTl9fIiwgInJ1bnRpbWVJbml0aWFsaXplZCIsICJydW50aW1lS2VlcGFsaXZlQ291bnRlciIsICJrZWVwUnVudGltZUFsaXZlIiwgInByZVJ1biIsICJhZGRPblByZVJ1biIsICJjYWxsUnVudGltZUNhbGxiYWNrcyIsICJpbml0UnVudGltZSIsICJwcmVNYWluIiwgInBvc3RSdW4iLCAiYWRkT25Qb3N0UnVuIiwgImNiIiwgImFkZE9uSW5pdCIsICJydW5EZXBlbmRlbmNpZXMiLCAicnVuRGVwZW5kZW5jeVdhdGNoZXIiLCAiZGVwZW5kZW5jaWVzRnVsZmlsbGVkIiwgImFkZFJ1bkRlcGVuZGVuY3kiLCAiaWQiLCAicmVtb3ZlUnVuRGVwZW5kZW5jeSIsICJjYWxsYmFjayIsICJ3aGF0IiwgIl9fX3RyYXAiLCAiZSIsICJkYXRhVVJJUHJlZml4IiwgImlzRGF0YVVSSSIsICJ3YXNtQmluYXJ5RmlsZSIsICJnZXRCaW5hcnkiLCAiZmlsZSIsICJnZXRCaW5hcnlQcm9taXNlIiwgImJpbmFyeUZpbGUiLCAicmVzcG9uc2UiLCAiaW5zdGFudGlhdGVBcnJheUJ1ZmZlciIsICJpbXBvcnRzIiwgInJlY2VpdmVyIiwgImluc3RhbmNlIiwgInJlYXNvbiIsICJpbnN0YW50aWF0ZUFzeW5jIiwgInJlc3VsdCIsICJjcmVhdGVXYXNtIiwgImluZm8iLCAid2FzbUltcG9ydHMiLCAicmVjZWl2ZUluc3RhbmNlIiwgInJlY2VpdmVJbnN0YW50aWF0aW9uUmVzdWx0IiwgInRlbXBEb3VibGUiLCAidGVtcEk2NCIsICJFeGl0U3RhdHVzIiwgImNhbGxiYWNrcyIsICJfWE1MX0dldEJ1ZmZlciIsICJfWE1MX0dldEVycm9yQ29kZSIsICJfWE1MX1BhcnNlIiwgIl9YTUxfUGFyc2VCdWZmZXIiLCAiX1hNTF9QYXJzZXJDcmVhdGUiLCAiX1hNTF9QYXJzZXJGcmVlIiwgIl9YTUxfUmVzdW1lUGFyc2VyIiwgIl9YTUxfU2V0Q2hhcmFjdGVyRGF0YUhhbmRsZXIiLCAiX1hNTF9TZXRFbGVtZW50SGFuZGxlciIsICJfWE1MX1NldFVzZXJEYXRhIiwgIl9YTUxfU3RvcFBhcnNlciIsICJkbG9wZW5NaXNzaW5nRXJyb3IiLCAiX19fZGxzeW0iLCAiaGFuZGxlIiwgInN5bWJvbCIsICJyYSIsICJVVEY4RGVjb2RlciIsICJVVEY4QXJyYXlUb1N0cmluZyIsICJoZWFwT3JBcnJheSIsICJpZHgiLCAibWF4Qnl0ZXNUb1JlYWQiLCAiZW5kSWR4IiwgImVuZFB0ciIsICJzdHIiLCAidTAiLCAidTEiLCAidTIiLCAiY2giLCAiVVRGOFRvU3RyaW5nIiwgInB0ciIsICJTWVNDQUxMUyIsICJfX19zeXNjYWxsX19uZXdzZWxlY3QiLCAibmZkcyIsICJyZWFkZmRzIiwgIndyaXRlZmRzIiwgImV4Y2VwdGZkcyIsICJ0aW1lb3V0IiwgInRvdGFsIiwgInNyY1JlYWRMb3ciLCAic3JjUmVhZEhpZ2giLCAic3JjV3JpdGVMb3ciLCAic3JjV3JpdGVIaWdoIiwgInNyY0V4Y2VwdExvdyIsICJzcmNFeGNlcHRIaWdoIiwgImRzdFJlYWRMb3ciLCAiZHN0UmVhZEhpZ2giLCAiZHN0V3JpdGVMb3ciLCAiZHN0V3JpdGVIaWdoIiwgImRzdEV4Y2VwdExvdyIsICJkc3RFeGNlcHRIaWdoIiwgImFsbExvdyIsICJhbGxIaWdoIiwgImNoZWNrIiwgImZkIiwgImxvdyIsICJoaWdoIiwgInZhbCIsICJtYXNrIiwgInN0cmVhbSIsICJmbGFncyIsICJTT0NLRlMiLCAiRlMiLCAiZ2V0U29ja2V0RnJvbUZEIiwgInNvY2tldCIsICJpbmV0TnRvcDQiLCAiYWRkciIsICJpbmV0TnRvcDYiLCAiaW50cyIsICJ3b3JkIiwgImxvbmdlc3QiLCAibGFzdHplcm8iLCAienN0YXJ0IiwgImxlbiIsICJpIiwgInBhcnRzIiwgImhhc2lwdjQiLCAidjRwYXJ0IiwgIl9udG9ocyIsICJyZWFkU29ja2FkZHIiLCAic2EiLCAic2FsZW4iLCAiZmFtaWx5IiwgInBvcnQiLCAiaW5ldFB0b240IiwgInRtcCIsICJqc3RvaV9xIiwgImluZXRQdG9uNiIsICJ3b3JkcyIsICJ3IiwgIm9mZnNldCIsICJ6IiwgInZhbGlkNnJlZ3giLCAiX2h0b25zIiwgIkROUyIsICJuYW1lIiwgInJlcyIsICJnZXRTb2NrZXRBZGRyZXNzIiwgImFkZHJwIiwgImFkZHJsZW4iLCAiYWxsb3dOdWxsIiwgIl9fX3N5c2NhbGxfYmluZCIsICJkMSIsICJkMiIsICJkMyIsICJzb2NrIiwgIl9fX3N5c2NhbGxfY29ubmVjdCIsICJfX19zeXNjYWxsX2ZhY2Nlc3NhdCIsICJkaXJmZCIsICJhbW9kZSIsICJfX19zeXNjYWxsX2ZjbnRsNjQiLCAiY21kIiwgInZhcmFyZ3MiLCAiX19fc3lzY2FsbF9mc3RhdDY0IiwgImJ1ZiIsICJfX19zeXNjYWxsX2Z0cnVuY2F0ZTY0IiwgImxlbmd0aF9sb3ciLCAibGVuZ3RoX2hpZ2giLCAic3RyaW5nVG9VVEY4QXJyYXkiLCAiaGVhcCIsICJvdXRJZHgiLCAibWF4Qnl0ZXNUb1dyaXRlIiwgInN0YXJ0SWR4IiwgInUiLCAic3RyaW5nVG9VVEY4IiwgIm91dFB0ciIsICJfX19zeXNjYWxsX2dldGRlbnRzNjQiLCAiZGlycCIsICJjb3VudCIsICJ6ZXJvTWVtb3J5IiwgImFkZHJlc3MiLCAic2l6ZSIsICJ3cml0ZVNvY2thZGRyIiwgIl9fX3N5c2NhbGxfZ2V0cGVlcm5hbWUiLCAiZXJybm8iLCAiX19fc3lzY2FsbF9nZXRzb2Nrb3B0IiwgImxldmVsIiwgIm9wdG5hbWUiLCAib3B0dmFsIiwgIm9wdGxlbiIsICJfX19zeXNjYWxsX2lvY3RsIiwgIm9wIiwgIl9fX3N5c2NhbGxfbHN0YXQ2NCIsICJfX19zeXNjYWxsX21rZGlyYXQiLCAibW9kZSIsICJfX19zeXNjYWxsX25ld2ZzdGF0YXQiLCAiX19fc3lzY2FsbF9vcGVuYXQiLCAiX19fc3lzY2FsbF9yZWN2ZnJvbSIsICJtc2ciLCAiX19fc3lzY2FsbF9yZW5hbWVhdCIsICJvbGRkaXJmZCIsICJvbGRwYXRoIiwgIm5ld2RpcmZkIiwgIm5ld3BhdGgiLCAiX19fc3lzY2FsbF9ybWRpciIsICJfX19zeXNjYWxsX3NlbmR0byIsICJtZXNzYWdlIiwgImxlbmd0aCIsICJhZGRyX2xlbiIsICJfX19zeXNjYWxsX3NvY2tldCIsICJkb21haW4iLCAidHlwZSIsICJwcm90b2NvbCIsICJfX19zeXNjYWxsX3N0YXQ2NCIsICJfX19zeXNjYWxsX3VubGlua2F0IiwgIm5vd0lzTW9ub3RvbmljIiwgIl9fZW1zY3JpcHRlbl9nZXRfbm93X2lzX21vbm90b25pYyIsICJyZWFkSTUzRnJvbUk2NCIsICJpc0xlYXBZZWFyIiwgInllYXIiLCAiTU9OVEhfREFZU19MRUFQX0NVTVVMQVRJVkUiLCAiTU9OVEhfREFZU19SRUdVTEFSX0NVTVVMQVRJVkUiLCAieWRheUZyb21EYXRlIiwgImRhdGUiLCAibGVhcCIsICJtb250aERheXNDdW11bGF0aXZlIiwgInlkYXkiLCAiX19sb2NhbHRpbWVfanMiLCAidGltZSIsICJ0bVB0ciIsICJzdGFydCIsICJzdW1tZXJPZmZzZXQiLCAid2ludGVyT2Zmc2V0IiwgImRzdCIsICJsZW5ndGhCeXRlc1VURjgiLCAiYyIsICJzdHJpbmdUb05ld1VURjgiLCAiX21hbGxvYyIsICJfX3R6c2V0X2pzIiwgInRpbWV6b25lIiwgImRheWxpZ2h0IiwgInR6bmFtZSIsICJjdXJyZW50WWVhciIsICJ3aW50ZXIiLCAic3VtbWVyIiwgInN0ZFRpbWV6b25lT2Zmc2V0IiwgImV4dHJhY3Rab25lIiwgIm1hdGNoIiwgIndpbnRlck5hbWUiLCAic3VtbWVyTmFtZSIsICJ3aW50ZXJOYW1lUHRyIiwgInN1bW1lck5hbWVQdHIiLCAiX2Fib3J0IiwgIl9kbG9wZW4iLCAiX2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X2NyZWF0ZSIsICJwYXRoTGVuIiwgIl9kdWNrZGJfd2ViX2ZzX2RpcmVjdG9yeV9leGlzdHMiLCAiX2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X2xpc3RfZmlsZXMiLCAiX2R1Y2tkYl93ZWJfZnNfZGlyZWN0b3J5X3JlbW92ZSIsICJfZHVja2RiX3dlYl9mc19maWxlX2Nsb3NlIiwgImZpbGVJZCIsICJfZHVja2RiX3dlYl9mc19maWxlX2V4aXN0cyIsICJfZHVja2RiX3dlYl9mc19maWxlX2dldF9sYXN0X21vZGlmaWVkX3RpbWUiLCAiX2R1Y2tkYl93ZWJfZnNfZmlsZV9tb3ZlIiwgImZyb20iLCAiZnJvbUxlbiIsICJ0byIsICJ0b0xlbiIsICJfZHVja2RiX3dlYl9mc19maWxlX29wZW4iLCAiX2R1Y2tkYl93ZWJfZnNfZmlsZV9yZWFkIiwgImxvY2F0aW9uIiwgIl9kdWNrZGJfd2ViX2ZzX2ZpbGVfdHJ1bmNhdGUiLCAibmV3U2l6ZSIsICJfZHVja2RiX3dlYl9mc19maWxlX3dyaXRlIiwgIl9kdWNrZGJfd2ViX2ZzX2dldF9kZWZhdWx0X2RhdGFfcHJvdG9jb2wiLCAiX2R1Y2tkYl93ZWJfZnNfZ2xvYiIsICJfZHVja2RiX3dlYl90ZXN0X3BsYXRmb3JtX2ZlYXR1cmUiLCAiZmVhdHVyZSIsICJfZHVja2RiX3dlYl91ZGZfc2NhbGFyX2NhbGwiLCAiZnVuY0lkIiwgImRlc2NQdHIiLCAiZGVzY1NpemUiLCAicHRyc1B0ciIsICJwdHJzU2l6ZSIsICJfZW1zY3JpcHRlbl9kYXRlX25vdyIsICJnZXRIZWFwTWF4IiwgIl9lbXNjcmlwdGVuX2dldF9oZWFwX21heCIsICJfZW1zY3JpcHRlbl9nZXRfbm93IiwgIl9lbXNjcmlwdGVuX21lbWNweV9iaWciLCAiZGVzdCIsICJzcmMiLCAibnVtIiwgImVtc2NyaXB0ZW5fcmVhbGxvY19idWZmZXIiLCAicGFnZXMiLCAiX2Vtc2NyaXB0ZW5fcmVzaXplX2hlYXAiLCAicmVxdWVzdGVkU2l6ZSIsICJvbGRTaXplIiwgIm1heEhlYXBTaXplIiwgImFsaWduVXAiLCAieCIsICJtdWx0aXBsZSIsICJjdXREb3duIiwgIm92ZXJHcm93bkhlYXBTaXplIiwgInJlcGxhY2VtZW50IiwgIkVOViIsICJnZXRFeGVjdXRhYmxlTmFtZSIsICJnZXRFbnZTdHJpbmdzIiwgImxhbmciLCAiZW52IiwgInN0cmluZ3MiLCAic3RyaW5nVG9Bc2NpaSIsICJidWZmZXIiLCAiX2Vudmlyb25fZ2V0IiwgIl9fZW52aXJvbiIsICJlbnZpcm9uX2J1ZiIsICJidWZTaXplIiwgInN0cmluZyIsICJfZW52aXJvbl9zaXplc19nZXQiLCAicGVudmlyb25fY291bnQiLCAicGVudmlyb25fYnVmX3NpemUiLCAiX2ZkX2Nsb3NlIiwgIl9mZF9mZHN0YXRfZ2V0IiwgInBidWYiLCAicmlnaHRzQmFzZSIsICJyaWdodHNJbmhlcml0aW5nIiwgIl9mZF9wcmVhZCIsICJpb3YiLCAiaW92Y250IiwgIm9mZnNldF9sb3ciLCAib2Zmc2V0X2hpZ2giLCAicG51bSIsICJfZmRfcHdyaXRlIiwgIl9mZF9yZWFkIiwgIl9mZF9zZWVrIiwgIndoZW5jZSIsICJuZXdPZmZzZXQiLCAiX2ZkX3N5bmMiLCAicHJpbnRDaGFyQnVmZmVycyIsICJwcmludENoYXIiLCAiY3VyciIsICJfZmRfd3JpdGUiLCAiaiIsICJfZ2V0YWRkcmluZm8iLCAibm9kZSIsICJzZXJ2aWNlIiwgImhpbnQiLCAicHJvdG8iLCAiYWkiLCAiYWxsb2NhZGRyaW5mbyIsICJjYW5vbiIsICJfaHRvbmwiLCAiaW5pdFJhbmRvbUZpbGwiLCAidmlldyIsICJjcnlwdG9fbW9kdWxlIiwgInJhbmRvbUZpbGxTeW5jIiwgInJhbmRvbUJ5dGVzIiwgInJhbmRvbUZpbGwiLCAiX2dldGVudHJvcHkiLCAiX2dldG5hbWVpbmZvIiwgIm5vZGVsZW4iLCAic2VydiIsICJzZXJ2bGVuIiwgIm92ZXJmbG93ZWQiLCAibG9va3VwIiwgIm51bUJ5dGVzV3JpdHRlbkV4Y2xOdWxsIiwgImFycmF5U3VtIiwgImFycmF5IiwgImluZGV4IiwgInN1bSIsICJNT05USF9EQVlTX0xFQVAiLCAiTU9OVEhfREFZU19SRUdVTEFSIiwgImFkZERheXMiLCAiZGF5cyIsICJuZXdEYXRlIiwgImN1cnJlbnRNb250aCIsICJkYXlzSW5DdXJyZW50TW9udGgiLCAiaW50QXJyYXlGcm9tU3RyaW5nIiwgInN0cmluZ3kiLCAiZG9udEFkZE51bGwiLCAidThhcnJheSIsICJudW1CeXRlc1dyaXR0ZW4iLCAid3JpdGVBcnJheVRvTWVtb3J5IiwgIl9zdHJmdGltZSIsICJzIiwgIm1heHNpemUiLCAiZm9ybWF0IiwgInRtIiwgInRtX3pvbmUiLCAicGF0dGVybiIsICJFWFBBTlNJT05fUlVMRVNfMSIsICJydWxlIiwgIldFRUtEQVlTIiwgIk1PTlRIUyIsICJsZWFkaW5nU29tZXRoaW5nIiwgInZhbHVlIiwgImRpZ2l0cyIsICJjaGFyYWN0ZXIiLCAibGVhZGluZ051bGxzIiwgImNvbXBhcmVCeURheSIsICJkYXRlMSIsICJkYXRlMiIsICJzZ24iLCAiY29tcGFyZSIsICJnZXRGaXJzdFdlZWtTdGFydERhdGUiLCAiamFuRm91cnRoIiwgImdldFdlZWtCYXNlZFllYXIiLCAidGhpc0RhdGUiLCAiamFuRm91cnRoVGhpc1llYXIiLCAiamFuRm91cnRoTmV4dFllYXIiLCAiZmlyc3RXZWVrU3RhcnRUaGlzWWVhciIsICJmaXJzdFdlZWtTdGFydE5leHRZZWFyIiwgIkVYUEFOU0lPTl9SVUxFU18yIiwgInR3ZWx2ZUhvdXIiLCAiamFuMSIsICJkZWMzMSIsICJvZmYiLCAiYWhlYWQiLCAiYnl0ZXMiLCAiX3N0cmZ0aW1lX2wiLCAibG9jIiwgIl91Y252X2Nsb3NlXzY0IiwgIl91Y252X2NvbnZlcnRFeF82NCIsICJfdWNudl9vcGVuXzY0IiwgIl91Y252X3RvQWxnb3JpdGhtaWNfNjQiLCAiX3Vjc2RldF9jbG9zZV82NCIsICJfdWNzZGV0X2RldGVjdF82NCIsICJfdWNzZGV0X2dldENvbmZpZGVuY2VfNjQiLCAiX3Vjc2RldF9nZXROYW1lXzY0IiwgIl91Y3NkZXRfb3Blbl82NCIsICJfdWNzZGV0X3NldFRleHRfNjQiLCAiX3VuekNsb3NlIiwgIl91bnpDbG9zZUN1cnJlbnRGaWxlIiwgIl91bnpHZXRDdXJyZW50RmlsZUluZm8iLCAiX3VuekdldEN1cnJlbnRGaWxlSW5mbzY0IiwgIl91bnpHZXRHbG9iYWxJbmZvIiwgIl91bnpHb1RvRmlyc3RGaWxlIiwgIl91bnpHb1RvTmV4dEZpbGUiLCAiX3VuekxvY2F0ZUZpbGUiLCAiX3Vuek9wZW4iLCAiX3Vuek9wZW4yIiwgIl91bnpPcGVuQ3VycmVudEZpbGUiLCAiX3VuelJlYWRDdXJyZW50RmlsZSIsICJfcHJvY19leGl0IiwgImNvZGUiLCAiZXhpdEpTIiwgImltcGxpY2l0IiwgImhhbmRsZUV4Y2VwdGlvbiIsICJnZXRDRnVuYyIsICJpZGVudCIsICJmdW5jIiwgInN0cmluZ1RvVVRGOE9uU3RhY2siLCAic3RhY2tBbGxvYyIsICJjY2FsbCIsICJyZXR1cm5UeXBlIiwgImFyZ1R5cGVzIiwgImFyZ3MiLCAib3B0cyIsICJ0b0MiLCAiYXJyIiwgImNvbnZlcnRSZXR1cm5WYWx1ZSIsICJjQXJncyIsICJzdGFjayIsICJjb252ZXJ0ZXIiLCAic3RhY2tTYXZlIiwgIm9uRG9uZSIsICJzdGFja1Jlc3RvcmUiLCAiYXNtIiwgIl9fX3dhc21fY2FsbF9jdG9ycyIsICJfbWFpbiIsICJfZHVja2RiX3dlYl9mc19nbG9iX2FkZF9wYXRoIiwgIl9kdWNrZGJfd2ViX2NsZWFyX3Jlc3BvbnNlIiwgIl9kdWNrZGJfd2ViX2ZhaWxfd2l0aCIsICJfZHVja2RiX3dlYl9yZXNldCIsICJfZHVja2RiX3dlYl9jb25uZWN0IiwgIl9kdWNrZGJfd2ViX2Rpc2Nvbm5lY3QiLCAiX2R1Y2tkYl93ZWJfZmx1c2hfZmlsZXMiLCAiX2R1Y2tkYl93ZWJfZmx1c2hfZmlsZSIsICJfZHVja2RiX3dlYl9vcGVuIiwgIl9kdWNrZGJfd2ViX2dldF9nbG9iYWxfZmlsZV9pbmZvIiwgIl9kdWNrZGJfd2ViX2NvbGxlY3RfZmlsZV9zdGF0cyIsICJfZHVja2RiX3dlYl9leHBvcnRfZmlsZV9zdGF0cyIsICJfZHVja2RiX3dlYl9mc19kcm9wX2ZpbGUiLCAiX2R1Y2tkYl93ZWJfZnNfZHJvcF9maWxlcyIsICJfZHVja2RiX3dlYl9mc19nbG9iX2ZpbGVfaW5mb3MiLCAiX2R1Y2tkYl93ZWJfZnNfZ2V0X2ZpbGVfaW5mb19ieV9pZCIsICJfZHVja2RiX3dlYl9mc19nZXRfZmlsZV9pbmZvX2J5X25hbWUiLCAiX2R1Y2tkYl93ZWJfZnNfcmVnaXN0ZXJfZmlsZV91cmwiLCAiX2R1Y2tkYl93ZWJfZnNfcmVnaXN0ZXJfZmlsZV9idWZmZXIiLCAiX2R1Y2tkYl93ZWJfY29weV9maWxlX3RvX2J1ZmZlciIsICJfZHVja2RiX3dlYl9jb3B5X2ZpbGVfdG9fcGF0aCIsICJfZHVja2RiX3dlYl9nZXRfdmVyc2lvbiIsICJfZHVja2RiX3dlYl9nZXRfZmVhdHVyZV9mbGFncyIsICJfZHVja2RiX3dlYl90b2tlbml6ZSIsICJfZHVja2RiX3dlYl91ZGZfc2NhbGFyX2NyZWF0ZSIsICJfZHVja2RiX3dlYl9wcmVwYXJlZF9jcmVhdGUiLCAiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfY2xvc2UiLCAiX2R1Y2tkYl93ZWJfcHJlcGFyZWRfcnVuIiwgIl9kdWNrZGJfd2ViX3ByZXBhcmVkX3NlbmQiLCAiX2R1Y2tkYl93ZWJfcXVlcnlfcnVuIiwgIl9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfc3RhcnQiLCAiX2R1Y2tkYl93ZWJfcGVuZGluZ19xdWVyeV9wb2xsIiwgIl9kdWNrZGJfd2ViX3BlbmRpbmdfcXVlcnlfY2FuY2VsIiwgIl9kdWNrZGJfd2ViX3F1ZXJ5X2ZldGNoX3Jlc3VsdHMiLCAiX2R1Y2tkYl93ZWJfZ2V0X3RhYmxlbmFtZXMiLCAiX2R1Y2tkYl93ZWJfaW5zZXJ0X2Fycm93X2Zyb21faXBjX3N0cmVhbSIsICJfZHVja2RiX3dlYl9pbnNlcnRfY3N2X2Zyb21fcGF0aCIsICJfZHVja2RiX3dlYl9pbnNlcnRfanNvbl9mcm9tX3BhdGgiLCAiX19fZXJybm9fbG9jYXRpb24iLCAiX2ZyZWUiLCAiY2FsbGVkUnVuIiwgInJ1bkNhbGxlciIsICJydW4iLCAiY2FsbE1haW4iLCAiZW50cnlGdW5jdGlvbiIsICJhcmdjIiwgImFyZ3YiLCAiZG9SdW4iLCAic2hvdWxkUnVuTm93IiwgImR1Y2tkYl9ub2RlX2Jsb2NraW5nX2V4cG9ydHMiLCAiX19leHBvcnQiLCAiQ29uc29sZUxvZ2dlciIsICJERUZBVUxUX1JVTlRJTUUiLCAiRHVja0RCQWNjZXNzTW9kZSIsICJEdWNrREJCaW5kaW5nc0Jhc2UiLCAiRHVja0RCQ29ubmVjdGlvbiIsICJEdWNrREJEYXRhUHJvdG9jb2wiLCAiRHVja0RCRmVhdHVyZSIsICJGaWxlRmxhZ3MiLCAiRmlsZVN0YXRpc3RpY3MiLCAiSlNPTlRhYmxlU2hhcGUiLCAiTG9nRXZlbnQiLCAiTG9nTGV2ZWwiLCAiTG9nT3JpZ2luIiwgIkxvZ1RvcGljIiwgIk5PREVfUlVOVElNRSIsICJQQUNLQUdFX05BTUUiLCAiUEFDS0FHRV9WRVJTSU9OIiwgIlBBQ0tBR0VfVkVSU0lPTl9NQUpPUiIsICJQQUNLQUdFX1ZFUlNJT05fTUlOT1IiLCAiUEFDS0FHRV9WRVJTSU9OX1BBVENIIiwgIlByZXBhcmVkU3RhdGVtZW50IiwgIlJlc3VsdFN0cmVhbUl0ZXJhdG9yIiwgIlN0YXR1c0NvZGUiLCAiVm9pZExvZ2dlciIsICJjYWxsU1JldCIsICJjb3B5QnVmZmVyIiwgImNyZWF0ZUR1Y2tEQiIsICJkZWNvZGVUZXh0IiwgImRyb3BSZXNwb25zZUJ1ZmZlcnMiLCAiZmFpbFdpdGgiLCAiZ2V0SnNEZWxpdnJCdW5kbGVzIiwgImdldExvZ0V2ZW50TGFiZWwiLCAiZ2V0TG9nTGV2ZWxMYWJlbCIsICJnZXRMb2dPcmlnaW5MYWJlbCIsICJnZXRMb2dUb3BpY0xhYmVsIiwgImdldFBsYXRmb3JtRmVhdHVyZXMiLCAiaXNGaXJlZm94IiwgImlzTm9kZSIsICJpc1NhZmFyaSIsICJyZWFkU3RyaW5nIiwgInNlbGVjdEJ1bmRsZSIsICJfX3RvQ29tbW9uSlMiLCAiYXJyb3ciLCAiRHVja0RCQ29ubmVjdGlvbiIsICJiaW5kaW5ncyIsICJjb25uIiwgImNhbGxiYWNrIiwgInRleHQiLCAiYnVmZmVyIiwgInJlYWRlciIsICJoZWFkZXIiLCAicmVzb2x2ZSIsICJyZWplY3QiLCAiZSIsICJpdGVyIiwgIlJlc3VsdFN0cmVhbUl0ZXJhdG9yIiwgInF1ZXJ5IiwgInN0bXQiLCAiUHJlcGFyZWRTdGF0ZW1lbnQiLCAibmFtZSIsICJyZXR1cm5zIiwgImZ1bmMiLCAidGFibGUiLCAib3B0aW9ucyIsICJwYXRoIiwgImJ1ZmZlckk4IiwgImNvbm5lY3Rpb25JZCIsICJzdGF0ZW1lbnRJZCIsICJwYXJhbXMiLCAiU3RhdHVzQ29kZSIsICJURVhUX0VOQ09ERVIiLCAiVEVYVF9ERUNPREVSIiwgInN0b3JlRXJyb3IiLCAibW9kIiwgInJlc3BvbnNlIiwgIm1lc3NhZ2UiLCAibXNnQnVmZmVyIiwgImhlYXBBZGRyIiwgImhlYXBBcnJheSIsICJnZXRUeXBlU2l6ZSIsICJwdHlwZSIsICJwdHJUb0FycmF5IiwgInB0ciIsICJoZWFwIiwgInB0clRvVWludDhBcnJheSIsICJuIiwgInB0clRvRmxvYXQ2NEFycmF5IiwgImNhbGxTY2FsYXJVREYiLCAicnVudGltZSIsICJmdW5jSWQiLCAiZGVzY1B0ciIsICJkZXNjU2l6ZSIsICJwdHJzUHRyIiwgInB0cnNTaXplIiwgInVkZiIsICJyYXdEZXNjIiwgImRlc2MiLCAicHRycyIsICJidWlsZFJlc29sdmVyIiwgImFyZyIsICJfYSIsICJ2YWxpZGl0eSIsICJyYXciLCAic3RyaW5ncyIsICJzdHJpbmdMZW5ndGhzIiwgImoiLCAic3ViYXJyYXkiLCAic3RyIiwgInJvdyIsICJ0bXAiLCAiY2hpbGRyZW4iLCAiYXR0ciIsICJjaGlsZCIsICJyZXNvbHZlciIsICJkYXRhIiwgImFyZ1Jlc29sdmVycyIsICJpIiwgInJlc3VsdERhdGFMZW4iLCAicmVzdWx0RGF0YVB0ciIsICJyZXN1bHREYXRhIiwgInJlc3VsdFZhbGlkaXR5UHRyIiwgInJlc3VsdFZhbGlkaXR5IiwgInJhd1Jlc3VsdERhdGEiLCAiYXJncyIsICJyZXMiLCAicmVzdWx0TGVuZ3Roc1B0ciIsICJyZXN1bHREYXRhVVRGOCIsICJyZXN1bHRMZW5ndGhzIiwgInRvdGFsTGVuZ3RoIiwgInV0ZjgiLCAicmVzdWx0U3RyaW5nUHRyIiwgInJlc3VsdFN0cmluZ0J1ZiIsICJ3cml0ZXJPZmZzZXQiLCAicmVzdWx0VVRGOCIsICJyZXRMZW4iLCAicmV0UHRyIiwgInJldEJ1ZmZlciIsICJlIiwgIlRleHREZWNvZGVyV3JhcHBlciIsICJkZWNvZGVyIiwgImRhdGEiLCAiZGVjb2RlVGV4dCIsICJmYWlsV2l0aCIsICJtb2QiLCAibXNnIiwgImNvcHlCdWZmZXIiLCAiYmVnaW4iLCAibGVuZ3RoIiwgImJ1ZmZlciIsICJjb3B5IiwgInJlYWRTdHJpbmciLCAiRHVja0RCRGF0YVByb3RvY29sIiwgIkZpbGVGbGFncyIsICJjYWxsU1JldCIsICJmdW5jTmFtZSIsICJhcmdUeXBlcyIsICJhcmdzIiwgInN0YWNrUG9pbnRlciIsICJyZXNwb25zZSIsICJzdGF0dXMiLCAiZGF0YVNpemUiLCAiZHJvcFJlc3BvbnNlQnVmZmVycyIsICJERUZBVUxUX1JVTlRJTUUiLCAiX21vZCIsICJfZmVhdHVyZSIsICJfZmlsZUlkIiwgImZsYWdzIiwgIl9uZXdTaXplIiwgIl9idWZmZXIiLCAiX2J5dGVzIiwgIl9sb2NhdGlvbiIsICJfcGF0aFB0ciIsICJfcGF0aExlbiIsICJfZnJvbVB0ciIsICJfZnJvbUxlbiIsICJfdG9QdHIiLCAiX3RvTGVuIiwgImZ1bmNJZCIsICJkZXNjUHRyIiwgImRlc2NTaXplIiwgInB0cnNQdHIiLCAicHRyc1NpemUiLCAiY2FsbFNjYWxhclVERiIsICJGaWxlU3RhdGlzdGljcyIsICJ1OGFycmF5IiwgImY2NCIsICJibG9ja3MiLCAiaW5kZXgiLCAib3V0IiwgImFycm93IiwgImFycm93VG9TUUxUeXBlIiwgInR5cGUiLCAiZGVjIiwgImMiLCAiYXJyb3dUb1NRTEZpZWxkIiwgIm1hcF8iLCAibmFtZSIsICJ0IiwgIlRFWFRfRU5DT0RFUiIsICJEdWNrREJGZWF0dXJlIiwgIkR1Y2tEQkJpbmRpbmdzQmFzZSIsICJsb2dnZXIiLCAicnVudGltZSIsICJvblByb2dyZXNzIiwgIl8iLCAicmVzb2x2ZSIsICJ4IiwgImNvbmZpZyIsICJzIiwgImQiLCAibiIsICJjYWxsU1JldCIsICJyZWFkU3RyaW5nIiwgImRyb3BSZXNwb25zZUJ1ZmZlcnMiLCAidmVyc2lvbiIsICJ0ZXh0IiwgInJlcyIsICJjb25uIiwgIkR1Y2tEQkNvbm5lY3Rpb24iLCAid29ya2VyIiwgImNvcHlCdWZmZXIiLCAibmFtZSIsICJyZXR1cm5zIiwgImZ1bmMiLCAiZGVjbCIsICJhcnJvd1RvU1FMVHlwZSIsICJkZWYiLCAic3RhdGVtZW50IiwgInBhcmFtcyIsICJidWZmZXIiLCAib3B0aW9ucyIsICJidWZmZXJQdHIiLCAib3B0SlNPTiIsICJwYXRoIiwgImsiLCAiYXJyb3dUb1NRTEZpZWxkIiwgIm9wdCIsICJpbmZvU3RyIiwgImluZm8iLCAidXJsIiwgInByb3RvIiwgImRpcmVjdElPIiwgInB0ciIsICJoYW5kbGUiLCAicHJvdG9jb2wiLCAiY29weSIsICJmaWxlIiwgImVuYWJsZSIsICJGaWxlU3RhdGlzdGljcyIsICJEdWNrREJBY2Nlc3NNb2RlIiwgIkpTT05UYWJsZVNoYXBlIiwgIkxvZ0xldmVsIiwgIkxvZ1RvcGljIiwgIkxvZ0V2ZW50IiwgIkxvZ09yaWdpbiIsICJWb2lkTG9nZ2VyIiwgIl9lbnRyeSIsICJDb25zb2xlTG9nZ2VyIiwgImxldmVsIiwgImVudHJ5IiwgImdldExvZ0xldmVsTGFiZWwiLCAiZ2V0TG9nRXZlbnRMYWJlbCIsICJldmVudCIsICJnZXRMb2dUb3BpY0xhYmVsIiwgInRvcGljIiwgImdldExvZ09yaWdpbkxhYmVsIiwgIm9yaWdpbiIsICJidWxrTWVtb3J5IiwgImV4Y2VwdGlvbnMiLCAic2ltZCIsICJ0aHJlYWRzIiwgImUiLCAicGFja2FnZV9kZWZhdWx0IiwgIlBBQ0tBR0VfTkFNRSIsICJwYWNrYWdlX2RlZmF1bHQiLCAiUEFDS0FHRV9WRVJTSU9OIiwgIlZFUlNJT05fUEFSVFMiLCAiUEFDS0FHRV9WRVJTSU9OX01BSk9SIiwgIlBBQ0tBR0VfVkVSU0lPTl9NSU5PUiIsICJQQUNLQUdFX1ZFUlNJT05fUEFUQ0giLCAiaXNOb2RlIiwgInVzZXJBZ2VudCIsICJpc0ZpcmVmb3giLCAiaXNTYWZhcmkiLCAiZ2V0SnNEZWxpdnJCdW5kbGVzIiwgImpzZGVsaXZyX2Rpc3RfdXJsIiwgIlBBQ0tBR0VfTkFNRSIsICJQQUNLQUdFX1ZFUlNJT04iLCAiYmlnSW50NjRBcnJheSIsICJ3YXNtRXhjZXB0aW9ucyIsICJ3YXNtVGhyZWFkcyIsICJ3YXNtU0lNRCIsICJ3YXNtQnVsa01lbW9yeSIsICJnZXRQbGF0Zm9ybUZlYXR1cmVzIiwgImV4Y2VwdGlvbnMiLCAidGhyZWFkcyIsICJzaW1kIiwgImJ1bGtNZW1vcnkiLCAic2VsZWN0QnVuZGxlIiwgImJ1bmRsZXMiLCAicGxhdGZvcm0iLCAiaW1wb3J0X2ZzIiwgImZnIiwgIk5PREVfUlVOVElNRSIsICJtb2QiLCAiZmlsZUlkIiwgImNhY2hlZCIsICJzIiwgImQiLCAibiIsICJjYWxsU1JldCIsICJmYWlsV2l0aCIsICJyZWFkU3RyaW5nIiwgImRyb3BSZXNwb25zZUJ1ZmZlcnMiLCAiaW5mb1N0ciIsICJpbmZvIiwgIl9tb2QiLCAiZmVhdHVyZSIsICJmbGFncyIsICJfYSIsICJfYiIsICJmaWxlIiwgImZkIiwgImZzIiwgImZpbGVTaXplIiwgInJlc3VsdCIsICJlIiwgIl9maWxlSWQiLCAiZmlsZUluZm8iLCAiZmlsZUhhbmRsZSIsICJuZXdTaXplIiwgImJ1ZiIsICJieXRlcyIsICJsb2NhdGlvbiIsICJzcmMiLCAicGF0aFB0ciIsICJwYXRoTGVuIiwgInBhdGgiLCAiZGVjb2RlVGV4dCIsICJfcGF0aFB0ciIsICJfcGF0aExlbiIsICJlbnRyaWVzIiwgImVudHJ5IiwgImZyb21QdHIiLCAiZnJvbUxlbiIsICJ0b1B0ciIsICJ0b0xlbiIsICJmcm9tIiwgInRvIiwgImhhbmRsZSIsICJrZXkiLCAidmFsdWUiLCAicmVzcG9uc2UiLCAiZnVuY0lkIiwgImRlc2NQdHIiLCAiZGVzY1NpemUiLCAicHRyc1B0ciIsICJwdHJzU2l6ZSIsICJjYWxsU2NhbGFyVURGIiwgImltcG9ydF9kdWNrZGJfbXZwIiwgImltcG9ydF9kdWNrZGJfbXZwIiwgImltcG9ydF9mcyIsICJEdWNrREJOb2RlQmluZGluZ3MiLCAiRHVja0RCQmluZGluZ3NCYXNlIiwgImxvZ2dlciIsICJydW50aW1lIiwgIm1haW5Nb2R1bGVQYXRoIiwgInB0aHJlYWRXb3JrZXJQYXRoIiwgInBhdGgiLCAicHJlZml4IiwgImltcG9ydHMiLCAic3VjY2VzcyIsICJmdW5jIiwgImJ1ZiIsICJmcyIsICJvdXRwdXQiLCAibW9kdWxlT3ZlcnJpZGVzIiwgIkR1Y2tEQldhc20iLCAiRHVja0RCIiwgIkR1Y2tEQk5vZGVCaW5kaW5ncyIsICJsb2dnZXIiLCAicnVudGltZSIsICJtYWluTW9kdWxlUGF0aCIsICJwdGhyZWFkV29ya2VyUGF0aCIsICJtb2R1bGVPdmVycmlkZXMiLCAiRHVja0RCV2FzbSIsICJpbXBvcnRfZHVja2RiX2VoIiwgIkR1Y2tEQiIsICJEdWNrREJOb2RlQmluZGluZ3MiLCAibG9nZ2VyIiwgInJ1bnRpbWUiLCAibWFpbk1vZHVsZVBhdGgiLCAicHRocmVhZFdvcmtlclBhdGgiLCAibW9kdWxlT3ZlcnJpZGVzIiwgIkR1Y2tEQldhc20iLCAiY3JlYXRlRHVja0RCIiwgImJ1bmRsZXMiLCAibG9nZ2VyIiwgInJ1bnRpbWUiLCAiZ2V0UGxhdGZvcm1GZWF0dXJlcyIsICJEdWNrREIiXQp9Cg==
