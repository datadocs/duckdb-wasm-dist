"use strict";var Qf=Object.create;var Dn=Object.defineProperty;var Jf=Object.getOwnPropertyDescriptor;var Zf=Object.getOwnPropertyNames;var ep=Object.getPrototypeOf,tp=Object.prototype.hasOwnProperty;var q=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),rp=(r,t)=>{for(var e in t)Dn(r,e,{get:t[e],enumerable:!0})},Vu=(r,t,e,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of Zf(t))!tp.call(r,a)&&a!==e&&Dn(r,a,{get:()=>t[a],enumerable:!(n=Jf(t,a))||n.enumerable});return r};var $t=(r,t,e)=>(e=r!=null?Qf(ep(r)):{},Vu(t||!r||!r.__esModule?Dn(e,"default",{value:r,enumerable:!0}):e,r)),np=r=>Vu(Dn({},"__esModule",{value:!0}),r);var fl=q(cr=>{"use strict";Object.defineProperty(cr,"__esModule",{value:!0});cr.splitWhen=cr.flatten=void 0;function yp(r){return r.reduce((t,e)=>[].concat(t,e),[])}cr.flatten=yp;function vp(r,t){let e=[[]],n=0;for(let a of r)t(a)?(n++,e[n]=[]):e[n].push(a);return e}cr.splitWhen=vp});var pl=q(Nn=>{"use strict";Object.defineProperty(Nn,"__esModule",{value:!0});Nn.isEnoentCodeError=void 0;function wp(r){return r.code==="ENOENT"}Nn.isEnoentCodeError=wp});var ml=q(Un=>{"use strict";Object.defineProperty(Un,"__esModule",{value:!0});Un.createDirentFromStats=void 0;var qa=class{constructor(t,e){this.name=t,this.isBlockDevice=e.isBlockDevice.bind(e),this.isCharacterDevice=e.isCharacterDevice.bind(e),this.isDirectory=e.isDirectory.bind(e),this.isFIFO=e.isFIFO.bind(e),this.isFile=e.isFile.bind(e),this.isSocket=e.isSocket.bind(e),this.isSymbolicLink=e.isSymbolicLink.bind(e)}};function Sp(r,t){return new qa(r,t)}Un.createDirentFromStats=Sp});var bl=q(dt=>{"use strict";Object.defineProperty(dt,"__esModule",{value:!0});dt.removeLeadingDotSegment=dt.escape=dt.makeAbsolute=dt.unixify=void 0;var Ep=require("path"),kp=2,Cp=/(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;function Tp(r){return r.replace(/\\/g,"/")}dt.unixify=Tp;function Rp(r,t){return Ep.resolve(r,t)}dt.makeAbsolute=Rp;function Ap(r){return r.replace(Cp,"\\$2")}dt.escape=Ap;function jp(r){if(r.charAt(0)==="."){let t=r.charAt(1);if(t==="/"||t==="\\")return r.slice(kp)}return r}dt.removeLeadingDotSegment=jp});var gl=q((Xg,hl)=>{hl.exports=function(t){if(typeof t!="string"||t==="")return!1;for(var e;e=/(\\).|([@?!+*]\(.*\))/g.exec(t);){if(e[2])return!0;t=t.slice(e.index+e[0].length)}return!1}});var wl=q((Qg,vl)=>{var Dp=gl(),yl={"{":"}","(":")","[":"]"},Mp=function(r){if(r[0]==="!")return!0;for(var t=0,e=-2,n=-2,a=-2,l=-2,c=-2;t<r.length;){if(r[t]==="*"||r[t+1]==="?"&&/[\].+)]/.test(r[t])||n!==-1&&r[t]==="["&&r[t+1]!=="]"&&(n<t&&(n=r.indexOf("]",t)),n>t&&(c===-1||c>n||(c=r.indexOf("\\",t),c===-1||c>n)))||a!==-1&&r[t]==="{"&&r[t+1]!=="}"&&(a=r.indexOf("}",t),a>t&&(c=r.indexOf("\\",t),c===-1||c>a))||l!==-1&&r[t]==="("&&r[t+1]==="?"&&/[:!=]/.test(r[t+2])&&r[t+3]!==")"&&(l=r.indexOf(")",t),l>t&&(c=r.indexOf("\\",t),c===-1||c>l))||e!==-1&&r[t]==="("&&r[t+1]!=="|"&&(e<t&&(e=r.indexOf("|",t)),e!==-1&&r[e+1]!==")"&&(l=r.indexOf(")",e),l>e&&(c=r.indexOf("\\",e),c===-1||c>l))))return!0;if(r[t]==="\\"){var m=r[t+1];t+=2;var g=yl[m];if(g){var D=r.indexOf(g,t);D!==-1&&(t=D+1)}if(r[t]==="!")return!0}else t++}return!1},Lp=function(r){if(r[0]==="!")return!0;for(var t=0;t<r.length;){if(/[*?{}()[\]]/.test(r[t]))return!0;if(r[t]==="\\"){var e=r[t+1];t+=2;var n=yl[e];if(n){var a=r.indexOf(n,t);a!==-1&&(t=a+1)}if(r[t]==="!")return!0}else t++}return!1};vl.exports=function(t,e){if(typeof t!="string"||t==="")return!1;if(Dp(t))return!0;var n=Mp;return e&&e.strict===!1&&(n=Lp),n(t)}});var El=q((Jg,Sl)=>{"use strict";var Fp=wl(),Ip=require("path").posix.dirname,Op=require("os").platform()==="win32",Ga="/",Pp=/\\/g,xp=/[\{\[].*[\}\]]$/,Np=/(^|[^\\])([\{\[]|\([^\)]+$)/,Up=/\\([\!\*\?\|\[\]\(\)\{\}])/g;Sl.exports=function(t,e){var n=Object.assign({flipBackslashes:!0},e);n.flipBackslashes&&Op&&t.indexOf(Ga)<0&&(t=t.replace(Pp,Ga)),xp.test(t)&&(t+=Ga),t+="a";do t=Ip(t);while(Fp(t)||Np.test(t));return t.replace(Up,"$1")}});var Bn=q(st=>{"use strict";st.isInteger=r=>typeof r=="number"?Number.isInteger(r):typeof r=="string"&&r.trim()!==""?Number.isInteger(Number(r)):!1;st.find=(r,t)=>r.nodes.find(e=>e.type===t);st.exceedsLimit=(r,t,e=1,n)=>n===!1||!st.isInteger(r)||!st.isInteger(t)?!1:(Number(t)-Number(r))/Number(e)>=n;st.escapeNode=(r,t=0,e)=>{let n=r.nodes[t];!n||(e&&n.type===e||n.type==="open"||n.type==="close")&&n.escaped!==!0&&(n.value="\\"+n.value,n.escaped=!0)};st.encloseBrace=r=>r.type!=="brace"?!1:r.commas>>0+r.ranges>>0===0?(r.invalid=!0,!0):!1;st.isInvalidBrace=r=>r.type!=="brace"?!1:r.invalid===!0||r.dollar?!0:r.commas>>0+r.ranges>>0===0||r.open!==!0||r.close!==!0?(r.invalid=!0,!0):!1;st.isOpenOrClose=r=>r.type==="open"||r.type==="close"?!0:r.open===!0||r.close===!0;st.reduce=r=>r.reduce((t,e)=>(e.type==="text"&&t.push(e.value),e.type==="range"&&(e.type="text"),t),[]);st.flatten=(...r)=>{let t=[],e=n=>{for(let a=0;a<n.length;a++){let l=n[a];Array.isArray(l)?e(l,t):l!==void 0&&t.push(l)}return t};return e(r),t}});var Hn=q((ey,Cl)=>{"use strict";var kl=Bn();Cl.exports=(r,t={})=>{let e=(n,a={})=>{let l=t.escapeInvalid&&kl.isInvalidBrace(a),c=n.invalid===!0&&t.escapeInvalid===!0,m="";if(n.value)return(l||c)&&kl.isOpenOrClose(n)?"\\"+n.value:n.value;if(n.value)return n.value;if(n.nodes)for(let g of n.nodes)m+=e(g);return m};return e(r)}});var Rl=q((ty,Tl)=>{"use strict";Tl.exports=function(r){return typeof r=="number"?r-r===0:typeof r=="string"&&r.trim()!==""?Number.isFinite?Number.isFinite(+r):isFinite(+r):!1}});var Pl=q((ry,Ol)=>{"use strict";var Al=Rl(),zt=(r,t,e)=>{if(Al(r)===!1)throw new TypeError("toRegexRange: expected the first argument to be a number");if(t===void 0||r===t)return String(r);if(Al(t)===!1)throw new TypeError("toRegexRange: expected the second argument to be a number.");let n={relaxZeros:!0,...e};typeof n.strictZeros=="boolean"&&(n.relaxZeros=n.strictZeros===!1);let a=String(n.relaxZeros),l=String(n.shorthand),c=String(n.capture),m=String(n.wrap),g=r+":"+t+"="+a+l+c+m;if(zt.cache.hasOwnProperty(g))return zt.cache[g].result;let D=Math.min(r,t),y=Math.max(r,t);if(Math.abs(D-y)===1){let W=r+"|"+t;return n.capture?`(${W})`:n.wrap===!1?W:`(?:${W})`}let I=Il(r)||Il(t),A={min:r,max:t,a:D,b:y},z=[],H=[];if(I&&(A.isPadded=I,A.maxLen=String(A.max).length),D<0){let W=y<0?Math.abs(y):1;H=jl(W,Math.abs(D),A,n),D=A.a=0}return y>=0&&(z=jl(D,y,A,n)),A.negatives=H,A.positives=z,A.result=Bp(H,z,n),n.capture===!0?A.result=`(${A.result})`:n.wrap!==!1&&z.length+H.length>1&&(A.result=`(?:${A.result})`),zt.cache[g]=A,A.result};function Bp(r,t,e){let n=Ya(r,t,"-",!1,e)||[],a=Ya(t,r,"",!1,e)||[],l=Ya(r,t,"-?",!0,e)||[];return n.concat(l).concat(a).join("|")}function Hp(r,t){let e=1,n=1,a=Ml(r,e),l=new Set([t]);for(;r<=a&&a<=t;)l.add(a),e+=1,a=Ml(r,e);for(a=Ll(t+1,n)-1;r<a&&a<=t;)l.add(a),n+=1,a=Ll(t+1,n)-1;return l=[...l],l.sort(Gp),l}function Wp(r,t,e){if(r===t)return{pattern:r,count:[],digits:0};let n=qp(r,t),a=n.length,l="",c=0;for(let m=0;m<a;m++){let[g,D]=n[m];g===D?l+=g:g!=="0"||D!=="9"?l+=Yp(g,D,e):c++}return c&&(l+=e.shorthand===!0?"\\d":"[0-9]"),{pattern:l,count:[c],digits:a}}function jl(r,t,e,n){let a=Hp(r,t),l=[],c=r,m;for(let g=0;g<a.length;g++){let D=a[g],y=Wp(String(c),String(D),n),I="";if(!e.isPadded&&m&&m.pattern===y.pattern){m.count.length>1&&m.count.pop(),m.count.push(y.count[0]),m.string=m.pattern+Fl(m.count),c=D+1;continue}e.isPadded&&(I=$p(D,e,n)),y.string=I+y.pattern+Fl(y.count),l.push(y),c=D+1,m=y}return l}function Ya(r,t,e,n,a){let l=[];for(let c of r){let{string:m}=c;!n&&!Dl(t,"string",m)&&l.push(e+m),n&&Dl(t,"string",m)&&l.push(e+m)}return l}function qp(r,t){let e=[];for(let n=0;n<r.length;n++)e.push([r[n],t[n]]);return e}function Gp(r,t){return r>t?1:t>r?-1:0}function Dl(r,t,e){return r.some(n=>n[t]===e)}function Ml(r,t){return Number(String(r).slice(0,-t)+"9".repeat(t))}function Ll(r,t){return r-r%Math.pow(10,t)}function Fl(r){let[t=0,e=""]=r;return e||t>1?`{${t+(e?","+e:"")}}`:""}function Yp(r,t,e){return`[${r}${t-r===1?"":"-"}${t}]`}function Il(r){return/^-?(0+)\d/.test(r)}function $p(r,t,e){if(!t.isPadded)return r;let n=Math.abs(t.maxLen-String(r).length),a=e.relaxZeros!==!1;switch(n){case 0:return"";case 1:return a?"0?":"0";case 2:return a?"0{0,2}":"00";default:return a?`0{0,${n}}`:`0{${n}}`}}zt.cache={};zt.clearCache=()=>zt.cache={};Ol.exports=zt});var Va=q((ny,Gl)=>{"use strict";var zp=require("util"),Ul=Pl(),xl=r=>r!==null&&typeof r=="object"&&!Array.isArray(r),Vp=r=>t=>r===!0?Number(t):String(t),$a=r=>typeof r=="number"||typeof r=="string"&&r!=="",Vr=r=>Number.isInteger(+r),za=r=>{let t=`${r}`,e=-1;if(t[0]==="-"&&(t=t.slice(1)),t==="0")return!1;for(;t[++e]==="0";);return e>0},Kp=(r,t,e)=>typeof r=="string"||typeof t=="string"?!0:e.stringify===!0,Xp=(r,t,e)=>{if(t>0){let n=r[0]==="-"?"-":"";n&&(r=r.slice(1)),r=n+r.padStart(n?t-1:t,"0")}return e===!1?String(r):r},Nl=(r,t)=>{let e=r[0]==="-"?"-":"";for(e&&(r=r.slice(1),t--);r.length<t;)r="0"+r;return e?"-"+r:r},Qp=(r,t)=>{r.negatives.sort((c,m)=>c<m?-1:c>m?1:0),r.positives.sort((c,m)=>c<m?-1:c>m?1:0);let e=t.capture?"":"?:",n="",a="",l;return r.positives.length&&(n=r.positives.join("|")),r.negatives.length&&(a=`-(${e}${r.negatives.join("|")})`),n&&a?l=`${n}|${a}`:l=n||a,t.wrap?`(${e}${l})`:l},Bl=(r,t,e,n)=>{if(e)return Ul(r,t,{wrap:!1,...n});let a=String.fromCharCode(r);if(r===t)return a;let l=String.fromCharCode(t);return`[${a}-${l}]`},Hl=(r,t,e)=>{if(Array.isArray(r)){let n=e.wrap===!0,a=e.capture?"":"?:";return n?`(${a}${r.join("|")})`:r.join("|")}return Ul(r,t,e)},Wl=(...r)=>new RangeError("Invalid range arguments: "+zp.inspect(...r)),ql=(r,t,e)=>{if(e.strictRanges===!0)throw Wl([r,t]);return[]},Jp=(r,t)=>{if(t.strictRanges===!0)throw new TypeError(`Expected step "${r}" to be a number`);return[]},Zp=(r,t,e=1,n={})=>{let a=Number(r),l=Number(t);if(!Number.isInteger(a)||!Number.isInteger(l)){if(n.strictRanges===!0)throw Wl([r,t]);return[]}a===0&&(a=0),l===0&&(l=0);let c=a>l,m=String(r),g=String(t),D=String(e);e=Math.max(Math.abs(e),1);let y=za(m)||za(g)||za(D),I=y?Math.max(m.length,g.length,D.length):0,A=y===!1&&Kp(r,t,n)===!1,z=n.transform||Vp(A);if(n.toRegex&&e===1)return Bl(Nl(r,I),Nl(t,I),!0,n);let H={negatives:[],positives:[]},W=me=>H[me<0?"negatives":"positives"].push(Math.abs(me)),J=[],X=0;for(;c?a>=l:a<=l;)n.toRegex===!0&&e>1?W(a):J.push(Xp(z(a,X),I,A)),a=c?a-e:a+e,X++;return n.toRegex===!0?e>1?Qp(H,n):Hl(J,null,{wrap:!1,...n}):J},em=(r,t,e=1,n={})=>{if(!Vr(r)&&r.length>1||!Vr(t)&&t.length>1)return ql(r,t,n);let a=n.transform||(A=>String.fromCharCode(A)),l=`${r}`.charCodeAt(0),c=`${t}`.charCodeAt(0),m=l>c,g=Math.min(l,c),D=Math.max(l,c);if(n.toRegex&&e===1)return Bl(g,D,!1,n);let y=[],I=0;for(;m?l>=c:l<=c;)y.push(a(l,I)),l=m?l-e:l+e,I++;return n.toRegex===!0?Hl(y,null,{wrap:!1,options:n}):y},Wn=(r,t,e,n={})=>{if(t==null&&$a(r))return[r];if(!$a(r)||!$a(t))return ql(r,t,n);if(typeof e=="function")return Wn(r,t,1,{transform:e});if(xl(e))return Wn(r,t,0,e);let a={...n};return a.capture===!0&&(a.wrap=!0),e=e||a.step||1,Vr(e)?Vr(r)&&Vr(t)?Zp(r,t,e,a):em(r,t,Math.max(Math.abs(e),1),a):e!=null&&!xl(e)?Jp(e,a):Wn(r,t,1,e)};Gl.exports=Wn});var zl=q((iy,$l)=>{"use strict";var tm=Va(),Yl=Bn(),rm=(r,t={})=>{let e=(n,a={})=>{let l=Yl.isInvalidBrace(a),c=n.invalid===!0&&t.escapeInvalid===!0,m=l===!0||c===!0,g=t.escapeInvalid===!0?"\\":"",D="";if(n.isOpen===!0||n.isClose===!0)return g+n.value;if(n.type==="open")return m?g+n.value:"(";if(n.type==="close")return m?g+n.value:")";if(n.type==="comma")return n.prev.type==="comma"?"":m?n.value:"|";if(n.value)return n.value;if(n.nodes&&n.ranges>0){let y=Yl.reduce(n.nodes),I=tm(...y,{...t,wrap:!1,toRegex:!0});if(I.length!==0)return y.length>1&&I.length>1?`(${I})`:I}if(n.nodes)for(let y of n.nodes)D+=e(y,n);return D};return e(r)};$l.exports=rm});var Xl=q((sy,Kl)=>{"use strict";var nm=Va(),Vl=Hn(),_r=Bn(),Vt=(r="",t="",e=!1)=>{let n=[];if(r=[].concat(r),t=[].concat(t),!t.length)return r;if(!r.length)return e?_r.flatten(t).map(a=>`{${a}}`):t;for(let a of r)if(Array.isArray(a))for(let l of a)n.push(Vt(l,t,e));else for(let l of t)e===!0&&typeof l=="string"&&(l=`{${l}}`),n.push(Array.isArray(l)?Vt(a,l,e):a+l);return _r.flatten(n)},im=(r,t={})=>{let e=t.rangeLimit===void 0?1e3:t.rangeLimit,n=(a,l={})=>{a.queue=[];let c=l,m=l.queue;for(;c.type!=="brace"&&c.type!=="root"&&c.parent;)c=c.parent,m=c.queue;if(a.invalid||a.dollar){m.push(Vt(m.pop(),Vl(a,t)));return}if(a.type==="brace"&&a.invalid!==!0&&a.nodes.length===2){m.push(Vt(m.pop(),["{}"]));return}if(a.nodes&&a.ranges>0){let I=_r.reduce(a.nodes);if(_r.exceedsLimit(...I,t.step,e))throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");let A=nm(...I,t);A.length===0&&(A=Vl(a,t)),m.push(Vt(m.pop(),A)),a.nodes=[];return}let g=_r.encloseBrace(a),D=a.queue,y=a;for(;y.type!=="brace"&&y.type!=="root"&&y.parent;)y=y.parent,D=y.queue;for(let I=0;I<a.nodes.length;I++){let A=a.nodes[I];if(A.type==="comma"&&a.type==="brace"){I===1&&D.push(""),D.push("");continue}if(A.type==="close"){m.push(Vt(m.pop(),D,g));continue}if(A.value&&A.type!=="open"){D.push(Vt(D.pop(),A.value));continue}A.nodes&&n(A,a)}return D};return _r.flatten(n(r))};Kl.exports=im});var Jl=q((ay,Ql)=>{"use strict";Ql.exports={MAX_LENGTH:1024*64,CHAR_0:"0",CHAR_9:"9",CHAR_UPPERCASE_A:"A",CHAR_LOWERCASE_A:"a",CHAR_UPPERCASE_Z:"Z",CHAR_LOWERCASE_Z:"z",CHAR_LEFT_PARENTHESES:"(",CHAR_RIGHT_PARENTHESES:")",CHAR_ASTERISK:"*",CHAR_AMPERSAND:"&",CHAR_AT:"@",CHAR_BACKSLASH:"\\",CHAR_BACKTICK:"`",CHAR_CARRIAGE_RETURN:"\r",CHAR_CIRCUMFLEX_ACCENT:"^",CHAR_COLON:":",CHAR_COMMA:",",CHAR_DOLLAR:"$",CHAR_DOT:".",CHAR_DOUBLE_QUOTE:'"',CHAR_EQUAL:"=",CHAR_EXCLAMATION_MARK:"!",CHAR_FORM_FEED:"\f",CHAR_FORWARD_SLASH:"/",CHAR_HASH:"#",CHAR_HYPHEN_MINUS:"-",CHAR_LEFT_ANGLE_BRACKET:"<",CHAR_LEFT_CURLY_BRACE:"{",CHAR_LEFT_SQUARE_BRACKET:"[",CHAR_LINE_FEED:`
`,CHAR_NO_BREAK_SPACE:"\xA0",CHAR_PERCENT:"%",CHAR_PLUS:"+",CHAR_QUESTION_MARK:"?",CHAR_RIGHT_ANGLE_BRACKET:">",CHAR_RIGHT_CURLY_BRACE:"}",CHAR_RIGHT_SQUARE_BRACKET:"]",CHAR_SEMICOLON:";",CHAR_SINGLE_QUOTE:"'",CHAR_SPACE:" ",CHAR_TAB:"	",CHAR_UNDERSCORE:"_",CHAR_VERTICAL_LINE:"|",CHAR_ZERO_WIDTH_NOBREAK_SPACE:"\uFEFF"}});var nc=q((oy,rc)=>{"use strict";var sm=Hn(),{MAX_LENGTH:Zl,CHAR_BACKSLASH:Ka,CHAR_BACKTICK:am,CHAR_COMMA:om,CHAR_DOT:um,CHAR_LEFT_PARENTHESES:lm,CHAR_RIGHT_PARENTHESES:cm,CHAR_LEFT_CURLY_BRACE:_m,CHAR_RIGHT_CURLY_BRACE:dm,CHAR_LEFT_SQUARE_BRACKET:ec,CHAR_RIGHT_SQUARE_BRACKET:tc,CHAR_DOUBLE_QUOTE:fm,CHAR_SINGLE_QUOTE:pm,CHAR_NO_BREAK_SPACE:mm,CHAR_ZERO_WIDTH_NOBREAK_SPACE:bm}=Jl(),hm=(r,t={})=>{if(typeof r!="string")throw new TypeError("Expected a string");let e=t||{},n=typeof e.maxLength=="number"?Math.min(Zl,e.maxLength):Zl;if(r.length>n)throw new SyntaxError(`Input length (${r.length}), exceeds max characters (${n})`);let a={type:"root",input:r,nodes:[]},l=[a],c=a,m=a,g=0,D=r.length,y=0,I=0,A,z={},H=()=>r[y++],W=J=>{if(J.type==="text"&&m.type==="dot"&&(m.type="text"),m&&m.type==="text"&&J.type==="text"){m.value+=J.value;return}return c.nodes.push(J),J.parent=c,J.prev=m,m=J,J};for(W({type:"bos"});y<D;)if(c=l[l.length-1],A=H(),!(A===bm||A===mm)){if(A===Ka){W({type:"text",value:(t.keepEscaping?A:"")+H()});continue}if(A===tc){W({type:"text",value:"\\"+A});continue}if(A===ec){g++;let J=!0,X;for(;y<D&&(X=H());){if(A+=X,X===ec){g++;continue}if(X===Ka){A+=H();continue}if(X===tc&&(g--,g===0))break}W({type:"text",value:A});continue}if(A===lm){c=W({type:"paren",nodes:[]}),l.push(c),W({type:"text",value:A});continue}if(A===cm){if(c.type!=="paren"){W({type:"text",value:A});continue}c=l.pop(),W({type:"text",value:A}),c=l[l.length-1];continue}if(A===fm||A===pm||A===am){let J=A,X;for(t.keepQuotes!==!0&&(A="");y<D&&(X=H());){if(X===Ka){A+=X+H();continue}if(X===J){t.keepQuotes===!0&&(A+=X);break}A+=X}W({type:"text",value:A});continue}if(A===_m){I++;let X={type:"brace",open:!0,close:!1,dollar:m.value&&m.value.slice(-1)==="$"||c.dollar===!0,depth:I,commas:0,ranges:0,nodes:[]};c=W(X),l.push(c),W({type:"open",value:A});continue}if(A===dm){if(c.type!=="brace"){W({type:"text",value:A});continue}let J="close";c=l.pop(),c.close=!0,W({type:J,value:A}),I--,c=l[l.length-1];continue}if(A===om&&I>0){if(c.ranges>0){c.ranges=0;let J=c.nodes.shift();c.nodes=[J,{type:"text",value:sm(c)}]}W({type:"comma",value:A}),c.commas++;continue}if(A===um&&I>0&&c.commas===0){let J=c.nodes;if(I===0||J.length===0){W({type:"text",value:A});continue}if(m.type==="dot"){if(c.range=[],m.value+=A,m.type="range",c.nodes.length!==3&&c.nodes.length!==5){c.invalid=!0,c.ranges=0,m.type="text";continue}c.ranges++,c.args=[];continue}if(m.type==="range"){J.pop();let X=J[J.length-1];X.value+=m.value+A,m=X,c.ranges--;continue}W({type:"dot",value:A});continue}W({type:"text",value:A})}do if(c=l.pop(),c.type!=="root"){c.nodes.forEach(me=>{me.nodes||(me.type==="open"&&(me.isOpen=!0),me.type==="close"&&(me.isClose=!0),me.nodes||(me.type="text"),me.invalid=!0)});let J=l[l.length-1],X=J.nodes.indexOf(c);J.nodes.splice(X,1,...c.nodes)}while(l.length>0);return W({type:"eos"}),a};rc.exports=hm});var ac=q((uy,sc)=>{"use strict";var ic=Hn(),gm=zl(),ym=Xl(),vm=nc(),tt=(r,t={})=>{let e=[];if(Array.isArray(r))for(let n of r){let a=tt.create(n,t);Array.isArray(a)?e.push(...a):e.push(a)}else e=[].concat(tt.create(r,t));return t&&t.expand===!0&&t.nodupes===!0&&(e=[...new Set(e)]),e};tt.parse=(r,t={})=>vm(r,t);tt.stringify=(r,t={})=>ic(typeof r=="string"?tt.parse(r,t):r,t);tt.compile=(r,t={})=>(typeof r=="string"&&(r=tt.parse(r,t)),gm(r,t));tt.expand=(r,t={})=>{typeof r=="string"&&(r=tt.parse(r,t));let e=ym(r,t);return t.noempty===!0&&(e=e.filter(Boolean)),t.nodupes===!0&&(e=[...new Set(e)]),e};tt.create=(r,t={})=>r===""||r.length<3?[r]:t.expand!==!0?tt.compile(r,t):tt.expand(r,t);sc.exports=tt});var Kr=q((ly,_c)=>{"use strict";var wm=require("path"),ft="\\\\/",oc=`[^${ft}]`,Et="\\.",Sm="\\+",Em="\\?",qn="\\/",km="(?=.)",uc="[^/]",Xa=`(?:${qn}|$)`,lc=`(?:^|${qn})`,Qa=`${Et}{1,2}${Xa}`,Cm=`(?!${Et})`,Tm=`(?!${lc}${Qa})`,Rm=`(?!${Et}{0,1}${Xa})`,Am=`(?!${Qa})`,jm=`[^.${qn}]`,Dm=`${uc}*?`,cc={DOT_LITERAL:Et,PLUS_LITERAL:Sm,QMARK_LITERAL:Em,SLASH_LITERAL:qn,ONE_CHAR:km,QMARK:uc,END_ANCHOR:Xa,DOTS_SLASH:Qa,NO_DOT:Cm,NO_DOTS:Tm,NO_DOT_SLASH:Rm,NO_DOTS_SLASH:Am,QMARK_NO_DOT:jm,STAR:Dm,START_ANCHOR:lc},Mm={...cc,SLASH_LITERAL:`[${ft}]`,QMARK:oc,STAR:`${oc}*?`,DOTS_SLASH:`${Et}{1,2}(?:[${ft}]|$)`,NO_DOT:`(?!${Et})`,NO_DOTS:`(?!(?:^|[${ft}])${Et}{1,2}(?:[${ft}]|$))`,NO_DOT_SLASH:`(?!${Et}{0,1}(?:[${ft}]|$))`,NO_DOTS_SLASH:`(?!${Et}{1,2}(?:[${ft}]|$))`,QMARK_NO_DOT:`[^.${ft}]`,START_ANCHOR:`(?:^|[${ft}])`,END_ANCHOR:`(?:[${ft}]|$)`},Lm={alnum:"a-zA-Z0-9",alpha:"a-zA-Z",ascii:"\\x00-\\x7F",blank:" \\t",cntrl:"\\x00-\\x1F\\x7F",digit:"0-9",graph:"\\x21-\\x7E",lower:"a-z",print:"\\x20-\\x7E ",punct:"\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",space:" \\t\\r\\n\\v\\f",upper:"A-Z",word:"A-Za-z0-9_",xdigit:"A-Fa-f0-9"};_c.exports={MAX_LENGTH:1024*64,POSIX_REGEX_SOURCE:Lm,REGEX_BACKSLASH:/\\(?![*+?^${}(|)[\]])/g,REGEX_NON_SPECIAL_CHARS:/^[^@![\].,$*+?^{}()|\\/]+/,REGEX_SPECIAL_CHARS:/[-*+?.^${}(|)[\]]/,REGEX_SPECIAL_CHARS_BACKREF:/(\\?)((\W)(\3*))/g,REGEX_SPECIAL_CHARS_GLOBAL:/([-*+?.^${}(|)[\]])/g,REGEX_REMOVE_BACKSLASH:/(?:\[.*?[^\\]\]|\\(?=.))/g,REPLACEMENTS:{"***":"*","**/**":"**","**/**/**":"**"},CHAR_0:48,CHAR_9:57,CHAR_UPPERCASE_A:65,CHAR_LOWERCASE_A:97,CHAR_UPPERCASE_Z:90,CHAR_LOWERCASE_Z:122,CHAR_LEFT_PARENTHESES:40,CHAR_RIGHT_PARENTHESES:41,CHAR_ASTERISK:42,CHAR_AMPERSAND:38,CHAR_AT:64,CHAR_BACKWARD_SLASH:92,CHAR_CARRIAGE_RETURN:13,CHAR_CIRCUMFLEX_ACCENT:94,CHAR_COLON:58,CHAR_COMMA:44,CHAR_DOT:46,CHAR_DOUBLE_QUOTE:34,CHAR_EQUAL:61,CHAR_EXCLAMATION_MARK:33,CHAR_FORM_FEED:12,CHAR_FORWARD_SLASH:47,CHAR_GRAVE_ACCENT:96,CHAR_HASH:35,CHAR_HYPHEN_MINUS:45,CHAR_LEFT_ANGLE_BRACKET:60,CHAR_LEFT_CURLY_BRACE:123,CHAR_LEFT_SQUARE_BRACKET:91,CHAR_LINE_FEED:10,CHAR_NO_BREAK_SPACE:160,CHAR_PERCENT:37,CHAR_PLUS:43,CHAR_QUESTION_MARK:63,CHAR_RIGHT_ANGLE_BRACKET:62,CHAR_RIGHT_CURLY_BRACE:125,CHAR_RIGHT_SQUARE_BRACKET:93,CHAR_SEMICOLON:59,CHAR_SINGLE_QUOTE:39,CHAR_SPACE:32,CHAR_TAB:9,CHAR_UNDERSCORE:95,CHAR_VERTICAL_LINE:124,CHAR_ZERO_WIDTH_NOBREAK_SPACE:65279,SEP:wm.sep,extglobChars(r){return{"!":{type:"negate",open:"(?:(?!(?:",close:`))${r.STAR})`},"?":{type:"qmark",open:"(?:",close:")?"},"+":{type:"plus",open:"(?:",close:")+"},"*":{type:"star",open:"(?:",close:")*"},"@":{type:"at",open:"(?:",close:")"}}},globChars(r){return r===!0?Mm:cc}}});var Xr=q(Qe=>{"use strict";var Fm=require("path"),Im=process.platform==="win32",{REGEX_BACKSLASH:Om,REGEX_REMOVE_BACKSLASH:Pm,REGEX_SPECIAL_CHARS:xm,REGEX_SPECIAL_CHARS_GLOBAL:Nm}=Kr();Qe.isObject=r=>r!==null&&typeof r=="object"&&!Array.isArray(r);Qe.hasRegexChars=r=>xm.test(r);Qe.isRegexChar=r=>r.length===1&&Qe.hasRegexChars(r);Qe.escapeRegex=r=>r.replace(Nm,"\\$1");Qe.toPosixSlashes=r=>r.replace(Om,"/");Qe.removeBackslashes=r=>r.replace(Pm,t=>t==="\\"?"":t);Qe.supportsLookbehinds=()=>{let r=process.version.slice(1).split(".").map(Number);return r.length===3&&r[0]>=9||r[0]===8&&r[1]>=10};Qe.isWindows=r=>r&&typeof r.windows=="boolean"?r.windows:Im===!0||Fm.sep==="\\";Qe.escapeLast=(r,t,e)=>{let n=r.lastIndexOf(t,e);return n===-1?r:r[n-1]==="\\"?Qe.escapeLast(r,t,n-1):`${r.slice(0,n)}\\${r.slice(n)}`};Qe.removePrefix=(r,t={})=>{let e=r;return e.startsWith("./")&&(e=e.slice(2),t.prefix="./"),e};Qe.wrapOutput=(r,t={},e={})=>{let n=e.contains?"":"^",a=e.contains?"":"$",l=`${n}(?:${r})${a}`;return t.negated===!0&&(l=`(?:^(?!${l}).*$)`),l}});var yc=q((_y,gc)=>{"use strict";var dc=Xr(),{CHAR_ASTERISK:Ja,CHAR_AT:Um,CHAR_BACKWARD_SLASH:Qr,CHAR_COMMA:Bm,CHAR_DOT:Za,CHAR_EXCLAMATION_MARK:eo,CHAR_FORWARD_SLASH:hc,CHAR_LEFT_CURLY_BRACE:to,CHAR_LEFT_PARENTHESES:ro,CHAR_LEFT_SQUARE_BRACKET:Hm,CHAR_PLUS:Wm,CHAR_QUESTION_MARK:fc,CHAR_RIGHT_CURLY_BRACE:qm,CHAR_RIGHT_PARENTHESES:pc,CHAR_RIGHT_SQUARE_BRACKET:Gm}=Kr(),mc=r=>r===hc||r===Qr,bc=r=>{r.isPrefix!==!0&&(r.depth=r.isGlobstar?1/0:1)},Ym=(r,t)=>{let e=t||{},n=r.length-1,a=e.parts===!0||e.scanToEnd===!0,l=[],c=[],m=[],g=r,D=-1,y=0,I=0,A=!1,z=!1,H=!1,W=!1,J=!1,X=!1,me=!1,fe=!1,Se=!1,ie=!1,le=0,te,Q,Y={value:"",depth:0,isGlob:!1},S=()=>D>=n,T=()=>g.charCodeAt(D+1),ce=()=>(te=Q,g.charCodeAt(++D));for(;D<n;){Q=ce();let be;if(Q===Qr){me=Y.backslashes=!0,Q=ce(),Q===to&&(X=!0);continue}if(X===!0||Q===to){for(le++;S()!==!0&&(Q=ce());){if(Q===Qr){me=Y.backslashes=!0,ce();continue}if(Q===to){le++;continue}if(X!==!0&&Q===Za&&(Q=ce())===Za){if(A=Y.isBrace=!0,H=Y.isGlob=!0,ie=!0,a===!0)continue;break}if(X!==!0&&Q===Bm){if(A=Y.isBrace=!0,H=Y.isGlob=!0,ie=!0,a===!0)continue;break}if(Q===qm&&(le--,le===0)){X=!1,A=Y.isBrace=!0,ie=!0;break}}if(a===!0)continue;break}if(Q===hc){if(l.push(D),c.push(Y),Y={value:"",depth:0,isGlob:!1},ie===!0)continue;if(te===Za&&D===y+1){y+=2;continue}I=D+1;continue}if(e.noext!==!0&&(Q===Wm||Q===Um||Q===Ja||Q===fc||Q===eo)===!0&&T()===ro){if(H=Y.isGlob=!0,W=Y.isExtglob=!0,ie=!0,Q===eo&&D===y&&(Se=!0),a===!0){for(;S()!==!0&&(Q=ce());){if(Q===Qr){me=Y.backslashes=!0,Q=ce();continue}if(Q===pc){H=Y.isGlob=!0,ie=!0;break}}continue}break}if(Q===Ja){if(te===Ja&&(J=Y.isGlobstar=!0),H=Y.isGlob=!0,ie=!0,a===!0)continue;break}if(Q===fc){if(H=Y.isGlob=!0,ie=!0,a===!0)continue;break}if(Q===Hm){for(;S()!==!0&&(be=ce());){if(be===Qr){me=Y.backslashes=!0,ce();continue}if(be===Gm){z=Y.isBracket=!0,H=Y.isGlob=!0,ie=!0;break}}if(a===!0)continue;break}if(e.nonegate!==!0&&Q===eo&&D===y){fe=Y.negated=!0,y++;continue}if(e.noparen!==!0&&Q===ro){if(H=Y.isGlob=!0,a===!0){for(;S()!==!0&&(Q=ce());){if(Q===ro){me=Y.backslashes=!0,Q=ce();continue}if(Q===pc){ie=!0;break}}continue}break}if(H===!0){if(ie=!0,a===!0)continue;break}}e.noext===!0&&(W=!1,H=!1);let oe=g,Ce="",v="";y>0&&(Ce=g.slice(0,y),g=g.slice(y),I-=y),oe&&H===!0&&I>0?(oe=g.slice(0,I),v=g.slice(I)):H===!0?(oe="",v=g):oe=g,oe&&oe!==""&&oe!=="/"&&oe!==g&&mc(oe.charCodeAt(oe.length-1))&&(oe=oe.slice(0,-1)),e.unescape===!0&&(v&&(v=dc.removeBackslashes(v)),oe&&me===!0&&(oe=dc.removeBackslashes(oe)));let k={prefix:Ce,input:r,start:y,base:oe,glob:v,isBrace:A,isBracket:z,isGlob:H,isExtglob:W,isGlobstar:J,negated:fe,negatedExtglob:Se};if(e.tokens===!0&&(k.maxDepth=0,mc(Q)||c.push(Y),k.tokens=c),e.parts===!0||e.tokens===!0){let be;for(let re=0;re<l.length;re++){let Oe=be?be+1:y,R=l[re],Ye=r.slice(Oe,R);e.tokens&&(re===0&&y!==0?(c[re].isPrefix=!0,c[re].value=Ce):c[re].value=Ye,bc(c[re]),k.maxDepth+=c[re].depth),(re!==0||Ye!=="")&&m.push(Ye),be=R}if(be&&be+1<r.length){let re=r.slice(be+1);m.push(re),e.tokens&&(c[c.length-1].value=re,bc(c[c.length-1]),k.maxDepth+=c[c.length-1].depth)}k.slashes=l,k.parts=m}return k};gc.exports=Ym});var Ec=q((dy,Sc)=>{"use strict";var Gn=Kr(),rt=Xr(),{MAX_LENGTH:Yn,POSIX_REGEX_SOURCE:$m,REGEX_NON_SPECIAL_CHARS:zm,REGEX_SPECIAL_CHARS_BACKREF:Vm,REPLACEMENTS:vc}=Gn,Km=(r,t)=>{if(typeof t.expandRange=="function")return t.expandRange(...r,t);r.sort();let e=`[${r.join("-")}]`;try{new RegExp(e)}catch{return r.map(a=>rt.escapeRegex(a)).join("..")}return e},dr=(r,t)=>`Missing ${r}: "${t}" - use "\\\\${t}" to match literal characters`,wc=(r,t)=>{if(typeof r!="string")throw new TypeError("Expected a string");r=vc[r]||r;let e={...t},n=typeof e.maxLength=="number"?Math.min(Yn,e.maxLength):Yn,a=r.length;if(a>n)throw new SyntaxError(`Input length: ${a}, exceeds maximum allowed length: ${n}`);let l={type:"bos",value:"",output:e.prepend||""},c=[l],m=e.capture?"":"?:",g=rt.isWindows(t),D=Gn.globChars(g),y=Gn.extglobChars(D),{DOT_LITERAL:I,PLUS_LITERAL:A,SLASH_LITERAL:z,ONE_CHAR:H,DOTS_SLASH:W,NO_DOT:J,NO_DOT_SLASH:X,NO_DOTS_SLASH:me,QMARK:fe,QMARK_NO_DOT:Se,STAR:ie,START_ANCHOR:le}=D,te=B=>`(${m}(?:(?!${le}${B.dot?W:I}).)*?)`,Q=e.dot?"":J,Y=e.dot?fe:Se,S=e.bash===!0?te(e):ie;e.capture&&(S=`(${S})`),typeof e.noext=="boolean"&&(e.noextglob=e.noext);let T={input:r,index:-1,start:0,dot:e.dot===!0,consumed:"",output:"",prefix:"",backtrack:!1,negated:!1,brackets:0,braces:0,parens:0,quotes:0,globstar:!1,tokens:c};r=rt.removePrefix(r,T),a=r.length;let ce=[],oe=[],Ce=[],v=l,k,be=()=>T.index===a-1,re=T.peek=(B=1)=>r[T.index+B],Oe=T.advance=()=>r[++T.index]||"",R=()=>r.slice(T.index+1),Ye=(B="",he=0)=>{T.consumed+=B,T.index+=he},Ee=B=>{T.output+=B.output!=null?B.output:B.value,Ye(B.value)},Fe=()=>{let B=1;for(;re()==="!"&&(re(2)!=="("||re(3)==="?");)Oe(),T.start++,B++;return B%2===0?!1:(T.negated=!0,T.start++,!0)},Le=B=>{T[B]++,Ce.push(B)},Je=B=>{T[B]--,Ce.pop()},b=B=>{if(v.type==="globstar"){let he=T.braces>0&&(B.type==="comma"||B.type==="brace"),N=B.extglob===!0||ce.length&&(B.type==="pipe"||B.type==="paren");B.type!=="slash"&&B.type!=="paren"&&!he&&!N&&(T.output=T.output.slice(0,-v.output.length),v.type="star",v.value="*",v.output=S,T.output+=v.output)}if(ce.length&&B.type!=="paren"&&(ce[ce.length-1].inner+=B.value),(B.value||B.output)&&Ee(B),v&&v.type==="text"&&B.type==="text"){v.value+=B.value,v.output=(v.output||"")+B.value;return}B.prev=v,c.push(B),v=B},$=(B,he)=>{let N={...y[he],conditions:1,inner:""};N.prev=v,N.parens=T.parens,N.output=T.output;let ue=(e.capture?"(":"")+N.open;Le("parens"),b({type:B,value:he,output:T.output?"":H}),b({type:"paren",extglob:!0,value:Oe(),output:ue}),ce.push(N)},ht=B=>{let he=B.close+(e.capture?")":""),N;if(B.type==="negate"){let ue=S;B.inner&&B.inner.length>1&&B.inner.includes("/")&&(ue=te(e)),(ue!==S||be()||/^\)+$/.test(R()))&&(he=B.close=`)$))${ue}`),B.inner.includes("*")&&(N=R())&&/^\.[^\\/.]+$/.test(N)&&(he=B.close=`)${N})${ue})`),B.prev.type==="bos"&&(T.negatedExtglob=!0)}b({type:"paren",extglob:!0,value:k,output:he}),Je("parens")};if(e.fastpaths!==!1&&!/(^[*!]|[/()[\]{}"])/.test(r)){let B=!1,he=r.replace(Vm,(N,ue,pe,Me,Te,gt)=>Me==="\\"?(B=!0,N):Me==="?"?ue?ue+Me+(Te?fe.repeat(Te.length):""):gt===0?Y+(Te?fe.repeat(Te.length):""):fe.repeat(pe.length):Me==="."?I.repeat(pe.length):Me==="*"?ue?ue+Me+(Te?S:""):S:ue?N:`\\${N}`);return B===!0&&(e.unescape===!0?he=he.replace(/\\/g,""):he=he.replace(/\\+/g,N=>N.length%2===0?"\\\\":N?"\\":"")),he===r&&e.contains===!0?(T.output=r,T):(T.output=rt.wrapOutput(he,T,t),T)}for(;!be();){if(k=Oe(),k==="\0")continue;if(k==="\\"){let N=re();if(N==="/"&&e.bash!==!0||N==="."||N===";")continue;if(!N){k+="\\",b({type:"text",value:k});continue}let ue=/^\\+/.exec(R()),pe=0;if(ue&&ue[0].length>2&&(pe=ue[0].length,T.index+=pe,pe%2!==0&&(k+="\\")),e.unescape===!0?k=Oe():k+=Oe(),T.brackets===0){b({type:"text",value:k});continue}}if(T.brackets>0&&(k!=="]"||v.value==="["||v.value==="[^")){if(e.posix!==!1&&k===":"){let N=v.value.slice(1);if(N.includes("[")&&(v.posix=!0,N.includes(":"))){let ue=v.value.lastIndexOf("["),pe=v.value.slice(0,ue),Me=v.value.slice(ue+2),Te=$m[Me];if(Te){v.value=pe+Te,T.backtrack=!0,Oe(),!l.output&&c.indexOf(v)===1&&(l.output=H);continue}}}(k==="["&&re()!==":"||k==="-"&&re()==="]")&&(k=`\\${k}`),k==="]"&&(v.value==="["||v.value==="[^")&&(k=`\\${k}`),e.posix===!0&&k==="!"&&v.value==="["&&(k="^"),v.value+=k,Ee({value:k});continue}if(T.quotes===1&&k!=='"'){k=rt.escapeRegex(k),v.value+=k,Ee({value:k});continue}if(k==='"'){T.quotes=T.quotes===1?0:1,e.keepQuotes===!0&&b({type:"text",value:k});continue}if(k==="("){Le("parens"),b({type:"paren",value:k});continue}if(k===")"){if(T.parens===0&&e.strictBrackets===!0)throw new SyntaxError(dr("opening","("));let N=ce[ce.length-1];if(N&&T.parens===N.parens+1){ht(ce.pop());continue}b({type:"paren",value:k,output:T.parens?")":"\\)"}),Je("parens");continue}if(k==="["){if(e.nobracket===!0||!R().includes("]")){if(e.nobracket!==!0&&e.strictBrackets===!0)throw new SyntaxError(dr("closing","]"));k=`\\${k}`}else Le("brackets");b({type:"bracket",value:k});continue}if(k==="]"){if(e.nobracket===!0||v&&v.type==="bracket"&&v.value.length===1){b({type:"text",value:k,output:`\\${k}`});continue}if(T.brackets===0){if(e.strictBrackets===!0)throw new SyntaxError(dr("opening","["));b({type:"text",value:k,output:`\\${k}`});continue}Je("brackets");let N=v.value.slice(1);if(v.posix!==!0&&N[0]==="^"&&!N.includes("/")&&(k=`/${k}`),v.value+=k,Ee({value:k}),e.literalBrackets===!1||rt.hasRegexChars(N))continue;let ue=rt.escapeRegex(v.value);if(T.output=T.output.slice(0,-v.value.length),e.literalBrackets===!0){T.output+=ue,v.value=ue;continue}v.value=`(${m}${ue}|${v.value})`,T.output+=v.value;continue}if(k==="{"&&e.nobrace!==!0){Le("braces");let N={type:"brace",value:k,output:"(",outputIndex:T.output.length,tokensIndex:T.tokens.length};oe.push(N),b(N);continue}if(k==="}"){let N=oe[oe.length-1];if(e.nobrace===!0||!N){b({type:"text",value:k,output:k});continue}let ue=")";if(N.dots===!0){let pe=c.slice(),Me=[];for(let Te=pe.length-1;Te>=0&&(c.pop(),pe[Te].type!=="brace");Te--)pe[Te].type!=="dots"&&Me.unshift(pe[Te].value);ue=Km(Me,e),T.backtrack=!0}if(N.comma!==!0&&N.dots!==!0){let pe=T.output.slice(0,N.outputIndex),Me=T.tokens.slice(N.tokensIndex);N.value=N.output="\\{",k=ue="\\}",T.output=pe;for(let Te of Me)T.output+=Te.output||Te.value}b({type:"brace",value:k,output:ue}),Je("braces"),oe.pop();continue}if(k==="|"){ce.length>0&&ce[ce.length-1].conditions++,b({type:"text",value:k});continue}if(k===","){let N=k,ue=oe[oe.length-1];ue&&Ce[Ce.length-1]==="braces"&&(ue.comma=!0,N="|"),b({type:"comma",value:k,output:N});continue}if(k==="/"){if(v.type==="dot"&&T.index===T.start+1){T.start=T.index+1,T.consumed="",T.output="",c.pop(),v=l;continue}b({type:"slash",value:k,output:z});continue}if(k==="."){if(T.braces>0&&v.type==="dot"){v.value==="."&&(v.output=I);let N=oe[oe.length-1];v.type="dots",v.output+=k,v.value+=k,N.dots=!0;continue}if(T.braces+T.parens===0&&v.type!=="bos"&&v.type!=="slash"){b({type:"text",value:k,output:I});continue}b({type:"dot",value:k,output:I});continue}if(k==="?"){if(!(v&&v.value==="(")&&e.noextglob!==!0&&re()==="("&&re(2)!=="?"){$("qmark",k);continue}if(v&&v.type==="paren"){let ue=re(),pe=k;if(ue==="<"&&!rt.supportsLookbehinds())throw new Error("Node.js v10 or higher is required for regex lookbehinds");(v.value==="("&&!/[!=<:]/.test(ue)||ue==="<"&&!/<([!=]|\w+>)/.test(R()))&&(pe=`\\${k}`),b({type:"text",value:k,output:pe});continue}if(e.dot!==!0&&(v.type==="slash"||v.type==="bos")){b({type:"qmark",value:k,output:Se});continue}b({type:"qmark",value:k,output:fe});continue}if(k==="!"){if(e.noextglob!==!0&&re()==="("&&(re(2)!=="?"||!/[!=<:]/.test(re(3)))){$("negate",k);continue}if(e.nonegate!==!0&&T.index===0){Fe();continue}}if(k==="+"){if(e.noextglob!==!0&&re()==="("&&re(2)!=="?"){$("plus",k);continue}if(v&&v.value==="("||e.regex===!1){b({type:"plus",value:k,output:A});continue}if(v&&(v.type==="bracket"||v.type==="paren"||v.type==="brace")||T.parens>0){b({type:"plus",value:k});continue}b({type:"plus",value:A});continue}if(k==="@"){if(e.noextglob!==!0&&re()==="("&&re(2)!=="?"){b({type:"at",extglob:!0,value:k,output:""});continue}b({type:"text",value:k});continue}if(k!=="*"){(k==="$"||k==="^")&&(k=`\\${k}`);let N=zm.exec(R());N&&(k+=N[0],T.index+=N[0].length),b({type:"text",value:k});continue}if(v&&(v.type==="globstar"||v.star===!0)){v.type="star",v.star=!0,v.value+=k,v.output=S,T.backtrack=!0,T.globstar=!0,Ye(k);continue}let B=R();if(e.noextglob!==!0&&/^\([^?]/.test(B)){$("star",k);continue}if(v.type==="star"){if(e.noglobstar===!0){Ye(k);continue}let N=v.prev,ue=N.prev,pe=N.type==="slash"||N.type==="bos",Me=ue&&(ue.type==="star"||ue.type==="globstar");if(e.bash===!0&&(!pe||B[0]&&B[0]!=="/")){b({type:"star",value:k,output:""});continue}let Te=T.braces>0&&(N.type==="comma"||N.type==="brace"),gt=ce.length&&(N.type==="pipe"||N.type==="paren");if(!pe&&N.type!=="paren"&&!Te&&!gt){b({type:"star",value:k,output:""});continue}for(;B.slice(0,3)==="/**";){let Jt=r[T.index+4];if(Jt&&Jt!=="/")break;B=B.slice(3),Ye("/**",3)}if(N.type==="bos"&&be()){v.type="globstar",v.value+=k,v.output=te(e),T.output=v.output,T.globstar=!0,Ye(k);continue}if(N.type==="slash"&&N.prev.type!=="bos"&&!Me&&be()){T.output=T.output.slice(0,-(N.output+v.output).length),N.output=`(?:${N.output}`,v.type="globstar",v.output=te(e)+(e.strictSlashes?")":"|$)"),v.value+=k,T.globstar=!0,T.output+=N.output+v.output,Ye(k);continue}if(N.type==="slash"&&N.prev.type!=="bos"&&B[0]==="/"){let Jt=B[1]!==void 0?"|$":"";T.output=T.output.slice(0,-(N.output+v.output).length),N.output=`(?:${N.output}`,v.type="globstar",v.output=`${te(e)}${z}|${z}${Jt})`,v.value+=k,T.output+=N.output+v.output,T.globstar=!0,Ye(k+Oe()),b({type:"slash",value:"/",output:""});continue}if(N.type==="bos"&&B[0]==="/"){v.type="globstar",v.value+=k,v.output=`(?:^|${z}|${te(e)}${z})`,T.output=v.output,T.globstar=!0,Ye(k+Oe()),b({type:"slash",value:"/",output:""});continue}T.output=T.output.slice(0,-v.output.length),v.type="globstar",v.output=te(e),v.value+=k,T.output+=v.output,T.globstar=!0,Ye(k);continue}let he={type:"star",value:k,output:S};if(e.bash===!0){he.output=".*?",(v.type==="bos"||v.type==="slash")&&(he.output=Q+he.output),b(he);continue}if(v&&(v.type==="bracket"||v.type==="paren")&&e.regex===!0){he.output=k,b(he);continue}(T.index===T.start||v.type==="slash"||v.type==="dot")&&(v.type==="dot"?(T.output+=X,v.output+=X):e.dot===!0?(T.output+=me,v.output+=me):(T.output+=Q,v.output+=Q),re()!=="*"&&(T.output+=H,v.output+=H)),b(he)}for(;T.brackets>0;){if(e.strictBrackets===!0)throw new SyntaxError(dr("closing","]"));T.output=rt.escapeLast(T.output,"["),Je("brackets")}for(;T.parens>0;){if(e.strictBrackets===!0)throw new SyntaxError(dr("closing",")"));T.output=rt.escapeLast(T.output,"("),Je("parens")}for(;T.braces>0;){if(e.strictBrackets===!0)throw new SyntaxError(dr("closing","}"));T.output=rt.escapeLast(T.output,"{"),Je("braces")}if(e.strictSlashes!==!0&&(v.type==="star"||v.type==="bracket")&&b({type:"maybe_slash",value:"",output:`${z}?`}),T.backtrack===!0){T.output="";for(let B of T.tokens)T.output+=B.output!=null?B.output:B.value,B.suffix&&(T.output+=B.suffix)}return T};wc.fastpaths=(r,t)=>{let e={...t},n=typeof e.maxLength=="number"?Math.min(Yn,e.maxLength):Yn,a=r.length;if(a>n)throw new SyntaxError(`Input length: ${a}, exceeds maximum allowed length: ${n}`);r=vc[r]||r;let l=rt.isWindows(t),{DOT_LITERAL:c,SLASH_LITERAL:m,ONE_CHAR:g,DOTS_SLASH:D,NO_DOT:y,NO_DOTS:I,NO_DOTS_SLASH:A,STAR:z,START_ANCHOR:H}=Gn.globChars(l),W=e.dot?I:y,J=e.dot?A:y,X=e.capture?"":"?:",me={negated:!1,prefix:""},fe=e.bash===!0?".*?":z;e.capture&&(fe=`(${fe})`);let Se=Q=>Q.noglobstar===!0?fe:`(${X}(?:(?!${H}${Q.dot?D:c}).)*?)`,ie=Q=>{switch(Q){case"*":return`${W}${g}${fe}`;case".*":return`${c}${g}${fe}`;case"*.*":return`${W}${fe}${c}${g}${fe}`;case"*/*":return`${W}${fe}${m}${g}${J}${fe}`;case"**":return W+Se(e);case"**/*":return`(?:${W}${Se(e)}${m})?${J}${g}${fe}`;case"**/*.*":return`(?:${W}${Se(e)}${m})?${J}${fe}${c}${g}${fe}`;case"**/.*":return`(?:${W}${Se(e)}${m})?${c}${g}${fe}`;default:{let Y=/^(.*?)\.(\w+)$/.exec(Q);if(!Y)return;let S=ie(Y[1]);return S?S+c+Y[2]:void 0}}},le=rt.removePrefix(r,me),te=ie(le);return te&&e.strictSlashes!==!0&&(te+=`${m}?`),te};Sc.exports=wc});var Cc=q((fy,kc)=>{"use strict";var Xm=require("path"),Qm=yc(),no=Ec(),io=Xr(),Jm=Kr(),Zm=r=>r&&typeof r=="object"&&!Array.isArray(r),Ie=(r,t,e=!1)=>{if(Array.isArray(r)){let y=r.map(A=>Ie(A,t,e));return A=>{for(let z of y){let H=z(A);if(H)return H}return!1}}let n=Zm(r)&&r.tokens&&r.input;if(r===""||typeof r!="string"&&!n)throw new TypeError("Expected pattern to be a non-empty string");let a=t||{},l=io.isWindows(t),c=n?Ie.compileRe(r,t):Ie.makeRe(r,t,!1,!0),m=c.state;delete c.state;let g=()=>!1;if(a.ignore){let y={...t,ignore:null,onMatch:null,onResult:null};g=Ie(a.ignore,y,e)}let D=(y,I=!1)=>{let{isMatch:A,match:z,output:H}=Ie.test(y,c,t,{glob:r,posix:l}),W={glob:r,state:m,regex:c,posix:l,input:y,output:H,match:z,isMatch:A};return typeof a.onResult=="function"&&a.onResult(W),A===!1?(W.isMatch=!1,I?W:!1):g(y)?(typeof a.onIgnore=="function"&&a.onIgnore(W),W.isMatch=!1,I?W:!1):(typeof a.onMatch=="function"&&a.onMatch(W),I?W:!0)};return e&&(D.state=m),D};Ie.test=(r,t,e,{glob:n,posix:a}={})=>{if(typeof r!="string")throw new TypeError("Expected input to be a string");if(r==="")return{isMatch:!1,output:""};let l=e||{},c=l.format||(a?io.toPosixSlashes:null),m=r===n,g=m&&c?c(r):r;return m===!1&&(g=c?c(r):r,m=g===n),(m===!1||l.capture===!0)&&(l.matchBase===!0||l.basename===!0?m=Ie.matchBase(r,t,e,a):m=t.exec(g)),{isMatch:Boolean(m),match:m,output:g}};Ie.matchBase=(r,t,e,n=io.isWindows(e))=>(t instanceof RegExp?t:Ie.makeRe(t,e)).test(Xm.basename(r));Ie.isMatch=(r,t,e)=>Ie(t,e)(r);Ie.parse=(r,t)=>Array.isArray(r)?r.map(e=>Ie.parse(e,t)):no(r,{...t,fastpaths:!1});Ie.scan=(r,t)=>Qm(r,t);Ie.compileRe=(r,t,e=!1,n=!1)=>{if(e===!0)return r.output;let a=t||{},l=a.contains?"":"^",c=a.contains?"":"$",m=`${l}(?:${r.output})${c}`;r&&r.negated===!0&&(m=`^(?!${m}).*$`);let g=Ie.toRegex(m,t);return n===!0&&(g.state=r),g};Ie.makeRe=(r,t={},e=!1,n=!1)=>{if(!r||typeof r!="string")throw new TypeError("Expected a non-empty string");let a={negated:!1,fastpaths:!0};return t.fastpaths!==!1&&(r[0]==="."||r[0]==="*")&&(a.output=no.fastpaths(r,t)),a.output||(a=no(r,t)),Ie.compileRe(a,t,e,n)};Ie.toRegex=(r,t)=>{try{let e=t||{};return new RegExp(r,e.flags||(e.nocase?"i":""))}catch(e){if(t&&t.debug===!0)throw e;return/$^/}};Ie.constants=Jm;kc.exports=Ie});var Rc=q((py,Tc)=>{"use strict";Tc.exports=Cc()});var Lc=q((my,Mc)=>{"use strict";var jc=require("util"),Dc=ac(),pt=Rc(),so=Xr(),Ac=r=>r===""||r==="./",De=(r,t,e)=>{t=[].concat(t),r=[].concat(r);let n=new Set,a=new Set,l=new Set,c=0,m=y=>{l.add(y.output),e&&e.onResult&&e.onResult(y)};for(let y=0;y<t.length;y++){let I=pt(String(t[y]),{...e,onResult:m},!0),A=I.state.negated||I.state.negatedExtglob;A&&c++;for(let z of r){let H=I(z,!0);!(A?!H.isMatch:H.isMatch)||(A?n.add(H.output):(n.delete(H.output),a.add(H.output)))}}let D=(c===t.length?[...l]:[...a]).filter(y=>!n.has(y));if(e&&D.length===0){if(e.failglob===!0)throw new Error(`No matches found for "${t.join(", ")}"`);if(e.nonull===!0||e.nullglob===!0)return e.unescape?t.map(y=>y.replace(/\\/g,"")):t}return D};De.match=De;De.matcher=(r,t)=>pt(r,t);De.isMatch=(r,t,e)=>pt(t,e)(r);De.any=De.isMatch;De.not=(r,t,e={})=>{t=[].concat(t).map(String);let n=new Set,a=[],c=De(r,t,{...e,onResult:m=>{e.onResult&&e.onResult(m),a.push(m.output)}});for(let m of a)c.includes(m)||n.add(m);return[...n]};De.contains=(r,t,e)=>{if(typeof r!="string")throw new TypeError(`Expected a string: "${jc.inspect(r)}"`);if(Array.isArray(t))return t.some(n=>De.contains(r,n,e));if(typeof t=="string"){if(Ac(r)||Ac(t))return!1;if(r.includes(t)||r.startsWith("./")&&r.slice(2).includes(t))return!0}return De.isMatch(r,t,{...e,contains:!0})};De.matchKeys=(r,t,e)=>{if(!so.isObject(r))throw new TypeError("Expected the first argument to be an object");let n=De(Object.keys(r),t,e),a={};for(let l of n)a[l]=r[l];return a};De.some=(r,t,e)=>{let n=[].concat(r);for(let a of[].concat(t)){let l=pt(String(a),e);if(n.some(c=>l(c)))return!0}return!1};De.every=(r,t,e)=>{let n=[].concat(r);for(let a of[].concat(t)){let l=pt(String(a),e);if(!n.every(c=>l(c)))return!1}return!0};De.all=(r,t,e)=>{if(typeof r!="string")throw new TypeError(`Expected a string: "${jc.inspect(r)}"`);return[].concat(t).every(n=>pt(n,e)(r))};De.capture=(r,t,e)=>{let n=so.isWindows(e),l=pt.makeRe(String(r),{...e,capture:!0}).exec(n?so.toPosixSlashes(t):t);if(l)return l.slice(1).map(c=>c===void 0?"":c)};De.makeRe=(...r)=>pt.makeRe(...r);De.scan=(...r)=>pt.scan(...r);De.parse=(r,t)=>{let e=[];for(let n of[].concat(r||[]))for(let a of Dc(String(n),t))e.push(pt.parse(a,t));return e};De.braces=(r,t)=>{if(typeof r!="string")throw new TypeError("Expected a string");return t&&t.nobrace===!0||!/\{.*\}/.test(r)?[r]:Dc(r,t)};De.braceExpand=(r,t)=>{if(typeof r!="string")throw new TypeError("Expected a string");return De.braces(r,{...t,expand:!0})};Mc.exports=De});var Bc=q(ne=>{"use strict";Object.defineProperty(ne,"__esModule",{value:!0});ne.matchAny=ne.convertPatternsToRe=ne.makeRe=ne.getPatternParts=ne.expandBraceExpansion=ne.expandPatternsWithBraceExpansion=ne.isAffectDepthOfReadingPattern=ne.endsWithSlashGlobStar=ne.hasGlobStar=ne.getBaseDirectory=ne.isPatternRelatedToParentDirectory=ne.getPatternsOutsideCurrentDirectory=ne.getPatternsInsideCurrentDirectory=ne.getPositivePatterns=ne.getNegativePatterns=ne.isPositivePattern=ne.isNegativePattern=ne.convertToNegativePattern=ne.convertToPositivePattern=ne.isDynamicPattern=ne.isStaticPattern=void 0;var eb=require("path"),tb=El(),ao=Lc(),Fc="**",rb="\\",nb=/[*?]|^!/,ib=/\[[^[]*]/,sb=/(?:^|[^!*+?@])\([^(]*\|[^|]*\)/,ab=/[!*+?@]\([^(]*\)/,ob=/,|\.\./;function Ic(r,t={}){return!Oc(r,t)}ne.isStaticPattern=Ic;function Oc(r,t={}){return r===""?!1:!!(t.caseSensitiveMatch===!1||r.includes(rb)||nb.test(r)||ib.test(r)||sb.test(r)||t.extglob!==!1&&ab.test(r)||t.braceExpansion!==!1&&ub(r))}ne.isDynamicPattern=Oc;function ub(r){let t=r.indexOf("{");if(t===-1)return!1;let e=r.indexOf("}",t+1);if(e===-1)return!1;let n=r.slice(t,e);return ob.test(n)}function lb(r){return $n(r)?r.slice(1):r}ne.convertToPositivePattern=lb;function cb(r){return"!"+r}ne.convertToNegativePattern=cb;function $n(r){return r.startsWith("!")&&r[1]!=="("}ne.isNegativePattern=$n;function Pc(r){return!$n(r)}ne.isPositivePattern=Pc;function _b(r){return r.filter($n)}ne.getNegativePatterns=_b;function db(r){return r.filter(Pc)}ne.getPositivePatterns=db;function fb(r){return r.filter(t=>!oo(t))}ne.getPatternsInsideCurrentDirectory=fb;function pb(r){return r.filter(oo)}ne.getPatternsOutsideCurrentDirectory=pb;function oo(r){return r.startsWith("..")||r.startsWith("./..")}ne.isPatternRelatedToParentDirectory=oo;function mb(r){return tb(r,{flipBackslashes:!1})}ne.getBaseDirectory=mb;function bb(r){return r.includes(Fc)}ne.hasGlobStar=bb;function xc(r){return r.endsWith("/"+Fc)}ne.endsWithSlashGlobStar=xc;function hb(r){let t=eb.basename(r);return xc(r)||Ic(t)}ne.isAffectDepthOfReadingPattern=hb;function gb(r){return r.reduce((t,e)=>t.concat(Nc(e)),[])}ne.expandPatternsWithBraceExpansion=gb;function Nc(r){return ao.braces(r,{expand:!0,nodupes:!0})}ne.expandBraceExpansion=Nc;function yb(r,t){let{parts:e}=ao.scan(r,Object.assign(Object.assign({},t),{parts:!0}));return e.length===0&&(e=[r]),e[0].startsWith("/")&&(e[0]=e[0].slice(1),e.unshift("")),e}ne.getPatternParts=yb;function Uc(r,t){return ao.makeRe(r,t)}ne.makeRe=Uc;function vb(r,t){return r.map(e=>Uc(e,t))}ne.convertPatternsToRe=vb;function wb(r,t){return t.some(e=>e.test(r))}ne.matchAny=wb});var Gc=q((hy,qc)=>{"use strict";var Sb=require("stream"),Hc=Sb.PassThrough,Eb=Array.prototype.slice;qc.exports=kb;function kb(){let r=[],t=Eb.call(arguments),e=!1,n=t[t.length-1];n&&!Array.isArray(n)&&n.pipe==null?t.pop():n={};let a=n.end!==!1,l=n.pipeError===!0;n.objectMode==null&&(n.objectMode=!0),n.highWaterMark==null&&(n.highWaterMark=64*1024);let c=Hc(n);function m(){for(let y=0,I=arguments.length;y<I;y++)r.push(Wc(arguments[y],n));return g(),this}function g(){if(e)return;e=!0;let y=r.shift();if(!y){process.nextTick(D);return}Array.isArray(y)||(y=[y]);let I=y.length+1;function A(){--I>0||(e=!1,g())}function z(H){function W(){H.removeListener("merge2UnpipeEnd",W),H.removeListener("end",W),l&&H.removeListener("error",J),A()}function J(X){c.emit("error",X)}if(H._readableState.endEmitted)return A();H.on("merge2UnpipeEnd",W),H.on("end",W),l&&H.on("error",J),H.pipe(c,{end:!1}),H.resume()}for(let H=0;H<y.length;H++)z(y[H]);A()}function D(){e=!1,c.emit("queueDrain"),a&&c.end()}return c.setMaxListeners(0),c.add=m,c.on("unpipe",function(y){y.emit("merge2UnpipeEnd")}),t.length&&m.apply(null,t),c}function Wc(r,t){if(Array.isArray(r))for(let e=0,n=r.length;e<n;e++)r[e]=Wc(r[e],t);else{if(!r._readableState&&r.pipe&&(r=r.pipe(Hc(t))),!r._readableState||!r.pause||!r.pipe)throw new Error("Only readable stream can be merged.");r.pause()}return r}});var $c=q(zn=>{"use strict";Object.defineProperty(zn,"__esModule",{value:!0});zn.merge=void 0;var Cb=Gc();function Tb(r){let t=Cb(r);return r.forEach(e=>{e.once("error",n=>t.emit("error",n))}),t.once("close",()=>Yc(r)),t.once("end",()=>Yc(r)),t}zn.merge=Tb;function Yc(r){r.forEach(t=>t.emit("close"))}});var zc=q(fr=>{"use strict";Object.defineProperty(fr,"__esModule",{value:!0});fr.isEmpty=fr.isString=void 0;function Rb(r){return typeof r=="string"}fr.isString=Rb;function Ab(r){return r===""}fr.isEmpty=Ab});var kt=q(qe=>{"use strict";Object.defineProperty(qe,"__esModule",{value:!0});qe.string=qe.stream=qe.pattern=qe.path=qe.fs=qe.errno=qe.array=void 0;var jb=fl();qe.array=jb;var Db=pl();qe.errno=Db;var Mb=ml();qe.fs=Mb;var Lb=bl();qe.path=Lb;var Fb=Bc();qe.pattern=Fb;var Ib=$c();qe.stream=Ib;var Ob=zc();qe.string=Ob});var Xc=q(Ge=>{"use strict";Object.defineProperty(Ge,"__esModule",{value:!0});Ge.convertPatternGroupToTask=Ge.convertPatternGroupsToTasks=Ge.groupPatternsByBaseDirectory=Ge.getNegativePatternsAsPositive=Ge.getPositivePatterns=Ge.convertPatternsToTasks=Ge.generate=void 0;var Ct=kt();function Pb(r,t){let e=Vc(r),n=Kc(r,t.ignore),a=e.filter(g=>Ct.pattern.isStaticPattern(g,t)),l=e.filter(g=>Ct.pattern.isDynamicPattern(g,t)),c=uo(a,n,!1),m=uo(l,n,!0);return c.concat(m)}Ge.generate=Pb;function uo(r,t,e){let n=[],a=Ct.pattern.getPatternsOutsideCurrentDirectory(r),l=Ct.pattern.getPatternsInsideCurrentDirectory(r),c=lo(a),m=lo(l);return n.push(...co(c,t,e)),"."in m?n.push(_o(".",l,t,e)):n.push(...co(m,t,e)),n}Ge.convertPatternsToTasks=uo;function Vc(r){return Ct.pattern.getPositivePatterns(r)}Ge.getPositivePatterns=Vc;function Kc(r,t){return Ct.pattern.getNegativePatterns(r).concat(t).map(Ct.pattern.convertToPositivePattern)}Ge.getNegativePatternsAsPositive=Kc;function lo(r){let t={};return r.reduce((e,n)=>{let a=Ct.pattern.getBaseDirectory(n);return a in e?e[a].push(n):e[a]=[n],e},t)}Ge.groupPatternsByBaseDirectory=lo;function co(r,t,e){return Object.keys(r).map(n=>_o(n,r[n],t,e))}Ge.convertPatternGroupsToTasks=co;function _o(r,t,e,n){return{dynamic:n,positive:t,negative:e,base:r,patterns:[].concat(t,e.map(Ct.pattern.convertToNegativePattern))}}Ge.convertPatternGroupToTask=_o});var Jc=q(pr=>{"use strict";Object.defineProperty(pr,"__esModule",{value:!0});pr.removeDuplicateSlashes=pr.transform=void 0;var xb=/(?!^)\/{2,}/g;function Nb(r){return r.map(t=>Qc(t))}pr.transform=Nb;function Qc(r){return r.replace(xb,"/")}pr.removeDuplicateSlashes=Qc});var e_=q(Vn=>{"use strict";Object.defineProperty(Vn,"__esModule",{value:!0});Vn.read=void 0;function Ub(r,t,e){t.fs.lstat(r,(n,a)=>{if(n!==null){Zc(e,n);return}if(!a.isSymbolicLink()||!t.followSymbolicLink){fo(e,a);return}t.fs.stat(r,(l,c)=>{if(l!==null){if(t.throwErrorOnBrokenSymbolicLink){Zc(e,l);return}fo(e,a);return}t.markSymbolicLink&&(c.isSymbolicLink=()=>!0),fo(e,c)})})}Vn.read=Ub;function Zc(r,t){r(t)}function fo(r,t){r(null,t)}});var t_=q(Kn=>{"use strict";Object.defineProperty(Kn,"__esModule",{value:!0});Kn.read=void 0;function Bb(r,t){let e=t.fs.lstatSync(r);if(!e.isSymbolicLink()||!t.followSymbolicLink)return e;try{let n=t.fs.statSync(r);return t.markSymbolicLink&&(n.isSymbolicLink=()=>!0),n}catch(n){if(!t.throwErrorOnBrokenSymbolicLink)return e;throw n}}Kn.read=Bb});var r_=q(Mt=>{"use strict";Object.defineProperty(Mt,"__esModule",{value:!0});Mt.createFileSystemAdapter=Mt.FILE_SYSTEM_ADAPTER=void 0;var Xn=require("fs");Mt.FILE_SYSTEM_ADAPTER={lstat:Xn.lstat,stat:Xn.stat,lstatSync:Xn.lstatSync,statSync:Xn.statSync};function Hb(r){return r===void 0?Mt.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},Mt.FILE_SYSTEM_ADAPTER),r)}Mt.createFileSystemAdapter=Hb});var n_=q(mo=>{"use strict";Object.defineProperty(mo,"__esModule",{value:!0});var Wb=r_(),po=class{constructor(t={}){this._options=t,this.followSymbolicLink=this._getValue(this._options.followSymbolicLink,!0),this.fs=Wb.createFileSystemAdapter(this._options.fs),this.markSymbolicLink=this._getValue(this._options.markSymbolicLink,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0)}_getValue(t,e){return t??e}};mo.default=po});var Kt=q(Lt=>{"use strict";Object.defineProperty(Lt,"__esModule",{value:!0});Lt.statSync=Lt.stat=Lt.Settings=void 0;var i_=e_(),qb=t_(),bo=n_();Lt.Settings=bo.default;function Gb(r,t,e){if(typeof t=="function"){i_.read(r,ho(),t);return}i_.read(r,ho(t),e)}Lt.stat=Gb;function Yb(r,t){let e=ho(t);return qb.read(r,e)}Lt.statSync=Yb;function ho(r={}){return r instanceof bo.default?r:new bo.default(r)}});var o_=q((Ay,a_)=>{var s_;a_.exports=typeof queueMicrotask=="function"?queueMicrotask.bind(typeof window<"u"?window:global):r=>(s_||(s_=Promise.resolve())).then(r).catch(t=>setTimeout(()=>{throw t},0))});var l_=q((jy,u_)=>{u_.exports=zb;var $b=o_();function zb(r,t){let e,n,a,l=!0;Array.isArray(r)?(e=[],n=r.length):(a=Object.keys(r),e={},n=a.length);function c(g){function D(){t&&t(g,e),t=null}l?$b(D):D()}function m(g,D,y){e[g]=y,(--n===0||D)&&c(D)}n?a?a.forEach(function(g){r[g](function(D,y){m(g,D,y)})}):r.forEach(function(g,D){g(function(y,I){m(D,y,I)})}):c(null),l=!1}});var go=q(Jn=>{"use strict";Object.defineProperty(Jn,"__esModule",{value:!0});Jn.IS_SUPPORT_READDIR_WITH_FILE_TYPES=void 0;var Qn=process.versions.node.split(".");if(Qn[0]===void 0||Qn[1]===void 0)throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);var c_=Number.parseInt(Qn[0],10),Vb=Number.parseInt(Qn[1],10),__=10,Kb=10,Xb=c_>__,Qb=c_===__&&Vb>=Kb;Jn.IS_SUPPORT_READDIR_WITH_FILE_TYPES=Xb||Qb});var d_=q(Zn=>{"use strict";Object.defineProperty(Zn,"__esModule",{value:!0});Zn.createDirentFromStats=void 0;var yo=class{constructor(t,e){this.name=t,this.isBlockDevice=e.isBlockDevice.bind(e),this.isCharacterDevice=e.isCharacterDevice.bind(e),this.isDirectory=e.isDirectory.bind(e),this.isFIFO=e.isFIFO.bind(e),this.isFile=e.isFile.bind(e),this.isSocket=e.isSocket.bind(e),this.isSymbolicLink=e.isSymbolicLink.bind(e)}};function Jb(r,t){return new yo(r,t)}Zn.createDirentFromStats=Jb});var vo=q(ei=>{"use strict";Object.defineProperty(ei,"__esModule",{value:!0});ei.fs=void 0;var Zb=d_();ei.fs=Zb});var wo=q(ti=>{"use strict";Object.defineProperty(ti,"__esModule",{value:!0});ti.joinPathSegments=void 0;function eh(r,t,e){return r.endsWith(e)?r+t:r+e+t}ti.joinPathSegments=eh});var g_=q(Ft=>{"use strict";Object.defineProperty(Ft,"__esModule",{value:!0});Ft.readdir=Ft.readdirWithFileTypes=Ft.read=void 0;var th=Kt(),f_=l_(),rh=go(),p_=vo(),m_=wo();function nh(r,t,e){if(!t.stats&&rh.IS_SUPPORT_READDIR_WITH_FILE_TYPES){b_(r,t,e);return}h_(r,t,e)}Ft.read=nh;function b_(r,t,e){t.fs.readdir(r,{withFileTypes:!0},(n,a)=>{if(n!==null){ri(e,n);return}let l=a.map(m=>({dirent:m,name:m.name,path:m_.joinPathSegments(r,m.name,t.pathSegmentSeparator)}));if(!t.followSymbolicLinks){So(e,l);return}let c=l.map(m=>ih(m,t));f_(c,(m,g)=>{if(m!==null){ri(e,m);return}So(e,g)})})}Ft.readdirWithFileTypes=b_;function ih(r,t){return e=>{if(!r.dirent.isSymbolicLink()){e(null,r);return}t.fs.stat(r.path,(n,a)=>{if(n!==null){if(t.throwErrorOnBrokenSymbolicLink){e(n);return}e(null,r);return}r.dirent=p_.fs.createDirentFromStats(r.name,a),e(null,r)})}}function h_(r,t,e){t.fs.readdir(r,(n,a)=>{if(n!==null){ri(e,n);return}let l=a.map(c=>{let m=m_.joinPathSegments(r,c,t.pathSegmentSeparator);return g=>{th.stat(m,t.fsStatSettings,(D,y)=>{if(D!==null){g(D);return}let I={name:c,path:m,dirent:p_.fs.createDirentFromStats(c,y)};t.stats&&(I.stats=y),g(null,I)})}});f_(l,(c,m)=>{if(c!==null){ri(e,c);return}So(e,m)})})}Ft.readdir=h_;function ri(r,t){r(t)}function So(r,t){r(null,t)}});var E_=q(It=>{"use strict";Object.defineProperty(It,"__esModule",{value:!0});It.readdir=It.readdirWithFileTypes=It.read=void 0;var sh=Kt(),ah=go(),y_=vo(),v_=wo();function oh(r,t){return!t.stats&&ah.IS_SUPPORT_READDIR_WITH_FILE_TYPES?w_(r,t):S_(r,t)}It.read=oh;function w_(r,t){return t.fs.readdirSync(r,{withFileTypes:!0}).map(n=>{let a={dirent:n,name:n.name,path:v_.joinPathSegments(r,n.name,t.pathSegmentSeparator)};if(a.dirent.isSymbolicLink()&&t.followSymbolicLinks)try{let l=t.fs.statSync(a.path);a.dirent=y_.fs.createDirentFromStats(a.name,l)}catch(l){if(t.throwErrorOnBrokenSymbolicLink)throw l}return a})}It.readdirWithFileTypes=w_;function S_(r,t){return t.fs.readdirSync(r).map(n=>{let a=v_.joinPathSegments(r,n,t.pathSegmentSeparator),l=sh.statSync(a,t.fsStatSettings),c={name:n,path:a,dirent:y_.fs.createDirentFromStats(n,l)};return t.stats&&(c.stats=l),c})}It.readdir=S_});var k_=q(Ot=>{"use strict";Object.defineProperty(Ot,"__esModule",{value:!0});Ot.createFileSystemAdapter=Ot.FILE_SYSTEM_ADAPTER=void 0;var mr=require("fs");Ot.FILE_SYSTEM_ADAPTER={lstat:mr.lstat,stat:mr.stat,lstatSync:mr.lstatSync,statSync:mr.statSync,readdir:mr.readdir,readdirSync:mr.readdirSync};function uh(r){return r===void 0?Ot.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},Ot.FILE_SYSTEM_ADAPTER),r)}Ot.createFileSystemAdapter=uh});var C_=q(ko=>{"use strict";Object.defineProperty(ko,"__esModule",{value:!0});var lh=require("path"),ch=Kt(),_h=k_(),Eo=class{constructor(t={}){this._options=t,this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!1),this.fs=_h.createFileSystemAdapter(this._options.fs),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,lh.sep),this.stats=this._getValue(this._options.stats,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0),this.fsStatSettings=new ch.Settings({followSymbolicLink:this.followSymbolicLinks,fs:this.fs,throwErrorOnBrokenSymbolicLink:this.throwErrorOnBrokenSymbolicLink})}_getValue(t,e){return t??e}};ko.default=Eo});var ni=q(Pt=>{"use strict";Object.defineProperty(Pt,"__esModule",{value:!0});Pt.Settings=Pt.scandirSync=Pt.scandir=void 0;var T_=g_(),dh=E_(),Co=C_();Pt.Settings=Co.default;function fh(r,t,e){if(typeof t=="function"){T_.read(r,To(),t);return}T_.read(r,To(t),e)}Pt.scandir=fh;function ph(r,t){let e=To(t);return dh.read(r,e)}Pt.scandirSync=ph;function To(r={}){return r instanceof Co.default?r:new Co.default(r)}});var A_=q((Uy,R_)=>{"use strict";function mh(r){var t=new r,e=t;function n(){var l=t;return l.next?t=l.next:(t=new r,e=t),l.next=null,l}function a(l){e.next=l,e=l}return{get:n,release:a}}R_.exports=mh});var D_=q((By,Ro)=>{"use strict";var bh=A_();function j_(r,t,e){if(typeof r=="function"&&(e=t,t=r,r=null),e<1)throw new Error("fastqueue concurrency must be greater than 1");var n=bh(hh),a=null,l=null,c=0,m=null,g={push:W,drain:at,saturated:at,pause:y,paused:!1,concurrency:e,running:D,resume:z,idle:H,length:I,getQueue:A,unshift:J,empty:at,kill:me,killAndDrain:fe,error:Se};return g;function D(){return c}function y(){g.paused=!0}function I(){for(var ie=a,le=0;ie;)ie=ie.next,le++;return le}function A(){for(var ie=a,le=[];ie;)le.push(ie.value),ie=ie.next;return le}function z(){if(!!g.paused){g.paused=!1;for(var ie=0;ie<g.concurrency;ie++)c++,X()}}function H(){return c===0&&g.length()===0}function W(ie,le){var te=n.get();te.context=r,te.release=X,te.value=ie,te.callback=le||at,te.errorHandler=m,c===g.concurrency||g.paused?l?(l.next=te,l=te):(a=te,l=te,g.saturated()):(c++,t.call(r,te.value,te.worked))}function J(ie,le){var te=n.get();te.context=r,te.release=X,te.value=ie,te.callback=le||at,c===g.concurrency||g.paused?a?(te.next=a,a=te):(a=te,l=te,g.saturated()):(c++,t.call(r,te.value,te.worked))}function X(ie){ie&&n.release(ie);var le=a;le?g.paused?c--:(l===a&&(l=null),a=le.next,le.next=null,t.call(r,le.value,le.worked),l===null&&g.empty()):--c===0&&g.drain()}function me(){a=null,l=null,g.drain=at}function fe(){a=null,l=null,g.drain(),g.drain=at}function Se(ie){m=ie}}function at(){}function hh(){this.value=null,this.callback=at,this.next=null,this.release=at,this.context=null,this.errorHandler=null;var r=this;this.worked=function(e,n){var a=r.callback,l=r.errorHandler,c=r.value;r.value=null,r.callback=at,r.errorHandler&&l(e,c),a.call(r.context,e,n),r.release(r)}}function gh(r,t,e){typeof r=="function"&&(e=t,t=r,r=null);function n(y,I){t.call(this,y).then(function(A){I(null,A)},I)}var a=j_(r,n,e),l=a.push,c=a.unshift;return a.push=m,a.unshift=g,a.drained=D,a;function m(y){var I=new Promise(function(A,z){l(y,function(H,W){if(H){z(H);return}A(W)})});return I.catch(at),I}function g(y){var I=new Promise(function(A,z){c(y,function(H,W){if(H){z(H);return}A(W)})});return I.catch(at),I}function D(){var y=a.drain,I=new Promise(function(A){a.drain=function(){y(),A()}});return I}}Ro.exports=j_;Ro.exports.promise=gh});var ii=q(mt=>{"use strict";Object.defineProperty(mt,"__esModule",{value:!0});mt.joinPathSegments=mt.replacePathSegmentSeparator=mt.isAppliedFilter=mt.isFatalError=void 0;function yh(r,t){return r.errorFilter===null?!0:!r.errorFilter(t)}mt.isFatalError=yh;function vh(r,t){return r===null||r(t)}mt.isAppliedFilter=vh;function wh(r,t){return r.split(/[/\\]/).join(t)}mt.replacePathSegmentSeparator=wh;function Sh(r,t,e){return r===""?t:r.endsWith(e)?r+t:r+e+t}mt.joinPathSegments=Sh});var Do=q(jo=>{"use strict";Object.defineProperty(jo,"__esModule",{value:!0});var Eh=ii(),Ao=class{constructor(t,e){this._root=t,this._settings=e,this._root=Eh.replacePathSegmentSeparator(t,e.pathSegmentSeparator)}};jo.default=Ao});var Fo=q(Lo=>{"use strict";Object.defineProperty(Lo,"__esModule",{value:!0});var kh=require("events"),Ch=ni(),Th=D_(),si=ii(),Rh=Do(),Mo=class extends Rh.default{constructor(t,e){super(t,e),this._settings=e,this._scandir=Ch.scandir,this._emitter=new kh.EventEmitter,this._queue=Th(this._worker.bind(this),this._settings.concurrency),this._isFatalError=!1,this._isDestroyed=!1,this._queue.drain=()=>{this._isFatalError||this._emitter.emit("end")}}read(){return this._isFatalError=!1,this._isDestroyed=!1,setImmediate(()=>{this._pushToQueue(this._root,this._settings.basePath)}),this._emitter}get isDestroyed(){return this._isDestroyed}destroy(){if(this._isDestroyed)throw new Error("The reader is already destroyed");this._isDestroyed=!0,this._queue.killAndDrain()}onEntry(t){this._emitter.on("entry",t)}onError(t){this._emitter.once("error",t)}onEnd(t){this._emitter.once("end",t)}_pushToQueue(t,e){let n={directory:t,base:e};this._queue.push(n,a=>{a!==null&&this._handleError(a)})}_worker(t,e){this._scandir(t.directory,this._settings.fsScandirSettings,(n,a)=>{if(n!==null){e(n,void 0);return}for(let l of a)this._handleEntry(l,t.base);e(null,void 0)})}_handleError(t){this._isDestroyed||!si.isFatalError(this._settings,t)||(this._isFatalError=!0,this._isDestroyed=!0,this._emitter.emit("error",t))}_handleEntry(t,e){if(this._isDestroyed||this._isFatalError)return;let n=t.path;e!==void 0&&(t.path=si.joinPathSegments(e,t.name,this._settings.pathSegmentSeparator)),si.isAppliedFilter(this._settings.entryFilter,t)&&this._emitEntry(t),t.dirent.isDirectory()&&si.isAppliedFilter(this._settings.deepFilter,t)&&this._pushToQueue(n,e===void 0?void 0:t.path)}_emitEntry(t){this._emitter.emit("entry",t)}};Lo.default=Mo});var M_=q(Oo=>{"use strict";Object.defineProperty(Oo,"__esModule",{value:!0});var Ah=Fo(),Io=class{constructor(t,e){this._root=t,this._settings=e,this._reader=new Ah.default(this._root,this._settings),this._storage=[]}read(t){this._reader.onError(e=>{jh(t,e)}),this._reader.onEntry(e=>{this._storage.push(e)}),this._reader.onEnd(()=>{Dh(t,this._storage)}),this._reader.read()}};Oo.default=Io;function jh(r,t){r(t)}function Dh(r,t){r(null,t)}});var L_=q(xo=>{"use strict";Object.defineProperty(xo,"__esModule",{value:!0});var Mh=require("stream"),Lh=Fo(),Po=class{constructor(t,e){this._root=t,this._settings=e,this._reader=new Lh.default(this._root,this._settings),this._stream=new Mh.Readable({objectMode:!0,read:()=>{},destroy:()=>{this._reader.isDestroyed||this._reader.destroy()}})}read(){return this._reader.onError(t=>{this._stream.emit("error",t)}),this._reader.onEntry(t=>{this._stream.push(t)}),this._reader.onEnd(()=>{this._stream.push(null)}),this._reader.read(),this._stream}};xo.default=Po});var F_=q(Uo=>{"use strict";Object.defineProperty(Uo,"__esModule",{value:!0});var Fh=ni(),ai=ii(),Ih=Do(),No=class extends Ih.default{constructor(){super(...arguments),this._scandir=Fh.scandirSync,this._storage=[],this._queue=new Set}read(){return this._pushToQueue(this._root,this._settings.basePath),this._handleQueue(),this._storage}_pushToQueue(t,e){this._queue.add({directory:t,base:e})}_handleQueue(){for(let t of this._queue.values())this._handleDirectory(t.directory,t.base)}_handleDirectory(t,e){try{let n=this._scandir(t,this._settings.fsScandirSettings);for(let a of n)this._handleEntry(a,e)}catch(n){this._handleError(n)}}_handleError(t){if(!!ai.isFatalError(this._settings,t))throw t}_handleEntry(t,e){let n=t.path;e!==void 0&&(t.path=ai.joinPathSegments(e,t.name,this._settings.pathSegmentSeparator)),ai.isAppliedFilter(this._settings.entryFilter,t)&&this._pushToStorage(t),t.dirent.isDirectory()&&ai.isAppliedFilter(this._settings.deepFilter,t)&&this._pushToQueue(n,e===void 0?void 0:t.path)}_pushToStorage(t){this._storage.push(t)}};Uo.default=No});var I_=q(Ho=>{"use strict";Object.defineProperty(Ho,"__esModule",{value:!0});var Oh=F_(),Bo=class{constructor(t,e){this._root=t,this._settings=e,this._reader=new Oh.default(this._root,this._settings)}read(){return this._reader.read()}};Ho.default=Bo});var O_=q(qo=>{"use strict";Object.defineProperty(qo,"__esModule",{value:!0});var Ph=require("path"),xh=ni(),Wo=class{constructor(t={}){this._options=t,this.basePath=this._getValue(this._options.basePath,void 0),this.concurrency=this._getValue(this._options.concurrency,Number.POSITIVE_INFINITY),this.deepFilter=this._getValue(this._options.deepFilter,null),this.entryFilter=this._getValue(this._options.entryFilter,null),this.errorFilter=this._getValue(this._options.errorFilter,null),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,Ph.sep),this.fsScandirSettings=new xh.Settings({followSymbolicLinks:this._options.followSymbolicLinks,fs:this._options.fs,pathSegmentSeparator:this._options.pathSegmentSeparator,stats:this._options.stats,throwErrorOnBrokenSymbolicLink:this._options.throwErrorOnBrokenSymbolicLink})}_getValue(t,e){return t??e}};qo.default=Wo});var ui=q(bt=>{"use strict";Object.defineProperty(bt,"__esModule",{value:!0});bt.Settings=bt.walkStream=bt.walkSync=bt.walk=void 0;var P_=M_(),Nh=L_(),Uh=I_(),Go=O_();bt.Settings=Go.default;function Bh(r,t,e){if(typeof t=="function"){new P_.default(r,oi()).read(t);return}new P_.default(r,oi(t)).read(e)}bt.walk=Bh;function Hh(r,t){let e=oi(t);return new Uh.default(r,e).read()}bt.walkSync=Hh;function Wh(r,t){let e=oi(t);return new Nh.default(r,e).read()}bt.walkStream=Wh;function oi(r={}){return r instanceof Go.default?r:new Go.default(r)}});var li=q($o=>{"use strict";Object.defineProperty($o,"__esModule",{value:!0});var qh=require("path"),Gh=Kt(),x_=kt(),Yo=class{constructor(t){this._settings=t,this._fsStatSettings=new Gh.Settings({followSymbolicLink:this._settings.followSymbolicLinks,fs:this._settings.fs,throwErrorOnBrokenSymbolicLink:this._settings.followSymbolicLinks})}_getFullEntryPath(t){return qh.resolve(this._settings.cwd,t)}_makeEntry(t,e){let n={name:e,path:e,dirent:x_.fs.createDirentFromStats(e,t)};return this._settings.stats&&(n.stats=t),n}_isFatalError(t){return!x_.errno.isEnoentCodeError(t)&&!this._settings.suppressErrors}};$o.default=Yo});var Ko=q(Vo=>{"use strict";Object.defineProperty(Vo,"__esModule",{value:!0});var Yh=require("stream"),$h=Kt(),zh=ui(),Vh=li(),zo=class extends Vh.default{constructor(){super(...arguments),this._walkStream=zh.walkStream,this._stat=$h.stat}dynamic(t,e){return this._walkStream(t,e)}static(t,e){let n=t.map(this._getFullEntryPath,this),a=new Yh.PassThrough({objectMode:!0});a._write=(l,c,m)=>this._getEntry(n[l],t[l],e).then(g=>{g!==null&&e.entryFilter(g)&&a.push(g),l===n.length-1&&a.end(),m()}).catch(m);for(let l=0;l<n.length;l++)a.write(l);return a}_getEntry(t,e,n){return this._getStat(t).then(a=>this._makeEntry(a,e)).catch(a=>{if(n.errorFilter(a))return null;throw a})}_getStat(t){return new Promise((e,n)=>{this._stat(t,this._fsStatSettings,(a,l)=>a===null?e(l):n(a))})}};Vo.default=zo});var N_=q(Qo=>{"use strict";Object.defineProperty(Qo,"__esModule",{value:!0});var Kh=ui(),Xh=li(),Qh=Ko(),Xo=class extends Xh.default{constructor(){super(...arguments),this._walkAsync=Kh.walk,this._readerStream=new Qh.default(this._settings)}dynamic(t,e){return new Promise((n,a)=>{this._walkAsync(t,e,(l,c)=>{l===null?n(c):a(l)})})}async static(t,e){let n=[],a=this._readerStream.static(t,e);return new Promise((l,c)=>{a.once("error",c),a.on("data",m=>n.push(m)),a.once("end",()=>l(n))})}};Qo.default=Xo});var U_=q(Zo=>{"use strict";Object.defineProperty(Zo,"__esModule",{value:!0});var br=kt(),Jo=class{constructor(t,e,n){this._patterns=t,this._settings=e,this._micromatchOptions=n,this._storage=[],this._fillStorage()}_fillStorage(){let t=br.pattern.expandPatternsWithBraceExpansion(this._patterns);for(let e of t){let n=this._getPatternSegments(e),a=this._splitSegmentsIntoSections(n);this._storage.push({complete:a.length<=1,pattern:e,segments:n,sections:a})}}_getPatternSegments(t){return br.pattern.getPatternParts(t,this._micromatchOptions).map(n=>br.pattern.isDynamicPattern(n,this._settings)?{dynamic:!0,pattern:n,patternRe:br.pattern.makeRe(n,this._micromatchOptions)}:{dynamic:!1,pattern:n})}_splitSegmentsIntoSections(t){return br.array.splitWhen(t,e=>e.dynamic&&br.pattern.hasGlobStar(e.pattern))}};Zo.default=Jo});var B_=q(tu=>{"use strict";Object.defineProperty(tu,"__esModule",{value:!0});var Jh=U_(),eu=class extends Jh.default{match(t){let e=t.split("/"),n=e.length,a=this._storage.filter(l=>!l.complete||l.segments.length>n);for(let l of a){let c=l.sections[0];if(!l.complete&&n>c.length||e.every((g,D)=>{let y=l.segments[D];return!!(y.dynamic&&y.patternRe.test(g)||!y.dynamic&&y.pattern===g)}))return!0}return!1}};tu.default=eu});var H_=q(nu=>{"use strict";Object.defineProperty(nu,"__esModule",{value:!0});var ci=kt(),Zh=B_(),ru=class{constructor(t,e){this._settings=t,this._micromatchOptions=e}getFilter(t,e,n){let a=this._getMatcher(e),l=this._getNegativePatternsRe(n);return c=>this._filter(t,c,a,l)}_getMatcher(t){return new Zh.default(t,this._settings,this._micromatchOptions)}_getNegativePatternsRe(t){let e=t.filter(ci.pattern.isAffectDepthOfReadingPattern);return ci.pattern.convertPatternsToRe(e,this._micromatchOptions)}_filter(t,e,n,a){if(this._isSkippedByDeep(t,e.path)||this._isSkippedSymbolicLink(e))return!1;let l=ci.path.removeLeadingDotSegment(e.path);return this._isSkippedByPositivePatterns(l,n)?!1:this._isSkippedByNegativePatterns(l,a)}_isSkippedByDeep(t,e){return this._settings.deep===1/0?!1:this._getEntryLevel(t,e)>=this._settings.deep}_getEntryLevel(t,e){let n=e.split("/").length;if(t==="")return n;let a=t.split("/").length;return n-a}_isSkippedSymbolicLink(t){return!this._settings.followSymbolicLinks&&t.dirent.isSymbolicLink()}_isSkippedByPositivePatterns(t,e){return!this._settings.baseNameMatch&&!e.match(t)}_isSkippedByNegativePatterns(t,e){return!ci.pattern.matchAny(t,e)}};nu.default=ru});var W_=q(su=>{"use strict";Object.defineProperty(su,"__esModule",{value:!0});var Xt=kt(),iu=class{constructor(t,e){this._settings=t,this._micromatchOptions=e,this.index=new Map}getFilter(t,e){let n=Xt.pattern.convertPatternsToRe(t,this._micromatchOptions),a=Xt.pattern.convertPatternsToRe(e,this._micromatchOptions);return l=>this._filter(l,n,a)}_filter(t,e,n){if(this._settings.unique&&this._isDuplicateEntry(t)||this._onlyFileFilter(t)||this._onlyDirectoryFilter(t)||this._isSkippedByAbsoluteNegativePatterns(t.path,n))return!1;let a=this._settings.baseNameMatch?t.name:t.path,l=t.dirent.isDirectory(),c=this._isMatchToPatterns(a,e,l)&&!this._isMatchToPatterns(t.path,n,l);return this._settings.unique&&c&&this._createIndexRecord(t),c}_isDuplicateEntry(t){return this.index.has(t.path)}_createIndexRecord(t){this.index.set(t.path,void 0)}_onlyFileFilter(t){return this._settings.onlyFiles&&!t.dirent.isFile()}_onlyDirectoryFilter(t){return this._settings.onlyDirectories&&!t.dirent.isDirectory()}_isSkippedByAbsoluteNegativePatterns(t,e){if(!this._settings.absolute)return!1;let n=Xt.path.makeAbsolute(this._settings.cwd,t);return Xt.pattern.matchAny(n,e)}_isMatchToPatterns(t,e,n){let a=Xt.path.removeLeadingDotSegment(t),l=Xt.pattern.matchAny(a,e);return!l&&n?Xt.pattern.matchAny(a+"/",e):l}};su.default=iu});var q_=q(ou=>{"use strict";Object.defineProperty(ou,"__esModule",{value:!0});var eg=kt(),au=class{constructor(t){this._settings=t}getFilter(){return t=>this._isNonFatalError(t)}_isNonFatalError(t){return eg.errno.isEnoentCodeError(t)||this._settings.suppressErrors}};ou.default=au});var Y_=q(lu=>{"use strict";Object.defineProperty(lu,"__esModule",{value:!0});var G_=kt(),uu=class{constructor(t){this._settings=t}getTransformer(){return t=>this._transform(t)}_transform(t){let e=t.path;return this._settings.absolute&&(e=G_.path.makeAbsolute(this._settings.cwd,e),e=G_.path.unixify(e)),this._settings.markDirectories&&t.dirent.isDirectory()&&(e+="/"),this._settings.objectMode?Object.assign(Object.assign({},t),{path:e}):e}};lu.default=uu});var _i=q(_u=>{"use strict";Object.defineProperty(_u,"__esModule",{value:!0});var tg=require("path"),rg=H_(),ng=W_(),ig=q_(),sg=Y_(),cu=class{constructor(t){this._settings=t,this.errorFilter=new ig.default(this._settings),this.entryFilter=new ng.default(this._settings,this._getMicromatchOptions()),this.deepFilter=new rg.default(this._settings,this._getMicromatchOptions()),this.entryTransformer=new sg.default(this._settings)}_getRootDirectory(t){return tg.resolve(this._settings.cwd,t.base)}_getReaderOptions(t){let e=t.base==="."?"":t.base;return{basePath:e,pathSegmentSeparator:"/",concurrency:this._settings.concurrency,deepFilter:this.deepFilter.getFilter(e,t.positive,t.negative),entryFilter:this.entryFilter.getFilter(t.positive,t.negative),errorFilter:this.errorFilter.getFilter(),followSymbolicLinks:this._settings.followSymbolicLinks,fs:this._settings.fs,stats:this._settings.stats,throwErrorOnBrokenSymbolicLink:this._settings.throwErrorOnBrokenSymbolicLink,transform:this.entryTransformer.getTransformer()}}_getMicromatchOptions(){return{dot:this._settings.dot,matchBase:this._settings.baseNameMatch,nobrace:!this._settings.braceExpansion,nocase:!this._settings.caseSensitiveMatch,noext:!this._settings.extglob,noglobstar:!this._settings.globstar,posix:!0,strictSlashes:!1}}};_u.default=cu});var $_=q(fu=>{"use strict";Object.defineProperty(fu,"__esModule",{value:!0});var ag=N_(),og=_i(),du=class extends og.default{constructor(){super(...arguments),this._reader=new ag.default(this._settings)}async read(t){let e=this._getRootDirectory(t),n=this._getReaderOptions(t);return(await this.api(e,t,n)).map(l=>n.transform(l))}api(t,e,n){return e.dynamic?this._reader.dynamic(t,n):this._reader.static(e.patterns,n)}};fu.default=du});var z_=q(mu=>{"use strict";Object.defineProperty(mu,"__esModule",{value:!0});var ug=require("stream"),lg=Ko(),cg=_i(),pu=class extends cg.default{constructor(){super(...arguments),this._reader=new lg.default(this._settings)}read(t){let e=this._getRootDirectory(t),n=this._getReaderOptions(t),a=this.api(e,t,n),l=new ug.Readable({objectMode:!0,read:()=>{}});return a.once("error",c=>l.emit("error",c)).on("data",c=>l.emit("data",n.transform(c))).once("end",()=>l.emit("end")),l.once("close",()=>a.destroy()),l}api(t,e,n){return e.dynamic?this._reader.dynamic(t,n):this._reader.static(e.patterns,n)}};mu.default=pu});var V_=q(hu=>{"use strict";Object.defineProperty(hu,"__esModule",{value:!0});var _g=Kt(),dg=ui(),fg=li(),bu=class extends fg.default{constructor(){super(...arguments),this._walkSync=dg.walkSync,this._statSync=_g.statSync}dynamic(t,e){return this._walkSync(t,e)}static(t,e){let n=[];for(let a of t){let l=this._getFullEntryPath(a),c=this._getEntry(l,a,e);c===null||!e.entryFilter(c)||n.push(c)}return n}_getEntry(t,e,n){try{let a=this._getStat(t);return this._makeEntry(a,e)}catch(a){if(n.errorFilter(a))return null;throw a}}_getStat(t){return this._statSync(t,this._fsStatSettings)}};hu.default=bu});var K_=q(yu=>{"use strict";Object.defineProperty(yu,"__esModule",{value:!0});var pg=V_(),mg=_i(),gu=class extends mg.default{constructor(){super(...arguments),this._reader=new pg.default(this._settings)}read(t){let e=this._getRootDirectory(t),n=this._getReaderOptions(t);return this.api(e,t,n).map(n.transform)}api(t,e,n){return e.dynamic?this._reader.dynamic(t,n):this._reader.static(e.patterns,n)}};yu.default=gu});var X_=q(gr=>{"use strict";Object.defineProperty(gr,"__esModule",{value:!0});gr.DEFAULT_FILE_SYSTEM_ADAPTER=void 0;var hr=require("fs"),bg=require("os"),hg=Math.max(bg.cpus().length,1);gr.DEFAULT_FILE_SYSTEM_ADAPTER={lstat:hr.lstat,lstatSync:hr.lstatSync,stat:hr.stat,statSync:hr.statSync,readdir:hr.readdir,readdirSync:hr.readdirSync};var vu=class{constructor(t={}){this._options=t,this.absolute=this._getValue(this._options.absolute,!1),this.baseNameMatch=this._getValue(this._options.baseNameMatch,!1),this.braceExpansion=this._getValue(this._options.braceExpansion,!0),this.caseSensitiveMatch=this._getValue(this._options.caseSensitiveMatch,!0),this.concurrency=this._getValue(this._options.concurrency,hg),this.cwd=this._getValue(this._options.cwd,process.cwd()),this.deep=this._getValue(this._options.deep,1/0),this.dot=this._getValue(this._options.dot,!1),this.extglob=this._getValue(this._options.extglob,!0),this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!0),this.fs=this._getFileSystemMethods(this._options.fs),this.globstar=this._getValue(this._options.globstar,!0),this.ignore=this._getValue(this._options.ignore,[]),this.markDirectories=this._getValue(this._options.markDirectories,!1),this.objectMode=this._getValue(this._options.objectMode,!1),this.onlyDirectories=this._getValue(this._options.onlyDirectories,!1),this.onlyFiles=this._getValue(this._options.onlyFiles,!0),this.stats=this._getValue(this._options.stats,!1),this.suppressErrors=this._getValue(this._options.suppressErrors,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!1),this.unique=this._getValue(this._options.unique,!0),this.onlyDirectories&&(this.onlyFiles=!1),this.stats&&(this.objectMode=!0)}_getValue(t,e){return t===void 0?e:t}_getFileSystemMethods(t={}){return Object.assign(Object.assign({},gr.DEFAULT_FILE_SYSTEM_ADAPTER),t)}};gr.default=vu});var ed=q((_v,Z_)=>{"use strict";var Q_=Xc(),J_=Jc(),gg=$_(),yg=z_(),vg=K_(),wu=X_(),Qt=kt();async function Su(r,t){yr(r);let e=Eu(r,gg.default,t),n=await Promise.all(e);return Qt.array.flatten(n)}(function(r){function t(c,m){yr(c);let g=Eu(c,vg.default,m);return Qt.array.flatten(g)}r.sync=t;function e(c,m){yr(c);let g=Eu(c,yg.default,m);return Qt.stream.merge(g)}r.stream=e;function n(c,m){yr(c);let g=J_.transform([].concat(c)),D=new wu.default(m);return Q_.generate(g,D)}r.generateTasks=n;function a(c,m){yr(c);let g=new wu.default(m);return Qt.pattern.isDynamicPattern(c,g)}r.isDynamicPattern=a;function l(c){return yr(c),Qt.path.escape(c)}r.escapePath=l})(Su||(Su={}));function Eu(r,t,e){let n=J_.transform([].concat(r)),a=new wu.default(e),l=Q_.generate(n,a),c=new t(a);return l.map(c.read,c)}function yr(r){if(![].concat(r).every(n=>Qt.string.isString(n)&&!Qt.string.isEmpty(n)))throw new TypeError("Patterns must be a string (non empty) or an array of strings")}Z_.exports=Su});var kg={};rp(kg,{ConsoleLogger:()=>Fa,DEFAULT_RUNTIME:()=>Ma,DuckDBAccessMode:()=>rl,DuckDBBindingsBase:()=>zr,DuckDBConnection:()=>Gr,DuckDBDataProtocol:()=>In,DuckDBFeature:()=>tl,FileFlags:()=>el,FileStatistics:()=>$r,JSONTableShape:()=>nl,LogEvent:()=>al,LogLevel:()=>il,LogOrigin:()=>ol,LogTopic:()=>sl,NODE_RUNTIME:()=>je,PACKAGE_NAME:()=>Ia,PACKAGE_VERSION:()=>Oa,PACKAGE_VERSION_MAJOR:()=>dp,PACKAGE_VERSION_MINOR:()=>fp,PACKAGE_VERSION_PATCH:()=>pp,PreparedStatement:()=>Mn,ResultStreamIterator:()=>Yr,StatusCode:()=>Ku,VoidLogger:()=>La,callSRet:()=>ye,copyBuffer:()=>Dt,createDuckDB:()=>Eg,decodeText:()=>jt,dropResponseBuffers:()=>ke,failWith:()=>Ae,getJsDelivrBundles:()=>hp,getLogEventLabel:()=>op,getLogLevelLabel:()=>ap,getLogOriginLabel:()=>lp,getLogTopicLabel:()=>up,getPlatformFeatures:()=>xn,isFirefox:()=>mp,isNode:()=>Wa,isSafari:()=>bp,readString:()=>_e,selectBundle:()=>gp});module.exports=np(kg);var _t=$t(require("apache-arrow")),Gr=class{constructor(t,e){this._bindings=t,this._conn=e}close(){this._bindings.disconnect(this._conn)}useUnsafe(t){return t(this._bindings,this._conn)}query(t){let e=this._bindings.runQuery(this._conn,t),n=_t.RecordBatchReader.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new _t.Table(n)}async send(t){let e=this._bindings.startPendingQuery(this._conn,t);for(;e==null;)e=await new Promise((l,c)=>{try{l(this._bindings.pollPendingQuery(this._conn))}catch(m){c(m)}});let n=new Yr(this._bindings,this._conn,e),a=_t.RecordBatchReader.from(n);return console.assert(a.isSync()),console.assert(a.isStream()),a}cancelSent(){return this._bindings.cancelPendingQuery(this._conn)}getTableNames(t){return this._bindings.getTableNames(this._conn,t)}prepare(t){let e=this._bindings.createPrepared(this._conn,t);return new Mn(this._bindings,this._conn,e)}createScalarFunction(t,e,n){this._bindings.createScalarFunction(this._conn,t,e,n)}insertArrowTable(t,e){let n=_t.tableToIPC(t,"stream");this.insertArrowFromIPCStream(n,e)}insertArrowFromIPCStream(t,e){this._bindings.insertArrowFromIPCStream(this._conn,t,e)}insertCSVFromPath(t,e){this._bindings.insertCSVFromPath(this._conn,t,e)}insertJSONFromPath(t,e){this._bindings.insertJSONFromPath(this._conn,t,e)}},Yr=class{constructor(t,e,n){this.bindings=t;this.conn=e;this.header=n;this._first=!0,this._depleted=!1}next(){if(this._first)return this._first=!1,{done:!1,value:this.header};if(this._depleted)return{done:!0,value:null};let t=this.bindings.fetchQueryResults(this.conn);return this._depleted=t.length==0,{done:this._depleted,value:t}}[Symbol.iterator](){return this}},Mn=class{constructor(t,e,n){this.bindings=t,this.connectionId=e,this.statementId=n}close(){this.bindings.closePrepared(this.connectionId,this.statementId)}query(...t){let e=this.bindings.runPrepared(this.connectionId,this.statementId,t),n=_t.RecordBatchReader.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new _t.Table(n)}send(...t){let e=this.bindings.sendPrepared(this.connectionId,this.statementId,t),n=new Yr(this.bindings,this.connectionId,e),a=_t.RecordBatchReader.from(n);return console.assert(a.isSync()),console.assert(a.isStream()),a}};var Ku=(t=>(t[t.SUCCESS=0]="SUCCESS",t))(Ku||{});var Ju=new TextEncoder,Xu=new TextDecoder("utf-8");function Aa(r,t,e){let n=Ju.encode(e),a=r._malloc(n.byteLength),l=r.HEAPU8.subarray(a,a+n.byteLength);l.set(n),r.HEAPF64[(t>>3)+0]=1,r.HEAPF64[(t>>3)+1]=a,r.HEAPF64[(t>>3)+2]=l.byteLength}function Da(r){switch(r){case"UINT8":case"INT8":return 1;case"INT32":case"FLOAT":return 4;case"INT64":case"UINT64":case"DOUBLE":case"VARCHAR":return 8;default:return 0}}function ja(r,t,e,n){let a=r.HEAPU8.subarray(t,t+n*Da(e));switch(e){case"UINT8":return new Uint8Array(a.buffer,a.byteOffset,n);case"INT8":return new Int8Array(a.buffer,a.byteOffset,n);case"INT32":return new Int32Array(a.buffer,a.byteOffset,n);case"FLOAT":return new Float32Array(a.buffer,a.byteOffset,n);case"DOUBLE":return new Float64Array(a.buffer,a.byteOffset,n);case"VARCHAR":return new Float64Array(a.buffer,a.byteOffset,n);default:return new Array(0)}}function Qu(r,t,e){let n=r.HEAPU8.subarray(t,t+e);return new Uint8Array(n.buffer,n.byteOffset,e)}function Ln(r,t,e){let n=r.HEAPU8.subarray(t,t+e*8);return new Float64Array(n.buffer,n.byteOffset,e)}function Fn(r,t,e,n,a,l,c,m){try{let g=r._udfFunctions.get(n);if(!g){Aa(t,e,"Unknown UDF with id: "+n);return}let D=Xu.decode(t.HEAPU8.subarray(a,a+l)),y=JSON.parse(D),I=Ln(t,c,m/8),A=Y=>{var T;let S=null;switch(Y.validityBuffer!==void 0&&(S=Qu(t,I[Y.validityBuffer],y.rows)),Y.physicalType){case"VARCHAR":{if(Y.dataBuffer===null||Y.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for VARCHAR argument");if(Y.lengthBuffer===null||Y.lengthBuffer===void 0)throw new Error("malformed data view, expected data length buffer for VARCHAR argument");let ce=ja(t,I[Y.dataBuffer],Y.physicalType,y.rows),oe=[],Ce=Ln(t,I[Y.lengthBuffer],y.rows);for(let v=0;v<y.rows;++v){if(S!=null&&!S[v]){oe.push(null);continue}let k=t.HEAPU8.subarray(ce[v],ce[v]+Ce[v]),be=Xu.decode(k);oe.push(be)}return v=>oe[v]}case"STRUCT":{let ce={},oe=[];for(let Ce=0;Ce<(((T=Y.children)==null?void 0:T.length)||0);++Ce){let v=Y.children[Ce],k=A(v);oe.push(be=>{ce[v.name]=k(be)})}return S!=null?Ce=>{if(!S[Ce])return null;for(let v of oe)v(Ce);return ce}:Ce=>{for(let v of oe)v(Ce);return ce}}default:{if(Y.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for argument of type: "+Y.physicalType);let ce=ja(t,I[Y.dataBuffer],Y.physicalType,y.rows);return S!=null?oe=>S[oe]?ce[oe]:null:oe=>ce[oe]}}},z=[];for(let Y=0;Y<y.args.length;++Y)z.push(A(y.args[Y]));let H=y.rows*Da(y.ret.physicalType),W=t._malloc(H),J=ja(t,W,y.ret.physicalType,y.rows),X=t._malloc(y.rows),me=Qu(t,X,y.rows);if(J.length==0||me.length==0){Aa(t,e,"Can't create physical arrays for result");return}let fe=J;y.ret.physicalType=="VARCHAR"&&(fe=new Array(y.rows));let Se=[];for(let Y=0;Y<y.args.length;++Y)Se.push(null);for(let Y=0;Y<y.rows;++Y){for(let T=0;T<y.args.length;++T)Se[T]=z[T](Y);let S=g.func(...Se);fe[Y]=S,me[Y]=S==null?0:1}let ie=0;switch(y.ret.physicalType){case"VARCHAR":{let Y=new Array(0);ie=t._malloc(y.rows*Da("DOUBLE"));let S=Ln(t,ie,y.rows),T=0;for(let v=0;v<y.rows;++v){let k=Ju.encode(fe[v]||"");Y.push(k),S[v]=k.length,T+=k.length}let ce=t._malloc(T),oe=t.HEAPU8.subarray(ce,ce+T),Ce=0;for(let v=0;v<y.rows;++v){J[v]=Ce;let k=Y[v];oe.subarray(Ce,Ce+k.length).set(k),Ce+=k.length}}}let le=3*8,te=t._malloc(le),Q=Ln(t,te,3);Q[0]=W,Q[1]=X,Q[2]=ie,t.HEAPF64[(e>>3)+0]=0,t.HEAPF64[(e>>3)+1]=te,t.HEAPF64[(e>>3)+2]=0}catch(g){Aa(t,e,g.toString())}}function ip(){let r=new TextDecoder;return t=>(typeof SharedArrayBuffer<"u"&&t.buffer instanceof SharedArrayBuffer&&(t=new Uint8Array(t)),r.decode(t))}var jt=ip();function Ae(r,t){console.error(`FAIL WITH: ${t}`),r.ccall("duckdb_web_fail_with",null,["string"],[t])}function Dt(r,t,e){let n=r.HEAPU8.subarray(t,t+e),a=new Uint8Array(new ArrayBuffer(n.byteLength));return a.set(n),a}function _e(r,t,e){return jt(r.HEAPU8.subarray(t,t+e))}var In=(c=>(c[c.BUFFER=0]="BUFFER",c[c.NODE_FS=1]="NODE_FS",c[c.BROWSER_FILEREADER=2]="BROWSER_FILEREADER",c[c.BROWSER_FSACCESS=3]="BROWSER_FSACCESS",c[c.HTTP=4]="HTTP",c[c.S3=5]="S3",c))(In||{}),el=(c=>(c[c.FILE_FLAGS_READ=1]="FILE_FLAGS_READ",c[c.FILE_FLAGS_WRITE=2]="FILE_FLAGS_WRITE",c[c.FILE_FLAGS_DIRECT_IO=4]="FILE_FLAGS_DIRECT_IO",c[c.FILE_FLAGS_FILE_CREATE=8]="FILE_FLAGS_FILE_CREATE",c[c.FILE_FLAGS_FILE_CREATE_NEW=16]="FILE_FLAGS_FILE_CREATE_NEW",c[c.FILE_FLAGS_APPEND=32]="FILE_FLAGS_APPEND",c))(el||{});function ye(r,t,e,n){let a=r.stackSave(),l=r.stackAlloc(3*8);e.unshift("number"),n.unshift(l),r.ccall(t,null,e,n);let c=r.HEAPF64[(l>>3)+0],m=r.HEAPF64[(l>>3)+1],g=r.HEAPF64[(l>>3)+2];return r.stackRestore(a),[c,m,g]}function ke(r){r.ccall("duckdb_web_clear_response",null,[],[])}var Ma={_udfFunctions:new Map,testPlatformFeature:(r,t)=>!1,getDefaultDataProtocol:r=>0,openFile:(r,t,e)=>{},syncFile:(r,t)=>{},closeFile:(r,t)=>{},getLastFileModificationTime:(r,t)=>0,truncateFile:(r,t,e)=>{},readFile:(r,t,e,n,a)=>0,writeFile:(r,t,e,n,a)=>0,removeDirectory:(r,t,e)=>{},checkDirectory:(r,t,e)=>!1,createDirectory:(r,t,e)=>{},listDirectoryEntries:(r,t,e)=>!1,glob:(r,t,e)=>{},moveFile:(r,t,e,n,a)=>{},checkFile:(r,t,e)=>!1,removeFile:(r,t,e)=>{},callScalarUDF:(r,t,e,n,a,l,c)=>{Fn(Ma,r,t,e,n,a,l,c)}};var $r=class{constructor(t){let e=new Float64Array(t.buffer,t.byteOffset,t.byteLength/8),n=new Uint8Array(new ArrayBuffer(t.byteLength));n.set(t.subarray(7*8)),this.totalFileReadsCold=e[0],this.totalFileReadsAhead=e[1],this.totalFileReadsCached=e[2],this.totalFileWrites=e[3],this.totalPageAccesses=e[4],this.totalPageLoads=e[5],this.blockSize=e[6],this.blockStats=n}getBlockStats(t,e){return e=e||{file_reads_cold:0,file_reads_ahead:0,file_reads_cached:0,file_writes:0,page_accesses:0,page_loads:0},e.file_writes=this.blockStats[t*3+0]&15,e.file_reads_cold=this.blockStats[t*3+0]>>4,e.file_reads_ahead=this.blockStats[t*3+1]&15,e.file_reads_cached=this.blockStats[t*3+1]>>4,e.page_accesses=this.blockStats[t*3+1]&15,e.page_loads=this.blockStats[t*3+1]>>4,e}};var de=$t(require("apache-arrow"));function lr(r){switch(r.typeId){case de.Type.Binary:return{sqlType:"binary"};case de.Type.Bool:return{sqlType:"bool"};case de.Type.Date:return{sqlType:"date"};case de.Type.DateDay:return{sqlType:"date32[d]"};case de.Type.DateMillisecond:return{sqlType:"date64[ms]"};case de.Type.Decimal:{let t=r;return{sqlType:"decimal",precision:t.precision,scale:t.scale}}case de.Type.Float:return{sqlType:"float"};case de.Type.Float16:return{sqlType:"float16"};case de.Type.Float32:return{sqlType:"float32"};case de.Type.Float64:return{sqlType:"float64"};case de.Type.Int:return{sqlType:"int32"};case de.Type.Int16:return{sqlType:"int16"};case de.Type.Int32:return{sqlType:"int32"};case de.Type.Int64:return{sqlType:"int64"};case de.Type.Uint16:return{sqlType:"uint16"};case de.Type.Uint32:return{sqlType:"uint32"};case de.Type.Uint64:return{sqlType:"uint64"};case de.Type.Uint8:return{sqlType:"uint8"};case de.Type.IntervalDayTime:return{sqlType:"interval[dt]"};case de.Type.IntervalYearMonth:return{sqlType:"interval[m]"};case de.Type.List:return{sqlType:"list",valueType:lr(r.valueType)};case de.Type.FixedSizeBinary:return{sqlType:"fixedsizebinary",byteWidth:r.byteWidth};case de.Type.Null:return{sqlType:"null"};case de.Type.Utf8:return{sqlType:"utf8"};case de.Type.Struct:return{sqlType:"struct",fields:r.children.map(e=>On(e.name,e.type))};case de.Type.Map:{let t=r;return{sqlType:"map",keyType:lr(t.keyType),valueType:lr(t.valueType)}}case de.Type.Time:return{sqlType:"time[s]"};case de.Type.TimeMicrosecond:return{sqlType:"time[us]"};case de.Type.TimeMillisecond:return{sqlType:"time[ms]"};case de.Type.TimeNanosecond:return{sqlType:"time[ns]"};case de.Type.TimeSecond:return{sqlType:"time[s]"};case de.Type.Timestamp:return{sqlType:"timestamp",timezone:r.timezone||void 0};case de.Type.TimestampSecond:return{sqlType:"timestamp[s]",timezone:r.timezone||void 0};case de.Type.TimestampMicrosecond:return{sqlType:"timestamp[us]",timezone:r.timezone||void 0};case de.Type.TimestampNanosecond:return{sqlType:"timestamp[ns]",timezone:r.timezone||void 0};case de.Type.TimestampMillisecond:return{sqlType:"timestamp[ms]",timezone:r.timezone||void 0}}throw new Error(`unsupported arrow type: ${r.toString()}`)}function On(r,t){let e=lr(t);return e.name=r,e}var sp=new TextEncoder,tl=(l=>(l[l.WASM_EXCEPTIONS=1]="WASM_EXCEPTIONS",l[l.WASM_THREADS=2]="WASM_THREADS",l[l.WASM_SIMD=4]="WASM_SIMD",l[l.WASM_BULK_MEMORY=8]="WASM_BULK_MEMORY",l[l.EMIT_BIGINT=16]="EMIT_BIGINT",l))(tl||{}),zr=class{constructor(t,e){this._instance=null;this._initPromise=null;this._initPromiseResolver=()=>{};this.onInstantiationProgress=[];this._logger=t,this._runtime=e,this._nextUDFId=1}get logger(){return this._logger}get mod(){return this._instance}get pthread(){return this.mod.PThread||null}async instantiate(t=e=>{}){return this._instance!=null?this:(this._initPromise!=null&&(this.onInstantiationProgress.push(t),await this._initPromise),this._initPromise=new Promise(e=>{this._initPromiseResolver=e}),this.onInstantiationProgress=[t],this._instance=await this.instantiateImpl({print:console.log.bind(console),printErr:console.log.bind(console),onRuntimeInitialized:this._initPromiseResolver}),await this._initPromise,this._initPromise=null,this.onInstantiationProgress=this.onInstantiationProgress.filter(e=>e!=t),this)}open(t){let[e,n,a]=ye(this.mod,"duckdb_web_open",["string"],[JSON.stringify(t)]);if(e!==0)throw new Error(_e(this.mod,n,a));ke(this.mod)}reset(){let[t,e,n]=ye(this.mod,"duckdb_web_reset",[],[]);if(t!==0)throw new Error(_e(this.mod,e,n));ke(this.mod)}getVersion(){let[t,e,n]=ye(this.mod,"duckdb_web_get_version",[],[]);if(t!==0)throw new Error(_e(this.mod,e,n));let a=_e(this.mod,e,n);return ke(this.mod),a}getFeatureFlags(){return this.mod.ccall("duckdb_web_get_feature_flags","number",[],[])}tokenize(t){let[e,n,a]=ye(this.mod,"duckdb_web_tokenize",["string"],[t]);if(e!==0)throw new Error(_e(this.mod,n,a));let l=_e(this.mod,n,a);return ke(this.mod),JSON.parse(l)}connect(){let t=this.mod.ccall("duckdb_web_connect","number",[],[]);return new Gr(this,t)}disconnect(t){if(this.mod.ccall("duckdb_web_disconnect",null,["number"],[t]),this.pthread)for(let e of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])e.postMessage({cmd:"dropUDFFunctions",connectionId:t})}runQuery(t,e){let[n,a,l]=ye(this.mod,"duckdb_web_query_run",["number","string"],[t,e]);if(n!==0)throw new Error(_e(this.mod,a,l));let c=Dt(this.mod,a,l);return ke(this.mod),c}startPendingQuery(t,e){let[n,a,l]=ye(this.mod,"duckdb_web_pending_query_start",["number","string"],[t,e]);if(n!==0)throw new Error(_e(this.mod,a,l));if(a==0)return null;let c=Dt(this.mod,a,l);return ke(this.mod),c}pollPendingQuery(t){let[e,n,a]=ye(this.mod,"duckdb_web_pending_query_poll",["number"],[t]);if(e!==0)throw new Error(_e(this.mod,n,a));if(n==0)return null;let l=Dt(this.mod,n,a);return ke(this.mod),l}cancelPendingQuery(t){return this.mod.ccall("duckdb_web_pending_query_cancel","boolean",["number"],[t])}fetchQueryResults(t){let[e,n,a]=ye(this.mod,"duckdb_web_query_fetch_results",["number"],[t]);if(e!==0)throw new Error(_e(this.mod,n,a));let l=Dt(this.mod,n,a);return ke(this.mod),l}getTableNames(t,e){let[n,a,l]=ye(this.mod,"duckdb_web_get_tablenames",["number","string"],[t,e]);if(n!==0)throw new Error(_e(this.mod,a,l));let c=_e(this.mod,a,l);return ke(this.mod),JSON.parse(c)}createScalarFunction(t,e,n,a){let l={functionId:this._nextUDFId,name:e,returnType:lr(n)},c={functionId:l.functionId,connectionId:t,name:e,returnType:n,func:a};this._nextUDFId+=1;let[m,g,D]=ye(this.mod,"duckdb_web_udf_scalar_create",["number","string"],[t,JSON.stringify(l)]);if(m!==0)throw new Error(_e(this.mod,g,D));if(ke(this.mod),globalThis.DUCKDB_RUNTIME._udfFunctions=(globalThis.DUCKDB_RUNTIME._udfFunctions||new Map).set(c.functionId,c),this.pthread)for(let y of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])y.postMessage({cmd:"registerUDFFunction",udf:c})}createPrepared(t,e){let[n,a,l]=ye(this.mod,"duckdb_web_prepared_create",["number","string"],[t,e]);if(n!==0)throw new Error(_e(this.mod,a,l));return ke(this.mod),a}closePrepared(t,e){let[n,a,l]=ye(this.mod,"duckdb_web_prepared_close",["number","number"],[t,e]);if(n!==0)throw new Error(_e(this.mod,a,l));ke(this.mod)}runPrepared(t,e,n){let[a,l,c]=ye(this.mod,"duckdb_web_prepared_run",["number","number","string"],[t,e,JSON.stringify(n)]);if(a!==0)throw new Error(_e(this.mod,l,c));let m=Dt(this.mod,l,c);return ke(this.mod),m}sendPrepared(t,e,n){let[a,l,c]=ye(this.mod,"duckdb_web_prepared_send",["number","number","string"],[t,e,JSON.stringify(n)]);if(a!==0)throw new Error(_e(this.mod,l,c));let m=Dt(this.mod,l,c);return ke(this.mod),m}insertArrowFromIPCStream(t,e,n){if(e.length==0)return;let a=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(a,a+e.length).set(e);let c=n?JSON.stringify(n):"",[m,g,D]=ye(this.mod,"duckdb_web_insert_arrow_from_ipc_stream",["number","number","number","string"],[t,a,e.length,c]);if(m!==0)throw new Error(_e(this.mod,g,D))}insertCSVFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let D in n.columns)n.columnsFlat.push(On(D,n.columns[D]))}let a={...n};a.columns=a.columnsFlat,delete a.columnsFlat;let l=JSON.stringify(a),[c,m,g]=ye(this.mod,"duckdb_web_insert_csv_from_path",["number","string","string"],[t,e,l]);if(c!==0)throw new Error(_e(this.mod,m,g))}insertJSONFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let D in n.columns)n.columnsFlat.push(On(D,n.columns[D]))}let a={...n};a.columns=a.columnsFlat,delete a.columnsFlat;let l=JSON.stringify(a),[c,m,g]=ye(this.mod,"duckdb_web_insert_json_from_path",["number","string","string"],[t,e,l]);if(c!==0)throw new Error(_e(this.mod,m,g))}globFiles(t){let[e,n,a]=ye(this.mod,"duckdb_web_fs_glob_file_infos",["string"],[t]);if(e!==0)throw new Error(_e(this.mod,n,a));let l=_e(this.mod,n,a);ke(this.mod);let c=JSON.parse(l);return c??[]}registerFileURL(t,e,n,a=!1){e===void 0&&(e=t);let[l,c,m]=ye(this.mod,"duckdb_web_fs_register_file_url",["string","string"],[t,e,n,a]);if(l!==0)throw new Error(_e(this.mod,c,m));ke(this.mod)}registerFileText(t,e){let n=sp.encode(e);this.registerFileBuffer(t,n)}registerFileBuffer(t,e){let n=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(n,n+e.length).set(e);let[l,c,m]=ye(this.mod,"duckdb_web_fs_register_file_buffer",["string","number","number"],[t,n,e.length]);if(l!==0)throw new Error(_e(this.mod,c,m));ke(this.mod)}registerFileHandle(t,e,n,a){let[l,c,m]=ye(this.mod,"duckdb_web_fs_register_file_url",["string","string","number","boolean"],[t,t,n,a]);if(l!==0)throw new Error(_e(this.mod,c,m));if(ke(this.mod),globalThis.DUCKDB_RUNTIME._files=(globalThis.DUCKDB_RUNTIME._files||new Map).set(t,e),this.pthread){for(let g of this.pthread.runningWorkers)g.postMessage({cmd:"registerFileHandle",fileName:t,fileHandle:e});for(let g of this.pthread.unusedWorkers)g.postMessage({cmd:"dropFileHandle",fileName:t})}}dropFile(t){let[e,n,a]=ye(this.mod,"duckdb_web_fs_drop_file",["string"],[t]);if(e!==0)throw new Error(_e(this.mod,n,a));ke(this.mod)}dropFiles(){let[t,e,n]=ye(this.mod,"duckdb_web_fs_drop_files",[],[]);if(t!==0)throw new Error(_e(this.mod,e,n));ke(this.mod)}flushFiles(){this.mod.ccall("duckdb_web_flush_files",null,[],[])}copyFileToPath(t,e){let[n,a,l]=ye(this.mod,"duckdb_web_copy_file_to_path",["string","string"],[t,e]);if(n!==0)throw new Error(_e(this.mod,a,l));ke(this.mod)}copyFileToBuffer(t){let[e,n,a]=ye(this.mod,"duckdb_web_copy_file_to_buffer",["string"],[t]);if(e!==0)throw new Error(_e(this.mod,n,a));let l=this.mod.HEAPU8.subarray(n,n+a),c=new Uint8Array(l.length);return c.set(l),ke(this.mod),c}collectFileStatistics(t,e){let[n,a,l]=ye(this.mod,"duckdb_web_collect_file_stats",["string","boolean"],[t,e]);if(n!==0)throw new Error(_e(this.mod,a,l))}exportFileStatistics(t){let[e,n,a]=ye(this.mod,"duckdb_web_export_file_stats",["string"],[t]);if(e!==0)throw new Error(_e(this.mod,n,a));return new $r(this.mod.HEAPU8.subarray(n,n+a))}};var rl=(a=>(a[a.UNDEFINED=0]="UNDEFINED",a[a.AUTOMATIC=1]="AUTOMATIC",a[a.READ_ONLY=2]="READ_ONLY",a[a.READ_WRITE=3]="READ_WRITE",a))(rl||{});var nl=(e=>(e.ROW_ARRAY="row-array",e.COLUMN_OBJECT="column-object",e))(nl||{});var il=(l=>(l[l.NONE=0]="NONE",l[l.DEBUG=1]="DEBUG",l[l.INFO=2]="INFO",l[l.WARNING=3]="WARNING",l[l.ERROR=4]="ERROR",l))(il||{}),sl=(c=>(c[c.NONE=0]="NONE",c[c.CONNECT=1]="CONNECT",c[c.DISCONNECT=2]="DISCONNECT",c[c.OPEN=3]="OPEN",c[c.QUERY=4]="QUERY",c[c.INSTANTIATE=5]="INSTANTIATE",c))(sl||{}),al=(c=>(c[c.NONE=0]="NONE",c[c.OK=1]="OK",c[c.ERROR=2]="ERROR",c[c.START=3]="START",c[c.RUN=4]="RUN",c[c.CAPTURE=5]="CAPTURE",c))(al||{}),ol=(l=>(l[l.NONE=0]="NONE",l[l.WEB_WORKER=1]="WEB_WORKER",l[l.NODE_WORKER=2]="NODE_WORKER",l[l.BINDINGS=3]="BINDINGS",l[l.ASYNC_DUCKDB=4]="ASYNC_DUCKDB",l))(ol||{}),La=class{log(t){}},Fa=class{constructor(t=2){this.level=t}log(t){t.level>=this.level&&console.log(t)}};function ap(r){switch(r){case 0:return"NONE";case 1:return"DEBUG";case 2:return"INFO";case 3:return"WARNING";case 4:return"ERROR";default:return"?"}}function op(r){switch(r){case 0:return"NONE";case 1:return"OK";case 2:return"ERROR";case 3:return"START";case 4:return"RUN";case 5:return"CAPTURE";default:return"?"}}function up(r){switch(r){case 1:return"CONNECT";case 2:return"DISCONNECT";case 5:return"INSTANTIATE";case 3:return"OPEN";case 4:return"QUERY";default:return"?"}}function lp(r){switch(r){case 0:return"NONE";case 1:return"WEB WORKER";case 2:return"NODE WORKER";case 3:return"DUCKDB BINDINGS";case 4:return"DUCKDB";default:return"?"}}var ul=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),ll=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11]));var cl=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11]));var _l=()=>(async r=>{try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(r)}catch{return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]));var Pn={name:"@duckdb/duckdb-wasm",version:"1.11.0",description:"DuckDB powered by WebAssembly",license:"MIT",repository:{type:"git",url:"https://github.com/duckdb/duckdb-wasm.git"},keywords:["sql","duckdb","relational","database","data","query","wasm","analytics","olap","arrow","parquet","json","csv"],dependencies:{"apache-arrow":"^11.0.0"},devDependencies:{"@types/emscripten":"^1.39.6","@types/jasmine":"^4.3.1","@typescript-eslint/eslint-plugin":"^5.53.0","@typescript-eslint/parser":"^5.49.0",esbuild:"^0.15.12",eslint:"^8.35.0","eslint-plugin-jasmine":"^4.1.3","eslint-plugin-react":"^7.32.2","fast-glob":"^3.2.12",jasmine:"^4.5.0","jasmine-core":"^5.0.0","jasmine-spec-reporter":"^7.0.0","js-sha256":"^0.9.0",karma:"^6.4.2","karma-chrome-launcher":"^3.1.1","karma-coverage":"^2.2.0","karma-firefox-launcher":"^2.1.2","karma-jasmine":"^5.1.0","karma-jasmine-html-reporter":"^2.0.0","karma-sourcemap-loader":"^0.3.8","karma-spec-reporter":"^0.0.36","make-dir":"^3.1.0",nyc:"^15.1.0",prettier:"^2.8.4",puppeteer:"^19.10.0",rimraf:"^4.3.0",s3rver:"^3.7.1",typedoc:"^0.24.8",typescript:"^4.8.4","wasm-feature-detect":"^1.5.1","web-worker":"^1.2.0"},scripts:{"build:debug":"node bundle.mjs debug && tsc --emitDeclarationOnly","build:release":"node bundle.mjs release && tsc --emitDeclarationOnly",docs:"typedoc",report:"node ./coverage.mjs","test:node":"node --enable-source-maps --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:node:debug":"node --inspect-brk --enable-source-maps --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:node:coverage":"nyc -r json --report-dir ./coverage/node node --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:firefox":"karma start ./karma/tests-firefox.cjs","test:chrome":"karma start ./karma/tests-chrome.cjs","test:chrome:eh":"karma start ./karma/tests-chrome-eh.cjs","test:chrome:coverage":"karma start ./karma/tests-chrome-coverage.cjs","test:browser":"karma start ./karma/tests-all.cjs","test:browser:debug":"karma start ./karma/tests-debug.cjs",test:"npm run test:chrome && npm run test:node","test:coverage":"npm run test:chrome:coverage && npm run test:node:coverage && npm run report",lint:"eslint src test"},files:["dist","!dist/types/test"],main:"dist/duckdb-browser.cjs",module:"dist/duckdb-browser.mjs",types:"dist/duckdb-browser.d.ts",jsdelivr:"dist/duckdb-browser.cjs",unpkg:"dist/duckdb-browser.mjs",sideEffects:!1,browser:{fs:!1,path:!1,perf_hooks:!1,os:!1,worker_threads:!1},exports:{"./dist/duckdb-mvp.wasm":"./dist/duckdb-mvp.wasm","./dist/duckdb-eh.wasm":"./dist/duckdb-eh.wasm","./dist/duckdb-coi.wasm":"./dist/duckdb-coi.wasm","./dist/duckdb-browser":"./dist/duckdb-browser.mjs","./dist/duckdb-browser.cjs":"./dist/duckdb-browser.cjs","./dist/duckdb-browser.mjs":"./dist/duckdb-browser.mjs","./dist/duckdb-browser-blocking":"./dist/duckdb-browser-blocking.mjs","./dist/duckdb-browser-blocking.mjs":"./dist/duckdb-browser-blocking.mjs","./dist/duckdb-browser-blocking.cjs":"./dist/duckdb-browser-blocking.cjs","./dist/duckdb-browser-coi.pthread.worker.js":"./dist/duckdb-browser-coi.pthread.worker.js","./dist/duckdb-browser-coi.worker.js":"./dist/duckdb-browser-coi.worker.js","./dist/duckdb-browser-eh.worker.js":"./dist/duckdb-browser-eh.worker.js","./dist/duckdb-browser-mvp.worker.js":"./dist/duckdb-browser-mvp.worker.js","./dist/duckdb-node":"./dist/duckdb-node.cjs","./dist/duckdb-node.cjs":"./dist/duckdb-node.cjs","./dist/duckdb-node-blocking":"./dist/duckdb-node-blocking.cjs","./dist/duckdb-node-blocking.cjs":"./dist/duckdb-node-blocking.cjs","./dist/duckdb-node-eh.worker.cjs":"./dist/duckdb-node-eh.worker.cjs","./dist/duckdb-node-mvp.worker.cjs":"./dist/duckdb-node-mvp.worker.cjs","./blocking":{browser:{types:"./dist/duckdb-browser-blocking.d.ts",import:"./dist/duckdb-browser-blocking.mjs",require:"./dist/duckdb-browser-blocking.cjs"},node:{types:"./dist/duckdb-node-blocking.d.ts",require:"./dist/duckdb-node-blocking.cjs",import:"./dist/duckdb-node-blocking.cjs"},types:"./dist/duckdb-browser-blocking.d.ts",import:"./dist/duckdb-browser-blocking.mjs",require:"./dist/duckdb-browser-blocking.cjs"},".":{browser:{types:"./dist/duckdb-browser.d.ts",import:"./dist/duckdb-browser.mjs",require:"./dist/duckdb-browser.cjs"},node:{types:"./dist/duckdb-node.d.ts",import:"./dist/duckdb-node.cjs",require:"./dist/duckdb-node.cjs"},types:"./dist/duckdb-browser.d.ts",import:"./dist/duckdb-browser.mjs",require:"./dist/duckdb-browser.cjs"}}};var Ia=Pn.name,Oa=Pn.version,Pa=Pn.version.split("."),dp=Pa[0],fp=Pa[1],pp=Pa[2];var Wa=()=>typeof navigator>"u",dl=()=>Wa()?"node":navigator.userAgent,mp=()=>dl().includes("Firefox"),bp=()=>/^((?!chrome|android).)*safari/i.test(dl());function hp(){let r=`https://cdn.jsdelivr.net/npm/${Ia}@${Oa}/dist/`;return{mvp:{mainModule:`${r}duckdb-mvp.wasm`,mainWorker:`${r}duckdb-browser-mvp.worker.js`},eh:{mainModule:`${r}duckdb-eh.wasm`,mainWorker:`${r}duckdb-browser-eh.worker.js`}}}var xa=null,Na=null,Ua=null,Ba=null,Ha=null;async function xn(){return xa==null&&(xa=typeof BigInt64Array<"u"),Na==null&&(Na=await ll()),Ua==null&&(Ua=await _l()),Ba==null&&(Ba=await cl()),Ha==null&&(Ha=await ul()),{bigInt64Array:xa,crossOriginIsolated:Wa()||globalThis.crossOriginIsolated||!1,wasmExceptions:Na,wasmSIMD:Ba,wasmThreads:Ua,wasmBulkMemory:Ha}}async function gp(r){let t=await xn();if(t.wasmExceptions){if(t.wasmSIMD&&t.wasmThreads&&t.crossOriginIsolated&&r.coi)return{mainModule:r.coi.mainModule,mainWorker:r.coi.mainWorker,pthreadWorker:r.coi.pthreadWorker};if(r.eh)return{mainModule:r.eh.mainModule,mainWorker:r.eh.mainWorker,pthreadWorker:null}}return{mainModule:r.mvp.mainModule,mainWorker:r.mvp.mainWorker,pthreadWorker:null}}var He=$t(require("fs"));var td=$t(ed());var je={_files:new Map,_filesById:new Map,_fileInfoCache:new Map,_udfFunctions:new Map,resolveFileInfo(r,t){try{let e=je._fileInfoCache.get(t),[n,a,l]=ye(r,"duckdb_web_fs_get_file_info_by_id",["number","number"],[t,(e==null?void 0:e.cacheEpoch)||0]);if(n!==0)return Ae(r,_e(r,a,l)),null;if(l===0)return ke(r),e;let c=_e(r,a,l);ke(r);let m=JSON.parse(c);return m==null?null:(je._fileInfoCache.set(t,m),m)}catch(e){return Ae(r,e.toString()),null}},testPlatformFeature:(r,t)=>{switch(t){case 1:return typeof BigInt64Array<"u";default:return console.warn(`test for unknown feature: ${t}`),!1}},getDefaultDataProtocol(r){return 1},openFile(r,t,e){var n,a;try{je._fileInfoCache.delete(t);let l=je.resolveFileInfo(r,t);switch(l==null?void 0:l.dataProtocol){case 1:{let c=(n=je._files)==null?void 0:n.get(l.dataUrl);c==null&&(c=He.default.openSync(l.dataUrl,He.default.constants.O_CREAT|He.default.constants.O_RDWR,He.default.constants.S_IRUSR|He.default.constants.S_IWUSR),(a=je._filesById)==null||a.set(l.fileId,c));let m=He.default.fstatSync(c).size,g=r._malloc(2*8);return r.HEAPF64[(g>>3)+0]=+m,r.HEAPF64[(g>>3)+1]=0,g}case 2:case 3:case 4:case 5:Ae(r,"Unsupported data protocol")}}catch(l){Ae(r,l.toString())}return 0},syncFile:(r,t)=>{},closeFile:(r,t)=>{try{let e=je._fileInfoCache.get(t);switch(je._fileInfoCache.delete(t),e==null?void 0:e.dataProtocol){case 1:{let n=je._filesById.get(t);je._filesById.delete(t),n!=null&&He.default.closeSync(n);break}case 2:case 3:case 4:case 5:break}}catch(e){Ae(r,e.toString())}return 0},truncateFile:(r,t,e)=>{try{let n=je.resolveFileInfo(r,t);switch(n==null?void 0:n.dataProtocol){case 1:{He.default.truncateSync(n.dataUrl,e);break}case 2:case 3:case 4:case 5:Ae(r,"Unsupported data protocol")}}catch(n){Ae(r,n.toString())}return 0},readFile:(r,t,e,n,a)=>{try{let l=je.resolveFileInfo(r,t);switch(l==null?void 0:l.dataProtocol){case 1:{let c=je._filesById.get(t);return c==null?(Ae(r,`File ${t} is missing a file descriptor`),0):He.default.readSync(c,r.HEAPU8,e,n,a)}case 2:case 3:case 4:case 5:Ae(r,"Unsupported data protocol")}}catch(l){Ae(r,l.toString())}return 0},writeFile:(r,t,e,n,a)=>{try{let l=je.resolveFileInfo(r,t);switch(l==null?void 0:l.dataProtocol){case 1:{let c=je._filesById.get(t);if(c==null)return Ae(r,`File ${t} is missing a file descriptor`),0;let m=r.HEAPU8.subarray(e,e+n);return He.default.writeSync(c,m,0,m.length,a)}case 2:case 3:case 4:case 5:Ae(r,"Unsupported data protocol")}}catch(l){Ae(r,l.toString())}return 0},getLastFileModificationTime:(r,t)=>{try{let e=je.resolveFileInfo(r,t);switch(e==null?void 0:e.dataProtocol){case 1:{let n=je._filesById.get(t);return n==null?(Ae(r,`File ${t} is missing a file descriptor`),0):He.default.fstatSync(n).mtime.getTime()}case 2:case 3:case 4:case 5:Ae(r,"Unsupported data protocol")}}catch(e){Ae(r,e.toString())}return 0},checkDirectory:(r,t,e)=>{try{let n=jt(r.HEAPU8.subarray(t,t+e));return He.default.existsSync(n)}catch(n){return Ae(r,n.toString()),!1}},createDirectory:(r,t,e)=>{try{let n=jt(r.HEAPU8.subarray(t,t+e));return He.default.mkdirSync(n)}catch(n){return Ae(r,n.toString()),0}},removeDirectory:(r,t,e)=>{try{let n=jt(r.HEAPU8.subarray(t,t+e));return He.default.rmdirSync(n)}catch(n){return Ae(r,n.toString()),0}},listDirectoryEntries:(r,t,e)=>(Ae(r,"Not Implemented"),!1),glob:(r,t,e)=>{try{let n=_e(r,t,e),a=td.sync([n],{dot:!0});for(let l of a)r.ccall("duckdb_web_fs_glob_add_path",null,["string"],[l])}catch(n){return Ae(r,n.toString()),0}},moveFile:(r,t,e,n,a)=>{var g,D;let l=_e(r,t,e),c=_e(r,n,a),m=(g=je._files)==null?void 0:g.get(l);m!==void 0&&(je._files.delete(m),je._files.set(c,m));for(let[y,I]of((D=je._fileInfoCache)==null?void 0:D.entries())||[])if(I.dataUrl==l){je._fileInfoCache.delete(y);break}return!0},checkFile:(r,t,e)=>{try{let n=jt(r.HEAPU8.subarray(t,t+e));return He.default.existsSync(n)}catch(n){return Ae(r,n.toString()),!1}},removeFile:(r,t,e)=>{try{let n=jt(r.HEAPU8.subarray(t,t+e));return He.default.rmSync(n)}catch(n){return Ae(r,n.toString()),0}},callScalarUDF:(r,t,e,n,a,l,c)=>{Fn(je,r,t,e,n,a,l,c)}};var di={},wg=(()=>{var r=di.url;return async function(t={}){var e=typeof t<"u"?t:{},n,a;e.ready=new Promise((s,u)=>{n=s,a=u}),["_main","_malloc","_free","_duckdb_web_clear_response","_duckdb_web_collect_file_stats","_duckdb_web_connect","_duckdb_web_copy_file_to_buffer","_duckdb_web_copy_file_to_path","_duckdb_web_disconnect","_duckdb_web_export_file_stats","_duckdb_web_fail_with","_duckdb_web_flush_file","_duckdb_web_flush_files","_duckdb_web_fs_drop_file","_duckdb_web_fs_drop_files","_duckdb_web_fs_get_file_info_by_id","_duckdb_web_fs_get_file_info_by_name","_duckdb_web_fs_glob_add_path","_duckdb_web_fs_glob_file_infos","_duckdb_web_fs_register_file_buffer","_duckdb_web_fs_register_file_url","_duckdb_web_get_feature_flags","_duckdb_web_get_global_file_info","_duckdb_web_get_tablenames","_duckdb_web_get_version","_duckdb_web_insert_arrow_from_ipc_stream","_duckdb_web_insert_csv_from_path","_duckdb_web_insert_json_from_path","_duckdb_web_open","_duckdb_web_pending_query_cancel","_duckdb_web_pending_query_poll","_duckdb_web_pending_query_start","_duckdb_web_prepared_close","_duckdb_web_prepared_create","_duckdb_web_prepared_run","_duckdb_web_prepared_send","_duckdb_web_query_fetch_results","_duckdb_web_query_run","_duckdb_web_reset","_duckdb_web_tokenize","_duckdb_web_udf_scalar_create","_fflush","onRuntimeInitialized"].forEach(s=>{Object.getOwnPropertyDescriptor(e.ready,s)||Object.defineProperty(e.ready,s,{get:()=>w("You are getting "+s+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"),set:()=>w("You are setting "+s+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")})});var l=Object.assign({},e),c=[],m="./this.program",g=(s,u)=>{throw u},D=typeof window=="object",y=typeof importScripts=="function",I=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",A=!D&&!I&&!y;if(e.ENVIRONMENT)throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");var z="";function H(s){return e.locateFile?e.locateFile(s,z):z+s}var W,J,X,me;if(I){if(typeof process>"u"||!process.release||process.release.name!=="node")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");var fe=process.versions.node,Se=fe.split(".").slice(0,3);Se=Se[0]*1e4+Se[1]*100+Se[2].split("-")[0]*1;var ie=101900;if(Se<101900)throw new Error("This emscripten-generated code requires node v10.19.19.0 (detected v"+fe+")");let{createRequire:s}=await import("module");var le=s(di.url),te=le("fs"),Q=le("path");y?z=Q.dirname(z)+"/":z=le("url").fileURLToPath(new URL("./",di.url)),W=(u,d)=>(u=xt(u)?new URL(u):Q.normalize(u),te.readFileSync(u,d?void 0:"utf8")),X=u=>{var d=W(u,!0);return d.buffer||(d=new Uint8Array(d)),R(d.buffer),d},J=(u,d,h,F=!0)=>{u=xt(u)?new URL(u):Q.normalize(u),te.readFile(u,F?void 0:"utf8",(G,M)=>{G?h(G):d(F?M.buffer:M)})},!e.thisProgram&&process.argv.length>1&&(m=process.argv[1].replace(/\\/g,"/")),c=process.argv.slice(2),g=(u,d)=>{throw process.exitCode=u,d},e.inspect=()=>"[Emscripten Module object]"}else if(A){if(typeof process=="object"&&typeof le=="function"||typeof window=="object"||typeof importScripts=="function")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");typeof read<"u"&&(W=s=>read(s)),X=s=>{let u;return typeof readbuffer=="function"?new Uint8Array(readbuffer(s)):(u=read(s,"binary"),R(typeof u=="object"),u)},J=(s,u,d)=>{setTimeout(()=>u(X(s)),0)},typeof clearTimeout>"u"&&(globalThis.clearTimeout=s=>{}),typeof scriptArgs<"u"?c=scriptArgs:typeof arguments<"u"&&(c=arguments),typeof quit=="function"&&(g=(s,u)=>{throw setTimeout(()=>{if(!(u instanceof Nt)){let d=u;u&&typeof u=="object"&&u.stack&&(d=[u,u.stack]),S(`exiting due to exception: ${d}`)}quit(s)}),u}),typeof print<"u"&&(typeof console>"u"&&(console={}),console.log=print,console.warn=console.error=typeof printErr<"u"?printErr:print)}else if(D||y){if(y?z=self.location.href:typeof document<"u"&&document.currentScript&&(z=document.currentScript.src),r&&(z=r),z.indexOf("blob:")!==0?z=z.substr(0,z.replace(/[?#].*/,"").lastIndexOf("/")+1):z="",!(typeof window=="object"||typeof importScripts=="function"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");W=s=>{var u=new XMLHttpRequest;return u.open("GET",s,!1),u.send(null),u.responseText},y&&(X=s=>{var u=new XMLHttpRequest;return u.open("GET",s,!1),u.responseType="arraybuffer",u.send(null),new Uint8Array(u.response)}),J=(s,u,d)=>{var h=new XMLHttpRequest;h.open("GET",s,!0),h.responseType="arraybuffer",h.onload=()=>{if(h.status==200||h.status==0&&h.response){u(h.response);return}d()},h.onerror=d,h.send(null)},me=s=>document.title=s}else throw new Error("environment detection error");var Y=e.print||console.log.bind(console),S=e.printErr||console.error.bind(console);Object.assign(e,l),l=null,va(),e.arguments&&(c=e.arguments),xe("arguments","arguments_"),e.thisProgram&&(m=e.thisProgram),xe("thisProgram","thisProgram"),e.quit&&(g=e.quit),xe("quit","quit_"),R(typeof e.memoryInitializerPrefixURL>"u","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"),R(typeof e.pthreadMainPrefixURL>"u","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"),R(typeof e.cdInitializerPrefixURL>"u","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"),R(typeof e.filePackagePrefixURL>"u","Module.filePackagePrefixURL option was removed, use Module.locateFile instead"),R(typeof e.read>"u","Module.read option was removed (modify read_ in JS)"),R(typeof e.readAsync>"u","Module.readAsync option was removed (modify readAsync in JS)"),R(typeof e.readBinary>"u","Module.readBinary option was removed (modify readBinary in JS)"),R(typeof e.setWindowTitle>"u","Module.setWindowTitle option was removed (modify setWindowTitle in JS)"),R(typeof e.TOTAL_MEMORY>"u","Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"),xe("read","read_"),xe("readAsync","readAsync"),xe("readBinary","readBinary"),xe("setWindowTitle","setWindowTitle");var T="IDBFS is no longer included by default; build with -lidbfs.js",ce="PROXYFS is no longer included by default; build with -lproxyfs.js",oe="WORKERFS is no longer included by default; build with -lworkerfs.js",Ce="NODEFS is no longer included by default; build with -lnodefs.js";R(!A,"shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");var v;e.wasmBinary&&(v=e.wasmBinary),xe("wasmBinary","wasmBinary");var k=e.noExitRuntime||!0;xe("noExitRuntime","noExitRuntime"),typeof WebAssembly!="object"&&w("no native wasm support detected");var be,re=!1,Oe;function R(s,u){s||w("Assertion failed"+(u?": "+u:""))}var Ye,Ee,Fe,Le,Je,b,$,ht,B;function he(){var s=be.buffer;e.HEAP8=Ee=new Int8Array(s),e.HEAP16=Le=new Int16Array(s),e.HEAP32=b=new Int32Array(s),e.HEAPU8=Fe=new Uint8Array(s),e.HEAPU16=Je=new Uint16Array(s),e.HEAPU32=$=new Uint32Array(s),e.HEAPF32=ht=new Float32Array(s),e.HEAPF64=B=new Float64Array(s)}R(!e.STACK_SIZE,"STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time"),R(typeof Int32Array<"u"&&typeof Float64Array<"u"&&Int32Array.prototype.subarray!=null&&Int32Array.prototype.set!=null,"JS engine does not provide full typed array support"),R(!e.wasmMemory,"Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally"),R(!e.INITIAL_MEMORY,"Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically");var N;function ue(){var s=Gt();R((s&3)==0),s==0&&(s+=4),$[s>>>2]=34821223,$[s+4>>>2]=2310721022,$[0]=1668509029}function pe(){if(!re){var s=Gt();s==0&&(s+=4);var u=$[s>>>2],d=$[s+4>>>2];(u!=34821223||d!=2310721022)&&w(`Stack overflow! Stack cookie has been overwritten at ${vt(s)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${vt(d)} ${vt(u)}`),$[0]!=1668509029&&w("Runtime error: The application has corrupted its heap memory area (address zero)!")}}(function(){var s=new Int16Array(1),u=new Int8Array(s.buffer);if(s[0]=25459,u[0]!==115||u[1]!==99)throw"Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)"})();var Me=[],Te=[],gt=[],Jt=[],wr=[],Tt=!1,Sr=0;function Er(){return k||Sr>0}function hi(){if(e.preRun)for(typeof e.preRun=="function"&&(e.preRun=[e.preRun]);e.preRun.length;)wi(e.preRun.shift());yt(Me)}function gi(){R(!Tt),Tt=!0,pe(),yt(Te)}function yi(){pe(),yt(gt)}function vi(){if(pe(),e.postRun)for(typeof e.postRun=="function"&&(e.postRun=[e.postRun]);e.postRun.length;)Ei(e.postRun.shift());yt(wr)}function wi(s){Me.unshift(s)}function Si(s){Te.unshift(s)}function id(s){gt.unshift(s)}function sd(s){}function Ei(s){wr.unshift(s)}R(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),R(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),R(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),R(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var Be=0,$e=null,ot=null,Ze={};function ad(s){for(var u=s;;){if(!Ze[s])return s;s=u+Math.random()}}function ki(s){Be++,e.monitorRunDependencies&&e.monitorRunDependencies(Be),s?(R(!Ze[s]),Ze[s]=1,$e===null&&typeof setInterval<"u"&&($e=setInterval(()=>{if(re){clearInterval($e),$e=null;return}var u=!1;for(var d in Ze)u||(u=!0,S("still waiting on run dependencies:")),S("dependency: "+d);u&&S("(end of list)")},1e4))):S("warning: run dependency added without ID")}function Ci(s){if(Be--,e.monitorRunDependencies&&e.monitorRunDependencies(Be),s?(R(Ze[s]),delete Ze[s]):S("warning: run dependency removed without ID"),Be==0&&($e!==null&&(clearInterval($e),$e=null),ot)){var u=ot;ot=null,u()}}function w(s){e.onAbort&&e.onAbort(s),s="Aborted("+s+")",S(s),re=!0,Oe=1;var u=new WebAssembly.RuntimeError(s);throw a(u),u}var Ti="data:application/octet-stream;base64,";function kr(s){return s.startsWith(Ti)}function xt(s){return s.startsWith("file://")}function f(s,u){return function(){var d=s,h=u;return u||(h=e.asm),R(Tt,"native function `"+d+"` called before runtime initialization"),h[s]||R(h[s],"exported native function `"+d+"` not found"),h[s].apply(null,arguments)}}var Pe;e.locateFile?(Pe="./duckdb-mvp.wasm",kr(Pe)||(Pe=H(Pe))):Pe=new URL("./duckdb-mvp.wasm",di.url).href;function Cr(s){try{if(s==Pe&&v)return new Uint8Array(v);if(X)return X(s);throw"both async and sync fetching of the wasm failed"}catch(u){w(u)}}function Ri(s){return!v&&(D||y)&&typeof fetch=="function"?fetch(s,{credentials:"same-origin"}).then(u=>{if(!u.ok)throw"failed to load wasm binary file at '"+s+"'";return u.arrayBuffer()}).catch(()=>Cr(s)):Promise.resolve().then(()=>Cr(s))}function Tr(s,u,d){return Ri(s).then(h=>WebAssembly.instantiate(h,u)).then(h=>h).then(d,h=>{S("failed to asynchronously prepare wasm: "+h),xt(Pe)&&S("warning: Loading from a file URI ("+Pe+") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing"),w(h)})}function Ai(s,u,d,h){return!s&&typeof WebAssembly.instantiateStreaming=="function"&&!kr(u)&&!I&&typeof fetch=="function"?fetch(u,{credentials:"same-origin"}).then(F=>{var G=WebAssembly.instantiateStreaming(F,d);return G.then(h,function(M){return S("wasm streaming compile failed: "+M),S("falling back to ArrayBuffer instantiation"),Tr(u,d,h)})}):Tr(u,d,h)}function ji(){var s={env:Sn,wasi_snapshot_preview1:Sn};function u(F,G){var M=F.exports;return e.asm=M,be=e.asm.memory,R(be,"memory not found in wasm exports"),he(),N=e.asm.__indirect_function_table,R(N,"table not found in wasm exports"),Si(e.asm.__wasm_call_ctors),Ci("wasm-instantiate"),M}ki("wasm-instantiate");var d=e;function h(F){R(e===d,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"),d=null,u(F.instance)}if(e.instantiateWasm)try{return e.instantiateWasm(s,u)}catch(F){S("Module.instantiateWasm callback failed with error: "+F),a(F)}return Ai(v,Pe,s,h).catch(a),{}}var Re,et;function xe(s,u){Object.getOwnPropertyDescriptor(e,s)||Object.defineProperty(e,s,{configurable:!0,get:function(){w("Module."+s+" has been replaced with plain "+u+" (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}})}function Di(s){Object.getOwnPropertyDescriptor(e,s)&&w("`Module."+s+"` was supplied but `"+s+"` not included in INCOMING_MODULE_JS_API")}function Rr(s){return s==="FS_createPath"||s==="FS_createDataFile"||s==="FS_createPreloadedFile"||s==="FS_unlink"||s==="addRunDependency"||s==="FS_createLazyFile"||s==="FS_createDevice"||s==="removeRunDependency"}function Mi(s,u){typeof globalThis<"u"&&Object.defineProperty(globalThis,s,{configurable:!0,get:function(){nt("`"+s+"` is not longer defined by emscripten. "+u)}})}Mi("buffer","Please use HEAP8.buffer or wasmMemory.buffer");function Li(s){typeof globalThis<"u"&&!Object.getOwnPropertyDescriptor(globalThis,s)&&Object.defineProperty(globalThis,s,{configurable:!0,get:function(){var u="`"+s+"` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line",d=s;d.startsWith("_")||(d="$"+s),u+=" (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE="+d+")",Rr(s)&&(u+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),nt(u)}}),Ar(s)}function Ar(s){Object.getOwnPropertyDescriptor(e,s)||Object.defineProperty(e,s,{configurable:!0,get:function(){var u="'"+s+"' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";Rr(s)&&(u+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),w(u)}})}function od(s){console.warn.apply(console,arguments)}function Nt(s){this.name="ExitStatus",this.message=`Program terminated with exit(${s})`,this.status=s}function yt(s){for(;s.length>0;)s.shift()(e)}function Fi(s,u="i8"){switch(u.endsWith("*")&&(u="*"),u){case"i1":return Ee[s>>>0];case"i8":return Ee[s>>>0];case"i16":return Le[s>>>1];case"i32":return b[s>>>2];case"i64":w("to do getValue(i64) use WASM_BIGINT");case"float":return ht[s>>>2];case"double":return B[s>>>3];case"*":return $[s>>>2];default:w(`invalid type for getValue: ${u}`)}}function vt(s){return R(typeof s=="number"),"0x"+s.toString(16).padStart(8,"0")}function ud(s,u,d="i8"){switch(d.endsWith("*")&&(d="*"),d){case"i1":Ee[s>>>0]=u;break;case"i8":Ee[s>>>0]=u;break;case"i16":Le[s>>>1]=u;break;case"i32":b[s>>>2]=u;break;case"i64":w("to do setValue(i64) use WASM_BIGINT");case"float":ht[s>>>2]=u;break;case"double":B[s>>>3]=u;break;case"*":$[s>>>2]=u;break;default:w(`invalid type for setValue: ${d}`)}}function nt(s){nt.shown||(nt.shown={}),nt.shown[s]||(nt.shown[s]=1,I&&(s="warning: "+s),S(s))}function Jr(){S("missing function: XML_GetBuffer"),w(-1)}function Zr(){S("missing function: XML_GetErrorCode"),w(-1)}function Ve(){S("missing function: XML_Parse"),w(-1)}function Ii(){S("missing function: XML_ParseBuffer"),w(-1)}function en(){S("missing function: XML_ParserCreate"),w(-1)}function ku(){S("missing function: XML_ParserFree"),w(-1)}function Cu(){S("missing function: XML_ResumeParser"),w(-1)}function Ut(){S("missing function: XML_SetCharacterDataHandler"),w(-1)}function Tu(){S("missing function: XML_SetElementHandler"),w(-1)}function it(){S("missing function: XML_SetUserData"),w(-1)}function Oi(){S("missing function: XML_StopParser"),w(-1)}function Pi(s){this.excPtr=s,this.ptr=s-24,this.set_type=function(u){$[this.ptr+4>>>2]=u},this.get_type=function(){return $[this.ptr+4>>>2]},this.set_destructor=function(u){$[this.ptr+8>>>2]=u},this.get_destructor=function(){return $[this.ptr+8>>>2]},this.set_caught=function(u){u=u?1:0,Ee[this.ptr+12>>>0]=u},this.get_caught=function(){return Ee[this.ptr+12>>>0]!=0},this.set_rethrown=function(u){u=u?1:0,Ee[this.ptr+13>>>0]=u},this.get_rethrown=function(){return Ee[this.ptr+13>>>0]!=0},this.init=function(u,d){this.set_adjusted_ptr(0),this.set_type(u),this.set_destructor(d)},this.set_adjusted_ptr=function(u){$[this.ptr+16>>>2]=u},this.get_adjusted_ptr=function(){return $[this.ptr+16>>>2]},this.get_exception_ptr=function(){var u=ka(this.get_type());if(u)return $[this.excPtr>>>2];var d=this.get_adjusted_ptr();return d!==0?d:this.excPtr}}var xi=0,Ni=0;function Ui(s,u,d){var h=new Pi(s);h.init(u,d),xi=s,Ni++,R(!1,"Exception thrown, but exception catching is not enabled. Compile with -sNO_DISABLE_EXCEPTION_CATCHING or -sEXCEPTION_CATCHING_ALLOWED=[..] to catch.")}var tn="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function Bi(s,u,d){w(tn)}var rn=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function nn(s,u,d){u>>>=0;for(var h=u+d,F=u;s[F]&&!(F>=h);)++F;if(F-u>16&&s.buffer&&rn)return rn.decode(s.subarray(u,F));for(var G="";u<F;){var M=s[u++];if(!(M&128)){G+=String.fromCharCode(M);continue}var U=s[u++]&63;if((M&224)==192){G+=String.fromCharCode((M&31)<<6|U);continue}var ee=s[u++]&63;if((M&240)==224?M=(M&15)<<12|U<<6|ee:((M&248)!=240&&nt("Invalid UTF-8 leading byte "+vt(M)+" encountered when deserializing a UTF-8 string in wasm memory to a JS string!"),M=(M&7)<<18|U<<12|ee<<6|s[u++]&63),M<65536)G+=String.fromCharCode(M);else{var i=M-65536;G+=String.fromCharCode(55296|i>>10,56320|i&1023)}}return G}function wt(s,u){return R(typeof s=="number"),s>>>=0,s?nn(Fe,s,u):""}var lt={varargs:void 0,get:function(){R(lt.varargs!=null),lt.varargs+=4;var s=b[lt.varargs-4>>>2];return s},getStr:function(s){var u=wt(s);return u}};function Hi(s,u,d,h,F){R(s<=64,"nfds must be less than or equal to 64"),R(!h,"exceptfds not supported");for(var G=0,M=u?b[u>>>2]:0,U=u?b[u+4>>>2]:0,ee=d?b[d>>>2]:0,i=d?b[d+4>>>2]:0,o=h?b[h>>>2]:0,_=h?b[h+4>>>2]:0,p=0,j=0,L=0,C=0,O=0,K=0,E=(u?b[u>>>2]:0)|(d?b[d>>>2]:0)|(h?b[h>>>2]:0),P=(u?b[u+4>>>2]:0)|(d?b[d+4>>>2]:0)|(h?b[h+4>>>2]:0),se=function(ct,ut,x,Z){return ct<32?ut&Z:x&Z},V=0;V<s;V++){var ge=1<<V%32;if(!!se(V,E,P,ge)){var ae=lt.getStreamFromFD(V),we=lt.DEFAULT_POLLMASK;ae.stream_ops.poll&&(we=ae.stream_ops.poll(ae)),we&1&&se(V,M,U,ge)&&(V<32?p=p|ge:j=j|ge,G++),we&4&&se(V,ee,i,ge)&&(V<32?L=L|ge:C=C|ge,G++),we&2&&se(V,o,_,ge)&&(V<32?O=O|ge:K=K|ge,G++)}}return u&&(b[u>>>2]=p,b[u+4>>>2]=j),d&&(b[d>>>2]=L,b[d+4>>>2]=C),h&&(b[h>>>2]=O,b[h+4>>>2]=K),G}function sn(){S("missing function: $SOCKFS"),w(-1)}function an(){S("missing function: $FS"),w(-1)}function Ke(s){var u=sn.getSocket(s);if(!u)throw new an.ErrnoError(8);return u}function Ru(s){return b[Ou()>>>2]=s,s}var Au={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};function Zt(s){return(s&255)+"."+(s>>8&255)+"."+(s>>16&255)+"."+(s>>24&255)}function Rt(s){var u="",d=0,h=0,F=0,G=0,M=0,U=0,ee=[s[0]&65535,s[0]>>16,s[1]&65535,s[1]>>16,s[2]&65535,s[2]>>16,s[3]&65535,s[3]>>16],i=!0,o="";for(U=0;U<5;U++)if(ee[U]!==0){i=!1;break}if(i){if(o=Zt(ee[6]|ee[7]<<16),ee[5]===-1)return u="::ffff:",u+=o,u;if(ee[5]===0)return u="::",o==="0.0.0.0"&&(o=""),o==="0.0.0.1"&&(o="1"),u+=o,u}for(d=0;d<8;d++)ee[d]===0&&(d-F>1&&(M=0),F=d,M++),M>h&&(h=M,G=d-h+1);for(d=0;d<8;d++){if(h>1&&ee[d]===0&&d>=G&&d<G+h){d===G&&(u+=":",G===0&&(u+=":"));continue}u+=Number(Ea(ee[d]&65535)).toString(16),u+=d<7?":":""}return u}function Wi(s,u){var d=Le[s>>>1],h=Ea(Je[s+2>>>1]),F;switch(d){case 2:if(u!==16)return{errno:28};F=b[s+4>>>2],F=Zt(F);break;case 10:if(u!==28)return{errno:28};F=[b[s+8>>>2],b[s+12>>>2],b[s+16>>>2],b[s+20>>>2]],F=Rt(F);break;default:return{errno:5}}return{family:d,addr:F,port:h}}function jr(s){for(var u=s.split("."),d=0;d<4;d++){var h=Number(u[d]);if(isNaN(h))return null;u[d]=h}return(u[0]|u[1]<<8|u[2]<<16|u[3]<<24)>>>0}function At(s){return parseInt(s)}function er(s){var u,d,h,F,G,M=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,U=[];if(!M.test(s))return null;if(s==="::")return[0,0,0,0,0,0,0,0];for(s.startsWith("::")?s=s.replace("::","Z:"):s=s.replace("::",":Z:"),s.indexOf(".")>0?(s=s.replace(new RegExp("[.]","g"),":"),u=s.split(":"),u[u.length-4]=At(u[u.length-4])+At(u[u.length-3])*256,u[u.length-3]=At(u[u.length-2])+At(u[u.length-1])*256,u=u.slice(0,u.length-2)):u=s.split(":"),h=0,F=0,d=0;d<u.length;d++)if(typeof u[d]=="string")if(u[d]==="Z"){for(F=0;F<8-u.length+1;F++)U[d+F]=0;h=F-1}else U[d+h]=kn(parseInt(u[d],16));else U[d+h]=u[d];return[U[1]<<16|U[0],U[3]<<16|U[2],U[5]<<16|U[4],U[7]<<16|U[6]]}var ze={address_map:{id:1,addrs:{},names:{}},lookup_name:function(s){var u=jr(s);if(u!==null||(u=er(s),u!==null))return s;var d;if(ze.address_map.addrs[s])d=ze.address_map.addrs[s];else{var h=ze.address_map.id++;R(h<65535,"exceeded max address mappings of 65535"),d="172.29."+(h&255)+"."+(h&65280),ze.address_map.names[d]=s,ze.address_map.addrs[s]=d}return d},lookup_addr:function(s){return ze.address_map.names[s]?ze.address_map.names[s]:null}};function Bt(s,u,d){if(d&&s===0)return null;var h=Wi(s,u);if(h.errno)throw new an.ErrnoError(h.errno);return h.addr=ze.lookup_addr(h.addr)||h.addr,h}function tr(s,u,d,h,F,G){var M=Ke(s),U=Bt(u,d);return M.sock_ops.bind(M,U.addr,U.port),0}function Dr(s,u,d,h,F,G){var M=Ke(s),U=Bt(u,d);return M.sock_ops.connect(M,U.addr,U.port),0}function Xe(s,u,d,h){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function on(s,u,d){return lt.varargs=d,0}function qi(s,u){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function ju(s,u){return R(s==s>>>0||s==(s|0)),R(u===(u|0)),u+2097152>>>0<4194305-!!s?(s>>>0)+u*4294967296:NaN}function Gi(s,u,d){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function un(s,u,d,h){if(d>>>=0,R(typeof s=="string"),!(h>0))return 0;for(var F=d,G=d+h-1,M=0;M<s.length;++M){var U=s.charCodeAt(M);if(U>=55296&&U<=57343){var ee=s.charCodeAt(++M);U=65536+((U&1023)<<10)|ee&1023}if(U<=127){if(d>=G)break;u[d++>>>0]=U}else if(U<=2047){if(d+1>=G)break;u[d++>>>0]=192|U>>6,u[d++>>>0]=128|U&63}else if(U<=65535){if(d+2>=G)break;u[d++>>>0]=224|U>>12,u[d++>>>0]=128|U>>6&63,u[d++>>>0]=128|U&63}else{if(d+3>=G)break;U>1114111&&nt("Invalid Unicode code point "+vt(U)+" encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF)."),u[d++>>>0]=240|U>>18,u[d++>>>0]=128|U>>12&63,u[d++>>>0]=128|U>>6&63,u[d++>>>0]=128|U&63}}return u[d>>>0]=0,d-F}function rr(s,u,d){return R(typeof d=="number","stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),un(s,Fe,u,d)}function Du(s,u,d){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function ln(s,u){return Fe.fill(0,s,s+u),s}function nr(s,u,d,h,F){switch(u){case 2:d=jr(d),ln(s,16),F&&(b[F>>>2]=16),Le[s>>>1]=u,b[s+4>>>2]=d,Le[s+2>>>1]=kn(h);break;case 10:d=er(d),ln(s,28),F&&(b[F>>>2]=28),b[s>>>2]=u,b[s+8>>>2]=d[0],b[s+12>>>2]=d[1],b[s+16>>>2]=d[2],b[s+20>>>2]=d[3],Le[s+2>>>1]=kn(h);break;default:return 5}return 0}function ir(s,u,d,h,F,G){var M=Ke(s);if(!M.daddr)return-53;var U=nr(u,M.family,ze.lookup_name(M.daddr),M.dport,d);return R(!U),0}function Yi(s,u,d,h,F,G){var M=Ke(s);return u===1&&d===4?(b[h>>>2]=M.error,b[F>>>2]=4,M.error=null,0):-50}function cn(s,u,d){return lt.varargs=d,0}function Mr(s,u){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function $i(s,u,d){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function zi(s,u,d,h){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Vi(s,u,d,h){lt.varargs=h,w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Ki(s,u,d,h,F,G){var M=Ke(s),U=M.sock_ops.recvmsg(M,d);if(!U)return 0;if(F){var ee=nr(F,M.family,ze.lookup_name(U.addr),U.port,G);R(!ee)}return Fe.set(U.buffer,u>>>0),U.buffer.byteLength}function Xi(s,u,d,h){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Qi(s){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Ji(s,u,d,h,F,G){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Zi(s,u,d){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function es(s,u){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function ts(s,u,d){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}var rs=!0;function ns(){return rs}function is(s){return $[s>>>2]+b[s+4>>>2]*4294967296}function Ht(s){return s%4===0&&(s%100!==0||s%400===0)}var ss=[0,31,60,91,121,152,182,213,244,274,305,335],as=[0,31,59,90,120,151,181,212,243,273,304,334];function os(s){var u=Ht(s.getFullYear()),d=u?ss:as,h=d[s.getMonth()]+s.getDate()-1;return h}function us(s,u){var d=new Date(is(s)*1e3);b[u>>>2]=d.getSeconds(),b[u+4>>>2]=d.getMinutes(),b[u+8>>>2]=d.getHours(),b[u+12>>>2]=d.getDate(),b[u+16>>>2]=d.getMonth(),b[u+20>>>2]=d.getFullYear()-1900,b[u+24>>>2]=d.getDay();var h=os(d)|0;b[u+28>>>2]=h,b[u+36>>>2]=-(d.getTimezoneOffset()*60);var F=new Date(d.getFullYear(),0,1),G=new Date(d.getFullYear(),6,1).getTimezoneOffset(),M=F.getTimezoneOffset(),U=(G!=M&&d.getTimezoneOffset()==Math.min(M,G))|0;b[u+32>>>2]=U}function St(s){for(var u=0,d=0;d<s.length;++d){var h=s.charCodeAt(d);h<=127?u++:h<=2047?u+=2:h>=55296&&h<=57343?(u+=4,++d):u+=3}return u}function _n(s){var u=St(s)+1,d=Ur(u);return d&&rr(s,d,u),d}function ls(s,u,d){var h=new Date().getFullYear(),F=new Date(h,0,1),G=new Date(h,6,1),M=F.getTimezoneOffset(),U=G.getTimezoneOffset(),ee=Math.max(M,U);$[s>>>2]=ee*60,b[u>>>2]=Number(M!=U);function i(L){var C=L.toTimeString().match(/\(([A-Za-z ]+)\)$/);return C?C[1]:"GMT"}var o=i(F),_=i(G),p=_n(o),j=_n(_);U<M?($[d>>>2]=p,$[d+4>>>2]=j):($[d>>>2]=j,$[d+4>>>2]=p)}function cs(){w("native code called abort()")}function _s(s,u){w(tn)}function Lr(s,u){return globalThis.DUCKDB_RUNTIME.createDirectory(e,s,u)}function dn(s,u){return globalThis.DUCKDB_RUNTIME.checkDirectory(e,s,u)}function ds(s,u){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(e,s,u)}function fs(s,u){return globalThis.DUCKDB_RUNTIME.removeDirectory(e,s,u)}function ps(s){return globalThis.DUCKDB_RUNTIME.closeFile(e,s)}function ms(s,u){return globalThis.DUCKDB_RUNTIME.checkFile(e,s,u)}function bs(s){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(e,s)}function hs(s,u,d,h){return globalThis.DUCKDB_RUNTIME.moveFile(e,s,u,d,h)}function gs(s,u){return globalThis.DUCKDB_RUNTIME.openFile(e,s,u)}function ys(s,u,d,h){return globalThis.DUCKDB_RUNTIME.readFile(e,s,u,d,h)}function vs(s,u){return globalThis.DUCKDB_RUNTIME.truncateFile(e,s,u)}function ws(s,u,d,h){return globalThis.DUCKDB_RUNTIME.writeFile(e,s,u,d,h)}function Ss(s){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(s)}function Es(s,u){return globalThis.DUCKDB_RUNTIME.glob(e,s,u)}function ks(s){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(e,s)}function Cs(s,u,d,h,F,G){return globalThis.DUCKDB_RUNTIME.callScalarUDF(e,s,u,d,h,F,G)}function Ts(s){R(typeof s=="number"),console.error(wt(s))}function Rs(){return Date.now()}function fn(){return 4294901760}function As(){return fn()}var pn;I&&(global.performance=le("perf_hooks").performance),pn=()=>performance.now();function js(s,u,d){Fe.copyWithin(s>>>0,u>>>0,u+d>>>0)}function Ds(s){var u=be.buffer,d=s-u.byteLength+65535>>>16;try{return be.grow(d),he(),1}catch(h){S(`emscripten_realloc_buffer: Attempted to grow heap from ${u.byteLength} bytes to ${s} bytes, but got error: ${h}`)}}function mn(s){var u=Fe.length;s=s>>>0,R(s>u);var d=fn();if(s>d)return S(`Cannot enlarge memory, asked to go up to ${s} bytes, but the limit is ${d} bytes!`),!1;for(var h=(ee,i)=>ee+(i-ee%i)%i,F=1;F<=4;F*=2){var G=u*(1+.2/F);G=Math.min(G,s+100663296);var M=Math.min(d,h(Math.max(s,G),65536)),U=Ds(M);if(U)return!0}return S(`Failed to grow the heap from ${u} bytes to ${M} bytes, not enough memory!`),!1}var Fr={};function bn(){return m||"./this.program"}function Wt(){if(!Wt.strings){var s=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",u={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:s,_:bn()};for(var d in Fr)Fr[d]===void 0?delete u[d]:u[d]=Fr[d];var h=[];for(var d in u)h.push(`${d}=${u[d]}`);Wt.strings=h}return Wt.strings}function Ms(s,u){for(var d=0;d<s.length;++d)R(s.charCodeAt(d)===(s.charCodeAt(d)&255)),Ee[u++>>>0]=s.charCodeAt(d);Ee[u>>>0]=0}function Ls(s,u){var d=0;return Wt().forEach(function(h,F){var G=u+d;$[s+F*4>>>2]=G,Ms(h,G),d+=h.length+1}),0}function Ir(s,u){var d=Wt();$[s>>>2]=d.length;var h=0;return d.forEach(function(F){h+=F.length+1}),$[u>>>2]=h,0}function Fs(s){w("fd_close called without SYSCALLS_REQUIRE_FILESYSTEM")}function qt(s,u){var d=0,h=0,F=0;{R(s==0||s==1||s==2);var G=2;s==0?d=2:(s==1||s==2)&&(d=64),F=1}return Ee[u>>>0]=G,Le[u+2>>>1]=F,et=[d>>>0,(Re=d,+Math.abs(Re)>=1?Re>0?+Math.floor(Re/4294967296)>>>0:~~+Math.ceil((Re-+(~~Re>>>0))/4294967296)>>>0:0)],b[u+8>>>2]=et[0],b[u+12>>>2]=et[1],et=[h>>>0,(Re=h,+Math.abs(Re)>=1?Re>0?+Math.floor(Re/4294967296)>>>0:~~+Math.ceil((Re-+(~~Re>>>0))/4294967296)>>>0:0)],b[u+16>>>2]=et[0],b[u+20>>>2]=et[1],0}function Is(s,u,d,h,F,G){w("fd_pread called without SYSCALLS_REQUIRE_FILESYSTEM")}function Os(s,u,d,h,F,G){w("fd_pwrite called without SYSCALLS_REQUIRE_FILESYSTEM")}function Ps(s,u,d,h){w("fd_read called without SYSCALLS_REQUIRE_FILESYSTEM")}function xs(s,u,d,h,F){return 70}function Ns(s){w("fd_sync called without SYSCALLS_REQUIRE_FILESYSTEM")}var Or=[null,[],[]];function Pr(s,u){var d=Or[s];R(d),u===0||u===10?((s===1?Y:S)(nn(d,0)),d.length=0):d.push(u)}function Us(){Pu(0),Or[1].length&&Pr(1,10),Or[2].length&&Pr(2,10)}function Bs(s,u,d,h){for(var F=0,G=0;G<d;G++){var M=$[u>>>2],U=$[u+4>>>2];u+=8;for(var ee=0;ee<U;ee++)Pr(s,Fe[M+ee>>>0]);F+=U}return $[h>>>2]=F,0}function Hs(s,u,d,h){var F=[],G=null,M=0,U=0,ee=0,i=0,o=0,_=0,p,j;function L(C,O,K,E,P,se){var V,ge,ae,we;return ge=C===10?28:16,P=C===10?Rt(P):Zt(P),V=Ur(ge),we=nr(V,C,P,se),R(!we),ae=Ur(32),b[ae+4>>>2]=C,b[ae+8>>>2]=O,b[ae+12>>>2]=K,$[ae+24>>>2]=E,$[ae+20>>>2]=V,C===10?b[ae+16>>>2]=28:b[ae+16>>>2]=16,b[ae+28>>>2]=0,ae}if(d&&(ee=b[d>>>2],i=b[d+4>>>2],o=b[d+8>>>2],_=b[d+12>>>2]),o&&!_&&(_=o===2?17:6),!o&&_&&(o=_===17?2:1),_===0&&(_=6),o===0&&(o=1),!s&&!u)return-2;if(ee&-1088||d!==0&&b[d>>>2]&2&&!s)return-1;if(ee&32)return-2;if(o!==0&&o!==1&&o!==2)return-7;if(i!==0&&i!==2&&i!==10)return-6;if(u&&(u=wt(u),U=parseInt(u,10),isNaN(U)))return ee&1024?-2:-8;if(!s)return i===0&&(i=2),(ee&1)===0&&(i===2?M=En(2130706433):M=[0,0,0,1]),p=L(i,o,_,null,M,U),$[h>>>2]=p,0;if(s=wt(s),M=jr(s),M!==null)if(i===0||i===2)i=2;else if(i===10&&ee&8)M=[0,0,En(65535),M],i=10;else return-2;else if(M=er(s),M!==null)if(i===0||i===10)i=10;else return-2;return M!=null?(p=L(i,o,_,s,M,U),$[h>>>2]=p,0):ee&4?-2:(s=ze.lookup_name(s),M=jr(s),i===0?i=2:i===10&&(M=[0,0,En(65535),M]),p=L(i,o,_,null,M,U),$[h>>>2]=p,0)}function xr(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return h=>crypto.getRandomValues(h);if(I)try{var s=le("crypto"),u=s.randomFillSync;if(u)return h=>s.randomFillSync(h);var d=s.randomBytes;return h=>(h.set(d(h.byteLength)),h)}catch{}w("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };")}function sr(s){return(sr=xr())(s)}function Ws(s,u){return sr(Fe.subarray(s>>>0,s+u>>>0)),0}function qs(s,u,d,h,F,G,M){var U=Wi(s,u);if(U.errno)return-6;var ee=U.port,i=U.addr,o=!1;if(d&&h){var _;if(M&1||!(_=ze.lookup_addr(i))){if(M&8)return-2}else i=_;var p=rr(i,d,h);p+1>=h&&(o=!0)}if(F&&G){ee=""+ee;var p=rr(ee,F,G);p+1>=G&&(o=!0)}return o?-12:0}function Gs(s,u){for(var d=0,h=0;h<=u;d+=s[h++]);return d}var hn=[31,29,31,30,31,30,31,31,30,31,30,31],Nr=[31,28,31,30,31,30,31,31,30,31,30,31];function Ys(s,u){for(var d=new Date(s.getTime());u>0;){var h=Ht(d.getFullYear()),F=d.getMonth(),G=(h?hn:Nr)[F];if(u>G-d.getDate())u-=G-d.getDate()+1,d.setDate(1),F<11?d.setMonth(F+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else return d.setDate(d.getDate()+u),d}return d}function $s(s,u,d){var h=d>0?d:St(s)+1,F=new Array(h),G=un(s,F,0,F.length);return u&&(F.length=G),F}function gn(s,u){R(s.length>=0,"writeArrayToMemory array must have a length (should be an array or typed array)"),Ee.set(s,u>>>0)}function yn(s,u,d,h){var F=b[h+40>>>2],G={tm_sec:b[h>>>2],tm_min:b[h+4>>>2],tm_hour:b[h+8>>>2],tm_mday:b[h+12>>>2],tm_mon:b[h+16>>>2],tm_year:b[h+20>>>2],tm_wday:b[h+24>>>2],tm_yday:b[h+28>>>2],tm_isdst:b[h+32>>>2],tm_gmtoff:b[h+36>>>2],tm_zone:F?wt(F):""},M=wt(d),U={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ee in U)M=M.replace(new RegExp(ee,"g"),U[ee]);var i=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],o=["January","February","March","April","May","June","July","August","September","October","November","December"];function _(E,P,se){for(var V=typeof E=="number"?E.toString():E||"";V.length<P;)V=se[0]+V;return V}function p(E,P){return _(E,P,"0")}function j(E,P){function se(ge){return ge<0?-1:ge>0?1:0}var V;return(V=se(E.getFullYear()-P.getFullYear()))===0&&(V=se(E.getMonth()-P.getMonth()))===0&&(V=se(E.getDate()-P.getDate())),V}function L(E){switch(E.getDay()){case 0:return new Date(E.getFullYear()-1,11,29);case 1:return E;case 2:return new Date(E.getFullYear(),0,3);case 3:return new Date(E.getFullYear(),0,2);case 4:return new Date(E.getFullYear(),0,1);case 5:return new Date(E.getFullYear()-1,11,31);case 6:return new Date(E.getFullYear()-1,11,30)}}function C(E){var P=Ys(new Date(E.tm_year+1900,0,1),E.tm_yday),se=new Date(P.getFullYear(),0,4),V=new Date(P.getFullYear()+1,0,4),ge=L(se),ae=L(V);return j(ge,P)<=0?j(ae,P)<=0?P.getFullYear()+1:P.getFullYear():P.getFullYear()-1}var O={"%a":function(E){return i[E.tm_wday].substring(0,3)},"%A":function(E){return i[E.tm_wday]},"%b":function(E){return o[E.tm_mon].substring(0,3)},"%B":function(E){return o[E.tm_mon]},"%C":function(E){var P=E.tm_year+1900;return p(P/100|0,2)},"%d":function(E){return p(E.tm_mday,2)},"%e":function(E){return _(E.tm_mday,2," ")},"%g":function(E){return C(E).toString().substring(2)},"%G":function(E){return C(E)},"%H":function(E){return p(E.tm_hour,2)},"%I":function(E){var P=E.tm_hour;return P==0?P=12:P>12&&(P-=12),p(P,2)},"%j":function(E){return p(E.tm_mday+Gs(Ht(E.tm_year+1900)?hn:Nr,E.tm_mon-1),3)},"%m":function(E){return p(E.tm_mon+1,2)},"%M":function(E){return p(E.tm_min,2)},"%n":function(){return`
`},"%p":function(E){return E.tm_hour>=0&&E.tm_hour<12?"AM":"PM"},"%S":function(E){return p(E.tm_sec,2)},"%t":function(){return"	"},"%u":function(E){return E.tm_wday||7},"%U":function(E){var P=E.tm_yday+7-E.tm_wday;return p(Math.floor(P/7),2)},"%V":function(E){var P=Math.floor((E.tm_yday+7-(E.tm_wday+6)%7)/7);if((E.tm_wday+371-E.tm_yday-2)%7<=2&&P++,P){if(P==53){var V=(E.tm_wday+371-E.tm_yday)%7;V!=4&&(V!=3||!Ht(E.tm_year))&&(P=1)}}else{P=52;var se=(E.tm_wday+7-E.tm_yday-1)%7;(se==4||se==5&&Ht(E.tm_year%400-1))&&P++}return p(P,2)},"%w":function(E){return E.tm_wday},"%W":function(E){var P=E.tm_yday+7-(E.tm_wday+6)%7;return p(Math.floor(P/7),2)},"%y":function(E){return(E.tm_year+1900).toString().substring(2)},"%Y":function(E){return E.tm_year+1900},"%z":function(E){var P=E.tm_gmtoff,se=P>=0;return P=Math.abs(P)/60,P=P/60*100+P%60,(se?"+":"-")+String("0000"+P).slice(-4)},"%Z":function(E){return E.tm_zone},"%%":function(){return"%"}};M=M.replace(/%%/g,"\0\0");for(var ee in O)M.includes(ee)&&(M=M.replace(new RegExp(ee,"g"),O[ee](G)));M=M.replace(/\0\0/g,"%");var K=$s(M,!1);return K.length>u?0:(gn(K,s),K.length-1)}function vn(s,u,d,h,F){return yn(s,u,d,h)}function zs(){S("missing function: ucnv_close_64"),w(-1)}function Vs(){S("missing function: ucnv_convertEx_64"),w(-1)}function wn(){S("missing function: ucnv_open_64"),w(-1)}function Ks(){S("missing function: ucnv_toAlgorithmic_64"),w(-1)}function Xs(){S("missing function: ucsdet_close_64"),w(-1)}function Qs(){S("missing function: ucsdet_detect_64"),w(-1)}function Js(){S("missing function: ucsdet_getConfidence_64"),w(-1)}function Zs(){S("missing function: ucsdet_getName_64"),w(-1)}function ea(){S("missing function: ucsdet_open_64"),w(-1)}function ta(){S("missing function: ucsdet_setText_64"),w(-1)}function ra(){S("missing function: unzClose"),w(-1)}function na(){S("missing function: unzCloseCurrentFile"),w(-1)}function ia(){S("missing function: unzGetCurrentFileInfo"),w(-1)}function sa(){S("missing function: unzGetCurrentFileInfo64"),w(-1)}function aa(){S("missing function: unzGetGlobalInfo"),w(-1)}function oa(){S("missing function: unzGoToFirstFile"),w(-1)}function ua(){S("missing function: unzGoToNextFile"),w(-1)}function la(){S("missing function: unzLocateFile"),w(-1)}function ca(){S("missing function: unzOpen"),w(-1)}function _a(){S("missing function: unzOpen2"),w(-1)}function da(){S("missing function: unzOpenCurrentFile"),w(-1)}function fa(){S("missing function: unzReadCurrentFile"),w(-1)}function pa(s){Oe=s,Er()||(e.onExit&&e.onExit(s),re=!0),g(s,new Nt(s))}function ma(s,u){if(Oe=s,$u(),Er()&&!u){var d=`program exited (with status: ${s}), but keepRuntimeAlive() is set (counter=${Sr}) due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)`;a(d),S(d)}pa(s)}function ba(s){if(s instanceof Nt||s=="unwind")return Oe;pe(),s instanceof WebAssembly.RuntimeError&&Tn()<=0&&S("Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to 65536)"),g(1,s)}function ha(s){var u=e["_"+s];return R(u,"Cannot call unknown function "+s+", make sure it is exported"),u}function ga(s){var u=St(s)+1,d=or(u);return rr(s,d,u),d}function ya(s,u,d,h,F){var G={string:L=>{var C=0;return L!=null&&L!==0&&(C=ga(L)),C},array:L=>{var C=or(L.length);return gn(L,C),C}};function M(L){return u==="string"?wt(L):u==="boolean"?Boolean(L):L}var U=ha(s),ee=[],i=0;if(R(u!=="array",'Return type should not be "array".'),h)for(var o=0;o<h.length;o++){var _=G[d[o]];_?(i===0&&(i=Hr()),ee[o]=_(h[o])):ee[o]=h[o]}var p=U.apply(null,ee);function j(L){return i!==0&&Wr(i),M(L)}return p=j(p),p}function va(){Di("fetchSettings")}var Sn={XML_GetBuffer:Jr,XML_GetErrorCode:Zr,XML_Parse:Ve,XML_ParseBuffer:Ii,XML_ParserCreate:en,XML_ParserFree:ku,XML_ResumeParser:Cu,XML_SetCharacterDataHandler:Ut,XML_SetElementHandler:Tu,XML_SetUserData:it,XML_StopParser:Oi,__cxa_throw:Ui,__dlsym:Bi,__syscall__newselect:Hi,__syscall_bind:tr,__syscall_connect:Dr,__syscall_faccessat:Xe,__syscall_fcntl64:on,__syscall_fstat64:qi,__syscall_ftruncate64:Gi,__syscall_getdents64:Du,__syscall_getpeername:ir,__syscall_getsockopt:Yi,__syscall_ioctl:cn,__syscall_lstat64:Mr,__syscall_mkdirat:$i,__syscall_newfstatat:zi,__syscall_openat:Vi,__syscall_recvfrom:Ki,__syscall_renameat:Xi,__syscall_rmdir:Qi,__syscall_sendto:Ji,__syscall_socket:Zi,__syscall_stat64:es,__syscall_unlinkat:ts,_emscripten_get_now_is_monotonic:ns,_localtime_js:us,_tzset_js:ls,abort:cs,dlopen:_s,duckdb_web_fs_directory_create:Lr,duckdb_web_fs_directory_exists:dn,duckdb_web_fs_directory_list_files:ds,duckdb_web_fs_directory_remove:fs,duckdb_web_fs_file_close:ps,duckdb_web_fs_file_exists:ms,duckdb_web_fs_file_get_last_modified_time:bs,duckdb_web_fs_file_move:hs,duckdb_web_fs_file_open:gs,duckdb_web_fs_file_read:ys,duckdb_web_fs_file_truncate:vs,duckdb_web_fs_file_write:ws,duckdb_web_fs_get_default_data_protocol:Ss,duckdb_web_fs_glob:Es,duckdb_web_test_platform_feature:ks,duckdb_web_udf_scalar_call:Cs,emscripten_console_error:Ts,emscripten_date_now:Rs,emscripten_get_heap_max:As,emscripten_get_now:pn,emscripten_memcpy_big:js,emscripten_resize_heap:mn,environ_get:Ls,environ_sizes_get:Ir,fd_close:Fs,fd_fdstat_get:qt,fd_pread:Is,fd_pwrite:Os,fd_read:Ps,fd_seek:xs,fd_sync:Ns,fd_write:Bs,getaddrinfo:Hs,getentropy:Ws,getnameinfo:qs,strftime_l:vn,ucnv_close_64:zs,ucnv_convertEx_64:Vs,ucnv_open_64:wn,ucnv_toAlgorithmic_64:Ks,ucsdet_close_64:Xs,ucsdet_detect_64:Qs,ucsdet_getConfidence_64:Js,ucsdet_getName_64:Zs,ucsdet_open_64:ea,ucsdet_setText_64:ta,unzClose:ra,unzCloseCurrentFile:na,unzGetCurrentFileInfo:ia,unzGetCurrentFileInfo64:sa,unzGetGlobalInfo:aa,unzGoToFirstFile:oa,unzGoToNextFile:ua,unzLocateFile:la,unzOpen:ca,unzOpen2:_a,unzOpenCurrentFile:da,unzReadCurrentFile:fa},Mu=ji(),Lu=f("__wasm_call_ctors"),wa=e._main=f("main"),Fu=e._duckdb_web_fs_glob_add_path=f("duckdb_web_fs_glob_add_path"),Sa=e._duckdb_web_clear_response=f("duckdb_web_clear_response"),ld=e._duckdb_web_fail_with=f("duckdb_web_fail_with"),cd=e._duckdb_web_reset=f("duckdb_web_reset"),Iu=e._duckdb_web_connect=f("duckdb_web_connect"),_d=e._duckdb_web_disconnect=f("duckdb_web_disconnect"),dd=e._duckdb_web_flush_files=f("duckdb_web_flush_files"),fd=e._duckdb_web_flush_file=f("duckdb_web_flush_file"),pd=e._duckdb_web_open=f("duckdb_web_open"),md=e._duckdb_web_get_global_file_info=f("duckdb_web_get_global_file_info"),bd=e._duckdb_web_collect_file_stats=f("duckdb_web_collect_file_stats"),hd=e._duckdb_web_export_file_stats=f("duckdb_web_export_file_stats"),gd=e._duckdb_web_fs_drop_file=f("duckdb_web_fs_drop_file"),yd=e._duckdb_web_fs_drop_files=f("duckdb_web_fs_drop_files"),vd=e._duckdb_web_fs_glob_file_infos=f("duckdb_web_fs_glob_file_infos"),wd=e._duckdb_web_fs_get_file_info_by_id=f("duckdb_web_fs_get_file_info_by_id"),Sd=e._duckdb_web_fs_get_file_info_by_name=f("duckdb_web_fs_get_file_info_by_name"),Ed=e._duckdb_web_fs_register_file_url=f("duckdb_web_fs_register_file_url"),kd=e._duckdb_web_fs_register_file_buffer=f("duckdb_web_fs_register_file_buffer"),Cd=e._duckdb_web_copy_file_to_buffer=f("duckdb_web_copy_file_to_buffer"),Td=e._duckdb_web_copy_file_to_path=f("duckdb_web_copy_file_to_path"),Rd=e._duckdb_web_get_version=f("duckdb_web_get_version"),Ad=e._duckdb_web_get_feature_flags=f("duckdb_web_get_feature_flags"),jd=e._duckdb_web_tokenize=f("duckdb_web_tokenize"),Dd=e._duckdb_web_udf_scalar_create=f("duckdb_web_udf_scalar_create"),Md=e._duckdb_web_prepared_create=f("duckdb_web_prepared_create"),Ld=e._duckdb_web_prepared_close=f("duckdb_web_prepared_close"),Fd=e._duckdb_web_prepared_run=f("duckdb_web_prepared_run"),Id=e._duckdb_web_prepared_send=f("duckdb_web_prepared_send"),Od=e._duckdb_web_query_run=f("duckdb_web_query_run"),Pd=e._duckdb_web_pending_query_start=f("duckdb_web_pending_query_start"),xd=e._duckdb_web_pending_query_poll=f("duckdb_web_pending_query_poll"),Nd=e._duckdb_web_pending_query_cancel=f("duckdb_web_pending_query_cancel"),Ud=e._duckdb_web_query_fetch_results=f("duckdb_web_query_fetch_results"),Bd=e._duckdb_web_get_tablenames=f("duckdb_web_get_tablenames"),Hd=e._duckdb_web_insert_arrow_from_ipc_stream=f("duckdb_web_insert_arrow_from_ipc_stream"),Wd=e._duckdb_web_insert_csv_from_path=f("duckdb_web_insert_csv_from_path"),qd=e._duckdb_web_insert_json_from_path=f("duckdb_web_insert_json_from_path"),Ou=f("__errno_location"),Pu=e._fflush=f("fflush"),En=f("htonl"),kn=f("htons"),Ea=f("ntohs"),Ur=e._malloc=f("malloc"),xu=e._free=f("free"),ar=function(){return(ar=e.asm.emscripten_stack_init).apply(null,arguments)},Br=function(){return(Br=e.asm.emscripten_stack_get_free).apply(null,arguments)},Cn=function(){return(Cn=e.asm.emscripten_stack_get_base).apply(null,arguments)},Gt=function(){return(Gt=e.asm.emscripten_stack_get_end).apply(null,arguments)},Hr=f("stackSave"),Wr=f("stackRestore"),or=f("stackAlloc"),Tn=function(){return(Tn=e.asm.emscripten_stack_get_current).apply(null,arguments)},ka=f("__cxa_is_pointer_type"),Rn=e.dynCall_jiji=f("dynCall_jiji"),An=e.dynCall_iiiiij=f("dynCall_iiiiij"),jn=e.dynCall_iiiiijj=f("dynCall_iiiiijj"),ur=e.dynCall_iiiiiijj=f("dynCall_iiiiiijj"),Ca=e.dynCall_viijii=f("dynCall_viijii"),Nu=e.dynCall_viijji=f("dynCall_viijji"),Uu=e.dynCall_iiiji=f("dynCall_iiiji"),Bu=e.dynCall_ji=f("dynCall_ji"),Hu=e.dynCall_viij=f("dynCall_viij"),Gd=e.dynCall_vij=f("dynCall_vij"),Yd=e.dynCall_vjjijij=f("dynCall_vjjijij"),$d=e.dynCall_vijjji=f("dynCall_vijjji"),zd=e.dynCall_vjjii=f("dynCall_vjjii"),Vd=e.dynCall_viiiiiji=f("dynCall_viiiiiji"),Kd=e.dynCall_jiiiji=f("dynCall_jiiiji"),Xd=e.dynCall_jiiij=f("dynCall_jiiij"),Qd=e.dynCall_jijjij=f("dynCall_jijjij"),Jd=e.dynCall_iiij=f("dynCall_iiij"),Zd=e.dynCall_vijjj=f("dynCall_vijjj"),ef=e.dynCall_vijj=f("dynCall_vijj"),tf=e.dynCall_viijj=f("dynCall_viijj"),rf=e.dynCall_jiijii=f("dynCall_jiijii"),nf=e.dynCall_jijiii=f("dynCall_jijiii"),sf=e.dynCall_viijiiiii=f("dynCall_viijiiiii"),af=e.dynCall_viijiiij=f("dynCall_viijiiij"),of=e.dynCall_vijiiiji=f("dynCall_vijiiiji"),uf=e.dynCall_viiiij=f("dynCall_viiiij"),lf=e.dynCall_jiiji=f("dynCall_jiiji"),cf=e.dynCall_viiijij=f("dynCall_viiijij"),_f=e.dynCall_viijiij=f("dynCall_viijiij"),df=e.dynCall_viiiiijj=f("dynCall_viiiiijj"),ff=e.dynCall_viiijji=f("dynCall_viiijji"),pf=e.dynCall_vijii=f("dynCall_vijii"),mf=e.dynCall_iiiiiji=f("dynCall_iiiiiji"),bf=e.dynCall_iij=f("dynCall_iij"),hf=e.dynCall_iiijj=f("dynCall_iiijj"),gf=e.dynCall_iijii=f("dynCall_iijii"),yf=e.dynCall_viji=f("dynCall_viji"),vf=e.dynCall_iiji=f("dynCall_iiji"),wf=e.dynCall_viijjj=f("dynCall_viijjj"),Sf=e.dynCall_viiijj=f("dynCall_viiijj"),Ef=e.dynCall_jijj=f("dynCall_jijj"),kf=e.dynCall_jiiiii=f("dynCall_jiiiii"),Cf=e.dynCall_jiiii=f("dynCall_jiiii"),Tf=e.dynCall_jii=f("dynCall_jii"),Rf=e.dynCall_viijij=f("dynCall_viijij"),Af=e.dynCall_viiij=f("dynCall_viiij"),jf=e.dynCall_j=f("dynCall_j"),Df=e.dynCall_viiijiiiijj=f("dynCall_viiijiiiijj"),Mf=e.dynCall_jiiiij=f("dynCall_jiiiij"),Lf=e.dynCall_jj=f("dynCall_jj"),Ff=e.dynCall_ij=f("dynCall_ij"),If=e.dynCall_ijjj=f("dynCall_ijjj"),Of=e.dynCall_jjjd=f("dynCall_jjjd"),Pf=e.dynCall_jjjjjjd=f("dynCall_jjjjjjd"),xf=e.dynCall_jij=f("dynCall_jij"),Nf=e.dynCall_viiijiiijii=f("dynCall_viiijiiijii"),Uf=e.dynCall_viijijiiii=f("dynCall_viijijiiii"),Bf=e.dynCall_viiji=f("dynCall_viiji"),Hf=e.dynCall_jiiiijj=f("dynCall_jiiiijj"),Wf=e.dynCall_viiiji=f("dynCall_viiiji"),qf=e.dynCall_viiiiji=f("dynCall_viiiiji"),Gf=e.dynCall_jijiiii=f("dynCall_jijiiii"),Yf=e.dynCall_viiijiji=f("dynCall_viiijiji"),$f=e.dynCall_viijiji=f("dynCall_viijiji"),zf=e.dynCall_jiii=f("dynCall_jiii");e.stackAlloc=or,e.stackSave=Hr,e.stackRestore=Wr,e.ccall=ya;var Wu=["getHostByName","traverseStack","getCallstack","emscriptenLog","convertPCtoSourceLocation","readEmAsmArgs","jstoi_s","listenOnce","autoResumeAudioContext","dynCallLegacy","getDynCaller","dynCall","runtimeKeepalivePush","runtimeKeepalivePop","callUserCallback","maybeExit","safeSetTimeout","asmjsMangle","asyncLoad","alignMemory","mmapAlloc","HandleAllocator","getNativeTypeSize","STACK_SIZE","STACK_ALIGN","POINTER_SIZE","ASSERTIONS","writeI53ToI64","writeI53ToI64Clamped","writeI53ToI64Signaling","writeI53ToU64Clamped","writeI53ToU64Signaling","readI53FromU64","convertI32PairToI53","convertU32PairToI53","cwrap","uleb128Encode","sigToWasmTypes","generateFuncType","convertJsFunctionToWasm","getEmptyTableSlot","updateTableMap","getFunctionAddress","addFunction","removeFunction","reallyNegative","unSign","strLen","reSign","formatString","intArrayToString","AsciiToString","UTF16ToString","stringToUTF16","lengthBytesUTF16","UTF32ToString","stringToUTF32","lengthBytesUTF32","registerKeyEventCallback","maybeCStringToJsString","findEventTarget","findCanvasEventTarget","getBoundingClientRect","fillMouseEventData","registerMouseEventCallback","registerWheelEventCallback","registerUiEventCallback","registerFocusEventCallback","fillDeviceOrientationEventData","registerDeviceOrientationEventCallback","fillDeviceMotionEventData","registerDeviceMotionEventCallback","screenOrientation","fillOrientationChangeEventData","registerOrientationChangeEventCallback","fillFullscreenChangeEventData","registerFullscreenChangeEventCallback","JSEvents_requestFullscreen","JSEvents_resizeCanvasForFullscreen","registerRestoreOldStyle","hideEverythingExceptGivenElement","restoreHiddenElements","setLetterbox","softFullscreenResizeWebGLRenderTarget","doRequestFullscreen","fillPointerlockChangeEventData","registerPointerlockChangeEventCallback","registerPointerlockErrorEventCallback","requestPointerLock","fillVisibilityChangeEventData","registerVisibilityChangeEventCallback","registerTouchEventCallback","fillGamepadEventData","registerGamepadEventCallback","registerBeforeUnloadEventCallback","fillBatteryEventData","battery","registerBatteryEventCallback","setCanvasElementSize","getCanvasElementSize","demangle","demangleAll","jsStackTrace","stackTrace","checkWasiClock","wasiRightsToMuslOFlags","wasiOFlagsToMuslOFlags","createDyncallWrapper","setImmediateWrapped","clearImmediateWrapped","polyfillSetImmediate","getPromise","makePromise","idsToPromises","makePromiseCallback","setMainLoop","heapObjectForWebGLType","heapAccessShiftForWebGLHeap","webgl_enable_ANGLE_instanced_arrays","webgl_enable_OES_vertex_array_object","webgl_enable_WEBGL_draw_buffers","webgl_enable_WEBGL_multi_draw","emscriptenWebGLGet","computeUnpackAlignedImageSize","colorChannelsInGlTextureFormat","emscriptenWebGLGetTexPixelData","__glGenObject","emscriptenWebGLGetUniform","webglGetUniformLocation","webglPrepareUniformLocationsBeforeFirstUse","webglGetLeftBracePos","emscriptenWebGLGetVertexAttrib","__glGetActiveAttribOrUniform","writeGLArray","registerWebGlEventCallback","runAndAbortIfError","SDL_unicode","SDL_ttfContext","SDL_audio","GLFW_Window","ALLOC_NORMAL","ALLOC_STACK","allocate","writeStringToMemory","writeAsciiToMemory"];Wu.forEach(Li);var qu=["run","addOnPreRun","addOnInit","addOnPreMain","addOnExit","addOnPostRun","addRunDependency","removeRunDependency","FS_createFolder","FS_createPath","FS_createDataFile","FS_createLazyFile","FS_createLink","FS_createDevice","FS_unlink","out","err","callMain","abort","keepRuntimeAlive","wasmMemory","getTempRet0","setTempRet0","writeStackCookie","checkStackCookie","ptrToString","zeroMemory","exitJS","getHeapMax","emscripten_realloc_buffer","ENV","MONTH_DAYS_REGULAR","MONTH_DAYS_LEAP","MONTH_DAYS_REGULAR_CUMULATIVE","MONTH_DAYS_LEAP_CUMULATIVE","isLeapYear","ydayFromDate","arraySum","addDays","ERRNO_CODES","ERRNO_MESSAGES","setErrNo","inetPton4","inetNtop4","inetPton6","inetNtop6","readSockaddr","writeSockaddr","DNS","Protocols","Sockets","initRandomFill","randomFill","timers","warnOnce","UNWIND_CACHE","readEmAsmArgsArray","jstoi_q","getExecutableName","handleException","readI53FromI64","convertI32PairToI53Checked","getCFunc","freeTableIndexes","functionsInTableMap","setValue","getValue","PATH","PATH_FS","UTF8Decoder","UTF8ArrayToString","UTF8ToString","stringToUTF8Array","stringToUTF8","lengthBytesUTF8","intArrayFromString","stringToAscii","UTF16Decoder","stringToNewUTF8","stringToUTF8OnStack","writeArrayToMemory","JSEvents","specialHTMLTargets","currentFullscreenStrategy","restoreOldWindowedStyle","ExitStatus","getEnvStrings","flush_NO_FILESYSTEM","dlopenMissingError","promiseMap","uncaughtExceptionCount","exceptionLast","exceptionCaught","ExceptionInfo","Browser","wget","SYSCALLS","getSocketFromFD","getSocketAddress","tempFixedLengthArray","miniTempWebGLFloatBuffers","miniTempWebGLIntBuffers","GL","emscripten_webgl_power_preferences","AL","GLUT","EGL","GLEW","IDBStore","SDL","SDL_gfx","GLFW","allocateUTF8","allocateUTF8OnStack","SOCKFS","FS"];qu.forEach(Ar);var qr;ot=function s(){qr||Ta(),qr||(ot=s)};function Gu(){R(Be==0,'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])'),R(Me.length==0,"cannot call main when preRun functions remain to be called");var s=wa,u=0,d=0;try{var h=s(u,d);return ma(h,!0),h}catch(F){return ba(F)}}function Yu(){ar(),ue()}function Ta(){if(Be>0||(Yu(),hi(),Be>0))return;function s(){qr||(qr=!0,e.calledRun=!0,!re&&(gi(),yi(),n(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),Ra&&Gu(),vi()))}e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1),s()},1)):s(),pe()}function $u(){var s=Y,u=S,d=!1;Y=S=h=>{d=!0};try{Us()}catch{}Y=s,S=u,d&&(nt("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc."),nt("(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)"))}if(e.preInit)for(typeof e.preInit=="function"&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();var Ra=!0;return e.noInitialRun&&(Ra=!1),Ta(),t.ready}})(),fi=wg;var rd=$t(require("fs")),vr=class extends zr{constructor(e,n,a,l){super(e,n);this.mainModulePath=a,this.pthreadWorkerPath=l}locateFile(e,n){if(e.endsWith(".wasm"))return this.mainModulePath;if(e.endsWith(".worker.js")){if(!this.pthreadWorkerPath)throw new Error("Missing DuckDB worker path!");return this.pthreadWorkerPath}throw new Error(`WASM instantiation requested unexpected file: prefix=${n} path=${e}`)}instantiateWasm(e,n){globalThis.DUCKDB_RUNTIME={};for(let l of Object.getOwnPropertyNames(this._runtime))l!="constructor"&&(globalThis.DUCKDB_RUNTIME[l]=Object.getOwnPropertyDescriptor(this._runtime,l).value);let a=rd.default.readFileSync(this.mainModulePath);return WebAssembly.instantiate(a,e).then(l=>{n(l.instance,l.module)}),[]}instantiateImpl(e){return fi({...e,instantiateWasm:this.instantiateWasm.bind(this)})}};var pi=class extends vr{constructor(t,e,n,a=null){super(t,e,n,a)}instantiateImpl(t){return fi({...t,instantiateWasm:this.instantiateWasm.bind(this),locateFile:this.locateFile.bind(this)})}};var mi={},Sg=(()=>{var r=mi.url;return async function(t={}){var e=typeof t<"u"?t:{},n,a;e.ready=new Promise((i,o)=>{n=i,a=o}),["_main","_malloc","_free","_duckdb_web_clear_response","_duckdb_web_collect_file_stats","_duckdb_web_connect","_duckdb_web_copy_file_to_buffer","_duckdb_web_copy_file_to_path","_duckdb_web_disconnect","_duckdb_web_export_file_stats","_duckdb_web_fail_with","_duckdb_web_flush_file","_duckdb_web_flush_files","_duckdb_web_fs_drop_file","_duckdb_web_fs_drop_files","_duckdb_web_fs_get_file_info_by_id","_duckdb_web_fs_get_file_info_by_name","_duckdb_web_fs_glob_add_path","_duckdb_web_fs_glob_file_infos","_duckdb_web_fs_register_file_buffer","_duckdb_web_fs_register_file_url","_duckdb_web_get_feature_flags","_duckdb_web_get_global_file_info","_duckdb_web_get_tablenames","_duckdb_web_get_version","_duckdb_web_insert_arrow_from_ipc_stream","_duckdb_web_insert_csv_from_path","_duckdb_web_insert_json_from_path","_duckdb_web_open","_duckdb_web_pending_query_cancel","_duckdb_web_pending_query_poll","_duckdb_web_pending_query_start","_duckdb_web_prepared_close","_duckdb_web_prepared_create","_duckdb_web_prepared_run","_duckdb_web_prepared_send","_duckdb_web_query_fetch_results","_duckdb_web_query_run","_duckdb_web_reset","_duckdb_web_tokenize","_duckdb_web_udf_scalar_create","getExceptionMessage","___get_exception_message","___cpp_exception","___cxa_increment_exception_refcount","___cxa_decrement_exception_refcount","___thrown_object_from_unwind_exception","_fflush","onRuntimeInitialized"].forEach(i=>{Object.getOwnPropertyDescriptor(e.ready,i)||Object.defineProperty(e.ready,i,{get:()=>w("You are getting "+i+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"),set:()=>w("You are setting "+i+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")})});var l=Object.assign({},e),c=[],m="./this.program",g=(i,o)=>{throw o},D=typeof window=="object",y=typeof importScripts=="function",I=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",A=!D&&!I&&!y;if(e.ENVIRONMENT)throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");var z="";function H(i){return e.locateFile?e.locateFile(i,z):z+i}var W,J,X,me;if(I){if(typeof process>"u"||!process.release||process.release.name!=="node")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");var fe=process.versions.node,Se=fe.split(".").slice(0,3);Se=Se[0]*1e4+Se[1]*100+Se[2].split("-")[0]*1;var ie=101900;if(Se<101900)throw new Error("This emscripten-generated code requires node v10.19.19.0 (detected v"+fe+")");let{createRequire:i}=await import("module");var le=i(mi.url),te=le("fs"),Q=le("path");y?z=Q.dirname(z)+"/":z=le("url").fileURLToPath(new URL("./",mi.url)),W=(o,_)=>(o=xt(o)?new URL(o):Q.normalize(o),te.readFileSync(o,_?void 0:"utf8")),X=o=>{var _=W(o,!0);return _.buffer||(_=new Uint8Array(_)),R(_.buffer),_},J=(o,_,p,j=!0)=>{o=xt(o)?new URL(o):Q.normalize(o),te.readFile(o,j?void 0:"utf8",(L,C)=>{L?p(L):_(j?C.buffer:C)})},!e.thisProgram&&process.argv.length>1&&(m=process.argv[1].replace(/\\/g,"/")),c=process.argv.slice(2),g=(o,_)=>{throw process.exitCode=o,_},e.inspect=()=>"[Emscripten Module object]"}else if(A){if(typeof process=="object"&&typeof le=="function"||typeof window=="object"||typeof importScripts=="function")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");typeof read<"u"&&(W=i=>read(i)),X=i=>{let o;return typeof readbuffer=="function"?new Uint8Array(readbuffer(i)):(o=read(i,"binary"),R(typeof o=="object"),o)},J=(i,o,_)=>{setTimeout(()=>o(X(i)),0)},typeof clearTimeout>"u"&&(globalThis.clearTimeout=i=>{}),typeof scriptArgs<"u"?c=scriptArgs:typeof arguments<"u"&&(c=arguments),typeof quit=="function"&&(g=(i,o)=>{throw setTimeout(()=>{if(!(o instanceof Nt)){let _=o;o&&typeof o=="object"&&o.stack&&(_=[o,o.stack]),S(`exiting due to exception: ${_}`)}quit(i)}),o}),typeof print<"u"&&(typeof console>"u"&&(console={}),console.log=print,console.warn=console.error=typeof printErr<"u"?printErr:print)}else if(D||y){if(y?z=self.location.href:typeof document<"u"&&document.currentScript&&(z=document.currentScript.src),r&&(z=r),z.indexOf("blob:")!==0?z=z.substr(0,z.replace(/[?#].*/,"").lastIndexOf("/")+1):z="",!(typeof window=="object"||typeof importScripts=="function"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");W=i=>{var o=new XMLHttpRequest;return o.open("GET",i,!1),o.send(null),o.responseText},y&&(X=i=>{var o=new XMLHttpRequest;return o.open("GET",i,!1),o.responseType="arraybuffer",o.send(null),new Uint8Array(o.response)}),J=(i,o,_)=>{var p=new XMLHttpRequest;p.open("GET",i,!0),p.responseType="arraybuffer",p.onload=()=>{if(p.status==200||p.status==0&&p.response){o(p.response);return}_()},p.onerror=_,p.send(null)},me=i=>document.title=i}else throw new Error("environment detection error");var Y=e.print||console.log.bind(console),S=e.printErr||console.error.bind(console);Object.assign(e,l),l=null,Fu(),e.arguments&&(c=e.arguments),xe("arguments","arguments_"),e.thisProgram&&(m=e.thisProgram),xe("thisProgram","thisProgram"),e.quit&&(g=e.quit),xe("quit","quit_"),R(typeof e.memoryInitializerPrefixURL>"u","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"),R(typeof e.pthreadMainPrefixURL>"u","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"),R(typeof e.cdInitializerPrefixURL>"u","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"),R(typeof e.filePackagePrefixURL>"u","Module.filePackagePrefixURL option was removed, use Module.locateFile instead"),R(typeof e.read>"u","Module.read option was removed (modify read_ in JS)"),R(typeof e.readAsync>"u","Module.readAsync option was removed (modify readAsync in JS)"),R(typeof e.readBinary>"u","Module.readBinary option was removed (modify readBinary in JS)"),R(typeof e.setWindowTitle>"u","Module.setWindowTitle option was removed (modify setWindowTitle in JS)"),R(typeof e.TOTAL_MEMORY>"u","Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"),xe("read","read_"),xe("readAsync","readAsync"),xe("readBinary","readBinary"),xe("setWindowTitle","setWindowTitle");var T="IDBFS is no longer included by default; build with -lidbfs.js",ce="PROXYFS is no longer included by default; build with -lproxyfs.js",oe="WORKERFS is no longer included by default; build with -lworkerfs.js",Ce="NODEFS is no longer included by default; build with -lnodefs.js";R(!A,"shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");var v;e.wasmBinary&&(v=e.wasmBinary),xe("wasmBinary","wasmBinary");var k=e.noExitRuntime||!0;xe("noExitRuntime","noExitRuntime"),typeof WebAssembly!="object"&&w("no native wasm support detected");var be,re=!1,Oe;function R(i,o){i||w("Assertion failed"+(o?": "+o:""))}var Ye,Ee,Fe,Le,Je,b,$,ht,B;function he(){var i=be.buffer;e.HEAP8=Ee=new Int8Array(i),e.HEAP16=Le=new Int16Array(i),e.HEAP32=b=new Int32Array(i),e.HEAPU8=Fe=new Uint8Array(i),e.HEAPU16=Je=new Uint16Array(i),e.HEAPU32=$=new Uint32Array(i),e.HEAPF32=ht=new Float32Array(i),e.HEAPF64=B=new Float64Array(i)}R(!e.STACK_SIZE,"STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time"),R(typeof Int32Array<"u"&&typeof Float64Array<"u"&&Int32Array.prototype.subarray!=null&&Int32Array.prototype.set!=null,"JS engine does not provide full typed array support"),R(!e.wasmMemory,"Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally"),R(!e.INITIAL_MEMORY,"Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically");var N;function ue(){var i=Rn();R((i&3)==0),i==0&&(i+=4),$[i>>>2]=34821223,$[i+4>>>2]=2310721022,$[0]=1668509029}function pe(){if(!re){var i=Rn();i==0&&(i+=4);var o=$[i>>>2],_=$[i+4>>>2];(o!=34821223||_!=2310721022)&&w(`Stack overflow! Stack cookie has been overwritten at ${Ut(i)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${Ut(_)} ${Ut(o)}`),$[0]!=1668509029&&w("Runtime error: The application has corrupted its heap memory area (address zero)!")}}(function(){var i=new Int16Array(1),o=new Int8Array(i.buffer);if(i[0]=25459,o[0]!==115||o[1]!==99)throw"Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)"})();var Me=[],Te=[],gt=[],Jt=[],wr=[],Tt=!1,Sr=0;function Er(){return k||Sr>0}function hi(){if(e.preRun)for(typeof e.preRun=="function"&&(e.preRun=[e.preRun]);e.preRun.length;)wi(e.preRun.shift());yt(Me)}function gi(){R(!Tt),Tt=!0,pe(),yt(Te)}function yi(){pe(),yt(gt)}function vi(){if(pe(),e.postRun)for(typeof e.postRun=="function"&&(e.postRun=[e.postRun]);e.postRun.length;)Ei(e.postRun.shift());yt(wr)}function wi(i){Me.unshift(i)}function Si(i){Te.unshift(i)}function id(i){gt.unshift(i)}function sd(i){}function Ei(i){wr.unshift(i)}R(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),R(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),R(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),R(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var Be=0,$e=null,ot=null,Ze={};function ad(i){for(var o=i;;){if(!Ze[i])return i;i=o+Math.random()}}function ki(i){Be++,e.monitorRunDependencies&&e.monitorRunDependencies(Be),i?(R(!Ze[i]),Ze[i]=1,$e===null&&typeof setInterval<"u"&&($e=setInterval(()=>{if(re){clearInterval($e),$e=null;return}var o=!1;for(var _ in Ze)o||(o=!0,S("still waiting on run dependencies:")),S("dependency: "+_);o&&S("(end of list)")},1e4))):S("warning: run dependency added without ID")}function Ci(i){if(Be--,e.monitorRunDependencies&&e.monitorRunDependencies(Be),i?(R(Ze[i]),delete Ze[i]):S("warning: run dependency removed without ID"),Be==0&&($e!==null&&(clearInterval($e),$e=null),ot)){var o=ot;ot=null,o()}}function w(i){e.onAbort&&e.onAbort(i),i="Aborted("+i+")",S(i),re=!0,Oe=1,Tt&&Wr();var o=new WebAssembly.RuntimeError(i);throw a(o),o}var Ti="data:application/octet-stream;base64,";function kr(i){return i.startsWith(Ti)}function xt(i){return i.startsWith("file://")}function f(i,o){return function(){var _=i,p=o;return o||(p=e.asm),R(Tt,"native function `"+_+"` called before runtime initialization"),p[i]||R(p[i],"exported native function `"+_+"` not found"),p[i].apply(null,arguments)}}var Pe;e.locateFile?(Pe="./duckdb-eh.wasm",kr(Pe)||(Pe=H(Pe))):Pe=new URL("./duckdb-eh.wasm",mi.url).href;function Cr(i){try{if(i==Pe&&v)return new Uint8Array(v);if(X)return X(i);throw"both async and sync fetching of the wasm failed"}catch(o){w(o)}}function Ri(i){return!v&&(D||y)&&typeof fetch=="function"?fetch(i,{credentials:"same-origin"}).then(o=>{if(!o.ok)throw"failed to load wasm binary file at '"+i+"'";return o.arrayBuffer()}).catch(()=>Cr(i)):Promise.resolve().then(()=>Cr(i))}function Tr(i,o,_){return Ri(i).then(p=>WebAssembly.instantiate(p,o)).then(p=>p).then(_,p=>{S("failed to asynchronously prepare wasm: "+p),xt(Pe)&&S("warning: Loading from a file URI ("+Pe+") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing"),w(p)})}function Ai(i,o,_,p){return!i&&typeof WebAssembly.instantiateStreaming=="function"&&!kr(o)&&!I&&typeof fetch=="function"?fetch(o,{credentials:"same-origin"}).then(j=>{var L=WebAssembly.instantiateStreaming(j,_);return L.then(p,function(C){return S("wasm streaming compile failed: "+C),S("falling back to ArrayBuffer instantiation"),Tr(o,_,p)})}):Tr(o,_,p)}function ji(){var i={env:Sa,wasi_snapshot_preview1:Sa};function o(j,L){var C=j.exports;return e.asm=C,be=e.asm.memory,R(be,"memory not found in wasm exports"),he(),N=e.asm.__indirect_function_table,R(N,"table not found in wasm exports"),Si(e.asm.__wasm_call_ctors),Ci("wasm-instantiate"),C}ki("wasm-instantiate");var _=e;function p(j){R(e===_,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"),_=null,o(j.instance)}if(e.instantiateWasm)try{return e.instantiateWasm(i,o)}catch(j){S("Module.instantiateWasm callback failed with error: "+j),a(j)}return Ai(v,Pe,i,p).catch(a),{}}var Re,et;function xe(i,o){Object.getOwnPropertyDescriptor(e,i)||Object.defineProperty(e,i,{configurable:!0,get:function(){w("Module."+i+" has been replaced with plain "+o+" (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}})}function Di(i){Object.getOwnPropertyDescriptor(e,i)&&w("`Module."+i+"` was supplied but `"+i+"` not included in INCOMING_MODULE_JS_API")}function Rr(i){return i==="FS_createPath"||i==="FS_createDataFile"||i==="FS_createPreloadedFile"||i==="FS_unlink"||i==="addRunDependency"||i==="FS_createLazyFile"||i==="FS_createDevice"||i==="removeRunDependency"}function Mi(i,o){typeof globalThis<"u"&&Object.defineProperty(globalThis,i,{configurable:!0,get:function(){it("`"+i+"` is not longer defined by emscripten. "+o)}})}Mi("buffer","Please use HEAP8.buffer or wasmMemory.buffer");function Li(i){typeof globalThis<"u"&&!Object.getOwnPropertyDescriptor(globalThis,i)&&Object.defineProperty(globalThis,i,{configurable:!0,get:function(){var o="`"+i+"` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line",_=i;_.startsWith("_")||(_="$"+i),o+=" (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE="+_+")",Rr(i)&&(o+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),it(o)}}),Ar(i)}function Ar(i){Object.getOwnPropertyDescriptor(e,i)||Object.defineProperty(e,i,{configurable:!0,get:function(){var o="'"+i+"' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";Rr(i)&&(o+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),w(o)}})}function od(i){console.warn.apply(console,arguments)}function Nt(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}function yt(i){for(;i.length>0;)i.shift()(e)}function Fi(){return e.asm.__cpp_exception}function vt(i){var o=i.getArg(Fi(),0);return Bu(o)}function ud(i){var o=vt(i);Nu(o)}function nt(i){var o=An(),_=i();return jn(o),_}var Jr=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function Zr(i,o,_){o>>>=0;for(var p=o+_,j=o;i[j]&&!(j>=p);)++j;if(j-o>16&&i.buffer&&Jr)return Jr.decode(i.subarray(o,j));for(var L="";o<j;){var C=i[o++];if(!(C&128)){L+=String.fromCharCode(C);continue}var O=i[o++]&63;if((C&224)==192){L+=String.fromCharCode((C&31)<<6|O);continue}var K=i[o++]&63;if((C&240)==224?C=(C&15)<<12|O<<6|K:((C&248)!=240&&it("Invalid UTF-8 leading byte "+Ut(C)+" encountered when deserializing a UTF-8 string in wasm memory to a JS string!"),C=(C&7)<<18|O<<12|K<<6|i[o++]&63),C<65536)L+=String.fromCharCode(C);else{var E=C-65536;L+=String.fromCharCode(55296|E>>10,56320|E&1023)}}return L}function Ve(i,o){return R(typeof i=="number"),i>>>=0,i?Zr(Fe,i,o):""}function Ii(i){return nt(function(){var o=ur(4),_=ur(4);Hu(i,o,_);var p=$[o>>>2],j=$[_>>>2],L=Ve(p);Hr(p);var C;return j&&(C=Ve(j),Hr(j)),[L,C]})}function en(i){var o=vt(i);return Ii(o)}e.getExceptionMessage=en;function ku(i,o="i8"){switch(o.endsWith("*")&&(o="*"),o){case"i1":return Ee[i>>>0];case"i8":return Ee[i>>>0];case"i16":return Le[i>>>1];case"i32":return b[i>>>2];case"i64":w("to do getValue(i64) use WASM_BIGINT");case"float":return ht[i>>>2];case"double":return B[i>>>3];case"*":return $[i>>>2];default:w(`invalid type for getValue: ${o}`)}}function Cu(i){var o=vt(i);Uu(o)}function Ut(i){return R(typeof i=="number"),"0x"+i.toString(16).padStart(8,"0")}function Tu(i,o,_="i8"){switch(_.endsWith("*")&&(_="*"),_){case"i1":Ee[i>>>0]=o;break;case"i8":Ee[i>>>0]=o;break;case"i16":Le[i>>>1]=o;break;case"i32":b[i>>>2]=o;break;case"i64":w("to do setValue(i64) use WASM_BIGINT");case"float":ht[i>>>2]=o;break;case"double":B[i>>>3]=o;break;case"*":$[i>>>2]=o;break;default:w(`invalid type for setValue: ${_}`)}}function it(i){it.shown||(it.shown={}),it.shown[i]||(it.shown[i]=1,I&&(i="warning: "+i),S(i))}function Oi(){S("missing function: XML_GetBuffer"),w(-1)}function Pi(){S("missing function: XML_GetErrorCode"),w(-1)}function xi(){S("missing function: XML_Parse"),w(-1)}function Ni(){S("missing function: XML_ParseBuffer"),w(-1)}function Ui(){S("missing function: XML_ParserCreate"),w(-1)}function tn(){S("missing function: XML_ParserFree"),w(-1)}function Bi(){S("missing function: XML_ResumeParser"),w(-1)}function rn(){S("missing function: XML_SetCharacterDataHandler"),w(-1)}function nn(){S("missing function: XML_SetElementHandler"),w(-1)}function wt(){S("missing function: XML_SetUserData"),w(-1)}function lt(){S("missing function: XML_StopParser"),w(-1)}function Hi(i,o,_,p){w(`Assertion failed: ${Ve(i)}, at: `+[o?Ve(o):"unknown filename",_,p?Ve(p):"unknown function"])}var sn="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function an(i,o,_){w(sn)}var Ke={varargs:void 0,get:function(){R(Ke.varargs!=null),Ke.varargs+=4;var i=b[Ke.varargs-4>>>2];return i},getStr:function(i){var o=Ve(i);return o}};function Ru(i,o,_,p,j){R(i<=64,"nfds must be less than or equal to 64"),R(!p,"exceptfds not supported");for(var L=0,C=o?b[o>>>2]:0,O=o?b[o+4>>>2]:0,K=_?b[_>>>2]:0,E=_?b[_+4>>>2]:0,P=p?b[p>>>2]:0,se=p?b[p+4>>>2]:0,V=0,ge=0,ae=0,we=0,ct=0,ut=0,x=(o?b[o>>>2]:0)|(_?b[_>>>2]:0)|(p?b[p>>>2]:0),Z=(o?b[o+4>>>2]:0)|(_?b[_+4>>>2]:0)|(p?b[p+4>>>2]:0),Ne=function(Vf,Kf,Xf,zu){return Vf<32?Kf&zu:Xf&zu},ve=0;ve<i;ve++){var Ue=1<<ve%32;if(!!Ne(ve,x,Z,Ue)){var We=Ke.getStreamFromFD(ve),Yt=Ke.DEFAULT_POLLMASK;We.stream_ops.poll&&(Yt=We.stream_ops.poll(We)),Yt&1&&Ne(ve,C,O,Ue)&&(ve<32?V=V|Ue:ge=ge|Ue,L++),Yt&4&&Ne(ve,K,E,Ue)&&(ve<32?ae=ae|Ue:we=we|Ue,L++),Yt&2&&Ne(ve,P,se,Ue)&&(ve<32?ct=ct|Ue:ut=ut|Ue,L++)}}return o&&(b[o>>>2]=V,b[o+4>>>2]=ge),_&&(b[_>>>2]=ae,b[_+4>>>2]=we),p&&(b[p>>>2]=ct,b[p+4>>>2]=ut),L}function Au(){S("missing function: $SOCKFS"),w(-1)}function Zt(){S("missing function: $FS"),w(-1)}function Rt(i){var o=Au.getSocket(i);if(!o)throw new Zt.ErrnoError(8);return o}function Wi(i){return b[Ur()>>>2]=i,i}var jr={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};function At(i){return(i&255)+"."+(i>>8&255)+"."+(i>>16&255)+"."+(i>>24&255)}function er(i){var o="",_=0,p=0,j=0,L=0,C=0,O=0,K=[i[0]&65535,i[0]>>16,i[1]&65535,i[1]>>16,i[2]&65535,i[2]>>16,i[3]&65535,i[3]>>16],E=!0,P="";for(O=0;O<5;O++)if(K[O]!==0){E=!1;break}if(E){if(P=At(K[6]|K[7]<<16),K[5]===-1)return o="::ffff:",o+=P,o;if(K[5]===0)return o="::",P==="0.0.0.0"&&(P=""),P==="0.0.0.1"&&(P="1"),o+=P,o}for(_=0;_<8;_++)K[_]===0&&(_-j>1&&(C=0),j=_,C++),C>p&&(p=C,L=_-p+1);for(_=0;_<8;_++){if(p>1&&K[_]===0&&_>=L&&_<L+p){_===L&&(o+=":",L===0&&(o+=":"));continue}o+=Number(Cn(K[_]&65535)).toString(16),o+=_<7?":":""}return o}function ze(i,o){var _=Le[i>>>1],p=Cn(Je[i+2>>>1]),j;switch(_){case 2:if(o!==16)return{errno:28};j=b[i+4>>>2],j=At(j);break;case 10:if(o!==28)return{errno:28};j=[b[i+8>>>2],b[i+12>>>2],b[i+16>>>2],b[i+20>>>2]],j=er(j);break;default:return{errno:5}}return{family:_,addr:j,port:p}}function Bt(i){for(var o=i.split("."),_=0;_<4;_++){var p=Number(o[_]);if(isNaN(p))return null;o[_]=p}return(o[0]|o[1]<<8|o[2]<<16|o[3]<<24)>>>0}function tr(i){return parseInt(i)}function Dr(i){var o,_,p,j,L,C=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,O=[];if(!C.test(i))return null;if(i==="::")return[0,0,0,0,0,0,0,0];for(i.startsWith("::")?i=i.replace("::","Z:"):i=i.replace("::",":Z:"),i.indexOf(".")>0?(i=i.replace(new RegExp("[.]","g"),":"),o=i.split(":"),o[o.length-4]=tr(o[o.length-4])+tr(o[o.length-3])*256,o[o.length-3]=tr(o[o.length-2])+tr(o[o.length-1])*256,o=o.slice(0,o.length-2)):o=i.split(":"),p=0,j=0,_=0;_<o.length;_++)if(typeof o[_]=="string")if(o[_]==="Z"){for(j=0;j<8-o.length+1;j++)O[_+j]=0;p=j-1}else O[_+p]=Br(parseInt(o[_],16));else O[_+p]=o[_];return[O[1]<<16|O[0],O[3]<<16|O[2],O[5]<<16|O[4],O[7]<<16|O[6]]}var Xe={address_map:{id:1,addrs:{},names:{}},lookup_name:function(i){var o=Bt(i);if(o!==null||(o=Dr(i),o!==null))return i;var _;if(Xe.address_map.addrs[i])_=Xe.address_map.addrs[i];else{var p=Xe.address_map.id++;R(p<65535,"exceeded max address mappings of 65535"),_="172.29."+(p&255)+"."+(p&65280),Xe.address_map.names[_]=i,Xe.address_map.addrs[i]=_}return _},lookup_addr:function(i){return Xe.address_map.names[i]?Xe.address_map.names[i]:null}};function on(i,o,_){if(_&&i===0)return null;var p=ze(i,o);if(p.errno)throw new Zt.ErrnoError(p.errno);return p.addr=Xe.lookup_addr(p.addr)||p.addr,p}function qi(i,o,_,p,j,L){var C=Rt(i),O=on(o,_);return C.sock_ops.bind(C,O.addr,O.port),0}function ju(i,o,_,p,j,L){var C=Rt(i),O=on(o,_);return C.sock_ops.connect(C,O.addr,O.port),0}function Gi(i,o,_,p){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function un(i,o,_){return Ke.varargs=_,0}function rr(i,o){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Du(i,o){return R(i==i>>>0||i==(i|0)),R(o===(o|0)),o+2097152>>>0<4194305-!!i?(i>>>0)+o*4294967296:NaN}function ln(i,o,_){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function nr(i,o,_,p){if(_>>>=0,R(typeof i=="string"),!(p>0))return 0;for(var j=_,L=_+p-1,C=0;C<i.length;++C){var O=i.charCodeAt(C);if(O>=55296&&O<=57343){var K=i.charCodeAt(++C);O=65536+((O&1023)<<10)|K&1023}if(O<=127){if(_>=L)break;o[_++>>>0]=O}else if(O<=2047){if(_+1>=L)break;o[_++>>>0]=192|O>>6,o[_++>>>0]=128|O&63}else if(O<=65535){if(_+2>=L)break;o[_++>>>0]=224|O>>12,o[_++>>>0]=128|O>>6&63,o[_++>>>0]=128|O&63}else{if(_+3>=L)break;O>1114111&&it("Invalid Unicode code point "+Ut(O)+" encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF)."),o[_++>>>0]=240|O>>18,o[_++>>>0]=128|O>>12&63,o[_++>>>0]=128|O>>6&63,o[_++>>>0]=128|O&63}}return o[_>>>0]=0,_-j}function ir(i,o,_){return R(typeof _=="number","stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),nr(i,Fe,o,_)}function Yi(i,o,_){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function cn(i,o){return Fe.fill(0,i,i+o),i}function Mr(i,o,_,p,j){switch(o){case 2:_=Bt(_),cn(i,16),j&&(b[j>>>2]=16),Le[i>>>1]=o,b[i+4>>>2]=_,Le[i+2>>>1]=Br(p);break;case 10:_=Dr(_),cn(i,28),j&&(b[j>>>2]=28),b[i>>>2]=o,b[i+8>>>2]=_[0],b[i+12>>>2]=_[1],b[i+16>>>2]=_[2],b[i+20>>>2]=_[3],Le[i+2>>>1]=Br(p);break;default:return 5}return 0}function $i(i,o,_,p,j,L){var C=Rt(i);if(!C.daddr)return-53;var O=Mr(o,C.family,Xe.lookup_name(C.daddr),C.dport,_);return R(!O),0}function zi(i,o,_,p,j,L){var C=Rt(i);return o===1&&_===4?(b[p>>>2]=C.error,b[j>>>2]=4,C.error=null,0):-50}function Vi(i,o,_){return Ke.varargs=_,0}function Ki(i,o){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Xi(i,o,_){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Qi(i,o,_,p){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Ji(i,o,_,p){Ke.varargs=p,w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Zi(i,o,_,p,j,L){var C=Rt(i),O=C.sock_ops.recvmsg(C,_);if(!O)return 0;if(j){var K=Mr(j,C.family,Xe.lookup_name(O.addr),O.port,L);R(!K)}return Fe.set(O.buffer,o>>>0),O.buffer.byteLength}function es(i,o,_,p){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function ts(i){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function rs(i,o,_,p,j,L){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function ns(i,o,_){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function is(i,o){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Ht(i,o,_){w("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function ss(i){var o=new WebAssembly.Exception(Fi(),[i],{traceStack:!0});if(o.message=en(o),o.stack){var _=o.stack.split(`
`);_.splice(1,1),o.stack=_.join(`
`)}throw o}var as=!0;function os(){return as}function us(i){return $[i>>>2]+b[i+4>>>2]*4294967296}function St(i){return i%4===0&&(i%100!==0||i%400===0)}var _n=[0,31,60,91,121,152,182,213,244,274,305,335],ls=[0,31,59,90,120,151,181,212,243,273,304,334];function cs(i){var o=St(i.getFullYear()),_=o?_n:ls,p=_[i.getMonth()]+i.getDate()-1;return p}function _s(i,o){var _=new Date(us(i)*1e3);b[o>>>2]=_.getSeconds(),b[o+4>>>2]=_.getMinutes(),b[o+8>>>2]=_.getHours(),b[o+12>>>2]=_.getDate(),b[o+16>>>2]=_.getMonth(),b[o+20>>>2]=_.getFullYear()-1900,b[o+24>>>2]=_.getDay();var p=cs(_)|0;b[o+28>>>2]=p,b[o+36>>>2]=-(_.getTimezoneOffset()*60);var j=new Date(_.getFullYear(),0,1),L=new Date(_.getFullYear(),6,1).getTimezoneOffset(),C=j.getTimezoneOffset(),O=(L!=C&&_.getTimezoneOffset()==Math.min(C,L))|0;b[o+32>>>2]=O}function Lr(i){for(var o=0,_=0;_<i.length;++_){var p=i.charCodeAt(_);p<=127?o++:p<=2047?o+=2:p>=55296&&p<=57343?(o+=4,++_):o+=3}return o}function dn(i){var o=Lr(i)+1,_=Gt(o);return _&&ir(i,_,o),_}function ds(i,o,_){var p=new Date().getFullYear(),j=new Date(p,0,1),L=new Date(p,6,1),C=j.getTimezoneOffset(),O=L.getTimezoneOffset(),K=Math.max(C,O);$[i>>>2]=K*60,b[o>>>2]=Number(C!=O);function E(ae){var we=ae.toTimeString().match(/\(([A-Za-z ]+)\)$/);return we?we[1]:"GMT"}var P=E(j),se=E(L),V=dn(P),ge=dn(se);O<C?($[_>>>2]=V,$[_+4>>>2]=ge):($[_>>>2]=ge,$[_+4>>>2]=V)}function fs(){w("native code called abort()")}function ps(i,o){w(sn)}function ms(i,o){return globalThis.DUCKDB_RUNTIME.createDirectory(e,i,o)}function bs(i,o){return globalThis.DUCKDB_RUNTIME.checkDirectory(e,i,o)}function hs(i,o){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(e,i,o)}function gs(i,o){return globalThis.DUCKDB_RUNTIME.removeDirectory(e,i,o)}function ys(i){return globalThis.DUCKDB_RUNTIME.closeFile(e,i)}function vs(i,o){return globalThis.DUCKDB_RUNTIME.checkFile(e,i,o)}function ws(i){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(e,i)}function Ss(i,o,_,p){return globalThis.DUCKDB_RUNTIME.moveFile(e,i,o,_,p)}function Es(i,o){return globalThis.DUCKDB_RUNTIME.openFile(e,i,o)}function ks(i,o,_,p){return globalThis.DUCKDB_RUNTIME.readFile(e,i,o,_,p)}function Cs(i,o){return globalThis.DUCKDB_RUNTIME.truncateFile(e,i,o)}function Ts(i,o,_,p){return globalThis.DUCKDB_RUNTIME.writeFile(e,i,o,_,p)}function Rs(i){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(i)}function fn(i,o){return globalThis.DUCKDB_RUNTIME.glob(e,i,o)}function As(i){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(e,i)}function pn(i,o,_,p,j,L){return globalThis.DUCKDB_RUNTIME.callScalarUDF(e,i,o,_,p,j,L)}function js(i){R(typeof i=="number"),console.error(Ve(i))}function Ds(){return Date.now()}function mn(){return 4294901760}function Fr(){return mn()}var bn;I&&(global.performance=le("perf_hooks").performance),bn=()=>performance.now();function Wt(i,o,_){Fe.copyWithin(i>>>0,o>>>0,o+_>>>0)}function Ms(i){var o=be.buffer,_=i-o.byteLength+65535>>>16;try{return be.grow(_),he(),1}catch(p){S(`emscripten_realloc_buffer: Attempted to grow heap from ${o.byteLength} bytes to ${i} bytes, but got error: ${p}`)}}function Ls(i){var o=Fe.length;i=i>>>0,R(i>o);var _=mn();if(i>_)return S(`Cannot enlarge memory, asked to go up to ${i} bytes, but the limit is ${_} bytes!`),!1;for(var p=(K,E)=>K+(E-K%E)%E,j=1;j<=4;j*=2){var L=o*(1+.2/j);L=Math.min(L,i+100663296);var C=Math.min(_,p(Math.max(i,L),65536)),O=Ms(C);if(O)return!0}return S(`Failed to grow the heap from ${o} bytes to ${C} bytes, not enough memory!`),!1}var Ir={};function Fs(){return m||"./this.program"}function qt(){if(!qt.strings){var i=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",o={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:i,_:Fs()};for(var _ in Ir)Ir[_]===void 0?delete o[_]:o[_]=Ir[_];var p=[];for(var _ in o)p.push(`${_}=${o[_]}`);qt.strings=p}return qt.strings}function Is(i,o){for(var _=0;_<i.length;++_)R(i.charCodeAt(_)===(i.charCodeAt(_)&255)),Ee[o++>>>0]=i.charCodeAt(_);Ee[o>>>0]=0}function Os(i,o){var _=0;return qt().forEach(function(p,j){var L=o+_;$[i+j*4>>>2]=L,Is(p,L),_+=p.length+1}),0}function Ps(i,o){var _=qt();$[i>>>2]=_.length;var p=0;return _.forEach(function(j){p+=j.length+1}),$[o>>>2]=p,0}function xs(i){w("fd_close called without SYSCALLS_REQUIRE_FILESYSTEM")}function Ns(i,o){var _=0,p=0,j=0;{R(i==0||i==1||i==2);var L=2;i==0?_=2:(i==1||i==2)&&(_=64),j=1}return Ee[o>>>0]=L,Le[o+2>>>1]=j,et=[_>>>0,(Re=_,+Math.abs(Re)>=1?Re>0?+Math.floor(Re/4294967296)>>>0:~~+Math.ceil((Re-+(~~Re>>>0))/4294967296)>>>0:0)],b[o+8>>>2]=et[0],b[o+12>>>2]=et[1],et=[p>>>0,(Re=p,+Math.abs(Re)>=1?Re>0?+Math.floor(Re/4294967296)>>>0:~~+Math.ceil((Re-+(~~Re>>>0))/4294967296)>>>0:0)],b[o+16>>>2]=et[0],b[o+20>>>2]=et[1],0}function Or(i,o,_,p,j,L){w("fd_pread called without SYSCALLS_REQUIRE_FILESYSTEM")}function Pr(i,o,_,p,j,L){w("fd_pwrite called without SYSCALLS_REQUIRE_FILESYSTEM")}function Us(i,o,_,p){w("fd_read called without SYSCALLS_REQUIRE_FILESYSTEM")}function Bs(i,o,_,p,j){return 70}function Hs(i){w("fd_sync called without SYSCALLS_REQUIRE_FILESYSTEM")}var xr=[null,[],[]];function sr(i,o){var _=xr[i];R(_),o===0||o===10?((i===1?Y:S)(Zr(_,0)),_.length=0):_.push(o)}function Ws(){xu(0),xr[1].length&&sr(1,10),xr[2].length&&sr(2,10)}function qs(i,o,_,p){for(var j=0,L=0;L<_;L++){var C=$[o>>>2],O=$[o+4>>>2];o+=8;for(var K=0;K<O;K++)sr(i,Fe[C+K>>>0]);j+=O}return $[p>>>2]=j,0}function Gs(i,o,_,p){var j=[],L=null,C=0,O=0,K=0,E=0,P=0,se=0,V,ge;function ae(we,ct,ut,x,Z,Ne){var ve,Ue,We,Yt;return Ue=we===10?28:16,Z=we===10?er(Z):At(Z),ve=Gt(Ue),Yt=Mr(ve,we,Z,Ne),R(!Yt),We=Gt(32),b[We+4>>>2]=we,b[We+8>>>2]=ct,b[We+12>>>2]=ut,$[We+24>>>2]=x,$[We+20>>>2]=ve,we===10?b[We+16>>>2]=28:b[We+16>>>2]=16,b[We+28>>>2]=0,We}if(_&&(K=b[_>>>2],E=b[_+4>>>2],P=b[_+8>>>2],se=b[_+12>>>2]),P&&!se&&(se=P===2?17:6),!P&&se&&(P=se===17?2:1),se===0&&(se=6),P===0&&(P=1),!i&&!o)return-2;if(K&-1088||_!==0&&b[_>>>2]&2&&!i)return-1;if(K&32)return-2;if(P!==0&&P!==1&&P!==2)return-7;if(E!==0&&E!==2&&E!==10)return-6;if(o&&(o=Ve(o),O=parseInt(o,10),isNaN(O)))return K&1024?-2:-8;if(!i)return E===0&&(E=2),(K&1)===0&&(E===2?C=ar(2130706433):C=[0,0,0,1]),V=ae(E,P,se,null,C,O),$[p>>>2]=V,0;if(i=Ve(i),C=Bt(i),C!==null)if(E===0||E===2)E=2;else if(E===10&&K&8)C=[0,0,ar(65535),C],E=10;else return-2;else if(C=Dr(i),C!==null)if(E===0||E===10)E=10;else return-2;return C!=null?(V=ae(E,P,se,i,C,O),$[p>>>2]=V,0):K&4?-2:(i=Xe.lookup_name(i),C=Bt(i),E===0?E=2:E===10&&(C=[0,0,ar(65535),C]),V=ae(E,P,se,null,C,O),$[p>>>2]=V,0)}function hn(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return p=>crypto.getRandomValues(p);if(I)try{var i=le("crypto"),o=i.randomFillSync;if(o)return p=>i.randomFillSync(p);var _=i.randomBytes;return p=>(p.set(_(p.byteLength)),p)}catch{}w("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };")}function Nr(i){return(Nr=hn())(i)}function Ys(i,o){return Nr(Fe.subarray(i>>>0,i+o>>>0)),0}function $s(i,o,_,p,j,L,C){var O=ze(i,o);if(O.errno)return-6;var K=O.port,E=O.addr,P=!1;if(_&&p){var se;if(C&1||!(se=Xe.lookup_addr(E))){if(C&8)return-2}else E=se;var V=ir(E,_,p);V+1>=p&&(P=!0)}if(j&&L){K=""+K;var V=ir(K,j,L);V+1>=L&&(P=!0)}return P?-12:0}function gn(i,o){for(var _=0,p=0;p<=o;_+=i[p++]);return _}var yn=[31,29,31,30,31,30,31,31,30,31,30,31],vn=[31,28,31,30,31,30,31,31,30,31,30,31];function zs(i,o){for(var _=new Date(i.getTime());o>0;){var p=St(_.getFullYear()),j=_.getMonth(),L=(p?yn:vn)[j];if(o>L-_.getDate())o-=L-_.getDate()+1,_.setDate(1),j<11?_.setMonth(j+1):(_.setMonth(0),_.setFullYear(_.getFullYear()+1));else return _.setDate(_.getDate()+o),_}return _}function Vs(i,o,_){var p=_>0?_:Lr(i)+1,j=new Array(p),L=nr(i,j,0,j.length);return o&&(j.length=L),j}function wn(i,o){R(i.length>=0,"writeArrayToMemory array must have a length (should be an array or typed array)"),Ee.set(i,o>>>0)}function Ks(i,o,_,p){var j=b[p+40>>>2],L={tm_sec:b[p>>>2],tm_min:b[p+4>>>2],tm_hour:b[p+8>>>2],tm_mday:b[p+12>>>2],tm_mon:b[p+16>>>2],tm_year:b[p+20>>>2],tm_wday:b[p+24>>>2],tm_yday:b[p+28>>>2],tm_isdst:b[p+32>>>2],tm_gmtoff:b[p+36>>>2],tm_zone:j?Ve(j):""},C=Ve(_),O={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var K in O)C=C.replace(new RegExp(K,"g"),O[K]);var E=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],P=["January","February","March","April","May","June","July","August","September","October","November","December"];function se(x,Z,Ne){for(var ve=typeof x=="number"?x.toString():x||"";ve.length<Z;)ve=Ne[0]+ve;return ve}function V(x,Z){return se(x,Z,"0")}function ge(x,Z){function Ne(Ue){return Ue<0?-1:Ue>0?1:0}var ve;return(ve=Ne(x.getFullYear()-Z.getFullYear()))===0&&(ve=Ne(x.getMonth()-Z.getMonth()))===0&&(ve=Ne(x.getDate()-Z.getDate())),ve}function ae(x){switch(x.getDay()){case 0:return new Date(x.getFullYear()-1,11,29);case 1:return x;case 2:return new Date(x.getFullYear(),0,3);case 3:return new Date(x.getFullYear(),0,2);case 4:return new Date(x.getFullYear(),0,1);case 5:return new Date(x.getFullYear()-1,11,31);case 6:return new Date(x.getFullYear()-1,11,30)}}function we(x){var Z=zs(new Date(x.tm_year+1900,0,1),x.tm_yday),Ne=new Date(Z.getFullYear(),0,4),ve=new Date(Z.getFullYear()+1,0,4),Ue=ae(Ne),We=ae(ve);return ge(Ue,Z)<=0?ge(We,Z)<=0?Z.getFullYear()+1:Z.getFullYear():Z.getFullYear()-1}var ct={"%a":function(x){return E[x.tm_wday].substring(0,3)},"%A":function(x){return E[x.tm_wday]},"%b":function(x){return P[x.tm_mon].substring(0,3)},"%B":function(x){return P[x.tm_mon]},"%C":function(x){var Z=x.tm_year+1900;return V(Z/100|0,2)},"%d":function(x){return V(x.tm_mday,2)},"%e":function(x){return se(x.tm_mday,2," ")},"%g":function(x){return we(x).toString().substring(2)},"%G":function(x){return we(x)},"%H":function(x){return V(x.tm_hour,2)},"%I":function(x){var Z=x.tm_hour;return Z==0?Z=12:Z>12&&(Z-=12),V(Z,2)},"%j":function(x){return V(x.tm_mday+gn(St(x.tm_year+1900)?yn:vn,x.tm_mon-1),3)},"%m":function(x){return V(x.tm_mon+1,2)},"%M":function(x){return V(x.tm_min,2)},"%n":function(){return`
`},"%p":function(x){return x.tm_hour>=0&&x.tm_hour<12?"AM":"PM"},"%S":function(x){return V(x.tm_sec,2)},"%t":function(){return"	"},"%u":function(x){return x.tm_wday||7},"%U":function(x){var Z=x.tm_yday+7-x.tm_wday;return V(Math.floor(Z/7),2)},"%V":function(x){var Z=Math.floor((x.tm_yday+7-(x.tm_wday+6)%7)/7);if((x.tm_wday+371-x.tm_yday-2)%7<=2&&Z++,Z){if(Z==53){var ve=(x.tm_wday+371-x.tm_yday)%7;ve!=4&&(ve!=3||!St(x.tm_year))&&(Z=1)}}else{Z=52;var Ne=(x.tm_wday+7-x.tm_yday-1)%7;(Ne==4||Ne==5&&St(x.tm_year%400-1))&&Z++}return V(Z,2)},"%w":function(x){return x.tm_wday},"%W":function(x){var Z=x.tm_yday+7-(x.tm_wday+6)%7;return V(Math.floor(Z/7),2)},"%y":function(x){return(x.tm_year+1900).toString().substring(2)},"%Y":function(x){return x.tm_year+1900},"%z":function(x){var Z=x.tm_gmtoff,Ne=Z>=0;return Z=Math.abs(Z)/60,Z=Z/60*100+Z%60,(Ne?"+":"-")+String("0000"+Z).slice(-4)},"%Z":function(x){return x.tm_zone},"%%":function(){return"%"}};C=C.replace(/%%/g,"\0\0");for(var K in ct)C.includes(K)&&(C=C.replace(new RegExp(K,"g"),ct[K](L)));C=C.replace(/\0\0/g,"%");var ut=Vs(C,!1);return ut.length>o?0:(wn(ut,i),ut.length-1)}function Xs(i,o,_,p,j){return Ks(i,o,_,p)}function Qs(){S("missing function: ucnv_close_64"),w(-1)}function Js(){S("missing function: ucnv_convertEx_64"),w(-1)}function Zs(){S("missing function: ucnv_open_64"),w(-1)}function ea(){S("missing function: ucnv_toAlgorithmic_64"),w(-1)}function ta(){S("missing function: ucsdet_close_64"),w(-1)}function ra(){S("missing function: ucsdet_detect_64"),w(-1)}function na(){S("missing function: ucsdet_getConfidence_64"),w(-1)}function ia(){S("missing function: ucsdet_getName_64"),w(-1)}function sa(){S("missing function: ucsdet_open_64"),w(-1)}function aa(){S("missing function: ucsdet_setText_64"),w(-1)}function oa(){S("missing function: unzClose"),w(-1)}function ua(){S("missing function: unzCloseCurrentFile"),w(-1)}function la(){S("missing function: unzGetCurrentFileInfo"),w(-1)}function ca(){S("missing function: unzGetCurrentFileInfo64"),w(-1)}function _a(){S("missing function: unzGetGlobalInfo"),w(-1)}function da(){S("missing function: unzGoToFirstFile"),w(-1)}function fa(){S("missing function: unzGoToNextFile"),w(-1)}function pa(){S("missing function: unzLocateFile"),w(-1)}function ma(){S("missing function: unzOpen"),w(-1)}function ba(){S("missing function: unzOpen2"),w(-1)}function ha(){S("missing function: unzOpenCurrentFile"),w(-1)}function ga(){S("missing function: unzReadCurrentFile"),w(-1)}function ya(i){Oe=i,Er()||(e.onExit&&e.onExit(i),re=!0),g(i,new Nt(i))}function va(i,o){if(Oe=i,U(),Er()&&!o){var _=`program exited (with status: ${i}), but keepRuntimeAlive() is set (counter=${Sr}) due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)`;a(_),S(_)}ya(i)}function Sn(i){if(i instanceof Nt||i=="unwind")return Oe;pe(),i instanceof WebAssembly.RuntimeError&&Ca()<=0&&S("Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to 65536)"),g(1,i)}function Mu(i){var o=e["_"+i];return R(o,"Cannot call unknown function "+i+", make sure it is exported"),o}function Lu(i){var o=Lr(i)+1,_=ur(o);return ir(i,_,o),_}function wa(i,o,_,p,j){var L={string:ae=>{var we=0;return ae!=null&&ae!==0&&(we=Lu(ae)),we},array:ae=>{var we=ur(ae.length);return wn(ae,we),we}};function C(ae){return o==="string"?Ve(ae):o==="boolean"?Boolean(ae):ae}var O=Mu(i),K=[],E=0;if(R(o!=="array",'Return type should not be "array".'),p)for(var P=0;P<p.length;P++){var se=L[_[P]];se?(E===0&&(E=An()),K[P]=se(p[P])):K[P]=p[P]}var V=O.apply(null,K);function ge(ae){return E!==0&&jn(E),C(ae)}return V=ge(V),V}function Fu(){Di("fetchSettings")}var Sa={XML_GetBuffer:Oi,XML_GetErrorCode:Pi,XML_Parse:xi,XML_ParseBuffer:Ni,XML_ParserCreate:Ui,XML_ParserFree:tn,XML_ResumeParser:Bi,XML_SetCharacterDataHandler:rn,XML_SetElementHandler:nn,XML_SetUserData:wt,XML_StopParser:lt,__assert_fail:Hi,__dlsym:an,__syscall__newselect:Ru,__syscall_bind:qi,__syscall_connect:ju,__syscall_faccessat:Gi,__syscall_fcntl64:un,__syscall_fstat64:rr,__syscall_ftruncate64:ln,__syscall_getdents64:Yi,__syscall_getpeername:$i,__syscall_getsockopt:zi,__syscall_ioctl:Vi,__syscall_lstat64:Ki,__syscall_mkdirat:Xi,__syscall_newfstatat:Qi,__syscall_openat:Ji,__syscall_recvfrom:Zi,__syscall_renameat:es,__syscall_rmdir:ts,__syscall_sendto:rs,__syscall_socket:ns,__syscall_stat64:is,__syscall_unlinkat:Ht,__throw_exception_with_stack_trace:ss,_emscripten_get_now_is_monotonic:os,_localtime_js:_s,_tzset_js:ds,abort:fs,dlopen:ps,duckdb_web_fs_directory_create:ms,duckdb_web_fs_directory_exists:bs,duckdb_web_fs_directory_list_files:hs,duckdb_web_fs_directory_remove:gs,duckdb_web_fs_file_close:ys,duckdb_web_fs_file_exists:vs,duckdb_web_fs_file_get_last_modified_time:ws,duckdb_web_fs_file_move:Ss,duckdb_web_fs_file_open:Es,duckdb_web_fs_file_read:ks,duckdb_web_fs_file_truncate:Cs,duckdb_web_fs_file_write:Ts,duckdb_web_fs_get_default_data_protocol:Rs,duckdb_web_fs_glob:fn,duckdb_web_test_platform_feature:As,duckdb_web_udf_scalar_call:pn,emscripten_console_error:js,emscripten_date_now:Ds,emscripten_get_heap_max:Fr,emscripten_get_now:bn,emscripten_memcpy_big:Wt,emscripten_resize_heap:Ls,environ_get:Os,environ_sizes_get:Ps,fd_close:xs,fd_fdstat_get:Ns,fd_pread:Or,fd_pwrite:Pr,fd_read:Us,fd_seek:Bs,fd_sync:Hs,fd_write:qs,getaddrinfo:Gs,getentropy:Ys,getnameinfo:$s,strftime_l:Xs,ucnv_close_64:Qs,ucnv_convertEx_64:Js,ucnv_open_64:Zs,ucnv_toAlgorithmic_64:ea,ucsdet_close_64:ta,ucsdet_detect_64:ra,ucsdet_getConfidence_64:na,ucsdet_getName_64:ia,ucsdet_open_64:sa,ucsdet_setText_64:aa,unzClose:oa,unzCloseCurrentFile:ua,unzGetCurrentFileInfo:la,unzGetCurrentFileInfo64:ca,unzGetGlobalInfo:_a,unzGoToFirstFile:da,unzGoToNextFile:fa,unzLocateFile:pa,unzOpen:ma,unzOpen2:ba,unzOpenCurrentFile:ha,unzReadCurrentFile:ga},ld=ji(),cd=f("__wasm_call_ctors"),Iu=e._main=f("main"),_d=e._duckdb_web_fs_glob_add_path=f("duckdb_web_fs_glob_add_path"),dd=e._duckdb_web_clear_response=f("duckdb_web_clear_response"),fd=e._duckdb_web_fail_with=f("duckdb_web_fail_with"),pd=e._duckdb_web_reset=f("duckdb_web_reset"),md=e._duckdb_web_connect=f("duckdb_web_connect"),bd=e._duckdb_web_disconnect=f("duckdb_web_disconnect"),hd=e._duckdb_web_flush_files=f("duckdb_web_flush_files"),gd=e._duckdb_web_flush_file=f("duckdb_web_flush_file"),yd=e._duckdb_web_open=f("duckdb_web_open"),vd=e._duckdb_web_get_global_file_info=f("duckdb_web_get_global_file_info"),wd=e._duckdb_web_collect_file_stats=f("duckdb_web_collect_file_stats"),Sd=e._duckdb_web_export_file_stats=f("duckdb_web_export_file_stats"),Ed=e._duckdb_web_fs_drop_file=f("duckdb_web_fs_drop_file"),kd=e._duckdb_web_fs_drop_files=f("duckdb_web_fs_drop_files"),Cd=e._duckdb_web_fs_glob_file_infos=f("duckdb_web_fs_glob_file_infos"),Td=e._duckdb_web_fs_get_file_info_by_id=f("duckdb_web_fs_get_file_info_by_id"),Rd=e._duckdb_web_fs_get_file_info_by_name=f("duckdb_web_fs_get_file_info_by_name"),Ad=e._duckdb_web_fs_register_file_url=f("duckdb_web_fs_register_file_url"),jd=e._duckdb_web_fs_register_file_buffer=f("duckdb_web_fs_register_file_buffer"),Dd=e._duckdb_web_copy_file_to_buffer=f("duckdb_web_copy_file_to_buffer"),Md=e._duckdb_web_copy_file_to_path=f("duckdb_web_copy_file_to_path"),Ld=e._duckdb_web_get_version=f("duckdb_web_get_version"),Fd=e._duckdb_web_get_feature_flags=f("duckdb_web_get_feature_flags"),Id=e._duckdb_web_tokenize=f("duckdb_web_tokenize"),Od=e._duckdb_web_udf_scalar_create=f("duckdb_web_udf_scalar_create"),Pd=e._duckdb_web_prepared_create=f("duckdb_web_prepared_create"),xd=e._duckdb_web_prepared_close=f("duckdb_web_prepared_close"),Nd=e._duckdb_web_prepared_run=f("duckdb_web_prepared_run"),Ud=e._duckdb_web_prepared_send=f("duckdb_web_prepared_send"),Bd=e._duckdb_web_query_run=f("duckdb_web_query_run"),Hd=e._duckdb_web_pending_query_start=f("duckdb_web_pending_query_start"),Wd=e._duckdb_web_pending_query_poll=f("duckdb_web_pending_query_poll"),qd=e._duckdb_web_pending_query_cancel=f("duckdb_web_pending_query_cancel"),Ou=e._duckdb_web_query_fetch_results=f("duckdb_web_query_fetch_results"),Pu=e._duckdb_web_get_tablenames=f("duckdb_web_get_tablenames"),En=e._duckdb_web_insert_arrow_from_ipc_stream=f("duckdb_web_insert_arrow_from_ipc_stream"),kn=e._duckdb_web_insert_csv_from_path=f("duckdb_web_insert_csv_from_path"),Ea=e._duckdb_web_insert_json_from_path=f("duckdb_web_insert_json_from_path"),Ur=f("__errno_location"),xu=e._fflush=f("fflush"),ar=f("htonl"),Br=f("htons"),Cn=f("ntohs"),Gt=e._malloc=f("malloc"),Hr=e._free=f("free"),Wr=function(){return(Wr=e.asm.__trap).apply(null,arguments)},or=function(){return(or=e.asm.emscripten_stack_init).apply(null,arguments)},Tn=function(){return(Tn=e.asm.emscripten_stack_get_free).apply(null,arguments)},ka=function(){return(ka=e.asm.emscripten_stack_get_base).apply(null,arguments)},Rn=function(){return(Rn=e.asm.emscripten_stack_get_end).apply(null,arguments)},An=f("stackSave"),jn=f("stackRestore"),ur=f("stackAlloc"),Ca=function(){return(Ca=e.asm.emscripten_stack_get_current).apply(null,arguments)},Nu=e.___cxa_decrement_exception_refcount=f("__cxa_decrement_exception_refcount"),Uu=e.___cxa_increment_exception_refcount=f("__cxa_increment_exception_refcount"),Bu=e.___thrown_object_from_unwind_exception=f("__thrown_object_from_unwind_exception"),Hu=e.___get_exception_message=f("__get_exception_message"),Gd=e.dynCall_jiji=f("dynCall_jiji"),Yd=e.dynCall_iiiiij=f("dynCall_iiiiij"),$d=e.dynCall_iiiiijj=f("dynCall_iiiiijj"),zd=e.dynCall_iiiiiijj=f("dynCall_iiiiiijj"),Vd=e.dynCall_viijii=f("dynCall_viijii"),Kd=e.dynCall_viijji=f("dynCall_viijji"),Xd=e.dynCall_iiiji=f("dynCall_iiiji"),Qd=e.dynCall_ji=f("dynCall_ji"),Jd=e.dynCall_viij=f("dynCall_viij"),Zd=e.dynCall_vij=f("dynCall_vij"),ef=e.dynCall_vjjijij=f("dynCall_vjjijij"),tf=e.dynCall_vijjji=f("dynCall_vijjji"),rf=e.dynCall_vjjii=f("dynCall_vjjii"),nf=e.dynCall_viiiiiji=f("dynCall_viiiiiji"),sf=e.dynCall_jiiiji=f("dynCall_jiiiji"),af=e.dynCall_jiiij=f("dynCall_jiiij"),of=e.dynCall_jijjij=f("dynCall_jijjij"),uf=e.dynCall_iiij=f("dynCall_iiij"),lf=e.dynCall_vijjj=f("dynCall_vijjj"),cf=e.dynCall_vijj=f("dynCall_vijj"),_f=e.dynCall_viijj=f("dynCall_viijj"),df=e.dynCall_jiijii=f("dynCall_jiijii"),ff=e.dynCall_jijiii=f("dynCall_jijiii"),pf=e.dynCall_viijiiiii=f("dynCall_viijiiiii"),mf=e.dynCall_viijiiij=f("dynCall_viijiiij"),bf=e.dynCall_vijiiiji=f("dynCall_vijiiiji"),hf=e.dynCall_viiiij=f("dynCall_viiiij"),gf=e.dynCall_jiiji=f("dynCall_jiiji"),yf=e.dynCall_viiijij=f("dynCall_viiijij"),vf=e.dynCall_viijiij=f("dynCall_viijiij"),wf=e.dynCall_viiiiijj=f("dynCall_viiiiijj"),Sf=e.dynCall_viiijji=f("dynCall_viiijji"),Ef=e.dynCall_vijii=f("dynCall_vijii"),kf=e.dynCall_iiiiiji=f("dynCall_iiiiiji"),Cf=e.dynCall_iij=f("dynCall_iij"),Tf=e.dynCall_iiijj=f("dynCall_iiijj"),Rf=e.dynCall_iijii=f("dynCall_iijii"),Af=e.dynCall_viji=f("dynCall_viji"),jf=e.dynCall_iiji=f("dynCall_iiji"),Df=e.dynCall_viijjj=f("dynCall_viijjj"),Mf=e.dynCall_viiijj=f("dynCall_viiijj"),Lf=e.dynCall_jijj=f("dynCall_jijj"),Ff=e.dynCall_jiiiii=f("dynCall_jiiiii"),If=e.dynCall_jiiii=f("dynCall_jiiii"),Of=e.dynCall_jii=f("dynCall_jii"),Pf=e.dynCall_viijij=f("dynCall_viijij"),xf=e.dynCall_viiij=f("dynCall_viiij"),Nf=e.dynCall_j=f("dynCall_j"),Uf=e.dynCall_viiijiiiijj=f("dynCall_viiijiiiijj"),Bf=e.dynCall_jiiiij=f("dynCall_jiiiij"),Hf=e.dynCall_jj=f("dynCall_jj"),Wf=e.dynCall_ij=f("dynCall_ij"),qf=e.dynCall_ijjj=f("dynCall_ijjj"),Gf=e.dynCall_jjjd=f("dynCall_jjjd"),Yf=e.dynCall_jjjjjjd=f("dynCall_jjjjjjd"),$f=e.dynCall_jij=f("dynCall_jij"),zf=e.dynCall_viiijiiijii=f("dynCall_viiijiiijii"),Wu=e.dynCall_viijijiiii=f("dynCall_viijijiiii"),qu=e.dynCall_viiji=f("dynCall_viiji"),qr=e.dynCall_jiiiijj=f("dynCall_jiiiijj"),Gu=e.dynCall_viiiji=f("dynCall_viiiji"),Yu=e.dynCall_viiiiji=f("dynCall_viiiiji"),Ta=e.dynCall_jijiiii=f("dynCall_jijiiii"),$u=e.dynCall_viiijiji=f("dynCall_viiijiji"),Ra=e.dynCall_viijiji=f("dynCall_viijiji"),s=e.dynCall_jiii=f("dynCall_jiii");e.stackAlloc=ur,e.stackSave=An,e.stackRestore=jn,e.ccall=wa;var u=["getHostByName","traverseStack","getCallstack","emscriptenLog","convertPCtoSourceLocation","readEmAsmArgs","jstoi_s","listenOnce","autoResumeAudioContext","dynCallLegacy","getDynCaller","dynCall","runtimeKeepalivePush","runtimeKeepalivePop","callUserCallback","maybeExit","safeSetTimeout","asmjsMangle","asyncLoad","alignMemory","mmapAlloc","HandleAllocator","getNativeTypeSize","STACK_SIZE","STACK_ALIGN","POINTER_SIZE","ASSERTIONS","writeI53ToI64","writeI53ToI64Clamped","writeI53ToI64Signaling","writeI53ToU64Clamped","writeI53ToU64Signaling","readI53FromU64","convertI32PairToI53","convertU32PairToI53","cwrap","uleb128Encode","sigToWasmTypes","generateFuncType","convertJsFunctionToWasm","getEmptyTableSlot","updateTableMap","getFunctionAddress","addFunction","removeFunction","reallyNegative","unSign","strLen","reSign","formatString","intArrayToString","AsciiToString","UTF16ToString","stringToUTF16","lengthBytesUTF16","UTF32ToString","stringToUTF32","lengthBytesUTF32","registerKeyEventCallback","maybeCStringToJsString","findEventTarget","findCanvasEventTarget","getBoundingClientRect","fillMouseEventData","registerMouseEventCallback","registerWheelEventCallback","registerUiEventCallback","registerFocusEventCallback","fillDeviceOrientationEventData","registerDeviceOrientationEventCallback","fillDeviceMotionEventData","registerDeviceMotionEventCallback","screenOrientation","fillOrientationChangeEventData","registerOrientationChangeEventCallback","fillFullscreenChangeEventData","registerFullscreenChangeEventCallback","JSEvents_requestFullscreen","JSEvents_resizeCanvasForFullscreen","registerRestoreOldStyle","hideEverythingExceptGivenElement","restoreHiddenElements","setLetterbox","softFullscreenResizeWebGLRenderTarget","doRequestFullscreen","fillPointerlockChangeEventData","registerPointerlockChangeEventCallback","registerPointerlockErrorEventCallback","requestPointerLock","fillVisibilityChangeEventData","registerVisibilityChangeEventCallback","registerTouchEventCallback","fillGamepadEventData","registerGamepadEventCallback","registerBeforeUnloadEventCallback","fillBatteryEventData","battery","registerBatteryEventCallback","setCanvasElementSize","getCanvasElementSize","demangle","demangleAll","jsStackTrace","stackTrace","checkWasiClock","wasiRightsToMuslOFlags","wasiOFlagsToMuslOFlags","createDyncallWrapper","setImmediateWrapped","clearImmediateWrapped","polyfillSetImmediate","getPromise","makePromise","idsToPromises","makePromiseCallback","setMainLoop","heapObjectForWebGLType","heapAccessShiftForWebGLHeap","webgl_enable_ANGLE_instanced_arrays","webgl_enable_OES_vertex_array_object","webgl_enable_WEBGL_draw_buffers","webgl_enable_WEBGL_multi_draw","emscriptenWebGLGet","computeUnpackAlignedImageSize","colorChannelsInGlTextureFormat","emscriptenWebGLGetTexPixelData","__glGenObject","emscriptenWebGLGetUniform","webglGetUniformLocation","webglPrepareUniformLocationsBeforeFirstUse","webglGetLeftBracePos","emscriptenWebGLGetVertexAttrib","__glGetActiveAttribOrUniform","writeGLArray","registerWebGlEventCallback","runAndAbortIfError","SDL_unicode","SDL_ttfContext","SDL_audio","GLFW_Window","ALLOC_NORMAL","ALLOC_STACK","allocate","writeStringToMemory","writeAsciiToMemory"];u.forEach(Li);var d=["run","addOnPreRun","addOnInit","addOnPreMain","addOnExit","addOnPostRun","addRunDependency","removeRunDependency","FS_createFolder","FS_createPath","FS_createDataFile","FS_createLazyFile","FS_createLink","FS_createDevice","FS_unlink","out","err","callMain","abort","keepRuntimeAlive","wasmMemory","getTempRet0","setTempRet0","writeStackCookie","checkStackCookie","ptrToString","zeroMemory","exitJS","getHeapMax","emscripten_realloc_buffer","ENV","MONTH_DAYS_REGULAR","MONTH_DAYS_LEAP","MONTH_DAYS_REGULAR_CUMULATIVE","MONTH_DAYS_LEAP_CUMULATIVE","isLeapYear","ydayFromDate","arraySum","addDays","ERRNO_CODES","ERRNO_MESSAGES","setErrNo","inetPton4","inetNtop4","inetPton6","inetNtop6","readSockaddr","writeSockaddr","DNS","Protocols","Sockets","initRandomFill","randomFill","timers","warnOnce","UNWIND_CACHE","readEmAsmArgsArray","jstoi_q","getExecutableName","handleException","readI53FromI64","convertI32PairToI53Checked","getCFunc","freeTableIndexes","functionsInTableMap","setValue","getValue","PATH","PATH_FS","UTF8Decoder","UTF8ArrayToString","UTF8ToString","stringToUTF8Array","stringToUTF8","lengthBytesUTF8","intArrayFromString","stringToAscii","UTF16Decoder","stringToNewUTF8","stringToUTF8OnStack","writeArrayToMemory","JSEvents","specialHTMLTargets","currentFullscreenStrategy","restoreOldWindowedStyle","ExitStatus","getEnvStrings","flush_NO_FILESYSTEM","dlopenMissingError","promiseMap","getExceptionMessageCommon","getCppExceptionTag","getCppExceptionThrownObjectFromWebAssemblyException","incrementExceptionRefcount","decrementExceptionRefcount","getExceptionMessage","Browser","wget","SYSCALLS","getSocketFromFD","getSocketAddress","tempFixedLengthArray","miniTempWebGLFloatBuffers","miniTempWebGLIntBuffers","GL","emscripten_webgl_power_preferences","AL","GLUT","EGL","GLEW","IDBStore","SDL","SDL_gfx","GLFW","allocateUTF8","allocateUTF8OnStack","SOCKFS","FS"];d.forEach(Ar);var h;ot=function i(){h||M(),h||(ot=i)};function F(){R(Be==0,'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])'),R(Me.length==0,"cannot call main when preRun functions remain to be called");var i=Iu,o=0,_=0;try{var p=i(o,_);return va(p,!0),p}catch(j){return Sn(j)}}function G(){or(),ue()}function M(){if(Be>0||(G(),hi(),Be>0))return;function i(){h||(h=!0,e.calledRun=!0,!re&&(gi(),yi(),n(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),ee&&F(),vi()))}e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1),i()},1)):i(),pe()}function U(){var i=Y,o=S,_=!1;Y=S=p=>{_=!0};try{Ws()}catch{}Y=i,S=o,_&&(it("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc."),it("(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)"))}if(e.preInit)for(typeof e.preInit=="function"&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();var ee=!0;return e.noInitialRun&&(ee=!1),M(),t.ready}})(),nd=Sg;var bi=class extends vr{constructor(t,e,n,a=null){super(t,e,n,a)}instantiateImpl(t){return nd({...t,instantiateWasm:this.instantiateWasm.bind(this),locateFile:this.locateFile.bind(this)})}};async function Eg(r,t,e){return(await xn()).wasmExceptions&&r.eh?new bi(t,e,r.eh.mainModule):new pi(t,e,r.mvp.mainModule)}0&&(module.exports={ConsoleLogger,DEFAULT_RUNTIME,DuckDBAccessMode,DuckDBBindingsBase,DuckDBConnection,DuckDBDataProtocol,DuckDBFeature,FileFlags,FileStatistics,JSONTableShape,LogEvent,LogLevel,LogOrigin,LogTopic,NODE_RUNTIME,PACKAGE_NAME,PACKAGE_VERSION,PACKAGE_VERSION_MAJOR,PACKAGE_VERSION_MINOR,PACKAGE_VERSION_PATCH,PreparedStatement,ResultStreamIterator,StatusCode,VoidLogger,callSRet,copyBuffer,createDuckDB,decodeText,dropResponseBuffers,failWith,getJsDelivrBundles,getLogEventLabel,getLogLevelLabel,getLogOriginLabel,getLogTopicLabel,getPlatformFeatures,isFirefox,isNode,isSafari,readString,selectBundle});
/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */
/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */
/*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */
/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */
/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
//# sourceMappingURL=data:application/json;base64,
