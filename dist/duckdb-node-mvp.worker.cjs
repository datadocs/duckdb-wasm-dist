"use strict";var _f=Object.create;var Kt=Object.defineProperty;var df=Object.getOwnPropertyDescriptor;var pf=Object.getOwnPropertyNames;var hf=Object.getPrototypeOf,mf=Object.prototype.hasOwnProperty;var k=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),gf=(r,e)=>{for(var t in e)Kt(r,t,{get:e[t],enumerable:!0})},ri=(r,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of pf(e))!mf.call(r,s)&&s!==t&&Kt(r,s,{get:()=>e[s],enumerable:!(n=df(e,s))||n.enumerable});return r};var rt=(r,e,t)=>(t=r!=null?_f(hf(r)):{},ri(e||!r||!r.__esModule?Kt(t,"default",{value:r,enumerable:!0}):t,r)),bf=r=>ri(Kt({},"__esModule",{value:!0}),r);var qr=k((Yt,$r)=>{"use strict";var Ur=(()=>{var r=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(r=r||__filename),function(e={}){var t=typeof e<"u"?e:{},n,s;t.ready=new Promise((i,o)=>{n=i,s=o});var a=Object.assign({},t),u=[],f="./this.program",d=(i,o)=>{throw o},y=typeof window=="object",p=typeof importScripts=="function",v=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",m="";function G(i){return t.locateFile?t.locateFile(i,m):m+i}var D,C,O,H;if(v){var te=require("fs"),J=require("path");p?m=J.dirname(m)+"/":m=__dirname+"/",D=(i,o)=>(i=Cs(i)?new URL(i):J.normalize(i),te.readFileSync(i,o?void 0:"utf8")),O=i=>{var o=D(i,!0);return o.buffer||(o=new Uint8Array(o)),o},C=(i,o,c,_=!0)=>{i=Cs(i)?new URL(i):J.normalize(i),te.readFile(i,_?void 0:"utf8",(b,T)=>{b?c(b):o(_?T.buffer:T)})},!t.thisProgram&&process.argv.length>1&&(f=process.argv[1].replace(/\\/g,"/")),u=process.argv.slice(2),d=(i,o)=>{throw process.exitCode=i,o},t.inspect=()=>"[Emscripten Module object]"}else(y||p)&&(p?m=self.location.href:typeof document<"u"&&document.currentScript&&(m=document.currentScript.src),r&&(m=r),m.indexOf("blob:")!==0?m=m.substr(0,m.replace(/[?#].*/,"").lastIndexOf("/")+1):m="",D=i=>{var o=new XMLHttpRequest;return o.open("GET",i,!1),o.send(null),o.responseText},p&&(O=i=>{var o=new XMLHttpRequest;return o.open("GET",i,!1),o.responseType="arraybuffer",o.send(null),new Uint8Array(o.response)}),C=(i,o,c)=>{var _=new XMLHttpRequest;_.open("GET",i,!0),_.responseType="arraybuffer",_.onload=()=>{if(_.status==200||_.status==0&&_.response){o(_.response);return}c()},_.onerror=c,_.send(null)},H=i=>document.title=i);var he=t.print||console.log.bind(console),w=t.printErr||console.error.bind(console);Object.assign(t,a),a=null,t.arguments&&(u=t.arguments),t.thisProgram&&(f=t.thisProgram),t.quit&&(d=t.quit);var Z;t.wasmBinary&&(Z=t.wasmBinary);var $=t.noExitRuntime||!0;typeof WebAssembly!="object"&&q("no native wasm support detected");var M,I=!1,Y;function g(i,o){i||q(o)}var B,x,re,h,l,N,Q,Pe;function Ae(){var i=M.buffer;t.HEAP8=B=new Int8Array(i),t.HEAP16=re=new Int16Array(i),t.HEAP32=l=new Int32Array(i),t.HEAPU8=x=new Uint8Array(i),t.HEAPU16=h=new Uint16Array(i),t.HEAPU32=N=new Uint32Array(i),t.HEAPF32=Q=new Float32Array(i),t.HEAPF64=Pe=new Float64Array(i)}var ve,et=[],xt=[],lt=[],Le=[],j=!1,ft=0;function Ir(){return $||ft>0}function P(){if(t.preRun)for(typeof t.preRun=="function"&&(t.preRun=[t.preRun]);t.preRun.length;)_e(t.preRun.shift());Lt(et)}function ae(){j=!0,Lt(xt)}function A(){Lt(lt)}function W(){if(t.postRun)for(typeof t.postRun=="function"&&(t.postRun=[t.postRun]);t.postRun.length;)de(t.postRun.shift());Lt(Le)}function _e(i){et.unshift(i)}function me(i){xt.unshift(i)}function de(i){Le.unshift(i)}var Oe=0,Ve=null,Tt=null;function tu(i){Oe++,t.monitorRunDependencies&&t.monitorRunDependencies(Oe)}function ru(i){if(Oe--,t.monitorRunDependencies&&t.monitorRunDependencies(Oe),Oe==0&&(Ve!==null&&(clearInterval(Ve),Ve=null),Tt)){var o=Tt;Tt=null,o()}}function q(i){t.onAbort&&t.onAbort(i),i="Aborted("+i+")",w(i),I=!0,Y=1,i+=". Build with -sASSERTIONS for more info.";var o=new WebAssembly.RuntimeError(i);throw s(o),o}var nu="data:application/octet-stream;base64,";function Ps(i){return i.startsWith(nu)}function Cs(i){return i.startsWith("file://")}var _t;_t="./duckdb-mvp.wasm",Ps(_t)||(_t=G(_t));function Is(i){try{if(i==_t&&Z)return new Uint8Array(Z);if(O)return O(i);throw"both async and sync fetching of the wasm failed"}catch(o){q(o)}}function su(i){return!Z&&(y||p)&&typeof fetch=="function"?fetch(i,{credentials:"same-origin"}).then(o=>{if(!o.ok)throw"failed to load wasm binary file at '"+i+"'";return o.arrayBuffer()}).catch(()=>Is(i)):Promise.resolve().then(()=>Is(i))}function Fs(i,o,c){return su(i).then(_=>WebAssembly.instantiate(_,o)).then(_=>_).then(c,_=>{w("failed to asynchronously prepare wasm: "+_),q(_)})}function iu(i,o,c,_){return!i&&typeof WebAssembly.instantiateStreaming=="function"&&!Ps(o)&&!v&&typeof fetch=="function"?fetch(o,{credentials:"same-origin"}).then(b=>{var T=WebAssembly.instantiateStreaming(b,c);return T.then(_,function(S){return w("wasm streaming compile failed: "+S),w("falling back to ArrayBuffer instantiation"),Fs(o,c,_)})}):Fs(o,c,_)}function au(){var i={a:yl};function o(_,b){var T=_.exports;return t.asm=T,M=t.asm.Ra,Ae(),ve=t.asm.Ua,me(t.asm.Sa),ru("wasm-instantiate"),T}tu("wasm-instantiate");function c(_){o(_.instance)}if(t.instantiateWasm)try{return t.instantiateWasm(i,o)}catch(_){w("Module.instantiateWasm callback failed with error: "+_),s(_)}return iu(Z,_t,i,c).catch(s),{}}var Ce,dt;function Ms(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}function Lt(i){for(;i.length>0;)i.shift()(t)}function ou(){w("missing function: XML_GetBuffer"),q(-1)}function uu(){w("missing function: XML_GetErrorCode"),q(-1)}function cu(){w("missing function: XML_Parse"),q(-1)}function lu(){w("missing function: XML_ParseBuffer"),q(-1)}function fu(){w("missing function: XML_ParserCreate"),q(-1)}function _u(){w("missing function: XML_ParserFree"),q(-1)}function du(){w("missing function: XML_ResumeParser"),q(-1)}function pu(){w("missing function: XML_SetCharacterDataHandler"),q(-1)}function hu(){w("missing function: XML_SetElementHandler"),q(-1)}function mu(){w("missing function: XML_SetUserData"),q(-1)}function gu(){w("missing function: XML_StopParser"),q(-1)}function bu(i){this.excPtr=i,this.ptr=i-24,this.set_type=function(o){N[this.ptr+4>>>2]=o},this.get_type=function(){return N[this.ptr+4>>>2]},this.set_destructor=function(o){N[this.ptr+8>>>2]=o},this.get_destructor=function(){return N[this.ptr+8>>>2]},this.set_caught=function(o){o=o?1:0,B[this.ptr+12>>>0]=o},this.get_caught=function(){return B[this.ptr+12>>>0]!=0},this.set_rethrown=function(o){o=o?1:0,B[this.ptr+13>>>0]=o},this.get_rethrown=function(){return B[this.ptr+13>>>0]!=0},this.init=function(o,c){this.set_adjusted_ptr(0),this.set_type(o),this.set_destructor(c)},this.set_adjusted_ptr=function(o){N[this.ptr+16>>>2]=o},this.get_adjusted_ptr=function(){return N[this.ptr+16>>>2]},this.get_exception_ptr=function(){var o=Js(this.get_type());if(o)return N[this.excPtr>>>2];var c=this.get_adjusted_ptr();return c!==0?c:this.excPtr}}var Os=0,yu=0;function Su(i,o,c){var _=new bu(i);throw _.init(o,c),Os=i,yu++,Os}var xs="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function Eu(i,o,c){q(xs)}var Ls=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function Bs(i,o,c){o>>>=0;for(var _=o+c,b=o;i[b]&&!(b>=_);)++b;if(b-o>16&&i.buffer&&Ls)return Ls.decode(i.subarray(o,b));for(var T="";o<b;){var S=i[o++];if(!(S&128)){T+=String.fromCharCode(S);continue}var R=i[o++]&63;if((S&224)==192){T+=String.fromCharCode((S&31)<<6|R);continue}var F=i[o++]&63;if((S&240)==224?S=(S&15)<<12|R<<6|F:S=(S&7)<<18|R<<12|F<<6|i[o++]&63,S<65536)T+=String.fromCharCode(S);else{var V=S-65536;T+=String.fromCharCode(55296|V>>10,56320|V&1023)}}return T}function pt(i,o){return i>>>=0,i?Bs(x,i,o):""}var tt={varargs:void 0,get:function(){tt.varargs+=4;var i=l[tt.varargs-4>>>2];return i},getStr:function(i){var o=pt(i);return o}};function vu(i,o,c,_,b){for(var T=0,S=o?l[o>>>2]:0,R=o?l[o+4>>>2]:0,F=c?l[c>>>2]:0,V=c?l[c+4>>>2]:0,X=_?l[_>>>2]:0,ye=_?l[_+4>>>2]:0,ee=0,Te=0,ce=0,ge=0,xe=0,We=0,E=(o?l[o>>>2]:0)|(c?l[c>>>2]:0)|(_?l[_>>>2]:0),L=(o?l[o+4>>>2]:0)|(c?l[c+4>>>2]:0)|(_?l[_+4>>>2]:0),ie=function(cf,lf,ff,ti){return cf<32?lf&ti:ff&ti},se=0;se<i;se++){var we=1<<se%32;if(ie(se,E,L,we)){var Ct=tt.getStreamFromFD(se),jt=tt.DEFAULT_POLLMASK;Ct.stream_ops.poll&&(jt=Ct.stream_ops.poll(Ct)),jt&1&&ie(se,S,R,we)&&(se<32?ee=ee|we:Te=Te|we,T++),jt&4&&ie(se,F,V,we)&&(se<32?ce=ce|we:ge=ge|we,T++),jt&2&&ie(se,X,ye,we)&&(se<32?xe=xe|we:We=We|we,T++)}}return o&&(l[o>>>2]=ee,l[o+4>>>2]=Te),c&&(l[c>>>2]=ce,l[c+4>>>2]=ge),_&&(l[_>>>2]=xe,l[_+4>>>2]=We),T}function wu(){w("missing function: $SOCKFS"),q(-1)}function Ns(){w("missing function: $FS"),q(-1)}function kt(i){var o=wu.getSocket(i);if(!o)throw new Ns.ErrnoError(8);return o}function Fr(i){return(i&255)+"."+(i>>8&255)+"."+(i>>16&255)+"."+(i>>24&255)}function Hs(i){var o="",c=0,_=0,b=0,T=0,S=0,R=0,F=[i[0]&65535,i[0]>>16,i[1]&65535,i[1]>>16,i[2]&65535,i[2]>>16,i[3]&65535,i[3]>>16],V=!0,X="";for(R=0;R<5;R++)if(F[R]!==0){V=!1;break}if(V){if(X=Fr(F[6]|F[7]<<16),F[5]===-1)return o="::ffff:",o+=X,o;if(F[5]===0)return o="::",X==="0.0.0.0"&&(X=""),X==="0.0.0.1"&&(X="1"),o+=X,o}for(c=0;c<8;c++)F[c]===0&&(c-b>1&&(S=0),b=c,S++),S>_&&(_=S,T=c-_+1);for(c=0;c<8;c++){if(_>1&&F[c]===0&&c>=T&&c<T+_){c===T&&(o+=":",T===0&&(o+=":"));continue}o+=Number(Br(F[c]&65535)).toString(16),o+=c<7?":":""}return o}function Us(i,o){var c=re[i>>>1],_=Br(h[i+2>>>1]),b;switch(c){case 2:if(o!==16)return{errno:28};b=l[i+4>>>2],b=Fr(b);break;case 10:if(o!==28)return{errno:28};b=[l[i+8>>>2],l[i+12>>>2],l[i+16>>>2],l[i+20>>>2]],b=Hs(b);break;default:return{errno:5}}return{family:c,addr:b,port:_}}function Bt(i){for(var o=i.split("."),c=0;c<4;c++){var _=Number(o[c]);if(isNaN(_))return null;o[c]=_}return(o[0]|o[1]<<8|o[2]<<16|o[3]<<24)>>>0}function Nt(i){return parseInt(i)}function Mr(i){var o,c,_,b,T=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,S=[];if(!T.test(i))return null;if(i==="::")return[0,0,0,0,0,0,0,0];for(i.startsWith("::")?i=i.replace("::","Z:"):i=i.replace("::",":Z:"),i.indexOf(".")>0?(i=i.replace(new RegExp("[.]","g"),":"),o=i.split(":"),o[o.length-4]=Nt(o[o.length-4])+Nt(o[o.length-3])*256,o[o.length-3]=Nt(o[o.length-2])+Nt(o[o.length-1])*256,o=o.slice(0,o.length-2)):o=i.split(":"),_=0,b=0,c=0;c<o.length;c++)if(typeof o[c]=="string")if(o[c]==="Z"){for(b=0;b<8-o.length+1;b++)S[c+b]=0;_=b-1}else S[c+_]=$t(parseInt(o[c],16));else S[c+_]=o[c];return[S[1]<<16|S[0],S[3]<<16|S[2],S[5]<<16|S[4],S[7]<<16|S[6]]}var Ie={address_map:{id:1,addrs:{},names:{}},lookup_name:function(i){var o=Bt(i);if(o!==null||(o=Mr(i),o!==null))return i;var c;if(Ie.address_map.addrs[i])c=Ie.address_map.addrs[i];else{var _=Ie.address_map.id++;g(_<65535,"exceeded max address mappings of 65535"),c="172.29."+(_&255)+"."+(_&65280),Ie.address_map.names[c]=i,Ie.address_map.addrs[i]=c}return c},lookup_addr:function(i){return Ie.address_map.names[i]?Ie.address_map.names[i]:null}};function $s(i,o,c){if(c&&i===0)return null;var _=Us(i,o);if(_.errno)throw new Ns.ErrnoError(_.errno);return _.addr=Ie.lookup_addr(_.addr)||_.addr,_}function Ru(i,o,c,_,b,T){var S=kt(i),R=$s(o,c);return S.sock_ops.bind(S,R.addr,R.port),0}function Au(i,o,c,_,b,T){var S=kt(i),R=$s(o,c);return S.sock_ops.connect(S,R.addr,R.port),0}function Tu(i,o,c,_){}function ku(i,o,c){return tt.varargs=c,0}function Du(i,o){}function Pu(i,o,c){}function qs(i,o,c,_){if(c>>>=0,!(_>0))return 0;for(var b=c,T=c+_-1,S=0;S<i.length;++S){var R=i.charCodeAt(S);if(R>=55296&&R<=57343){var F=i.charCodeAt(++S);R=65536+((R&1023)<<10)|F&1023}if(R<=127){if(c>=T)break;o[c++>>>0]=R}else if(R<=2047){if(c+1>=T)break;o[c++>>>0]=192|R>>6,o[c++>>>0]=128|R&63}else if(R<=65535){if(c+2>=T)break;o[c++>>>0]=224|R>>12,o[c++>>>0]=128|R>>6&63,o[c++>>>0]=128|R&63}else{if(c+3>=T)break;o[c++>>>0]=240|R>>18,o[c++>>>0]=128|R>>12&63,o[c++>>>0]=128|R>>6&63,o[c++>>>0]=128|R&63}}return o[c>>>0]=0,c-b}function Ht(i,o,c){return qs(i,x,o,c)}function Cu(i,o,c){}function Ws(i,o){return x.fill(0,i,i+o),i}function Or(i,o,c,_,b){switch(o){case 2:c=Bt(c),Ws(i,16),b&&(l[b>>>2]=16),re[i>>>1]=o,l[i+4>>>2]=c,re[i+2>>>1]=$t(_);break;case 10:c=Mr(c),Ws(i,28),b&&(l[b>>>2]=28),l[i>>>2]=o,l[i+8>>>2]=c[0],l[i+12>>>2]=c[1],l[i+16>>>2]=c[2],l[i+20>>>2]=c[3],re[i+2>>>1]=$t(_);break;default:return 5}return 0}function Iu(i,o,c,_,b,T){var S=kt(i);if(!S.daddr)return-53;var R=Or(o,S.family,Ie.lookup_name(S.daddr),S.dport,c);return 0}function Fu(i,o,c,_,b,T){var S=kt(i);return o===1&&c===4?(l[_>>>2]=S.error,l[b>>>2]=4,S.error=null,0):-50}function Mu(i,o,c){return tt.varargs=c,0}function Ou(i,o){}function xu(i,o,c){}function Lu(i,o,c,_){}function Bu(i,o,c,_){tt.varargs=_}function Nu(i,o,c,_,b,T){var S=kt(i),R=S.sock_ops.recvmsg(S,c);if(!R)return 0;if(b)var F=Or(b,S.family,Ie.lookup_name(R.addr),R.port,T);return x.set(R.buffer,o>>>0),R.buffer.byteLength}function Hu(i,o,c,_){}function Uu(i){}function $u(i,o,c,_,b,T){}function qu(i,o,c){}function Wu(i,o){}function Gu(i,o,c){}var ju=!0;function Ku(){return ju}function Vu(i){return N[i>>>2]+l[i+4>>>2]*4294967296}function Dt(i){return i%4===0&&(i%100!==0||i%400===0)}var zu=[0,31,60,91,121,152,182,213,244,274,305,335],Yu=[0,31,59,90,120,151,181,212,243,273,304,334];function Qu(i){var o=Dt(i.getFullYear()),c=o?zu:Yu,_=c[i.getMonth()]+i.getDate()-1;return _}function Xu(i,o){var c=new Date(Vu(i)*1e3);l[o>>>2]=c.getSeconds(),l[o+4>>>2]=c.getMinutes(),l[o+8>>>2]=c.getHours(),l[o+12>>>2]=c.getDate(),l[o+16>>>2]=c.getMonth(),l[o+20>>>2]=c.getFullYear()-1900,l[o+24>>>2]=c.getDay();var _=Qu(c)|0;l[o+28>>>2]=_,l[o+36>>>2]=-(c.getTimezoneOffset()*60);var b=new Date(c.getFullYear(),0,1),T=new Date(c.getFullYear(),6,1).getTimezoneOffset(),S=b.getTimezoneOffset(),R=(T!=S&&c.getTimezoneOffset()==Math.min(S,T))|0;l[o+32>>>2]=R}function xr(i){for(var o=0,c=0;c<i.length;++c){var _=i.charCodeAt(c);_<=127?o++:_<=2047?o+=2:_>=55296&&_<=57343?(o+=4,++c):o+=3}return o}function Gs(i){var o=xr(i)+1,c=qt(o);return c&&Ht(i,c,o),c}function Ju(i,o,c){var _=new Date().getFullYear(),b=new Date(_,0,1),T=new Date(_,6,1),S=b.getTimezoneOffset(),R=T.getTimezoneOffset(),F=Math.max(S,R);N[i>>>2]=F*60,l[o>>>2]=+(S!=R);function V(ce){var ge=ce.toTimeString().match(/\(([A-Za-z ]+)\)$/);return ge?ge[1]:"GMT"}var X=V(b),ye=V(T),ee=Gs(X),Te=Gs(ye);R<S?(N[c>>>2]=ee,N[c+4>>>2]=Te):(N[c>>>2]=Te,N[c+4>>>2]=ee)}function Zu(){q("")}function ec(i,o){q(xs)}function tc(i,o){return globalThis.DUCKDB_RUNTIME.createDirectory(t,i,o)}function rc(i,o){return globalThis.DUCKDB_RUNTIME.checkDirectory(t,i,o)}function nc(i,o){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(t,i,o)}function sc(i,o){return globalThis.DUCKDB_RUNTIME.removeDirectory(t,i,o)}function ic(i){return globalThis.DUCKDB_RUNTIME.closeFile(t,i)}function ac(i,o){return globalThis.DUCKDB_RUNTIME.checkFile(t,i,o)}function oc(i){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(t,i)}function uc(i,o,c,_){return globalThis.DUCKDB_RUNTIME.moveFile(t,i,o,c,_)}function cc(i,o){return globalThis.DUCKDB_RUNTIME.openFile(t,i,o)}function lc(i,o,c,_){return globalThis.DUCKDB_RUNTIME.readFile(t,i,o,c,_)}function fc(i,o){return globalThis.DUCKDB_RUNTIME.truncateFile(t,i,o)}function _c(i,o,c,_){return globalThis.DUCKDB_RUNTIME.writeFile(t,i,o,c,_)}function dc(i){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(i)}function pc(i,o){return globalThis.DUCKDB_RUNTIME.glob(t,i,o)}function hc(i){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(t,i)}function mc(i,o,c,_,b,T){return globalThis.DUCKDB_RUNTIME.callScalarUDF(t,i,o,c,_,b,T)}function gc(){return Date.now()}function js(){return 4294901760}function bc(){return js()}var Ks;v&&(global.performance=require("perf_hooks").performance),Ks=()=>performance.now();function yc(i,o,c){x.copyWithin(i>>>0,o>>>0,o+c>>>0)}function Sc(i){var o=M.buffer,c=i-o.byteLength+65535>>>16;try{return M.grow(c),Ae(),1}catch{}}function Ec(i){var o=x.length;i=i>>>0;var c=js();if(i>c)return!1;for(var _=(F,V)=>F+(V-F%V)%V,b=1;b<=4;b*=2){var T=o*(1+.2/b);T=Math.min(T,i+100663296);var S=Math.min(c,_(Math.max(i,T),65536)),R=Sc(S);if(R)return!0}return!1}var Lr={};function vc(){return f||"./this.program"}function Pt(){if(!Pt.strings){var i=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",o={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:i,_:vc()};for(var c in Lr)Lr[c]===void 0?delete o[c]:o[c]=Lr[c];var _=[];for(var c in o)_.push(`${c}=${o[c]}`);Pt.strings=_}return Pt.strings}function wc(i,o){for(var c=0;c<i.length;++c)B[o++>>>0]=i.charCodeAt(c);B[o>>>0]=0}function Rc(i,o){var c=0;return Pt().forEach(function(_,b){var T=o+c;N[i+b*4>>>2]=T,wc(_,T),c+=_.length+1}),0}function Ac(i,o){var c=Pt();N[i>>>2]=c.length;var _=0;return c.forEach(function(b){_+=b.length+1}),N[o>>>2]=_,0}function Tc(i){return 52}function kc(i,o){var c=0,_=0,b=0;{var T=2;i==0?c=2:(i==1||i==2)&&(c=64),b=1}return B[o>>>0]=T,re[o+2>>>1]=b,dt=[c>>>0,(Ce=c,+Math.abs(Ce)>=1?Ce>0?+Math.floor(Ce/4294967296)>>>0:~~+Math.ceil((Ce-+(~~Ce>>>0))/4294967296)>>>0:0)],l[o+8>>>2]=dt[0],l[o+12>>>2]=dt[1],dt=[_>>>0,(Ce=_,+Math.abs(Ce)>=1?Ce>0?+Math.floor(Ce/4294967296)>>>0:~~+Math.ceil((Ce-+(~~Ce>>>0))/4294967296)>>>0:0)],l[o+16>>>2]=dt[0],l[o+20>>>2]=dt[1],0}function Dc(i,o,c,_,b,T){return 52}function Pc(i,o,c,_,b,T){return 52}function Cc(i,o,c,_){return 52}function Ic(i,o,c,_,b){return 70}function Fc(i){return 52}var Mc=[null,[],[]];function Oc(i,o){var c=Mc[i];o===0||o===10?((i===1?he:w)(Bs(c,0)),c.length=0):c.push(o)}function xc(i,o,c,_){for(var b=0,T=0;T<c;T++){var S=N[o>>>2],R=N[o+4>>>2];o+=8;for(var F=0;F<R;F++)Oc(i,x[S+F>>>0]);b+=R}return N[_>>>2]=b,0}function Lc(i,o,c,_){var b=0,T=0,S=0,R=0,F=0,V=0,X;function ye(ee,Te,ce,ge,xe,We){var E,L,ie,se;return L=ee===10?28:16,xe=ee===10?Hs(xe):Fr(xe),E=qt(L),se=Or(E,ee,xe,We),g(!se),ie=qt(32),l[ie+4>>>2]=ee,l[ie+8>>>2]=Te,l[ie+12>>>2]=ce,N[ie+24>>>2]=ge,N[ie+20>>>2]=E,ee===10?l[ie+16>>>2]=28:l[ie+16>>>2]=16,l[ie+28>>>2]=0,ie}if(c&&(S=l[c>>>2],R=l[c+4>>>2],F=l[c+8>>>2],V=l[c+12>>>2]),F&&!V&&(V=F===2?17:6),!F&&V&&(F=V===17?2:1),V===0&&(V=6),F===0&&(F=1),!i&&!o)return-2;if(S&-1088||c!==0&&l[c>>>2]&2&&!i)return-1;if(S&32)return-2;if(F!==0&&F!==1&&F!==2)return-7;if(R!==0&&R!==2&&R!==10)return-6;if(o&&(o=pt(o),T=parseInt(o,10),isNaN(T)))return S&1024?-2:-8;if(!i)return R===0&&(R=2),S&1||(R===2?b=Ut(2130706433):b=[0,0,0,1]),X=ye(R,F,V,null,b,T),N[_>>>2]=X,0;if(i=pt(i),b=Bt(i),b!==null)if(R===0||R===2)R=2;else if(R===10&&S&8)b=[0,0,Ut(65535),b],R=10;else return-2;else if(b=Mr(i),b!==null)if(R===0||R===10)R=10;else return-2;return b!=null?(X=ye(R,F,V,i,b,T),N[_>>>2]=X,0):S&4?-2:(i=Ie.lookup_name(i),b=Bt(i),R===0?R=2:R===10&&(b=[0,0,Ut(65535),b]),X=ye(R,F,V,null,b,T),N[_>>>2]=X,0)}function Bc(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return _=>crypto.getRandomValues(_);if(v)try{var i=require("crypto"),o=i.randomFillSync;if(o)return _=>i.randomFillSync(_);var c=i.randomBytes;return _=>(_.set(c(_.byteLength)),_)}catch{}q("initRandomDevice")}function Vs(i){return(Vs=Bc())(i)}function Nc(i,o){return Vs(x.subarray(i>>>0,i+o>>>0)),0}function Hc(i,o,c,_,b,T,S){var R=Us(i,o);if(R.errno)return-6;var F=R.port,V=R.addr,X=!1;if(c&&_){var ye;if(S&1||!(ye=Ie.lookup_addr(V))){if(S&8)return-2}else V=ye;var ee=Ht(V,c,_);ee+1>=_&&(X=!0)}if(b&&T){F=""+F;var ee=Ht(F,b,T);ee+1>=T&&(X=!0)}return X?-12:0}function Uc(i,o){for(var c=0,_=0;_<=o;c+=i[_++]);return c}var zs=[31,29,31,30,31,30,31,31,30,31,30,31],Ys=[31,28,31,30,31,30,31,31,30,31,30,31];function $c(i,o){for(var c=new Date(i.getTime());o>0;){var _=Dt(c.getFullYear()),b=c.getMonth(),T=(_?zs:Ys)[b];if(o>T-c.getDate())o-=T-c.getDate()+1,c.setDate(1),b<11?c.setMonth(b+1):(c.setMonth(0),c.setFullYear(c.getFullYear()+1));else return c.setDate(c.getDate()+o),c}return c}function qc(i,o,c){var _=c>0?c:xr(i)+1,b=new Array(_),T=qs(i,b,0,b.length);return o&&(b.length=T),b}function Qs(i,o){B.set(i,o>>>0)}function Wc(i,o,c,_){var b=l[_+40>>>2],T={tm_sec:l[_>>>2],tm_min:l[_+4>>>2],tm_hour:l[_+8>>>2],tm_mday:l[_+12>>>2],tm_mon:l[_+16>>>2],tm_year:l[_+20>>>2],tm_wday:l[_+24>>>2],tm_yday:l[_+28>>>2],tm_isdst:l[_+32>>>2],tm_gmtoff:l[_+36>>>2],tm_zone:b?pt(b):""},S=pt(c),R={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var F in R)S=S.replace(new RegExp(F,"g"),R[F]);var V=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],X=["January","February","March","April","May","June","July","August","September","October","November","December"];function ye(E,L,ie){for(var se=typeof E=="number"?E.toString():E||"";se.length<L;)se=ie[0]+se;return se}function ee(E,L){return ye(E,L,"0")}function Te(E,L){function ie(we){return we<0?-1:we>0?1:0}var se;return(se=ie(E.getFullYear()-L.getFullYear()))===0&&(se=ie(E.getMonth()-L.getMonth()))===0&&(se=ie(E.getDate()-L.getDate())),se}function ce(E){switch(E.getDay()){case 0:return new Date(E.getFullYear()-1,11,29);case 1:return E;case 2:return new Date(E.getFullYear(),0,3);case 3:return new Date(E.getFullYear(),0,2);case 4:return new Date(E.getFullYear(),0,1);case 5:return new Date(E.getFullYear()-1,11,31);case 6:return new Date(E.getFullYear()-1,11,30)}}function ge(E){var L=$c(new Date(E.tm_year+1900,0,1),E.tm_yday),ie=new Date(L.getFullYear(),0,4),se=new Date(L.getFullYear()+1,0,4),we=ce(ie),Ct=ce(se);return Te(we,L)<=0?Te(Ct,L)<=0?L.getFullYear()+1:L.getFullYear():L.getFullYear()-1}var xe={"%a":function(E){return V[E.tm_wday].substring(0,3)},"%A":function(E){return V[E.tm_wday]},"%b":function(E){return X[E.tm_mon].substring(0,3)},"%B":function(E){return X[E.tm_mon]},"%C":function(E){var L=E.tm_year+1900;return ee(L/100|0,2)},"%d":function(E){return ee(E.tm_mday,2)},"%e":function(E){return ye(E.tm_mday,2," ")},"%g":function(E){return ge(E).toString().substring(2)},"%G":function(E){return ge(E)},"%H":function(E){return ee(E.tm_hour,2)},"%I":function(E){var L=E.tm_hour;return L==0?L=12:L>12&&(L-=12),ee(L,2)},"%j":function(E){return ee(E.tm_mday+Uc(Dt(E.tm_year+1900)?zs:Ys,E.tm_mon-1),3)},"%m":function(E){return ee(E.tm_mon+1,2)},"%M":function(E){return ee(E.tm_min,2)},"%n":function(){return`
`},"%p":function(E){return E.tm_hour>=0&&E.tm_hour<12?"AM":"PM"},"%S":function(E){return ee(E.tm_sec,2)},"%t":function(){return"	"},"%u":function(E){return E.tm_wday||7},"%U":function(E){var L=E.tm_yday+7-E.tm_wday;return ee(Math.floor(L/7),2)},"%V":function(E){var L=Math.floor((E.tm_yday+7-(E.tm_wday+6)%7)/7);if((E.tm_wday+371-E.tm_yday-2)%7<=2&&L++,L){if(L==53){var se=(E.tm_wday+371-E.tm_yday)%7;se!=4&&(se!=3||!Dt(E.tm_year))&&(L=1)}}else{L=52;var ie=(E.tm_wday+7-E.tm_yday-1)%7;(ie==4||ie==5&&Dt(E.tm_year%400-1))&&L++}return ee(L,2)},"%w":function(E){return E.tm_wday},"%W":function(E){var L=E.tm_yday+7-(E.tm_wday+6)%7;return ee(Math.floor(L/7),2)},"%y":function(E){return(E.tm_year+1900).toString().substring(2)},"%Y":function(E){return E.tm_year+1900},"%z":function(E){var L=E.tm_gmtoff,ie=L>=0;return L=Math.abs(L)/60,L=L/60*100+L%60,(ie?"+":"-")+("0000"+L).slice(-4)},"%Z":function(E){return E.tm_zone},"%%":function(){return"%"}};S=S.replace(/%%/g,"\0\0");for(var F in xe)S.includes(F)&&(S=S.replace(new RegExp(F,"g"),xe[F](T)));S=S.replace(/\0\0/g,"%");var We=qc(S,!1);return We.length>o?0:(Qs(We,i),We.length-1)}function Gc(i,o,c,_,b){return Wc(i,o,c,_)}function jc(){w("missing function: ucnv_close_64"),q(-1)}function Kc(){w("missing function: ucnv_convertEx_64"),q(-1)}function Vc(){w("missing function: ucnv_open_64"),q(-1)}function zc(){w("missing function: ucnv_toAlgorithmic_64"),q(-1)}function Yc(){w("missing function: ucsdet_close_64"),q(-1)}function Qc(){w("missing function: ucsdet_detect_64"),q(-1)}function Xc(){w("missing function: ucsdet_getConfidence_64"),q(-1)}function Jc(){w("missing function: ucsdet_getName_64"),q(-1)}function Zc(){w("missing function: ucsdet_open_64"),q(-1)}function el(){w("missing function: ucsdet_setText_64"),q(-1)}function tl(){w("missing function: unzClose"),q(-1)}function rl(){w("missing function: unzCloseCurrentFile"),q(-1)}function nl(){w("missing function: unzGetCurrentFileInfo"),q(-1)}function sl(){w("missing function: unzGetCurrentFileInfo64"),q(-1)}function il(){w("missing function: unzGetGlobalInfo"),q(-1)}function al(){w("missing function: unzGoToFirstFile"),q(-1)}function ol(){w("missing function: unzGoToNextFile"),q(-1)}function ul(){w("missing function: unzLocateFile"),q(-1)}function cl(){w("missing function: unzOpen"),q(-1)}function ll(){w("missing function: unzOpen2"),q(-1)}function fl(){w("missing function: unzOpenCurrentFile"),q(-1)}function _l(){w("missing function: unzReadCurrentFile"),q(-1)}function dl(i){Y=i,Ir()||(t.onExit&&t.onExit(i),I=!0),d(i,new Ms(i))}function pl(i,o){Y=i,dl(i)}function hl(i){if(i instanceof Ms||i=="unwind")return Y;d(1,i)}function ml(i){var o=t["_"+i];return o}function gl(i){var o=xr(i)+1,c=Wt(o);return Ht(i,c,o),c}function bl(i,o,c,_,b){var T={string:ce=>{var ge=0;return ce!=null&&ce!==0&&(ge=gl(ce)),ge},array:ce=>{var ge=Wt(ce.length);return Qs(ce,ge),ge}};function S(ce){return o==="string"?pt(ce):o==="boolean"?!!ce:ce}var R=ml(i),F=[],V=0;if(_)for(var X=0;X<_.length;X++){var ye=T[c[X]];ye?(V===0&&(V=Nr()),F[X]=ye(_[X])):F[X]=_[X]}var ee=R.apply(null,F);function Te(ce){return V!==0&&Hr(V),S(ce)}return ee=Te(ee),ee}var yl={g:ou,V:uu,da:cu,n:lu,p:fu,d:_u,B:du,f:pu,b:hu,o:mu,h:gu,a:Su,La:Eu,Fa:vu,Ja:Ru,Ia:Au,Ba:Tu,e:ku,Aa:Du,O:Pu,va:Cu,Da:Iu,Ea:Fu,K:Mu,xa:Ou,wa:xu,ya:Lu,L:Bu,Ga:Nu,ta:Hu,F:Uu,Ha:$u,H:qu,za:Wu,G:Gu,Na:Ku,fa:Xu,ga:Ju,j:Zu,Ma:ec,ma:tc,na:rc,ka:nc,la:sc,D:ic,ia:ac,N:oc,ja:uc,pa:cc,q:lc,oa:fc,E:_c,qa:dc,ha:pc,C:hc,ra:mc,M:gc,Oa:bc,i:Ks,Ka:yc,Qa:Ec,T:Rc,W:Ac,l:Tc,ea:kc,Q:Dc,P:Pc,J:Cc,R:Ic,ua:Fc,w:xc,I:Lc,sa:Nc,Ca:Hc,Pa:Gc,c:jc,X:Kc,v:Vc,Z:zc,Y:Yc,aa:Qc,$:Xc,_:Jc,ca:Zc,ba:el,k:tl,u:rl,z:nl,r:sl,U:il,A:al,y:ol,t:ul,x:cl,S:ll,s:fl,m:_l},Ah=au(),Sl=function(){return(Sl=t.asm.Sa).apply(null,arguments)},Xs=t._main=function(){return(Xs=t._main=t.asm.Ta).apply(null,arguments)},El=t._duckdb_web_fs_glob_add_path=function(){return(El=t._duckdb_web_fs_glob_add_path=t.asm.Va).apply(null,arguments)},vl=t._duckdb_web_clear_response=function(){return(vl=t._duckdb_web_clear_response=t.asm.Wa).apply(null,arguments)},wl=t._duckdb_web_fail_with=function(){return(wl=t._duckdb_web_fail_with=t.asm.Xa).apply(null,arguments)},Rl=t._duckdb_web_reset=function(){return(Rl=t._duckdb_web_reset=t.asm.Ya).apply(null,arguments)},Al=t._duckdb_web_connect=function(){return(Al=t._duckdb_web_connect=t.asm.Za).apply(null,arguments)},Tl=t._duckdb_web_disconnect=function(){return(Tl=t._duckdb_web_disconnect=t.asm._a).apply(null,arguments)},kl=t._duckdb_web_flush_files=function(){return(kl=t._duckdb_web_flush_files=t.asm.$a).apply(null,arguments)},Dl=t._duckdb_web_flush_file=function(){return(Dl=t._duckdb_web_flush_file=t.asm.ab).apply(null,arguments)},Pl=t._duckdb_web_open=function(){return(Pl=t._duckdb_web_open=t.asm.bb).apply(null,arguments)},Cl=t._duckdb_web_get_global_file_info=function(){return(Cl=t._duckdb_web_get_global_file_info=t.asm.cb).apply(null,arguments)},Il=t._duckdb_web_collect_file_stats=function(){return(Il=t._duckdb_web_collect_file_stats=t.asm.db).apply(null,arguments)},Fl=t._duckdb_web_export_file_stats=function(){return(Fl=t._duckdb_web_export_file_stats=t.asm.eb).apply(null,arguments)},Ml=t._duckdb_web_fs_drop_file=function(){return(Ml=t._duckdb_web_fs_drop_file=t.asm.fb).apply(null,arguments)},Ol=t._duckdb_web_fs_drop_files=function(){return(Ol=t._duckdb_web_fs_drop_files=t.asm.gb).apply(null,arguments)},xl=t._duckdb_web_fs_glob_file_infos=function(){return(xl=t._duckdb_web_fs_glob_file_infos=t.asm.hb).apply(null,arguments)},Ll=t._duckdb_web_fs_get_file_info_by_id=function(){return(Ll=t._duckdb_web_fs_get_file_info_by_id=t.asm.ib).apply(null,arguments)},Bl=t._duckdb_web_fs_get_file_info_by_name=function(){return(Bl=t._duckdb_web_fs_get_file_info_by_name=t.asm.jb).apply(null,arguments)},Nl=t._duckdb_web_fs_register_file_url=function(){return(Nl=t._duckdb_web_fs_register_file_url=t.asm.kb).apply(null,arguments)},Hl=t._duckdb_web_fs_register_file_buffer=function(){return(Hl=t._duckdb_web_fs_register_file_buffer=t.asm.lb).apply(null,arguments)},Ul=t._duckdb_web_copy_file_to_buffer=function(){return(Ul=t._duckdb_web_copy_file_to_buffer=t.asm.mb).apply(null,arguments)},$l=t._duckdb_web_copy_file_to_path=function(){return($l=t._duckdb_web_copy_file_to_path=t.asm.nb).apply(null,arguments)},ql=t._duckdb_web_get_version=function(){return(ql=t._duckdb_web_get_version=t.asm.ob).apply(null,arguments)},Wl=t._duckdb_web_get_feature_flags=function(){return(Wl=t._duckdb_web_get_feature_flags=t.asm.pb).apply(null,arguments)},Gl=t._duckdb_web_tokenize=function(){return(Gl=t._duckdb_web_tokenize=t.asm.qb).apply(null,arguments)},jl=t._duckdb_web_udf_scalar_create=function(){return(jl=t._duckdb_web_udf_scalar_create=t.asm.rb).apply(null,arguments)},Kl=t._duckdb_web_prepared_create=function(){return(Kl=t._duckdb_web_prepared_create=t.asm.sb).apply(null,arguments)},Vl=t._duckdb_web_prepared_close=function(){return(Vl=t._duckdb_web_prepared_close=t.asm.tb).apply(null,arguments)},zl=t._duckdb_web_prepared_run=function(){return(zl=t._duckdb_web_prepared_run=t.asm.ub).apply(null,arguments)},Yl=t._duckdb_web_prepared_send=function(){return(Yl=t._duckdb_web_prepared_send=t.asm.vb).apply(null,arguments)},Ql=t._duckdb_web_query_run=function(){return(Ql=t._duckdb_web_query_run=t.asm.wb).apply(null,arguments)},Xl=t._duckdb_web_pending_query_start=function(){return(Xl=t._duckdb_web_pending_query_start=t.asm.xb).apply(null,arguments)},Jl=t._duckdb_web_pending_query_poll=function(){return(Jl=t._duckdb_web_pending_query_poll=t.asm.yb).apply(null,arguments)},Zl=t._duckdb_web_pending_query_cancel=function(){return(Zl=t._duckdb_web_pending_query_cancel=t.asm.zb).apply(null,arguments)},ef=t._duckdb_web_query_fetch_results=function(){return(ef=t._duckdb_web_query_fetch_results=t.asm.Ab).apply(null,arguments)},tf=t._duckdb_web_get_tablenames=function(){return(tf=t._duckdb_web_get_tablenames=t.asm.Bb).apply(null,arguments)},rf=t._duckdb_web_insert_arrow_from_ipc_stream=function(){return(rf=t._duckdb_web_insert_arrow_from_ipc_stream=t.asm.Cb).apply(null,arguments)},nf=t._duckdb_web_insert_csv_from_path=function(){return(nf=t._duckdb_web_insert_csv_from_path=t.asm.Db).apply(null,arguments)},sf=t._duckdb_web_insert_json_from_path=function(){return(sf=t._duckdb_web_insert_json_from_path=t.asm.Eb).apply(null,arguments)},af=function(){return(af=t.asm.__errno_location).apply(null,arguments)},Ut=function(){return(Ut=t.asm.Fb).apply(null,arguments)},$t=function(){return($t=t.asm.Gb).apply(null,arguments)},Br=function(){return(Br=t.asm.Hb).apply(null,arguments)},qt=t._malloc=function(){return(qt=t._malloc=t.asm.Ib).apply(null,arguments)},of=t._free=function(){return(of=t._free=t.asm.Jb).apply(null,arguments)},Nr=function(){return(Nr=t.asm.Kb).apply(null,arguments)},Hr=function(){return(Hr=t.asm.Lb).apply(null,arguments)},Wt=function(){return(Wt=t.asm.Mb).apply(null,arguments)},Js=function(){return(Js=t.asm.Nb).apply(null,arguments)};t.stackAlloc=Wt,t.stackSave=Nr,t.stackRestore=Hr,t.ccall=bl;var Gt;Tt=function i(){Gt||Zs(),Gt||(Tt=i)};function uf(){var i=Xs,o=0,c=0;try{var _=i(o,c);return pl(_,!0),_}catch(b){return hl(b)}}function Zs(){if(Oe>0||(P(),Oe>0))return;function i(){Gt||(Gt=!0,t.calledRun=!0,!I&&(ae(),A(),n(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),ei&&uf(),W()))}t.setStatus?(t.setStatus("Running..."),setTimeout(function(){setTimeout(function(){t.setStatus("")},1),i()},1)):i()}if(t.preInit)for(typeof t.preInit=="function"&&(t.preInit=[t.preInit]);t.preInit.length>0;)t.preInit.pop()();var ei=!0;return t.noInitialRun&&(ei=!1),Zs(),e.ready}})();typeof Yt=="object"&&typeof $r=="object"?$r.exports=Ur:typeof define=="function"&&define.amd?define([],function(){return Ur}):typeof Yt=="object"&&(Yt.DuckDB=Ur)});var li=k(mt=>{"use strict";Object.defineProperty(mt,"__esModule",{value:!0});mt.splitWhen=mt.flatten=void 0;function vf(r){return r.reduce((e,t)=>[].concat(e,t),[])}mt.flatten=vf;function wf(r,e){let t=[[]],n=0;for(let s of r)e(s)?(n++,t[n]=[]):t[n].push(s);return t}mt.splitWhen=wf});var fi=k(nr=>{"use strict";Object.defineProperty(nr,"__esModule",{value:!0});nr.isEnoentCodeError=void 0;function Rf(r){return r.code==="ENOENT"}nr.isEnoentCodeError=Rf});var _i=k(sr=>{"use strict";Object.defineProperty(sr,"__esModule",{value:!0});sr.createDirentFromStats=void 0;var Vr=class{constructor(e,t){this.name=e,this.isBlockDevice=t.isBlockDevice.bind(t),this.isCharacterDevice=t.isCharacterDevice.bind(t),this.isDirectory=t.isDirectory.bind(t),this.isFIFO=t.isFIFO.bind(t),this.isFile=t.isFile.bind(t),this.isSocket=t.isSocket.bind(t),this.isSymbolicLink=t.isSymbolicLink.bind(t)}};function Af(r,e){return new Vr(r,e)}sr.createDirentFromStats=Af});var di=k(Ne=>{"use strict";Object.defineProperty(Ne,"__esModule",{value:!0});Ne.removeLeadingDotSegment=Ne.escape=Ne.makeAbsolute=Ne.unixify=void 0;var Tf=require("path"),kf=2,Df=/(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;function Pf(r){return r.replace(/\\/g,"/")}Ne.unixify=Pf;function Cf(r,e){return Tf.resolve(r,e)}Ne.makeAbsolute=Cf;function If(r){return r.replace(Df,"\\$2")}Ne.escape=If;function Ff(r){if(r.charAt(0)==="."){let e=r.charAt(1);if(e==="/"||e==="\\")return r.slice(kf)}return r}Ne.removeLeadingDotSegment=Ff});var hi=k((Vh,pi)=>{pi.exports=function(e){if(typeof e!="string"||e==="")return!1;for(var t;t=/(\\).|([@?!+*]\(.*\))/g.exec(e);){if(t[2])return!0;e=e.slice(t.index+t[0].length)}return!1}});var bi=k((zh,gi)=>{var Mf=hi(),mi={"{":"}","(":")","[":"]"},Of=function(r){if(r[0]==="!")return!0;for(var e=0,t=-2,n=-2,s=-2,a=-2,u=-2;e<r.length;){if(r[e]==="*"||r[e+1]==="?"&&/[\].+)]/.test(r[e])||n!==-1&&r[e]==="["&&r[e+1]!=="]"&&(n<e&&(n=r.indexOf("]",e)),n>e&&(u===-1||u>n||(u=r.indexOf("\\",e),u===-1||u>n)))||s!==-1&&r[e]==="{"&&r[e+1]!=="}"&&(s=r.indexOf("}",e),s>e&&(u=r.indexOf("\\",e),u===-1||u>s))||a!==-1&&r[e]==="("&&r[e+1]==="?"&&/[:!=]/.test(r[e+2])&&r[e+3]!==")"&&(a=r.indexOf(")",e),a>e&&(u=r.indexOf("\\",e),u===-1||u>a))||t!==-1&&r[e]==="("&&r[e+1]!=="|"&&(t<e&&(t=r.indexOf("|",e)),t!==-1&&r[t+1]!==")"&&(a=r.indexOf(")",t),a>t&&(u=r.indexOf("\\",t),u===-1||u>a))))return!0;if(r[e]==="\\"){var f=r[e+1];e+=2;var d=mi[f];if(d){var y=r.indexOf(d,e);y!==-1&&(e=y+1)}if(r[e]==="!")return!0}else e++}return!1},xf=function(r){if(r[0]==="!")return!0;for(var e=0;e<r.length;){if(/[*?{}()[\]]/.test(r[e]))return!0;if(r[e]==="\\"){var t=r[e+1];e+=2;var n=mi[t];if(n){var s=r.indexOf(n,e);s!==-1&&(e=s+1)}if(r[e]==="!")return!0}else e++}return!1};gi.exports=function(e,t){if(typeof e!="string"||e==="")return!1;if(Mf(e))return!0;var n=Of;return t&&t.strict===!1&&(n=xf),n(e)}});var Si=k((Yh,yi)=>{"use strict";var Lf=bi(),Bf=require("path").posix.dirname,Nf=require("os").platform()==="win32",zr="/",Hf=/\\/g,Uf=/[\{\[].*[\}\]]$/,$f=/(^|[^\\])([\{\[]|\([^\)]+$)/,qf=/\\([\!\*\?\|\[\]\(\)\{\}])/g;yi.exports=function(e,t){var n=Object.assign({flipBackslashes:!0},t);n.flipBackslashes&&Nf&&e.indexOf(zr)<0&&(e=e.replace(Hf,zr)),Uf.test(e)&&(e+=zr),e+="a";do e=Bf(e);while(Lf(e)||$f.test(e));return e.replace(qf,"$1")}});var ir=k(Fe=>{"use strict";Fe.isInteger=r=>typeof r=="number"?Number.isInteger(r):typeof r=="string"&&r.trim()!==""?Number.isInteger(Number(r)):!1;Fe.find=(r,e)=>r.nodes.find(t=>t.type===e);Fe.exceedsLimit=(r,e,t=1,n)=>n===!1||!Fe.isInteger(r)||!Fe.isInteger(e)?!1:(Number(e)-Number(r))/Number(t)>=n;Fe.escapeNode=(r,e=0,t)=>{let n=r.nodes[e];n&&(t&&n.type===t||n.type==="open"||n.type==="close")&&n.escaped!==!0&&(n.value="\\"+n.value,n.escaped=!0)};Fe.encloseBrace=r=>r.type!=="brace"||r.commas>>0+r.ranges>>0?!1:(r.invalid=!0,!0);Fe.isInvalidBrace=r=>r.type!=="brace"?!1:r.invalid===!0||r.dollar?!0:!(r.commas>>0+r.ranges>>0)||r.open!==!0||r.close!==!0?(r.invalid=!0,!0):!1;Fe.isOpenOrClose=r=>r.type==="open"||r.type==="close"?!0:r.open===!0||r.close===!0;Fe.reduce=r=>r.reduce((e,t)=>(t.type==="text"&&e.push(t.value),t.type==="range"&&(t.type="text"),e),[]);Fe.flatten=(...r)=>{let e=[],t=n=>{for(let s=0;s<n.length;s++){let a=n[s];Array.isArray(a)?t(a,e):a!==void 0&&e.push(a)}return e};return t(r),e}});var ar=k((Xh,vi)=>{"use strict";var Ei=ir();vi.exports=(r,e={})=>{let t=(n,s={})=>{let a=e.escapeInvalid&&Ei.isInvalidBrace(s),u=n.invalid===!0&&e.escapeInvalid===!0,f="";if(n.value)return(a||u)&&Ei.isOpenOrClose(n)?"\\"+n.value:n.value;if(n.value)return n.value;if(n.nodes)for(let d of n.nodes)f+=t(d);return f};return t(r)}});var Ri=k((Jh,wi)=>{"use strict";wi.exports=function(r){return typeof r=="number"?r-r===0:typeof r=="string"&&r.trim()!==""?Number.isFinite?Number.isFinite(+r):isFinite(+r):!1}});var Mi=k((Zh,Fi)=>{"use strict";var Ai=Ri(),it=(r,e,t)=>{if(Ai(r)===!1)throw new TypeError("toRegexRange: expected the first argument to be a number");if(e===void 0||r===e)return String(r);if(Ai(e)===!1)throw new TypeError("toRegexRange: expected the second argument to be a number.");let n={relaxZeros:!0,...t};typeof n.strictZeros=="boolean"&&(n.relaxZeros=n.strictZeros===!1);let s=String(n.relaxZeros),a=String(n.shorthand),u=String(n.capture),f=String(n.wrap),d=r+":"+e+"="+s+a+u+f;if(it.cache.hasOwnProperty(d))return it.cache[d].result;let y=Math.min(r,e),p=Math.max(r,e);if(Math.abs(y-p)===1){let C=r+"|"+e;return n.capture?`(${C})`:n.wrap===!1?C:`(?:${C})`}let v=Ii(r)||Ii(e),m={min:r,max:e,a:y,b:p},G=[],D=[];if(v&&(m.isPadded=v,m.maxLen=String(m.max).length),y<0){let C=p<0?Math.abs(p):1;D=Ti(C,Math.abs(y),m,n),y=m.a=0}return p>=0&&(G=Ti(y,p,m,n)),m.negatives=D,m.positives=G,m.result=Wf(D,G,n),n.capture===!0?m.result=`(${m.result})`:n.wrap!==!1&&G.length+D.length>1&&(m.result=`(?:${m.result})`),it.cache[d]=m,m.result};function Wf(r,e,t){let n=Yr(r,e,"-",!1,t)||[],s=Yr(e,r,"",!1,t)||[],a=Yr(r,e,"-?",!0,t)||[];return n.concat(a).concat(s).join("|")}function Gf(r,e){let t=1,n=1,s=Di(r,t),a=new Set([e]);for(;r<=s&&s<=e;)a.add(s),t+=1,s=Di(r,t);for(s=Pi(e+1,n)-1;r<s&&s<=e;)a.add(s),n+=1,s=Pi(e+1,n)-1;return a=[...a],a.sort(Vf),a}function jf(r,e,t){if(r===e)return{pattern:r,count:[],digits:0};let n=Kf(r,e),s=n.length,a="",u=0;for(let f=0;f<s;f++){let[d,y]=n[f];d===y?a+=d:d!=="0"||y!=="9"?a+=zf(d,y,t):u++}return u&&(a+=t.shorthand===!0?"\\d":"[0-9]"),{pattern:a,count:[u],digits:s}}function Ti(r,e,t,n){let s=Gf(r,e),a=[],u=r,f;for(let d=0;d<s.length;d++){let y=s[d],p=jf(String(u),String(y),n),v="";if(!t.isPadded&&f&&f.pattern===p.pattern){f.count.length>1&&f.count.pop(),f.count.push(p.count[0]),f.string=f.pattern+Ci(f.count),u=y+1;continue}t.isPadded&&(v=Yf(y,t,n)),p.string=v+p.pattern+Ci(p.count),a.push(p),u=y+1,f=p}return a}function Yr(r,e,t,n,s){let a=[];for(let u of r){let{string:f}=u;!n&&!ki(e,"string",f)&&a.push(t+f),n&&ki(e,"string",f)&&a.push(t+f)}return a}function Kf(r,e){let t=[];for(let n=0;n<r.length;n++)t.push([r[n],e[n]]);return t}function Vf(r,e){return r>e?1:e>r?-1:0}function ki(r,e,t){return r.some(n=>n[e]===t)}function Di(r,e){return Number(String(r).slice(0,-e)+"9".repeat(e))}function Pi(r,e){return r-r%Math.pow(10,e)}function Ci(r){let[e=0,t=""]=r;return t||e>1?`{${e+(t?","+t:"")}}`:""}function zf(r,e,t){return`[${r}${e-r===1?"":"-"}${e}]`}function Ii(r){return/^-?(0+)\d/.test(r)}function Yf(r,e,t){if(!e.isPadded)return r;let n=Math.abs(e.maxLen-String(r).length),s=t.relaxZeros!==!1;switch(n){case 0:return"";case 1:return s?"0?":"0";case 2:return s?"0{0,2}":"00";default:return s?`0{0,${n}}`:`0{${n}}`}}it.cache={};it.clearCache=()=>it.cache={};Fi.exports=it});var Jr=k((em,$i)=>{"use strict";var Qf=require("util"),Li=Mi(),Oi=r=>r!==null&&typeof r=="object"&&!Array.isArray(r),Xf=r=>e=>r===!0?Number(e):String(e),Qr=r=>typeof r=="number"||typeof r=="string"&&r!=="",It=r=>Number.isInteger(+r),Xr=r=>{let e=`${r}`,t=-1;if(e[0]==="-"&&(e=e.slice(1)),e==="0")return!1;for(;e[++t]==="0";);return t>0},Jf=(r,e,t)=>typeof r=="string"||typeof e=="string"?!0:t.stringify===!0,Zf=(r,e,t)=>{if(e>0){let n=r[0]==="-"?"-":"";n&&(r=r.slice(1)),r=n+r.padStart(n?e-1:e,"0")}return t===!1?String(r):r},xi=(r,e)=>{let t=r[0]==="-"?"-":"";for(t&&(r=r.slice(1),e--);r.length<e;)r="0"+r;return t?"-"+r:r},e_=(r,e)=>{r.negatives.sort((u,f)=>u<f?-1:u>f?1:0),r.positives.sort((u,f)=>u<f?-1:u>f?1:0);let t=e.capture?"":"?:",n="",s="",a;return r.positives.length&&(n=r.positives.join("|")),r.negatives.length&&(s=`-(${t}${r.negatives.join("|")})`),n&&s?a=`${n}|${s}`:a=n||s,e.wrap?`(${t}${a})`:a},Bi=(r,e,t,n)=>{if(t)return Li(r,e,{wrap:!1,...n});let s=String.fromCharCode(r);if(r===e)return s;let a=String.fromCharCode(e);return`[${s}-${a}]`},Ni=(r,e,t)=>{if(Array.isArray(r)){let n=t.wrap===!0,s=t.capture?"":"?:";return n?`(${s}${r.join("|")})`:r.join("|")}return Li(r,e,t)},Hi=(...r)=>new RangeError("Invalid range arguments: "+Qf.inspect(...r)),Ui=(r,e,t)=>{if(t.strictRanges===!0)throw Hi([r,e]);return[]},t_=(r,e)=>{if(e.strictRanges===!0)throw new TypeError(`Expected step "${r}" to be a number`);return[]},r_=(r,e,t=1,n={})=>{let s=Number(r),a=Number(e);if(!Number.isInteger(s)||!Number.isInteger(a)){if(n.strictRanges===!0)throw Hi([r,e]);return[]}s===0&&(s=0),a===0&&(a=0);let u=s>a,f=String(r),d=String(e),y=String(t);t=Math.max(Math.abs(t),1);let p=Xr(f)||Xr(d)||Xr(y),v=p?Math.max(f.length,d.length,y.length):0,m=p===!1&&Jf(r,e,n)===!1,G=n.transform||Xf(m);if(n.toRegex&&t===1)return Bi(xi(r,v),xi(e,v),!0,n);let D={negatives:[],positives:[]},C=te=>D[te<0?"negatives":"positives"].push(Math.abs(te)),O=[],H=0;for(;u?s>=a:s<=a;)n.toRegex===!0&&t>1?C(s):O.push(Zf(G(s,H),v,m)),s=u?s-t:s+t,H++;return n.toRegex===!0?t>1?e_(D,n):Ni(O,null,{wrap:!1,...n}):O},n_=(r,e,t=1,n={})=>{if(!It(r)&&r.length>1||!It(e)&&e.length>1)return Ui(r,e,n);let s=n.transform||(m=>String.fromCharCode(m)),a=`${r}`.charCodeAt(0),u=`${e}`.charCodeAt(0),f=a>u,d=Math.min(a,u),y=Math.max(a,u);if(n.toRegex&&t===1)return Bi(d,y,!1,n);let p=[],v=0;for(;f?a>=u:a<=u;)p.push(s(a,v)),a=f?a-t:a+t,v++;return n.toRegex===!0?Ni(p,null,{wrap:!1,options:n}):p},or=(r,e,t,n={})=>{if(e==null&&Qr(r))return[r];if(!Qr(r)||!Qr(e))return Ui(r,e,n);if(typeof t=="function")return or(r,e,1,{transform:t});if(Oi(t))return or(r,e,0,t);let s={...n};return s.capture===!0&&(s.wrap=!0),t=t||s.step||1,It(t)?It(r)&&It(e)?r_(r,e,t,s):n_(r,e,Math.max(Math.abs(t),1),s):t!=null&&!Oi(t)?t_(t,s):or(r,e,1,t)};$i.exports=or});var Gi=k((tm,Wi)=>{"use strict";var s_=Jr(),qi=ir(),i_=(r,e={})=>{let t=(n,s={})=>{let a=qi.isInvalidBrace(s),u=n.invalid===!0&&e.escapeInvalid===!0,f=a===!0||u===!0,d=e.escapeInvalid===!0?"\\":"",y="";if(n.isOpen===!0||n.isClose===!0)return d+n.value;if(n.type==="open")return f?d+n.value:"(";if(n.type==="close")return f?d+n.value:")";if(n.type==="comma")return n.prev.type==="comma"?"":f?n.value:"|";if(n.value)return n.value;if(n.nodes&&n.ranges>0){let p=qi.reduce(n.nodes),v=s_(...p,{...e,wrap:!1,toRegex:!0});if(v.length!==0)return p.length>1&&v.length>1?`(${v})`:v}if(n.nodes)for(let p of n.nodes)y+=t(p,n);return y};return t(r)};Wi.exports=i_});var Vi=k((rm,Ki)=>{"use strict";var a_=Jr(),ji=ar(),gt=ir(),at=(r="",e="",t=!1)=>{let n=[];if(r=[].concat(r),e=[].concat(e),!e.length)return r;if(!r.length)return t?gt.flatten(e).map(s=>`{${s}}`):e;for(let s of r)if(Array.isArray(s))for(let a of s)n.push(at(a,e,t));else for(let a of e)t===!0&&typeof a=="string"&&(a=`{${a}}`),n.push(Array.isArray(a)?at(s,a,t):s+a);return gt.flatten(n)},o_=(r,e={})=>{let t=e.rangeLimit===void 0?1e3:e.rangeLimit,n=(s,a={})=>{s.queue=[];let u=a,f=a.queue;for(;u.type!=="brace"&&u.type!=="root"&&u.parent;)u=u.parent,f=u.queue;if(s.invalid||s.dollar){f.push(at(f.pop(),ji(s,e)));return}if(s.type==="brace"&&s.invalid!==!0&&s.nodes.length===2){f.push(at(f.pop(),["{}"]));return}if(s.nodes&&s.ranges>0){let v=gt.reduce(s.nodes);if(gt.exceedsLimit(...v,e.step,t))throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");let m=a_(...v,e);m.length===0&&(m=ji(s,e)),f.push(at(f.pop(),m)),s.nodes=[];return}let d=gt.encloseBrace(s),y=s.queue,p=s;for(;p.type!=="brace"&&p.type!=="root"&&p.parent;)p=p.parent,y=p.queue;for(let v=0;v<s.nodes.length;v++){let m=s.nodes[v];if(m.type==="comma"&&s.type==="brace"){v===1&&y.push(""),y.push("");continue}if(m.type==="close"){f.push(at(f.pop(),y,d));continue}if(m.value&&m.type!=="open"){y.push(at(y.pop(),m.value));continue}m.nodes&&n(m,s)}return y};return gt.flatten(n(r))};Ki.exports=o_});var Yi=k((nm,zi)=>{"use strict";zi.exports={MAX_LENGTH:1024*64,CHAR_0:"0",CHAR_9:"9",CHAR_UPPERCASE_A:"A",CHAR_LOWERCASE_A:"a",CHAR_UPPERCASE_Z:"Z",CHAR_LOWERCASE_Z:"z",CHAR_LEFT_PARENTHESES:"(",CHAR_RIGHT_PARENTHESES:")",CHAR_ASTERISK:"*",CHAR_AMPERSAND:"&",CHAR_AT:"@",CHAR_BACKSLASH:"\\",CHAR_BACKTICK:"`",CHAR_CARRIAGE_RETURN:"\r",CHAR_CIRCUMFLEX_ACCENT:"^",CHAR_COLON:":",CHAR_COMMA:",",CHAR_DOLLAR:"$",CHAR_DOT:".",CHAR_DOUBLE_QUOTE:'"',CHAR_EQUAL:"=",CHAR_EXCLAMATION_MARK:"!",CHAR_FORM_FEED:"\f",CHAR_FORWARD_SLASH:"/",CHAR_HASH:"#",CHAR_HYPHEN_MINUS:"-",CHAR_LEFT_ANGLE_BRACKET:"<",CHAR_LEFT_CURLY_BRACE:"{",CHAR_LEFT_SQUARE_BRACKET:"[",CHAR_LINE_FEED:`
`,CHAR_NO_BREAK_SPACE:"\xA0",CHAR_PERCENT:"%",CHAR_PLUS:"+",CHAR_QUESTION_MARK:"?",CHAR_RIGHT_ANGLE_BRACKET:">",CHAR_RIGHT_CURLY_BRACE:"}",CHAR_RIGHT_SQUARE_BRACKET:"]",CHAR_SEMICOLON:";",CHAR_SINGLE_QUOTE:"'",CHAR_SPACE:" ",CHAR_TAB:"	",CHAR_UNDERSCORE:"_",CHAR_VERTICAL_LINE:"|",CHAR_ZERO_WIDTH_NOBREAK_SPACE:"\uFEFF"}});var ea=k((sm,Zi)=>{"use strict";var u_=ar(),{MAX_LENGTH:Qi,CHAR_BACKSLASH:Zr,CHAR_BACKTICK:c_,CHAR_COMMA:l_,CHAR_DOT:f_,CHAR_LEFT_PARENTHESES:__,CHAR_RIGHT_PARENTHESES:d_,CHAR_LEFT_CURLY_BRACE:p_,CHAR_RIGHT_CURLY_BRACE:h_,CHAR_LEFT_SQUARE_BRACKET:Xi,CHAR_RIGHT_SQUARE_BRACKET:Ji,CHAR_DOUBLE_QUOTE:m_,CHAR_SINGLE_QUOTE:g_,CHAR_NO_BREAK_SPACE:b_,CHAR_ZERO_WIDTH_NOBREAK_SPACE:y_}=Yi(),S_=(r,e={})=>{if(typeof r!="string")throw new TypeError("Expected a string");let t=e||{},n=typeof t.maxLength=="number"?Math.min(Qi,t.maxLength):Qi;if(r.length>n)throw new SyntaxError(`Input length (${r.length}), exceeds max characters (${n})`);let s={type:"root",input:r,nodes:[]},a=[s],u=s,f=s,d=0,y=r.length,p=0,v=0,m,G={},D=()=>r[p++],C=O=>{if(O.type==="text"&&f.type==="dot"&&(f.type="text"),f&&f.type==="text"&&O.type==="text"){f.value+=O.value;return}return u.nodes.push(O),O.parent=u,O.prev=f,f=O,O};for(C({type:"bos"});p<y;)if(u=a[a.length-1],m=D(),!(m===y_||m===b_)){if(m===Zr){C({type:"text",value:(e.keepEscaping?m:"")+D()});continue}if(m===Ji){C({type:"text",value:"\\"+m});continue}if(m===Xi){d++;let O=!0,H;for(;p<y&&(H=D());){if(m+=H,H===Xi){d++;continue}if(H===Zr){m+=D();continue}if(H===Ji&&(d--,d===0))break}C({type:"text",value:m});continue}if(m===__){u=C({type:"paren",nodes:[]}),a.push(u),C({type:"text",value:m});continue}if(m===d_){if(u.type!=="paren"){C({type:"text",value:m});continue}u=a.pop(),C({type:"text",value:m}),u=a[a.length-1];continue}if(m===m_||m===g_||m===c_){let O=m,H;for(e.keepQuotes!==!0&&(m="");p<y&&(H=D());){if(H===Zr){m+=H+D();continue}if(H===O){e.keepQuotes===!0&&(m+=H);break}m+=H}C({type:"text",value:m});continue}if(m===p_){v++;let H={type:"brace",open:!0,close:!1,dollar:f.value&&f.value.slice(-1)==="$"||u.dollar===!0,depth:v,commas:0,ranges:0,nodes:[]};u=C(H),a.push(u),C({type:"open",value:m});continue}if(m===h_){if(u.type!=="brace"){C({type:"text",value:m});continue}let O="close";u=a.pop(),u.close=!0,C({type:O,value:m}),v--,u=a[a.length-1];continue}if(m===l_&&v>0){if(u.ranges>0){u.ranges=0;let O=u.nodes.shift();u.nodes=[O,{type:"text",value:u_(u)}]}C({type:"comma",value:m}),u.commas++;continue}if(m===f_&&v>0&&u.commas===0){let O=u.nodes;if(v===0||O.length===0){C({type:"text",value:m});continue}if(f.type==="dot"){if(u.range=[],f.value+=m,f.type="range",u.nodes.length!==3&&u.nodes.length!==5){u.invalid=!0,u.ranges=0,f.type="text";continue}u.ranges++,u.args=[];continue}if(f.type==="range"){O.pop();let H=O[O.length-1];H.value+=f.value+m,f=H,u.ranges--;continue}C({type:"dot",value:m});continue}C({type:"text",value:m})}do if(u=a.pop(),u.type!=="root"){u.nodes.forEach(te=>{te.nodes||(te.type==="open"&&(te.isOpen=!0),te.type==="close"&&(te.isClose=!0),te.nodes||(te.type="text"),te.invalid=!0)});let O=a[a.length-1],H=O.nodes.indexOf(u);O.nodes.splice(H,1,...u.nodes)}while(a.length>0);return C({type:"eos"}),s};Zi.exports=S_});var na=k((im,ra)=>{"use strict";var ta=ar(),E_=Gi(),v_=Vi(),w_=ea(),ke=(r,e={})=>{let t=[];if(Array.isArray(r))for(let n of r){let s=ke.create(n,e);Array.isArray(s)?t.push(...s):t.push(s)}else t=[].concat(ke.create(r,e));return e&&e.expand===!0&&e.nodupes===!0&&(t=[...new Set(t)]),t};ke.parse=(r,e={})=>w_(r,e);ke.stringify=(r,e={})=>ta(typeof r=="string"?ke.parse(r,e):r,e);ke.compile=(r,e={})=>(typeof r=="string"&&(r=ke.parse(r,e)),E_(r,e));ke.expand=(r,e={})=>{typeof r=="string"&&(r=ke.parse(r,e));let t=v_(r,e);return e.noempty===!0&&(t=t.filter(Boolean)),e.nodupes===!0&&(t=[...new Set(t)]),t};ke.create=(r,e={})=>r===""||r.length<3?[r]:e.expand!==!0?ke.compile(r,e):ke.expand(r,e);ra.exports=ke});var Ft=k((am,ua)=>{"use strict";var R_=require("path"),He="\\\\/",sa=`[^${He}]`,Ge="\\.",A_="\\+",T_="\\?",ur="\\/",k_="(?=.)",ia="[^/]",en=`(?:${ur}|$)`,aa=`(?:^|${ur})`,tn=`${Ge}{1,2}${en}`,D_=`(?!${Ge})`,P_=`(?!${aa}${tn})`,C_=`(?!${Ge}{0,1}${en})`,I_=`(?!${tn})`,F_=`[^.${ur}]`,M_=`${ia}*?`,oa={DOT_LITERAL:Ge,PLUS_LITERAL:A_,QMARK_LITERAL:T_,SLASH_LITERAL:ur,ONE_CHAR:k_,QMARK:ia,END_ANCHOR:en,DOTS_SLASH:tn,NO_DOT:D_,NO_DOTS:P_,NO_DOT_SLASH:C_,NO_DOTS_SLASH:I_,QMARK_NO_DOT:F_,STAR:M_,START_ANCHOR:aa},O_={...oa,SLASH_LITERAL:`[${He}]`,QMARK:sa,STAR:`${sa}*?`,DOTS_SLASH:`${Ge}{1,2}(?:[${He}]|$)`,NO_DOT:`(?!${Ge})`,NO_DOTS:`(?!(?:^|[${He}])${Ge}{1,2}(?:[${He}]|$))`,NO_DOT_SLASH:`(?!${Ge}{0,1}(?:[${He}]|$))`,NO_DOTS_SLASH:`(?!${Ge}{1,2}(?:[${He}]|$))`,QMARK_NO_DOT:`[^.${He}]`,START_ANCHOR:`(?:^|[${He}])`,END_ANCHOR:`(?:[${He}]|$)`},x_={alnum:"a-zA-Z0-9",alpha:"a-zA-Z",ascii:"\\x00-\\x7F",blank:" \\t",cntrl:"\\x00-\\x1F\\x7F",digit:"0-9",graph:"\\x21-\\x7E",lower:"a-z",print:"\\x20-\\x7E ",punct:"\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",space:" \\t\\r\\n\\v\\f",upper:"A-Z",word:"A-Za-z0-9_",xdigit:"A-Fa-f0-9"};ua.exports={MAX_LENGTH:1024*64,POSIX_REGEX_SOURCE:x_,REGEX_BACKSLASH:/\\(?![*+?^${}(|)[\]])/g,REGEX_NON_SPECIAL_CHARS:/^[^@![\].,$*+?^{}()|\\/]+/,REGEX_SPECIAL_CHARS:/[-*+?.^${}(|)[\]]/,REGEX_SPECIAL_CHARS_BACKREF:/(\\?)((\W)(\3*))/g,REGEX_SPECIAL_CHARS_GLOBAL:/([-*+?.^${}(|)[\]])/g,REGEX_REMOVE_BACKSLASH:/(?:\[.*?[^\\]\]|\\(?=.))/g,REPLACEMENTS:{"***":"*","**/**":"**","**/**/**":"**"},CHAR_0:48,CHAR_9:57,CHAR_UPPERCASE_A:65,CHAR_LOWERCASE_A:97,CHAR_UPPERCASE_Z:90,CHAR_LOWERCASE_Z:122,CHAR_LEFT_PARENTHESES:40,CHAR_RIGHT_PARENTHESES:41,CHAR_ASTERISK:42,CHAR_AMPERSAND:38,CHAR_AT:64,CHAR_BACKWARD_SLASH:92,CHAR_CARRIAGE_RETURN:13,CHAR_CIRCUMFLEX_ACCENT:94,CHAR_COLON:58,CHAR_COMMA:44,CHAR_DOT:46,CHAR_DOUBLE_QUOTE:34,CHAR_EQUAL:61,CHAR_EXCLAMATION_MARK:33,CHAR_FORM_FEED:12,CHAR_FORWARD_SLASH:47,CHAR_GRAVE_ACCENT:96,CHAR_HASH:35,CHAR_HYPHEN_MINUS:45,CHAR_LEFT_ANGLE_BRACKET:60,CHAR_LEFT_CURLY_BRACE:123,CHAR_LEFT_SQUARE_BRACKET:91,CHAR_LINE_FEED:10,CHAR_NO_BREAK_SPACE:160,CHAR_PERCENT:37,CHAR_PLUS:43,CHAR_QUESTION_MARK:63,CHAR_RIGHT_ANGLE_BRACKET:62,CHAR_RIGHT_CURLY_BRACE:125,CHAR_RIGHT_SQUARE_BRACKET:93,CHAR_SEMICOLON:59,CHAR_SINGLE_QUOTE:39,CHAR_SPACE:32,CHAR_TAB:9,CHAR_UNDERSCORE:95,CHAR_VERTICAL_LINE:124,CHAR_ZERO_WIDTH_NOBREAK_SPACE:65279,SEP:R_.sep,extglobChars(r){return{"!":{type:"negate",open:"(?:(?!(?:",close:`))${r.STAR})`},"?":{type:"qmark",open:"(?:",close:")?"},"+":{type:"plus",open:"(?:",close:")+"},"*":{type:"star",open:"(?:",close:")*"},"@":{type:"at",open:"(?:",close:")"}}},globChars(r){return r===!0?O_:oa}}});var Mt=k(Re=>{"use strict";var L_=require("path"),B_=process.platform==="win32",{REGEX_BACKSLASH:N_,REGEX_REMOVE_BACKSLASH:H_,REGEX_SPECIAL_CHARS:U_,REGEX_SPECIAL_CHARS_GLOBAL:$_}=Ft();Re.isObject=r=>r!==null&&typeof r=="object"&&!Array.isArray(r);Re.hasRegexChars=r=>U_.test(r);Re.isRegexChar=r=>r.length===1&&Re.hasRegexChars(r);Re.escapeRegex=r=>r.replace($_,"\\$1");Re.toPosixSlashes=r=>r.replace(N_,"/");Re.removeBackslashes=r=>r.replace(H_,e=>e==="\\"?"":e);Re.supportsLookbehinds=()=>{let r=process.version.slice(1).split(".").map(Number);return r.length===3&&r[0]>=9||r[0]===8&&r[1]>=10};Re.isWindows=r=>r&&typeof r.windows=="boolean"?r.windows:B_===!0||L_.sep==="\\";Re.escapeLast=(r,e,t)=>{let n=r.lastIndexOf(e,t);return n===-1?r:r[n-1]==="\\"?Re.escapeLast(r,e,n-1):`${r.slice(0,n)}\\${r.slice(n)}`};Re.removePrefix=(r,e={})=>{let t=r;return t.startsWith("./")&&(t=t.slice(2),e.prefix="./"),t};Re.wrapOutput=(r,e={},t={})=>{let n=t.contains?"":"^",s=t.contains?"":"$",a=`${n}(?:${r})${s}`;return e.negated===!0&&(a=`(?:^(?!${a}).*$)`),a}});var ma=k((um,ha)=>{"use strict";var ca=Mt(),{CHAR_ASTERISK:rn,CHAR_AT:q_,CHAR_BACKWARD_SLASH:Ot,CHAR_COMMA:W_,CHAR_DOT:nn,CHAR_EXCLAMATION_MARK:sn,CHAR_FORWARD_SLASH:pa,CHAR_LEFT_CURLY_BRACE:an,CHAR_LEFT_PARENTHESES:on,CHAR_LEFT_SQUARE_BRACKET:G_,CHAR_PLUS:j_,CHAR_QUESTION_MARK:la,CHAR_RIGHT_CURLY_BRACE:K_,CHAR_RIGHT_PARENTHESES:fa,CHAR_RIGHT_SQUARE_BRACKET:V_}=Ft(),_a=r=>r===pa||r===Ot,da=r=>{r.isPrefix!==!0&&(r.depth=r.isGlobstar?1/0:1)},z_=(r,e)=>{let t=e||{},n=r.length-1,s=t.parts===!0||t.scanToEnd===!0,a=[],u=[],f=[],d=r,y=-1,p=0,v=0,m=!1,G=!1,D=!1,C=!1,O=!1,H=!1,te=!1,J=!1,he=!1,w=!1,Z=0,$,M,I={value:"",depth:0,isGlob:!1},Y=()=>y>=n,g=()=>d.charCodeAt(y+1),B=()=>($=M,d.charCodeAt(++y));for(;y<n;){M=B();let N;if(M===Ot){te=I.backslashes=!0,M=B(),M===an&&(H=!0);continue}if(H===!0||M===an){for(Z++;Y()!==!0&&(M=B());){if(M===Ot){te=I.backslashes=!0,B();continue}if(M===an){Z++;continue}if(H!==!0&&M===nn&&(M=B())===nn){if(m=I.isBrace=!0,D=I.isGlob=!0,w=!0,s===!0)continue;break}if(H!==!0&&M===W_){if(m=I.isBrace=!0,D=I.isGlob=!0,w=!0,s===!0)continue;break}if(M===K_&&(Z--,Z===0)){H=!1,m=I.isBrace=!0,w=!0;break}}if(s===!0)continue;break}if(M===pa){if(a.push(y),u.push(I),I={value:"",depth:0,isGlob:!1},w===!0)continue;if($===nn&&y===p+1){p+=2;continue}v=y+1;continue}if(t.noext!==!0&&(M===j_||M===q_||M===rn||M===la||M===sn)===!0&&g()===on){if(D=I.isGlob=!0,C=I.isExtglob=!0,w=!0,M===sn&&y===p&&(he=!0),s===!0){for(;Y()!==!0&&(M=B());){if(M===Ot){te=I.backslashes=!0,M=B();continue}if(M===fa){D=I.isGlob=!0,w=!0;break}}continue}break}if(M===rn){if($===rn&&(O=I.isGlobstar=!0),D=I.isGlob=!0,w=!0,s===!0)continue;break}if(M===la){if(D=I.isGlob=!0,w=!0,s===!0)continue;break}if(M===G_){for(;Y()!==!0&&(N=B());){if(N===Ot){te=I.backslashes=!0,B();continue}if(N===V_){G=I.isBracket=!0,D=I.isGlob=!0,w=!0;break}}if(s===!0)continue;break}if(t.nonegate!==!0&&M===sn&&y===p){J=I.negated=!0,p++;continue}if(t.noparen!==!0&&M===on){if(D=I.isGlob=!0,s===!0){for(;Y()!==!0&&(M=B());){if(M===on){te=I.backslashes=!0,M=B();continue}if(M===fa){w=!0;break}}continue}break}if(D===!0){if(w=!0,s===!0)continue;break}}t.noext===!0&&(C=!1,D=!1);let x=d,re="",h="";p>0&&(re=d.slice(0,p),d=d.slice(p),v-=p),x&&D===!0&&v>0?(x=d.slice(0,v),h=d.slice(v)):D===!0?(x="",h=d):x=d,x&&x!==""&&x!=="/"&&x!==d&&_a(x.charCodeAt(x.length-1))&&(x=x.slice(0,-1)),t.unescape===!0&&(h&&(h=ca.removeBackslashes(h)),x&&te===!0&&(x=ca.removeBackslashes(x)));let l={prefix:re,input:r,start:p,base:x,glob:h,isBrace:m,isBracket:G,isGlob:D,isExtglob:C,isGlobstar:O,negated:J,negatedExtglob:he};if(t.tokens===!0&&(l.maxDepth=0,_a(M)||u.push(I),l.tokens=u),t.parts===!0||t.tokens===!0){let N;for(let Q=0;Q<a.length;Q++){let Pe=N?N+1:p,Ae=a[Q],ve=r.slice(Pe,Ae);t.tokens&&(Q===0&&p!==0?(u[Q].isPrefix=!0,u[Q].value=re):u[Q].value=ve,da(u[Q]),l.maxDepth+=u[Q].depth),(Q!==0||ve!=="")&&f.push(ve),N=Ae}if(N&&N+1<r.length){let Q=r.slice(N+1);f.push(Q),t.tokens&&(u[u.length-1].value=Q,da(u[u.length-1]),l.maxDepth+=u[u.length-1].depth)}l.slashes=a,l.parts=f}return l};ha.exports=z_});var Sa=k((cm,ya)=>{"use strict";var cr=Ft(),De=Mt(),{MAX_LENGTH:lr,POSIX_REGEX_SOURCE:Y_,REGEX_NON_SPECIAL_CHARS:Q_,REGEX_SPECIAL_CHARS_BACKREF:X_,REPLACEMENTS:ga}=cr,J_=(r,e)=>{if(typeof e.expandRange=="function")return e.expandRange(...r,e);r.sort();let t=`[${r.join("-")}]`;try{new RegExp(t)}catch{return r.map(s=>De.escapeRegex(s)).join("..")}return t},bt=(r,e)=>`Missing ${r}: "${e}" - use "\\\\${e}" to match literal characters`,ba=(r,e)=>{if(typeof r!="string")throw new TypeError("Expected a string");r=ga[r]||r;let t={...e},n=typeof t.maxLength=="number"?Math.min(lr,t.maxLength):lr,s=r.length;if(s>n)throw new SyntaxError(`Input length: ${s}, exceeds maximum allowed length: ${n}`);let a={type:"bos",value:"",output:t.prepend||""},u=[a],f=t.capture?"":"?:",d=De.isWindows(e),y=cr.globChars(d),p=cr.extglobChars(y),{DOT_LITERAL:v,PLUS_LITERAL:m,SLASH_LITERAL:G,ONE_CHAR:D,DOTS_SLASH:C,NO_DOT:O,NO_DOT_SLASH:H,NO_DOTS_SLASH:te,QMARK:J,QMARK_NO_DOT:he,STAR:w,START_ANCHOR:Z}=y,$=P=>`(${f}(?:(?!${Z}${P.dot?C:v}).)*?)`,M=t.dot?"":O,I=t.dot?J:he,Y=t.bash===!0?$(t):w;t.capture&&(Y=`(${Y})`),typeof t.noext=="boolean"&&(t.noextglob=t.noext);let g={input:r,index:-1,start:0,dot:t.dot===!0,consumed:"",output:"",prefix:"",backtrack:!1,negated:!1,brackets:0,braces:0,parens:0,quotes:0,globstar:!1,tokens:u};r=De.removePrefix(r,g),s=r.length;let B=[],x=[],re=[],h=a,l,N=()=>g.index===s-1,Q=g.peek=(P=1)=>r[g.index+P],Pe=g.advance=()=>r[++g.index]||"",Ae=()=>r.slice(g.index+1),ve=(P="",ae=0)=>{g.consumed+=P,g.index+=ae},et=P=>{g.output+=P.output!=null?P.output:P.value,ve(P.value)},xt=()=>{let P=1;for(;Q()==="!"&&(Q(2)!=="("||Q(3)==="?");)Pe(),g.start++,P++;return P%2===0?!1:(g.negated=!0,g.start++,!0)},lt=P=>{g[P]++,re.push(P)},Le=P=>{g[P]--,re.pop()},j=P=>{if(h.type==="globstar"){let ae=g.braces>0&&(P.type==="comma"||P.type==="brace"),A=P.extglob===!0||B.length&&(P.type==="pipe"||P.type==="paren");P.type!=="slash"&&P.type!=="paren"&&!ae&&!A&&(g.output=g.output.slice(0,-h.output.length),h.type="star",h.value="*",h.output=Y,g.output+=h.output)}if(B.length&&P.type!=="paren"&&(B[B.length-1].inner+=P.value),(P.value||P.output)&&et(P),h&&h.type==="text"&&P.type==="text"){h.value+=P.value,h.output=(h.output||"")+P.value;return}P.prev=h,u.push(P),h=P},ft=(P,ae)=>{let A={...p[ae],conditions:1,inner:""};A.prev=h,A.parens=g.parens,A.output=g.output;let W=(t.capture?"(":"")+A.open;lt("parens"),j({type:P,value:ae,output:g.output?"":D}),j({type:"paren",extglob:!0,value:Pe(),output:W}),B.push(A)},Ir=P=>{let ae=P.close+(t.capture?")":""),A;if(P.type==="negate"){let W=Y;P.inner&&P.inner.length>1&&P.inner.includes("/")&&(W=$(t)),(W!==Y||N()||/^\)+$/.test(Ae()))&&(ae=P.close=`)$))${W}`),P.inner.includes("*")&&(A=Ae())&&/^\.[^\\/.]+$/.test(A)&&(ae=P.close=`)${A})${W})`),P.prev.type==="bos"&&(g.negatedExtglob=!0)}j({type:"paren",extglob:!0,value:l,output:ae}),Le("parens")};if(t.fastpaths!==!1&&!/(^[*!]|[/()[\]{}"])/.test(r)){let P=!1,ae=r.replace(X_,(A,W,_e,me,de,Oe)=>me==="\\"?(P=!0,A):me==="?"?W?W+me+(de?J.repeat(de.length):""):Oe===0?I+(de?J.repeat(de.length):""):J.repeat(_e.length):me==="."?v.repeat(_e.length):me==="*"?W?W+me+(de?Y:""):Y:W?A:`\\${A}`);return P===!0&&(t.unescape===!0?ae=ae.replace(/\\/g,""):ae=ae.replace(/\\+/g,A=>A.length%2===0?"\\\\":A?"\\":"")),ae===r&&t.contains===!0?(g.output=r,g):(g.output=De.wrapOutput(ae,g,e),g)}for(;!N();){if(l=Pe(),l==="\0")continue;if(l==="\\"){let A=Q();if(A==="/"&&t.bash!==!0||A==="."||A===";")continue;if(!A){l+="\\",j({type:"text",value:l});continue}let W=/^\\+/.exec(Ae()),_e=0;if(W&&W[0].length>2&&(_e=W[0].length,g.index+=_e,_e%2!==0&&(l+="\\")),t.unescape===!0?l=Pe():l+=Pe(),g.brackets===0){j({type:"text",value:l});continue}}if(g.brackets>0&&(l!=="]"||h.value==="["||h.value==="[^")){if(t.posix!==!1&&l===":"){let A=h.value.slice(1);if(A.includes("[")&&(h.posix=!0,A.includes(":"))){let W=h.value.lastIndexOf("["),_e=h.value.slice(0,W),me=h.value.slice(W+2),de=Y_[me];if(de){h.value=_e+de,g.backtrack=!0,Pe(),!a.output&&u.indexOf(h)===1&&(a.output=D);continue}}}(l==="["&&Q()!==":"||l==="-"&&Q()==="]")&&(l=`\\${l}`),l==="]"&&(h.value==="["||h.value==="[^")&&(l=`\\${l}`),t.posix===!0&&l==="!"&&h.value==="["&&(l="^"),h.value+=l,et({value:l});continue}if(g.quotes===1&&l!=='"'){l=De.escapeRegex(l),h.value+=l,et({value:l});continue}if(l==='"'){g.quotes=g.quotes===1?0:1,t.keepQuotes===!0&&j({type:"text",value:l});continue}if(l==="("){lt("parens"),j({type:"paren",value:l});continue}if(l===")"){if(g.parens===0&&t.strictBrackets===!0)throw new SyntaxError(bt("opening","("));let A=B[B.length-1];if(A&&g.parens===A.parens+1){Ir(B.pop());continue}j({type:"paren",value:l,output:g.parens?")":"\\)"}),Le("parens");continue}if(l==="["){if(t.nobracket===!0||!Ae().includes("]")){if(t.nobracket!==!0&&t.strictBrackets===!0)throw new SyntaxError(bt("closing","]"));l=`\\${l}`}else lt("brackets");j({type:"bracket",value:l});continue}if(l==="]"){if(t.nobracket===!0||h&&h.type==="bracket"&&h.value.length===1){j({type:"text",value:l,output:`\\${l}`});continue}if(g.brackets===0){if(t.strictBrackets===!0)throw new SyntaxError(bt("opening","["));j({type:"text",value:l,output:`\\${l}`});continue}Le("brackets");let A=h.value.slice(1);if(h.posix!==!0&&A[0]==="^"&&!A.includes("/")&&(l=`/${l}`),h.value+=l,et({value:l}),t.literalBrackets===!1||De.hasRegexChars(A))continue;let W=De.escapeRegex(h.value);if(g.output=g.output.slice(0,-h.value.length),t.literalBrackets===!0){g.output+=W,h.value=W;continue}h.value=`(${f}${W}|${h.value})`,g.output+=h.value;continue}if(l==="{"&&t.nobrace!==!0){lt("braces");let A={type:"brace",value:l,output:"(",outputIndex:g.output.length,tokensIndex:g.tokens.length};x.push(A),j(A);continue}if(l==="}"){let A=x[x.length-1];if(t.nobrace===!0||!A){j({type:"text",value:l,output:l});continue}let W=")";if(A.dots===!0){let _e=u.slice(),me=[];for(let de=_e.length-1;de>=0&&(u.pop(),_e[de].type!=="brace");de--)_e[de].type!=="dots"&&me.unshift(_e[de].value);W=J_(me,t),g.backtrack=!0}if(A.comma!==!0&&A.dots!==!0){let _e=g.output.slice(0,A.outputIndex),me=g.tokens.slice(A.tokensIndex);A.value=A.output="\\{",l=W="\\}",g.output=_e;for(let de of me)g.output+=de.output||de.value}j({type:"brace",value:l,output:W}),Le("braces"),x.pop();continue}if(l==="|"){B.length>0&&B[B.length-1].conditions++,j({type:"text",value:l});continue}if(l===","){let A=l,W=x[x.length-1];W&&re[re.length-1]==="braces"&&(W.comma=!0,A="|"),j({type:"comma",value:l,output:A});continue}if(l==="/"){if(h.type==="dot"&&g.index===g.start+1){g.start=g.index+1,g.consumed="",g.output="",u.pop(),h=a;continue}j({type:"slash",value:l,output:G});continue}if(l==="."){if(g.braces>0&&h.type==="dot"){h.value==="."&&(h.output=v);let A=x[x.length-1];h.type="dots",h.output+=l,h.value+=l,A.dots=!0;continue}if(g.braces+g.parens===0&&h.type!=="bos"&&h.type!=="slash"){j({type:"text",value:l,output:v});continue}j({type:"dot",value:l,output:v});continue}if(l==="?"){if(!(h&&h.value==="(")&&t.noextglob!==!0&&Q()==="("&&Q(2)!=="?"){ft("qmark",l);continue}if(h&&h.type==="paren"){let W=Q(),_e=l;if(W==="<"&&!De.supportsLookbehinds())throw new Error("Node.js v10 or higher is required for regex lookbehinds");(h.value==="("&&!/[!=<:]/.test(W)||W==="<"&&!/<([!=]|\w+>)/.test(Ae()))&&(_e=`\\${l}`),j({type:"text",value:l,output:_e});continue}if(t.dot!==!0&&(h.type==="slash"||h.type==="bos")){j({type:"qmark",value:l,output:he});continue}j({type:"qmark",value:l,output:J});continue}if(l==="!"){if(t.noextglob!==!0&&Q()==="("&&(Q(2)!=="?"||!/[!=<:]/.test(Q(3)))){ft("negate",l);continue}if(t.nonegate!==!0&&g.index===0){xt();continue}}if(l==="+"){if(t.noextglob!==!0&&Q()==="("&&Q(2)!=="?"){ft("plus",l);continue}if(h&&h.value==="("||t.regex===!1){j({type:"plus",value:l,output:m});continue}if(h&&(h.type==="bracket"||h.type==="paren"||h.type==="brace")||g.parens>0){j({type:"plus",value:l});continue}j({type:"plus",value:m});continue}if(l==="@"){if(t.noextglob!==!0&&Q()==="("&&Q(2)!=="?"){j({type:"at",extglob:!0,value:l,output:""});continue}j({type:"text",value:l});continue}if(l!=="*"){(l==="$"||l==="^")&&(l=`\\${l}`);let A=Q_.exec(Ae());A&&(l+=A[0],g.index+=A[0].length),j({type:"text",value:l});continue}if(h&&(h.type==="globstar"||h.star===!0)){h.type="star",h.star=!0,h.value+=l,h.output=Y,g.backtrack=!0,g.globstar=!0,ve(l);continue}let P=Ae();if(t.noextglob!==!0&&/^\([^?]/.test(P)){ft("star",l);continue}if(h.type==="star"){if(t.noglobstar===!0){ve(l);continue}let A=h.prev,W=A.prev,_e=A.type==="slash"||A.type==="bos",me=W&&(W.type==="star"||W.type==="globstar");if(t.bash===!0&&(!_e||P[0]&&P[0]!=="/")){j({type:"star",value:l,output:""});continue}let de=g.braces>0&&(A.type==="comma"||A.type==="brace"),Oe=B.length&&(A.type==="pipe"||A.type==="paren");if(!_e&&A.type!=="paren"&&!de&&!Oe){j({type:"star",value:l,output:""});continue}for(;P.slice(0,3)==="/**";){let Ve=r[g.index+4];if(Ve&&Ve!=="/")break;P=P.slice(3),ve("/**",3)}if(A.type==="bos"&&N()){h.type="globstar",h.value+=l,h.output=$(t),g.output=h.output,g.globstar=!0,ve(l);continue}if(A.type==="slash"&&A.prev.type!=="bos"&&!me&&N()){g.output=g.output.slice(0,-(A.output+h.output).length),A.output=`(?:${A.output}`,h.type="globstar",h.output=$(t)+(t.strictSlashes?")":"|$)"),h.value+=l,g.globstar=!0,g.output+=A.output+h.output,ve(l);continue}if(A.type==="slash"&&A.prev.type!=="bos"&&P[0]==="/"){let Ve=P[1]!==void 0?"|$":"";g.output=g.output.slice(0,-(A.output+h.output).length),A.output=`(?:${A.output}`,h.type="globstar",h.output=`${$(t)}${G}|${G}${Ve})`,h.value+=l,g.output+=A.output+h.output,g.globstar=!0,ve(l+Pe()),j({type:"slash",value:"/",output:""});continue}if(A.type==="bos"&&P[0]==="/"){h.type="globstar",h.value+=l,h.output=`(?:^|${G}|${$(t)}${G})`,g.output=h.output,g.globstar=!0,ve(l+Pe()),j({type:"slash",value:"/",output:""});continue}g.output=g.output.slice(0,-h.output.length),h.type="globstar",h.output=$(t),h.value+=l,g.output+=h.output,g.globstar=!0,ve(l);continue}let ae={type:"star",value:l,output:Y};if(t.bash===!0){ae.output=".*?",(h.type==="bos"||h.type==="slash")&&(ae.output=M+ae.output),j(ae);continue}if(h&&(h.type==="bracket"||h.type==="paren")&&t.regex===!0){ae.output=l,j(ae);continue}(g.index===g.start||h.type==="slash"||h.type==="dot")&&(h.type==="dot"?(g.output+=H,h.output+=H):t.dot===!0?(g.output+=te,h.output+=te):(g.output+=M,h.output+=M),Q()!=="*"&&(g.output+=D,h.output+=D)),j(ae)}for(;g.brackets>0;){if(t.strictBrackets===!0)throw new SyntaxError(bt("closing","]"));g.output=De.escapeLast(g.output,"["),Le("brackets")}for(;g.parens>0;){if(t.strictBrackets===!0)throw new SyntaxError(bt("closing",")"));g.output=De.escapeLast(g.output,"("),Le("parens")}for(;g.braces>0;){if(t.strictBrackets===!0)throw new SyntaxError(bt("closing","}"));g.output=De.escapeLast(g.output,"{"),Le("braces")}if(t.strictSlashes!==!0&&(h.type==="star"||h.type==="bracket")&&j({type:"maybe_slash",value:"",output:`${G}?`}),g.backtrack===!0){g.output="";for(let P of g.tokens)g.output+=P.output!=null?P.output:P.value,P.suffix&&(g.output+=P.suffix)}return g};ba.fastpaths=(r,e)=>{let t={...e},n=typeof t.maxLength=="number"?Math.min(lr,t.maxLength):lr,s=r.length;if(s>n)throw new SyntaxError(`Input length: ${s}, exceeds maximum allowed length: ${n}`);r=ga[r]||r;let a=De.isWindows(e),{DOT_LITERAL:u,SLASH_LITERAL:f,ONE_CHAR:d,DOTS_SLASH:y,NO_DOT:p,NO_DOTS:v,NO_DOTS_SLASH:m,STAR:G,START_ANCHOR:D}=cr.globChars(a),C=t.dot?v:p,O=t.dot?m:p,H=t.capture?"":"?:",te={negated:!1,prefix:""},J=t.bash===!0?".*?":G;t.capture&&(J=`(${J})`);let he=M=>M.noglobstar===!0?J:`(${H}(?:(?!${D}${M.dot?y:u}).)*?)`,w=M=>{switch(M){case"*":return`${C}${d}${J}`;case".*":return`${u}${d}${J}`;case"*.*":return`${C}${J}${u}${d}${J}`;case"*/*":return`${C}${J}${f}${d}${O}${J}`;case"**":return C+he(t);case"**/*":return`(?:${C}${he(t)}${f})?${O}${d}${J}`;case"**/*.*":return`(?:${C}${he(t)}${f})?${O}${J}${u}${d}${J}`;case"**/.*":return`(?:${C}${he(t)}${f})?${u}${d}${J}`;default:{let I=/^(.*?)\.(\w+)$/.exec(M);if(!I)return;let Y=w(I[1]);return Y?Y+u+I[2]:void 0}}},Z=De.removePrefix(r,te),$=w(Z);return $&&t.strictSlashes!==!0&&($+=`${f}?`),$};ya.exports=ba});var va=k((lm,Ea)=>{"use strict";var Z_=require("path"),ed=ma(),un=Sa(),cn=Mt(),td=Ft(),rd=r=>r&&typeof r=="object"&&!Array.isArray(r),pe=(r,e,t=!1)=>{if(Array.isArray(r)){let p=r.map(m=>pe(m,e,t));return m=>{for(let G of p){let D=G(m);if(D)return D}return!1}}let n=rd(r)&&r.tokens&&r.input;if(r===""||typeof r!="string"&&!n)throw new TypeError("Expected pattern to be a non-empty string");let s=e||{},a=cn.isWindows(e),u=n?pe.compileRe(r,e):pe.makeRe(r,e,!1,!0),f=u.state;delete u.state;let d=()=>!1;if(s.ignore){let p={...e,ignore:null,onMatch:null,onResult:null};d=pe(s.ignore,p,t)}let y=(p,v=!1)=>{let{isMatch:m,match:G,output:D}=pe.test(p,u,e,{glob:r,posix:a}),C={glob:r,state:f,regex:u,posix:a,input:p,output:D,match:G,isMatch:m};return typeof s.onResult=="function"&&s.onResult(C),m===!1?(C.isMatch=!1,v?C:!1):d(p)?(typeof s.onIgnore=="function"&&s.onIgnore(C),C.isMatch=!1,v?C:!1):(typeof s.onMatch=="function"&&s.onMatch(C),v?C:!0)};return t&&(y.state=f),y};pe.test=(r,e,t,{glob:n,posix:s}={})=>{if(typeof r!="string")throw new TypeError("Expected input to be a string");if(r==="")return{isMatch:!1,output:""};let a=t||{},u=a.format||(s?cn.toPosixSlashes:null),f=r===n,d=f&&u?u(r):r;return f===!1&&(d=u?u(r):r,f=d===n),(f===!1||a.capture===!0)&&(a.matchBase===!0||a.basename===!0?f=pe.matchBase(r,e,t,s):f=e.exec(d)),{isMatch:!!f,match:f,output:d}};pe.matchBase=(r,e,t,n=cn.isWindows(t))=>(e instanceof RegExp?e:pe.makeRe(e,t)).test(Z_.basename(r));pe.isMatch=(r,e,t)=>pe(e,t)(r);pe.parse=(r,e)=>Array.isArray(r)?r.map(t=>pe.parse(t,e)):un(r,{...e,fastpaths:!1});pe.scan=(r,e)=>ed(r,e);pe.compileRe=(r,e,t=!1,n=!1)=>{if(t===!0)return r.output;let s=e||{},a=s.contains?"":"^",u=s.contains?"":"$",f=`${a}(?:${r.output})${u}`;r&&r.negated===!0&&(f=`^(?!${f}).*$`);let d=pe.toRegex(f,e);return n===!0&&(d.state=r),d};pe.makeRe=(r,e={},t=!1,n=!1)=>{if(!r||typeof r!="string")throw new TypeError("Expected a non-empty string");let s={negated:!1,fastpaths:!0};return e.fastpaths!==!1&&(r[0]==="."||r[0]==="*")&&(s.output=un.fastpaths(r,e)),s.output||(s=un(r,e)),pe.compileRe(s,e,t,n)};pe.toRegex=(r,e)=>{try{let t=e||{};return new RegExp(r,t.flags||(t.nocase?"i":""))}catch(t){if(e&&e.debug===!0)throw t;return/$^/}};pe.constants=td;Ea.exports=pe});var Ra=k((fm,wa)=>{"use strict";wa.exports=va()});var Pa=k((_m,Da)=>{"use strict";var Ta=require("util"),ka=na(),Ue=Ra(),ln=Mt(),Aa=r=>r===""||r==="./",fe=(r,e,t)=>{e=[].concat(e),r=[].concat(r);let n=new Set,s=new Set,a=new Set,u=0,f=p=>{a.add(p.output),t&&t.onResult&&t.onResult(p)};for(let p=0;p<e.length;p++){let v=Ue(String(e[p]),{...t,onResult:f},!0),m=v.state.negated||v.state.negatedExtglob;m&&u++;for(let G of r){let D=v(G,!0);(m?!D.isMatch:D.isMatch)&&(m?n.add(D.output):(n.delete(D.output),s.add(D.output)))}}let y=(u===e.length?[...a]:[...s]).filter(p=>!n.has(p));if(t&&y.length===0){if(t.failglob===!0)throw new Error(`No matches found for "${e.join(", ")}"`);if(t.nonull===!0||t.nullglob===!0)return t.unescape?e.map(p=>p.replace(/\\/g,"")):e}return y};fe.match=fe;fe.matcher=(r,e)=>Ue(r,e);fe.isMatch=(r,e,t)=>Ue(e,t)(r);fe.any=fe.isMatch;fe.not=(r,e,t={})=>{e=[].concat(e).map(String);let n=new Set,s=[],u=fe(r,e,{...t,onResult:f=>{t.onResult&&t.onResult(f),s.push(f.output)}});for(let f of s)u.includes(f)||n.add(f);return[...n]};fe.contains=(r,e,t)=>{if(typeof r!="string")throw new TypeError(`Expected a string: "${Ta.inspect(r)}"`);if(Array.isArray(e))return e.some(n=>fe.contains(r,n,t));if(typeof e=="string"){if(Aa(r)||Aa(e))return!1;if(r.includes(e)||r.startsWith("./")&&r.slice(2).includes(e))return!0}return fe.isMatch(r,e,{...t,contains:!0})};fe.matchKeys=(r,e,t)=>{if(!ln.isObject(r))throw new TypeError("Expected the first argument to be an object");let n=fe(Object.keys(r),e,t),s={};for(let a of n)s[a]=r[a];return s};fe.some=(r,e,t)=>{let n=[].concat(r);for(let s of[].concat(e)){let a=Ue(String(s),t);if(n.some(u=>a(u)))return!0}return!1};fe.every=(r,e,t)=>{let n=[].concat(r);for(let s of[].concat(e)){let a=Ue(String(s),t);if(!n.every(u=>a(u)))return!1}return!0};fe.all=(r,e,t)=>{if(typeof r!="string")throw new TypeError(`Expected a string: "${Ta.inspect(r)}"`);return[].concat(e).every(n=>Ue(n,t)(r))};fe.capture=(r,e,t)=>{let n=ln.isWindows(t),a=Ue.makeRe(String(r),{...t,capture:!0}).exec(n?ln.toPosixSlashes(e):e);if(a)return a.slice(1).map(u=>u===void 0?"":u)};fe.makeRe=(...r)=>Ue.makeRe(...r);fe.scan=(...r)=>Ue.scan(...r);fe.parse=(r,e)=>{let t=[];for(let n of[].concat(r||[]))for(let s of ka(String(n),e))t.push(Ue.parse(s,e));return t};fe.braces=(r,e)=>{if(typeof r!="string")throw new TypeError("Expected a string");return e&&e.nobrace===!0||!/\{.*\}/.test(r)?[r]:ka(r,e)};fe.braceExpand=(r,e)=>{if(typeof r!="string")throw new TypeError("Expected a string");return fe.braces(r,{...e,expand:!0})};Da.exports=fe});var Ba=k(U=>{"use strict";Object.defineProperty(U,"__esModule",{value:!0});U.matchAny=U.convertPatternsToRe=U.makeRe=U.getPatternParts=U.expandBraceExpansion=U.expandPatternsWithBraceExpansion=U.isAffectDepthOfReadingPattern=U.endsWithSlashGlobStar=U.hasGlobStar=U.getBaseDirectory=U.isPatternRelatedToParentDirectory=U.getPatternsOutsideCurrentDirectory=U.getPatternsInsideCurrentDirectory=U.getPositivePatterns=U.getNegativePatterns=U.isPositivePattern=U.isNegativePattern=U.convertToNegativePattern=U.convertToPositivePattern=U.isDynamicPattern=U.isStaticPattern=void 0;var nd=require("path"),sd=Si(),fn=Pa(),Ca="**",id="\\",ad=/[*?]|^!/,od=/\[[^[]*]/,ud=/(?:^|[^!*+?@])\([^(]*\|[^|]*\)/,cd=/[!*+?@]\([^(]*\)/,ld=/,|\.\./;function Ia(r,e={}){return!Fa(r,e)}U.isStaticPattern=Ia;function Fa(r,e={}){return r===""?!1:!!(e.caseSensitiveMatch===!1||r.includes(id)||ad.test(r)||od.test(r)||ud.test(r)||e.extglob!==!1&&cd.test(r)||e.braceExpansion!==!1&&fd(r))}U.isDynamicPattern=Fa;function fd(r){let e=r.indexOf("{");if(e===-1)return!1;let t=r.indexOf("}",e+1);if(t===-1)return!1;let n=r.slice(e,t);return ld.test(n)}function _d(r){return fr(r)?r.slice(1):r}U.convertToPositivePattern=_d;function dd(r){return"!"+r}U.convertToNegativePattern=dd;function fr(r){return r.startsWith("!")&&r[1]!=="("}U.isNegativePattern=fr;function Ma(r){return!fr(r)}U.isPositivePattern=Ma;function pd(r){return r.filter(fr)}U.getNegativePatterns=pd;function hd(r){return r.filter(Ma)}U.getPositivePatterns=hd;function md(r){return r.filter(e=>!_n(e))}U.getPatternsInsideCurrentDirectory=md;function gd(r){return r.filter(_n)}U.getPatternsOutsideCurrentDirectory=gd;function _n(r){return r.startsWith("..")||r.startsWith("./..")}U.isPatternRelatedToParentDirectory=_n;function bd(r){return sd(r,{flipBackslashes:!1})}U.getBaseDirectory=bd;function yd(r){return r.includes(Ca)}U.hasGlobStar=yd;function Oa(r){return r.endsWith("/"+Ca)}U.endsWithSlashGlobStar=Oa;function Sd(r){let e=nd.basename(r);return Oa(r)||Ia(e)}U.isAffectDepthOfReadingPattern=Sd;function Ed(r){return r.reduce((e,t)=>e.concat(xa(t)),[])}U.expandPatternsWithBraceExpansion=Ed;function xa(r){return fn.braces(r,{expand:!0,nodupes:!0})}U.expandBraceExpansion=xa;function vd(r,e){let{parts:t}=fn.scan(r,Object.assign(Object.assign({},e),{parts:!0}));return t.length===0&&(t=[r]),t[0].startsWith("/")&&(t[0]=t[0].slice(1),t.unshift("")),t}U.getPatternParts=vd;function La(r,e){return fn.makeRe(r,e)}U.makeRe=La;function wd(r,e){return r.map(t=>La(t,e))}U.convertPatternsToRe=wd;function Rd(r,e){return e.some(t=>t.test(r))}U.matchAny=Rd});var $a=k((pm,Ua)=>{"use strict";var Ad=require("stream"),Na=Ad.PassThrough,Td=Array.prototype.slice;Ua.exports=kd;function kd(){let r=[],e=Td.call(arguments),t=!1,n=e[e.length-1];n&&!Array.isArray(n)&&n.pipe==null?e.pop():n={};let s=n.end!==!1,a=n.pipeError===!0;n.objectMode==null&&(n.objectMode=!0),n.highWaterMark==null&&(n.highWaterMark=64*1024);let u=Na(n);function f(){for(let p=0,v=arguments.length;p<v;p++)r.push(Ha(arguments[p],n));return d(),this}function d(){if(t)return;t=!0;let p=r.shift();if(!p){process.nextTick(y);return}Array.isArray(p)||(p=[p]);let v=p.length+1;function m(){--v>0||(t=!1,d())}function G(D){function C(){D.removeListener("merge2UnpipeEnd",C),D.removeListener("end",C),a&&D.removeListener("error",O),m()}function O(H){u.emit("error",H)}if(D._readableState.endEmitted)return m();D.on("merge2UnpipeEnd",C),D.on("end",C),a&&D.on("error",O),D.pipe(u,{end:!1}),D.resume()}for(let D=0;D<p.length;D++)G(p[D]);m()}function y(){t=!1,u.emit("queueDrain"),s&&u.end()}return u.setMaxListeners(0),u.add=f,u.on("unpipe",function(p){p.emit("merge2UnpipeEnd")}),e.length&&f.apply(null,e),u}function Ha(r,e){if(Array.isArray(r))for(let t=0,n=r.length;t<n;t++)r[t]=Ha(r[t],e);else{if(!r._readableState&&r.pipe&&(r=r.pipe(Na(e))),!r._readableState||!r.pause||!r.pipe)throw new Error("Only readable stream can be merged.");r.pause()}return r}});var Wa=k(_r=>{"use strict";Object.defineProperty(_r,"__esModule",{value:!0});_r.merge=void 0;var Dd=$a();function Pd(r){let e=Dd(r);return r.forEach(t=>{t.once("error",n=>e.emit("error",n))}),e.once("close",()=>qa(r)),e.once("end",()=>qa(r)),e}_r.merge=Pd;function qa(r){r.forEach(e=>e.emit("close"))}});var Ga=k(yt=>{"use strict";Object.defineProperty(yt,"__esModule",{value:!0});yt.isEmpty=yt.isString=void 0;function Cd(r){return typeof r=="string"}yt.isString=Cd;function Id(r){return r===""}yt.isEmpty=Id});var je=k(Se=>{"use strict";Object.defineProperty(Se,"__esModule",{value:!0});Se.string=Se.stream=Se.pattern=Se.path=Se.fs=Se.errno=Se.array=void 0;var Fd=li();Se.array=Fd;var Md=fi();Se.errno=Md;var Od=_i();Se.fs=Od;var xd=di();Se.path=xd;var Ld=Ba();Se.pattern=Ld;var Bd=Wa();Se.stream=Bd;var Nd=Ga();Se.string=Nd});var Va=k(Ee=>{"use strict";Object.defineProperty(Ee,"__esModule",{value:!0});Ee.convertPatternGroupToTask=Ee.convertPatternGroupsToTasks=Ee.groupPatternsByBaseDirectory=Ee.getNegativePatternsAsPositive=Ee.getPositivePatterns=Ee.convertPatternsToTasks=Ee.generate=void 0;var Ke=je();function Hd(r,e){let t=ja(r),n=Ka(r,e.ignore),s=t.filter(d=>Ke.pattern.isStaticPattern(d,e)),a=t.filter(d=>Ke.pattern.isDynamicPattern(d,e)),u=dn(s,n,!1),f=dn(a,n,!0);return u.concat(f)}Ee.generate=Hd;function dn(r,e,t){let n=[],s=Ke.pattern.getPatternsOutsideCurrentDirectory(r),a=Ke.pattern.getPatternsInsideCurrentDirectory(r),u=pn(s),f=pn(a);return n.push(...hn(u,e,t)),"."in f?n.push(mn(".",a,e,t)):n.push(...hn(f,e,t)),n}Ee.convertPatternsToTasks=dn;function ja(r){return Ke.pattern.getPositivePatterns(r)}Ee.getPositivePatterns=ja;function Ka(r,e){return Ke.pattern.getNegativePatterns(r).concat(e).map(Ke.pattern.convertToPositivePattern)}Ee.getNegativePatternsAsPositive=Ka;function pn(r){let e={};return r.reduce((t,n)=>{let s=Ke.pattern.getBaseDirectory(n);return s in t?t[s].push(n):t[s]=[n],t},e)}Ee.groupPatternsByBaseDirectory=pn;function hn(r,e,t){return Object.keys(r).map(n=>mn(n,r[n],e,t))}Ee.convertPatternGroupsToTasks=hn;function mn(r,e,t,n){return{dynamic:n,positive:e,negative:t,base:r,patterns:[].concat(e,t.map(Ke.pattern.convertToNegativePattern))}}Ee.convertPatternGroupToTask=mn});var Ya=k(St=>{"use strict";Object.defineProperty(St,"__esModule",{value:!0});St.removeDuplicateSlashes=St.transform=void 0;var Ud=/(?!^)\/{2,}/g;function $d(r){return r.map(e=>za(e))}St.transform=$d;function za(r){return r.replace(Ud,"/")}St.removeDuplicateSlashes=za});var Xa=k(dr=>{"use strict";Object.defineProperty(dr,"__esModule",{value:!0});dr.read=void 0;function qd(r,e,t){e.fs.lstat(r,(n,s)=>{if(n!==null){Qa(t,n);return}if(!s.isSymbolicLink()||!e.followSymbolicLink){gn(t,s);return}e.fs.stat(r,(a,u)=>{if(a!==null){if(e.throwErrorOnBrokenSymbolicLink){Qa(t,a);return}gn(t,s);return}e.markSymbolicLink&&(u.isSymbolicLink=()=>!0),gn(t,u)})})}dr.read=qd;function Qa(r,e){r(e)}function gn(r,e){r(null,e)}});var Ja=k(pr=>{"use strict";Object.defineProperty(pr,"__esModule",{value:!0});pr.read=void 0;function Wd(r,e){let t=e.fs.lstatSync(r);if(!t.isSymbolicLink()||!e.followSymbolicLink)return t;try{let n=e.fs.statSync(r);return e.markSymbolicLink&&(n.isSymbolicLink=()=>!0),n}catch(n){if(!e.throwErrorOnBrokenSymbolicLink)return t;throw n}}pr.read=Wd});var Za=k(ze=>{"use strict";Object.defineProperty(ze,"__esModule",{value:!0});ze.createFileSystemAdapter=ze.FILE_SYSTEM_ADAPTER=void 0;var hr=require("fs");ze.FILE_SYSTEM_ADAPTER={lstat:hr.lstat,stat:hr.stat,lstatSync:hr.lstatSync,statSync:hr.statSync};function Gd(r){return r===void 0?ze.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},ze.FILE_SYSTEM_ADAPTER),r)}ze.createFileSystemAdapter=Gd});var eo=k(yn=>{"use strict";Object.defineProperty(yn,"__esModule",{value:!0});var jd=Za(),bn=class{constructor(e={}){this._options=e,this.followSymbolicLink=this._getValue(this._options.followSymbolicLink,!0),this.fs=jd.createFileSystemAdapter(this._options.fs),this.markSymbolicLink=this._getValue(this._options.markSymbolicLink,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0)}_getValue(e,t){return e??t}};yn.default=bn});var ot=k(Ye=>{"use strict";Object.defineProperty(Ye,"__esModule",{value:!0});Ye.statSync=Ye.stat=Ye.Settings=void 0;var to=Xa(),Kd=Ja(),Sn=eo();Ye.Settings=Sn.default;function Vd(r,e,t){if(typeof e=="function"){to.read(r,En(),e);return}to.read(r,En(e),t)}Ye.stat=Vd;function zd(r,e){let t=En(e);return Kd.read(r,t)}Ye.statSync=zd;function En(r={}){return r instanceof Sn.default?r:new Sn.default(r)}});var so=k((Am,no)=>{var ro;no.exports=typeof queueMicrotask=="function"?queueMicrotask.bind(typeof window<"u"?window:global):r=>(ro||(ro=Promise.resolve())).then(r).catch(e=>setTimeout(()=>{throw e},0))});var ao=k((Tm,io)=>{io.exports=Qd;var Yd=so();function Qd(r,e){let t,n,s,a=!0;Array.isArray(r)?(t=[],n=r.length):(s=Object.keys(r),t={},n=s.length);function u(d){function y(){e&&e(d,t),e=null}a?Yd(y):y()}function f(d,y,p){t[d]=p,(--n===0||y)&&u(y)}n?s?s.forEach(function(d){r[d](function(y,p){f(d,y,p)})}):r.forEach(function(d,y){d(function(p,v){f(y,p,v)})}):u(null),a=!1}});var vn=k(gr=>{"use strict";Object.defineProperty(gr,"__esModule",{value:!0});gr.IS_SUPPORT_READDIR_WITH_FILE_TYPES=void 0;var mr=process.versions.node.split(".");if(mr[0]===void 0||mr[1]===void 0)throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);var oo=Number.parseInt(mr[0],10),Xd=Number.parseInt(mr[1],10),uo=10,Jd=10,Zd=oo>uo,ep=oo===uo&&Xd>=Jd;gr.IS_SUPPORT_READDIR_WITH_FILE_TYPES=Zd||ep});var co=k(br=>{"use strict";Object.defineProperty(br,"__esModule",{value:!0});br.createDirentFromStats=void 0;var wn=class{constructor(e,t){this.name=e,this.isBlockDevice=t.isBlockDevice.bind(t),this.isCharacterDevice=t.isCharacterDevice.bind(t),this.isDirectory=t.isDirectory.bind(t),this.isFIFO=t.isFIFO.bind(t),this.isFile=t.isFile.bind(t),this.isSocket=t.isSocket.bind(t),this.isSymbolicLink=t.isSymbolicLink.bind(t)}};function tp(r,e){return new wn(r,e)}br.createDirentFromStats=tp});var Rn=k(yr=>{"use strict";Object.defineProperty(yr,"__esModule",{value:!0});yr.fs=void 0;var rp=co();yr.fs=rp});var An=k(Sr=>{"use strict";Object.defineProperty(Sr,"__esModule",{value:!0});Sr.joinPathSegments=void 0;function np(r,e,t){return r.endsWith(t)?r+e:r+t+e}Sr.joinPathSegments=np});var mo=k(Qe=>{"use strict";Object.defineProperty(Qe,"__esModule",{value:!0});Qe.readdir=Qe.readdirWithFileTypes=Qe.read=void 0;var sp=ot(),lo=ao(),ip=vn(),fo=Rn(),_o=An();function ap(r,e,t){if(!e.stats&&ip.IS_SUPPORT_READDIR_WITH_FILE_TYPES){po(r,e,t);return}ho(r,e,t)}Qe.read=ap;function po(r,e,t){e.fs.readdir(r,{withFileTypes:!0},(n,s)=>{if(n!==null){Er(t,n);return}let a=s.map(f=>({dirent:f,name:f.name,path:_o.joinPathSegments(r,f.name,e.pathSegmentSeparator)}));if(!e.followSymbolicLinks){Tn(t,a);return}let u=a.map(f=>op(f,e));lo(u,(f,d)=>{if(f!==null){Er(t,f);return}Tn(t,d)})})}Qe.readdirWithFileTypes=po;function op(r,e){return t=>{if(!r.dirent.isSymbolicLink()){t(null,r);return}e.fs.stat(r.path,(n,s)=>{if(n!==null){if(e.throwErrorOnBrokenSymbolicLink){t(n);return}t(null,r);return}r.dirent=fo.fs.createDirentFromStats(r.name,s),t(null,r)})}}function ho(r,e,t){e.fs.readdir(r,(n,s)=>{if(n!==null){Er(t,n);return}let a=s.map(u=>{let f=_o.joinPathSegments(r,u,e.pathSegmentSeparator);return d=>{sp.stat(f,e.fsStatSettings,(y,p)=>{if(y!==null){d(y);return}let v={name:u,path:f,dirent:fo.fs.createDirentFromStats(u,p)};e.stats&&(v.stats=p),d(null,v)})}});lo(a,(u,f)=>{if(u!==null){Er(t,u);return}Tn(t,f)})})}Qe.readdir=ho;function Er(r,e){r(e)}function Tn(r,e){r(null,e)}});var Eo=k(Xe=>{"use strict";Object.defineProperty(Xe,"__esModule",{value:!0});Xe.readdir=Xe.readdirWithFileTypes=Xe.read=void 0;var up=ot(),cp=vn(),go=Rn(),bo=An();function lp(r,e){return!e.stats&&cp.IS_SUPPORT_READDIR_WITH_FILE_TYPES?yo(r,e):So(r,e)}Xe.read=lp;function yo(r,e){return e.fs.readdirSync(r,{withFileTypes:!0}).map(n=>{let s={dirent:n,name:n.name,path:bo.joinPathSegments(r,n.name,e.pathSegmentSeparator)};if(s.dirent.isSymbolicLink()&&e.followSymbolicLinks)try{let a=e.fs.statSync(s.path);s.dirent=go.fs.createDirentFromStats(s.name,a)}catch(a){if(e.throwErrorOnBrokenSymbolicLink)throw a}return s})}Xe.readdirWithFileTypes=yo;function So(r,e){return e.fs.readdirSync(r).map(n=>{let s=bo.joinPathSegments(r,n,e.pathSegmentSeparator),a=up.statSync(s,e.fsStatSettings),u={name:n,path:s,dirent:go.fs.createDirentFromStats(n,a)};return e.stats&&(u.stats=a),u})}Xe.readdir=So});var vo=k(Je=>{"use strict";Object.defineProperty(Je,"__esModule",{value:!0});Je.createFileSystemAdapter=Je.FILE_SYSTEM_ADAPTER=void 0;var Et=require("fs");Je.FILE_SYSTEM_ADAPTER={lstat:Et.lstat,stat:Et.stat,lstatSync:Et.lstatSync,statSync:Et.statSync,readdir:Et.readdir,readdirSync:Et.readdirSync};function fp(r){return r===void 0?Je.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},Je.FILE_SYSTEM_ADAPTER),r)}Je.createFileSystemAdapter=fp});var wo=k(Dn=>{"use strict";Object.defineProperty(Dn,"__esModule",{value:!0});var _p=require("path"),dp=ot(),pp=vo(),kn=class{constructor(e={}){this._options=e,this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!1),this.fs=pp.createFileSystemAdapter(this._options.fs),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,_p.sep),this.stats=this._getValue(this._options.stats,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0),this.fsStatSettings=new dp.Settings({followSymbolicLink:this.followSymbolicLinks,fs:this.fs,throwErrorOnBrokenSymbolicLink:this.throwErrorOnBrokenSymbolicLink})}_getValue(e,t){return e??t}};Dn.default=kn});var vr=k(Ze=>{"use strict";Object.defineProperty(Ze,"__esModule",{value:!0});Ze.Settings=Ze.scandirSync=Ze.scandir=void 0;var Ro=mo(),hp=Eo(),Pn=wo();Ze.Settings=Pn.default;function mp(r,e,t){if(typeof e=="function"){Ro.read(r,Cn(),e);return}Ro.read(r,Cn(e),t)}Ze.scandir=mp;function gp(r,e){let t=Cn(e);return hp.read(r,t)}Ze.scandirSync=gp;function Cn(r={}){return r instanceof Pn.default?r:new Pn.default(r)}});var To=k((Lm,Ao)=>{"use strict";function bp(r){var e=new r,t=e;function n(){var a=e;return a.next?e=a.next:(e=new r,t=e),a.next=null,a}function s(a){t.next=a,t=a}return{get:n,release:s}}Ao.exports=bp});var Do=k((Bm,In)=>{"use strict";var yp=To();function ko(r,e,t){if(typeof r=="function"&&(t=e,e=r,r=null),t<1)throw new Error("fastqueue concurrency must be greater than 1");var n=yp(Sp),s=null,a=null,u=0,f=null,d={push:C,drain:Me,saturated:Me,pause:p,paused:!1,concurrency:t,running:y,resume:G,idle:D,length:v,getQueue:m,unshift:O,empty:Me,kill:te,killAndDrain:J,error:he};return d;function y(){return u}function p(){d.paused=!0}function v(){for(var w=s,Z=0;w;)w=w.next,Z++;return Z}function m(){for(var w=s,Z=[];w;)Z.push(w.value),w=w.next;return Z}function G(){if(d.paused){d.paused=!1;for(var w=0;w<d.concurrency;w++)u++,H()}}function D(){return u===0&&d.length()===0}function C(w,Z){var $=n.get();$.context=r,$.release=H,$.value=w,$.callback=Z||Me,$.errorHandler=f,u===d.concurrency||d.paused?a?(a.next=$,a=$):(s=$,a=$,d.saturated()):(u++,e.call(r,$.value,$.worked))}function O(w,Z){var $=n.get();$.context=r,$.release=H,$.value=w,$.callback=Z||Me,u===d.concurrency||d.paused?s?($.next=s,s=$):(s=$,a=$,d.saturated()):(u++,e.call(r,$.value,$.worked))}function H(w){w&&n.release(w);var Z=s;Z?d.paused?u--:(a===s&&(a=null),s=Z.next,Z.next=null,e.call(r,Z.value,Z.worked),a===null&&d.empty()):--u===0&&d.drain()}function te(){s=null,a=null,d.drain=Me}function J(){s=null,a=null,d.drain(),d.drain=Me}function he(w){f=w}}function Me(){}function Sp(){this.value=null,this.callback=Me,this.next=null,this.release=Me,this.context=null,this.errorHandler=null;var r=this;this.worked=function(t,n){var s=r.callback,a=r.errorHandler,u=r.value;r.value=null,r.callback=Me,r.errorHandler&&a(t,u),s.call(r.context,t,n),r.release(r)}}function Ep(r,e,t){typeof r=="function"&&(t=e,e=r,r=null);function n(p,v){e.call(this,p).then(function(m){v(null,m)},v)}var s=ko(r,n,t),a=s.push,u=s.unshift;return s.push=f,s.unshift=d,s.drained=y,s;function f(p){var v=new Promise(function(m,G){a(p,function(D,C){if(D){G(D);return}m(C)})});return v.catch(Me),v}function d(p){var v=new Promise(function(m,G){u(p,function(D,C){if(D){G(D);return}m(C)})});return v.catch(Me),v}function y(){var p=s.drain,v=new Promise(function(m){s.drain=function(){p(),m()}});return v}}In.exports=ko;In.exports.promise=Ep});var wr=k($e=>{"use strict";Object.defineProperty($e,"__esModule",{value:!0});$e.joinPathSegments=$e.replacePathSegmentSeparator=$e.isAppliedFilter=$e.isFatalError=void 0;function vp(r,e){return r.errorFilter===null?!0:!r.errorFilter(e)}$e.isFatalError=vp;function wp(r,e){return r===null||r(e)}$e.isAppliedFilter=wp;function Rp(r,e){return r.split(/[/\\]/).join(e)}$e.replacePathSegmentSeparator=Rp;function Ap(r,e,t){return r===""?e:r.endsWith(t)?r+e:r+t+e}$e.joinPathSegments=Ap});var On=k(Mn=>{"use strict";Object.defineProperty(Mn,"__esModule",{value:!0});var Tp=wr(),Fn=class{constructor(e,t){this._root=e,this._settings=t,this._root=Tp.replacePathSegmentSeparator(e,t.pathSegmentSeparator)}};Mn.default=Fn});var Bn=k(Ln=>{"use strict";Object.defineProperty(Ln,"__esModule",{value:!0});var kp=require("events"),Dp=vr(),Pp=Do(),Rr=wr(),Cp=On(),xn=class extends Cp.default{constructor(e,t){super(e,t),this._settings=t,this._scandir=Dp.scandir,this._emitter=new kp.EventEmitter,this._queue=Pp(this._worker.bind(this),this._settings.concurrency),this._isFatalError=!1,this._isDestroyed=!1,this._queue.drain=()=>{this._isFatalError||this._emitter.emit("end")}}read(){return this._isFatalError=!1,this._isDestroyed=!1,setImmediate(()=>{this._pushToQueue(this._root,this._settings.basePath)}),this._emitter}get isDestroyed(){return this._isDestroyed}destroy(){if(this._isDestroyed)throw new Error("The reader is already destroyed");this._isDestroyed=!0,this._queue.killAndDrain()}onEntry(e){this._emitter.on("entry",e)}onError(e){this._emitter.once("error",e)}onEnd(e){this._emitter.once("end",e)}_pushToQueue(e,t){let n={directory:e,base:t};this._queue.push(n,s=>{s!==null&&this._handleError(s)})}_worker(e,t){this._scandir(e.directory,this._settings.fsScandirSettings,(n,s)=>{if(n!==null){t(n,void 0);return}for(let a of s)this._handleEntry(a,e.base);t(null,void 0)})}_handleError(e){this._isDestroyed||!Rr.isFatalError(this._settings,e)||(this._isFatalError=!0,this._isDestroyed=!0,this._emitter.emit("error",e))}_handleEntry(e,t){if(this._isDestroyed||this._isFatalError)return;let n=e.path;t!==void 0&&(e.path=Rr.joinPathSegments(t,e.name,this._settings.pathSegmentSeparator)),Rr.isAppliedFilter(this._settings.entryFilter,e)&&this._emitEntry(e),e.dirent.isDirectory()&&Rr.isAppliedFilter(this._settings.deepFilter,e)&&this._pushToQueue(n,t===void 0?void 0:e.path)}_emitEntry(e){this._emitter.emit("entry",e)}};Ln.default=xn});var Po=k(Hn=>{"use strict";Object.defineProperty(Hn,"__esModule",{value:!0});var Ip=Bn(),Nn=class{constructor(e,t){this._root=e,this._settings=t,this._reader=new Ip.default(this._root,this._settings),this._storage=[]}read(e){this._reader.onError(t=>{Fp(e,t)}),this._reader.onEntry(t=>{this._storage.push(t)}),this._reader.onEnd(()=>{Mp(e,this._storage)}),this._reader.read()}};Hn.default=Nn;function Fp(r,e){r(e)}function Mp(r,e){r(null,e)}});var Co=k($n=>{"use strict";Object.defineProperty($n,"__esModule",{value:!0});var Op=require("stream"),xp=Bn(),Un=class{constructor(e,t){this._root=e,this._settings=t,this._reader=new xp.default(this._root,this._settings),this._stream=new Op.Readable({objectMode:!0,read:()=>{},destroy:()=>{this._reader.isDestroyed||this._reader.destroy()}})}read(){return this._reader.onError(e=>{this._stream.emit("error",e)}),this._reader.onEntry(e=>{this._stream.push(e)}),this._reader.onEnd(()=>{this._stream.push(null)}),this._reader.read(),this._stream}};$n.default=Un});var Io=k(Wn=>{"use strict";Object.defineProperty(Wn,"__esModule",{value:!0});var Lp=vr(),Ar=wr(),Bp=On(),qn=class extends Bp.default{constructor(){super(...arguments),this._scandir=Lp.scandirSync,this._storage=[],this._queue=new Set}read(){return this._pushToQueue(this._root,this._settings.basePath),this._handleQueue(),this._storage}_pushToQueue(e,t){this._queue.add({directory:e,base:t})}_handleQueue(){for(let e of this._queue.values())this._handleDirectory(e.directory,e.base)}_handleDirectory(e,t){try{let n=this._scandir(e,this._settings.fsScandirSettings);for(let s of n)this._handleEntry(s,t)}catch(n){this._handleError(n)}}_handleError(e){if(Ar.isFatalError(this._settings,e))throw e}_handleEntry(e,t){let n=e.path;t!==void 0&&(e.path=Ar.joinPathSegments(t,e.name,this._settings.pathSegmentSeparator)),Ar.isAppliedFilter(this._settings.entryFilter,e)&&this._pushToStorage(e),e.dirent.isDirectory()&&Ar.isAppliedFilter(this._settings.deepFilter,e)&&this._pushToQueue(n,t===void 0?void 0:e.path)}_pushToStorage(e){this._storage.push(e)}};Wn.default=qn});var Fo=k(jn=>{"use strict";Object.defineProperty(jn,"__esModule",{value:!0});var Np=Io(),Gn=class{constructor(e,t){this._root=e,this._settings=t,this._reader=new Np.default(this._root,this._settings)}read(){return this._reader.read()}};jn.default=Gn});var Mo=k(Vn=>{"use strict";Object.defineProperty(Vn,"__esModule",{value:!0});var Hp=require("path"),Up=vr(),Kn=class{constructor(e={}){this._options=e,this.basePath=this._getValue(this._options.basePath,void 0),this.concurrency=this._getValue(this._options.concurrency,Number.POSITIVE_INFINITY),this.deepFilter=this._getValue(this._options.deepFilter,null),this.entryFilter=this._getValue(this._options.entryFilter,null),this.errorFilter=this._getValue(this._options.errorFilter,null),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,Hp.sep),this.fsScandirSettings=new Up.Settings({followSymbolicLinks:this._options.followSymbolicLinks,fs:this._options.fs,pathSegmentSeparator:this._options.pathSegmentSeparator,stats:this._options.stats,throwErrorOnBrokenSymbolicLink:this._options.throwErrorOnBrokenSymbolicLink})}_getValue(e,t){return e??t}};Vn.default=Kn});var kr=k(qe=>{"use strict";Object.defineProperty(qe,"__esModule",{value:!0});qe.Settings=qe.walkStream=qe.walkSync=qe.walk=void 0;var Oo=Po(),$p=Co(),qp=Fo(),zn=Mo();qe.Settings=zn.default;function Wp(r,e,t){if(typeof e=="function"){new Oo.default(r,Tr()).read(e);return}new Oo.default(r,Tr(e)).read(t)}qe.walk=Wp;function Gp(r,e){let t=Tr(e);return new qp.default(r,t).read()}qe.walkSync=Gp;function jp(r,e){let t=Tr(e);return new $p.default(r,t).read()}qe.walkStream=jp;function Tr(r={}){return r instanceof zn.default?r:new zn.default(r)}});var Dr=k(Qn=>{"use strict";Object.defineProperty(Qn,"__esModule",{value:!0});var Kp=require("path"),Vp=ot(),xo=je(),Yn=class{constructor(e){this._settings=e,this._fsStatSettings=new Vp.Settings({followSymbolicLink:this._settings.followSymbolicLinks,fs:this._settings.fs,throwErrorOnBrokenSymbolicLink:this._settings.followSymbolicLinks})}_getFullEntryPath(e){return Kp.resolve(this._settings.cwd,e)}_makeEntry(e,t){let n={name:t,path:t,dirent:xo.fs.createDirentFromStats(t,e)};return this._settings.stats&&(n.stats=e),n}_isFatalError(e){return!xo.errno.isEnoentCodeError(e)&&!this._settings.suppressErrors}};Qn.default=Yn});var Zn=k(Jn=>{"use strict";Object.defineProperty(Jn,"__esModule",{value:!0});var zp=require("stream"),Yp=ot(),Qp=kr(),Xp=Dr(),Xn=class extends Xp.default{constructor(){super(...arguments),this._walkStream=Qp.walkStream,this._stat=Yp.stat}dynamic(e,t){return this._walkStream(e,t)}static(e,t){let n=e.map(this._getFullEntryPath,this),s=new zp.PassThrough({objectMode:!0});s._write=(a,u,f)=>this._getEntry(n[a],e[a],t).then(d=>{d!==null&&t.entryFilter(d)&&s.push(d),a===n.length-1&&s.end(),f()}).catch(f);for(let a=0;a<n.length;a++)s.write(a);return s}_getEntry(e,t,n){return this._getStat(e).then(s=>this._makeEntry(s,t)).catch(s=>{if(n.errorFilter(s))return null;throw s})}_getStat(e){return new Promise((t,n)=>{this._stat(e,this._fsStatSettings,(s,a)=>s===null?t(a):n(s))})}};Jn.default=Xn});var Lo=k(ts=>{"use strict";Object.defineProperty(ts,"__esModule",{value:!0});var Jp=kr(),Zp=Dr(),eh=Zn(),es=class extends Zp.default{constructor(){super(...arguments),this._walkAsync=Jp.walk,this._readerStream=new eh.default(this._settings)}dynamic(e,t){return new Promise((n,s)=>{this._walkAsync(e,t,(a,u)=>{a===null?n(u):s(a)})})}async static(e,t){let n=[],s=this._readerStream.static(e,t);return new Promise((a,u)=>{s.once("error",u),s.on("data",f=>n.push(f)),s.once("end",()=>a(n))})}};ts.default=es});var Bo=k(ns=>{"use strict";Object.defineProperty(ns,"__esModule",{value:!0});var vt=je(),rs=class{constructor(e,t,n){this._patterns=e,this._settings=t,this._micromatchOptions=n,this._storage=[],this._fillStorage()}_fillStorage(){let e=vt.pattern.expandPatternsWithBraceExpansion(this._patterns);for(let t of e){let n=this._getPatternSegments(t),s=this._splitSegmentsIntoSections(n);this._storage.push({complete:s.length<=1,pattern:t,segments:n,sections:s})}}_getPatternSegments(e){return vt.pattern.getPatternParts(e,this._micromatchOptions).map(n=>vt.pattern.isDynamicPattern(n,this._settings)?{dynamic:!0,pattern:n,patternRe:vt.pattern.makeRe(n,this._micromatchOptions)}:{dynamic:!1,pattern:n})}_splitSegmentsIntoSections(e){return vt.array.splitWhen(e,t=>t.dynamic&&vt.pattern.hasGlobStar(t.pattern))}};ns.default=rs});var No=k(is=>{"use strict";Object.defineProperty(is,"__esModule",{value:!0});var th=Bo(),ss=class extends th.default{match(e){let t=e.split("/"),n=t.length,s=this._storage.filter(a=>!a.complete||a.segments.length>n);for(let a of s){let u=a.sections[0];if(!a.complete&&n>u.length||t.every((d,y)=>{let p=a.segments[y];return!!(p.dynamic&&p.patternRe.test(d)||!p.dynamic&&p.pattern===d)}))return!0}return!1}};is.default=ss});var Ho=k(os=>{"use strict";Object.defineProperty(os,"__esModule",{value:!0});var Pr=je(),rh=No(),as=class{constructor(e,t){this._settings=e,this._micromatchOptions=t}getFilter(e,t,n){let s=this._getMatcher(t),a=this._getNegativePatternsRe(n);return u=>this._filter(e,u,s,a)}_getMatcher(e){return new rh.default(e,this._settings,this._micromatchOptions)}_getNegativePatternsRe(e){let t=e.filter(Pr.pattern.isAffectDepthOfReadingPattern);return Pr.pattern.convertPatternsToRe(t,this._micromatchOptions)}_filter(e,t,n,s){if(this._isSkippedByDeep(e,t.path)||this._isSkippedSymbolicLink(t))return!1;let a=Pr.path.removeLeadingDotSegment(t.path);return this._isSkippedByPositivePatterns(a,n)?!1:this._isSkippedByNegativePatterns(a,s)}_isSkippedByDeep(e,t){return this._settings.deep===1/0?!1:this._getEntryLevel(e,t)>=this._settings.deep}_getEntryLevel(e,t){let n=t.split("/").length;if(e==="")return n;let s=e.split("/").length;return n-s}_isSkippedSymbolicLink(e){return!this._settings.followSymbolicLinks&&e.dirent.isSymbolicLink()}_isSkippedByPositivePatterns(e,t){return!this._settings.baseNameMatch&&!t.match(e)}_isSkippedByNegativePatterns(e,t){return!Pr.pattern.matchAny(e,t)}};os.default=as});var Uo=k(cs=>{"use strict";Object.defineProperty(cs,"__esModule",{value:!0});var ut=je(),us=class{constructor(e,t){this._settings=e,this._micromatchOptions=t,this.index=new Map}getFilter(e,t){let n=ut.pattern.convertPatternsToRe(e,this._micromatchOptions),s=ut.pattern.convertPatternsToRe(t,this._micromatchOptions);return a=>this._filter(a,n,s)}_filter(e,t,n){if(this._settings.unique&&this._isDuplicateEntry(e)||this._onlyFileFilter(e)||this._onlyDirectoryFilter(e)||this._isSkippedByAbsoluteNegativePatterns(e.path,n))return!1;let s=this._settings.baseNameMatch?e.name:e.path,a=e.dirent.isDirectory(),u=this._isMatchToPatterns(s,t,a)&&!this._isMatchToPatterns(e.path,n,a);return this._settings.unique&&u&&this._createIndexRecord(e),u}_isDuplicateEntry(e){return this.index.has(e.path)}_createIndexRecord(e){this.index.set(e.path,void 0)}_onlyFileFilter(e){return this._settings.onlyFiles&&!e.dirent.isFile()}_onlyDirectoryFilter(e){return this._settings.onlyDirectories&&!e.dirent.isDirectory()}_isSkippedByAbsoluteNegativePatterns(e,t){if(!this._settings.absolute)return!1;let n=ut.path.makeAbsolute(this._settings.cwd,e);return ut.pattern.matchAny(n,t)}_isMatchToPatterns(e,t,n){let s=ut.path.removeLeadingDotSegment(e),a=ut.pattern.matchAny(s,t);return!a&&n?ut.pattern.matchAny(s+"/",t):a}};cs.default=us});var $o=k(fs=>{"use strict";Object.defineProperty(fs,"__esModule",{value:!0});var nh=je(),ls=class{constructor(e){this._settings=e}getFilter(){return e=>this._isNonFatalError(e)}_isNonFatalError(e){return nh.errno.isEnoentCodeError(e)||this._settings.suppressErrors}};fs.default=ls});var Wo=k(ds=>{"use strict";Object.defineProperty(ds,"__esModule",{value:!0});var qo=je(),_s=class{constructor(e){this._settings=e}getTransformer(){return e=>this._transform(e)}_transform(e){let t=e.path;return this._settings.absolute&&(t=qo.path.makeAbsolute(this._settings.cwd,t),t=qo.path.unixify(t)),this._settings.markDirectories&&e.dirent.isDirectory()&&(t+="/"),this._settings.objectMode?Object.assign(Object.assign({},e),{path:t}):t}};ds.default=_s});var Cr=k(hs=>{"use strict";Object.defineProperty(hs,"__esModule",{value:!0});var sh=require("path"),ih=Ho(),ah=Uo(),oh=$o(),uh=Wo(),ps=class{constructor(e){this._settings=e,this.errorFilter=new oh.default(this._settings),this.entryFilter=new ah.default(this._settings,this._getMicromatchOptions()),this.deepFilter=new ih.default(this._settings,this._getMicromatchOptions()),this.entryTransformer=new uh.default(this._settings)}_getRootDirectory(e){return sh.resolve(this._settings.cwd,e.base)}_getReaderOptions(e){let t=e.base==="."?"":e.base;return{basePath:t,pathSegmentSeparator:"/",concurrency:this._settings.concurrency,deepFilter:this.deepFilter.getFilter(t,e.positive,e.negative),entryFilter:this.entryFilter.getFilter(e.positive,e.negative),errorFilter:this.errorFilter.getFilter(),followSymbolicLinks:this._settings.followSymbolicLinks,fs:this._settings.fs,stats:this._settings.stats,throwErrorOnBrokenSymbolicLink:this._settings.throwErrorOnBrokenSymbolicLink,transform:this.entryTransformer.getTransformer()}}_getMicromatchOptions(){return{dot:this._settings.dot,matchBase:this._settings.baseNameMatch,nobrace:!this._settings.braceExpansion,nocase:!this._settings.caseSensitiveMatch,noext:!this._settings.extglob,noglobstar:!this._settings.globstar,posix:!0,strictSlashes:!1}}};hs.default=ps});var Go=k(gs=>{"use strict";Object.defineProperty(gs,"__esModule",{value:!0});var ch=Lo(),lh=Cr(),ms=class extends lh.default{constructor(){super(...arguments),this._reader=new ch.default(this._settings)}async read(e){let t=this._getRootDirectory(e),n=this._getReaderOptions(e);return(await this.api(t,e,n)).map(a=>n.transform(a))}api(e,t,n){return t.dynamic?this._reader.dynamic(e,n):this._reader.static(t.patterns,n)}};gs.default=ms});var jo=k(ys=>{"use strict";Object.defineProperty(ys,"__esModule",{value:!0});var fh=require("stream"),_h=Zn(),dh=Cr(),bs=class extends dh.default{constructor(){super(...arguments),this._reader=new _h.default(this._settings)}read(e){let t=this._getRootDirectory(e),n=this._getReaderOptions(e),s=this.api(t,e,n),a=new fh.Readable({objectMode:!0,read:()=>{}});return s.once("error",u=>a.emit("error",u)).on("data",u=>a.emit("data",n.transform(u))).once("end",()=>a.emit("end")),a.once("close",()=>s.destroy()),a}api(e,t,n){return t.dynamic?this._reader.dynamic(e,n):this._reader.static(t.patterns,n)}};ys.default=bs});var Ko=k(Es=>{"use strict";Object.defineProperty(Es,"__esModule",{value:!0});var ph=ot(),hh=kr(),mh=Dr(),Ss=class extends mh.default{constructor(){super(...arguments),this._walkSync=hh.walkSync,this._statSync=ph.statSync}dynamic(e,t){return this._walkSync(e,t)}static(e,t){let n=[];for(let s of e){let a=this._getFullEntryPath(s),u=this._getEntry(a,s,t);u===null||!t.entryFilter(u)||n.push(u)}return n}_getEntry(e,t,n){try{let s=this._getStat(e);return this._makeEntry(s,t)}catch(s){if(n.errorFilter(s))return null;throw s}}_getStat(e){return this._statSync(e,this._fsStatSettings)}};Es.default=Ss});var Vo=k(ws=>{"use strict";Object.defineProperty(ws,"__esModule",{value:!0});var gh=Ko(),bh=Cr(),vs=class extends bh.default{constructor(){super(...arguments),this._reader=new gh.default(this._settings)}read(e){let t=this._getRootDirectory(e),n=this._getReaderOptions(e);return this.api(t,e,n).map(n.transform)}api(e,t,n){return t.dynamic?this._reader.dynamic(e,n):this._reader.static(t.patterns,n)}};ws.default=vs});var zo=k(Rt=>{"use strict";Object.defineProperty(Rt,"__esModule",{value:!0});Rt.DEFAULT_FILE_SYSTEM_ADAPTER=void 0;var wt=require("fs"),yh=require("os"),Sh=Math.max(yh.cpus().length,1);Rt.DEFAULT_FILE_SYSTEM_ADAPTER={lstat:wt.lstat,lstatSync:wt.lstatSync,stat:wt.stat,statSync:wt.statSync,readdir:wt.readdir,readdirSync:wt.readdirSync};var Rs=class{constructor(e={}){this._options=e,this.absolute=this._getValue(this._options.absolute,!1),this.baseNameMatch=this._getValue(this._options.baseNameMatch,!1),this.braceExpansion=this._getValue(this._options.braceExpansion,!0),this.caseSensitiveMatch=this._getValue(this._options.caseSensitiveMatch,!0),this.concurrency=this._getValue(this._options.concurrency,Sh),this.cwd=this._getValue(this._options.cwd,process.cwd()),this.deep=this._getValue(this._options.deep,1/0),this.dot=this._getValue(this._options.dot,!1),this.extglob=this._getValue(this._options.extglob,!0),this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!0),this.fs=this._getFileSystemMethods(this._options.fs),this.globstar=this._getValue(this._options.globstar,!0),this.ignore=this._getValue(this._options.ignore,[]),this.markDirectories=this._getValue(this._options.markDirectories,!1),this.objectMode=this._getValue(this._options.objectMode,!1),this.onlyDirectories=this._getValue(this._options.onlyDirectories,!1),this.onlyFiles=this._getValue(this._options.onlyFiles,!0),this.stats=this._getValue(this._options.stats,!1),this.suppressErrors=this._getValue(this._options.suppressErrors,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!1),this.unique=this._getValue(this._options.unique,!0),this.onlyDirectories&&(this.onlyFiles=!1),this.stats&&(this.objectMode=!0)}_getValue(e,t){return e===void 0?t:e}_getFileSystemMethods(e={}){return Object.assign(Object.assign({},Rt.DEFAULT_FILE_SYSTEM_ADAPTER),e)}};Rt.default=Rs});var Jo=k((ug,Xo)=>{"use strict";var Yo=Va(),Qo=Ya(),Eh=Go(),vh=jo(),wh=Vo(),As=zo(),ct=je();async function Ts(r,e){At(r);let t=ks(r,Eh.default,e),n=await Promise.all(t);return ct.array.flatten(n)}(function(r){function e(u,f){At(u);let d=ks(u,wh.default,f);return ct.array.flatten(d)}r.sync=e;function t(u,f){At(u);let d=ks(u,vh.default,f);return ct.stream.merge(d)}r.stream=t;function n(u,f){At(u);let d=Qo.transform([].concat(u)),y=new As.default(f);return Yo.generate(d,y)}r.generateTasks=n;function s(u,f){At(u);let d=new As.default(f);return ct.pattern.isDynamicPattern(u,d)}r.isDynamicPattern=s;function a(u){return At(u),ct.path.escape(u)}r.escapePath=a})(Ts||(Ts={}));function ks(r,e,t){let n=Qo.transform([].concat(r)),s=new As.default(t),a=Yo.generate(n,s),u=new e(s);return a.map(u.read,u)}function At(r){if(![].concat(r).every(n=>ct.string.isString(n)&&!ct.string.isEmpty(n)))throw new TypeError("Patterns must be a string (non empty) or an array of strings")}Xo.exports=Ts});var Rh={};gf(Rh,{registerWorker:()=>eu});module.exports=bf(Rh);var z=rt(require("apache-arrow"));function ht(r){switch(r.typeId){case z.Type.Binary:return{sqlType:"binary"};case z.Type.Bool:return{sqlType:"bool"};case z.Type.Date:return{sqlType:"date"};case z.Type.DateDay:return{sqlType:"date32[d]"};case z.Type.DateMillisecond:return{sqlType:"date64[ms]"};case z.Type.Decimal:{let e=r;return{sqlType:"decimal",precision:e.precision,scale:e.scale}}case z.Type.Float:return{sqlType:"float"};case z.Type.Float16:return{sqlType:"float16"};case z.Type.Float32:return{sqlType:"float32"};case z.Type.Float64:return{sqlType:"float64"};case z.Type.Int:return{sqlType:"int32"};case z.Type.Int16:return{sqlType:"int16"};case z.Type.Int32:return{sqlType:"int32"};case z.Type.Int64:return{sqlType:"int64"};case z.Type.Uint16:return{sqlType:"uint16"};case z.Type.Uint32:return{sqlType:"uint32"};case z.Type.Uint64:return{sqlType:"uint64"};case z.Type.Uint8:return{sqlType:"uint8"};case z.Type.IntervalDayTime:return{sqlType:"interval[dt]"};case z.Type.IntervalYearMonth:return{sqlType:"interval[m]"};case z.Type.List:return{sqlType:"list",valueType:ht(r.valueType)};case z.Type.FixedSizeBinary:return{sqlType:"fixedsizebinary",byteWidth:r.byteWidth};case z.Type.Null:return{sqlType:"null"};case z.Type.Utf8:return{sqlType:"utf8"};case z.Type.Struct:return{sqlType:"struct",fields:r.children.map(t=>Vt(t.name,t.type))};case z.Type.Map:{let e=r;return{sqlType:"map",keyType:ht(e.keyType),valueType:ht(e.valueType)}}case z.Type.Time:return{sqlType:"time[s]"};case z.Type.TimeMicrosecond:return{sqlType:"time[us]"};case z.Type.TimeMillisecond:return{sqlType:"time[ms]"};case z.Type.TimeNanosecond:return{sqlType:"time[ns]"};case z.Type.TimeSecond:return{sqlType:"time[s]"};case z.Type.Timestamp:return{sqlType:"timestamp",timezone:r.timezone||void 0};case z.Type.TimestampSecond:return{sqlType:"timestamp[s]",timezone:r.timezone||void 0};case z.Type.TimestampMicrosecond:return{sqlType:"timestamp[us]",timezone:r.timezone||void 0};case z.Type.TimestampNanosecond:return{sqlType:"timestamp[ns]",timezone:r.timezone||void 0};case z.Type.TimestampMillisecond:return{sqlType:"timestamp[ms]",timezone:r.timezone||void 0}}throw new Error(`unsupported arrow type: ${r.toString()}`)}function Vt(r,e){let t=ht(e);return t.name=r,t}var zt=class{constructor(){this._bindings=null;this._nextMessageId=0}log(e){this.postMessage({messageId:this._nextMessageId++,requestId:0,type:"LOG",data:e},[])}sendOK(e){this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"OK",data:null},[])}failWith(e,t){let n={name:t.name,message:t.message,stack:t.stack||void 0};this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"ERROR",data:n},[])}async onMessage(e){switch(e.type){case"PING":this.sendOK(e);return;case"INSTANTIATE":this._bindings!=null&&this.failWith(e,new Error("duckdb already initialized"));try{this._bindings=await this.instantiate(e.data[0],e.data[1],t=>{this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"INSTANTIATE_PROGRESS",data:t},[])}),this.sendOK(e)}catch(t){console.log(t),this._bindings=null,this.failWith(e,t)}return;default:break}if(!this._bindings)return this.failWith(e,new Error("duckdb is not initialized"));try{switch(e.type){case"GET_VERSION":this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"VERSION_STRING",data:this._bindings.getVersion()},[]);break;case"GET_FEATURE_FLAGS":this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"FEATURE_FLAGS",data:this._bindings.getFeatureFlags()},[]);break;case"RESET":this._bindings.reset(),this.sendOK(e);break;case"OPEN":this._bindings.open(e.data),this.sendOK(e);break;case"DROP_FILE":this._bindings.dropFile(e.data),this.sendOK(e);break;case"DROP_FILES":this._bindings.dropFiles(),this.sendOK(e);break;case"FLUSH_FILES":this._bindings.flushFiles(),this.sendOK(e);break;case"CONNECT":{let t=this._bindings.connect();this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"CONNECTION_INFO",data:t.useUnsafe((n,s)=>s)},[]);break}case"DISCONNECT":this._bindings.disconnect(e.data),this.sendOK(e);break;case"CREATE_PREPARED":{let t=this._bindings.createPrepared(e.data[0],e.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"PREPARED_STATEMENT_ID",data:t},[]);break}case"CLOSE_PREPARED":{this._bindings.closePrepared(e.data[0],e.data[1]),this.sendOK(e);break}case"RUN_PREPARED":{let t=this._bindings.runPrepared(e.data[0],e.data[1],e.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT",data:t},[t.buffer]);break}case"RUN_QUERY":{let t=this._bindings.runQuery(e.data[0],e.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT",data:t},[t.buffer]);break}case"SEND_PREPARED":{let t=this._bindings.sendPrepared(e.data[0],e.data[1],e.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT_HEADER",data:t},[t.buffer]);break}case"START_PENDING_QUERY":{let t=this._bindings.startPendingQuery(e.data[0],e.data[1]),n=[];t&&n.push(t.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:t},n);break}case"POLL_PENDING_QUERY":{let t=this._bindings.pollPendingQuery(e.data),n=[];t&&n.push(t.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:t},n);break}case"CANCEL_PENDING_QUERY":{let t=this._bindings.cancelPendingQuery(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"SUCCESS",data:t},[]);break}case"FETCH_QUERY_RESULTS":{let t=this._bindings.fetchQueryResults(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT_CHUNK",data:t},[t.buffer]);break}case"GET_TABLE_NAMES":{let t=this._bindings.getTableNames(e.data[0],e.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"TABLE_NAMES",data:t},[]);break}case"GLOB_FILE_INFOS":{let t=this._bindings.globFiles(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"FILE_INFOS",data:t},[]);break}case"REGISTER_FILE_URL":this._bindings.registerFileURL(e.data[0],e.data[1],e.data[2],e.data[3]),this.sendOK(e);break;case"REGISTER_FILE_BUFFER":this._bindings.registerFileBuffer(e.data[0],e.data[1]),this.sendOK(e);break;case"REGISTER_FILE_HANDLE":this._bindings.registerFileHandle(e.data[0],e.data[1],e.data[2],e.data[3]),this.sendOK(e);break;case"COPY_FILE_TO_PATH":this._bindings.copyFileToPath(e.data[0],e.data[1]),this.sendOK(e);break;case"COPY_FILE_TO_BUFFER":{let t=this._bindings.copyFileToBuffer(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"FILE_BUFFER",data:t},[]);break}case"COLLECT_FILE_STATISTICS":this._bindings.collectFileStatistics(e.data[0],e.data[1]),this.sendOK(e);break;case"EXPORT_FILE_STATISTICS":{this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"FILE_STATISTICS",data:this._bindings.exportFileStatistics(e.data)},[]);break}case"INSERT_ARROW_FROM_IPC_STREAM":{this._bindings.insertArrowFromIPCStream(e.data[0],e.data[1],e.data[2]),this.sendOK(e);break}case"IMPORT_CSV_FROM_PATH":{this._bindings.insertCSVFromPath(e.data[0],e.data[1],e.data[2]),this.sendOK(e);break}case"IMPORT_JSON_FROM_PATH":{this._bindings.insertJSONFromPath(e.data[0],e.data[1],e.data[2]),this.sendOK(e);break}case"TOKENIZE":{let t=this._bindings.tokenize(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"SCRIPT_TOKENS",data:t},[]);break}}}catch(t){return console.log(t),this.failWith(e,t)}}};var ci=rt(qr());var oi=rt(qr());var Be=rt(require("apache-arrow")),Qt=class{constructor(e,t){this._bindings=e,this._conn=t}close(){this._bindings.disconnect(this._conn)}useUnsafe(e){return e(this._bindings,this._conn)}query(e){let t=this._bindings.runQuery(this._conn,e),n=Be.RecordBatchReader.from(t);return console.assert(n.isSync()),console.assert(n.isFile()),new Be.Table(n)}async send(e){let t=this._bindings.startPendingQuery(this._conn,e);for(;t==null;)t=await new Promise((a,u)=>{try{a(this._bindings.pollPendingQuery(this._conn))}catch(f){console.log(f),u(f)}});let n=new Xt(this._bindings,this._conn,t),s=Be.RecordBatchReader.from(n);return console.assert(s.isSync()),console.assert(s.isStream()),s}cancelSent(){return this._bindings.cancelPendingQuery(this._conn)}getTableNames(e){return this._bindings.getTableNames(this._conn,e)}prepare(e){let t=this._bindings.createPrepared(this._conn,e);return new Wr(this._bindings,this._conn,t)}createScalarFunction(e,t,n){this._bindings.createScalarFunction(this._conn,e,t,n)}insertArrowTable(e,t){let n=Be.tableToIPC(e,"stream");this.insertArrowFromIPCStream(n,t)}insertArrowFromIPCStream(e,t){this._bindings.insertArrowFromIPCStream(this._conn,e,t)}insertCSVFromPath(e,t){this._bindings.insertCSVFromPath(this._conn,e,t)}insertJSONFromPath(e,t){this._bindings.insertJSONFromPath(this._conn,e,t)}},Xt=class{constructor(e,t,n){this.bindings=e;this.conn=t;this.header=n;this._first=!0,this._depleted=!1}next(){if(this._first)return this._first=!1,{done:!1,value:this.header};if(this._depleted)return{done:!0,value:null};let e=this.bindings.fetchQueryResults(this.conn);return this._depleted=e.length==0,{done:this._depleted,value:e}}[Symbol.iterator](){return this}},Wr=class{constructor(e,t,n){this.bindings=e,this.connectionId=t,this.statementId=n}close(){this.bindings.closePrepared(this.connectionId,this.statementId)}query(...e){let t=this.bindings.runPrepared(this.connectionId,this.statementId,e),n=Be.RecordBatchReader.from(t);return console.assert(n.isSync()),console.assert(n.isFile()),new Be.Table(n)}send(...e){let t=this.bindings.sendPrepared(this.connectionId,this.statementId,e),n=new Xt(this.bindings,this.connectionId,t),s=Be.RecordBatchReader.from(n);return console.assert(s.isSync()),console.assert(s.isStream()),s}};var ii=new TextEncoder,ni=new TextDecoder("utf-8");function Gr(r,e,t){let n=ii.encode(t),s=r._malloc(n.byteLength),a=r.HEAPU8.subarray(s,s+n.byteLength);a.set(n),r.HEAPF64[(e>>3)+0]=1,r.HEAPF64[(e>>3)+1]=s,r.HEAPF64[(e>>3)+2]=a.byteLength}function Kr(r){switch(r){case"UINT8":case"INT8":return 1;case"INT32":case"FLOAT":return 4;case"INT64":case"UINT64":case"DOUBLE":case"VARCHAR":return 8;default:return 0}}function jr(r,e,t,n){let s=r.HEAPU8.subarray(e,e+n*Kr(t));switch(t){case"UINT8":return new Uint8Array(s.buffer,s.byteOffset,n);case"INT8":return new Int8Array(s.buffer,s.byteOffset,n);case"INT32":return new Int32Array(s.buffer,s.byteOffset,n);case"FLOAT":return new Float32Array(s.buffer,s.byteOffset,n);case"DOUBLE":return new Float64Array(s.buffer,s.byteOffset,n);case"VARCHAR":return new Float64Array(s.buffer,s.byteOffset,n);default:return new Array(0)}}function si(r,e,t){let n=r.HEAPU8.subarray(e,e+t);return new Uint8Array(n.buffer,n.byteOffset,t)}function Jt(r,e,t){let n=r.HEAPU8.subarray(e,e+t*8);return new Float64Array(n.buffer,n.byteOffset,t)}function ai(r,e,t,n,s,a,u,f){try{let d=r._udfFunctions.get(n);if(!d){Gr(e,t,"Unknown UDF with id: "+n);return}let y=ni.decode(e.HEAPU8.subarray(s,s+a)),p=JSON.parse(y),v=Jt(e,u,f/8),m=I=>{var g;let Y=null;switch(I.validityBuffer!==void 0&&(Y=si(e,v[I.validityBuffer],p.rows)),I.physicalType){case"VARCHAR":{if(I.dataBuffer===null||I.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for VARCHAR argument");if(I.lengthBuffer===null||I.lengthBuffer===void 0)throw new Error("malformed data view, expected data length buffer for VARCHAR argument");let B=jr(e,v[I.dataBuffer],I.physicalType,p.rows),x=[],re=Jt(e,v[I.lengthBuffer],p.rows);for(let h=0;h<p.rows;++h){if(Y!=null&&!Y[h]){x.push(null);continue}let l=e.HEAPU8.subarray(B[h],B[h]+re[h]),N=ni.decode(l);x.push(N)}return h=>x[h]}case"STRUCT":{let B={},x=[];for(let re=0;re<(((g=I.children)==null?void 0:g.length)||0);++re){let h=I.children[re],l=m(h);x.push(N=>{B[h.name]=l(N)})}return Y!=null?re=>{if(!Y[re])return null;for(let h of x)h(re);return B}:re=>{for(let h of x)h(re);return B}}default:{if(I.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for argument of type: "+I.physicalType);let B=jr(e,v[I.dataBuffer],I.physicalType,p.rows);return Y!=null?x=>Y[x]?B[x]:null:x=>B[x]}}},G=[];for(let I=0;I<p.args.length;++I)G.push(m(p.args[I]));let D=p.rows*Kr(p.ret.physicalType),C=e._malloc(D),O=jr(e,C,p.ret.physicalType,p.rows),H=e._malloc(p.rows),te=si(e,H,p.rows);if(O.length==0||te.length==0){Gr(e,t,"Can't create physical arrays for result");return}let J=O;p.ret.physicalType=="VARCHAR"&&(J=new Array(p.rows));let he=[];for(let I=0;I<p.args.length;++I)he.push(null);for(let I=0;I<p.rows;++I){for(let g=0;g<p.args.length;++g)he[g]=G[g](I);let Y=d.func(...he);J[I]=Y,te[I]=Y==null?0:1}let w=0;switch(p.ret.physicalType){case"VARCHAR":{let I=new Array(0);w=e._malloc(p.rows*Kr("DOUBLE"));let Y=Jt(e,w,p.rows),g=0;for(let h=0;h<p.rows;++h){let l=ii.encode(J[h]||"");I.push(l),Y[h]=l.length,g+=l.length}let B=e._malloc(g),x=e.HEAPU8.subarray(B,B+g),re=0;for(let h=0;h<p.rows;++h){O[h]=re;let l=I[h];x.subarray(re,re+l.length).set(l),re+=l.length}}}let Z=3*8,$=e._malloc(Z),M=Jt(e,$,3);M[0]=C,M[1]=H,M[2]=w,e.HEAPF64[(t>>3)+0]=0,e.HEAPF64[(t>>3)+1]=$,e.HEAPF64[(t>>3)+2]=0}catch(d){Gr(e,t,d.toString())}}function Sf(){let r=new TextDecoder;return e=>(typeof SharedArrayBuffer<"u"&&e.buffer instanceof SharedArrayBuffer&&(e=new Uint8Array(e)),r.decode(e))}var nt=Sf();function le(r,e){console.error(`FAIL WITH: ${e}`),r.ccall("duckdb_web_fail_with",null,["string"],[e])}function st(r,e,t){let n=r.HEAPU8.subarray(e,e+t),s=new Uint8Array(new ArrayBuffer(n.byteLength));return s.set(n),s}function K(r,e,t){return nt(r.HEAPU8.subarray(e,e+t))}function ne(r,e,t,n){let s=r.stackSave(),a=r.stackAlloc(3*8);t.unshift("number"),n.unshift(a),r.ccall(e,null,t,n);let u=r.HEAPF64[(a>>3)+0],f=r.HEAPF64[(a>>3)+1],d=r.HEAPF64[(a>>3)+2];return r.stackRestore(s),[u,f,d]}function oe(r){r.ccall("duckdb_web_clear_response",null,[],[])}var Zt=class{constructor(e){let t=new Float64Array(e.buffer,e.byteOffset,e.byteLength/8),n=new Uint8Array(new ArrayBuffer(e.byteLength));n.set(e.subarray(7*8)),this.totalFileReadsCold=t[0],this.totalFileReadsAhead=t[1],this.totalFileReadsCached=t[2],this.totalFileWrites=t[3],this.totalPageAccesses=t[4],this.totalPageLoads=t[5],this.blockSize=t[6],this.blockStats=n}getBlockStats(e,t){return t=t||{file_reads_cold:0,file_reads_ahead:0,file_reads_cached:0,file_writes:0,page_accesses:0,page_loads:0},t.file_writes=this.blockStats[e*3+0]&15,t.file_reads_cold=this.blockStats[e*3+0]>>4,t.file_reads_ahead=this.blockStats[e*3+1]&15,t.file_reads_cached=this.blockStats[e*3+1]>>4,t.page_accesses=this.blockStats[e*3+1]&15,t.page_loads=this.blockStats[e*3+1]>>4,t}};var Ef=new TextEncoder;var er=class{constructor(e,t){this._instance=null;this._initPromise=null;this._initPromiseResolver=()=>{};this.onInstantiationProgress=[];this._logger=e,this._runtime=t,this._nextUDFId=1}get logger(){return this._logger}get mod(){return this._instance}get pthread(){return this.mod.PThread||null}async instantiate(e=t=>{}){return this._instance!=null?this:(this._initPromise!=null&&(this.onInstantiationProgress.push(e),await this._initPromise),this._initPromise=new Promise(t=>{this._initPromiseResolver=t}),this.onInstantiationProgress=[e],this._instance=await this.instantiateImpl({print:console.log.bind(console),printErr:console.log.bind(console),onRuntimeInitialized:this._initPromiseResolver}),await this._initPromise,this._initPromise=null,this.onInstantiationProgress=this.onInstantiationProgress.filter(t=>t!=e),this)}open(e){let[t,n,s]=ne(this.mod,"duckdb_web_open",["string"],[JSON.stringify(e)]);if(t!==0)throw new Error(K(this.mod,n,s));oe(this.mod)}reset(){let[e,t,n]=ne(this.mod,"duckdb_web_reset",[],[]);if(e!==0)throw new Error(K(this.mod,t,n));oe(this.mod)}getVersion(){let[e,t,n]=ne(this.mod,"duckdb_web_get_version",[],[]);if(e!==0)throw new Error(K(this.mod,t,n));let s=K(this.mod,t,n);return oe(this.mod),s}getFeatureFlags(){return this.mod.ccall("duckdb_web_get_feature_flags","number",[],[])}tokenize(e){let[t,n,s]=ne(this.mod,"duckdb_web_tokenize",["string"],[e]);if(t!==0)throw new Error(K(this.mod,n,s));let a=K(this.mod,n,s);return oe(this.mod),JSON.parse(a)}connect(){let e=this.mod.ccall("duckdb_web_connect","number",[],[]);return new Qt(this,e)}disconnect(e){if(this.mod.ccall("duckdb_web_disconnect",null,["number"],[e]),this.pthread)for(let t of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])t.postMessage({cmd:"dropUDFFunctions",connectionId:e})}runQuery(e,t){let[n,s,a]=ne(this.mod,"duckdb_web_query_run",["number","string"],[e,t]);if(n!==0)throw new Error(K(this.mod,s,a));let u=st(this.mod,s,a);return oe(this.mod),u}startPendingQuery(e,t){let[n,s,a]=ne(this.mod,"duckdb_web_pending_query_start",["number","string"],[e,t]);if(n!==0)throw new Error(K(this.mod,s,a));if(s==0)return null;let u=st(this.mod,s,a);return oe(this.mod),u}pollPendingQuery(e){let[t,n,s]=ne(this.mod,"duckdb_web_pending_query_poll",["number"],[e]);if(t!==0)throw new Error(K(this.mod,n,s));if(n==0)return null;let a=st(this.mod,n,s);return oe(this.mod),a}cancelPendingQuery(e){return this.mod.ccall("duckdb_web_pending_query_cancel","boolean",["number"],[e])}fetchQueryResults(e){let[t,n,s]=ne(this.mod,"duckdb_web_query_fetch_results",["number"],[e]);if(t!==0)throw new Error(K(this.mod,n,s));let a=st(this.mod,n,s);return oe(this.mod),a}getTableNames(e,t){let[n,s,a]=ne(this.mod,"duckdb_web_get_tablenames",["number","string"],[e,t]);if(n!==0)throw new Error(K(this.mod,s,a));let u=K(this.mod,s,a);return oe(this.mod),JSON.parse(u)}createScalarFunction(e,t,n,s){let a={functionId:this._nextUDFId,name:t,returnType:ht(n)},u={functionId:a.functionId,connectionId:e,name:t,returnType:n,func:s};this._nextUDFId+=1;let[f,d,y]=ne(this.mod,"duckdb_web_udf_scalar_create",["number","string"],[e,JSON.stringify(a)]);if(f!==0)throw new Error(K(this.mod,d,y));if(oe(this.mod),globalThis.DUCKDB_RUNTIME._udfFunctions=(globalThis.DUCKDB_RUNTIME._udfFunctions||new Map).set(u.functionId,u),this.pthread)for(let p of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])p.postMessage({cmd:"registerUDFFunction",udf:u})}createPrepared(e,t){let[n,s,a]=ne(this.mod,"duckdb_web_prepared_create",["number","string"],[e,t]);if(n!==0)throw new Error(K(this.mod,s,a));return oe(this.mod),s}closePrepared(e,t){let[n,s,a]=ne(this.mod,"duckdb_web_prepared_close",["number","number"],[e,t]);if(n!==0)throw new Error(K(this.mod,s,a));oe(this.mod)}runPrepared(e,t,n){let[s,a,u]=ne(this.mod,"duckdb_web_prepared_run",["number","number","string"],[e,t,JSON.stringify(n)]);if(s!==0)throw new Error(K(this.mod,a,u));let f=st(this.mod,a,u);return oe(this.mod),f}sendPrepared(e,t,n){let[s,a,u]=ne(this.mod,"duckdb_web_prepared_send",["number","number","string"],[e,t,JSON.stringify(n)]);if(s!==0)throw new Error(K(this.mod,a,u));let f=st(this.mod,a,u);return oe(this.mod),f}insertArrowFromIPCStream(e,t,n){if(t.length==0)return;let s=this.mod._malloc(t.length);this.mod.HEAPU8.subarray(s,s+t.length).set(t);let u=n?JSON.stringify(n):"",[f,d,y]=ne(this.mod,"duckdb_web_insert_arrow_from_ipc_stream",["number","number","number","string"],[e,s,t.length,u]);if(f!==0)throw new Error(K(this.mod,d,y))}insertCSVFromPath(e,t,n){if(n.columns!==void 0){n.columnsFlat=[];for(let y in n.columns)n.columnsFlat.push(Vt(y,n.columns[y]))}let s={...n};s.columns=s.columnsFlat,delete s.columnsFlat;let a=JSON.stringify(s),[u,f,d]=ne(this.mod,"duckdb_web_insert_csv_from_path",["number","string","string"],[e,t,a]);if(u!==0)throw new Error(K(this.mod,f,d))}insertJSONFromPath(e,t,n){if(n.columns!==void 0){n.columnsFlat=[];for(let y in n.columns)n.columnsFlat.push(Vt(y,n.columns[y]))}let s={...n};s.columns=s.columnsFlat,delete s.columnsFlat;let a=JSON.stringify(s),[u,f,d]=ne(this.mod,"duckdb_web_insert_json_from_path",["number","string","string"],[e,t,a]);if(u!==0)throw new Error(K(this.mod,f,d))}globFiles(e){let[t,n,s]=ne(this.mod,"duckdb_web_fs_glob_file_infos",["string"],[e]);if(t!==0)throw new Error(K(this.mod,n,s));let a=K(this.mod,n,s);oe(this.mod);let u=JSON.parse(a);return u??[]}registerFileURL(e,t,n,s=!1){t===void 0&&(t=e);let[a,u,f]=ne(this.mod,"duckdb_web_fs_register_file_url",["string","string"],[e,t,n,s]);if(a!==0)throw new Error(K(this.mod,u,f));oe(this.mod)}registerFileText(e,t){let n=Ef.encode(t);this.registerFileBuffer(e,n)}registerFileBuffer(e,t){let n=this.mod._malloc(t.length);this.mod.HEAPU8.subarray(n,n+t.length).set(t);let[a,u,f]=ne(this.mod,"duckdb_web_fs_register_file_buffer",["string","number","number"],[e,n,t.length]);if(a!==0)throw new Error(K(this.mod,u,f));oe(this.mod)}registerFileHandle(e,t,n,s){let[a,u,f]=ne(this.mod,"duckdb_web_fs_register_file_url",["string","string","number","boolean"],[e,e,n,s]);if(a!==0)throw new Error(K(this.mod,u,f));if(oe(this.mod),globalThis.DUCKDB_RUNTIME._files=(globalThis.DUCKDB_RUNTIME._files||new Map).set(e,t),this.pthread){for(let d of this.pthread.runningWorkers)d.postMessage({cmd:"registerFileHandle",fileName:e,fileHandle:t});for(let d of this.pthread.unusedWorkers)d.postMessage({cmd:"dropFileHandle",fileName:e})}}dropFile(e){let[t,n,s]=ne(this.mod,"duckdb_web_fs_drop_file",["string"],[e]);if(t!==0)throw new Error(K(this.mod,n,s));oe(this.mod)}dropFiles(){let[e,t,n]=ne(this.mod,"duckdb_web_fs_drop_files",[],[]);if(e!==0)throw new Error(K(this.mod,t,n));oe(this.mod)}flushFiles(){this.mod.ccall("duckdb_web_flush_files",null,[],[])}copyFileToPath(e,t){let[n,s,a]=ne(this.mod,"duckdb_web_copy_file_to_path",["string","string"],[e,t]);if(n!==0)throw new Error(K(this.mod,s,a));oe(this.mod)}copyFileToBuffer(e){let[t,n,s]=ne(this.mod,"duckdb_web_copy_file_to_buffer",["string"],[e]);if(t!==0)throw new Error(K(this.mod,n,s));let a=this.mod.HEAPU8.subarray(n,n+s),u=new Uint8Array(a.length);return u.set(a),oe(this.mod),u}collectFileStatistics(e,t){let[n,s,a]=ne(this.mod,"duckdb_web_collect_file_stats",["string","boolean"],[e,t]);if(n!==0)throw new Error(K(this.mod,s,a))}exportFileStatistics(e){let[t,n,s]=ne(this.mod,"duckdb_web_export_file_stats",["string"],[e]);if(t!==0)throw new Error(K(this.mod,n,s));return new Zt(this.mod.HEAPU8.subarray(n,n+s))}};var ui=rt(require("fs")),tr=class extends er{constructor(t,n,s,a){super(t,n);this.mainModulePath=s,this.pthreadWorkerPath=a}locateFile(t,n){if(t.endsWith(".wasm"))return this.mainModulePath;if(t.endsWith(".worker.js")){if(!this.pthreadWorkerPath)throw new Error("Missing DuckDB worker path!");return this.pthreadWorkerPath}throw new Error(`WASM instantiation requested unexpected file: prefix=${n} path=${t}`)}instantiateWasm(t,n){globalThis.DUCKDB_RUNTIME={};for(let a of Object.getOwnPropertyNames(this._runtime))a!="constructor"&&(globalThis.DUCKDB_RUNTIME[a]=Object.getOwnPropertyDescriptor(this._runtime,a).value);let s=ui.default.readFileSync(this.mainModulePath);return WebAssembly.instantiate(s,t).then(a=>{n(a.instance,a.module)}),[]}instantiateImpl(t){return(0,oi.default)({...t,instantiateWasm:this.instantiateWasm.bind(this)})}};var rr=class extends tr{constructor(e,t,n,s=null){super(e,t,n,s)}instantiateImpl(e){return(0,ci.default)({...e,instantiateWasm:this.instantiateWasm.bind(this),locateFile:this.locateFile.bind(this)})}};var be=rt(require("fs"));var Zo=rt(Jo());var ue={_files:new Map,_filesById:new Map,_fileInfoCache:new Map,_udfFunctions:new Map,resolveFileInfo(r,e){try{let t=ue._fileInfoCache.get(e),[n,s,a]=ne(r,"duckdb_web_fs_get_file_info_by_id",["number","number"],[e,(t==null?void 0:t.cacheEpoch)||0]);if(n!==0)return le(r,K(r,s,a)),null;if(a===0)return oe(r),t;let u=K(r,s,a);oe(r);let f=JSON.parse(u);return f==null?null:(ue._fileInfoCache.set(e,f),f)}catch(t){return console.log(t),le(r,t.toString()),null}},testPlatformFeature:(r,e)=>{switch(e){case 1:return typeof BigInt64Array<"u";default:return console.warn(`test for unknown feature: ${e}`),!1}},getDefaultDataProtocol(r){return 1},openFile(r,e,t){var n,s;try{ue._fileInfoCache.delete(e);let a=ue.resolveFileInfo(r,e);switch(a==null?void 0:a.dataProtocol){case 1:{let u=(n=ue._files)==null?void 0:n.get(a.dataUrl);u==null&&(u=be.default.openSync(a.dataUrl,be.default.constants.O_CREAT|be.default.constants.O_RDWR,be.default.constants.S_IRUSR|be.default.constants.S_IWUSR),(s=ue._filesById)==null||s.set(a.fileId,u));let f=be.default.fstatSync(u).size,d=r._malloc(2*8);return r.HEAPF64[(d>>3)+0]=+f,r.HEAPF64[(d>>3)+1]=0,d}case 2:case 3:case 4:case 5:le(r,"Unsupported data protocol")}}catch(a){console.log(a),le(r,a.toString())}return 0},syncFile:(r,e)=>{},closeFile:(r,e)=>{try{let t=ue._fileInfoCache.get(e);switch(ue._fileInfoCache.delete(e),t==null?void 0:t.dataProtocol){case 1:{let n=ue._filesById.get(e);ue._filesById.delete(e),n!=null&&be.default.closeSync(n);break}case 2:case 3:case 4:case 5:break}}catch(t){console.log(t),le(r,t.toString())}return 0},truncateFile:(r,e,t)=>{try{let n=ue.resolveFileInfo(r,e);switch(n==null?void 0:n.dataProtocol){case 1:{be.default.truncateSync(n.dataUrl,t);break}case 2:case 3:case 4:case 5:le(r,"Unsupported data protocol")}}catch(n){console.log(n),le(r,n.toString())}return 0},readFile:(r,e,t,n,s)=>{try{let a=ue.resolveFileInfo(r,e);switch(a==null?void 0:a.dataProtocol){case 1:{let u=ue._filesById.get(e);return u==null?(le(r,`File ${e} is missing a file descriptor`),0):be.default.readSync(u,r.HEAPU8,t,n,s)}case 2:case 3:case 4:case 5:le(r,"Unsupported data protocol")}}catch(a){console.log(a),le(r,a.toString())}return 0},writeFile:(r,e,t,n,s)=>{try{let a=ue.resolveFileInfo(r,e);switch(a==null?void 0:a.dataProtocol){case 1:{let u=ue._filesById.get(e);if(u==null)return le(r,`File ${e} is missing a file descriptor`),0;let f=r.HEAPU8.subarray(t,t+n);return be.default.writeSync(u,f,0,f.length,s)}case 2:case 3:case 4:case 5:le(r,"Unsupported data protocol")}}catch(a){console.log(a),le(r,a.toString())}return 0},getLastFileModificationTime:(r,e)=>{try{let t=ue.resolveFileInfo(r,e);switch(t==null?void 0:t.dataProtocol){case 1:{let n=ue._filesById.get(e);return n==null?(le(r,`File ${e} is missing a file descriptor`),0):be.default.fstatSync(n).mtime.getTime()}case 2:case 3:case 4:case 5:le(r,"Unsupported data protocol")}}catch(t){console.log(t),le(r,t.toString())}return 0},checkDirectory:(r,e,t)=>{try{let n=nt(r.HEAPU8.subarray(e,e+t));return be.default.existsSync(n)}catch(n){return console.log(n),le(r,n.toString()),!1}},createDirectory:(r,e,t)=>{try{let n=nt(r.HEAPU8.subarray(e,e+t));return be.default.mkdirSync(n)}catch(n){return console.log(n),le(r,n.toString()),0}},removeDirectory:(r,e,t)=>{try{let n=nt(r.HEAPU8.subarray(e,e+t));return be.default.rmdirSync(n)}catch(n){return console.log(n),le(r,n.toString()),0}},listDirectoryEntries:(r,e,t)=>(le(r,"Not Implemented"),!1),glob:(r,e,t)=>{try{let n=K(r,e,t),s=Zo.sync([n],{dot:!0});for(let a of s)r.ccall("duckdb_web_fs_glob_add_path",null,["string"],[a])}catch(n){return console.log(n),le(r,n.toString()),0}},moveFile:(r,e,t,n,s)=>{var d,y;let a=K(r,e,t),u=K(r,n,s),f=(d=ue._files)==null?void 0:d.get(a);f!==void 0&&(ue._files.delete(f),ue._files.set(u,f));for(let[p,v]of((y=ue._fileInfoCache)==null?void 0:y.entries())||[])if(v.dataUrl==a){ue._fileInfoCache.delete(p);break}return!0},checkFile:(r,e,t)=>{try{let n=nt(r.HEAPU8.subarray(e,e+t));return be.default.existsSync(n)}catch(n){return console.log(n),le(r,n.toString()),!1}},removeFile:(r,e,t)=>{try{let n=nt(r.HEAPU8.subarray(e,e+t));return be.default.rmSync(n)}catch(n){return console.log(n),le(r,n.toString()),0}},callScalarUDF:(r,e,t,n,s,a,u)=>{ai(ue,r,e,t,n,s,a,u)}};var Ds=class extends zt{postMessage(e,t){globalThis.postMessage(e,t)}async instantiate(e,t,n){return await new rr(this,ue,e,t).instantiate(n)}};function eu(){let r=new Ds;globalThis.onmessage=async e=>{await r.onMessage(e.data)}}eu();0&&(module.exports={registerWorker});
/*! Bundled license information:

is-extglob/index.js:
  (*!
   * is-extglob <https://github.com/jonschlinkert/is-extglob>
   *
   * Copyright (c) 2014-2016, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

is-glob/index.js:
  (*!
   * is-glob <https://github.com/jonschlinkert/is-glob>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

is-number/index.js:
  (*!
   * is-number <https://github.com/jonschlinkert/is-number>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Released under the MIT License.
   *)

to-regex-range/index.js:
  (*!
   * to-regex-range <https://github.com/micromatch/to-regex-range>
   *
   * Copyright (c) 2015-present, Jon Schlinkert.
   * Released under the MIT License.
   *)

fill-range/index.js:
  (*!
   * fill-range <https://github.com/jonschlinkert/fill-range>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

queue-microtask/index.js:
  (*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

run-parallel/index.js:
  (*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
*/
//# sourceMappingURL=data:application/json;base64,
