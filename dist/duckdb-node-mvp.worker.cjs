"use strict";var nd=Object.create;var Qt=Object.defineProperty;var id=Object.getOwnPropertyDescriptor;var sd=Object.getOwnPropertyNames;var ad=Object.getPrototypeOf,od=Object.prototype.hasOwnProperty;var k=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),ud=(r,e)=>{for(var t in e)Qt(r,t,{get:e[t],enumerable:!0})},ms=(r,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of sd(e))!od.call(r,s)&&s!==t&&Qt(r,s,{get:()=>e[s],enumerable:!(n=id(e,s))||n.enumerable});return r};var Et=(r,e,t)=>(t=r!=null?nd(ad(r)):{},ms(e||!r||!r.__esModule?Qt(t,"default",{value:r,enumerable:!0}):t,r)),ld=r=>ms(Qt({},"__esModule",{value:!0}),r);var Es=k(Rt=>{"use strict";Object.defineProperty(Rt,"__esModule",{value:!0});Rt.splitWhen=Rt.flatten=void 0;function pd(r){return r.reduce((e,t)=>[].concat(e,t),[])}Rt.flatten=pd;function hd(r,e){let t=[[]],n=0;for(let s of r)e(s)?(n++,t[n]=[]):t[n].push(s);return t}Rt.splitWhen=hd});var ws=k(ur=>{"use strict";Object.defineProperty(ur,"__esModule",{value:!0});ur.isEnoentCodeError=void 0;function md(r){return r.code==="ENOENT"}ur.isEnoentCodeError=md});var Rs=k(lr=>{"use strict";Object.defineProperty(lr,"__esModule",{value:!0});lr.createDirentFromStats=void 0;var tn=class{constructor(e,t){this.name=e,this.isBlockDevice=t.isBlockDevice.bind(t),this.isCharacterDevice=t.isCharacterDevice.bind(t),this.isDirectory=t.isDirectory.bind(t),this.isFIFO=t.isFIFO.bind(t),this.isFile=t.isFile.bind(t),this.isSocket=t.isSocket.bind(t),this.isSymbolicLink=t.isSymbolicLink.bind(t)}};function gd(r,e){return new tn(r,e)}lr.createDirentFromStats=gd});var Ts=k(We=>{"use strict";Object.defineProperty(We,"__esModule",{value:!0});We.removeLeadingDotSegment=We.escape=We.makeAbsolute=We.unixify=void 0;var bd=require("path"),yd=2,Sd=/(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;function vd(r){return r.replace(/\\/g,"/")}We.unixify=vd;function Ed(r,e){return bd.resolve(r,e)}We.makeAbsolute=Ed;function wd(r){return r.replace(Sd,"\\$2")}We.escape=wd;function Rd(r){if(r.charAt(0)==="."){let e=r.charAt(1);if(e==="/"||e==="\\")return r.slice(yd)}return r}We.removeLeadingDotSegment=Rd});var Cs=k((Qg,As)=>{As.exports=function(e){if(typeof e!="string"||e==="")return!1;for(var t;t=/(\\).|([@?!+*]\(.*\))/g.exec(e);){if(t[2])return!0;e=e.slice(t.index+t[0].length)}return!1}});var Is=k((Xg,Ds)=>{var Td=Cs(),ks={"{":"}","(":")","[":"]"},Ad=function(r){if(r[0]==="!")return!0;for(var e=0,t=-2,n=-2,s=-2,o=-2,l=-2;e<r.length;){if(r[e]==="*"||r[e+1]==="?"&&/[\].+)]/.test(r[e])||n!==-1&&r[e]==="["&&r[e+1]!=="]"&&(n<e&&(n=r.indexOf("]",e)),n>e&&(l===-1||l>n||(l=r.indexOf("\\",e),l===-1||l>n)))||s!==-1&&r[e]==="{"&&r[e+1]!=="}"&&(s=r.indexOf("}",e),s>e&&(l=r.indexOf("\\",e),l===-1||l>s))||o!==-1&&r[e]==="("&&r[e+1]==="?"&&/[:!=]/.test(r[e+2])&&r[e+3]!==")"&&(o=r.indexOf(")",e),o>e&&(l=r.indexOf("\\",e),l===-1||l>o))||t!==-1&&r[e]==="("&&r[e+1]!=="|"&&(t<e&&(t=r.indexOf("|",e)),t!==-1&&r[t+1]!==")"&&(o=r.indexOf(")",t),o>t&&(l=r.indexOf("\\",t),l===-1||l>o))))return!0;if(r[e]==="\\"){var c=r[e+1];e+=2;var _=ks[c];if(_){var S=r.indexOf(_,e);S!==-1&&(e=S+1)}if(r[e]==="!")return!0}else e++}return!1},Cd=function(r){if(r[0]==="!")return!0;for(var e=0;e<r.length;){if(/[*?{}()[\]]/.test(r[e]))return!0;if(r[e]==="\\"){var t=r[e+1];e+=2;var n=ks[t];if(n){var s=r.indexOf(n,e);s!==-1&&(e=s+1)}if(r[e]==="!")return!0}else e++}return!1};Ds.exports=function(e,t){if(typeof e!="string"||e==="")return!1;if(Td(e))return!0;var n=Ad;return t&&t.strict===!1&&(n=Cd),n(e)}});var Fs=k((Jg,Ps)=>{"use strict";var kd=Is(),Dd=require("path").posix.dirname,Id=require("os").platform()==="win32",rn="/",Pd=/\\/g,Fd=/[\{\[].*[\}\]]$/,Md=/(^|[^\\])([\{\[]|\([^\)]+$)/,Ld=/\\([\!\*\?\|\[\]\(\)\{\}])/g;Ps.exports=function(e,t){var n=Object.assign({flipBackslashes:!0},t);n.flipBackslashes&&Id&&e.indexOf(rn)<0&&(e=e.replace(Pd,rn)),Fd.test(e)&&(e+=rn),e+="a";do e=Dd(e);while(kd(e)||Md.test(e));return e.replace(Ld,"$1")}});var cr=k(xe=>{"use strict";xe.isInteger=r=>typeof r=="number"?Number.isInteger(r):typeof r=="string"&&r.trim()!==""?Number.isInteger(Number(r)):!1;xe.find=(r,e)=>r.nodes.find(t=>t.type===e);xe.exceedsLimit=(r,e,t=1,n)=>n===!1||!xe.isInteger(r)||!xe.isInteger(e)?!1:(Number(e)-Number(r))/Number(t)>=n;xe.escapeNode=(r,e=0,t)=>{let n=r.nodes[e];!n||(t&&n.type===t||n.type==="open"||n.type==="close")&&n.escaped!==!0&&(n.value="\\"+n.value,n.escaped=!0)};xe.encloseBrace=r=>r.type!=="brace"?!1:r.commas>>0+r.ranges>>0===0?(r.invalid=!0,!0):!1;xe.isInvalidBrace=r=>r.type!=="brace"?!1:r.invalid===!0||r.dollar?!0:r.commas>>0+r.ranges>>0===0||r.open!==!0||r.close!==!0?(r.invalid=!0,!0):!1;xe.isOpenOrClose=r=>r.type==="open"||r.type==="close"?!0:r.open===!0||r.close===!0;xe.reduce=r=>r.reduce((e,t)=>(t.type==="text"&&e.push(t.value),t.type==="range"&&(t.type="text"),e),[]);xe.flatten=(...r)=>{let e=[],t=n=>{for(let s=0;s<n.length;s++){let o=n[s];Array.isArray(o)?t(o,e):o!==void 0&&e.push(o)}return e};return t(r),e}});var dr=k((eb,Ls)=>{"use strict";var Ms=cr();Ls.exports=(r,e={})=>{let t=(n,s={})=>{let o=e.escapeInvalid&&Ms.isInvalidBrace(s),l=n.invalid===!0&&e.escapeInvalid===!0,c="";if(n.value)return(o||l)&&Ms.isOpenOrClose(n)?"\\"+n.value:n.value;if(n.value)return n.value;if(n.nodes)for(let _ of n.nodes)c+=t(_);return c};return t(r)}});var js=k((tb,Os)=>{"use strict";Os.exports=function(r){return typeof r=="number"?r-r===0:typeof r=="string"&&r.trim()!==""?Number.isFinite?Number.isFinite(+r):isFinite(+r):!1}});var qs=k((rb,Gs)=>{"use strict";var xs=js(),pt=(r,e,t)=>{if(xs(r)===!1)throw new TypeError("toRegexRange: expected the first argument to be a number");if(e===void 0||r===e)return String(r);if(xs(e)===!1)throw new TypeError("toRegexRange: expected the second argument to be a number.");let n={relaxZeros:!0,...t};typeof n.strictZeros=="boolean"&&(n.relaxZeros=n.strictZeros===!1);let s=String(n.relaxZeros),o=String(n.shorthand),l=String(n.capture),c=String(n.wrap),_=r+":"+e+"="+s+o+l+c;if(pt.cache.hasOwnProperty(_))return pt.cache[_].result;let S=Math.min(r,e),f=Math.max(r,e);if(Math.abs(S-f)===1){let M=r+"|"+e;return n.capture?`(${M})`:n.wrap===!1?M:`(?:${M})`}let w=Ws(r)||Ws(e),y={min:r,max:e,a:S,b:f},x=[],I=[];if(w&&(y.isPadded=w,y.maxLen=String(y.max).length),S<0){let M=f<0?Math.abs(f):1;I=Ns(M,Math.abs(S),y,n),S=y.a=0}return f>=0&&(x=Ns(S,f,y,n)),y.negatives=I,y.positives=x,y.result=Od(I,x,n),n.capture===!0?y.result=`(${y.result})`:n.wrap!==!1&&x.length+I.length>1&&(y.result=`(?:${y.result})`),pt.cache[_]=y,y.result};function Od(r,e,t){let n=nn(r,e,"-",!1,t)||[],s=nn(e,r,"",!1,t)||[],o=nn(r,e,"-?",!0,t)||[];return n.concat(o).concat(s).join("|")}function jd(r,e){let t=1,n=1,s=Us(r,t),o=new Set([e]);for(;r<=s&&s<=e;)o.add(s),t+=1,s=Us(r,t);for(s=Hs(e+1,n)-1;r<s&&s<=e;)o.add(s),n+=1,s=Hs(e+1,n)-1;return o=[...o],o.sort(Bd),o}function xd(r,e,t){if(r===e)return{pattern:r,count:[],digits:0};let n=Nd(r,e),s=n.length,o="",l=0;for(let c=0;c<s;c++){let[_,S]=n[c];_===S?o+=_:_!=="0"||S!=="9"?o+=Ud(_,S,t):l++}return l&&(o+=t.shorthand===!0?"\\d":"[0-9]"),{pattern:o,count:[l],digits:s}}function Ns(r,e,t,n){let s=jd(r,e),o=[],l=r,c;for(let _=0;_<s.length;_++){let S=s[_],f=xd(String(l),String(S),n),w="";if(!t.isPadded&&c&&c.pattern===f.pattern){c.count.length>1&&c.count.pop(),c.count.push(f.count[0]),c.string=c.pattern+$s(c.count),l=S+1;continue}t.isPadded&&(w=Hd(S,t,n)),f.string=w+f.pattern+$s(f.count),o.push(f),l=S+1,c=f}return o}function nn(r,e,t,n,s){let o=[];for(let l of r){let{string:c}=l;!n&&!Bs(e,"string",c)&&o.push(t+c),n&&Bs(e,"string",c)&&o.push(t+c)}return o}function Nd(r,e){let t=[];for(let n=0;n<r.length;n++)t.push([r[n],e[n]]);return t}function Bd(r,e){return r>e?1:e>r?-1:0}function Bs(r,e,t){return r.some(n=>n[e]===t)}function Us(r,e){return Number(String(r).slice(0,-e)+"9".repeat(e))}function Hs(r,e){return r-r%Math.pow(10,e)}function $s(r){let[e=0,t=""]=r;return t||e>1?`{${e+(t?","+t:"")}}`:""}function Ud(r,e,t){return`[${r}${e-r===1?"":"-"}${e}]`}function Ws(r){return/^-?(0+)\d/.test(r)}function Hd(r,e,t){if(!e.isPadded)return r;let n=Math.abs(e.maxLen-String(r).length),s=t.relaxZeros!==!1;switch(n){case 0:return"";case 1:return s?"0?":"0";case 2:return s?"0{0,2}":"00";default:return s?`0{0,${n}}`:`0{${n}}`}}pt.cache={};pt.clearCache=()=>pt.cache={};Gs.exports=pt});var on=k((nb,Zs)=>{"use strict";var $d=require("util"),zs=qs(),Ys=r=>r!==null&&typeof r=="object"&&!Array.isArray(r),Wd=r=>e=>r===!0?Number(e):String(e),sn=r=>typeof r=="number"||typeof r=="string"&&r!=="",Ht=r=>Number.isInteger(+r),an=r=>{let e=`${r}`,t=-1;if(e[0]==="-"&&(e=e.slice(1)),e==="0")return!1;for(;e[++t]==="0";);return t>0},Gd=(r,e,t)=>typeof r=="string"||typeof e=="string"?!0:t.stringify===!0,qd=(r,e,t)=>{if(e>0){let n=r[0]==="-"?"-":"";n&&(r=r.slice(1)),r=n+r.padStart(n?e-1:e,"0")}return t===!1?String(r):r},Vs=(r,e)=>{let t=r[0]==="-"?"-":"";for(t&&(r=r.slice(1),e--);r.length<e;)r="0"+r;return t?"-"+r:r},Yd=(r,e)=>{r.negatives.sort((l,c)=>l<c?-1:l>c?1:0),r.positives.sort((l,c)=>l<c?-1:l>c?1:0);let t=e.capture?"":"?:",n="",s="",o;return r.positives.length&&(n=r.positives.join("|")),r.negatives.length&&(s=`-(${t}${r.negatives.join("|")})`),n&&s?o=`${n}|${s}`:o=n||s,e.wrap?`(${t}${o})`:o},Ks=(r,e,t,n)=>{if(t)return zs(r,e,{wrap:!1,...n});let s=String.fromCharCode(r);if(r===e)return s;let o=String.fromCharCode(e);return`[${s}-${o}]`},Qs=(r,e,t)=>{if(Array.isArray(r)){let n=t.wrap===!0,s=t.capture?"":"?:";return n?`(${s}${r.join("|")})`:r.join("|")}return zs(r,e,t)},Xs=(...r)=>new RangeError("Invalid range arguments: "+$d.inspect(...r)),Js=(r,e,t)=>{if(t.strictRanges===!0)throw Xs([r,e]);return[]},Vd=(r,e)=>{if(e.strictRanges===!0)throw new TypeError(`Expected step "${r}" to be a number`);return[]},zd=(r,e,t=1,n={})=>{let s=Number(r),o=Number(e);if(!Number.isInteger(s)||!Number.isInteger(o)){if(n.strictRanges===!0)throw Xs([r,e]);return[]}s===0&&(s=0),o===0&&(o=0);let l=s>o,c=String(r),_=String(e),S=String(t);t=Math.max(Math.abs(t),1);let f=an(c)||an(_)||an(S),w=f?Math.max(c.length,_.length,S.length):0,y=f===!1&&Gd(r,e,n)===!1,x=n.transform||Wd(y);if(n.toRegex&&t===1)return Ks(Vs(r,w),Vs(e,w),!0,n);let I={negatives:[],positives:[]},M=ne=>I[ne<0?"negatives":"positives"].push(Math.abs(ne)),N=[],U=0;for(;l?s>=o:s<=o;)n.toRegex===!0&&t>1?M(s):N.push(qd(x(s,U),w,y)),s=l?s-t:s+t,U++;return n.toRegex===!0?t>1?Yd(I,n):Qs(N,null,{wrap:!1,...n}):N},Kd=(r,e,t=1,n={})=>{if(!Ht(r)&&r.length>1||!Ht(e)&&e.length>1)return Js(r,e,n);let s=n.transform||(y=>String.fromCharCode(y)),o=`${r}`.charCodeAt(0),l=`${e}`.charCodeAt(0),c=o>l,_=Math.min(o,l),S=Math.max(o,l);if(n.toRegex&&t===1)return Ks(_,S,!1,n);let f=[],w=0;for(;c?o>=l:o<=l;)f.push(s(o,w)),o=c?o-t:o+t,w++;return n.toRegex===!0?Qs(f,null,{wrap:!1,options:n}):f},_r=(r,e,t,n={})=>{if(e==null&&sn(r))return[r];if(!sn(r)||!sn(e))return Js(r,e,n);if(typeof t=="function")return _r(r,e,1,{transform:t});if(Ys(t))return _r(r,e,0,t);let s={...n};return s.capture===!0&&(s.wrap=!0),t=t||s.step||1,Ht(t)?Ht(r)&&Ht(e)?zd(r,e,t,s):Kd(r,e,Math.max(Math.abs(t),1),s):t!=null&&!Ys(t)?Vd(t,s):_r(r,e,1,t)};Zs.exports=_r});var ra=k((ib,ta)=>{"use strict";var Qd=on(),ea=cr(),Xd=(r,e={})=>{let t=(n,s={})=>{let o=ea.isInvalidBrace(s),l=n.invalid===!0&&e.escapeInvalid===!0,c=o===!0||l===!0,_=e.escapeInvalid===!0?"\\":"",S="";if(n.isOpen===!0||n.isClose===!0)return _+n.value;if(n.type==="open")return c?_+n.value:"(";if(n.type==="close")return c?_+n.value:")";if(n.type==="comma")return n.prev.type==="comma"?"":c?n.value:"|";if(n.value)return n.value;if(n.nodes&&n.ranges>0){let f=ea.reduce(n.nodes),w=Qd(...f,{...e,wrap:!1,toRegex:!0});if(w.length!==0)return f.length>1&&w.length>1?`(${w})`:w}if(n.nodes)for(let f of n.nodes)S+=t(f,n);return S};return t(r)};ta.exports=Xd});var sa=k((sb,ia)=>{"use strict";var Jd=on(),na=dr(),Tt=cr(),ht=(r="",e="",t=!1)=>{let n=[];if(r=[].concat(r),e=[].concat(e),!e.length)return r;if(!r.length)return t?Tt.flatten(e).map(s=>`{${s}}`):e;for(let s of r)if(Array.isArray(s))for(let o of s)n.push(ht(o,e,t));else for(let o of e)t===!0&&typeof o=="string"&&(o=`{${o}}`),n.push(Array.isArray(o)?ht(s,o,t):s+o);return Tt.flatten(n)},Zd=(r,e={})=>{let t=e.rangeLimit===void 0?1e3:e.rangeLimit,n=(s,o={})=>{s.queue=[];let l=o,c=o.queue;for(;l.type!=="brace"&&l.type!=="root"&&l.parent;)l=l.parent,c=l.queue;if(s.invalid||s.dollar){c.push(ht(c.pop(),na(s,e)));return}if(s.type==="brace"&&s.invalid!==!0&&s.nodes.length===2){c.push(ht(c.pop(),["{}"]));return}if(s.nodes&&s.ranges>0){let w=Tt.reduce(s.nodes);if(Tt.exceedsLimit(...w,e.step,t))throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");let y=Jd(...w,e);y.length===0&&(y=na(s,e)),c.push(ht(c.pop(),y)),s.nodes=[];return}let _=Tt.encloseBrace(s),S=s.queue,f=s;for(;f.type!=="brace"&&f.type!=="root"&&f.parent;)f=f.parent,S=f.queue;for(let w=0;w<s.nodes.length;w++){let y=s.nodes[w];if(y.type==="comma"&&s.type==="brace"){w===1&&S.push(""),S.push("");continue}if(y.type==="close"){c.push(ht(c.pop(),S,_));continue}if(y.value&&y.type!=="open"){S.push(ht(S.pop(),y.value));continue}y.nodes&&n(y,s)}return S};return Tt.flatten(n(r))};ia.exports=Zd});var oa=k((ab,aa)=>{"use strict";aa.exports={MAX_LENGTH:1024*64,CHAR_0:"0",CHAR_9:"9",CHAR_UPPERCASE_A:"A",CHAR_LOWERCASE_A:"a",CHAR_UPPERCASE_Z:"Z",CHAR_LOWERCASE_Z:"z",CHAR_LEFT_PARENTHESES:"(",CHAR_RIGHT_PARENTHESES:")",CHAR_ASTERISK:"*",CHAR_AMPERSAND:"&",CHAR_AT:"@",CHAR_BACKSLASH:"\\",CHAR_BACKTICK:"`",CHAR_CARRIAGE_RETURN:"\r",CHAR_CIRCUMFLEX_ACCENT:"^",CHAR_COLON:":",CHAR_COMMA:",",CHAR_DOLLAR:"$",CHAR_DOT:".",CHAR_DOUBLE_QUOTE:'"',CHAR_EQUAL:"=",CHAR_EXCLAMATION_MARK:"!",CHAR_FORM_FEED:"\f",CHAR_FORWARD_SLASH:"/",CHAR_HASH:"#",CHAR_HYPHEN_MINUS:"-",CHAR_LEFT_ANGLE_BRACKET:"<",CHAR_LEFT_CURLY_BRACE:"{",CHAR_LEFT_SQUARE_BRACKET:"[",CHAR_LINE_FEED:`
`,CHAR_NO_BREAK_SPACE:"\xA0",CHAR_PERCENT:"%",CHAR_PLUS:"+",CHAR_QUESTION_MARK:"?",CHAR_RIGHT_ANGLE_BRACKET:">",CHAR_RIGHT_CURLY_BRACE:"}",CHAR_RIGHT_SQUARE_BRACKET:"]",CHAR_SEMICOLON:";",CHAR_SINGLE_QUOTE:"'",CHAR_SPACE:" ",CHAR_TAB:"	",CHAR_UNDERSCORE:"_",CHAR_VERTICAL_LINE:"|",CHAR_ZERO_WIDTH_NOBREAK_SPACE:"\uFEFF"}});var _a=k((ob,da)=>{"use strict";var e_=dr(),{MAX_LENGTH:ua,CHAR_BACKSLASH:un,CHAR_BACKTICK:t_,CHAR_COMMA:r_,CHAR_DOT:n_,CHAR_LEFT_PARENTHESES:i_,CHAR_RIGHT_PARENTHESES:s_,CHAR_LEFT_CURLY_BRACE:a_,CHAR_RIGHT_CURLY_BRACE:o_,CHAR_LEFT_SQUARE_BRACKET:la,CHAR_RIGHT_SQUARE_BRACKET:ca,CHAR_DOUBLE_QUOTE:u_,CHAR_SINGLE_QUOTE:l_,CHAR_NO_BREAK_SPACE:c_,CHAR_ZERO_WIDTH_NOBREAK_SPACE:d_}=oa(),__=(r,e={})=>{if(typeof r!="string")throw new TypeError("Expected a string");let t=e||{},n=typeof t.maxLength=="number"?Math.min(ua,t.maxLength):ua;if(r.length>n)throw new SyntaxError(`Input length (${r.length}), exceeds max characters (${n})`);let s={type:"root",input:r,nodes:[]},o=[s],l=s,c=s,_=0,S=r.length,f=0,w=0,y,x={},I=()=>r[f++],M=N=>{if(N.type==="text"&&c.type==="dot"&&(c.type="text"),c&&c.type==="text"&&N.type==="text"){c.value+=N.value;return}return l.nodes.push(N),N.parent=l,N.prev=c,c=N,N};for(M({type:"bos"});f<S;)if(l=o[o.length-1],y=I(),!(y===d_||y===c_)){if(y===un){M({type:"text",value:(e.keepEscaping?y:"")+I()});continue}if(y===ca){M({type:"text",value:"\\"+y});continue}if(y===la){_++;let N=!0,U;for(;f<S&&(U=I());){if(y+=U,U===la){_++;continue}if(U===un){y+=I();continue}if(U===ca&&(_--,_===0))break}M({type:"text",value:y});continue}if(y===i_){l=M({type:"paren",nodes:[]}),o.push(l),M({type:"text",value:y});continue}if(y===s_){if(l.type!=="paren"){M({type:"text",value:y});continue}l=o.pop(),M({type:"text",value:y}),l=o[o.length-1];continue}if(y===u_||y===l_||y===t_){let N=y,U;for(e.keepQuotes!==!0&&(y="");f<S&&(U=I());){if(U===un){y+=U+I();continue}if(U===N){e.keepQuotes===!0&&(y+=U);break}y+=U}M({type:"text",value:y});continue}if(y===a_){w++;let U={type:"brace",open:!0,close:!1,dollar:c.value&&c.value.slice(-1)==="$"||l.dollar===!0,depth:w,commas:0,ranges:0,nodes:[]};l=M(U),o.push(l),M({type:"open",value:y});continue}if(y===o_){if(l.type!=="brace"){M({type:"text",value:y});continue}let N="close";l=o.pop(),l.close=!0,M({type:N,value:y}),w--,l=o[o.length-1];continue}if(y===r_&&w>0){if(l.ranges>0){l.ranges=0;let N=l.nodes.shift();l.nodes=[N,{type:"text",value:e_(l)}]}M({type:"comma",value:y}),l.commas++;continue}if(y===n_&&w>0&&l.commas===0){let N=l.nodes;if(w===0||N.length===0){M({type:"text",value:y});continue}if(c.type==="dot"){if(l.range=[],c.value+=y,c.type="range",l.nodes.length!==3&&l.nodes.length!==5){l.invalid=!0,l.ranges=0,c.type="text";continue}l.ranges++,l.args=[];continue}if(c.type==="range"){N.pop();let U=N[N.length-1];U.value+=c.value+y,c=U,l.ranges--;continue}M({type:"dot",value:y});continue}M({type:"text",value:y})}do if(l=o.pop(),l.type!=="root"){l.nodes.forEach(ne=>{ne.nodes||(ne.type==="open"&&(ne.isOpen=!0),ne.type==="close"&&(ne.isClose=!0),ne.nodes||(ne.type="text"),ne.invalid=!0)});let N=o[o.length-1],U=N.nodes.indexOf(l);N.nodes.splice(U,1,...l.nodes)}while(o.length>0);return M({type:"eos"}),s};da.exports=__});var ha=k((ub,pa)=>{"use strict";var fa=dr(),f_=ra(),p_=sa(),h_=_a(),Fe=(r,e={})=>{let t=[];if(Array.isArray(r))for(let n of r){let s=Fe.create(n,e);Array.isArray(s)?t.push(...s):t.push(s)}else t=[].concat(Fe.create(r,e));return e&&e.expand===!0&&e.nodupes===!0&&(t=[...new Set(t)]),t};Fe.parse=(r,e={})=>h_(r,e);Fe.stringify=(r,e={})=>fa(typeof r=="string"?Fe.parse(r,e):r,e);Fe.compile=(r,e={})=>(typeof r=="string"&&(r=Fe.parse(r,e)),f_(r,e));Fe.expand=(r,e={})=>{typeof r=="string"&&(r=Fe.parse(r,e));let t=p_(r,e);return e.noempty===!0&&(t=t.filter(Boolean)),e.nodupes===!0&&(t=[...new Set(t)]),t};Fe.create=(r,e={})=>r===""||r.length<3?[r]:e.expand!==!0?Fe.compile(r,e):Fe.expand(r,e);pa.exports=Fe});var $t=k((lb,Sa)=>{"use strict";var m_=require("path"),Ge="\\\\/",ma=`[^${Ge}]`,Xe="\\.",g_="\\+",b_="\\?",fr="\\/",y_="(?=.)",ga="[^/]",ln=`(?:${fr}|$)`,ba=`(?:^|${fr})`,cn=`${Xe}{1,2}${ln}`,S_=`(?!${Xe})`,v_=`(?!${ba}${cn})`,E_=`(?!${Xe}{0,1}${ln})`,w_=`(?!${cn})`,R_=`[^.${fr}]`,T_=`${ga}*?`,ya={DOT_LITERAL:Xe,PLUS_LITERAL:g_,QMARK_LITERAL:b_,SLASH_LITERAL:fr,ONE_CHAR:y_,QMARK:ga,END_ANCHOR:ln,DOTS_SLASH:cn,NO_DOT:S_,NO_DOTS:v_,NO_DOT_SLASH:E_,NO_DOTS_SLASH:w_,QMARK_NO_DOT:R_,STAR:T_,START_ANCHOR:ba},A_={...ya,SLASH_LITERAL:`[${Ge}]`,QMARK:ma,STAR:`${ma}*?`,DOTS_SLASH:`${Xe}{1,2}(?:[${Ge}]|$)`,NO_DOT:`(?!${Xe})`,NO_DOTS:`(?!(?:^|[${Ge}])${Xe}{1,2}(?:[${Ge}]|$))`,NO_DOT_SLASH:`(?!${Xe}{0,1}(?:[${Ge}]|$))`,NO_DOTS_SLASH:`(?!${Xe}{1,2}(?:[${Ge}]|$))`,QMARK_NO_DOT:`[^.${Ge}]`,START_ANCHOR:`(?:^|[${Ge}])`,END_ANCHOR:`(?:[${Ge}]|$)`},C_={alnum:"a-zA-Z0-9",alpha:"a-zA-Z",ascii:"\\x00-\\x7F",blank:" \\t",cntrl:"\\x00-\\x1F\\x7F",digit:"0-9",graph:"\\x21-\\x7E",lower:"a-z",print:"\\x20-\\x7E ",punct:"\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",space:" \\t\\r\\n\\v\\f",upper:"A-Z",word:"A-Za-z0-9_",xdigit:"A-Fa-f0-9"};Sa.exports={MAX_LENGTH:1024*64,POSIX_REGEX_SOURCE:C_,REGEX_BACKSLASH:/\\(?![*+?^${}(|)[\]])/g,REGEX_NON_SPECIAL_CHARS:/^[^@![\].,$*+?^{}()|\\/]+/,REGEX_SPECIAL_CHARS:/[-*+?.^${}(|)[\]]/,REGEX_SPECIAL_CHARS_BACKREF:/(\\?)((\W)(\3*))/g,REGEX_SPECIAL_CHARS_GLOBAL:/([-*+?.^${}(|)[\]])/g,REGEX_REMOVE_BACKSLASH:/(?:\[.*?[^\\]\]|\\(?=.))/g,REPLACEMENTS:{"***":"*","**/**":"**","**/**/**":"**"},CHAR_0:48,CHAR_9:57,CHAR_UPPERCASE_A:65,CHAR_LOWERCASE_A:97,CHAR_UPPERCASE_Z:90,CHAR_LOWERCASE_Z:122,CHAR_LEFT_PARENTHESES:40,CHAR_RIGHT_PARENTHESES:41,CHAR_ASTERISK:42,CHAR_AMPERSAND:38,CHAR_AT:64,CHAR_BACKWARD_SLASH:92,CHAR_CARRIAGE_RETURN:13,CHAR_CIRCUMFLEX_ACCENT:94,CHAR_COLON:58,CHAR_COMMA:44,CHAR_DOT:46,CHAR_DOUBLE_QUOTE:34,CHAR_EQUAL:61,CHAR_EXCLAMATION_MARK:33,CHAR_FORM_FEED:12,CHAR_FORWARD_SLASH:47,CHAR_GRAVE_ACCENT:96,CHAR_HASH:35,CHAR_HYPHEN_MINUS:45,CHAR_LEFT_ANGLE_BRACKET:60,CHAR_LEFT_CURLY_BRACE:123,CHAR_LEFT_SQUARE_BRACKET:91,CHAR_LINE_FEED:10,CHAR_NO_BREAK_SPACE:160,CHAR_PERCENT:37,CHAR_PLUS:43,CHAR_QUESTION_MARK:63,CHAR_RIGHT_ANGLE_BRACKET:62,CHAR_RIGHT_CURLY_BRACE:125,CHAR_RIGHT_SQUARE_BRACKET:93,CHAR_SEMICOLON:59,CHAR_SINGLE_QUOTE:39,CHAR_SPACE:32,CHAR_TAB:9,CHAR_UNDERSCORE:95,CHAR_VERTICAL_LINE:124,CHAR_ZERO_WIDTH_NOBREAK_SPACE:65279,SEP:m_.sep,extglobChars(r){return{"!":{type:"negate",open:"(?:(?!(?:",close:`))${r.STAR})`},"?":{type:"qmark",open:"(?:",close:")?"},"+":{type:"plus",open:"(?:",close:")+"},"*":{type:"star",open:"(?:",close:")*"},"@":{type:"at",open:"(?:",close:")"}}},globChars(r){return r===!0?A_:ya}}});var Wt=k(Ie=>{"use strict";var k_=require("path"),D_=process.platform==="win32",{REGEX_BACKSLASH:I_,REGEX_REMOVE_BACKSLASH:P_,REGEX_SPECIAL_CHARS:F_,REGEX_SPECIAL_CHARS_GLOBAL:M_}=$t();Ie.isObject=r=>r!==null&&typeof r=="object"&&!Array.isArray(r);Ie.hasRegexChars=r=>F_.test(r);Ie.isRegexChar=r=>r.length===1&&Ie.hasRegexChars(r);Ie.escapeRegex=r=>r.replace(M_,"\\$1");Ie.toPosixSlashes=r=>r.replace(I_,"/");Ie.removeBackslashes=r=>r.replace(P_,e=>e==="\\"?"":e);Ie.supportsLookbehinds=()=>{let r=process.version.slice(1).split(".").map(Number);return r.length===3&&r[0]>=9||r[0]===8&&r[1]>=10};Ie.isWindows=r=>r&&typeof r.windows=="boolean"?r.windows:D_===!0||k_.sep==="\\";Ie.escapeLast=(r,e,t)=>{let n=r.lastIndexOf(e,t);return n===-1?r:r[n-1]==="\\"?Ie.escapeLast(r,e,n-1):`${r.slice(0,n)}\\${r.slice(n)}`};Ie.removePrefix=(r,e={})=>{let t=r;return t.startsWith("./")&&(t=t.slice(2),e.prefix="./"),t};Ie.wrapOutput=(r,e={},t={})=>{let n=t.contains?"":"^",s=t.contains?"":"$",o=`${n}(?:${r})${s}`;return e.negated===!0&&(o=`(?:^(?!${o}).*$)`),o}});var ka=k((db,Ca)=>{"use strict";var va=Wt(),{CHAR_ASTERISK:dn,CHAR_AT:L_,CHAR_BACKWARD_SLASH:Gt,CHAR_COMMA:O_,CHAR_DOT:_n,CHAR_EXCLAMATION_MARK:fn,CHAR_FORWARD_SLASH:Aa,CHAR_LEFT_CURLY_BRACE:pn,CHAR_LEFT_PARENTHESES:hn,CHAR_LEFT_SQUARE_BRACKET:j_,CHAR_PLUS:x_,CHAR_QUESTION_MARK:Ea,CHAR_RIGHT_CURLY_BRACE:N_,CHAR_RIGHT_PARENTHESES:wa,CHAR_RIGHT_SQUARE_BRACKET:B_}=$t(),Ra=r=>r===Aa||r===Gt,Ta=r=>{r.isPrefix!==!0&&(r.depth=r.isGlobstar?1/0:1)},U_=(r,e)=>{let t=e||{},n=r.length-1,s=t.parts===!0||t.scanToEnd===!0,o=[],l=[],c=[],_=r,S=-1,f=0,w=0,y=!1,x=!1,I=!1,M=!1,N=!1,U=!1,ne=!1,re=!1,me=!1,q=!1,ee=0,W,j,L={value:"",depth:0,isGlob:!1},R=()=>S>=n,m=()=>_.charCodeAt(S+1),K=()=>(W=j,_.charCodeAt(++S));for(;S<n;){j=K();let ue;if(j===Gt){ne=L.backslashes=!0,j=K(),j===pn&&(U=!0);continue}if(U===!0||j===pn){for(ee++;R()!==!0&&(j=K());){if(j===Gt){ne=L.backslashes=!0,K();continue}if(j===pn){ee++;continue}if(U!==!0&&j===_n&&(j=K())===_n){if(y=L.isBrace=!0,I=L.isGlob=!0,q=!0,s===!0)continue;break}if(U!==!0&&j===O_){if(y=L.isBrace=!0,I=L.isGlob=!0,q=!0,s===!0)continue;break}if(j===N_&&(ee--,ee===0)){U=!1,y=L.isBrace=!0,q=!0;break}}if(s===!0)continue;break}if(j===Aa){if(o.push(S),l.push(L),L={value:"",depth:0,isGlob:!1},q===!0)continue;if(W===_n&&S===f+1){f+=2;continue}w=S+1;continue}if(t.noext!==!0&&(j===x_||j===L_||j===dn||j===Ea||j===fn)===!0&&m()===hn){if(I=L.isGlob=!0,M=L.isExtglob=!0,q=!0,j===fn&&S===f&&(me=!0),s===!0){for(;R()!==!0&&(j=K());){if(j===Gt){ne=L.backslashes=!0,j=K();continue}if(j===wa){I=L.isGlob=!0,q=!0;break}}continue}break}if(j===dn){if(W===dn&&(N=L.isGlobstar=!0),I=L.isGlob=!0,q=!0,s===!0)continue;break}if(j===Ea){if(I=L.isGlob=!0,q=!0,s===!0)continue;break}if(j===j_){for(;R()!==!0&&(ue=K());){if(ue===Gt){ne=L.backslashes=!0,K();continue}if(ue===B_){x=L.isBracket=!0,I=L.isGlob=!0,q=!0;break}}if(s===!0)continue;break}if(t.nonegate!==!0&&j===fn&&S===f){re=L.negated=!0,f++;continue}if(t.noparen!==!0&&j===hn){if(I=L.isGlob=!0,s===!0){for(;R()!==!0&&(j=K());){if(j===hn){ne=L.backslashes=!0,j=K();continue}if(j===wa){q=!0;break}}continue}break}if(I===!0){if(q=!0,s===!0)continue;break}}t.noext===!0&&(M=!1,I=!1);let Y=_,de="",p="";f>0&&(de=_.slice(0,f),_=_.slice(f),w-=f),Y&&I===!0&&w>0?(Y=_.slice(0,w),p=_.slice(w)):I===!0?(Y="",p=_):Y=_,Y&&Y!==""&&Y!=="/"&&Y!==_&&Ra(Y.charCodeAt(Y.length-1))&&(Y=Y.slice(0,-1)),t.unescape===!0&&(p&&(p=va.removeBackslashes(p)),Y&&ne===!0&&(Y=va.removeBackslashes(Y)));let h={prefix:de,input:r,start:f,base:Y,glob:p,isBrace:y,isBracket:x,isGlob:I,isExtglob:M,isGlobstar:N,negated:re,negatedExtglob:me};if(t.tokens===!0&&(h.maxDepth=0,Ra(j)||l.push(L),h.tokens=l),t.parts===!0||t.tokens===!0){let ue;for(let Q=0;Q<o.length;Q++){let ke=ue?ue+1:f,O=o[Q],De=r.slice(ke,O);t.tokens&&(Q===0&&f!==0?(l[Q].isPrefix=!0,l[Q].value=de):l[Q].value=De,Ta(l[Q]),h.maxDepth+=l[Q].depth),(Q!==0||De!=="")&&c.push(De),ue=O}if(ue&&ue+1<r.length){let Q=r.slice(ue+1);c.push(Q),t.tokens&&(l[l.length-1].value=Q,Ta(l[l.length-1]),h.maxDepth+=l[l.length-1].depth)}h.slashes=o,h.parts=c}return h};Ca.exports=U_});var Fa=k((_b,Pa)=>{"use strict";var pr=$t(),Me=Wt(),{MAX_LENGTH:hr,POSIX_REGEX_SOURCE:H_,REGEX_NON_SPECIAL_CHARS:$_,REGEX_SPECIAL_CHARS_BACKREF:W_,REPLACEMENTS:Da}=pr,G_=(r,e)=>{if(typeof e.expandRange=="function")return e.expandRange(...r,e);r.sort();let t=`[${r.join("-")}]`;try{new RegExp(t)}catch{return r.map(s=>Me.escapeRegex(s)).join("..")}return t},At=(r,e)=>`Missing ${r}: "${e}" - use "\\\\${e}" to match literal characters`,Ia=(r,e)=>{if(typeof r!="string")throw new TypeError("Expected a string");r=Da[r]||r;let t={...e},n=typeof t.maxLength=="number"?Math.min(hr,t.maxLength):hr,s=r.length;if(s>n)throw new SyntaxError(`Input length: ${s}, exceeds maximum allowed length: ${n}`);let o={type:"bos",value:"",output:t.prepend||""},l=[o],c=t.capture?"":"?:",_=Me.isWindows(e),S=pr.globChars(_),f=pr.extglobChars(S),{DOT_LITERAL:w,PLUS_LITERAL:y,SLASH_LITERAL:x,ONE_CHAR:I,DOTS_SLASH:M,NO_DOT:N,NO_DOT_SLASH:U,NO_DOTS_SLASH:ne,QMARK:re,QMARK_NO_DOT:me,STAR:q,START_ANCHOR:ee}=S,W=P=>`(${c}(?:(?!${ee}${P.dot?M:w}).)*?)`,j=t.dot?"":N,L=t.dot?re:me,R=t.bash===!0?W(t):q;t.capture&&(R=`(${R})`),typeof t.noext=="boolean"&&(t.noextglob=t.noext);let m={input:r,index:-1,start:0,dot:t.dot===!0,consumed:"",output:"",prefix:"",backtrack:!1,negated:!1,brackets:0,braces:0,parens:0,quotes:0,globstar:!1,tokens:l};r=Me.removePrefix(r,m),s=r.length;let K=[],Y=[],de=[],p=o,h,ue=()=>m.index===s-1,Q=m.peek=(P=1)=>r[m.index+P],ke=m.advance=()=>r[++m.index]||"",O=()=>r.slice(m.index+1),De=(P="",ae=0)=>{m.consumed+=P,m.index+=ae},Ee=P=>{m.output+=P.output!=null?P.output:P.value,De(P.value)},Be=()=>{let P=1;for(;Q()==="!"&&(Q(2)!=="("||Q(3)==="?");)ke(),m.start++,P++;return P%2===0?!1:(m.negated=!0,m.start++,!0)},Pe=P=>{m[P]++,de.push(P)},Ue=P=>{m[P]--,de.pop()},b=P=>{if(p.type==="globstar"){let ae=m.braces>0&&(P.type==="comma"||P.type==="brace"),C=P.extglob===!0||K.length&&(P.type==="pipe"||P.type==="paren");P.type!=="slash"&&P.type!=="paren"&&!ae&&!C&&(m.output=m.output.slice(0,-p.output.length),p.type="star",p.value="*",p.output=R,m.output+=p.output)}if(K.length&&P.type!=="paren"&&(K[K.length-1].inner+=P.value),(P.value||P.output)&&Ee(P),p&&p.type==="text"&&P.type==="text"){p.value+=P.value,p.output=(p.output||"")+P.value;return}P.prev=p,l.push(P),p=P},X=(P,ae)=>{let C={...f[ae],conditions:1,inner:""};C.prev=p,C.parens=m.parens,C.output=m.output;let V=(t.capture?"(":"")+C.open;Pe("parens"),b({type:P,value:ae,output:m.output?"":I}),b({type:"paren",extglob:!0,value:ke(),output:V}),K.push(C)},Lt=P=>{let ae=P.close+(t.capture?")":""),C;if(P.type==="negate"){let V=R;P.inner&&P.inner.length>1&&P.inner.includes("/")&&(V=W(t)),(V!==R||ue()||/^\)+$/.test(O()))&&(ae=P.close=`)$))${V}`),P.inner.includes("*")&&(C=O())&&/^\.[^\\/.]+$/.test(C)&&(ae=P.close=`)${C})${V})`),P.prev.type==="bos"&&(m.negatedExtglob=!0)}b({type:"paren",extglob:!0,value:h,output:ae}),Ue("parens")};if(t.fastpaths!==!1&&!/(^[*!]|[/()[\]{}"])/.test(r)){let P=!1,ae=r.replace(W_,(C,V,oe,Se,ge,yt)=>Se==="\\"?(P=!0,C):Se==="?"?V?V+Se+(ge?re.repeat(ge.length):""):yt===0?L+(ge?re.repeat(ge.length):""):re.repeat(oe.length):Se==="."?w.repeat(oe.length):Se==="*"?V?V+Se+(ge?R:""):R:V?C:`\\${C}`);return P===!0&&(t.unescape===!0?ae=ae.replace(/\\/g,""):ae=ae.replace(/\\+/g,C=>C.length%2===0?"\\\\":C?"\\":"")),ae===r&&t.contains===!0?(m.output=r,m):(m.output=Me.wrapOutput(ae,m,e),m)}for(;!ue();){if(h=ke(),h==="\0")continue;if(h==="\\"){let C=Q();if(C==="/"&&t.bash!==!0||C==="."||C===";")continue;if(!C){h+="\\",b({type:"text",value:h});continue}let V=/^\\+/.exec(O()),oe=0;if(V&&V[0].length>2&&(oe=V[0].length,m.index+=oe,oe%2!==0&&(h+="\\")),t.unescape===!0?h=ke():h+=ke(),m.brackets===0){b({type:"text",value:h});continue}}if(m.brackets>0&&(h!=="]"||p.value==="["||p.value==="[^")){if(t.posix!==!1&&h===":"){let C=p.value.slice(1);if(C.includes("[")&&(p.posix=!0,C.includes(":"))){let V=p.value.lastIndexOf("["),oe=p.value.slice(0,V),Se=p.value.slice(V+2),ge=H_[Se];if(ge){p.value=oe+ge,m.backtrack=!0,ke(),!o.output&&l.indexOf(p)===1&&(o.output=I);continue}}}(h==="["&&Q()!==":"||h==="-"&&Q()==="]")&&(h=`\\${h}`),h==="]"&&(p.value==="["||p.value==="[^")&&(h=`\\${h}`),t.posix===!0&&h==="!"&&p.value==="["&&(h="^"),p.value+=h,Ee({value:h});continue}if(m.quotes===1&&h!=='"'){h=Me.escapeRegex(h),p.value+=h,Ee({value:h});continue}if(h==='"'){m.quotes=m.quotes===1?0:1,t.keepQuotes===!0&&b({type:"text",value:h});continue}if(h==="("){Pe("parens"),b({type:"paren",value:h});continue}if(h===")"){if(m.parens===0&&t.strictBrackets===!0)throw new SyntaxError(At("opening","("));let C=K[K.length-1];if(C&&m.parens===C.parens+1){Lt(K.pop());continue}b({type:"paren",value:h,output:m.parens?")":"\\)"}),Ue("parens");continue}if(h==="["){if(t.nobracket===!0||!O().includes("]")){if(t.nobracket!==!0&&t.strictBrackets===!0)throw new SyntaxError(At("closing","]"));h=`\\${h}`}else Pe("brackets");b({type:"bracket",value:h});continue}if(h==="]"){if(t.nobracket===!0||p&&p.type==="bracket"&&p.value.length===1){b({type:"text",value:h,output:`\\${h}`});continue}if(m.brackets===0){if(t.strictBrackets===!0)throw new SyntaxError(At("opening","["));b({type:"text",value:h,output:`\\${h}`});continue}Ue("brackets");let C=p.value.slice(1);if(p.posix!==!0&&C[0]==="^"&&!C.includes("/")&&(h=`/${h}`),p.value+=h,Ee({value:h}),t.literalBrackets===!1||Me.hasRegexChars(C))continue;let V=Me.escapeRegex(p.value);if(m.output=m.output.slice(0,-p.value.length),t.literalBrackets===!0){m.output+=V,p.value=V;continue}p.value=`(${c}${V}|${p.value})`,m.output+=p.value;continue}if(h==="{"&&t.nobrace!==!0){Pe("braces");let C={type:"brace",value:h,output:"(",outputIndex:m.output.length,tokensIndex:m.tokens.length};Y.push(C),b(C);continue}if(h==="}"){let C=Y[Y.length-1];if(t.nobrace===!0||!C){b({type:"text",value:h,output:h});continue}let V=")";if(C.dots===!0){let oe=l.slice(),Se=[];for(let ge=oe.length-1;ge>=0&&(l.pop(),oe[ge].type!=="brace");ge--)oe[ge].type!=="dots"&&Se.unshift(oe[ge].value);V=G_(Se,t),m.backtrack=!0}if(C.comma!==!0&&C.dots!==!0){let oe=m.output.slice(0,C.outputIndex),Se=m.tokens.slice(C.tokensIndex);C.value=C.output="\\{",h=V="\\}",m.output=oe;for(let ge of Se)m.output+=ge.output||ge.value}b({type:"brace",value:h,output:V}),Ue("braces"),Y.pop();continue}if(h==="|"){K.length>0&&K[K.length-1].conditions++,b({type:"text",value:h});continue}if(h===","){let C=h,V=Y[Y.length-1];V&&de[de.length-1]==="braces"&&(V.comma=!0,C="|"),b({type:"comma",value:h,output:C});continue}if(h==="/"){if(p.type==="dot"&&m.index===m.start+1){m.start=m.index+1,m.consumed="",m.output="",l.pop(),p=o;continue}b({type:"slash",value:h,output:x});continue}if(h==="."){if(m.braces>0&&p.type==="dot"){p.value==="."&&(p.output=w);let C=Y[Y.length-1];p.type="dots",p.output+=h,p.value+=h,C.dots=!0;continue}if(m.braces+m.parens===0&&p.type!=="bos"&&p.type!=="slash"){b({type:"text",value:h,output:w});continue}b({type:"dot",value:h,output:w});continue}if(h==="?"){if(!(p&&p.value==="(")&&t.noextglob!==!0&&Q()==="("&&Q(2)!=="?"){X("qmark",h);continue}if(p&&p.type==="paren"){let V=Q(),oe=h;if(V==="<"&&!Me.supportsLookbehinds())throw new Error("Node.js v10 or higher is required for regex lookbehinds");(p.value==="("&&!/[!=<:]/.test(V)||V==="<"&&!/<([!=]|\w+>)/.test(O()))&&(oe=`\\${h}`),b({type:"text",value:h,output:oe});continue}if(t.dot!==!0&&(p.type==="slash"||p.type==="bos")){b({type:"qmark",value:h,output:me});continue}b({type:"qmark",value:h,output:re});continue}if(h==="!"){if(t.noextglob!==!0&&Q()==="("&&(Q(2)!=="?"||!/[!=<:]/.test(Q(3)))){X("negate",h);continue}if(t.nonegate!==!0&&m.index===0){Be();continue}}if(h==="+"){if(t.noextglob!==!0&&Q()==="("&&Q(2)!=="?"){X("plus",h);continue}if(p&&p.value==="("||t.regex===!1){b({type:"plus",value:h,output:y});continue}if(p&&(p.type==="bracket"||p.type==="paren"||p.type==="brace")||m.parens>0){b({type:"plus",value:h});continue}b({type:"plus",value:y});continue}if(h==="@"){if(t.noextglob!==!0&&Q()==="("&&Q(2)!=="?"){b({type:"at",extglob:!0,value:h,output:""});continue}b({type:"text",value:h});continue}if(h!=="*"){(h==="$"||h==="^")&&(h=`\\${h}`);let C=$_.exec(O());C&&(h+=C[0],m.index+=C[0].length),b({type:"text",value:h});continue}if(p&&(p.type==="globstar"||p.star===!0)){p.type="star",p.star=!0,p.value+=h,p.output=R,m.backtrack=!0,m.globstar=!0,De(h);continue}let P=O();if(t.noextglob!==!0&&/^\([^?]/.test(P)){X("star",h);continue}if(p.type==="star"){if(t.noglobstar===!0){De(h);continue}let C=p.prev,V=C.prev,oe=C.type==="slash"||C.type==="bos",Se=V&&(V.type==="star"||V.type==="globstar");if(t.bash===!0&&(!oe||P[0]&&P[0]!=="/")){b({type:"star",value:h,output:""});continue}let ge=m.braces>0&&(C.type==="comma"||C.type==="brace"),yt=K.length&&(C.type==="pipe"||C.type==="paren");if(!oe&&C.type!=="paren"&&!ge&&!yt){b({type:"star",value:h,output:""});continue}for(;P.slice(0,3)==="/**";){let Ot=r[m.index+4];if(Ot&&Ot!=="/")break;P=P.slice(3),De("/**",3)}if(C.type==="bos"&&ue()){p.type="globstar",p.value+=h,p.output=W(t),m.output=p.output,m.globstar=!0,De(h);continue}if(C.type==="slash"&&C.prev.type!=="bos"&&!Se&&ue()){m.output=m.output.slice(0,-(C.output+p.output).length),C.output=`(?:${C.output}`,p.type="globstar",p.output=W(t)+(t.strictSlashes?")":"|$)"),p.value+=h,m.globstar=!0,m.output+=C.output+p.output,De(h);continue}if(C.type==="slash"&&C.prev.type!=="bos"&&P[0]==="/"){let Ot=P[1]!==void 0?"|$":"";m.output=m.output.slice(0,-(C.output+p.output).length),C.output=`(?:${C.output}`,p.type="globstar",p.output=`${W(t)}${x}|${x}${Ot})`,p.value+=h,m.output+=C.output+p.output,m.globstar=!0,De(h+ke()),b({type:"slash",value:"/",output:""});continue}if(C.type==="bos"&&P[0]==="/"){p.type="globstar",p.value+=h,p.output=`(?:^|${x}|${W(t)}${x})`,m.output=p.output,m.globstar=!0,De(h+ke()),b({type:"slash",value:"/",output:""});continue}m.output=m.output.slice(0,-p.output.length),p.type="globstar",p.output=W(t),p.value+=h,m.output+=p.output,m.globstar=!0,De(h);continue}let ae={type:"star",value:h,output:R};if(t.bash===!0){ae.output=".*?",(p.type==="bos"||p.type==="slash")&&(ae.output=j+ae.output),b(ae);continue}if(p&&(p.type==="bracket"||p.type==="paren")&&t.regex===!0){ae.output=h,b(ae);continue}(m.index===m.start||p.type==="slash"||p.type==="dot")&&(p.type==="dot"?(m.output+=U,p.output+=U):t.dot===!0?(m.output+=ne,p.output+=ne):(m.output+=j,p.output+=j),Q()!=="*"&&(m.output+=I,p.output+=I)),b(ae)}for(;m.brackets>0;){if(t.strictBrackets===!0)throw new SyntaxError(At("closing","]"));m.output=Me.escapeLast(m.output,"["),Ue("brackets")}for(;m.parens>0;){if(t.strictBrackets===!0)throw new SyntaxError(At("closing",")"));m.output=Me.escapeLast(m.output,"("),Ue("parens")}for(;m.braces>0;){if(t.strictBrackets===!0)throw new SyntaxError(At("closing","}"));m.output=Me.escapeLast(m.output,"{"),Ue("braces")}if(t.strictSlashes!==!0&&(p.type==="star"||p.type==="bracket")&&b({type:"maybe_slash",value:"",output:`${x}?`}),m.backtrack===!0){m.output="";for(let P of m.tokens)m.output+=P.output!=null?P.output:P.value,P.suffix&&(m.output+=P.suffix)}return m};Ia.fastpaths=(r,e)=>{let t={...e},n=typeof t.maxLength=="number"?Math.min(hr,t.maxLength):hr,s=r.length;if(s>n)throw new SyntaxError(`Input length: ${s}, exceeds maximum allowed length: ${n}`);r=Da[r]||r;let o=Me.isWindows(e),{DOT_LITERAL:l,SLASH_LITERAL:c,ONE_CHAR:_,DOTS_SLASH:S,NO_DOT:f,NO_DOTS:w,NO_DOTS_SLASH:y,STAR:x,START_ANCHOR:I}=pr.globChars(o),M=t.dot?w:f,N=t.dot?y:f,U=t.capture?"":"?:",ne={negated:!1,prefix:""},re=t.bash===!0?".*?":x;t.capture&&(re=`(${re})`);let me=j=>j.noglobstar===!0?re:`(${U}(?:(?!${I}${j.dot?S:l}).)*?)`,q=j=>{switch(j){case"*":return`${M}${_}${re}`;case".*":return`${l}${_}${re}`;case"*.*":return`${M}${re}${l}${_}${re}`;case"*/*":return`${M}${re}${c}${_}${N}${re}`;case"**":return M+me(t);case"**/*":return`(?:${M}${me(t)}${c})?${N}${_}${re}`;case"**/*.*":return`(?:${M}${me(t)}${c})?${N}${re}${l}${_}${re}`;case"**/.*":return`(?:${M}${me(t)}${c})?${l}${_}${re}`;default:{let L=/^(.*?)\.(\w+)$/.exec(j);if(!L)return;let R=q(L[1]);return R?R+l+L[2]:void 0}}},ee=Me.removePrefix(r,ne),W=q(ee);return W&&t.strictSlashes!==!0&&(W+=`${c}?`),W};Pa.exports=Ia});var La=k((fb,Ma)=>{"use strict";var q_=require("path"),Y_=ka(),mn=Fa(),gn=Wt(),V_=$t(),z_=r=>r&&typeof r=="object"&&!Array.isArray(r),ye=(r,e,t=!1)=>{if(Array.isArray(r)){let f=r.map(y=>ye(y,e,t));return y=>{for(let x of f){let I=x(y);if(I)return I}return!1}}let n=z_(r)&&r.tokens&&r.input;if(r===""||typeof r!="string"&&!n)throw new TypeError("Expected pattern to be a non-empty string");let s=e||{},o=gn.isWindows(e),l=n?ye.compileRe(r,e):ye.makeRe(r,e,!1,!0),c=l.state;delete l.state;let _=()=>!1;if(s.ignore){let f={...e,ignore:null,onMatch:null,onResult:null};_=ye(s.ignore,f,t)}let S=(f,w=!1)=>{let{isMatch:y,match:x,output:I}=ye.test(f,l,e,{glob:r,posix:o}),M={glob:r,state:c,regex:l,posix:o,input:f,output:I,match:x,isMatch:y};return typeof s.onResult=="function"&&s.onResult(M),y===!1?(M.isMatch=!1,w?M:!1):_(f)?(typeof s.onIgnore=="function"&&s.onIgnore(M),M.isMatch=!1,w?M:!1):(typeof s.onMatch=="function"&&s.onMatch(M),w?M:!0)};return t&&(S.state=c),S};ye.test=(r,e,t,{glob:n,posix:s}={})=>{if(typeof r!="string")throw new TypeError("Expected input to be a string");if(r==="")return{isMatch:!1,output:""};let o=t||{},l=o.format||(s?gn.toPosixSlashes:null),c=r===n,_=c&&l?l(r):r;return c===!1&&(_=l?l(r):r,c=_===n),(c===!1||o.capture===!0)&&(o.matchBase===!0||o.basename===!0?c=ye.matchBase(r,e,t,s):c=e.exec(_)),{isMatch:Boolean(c),match:c,output:_}};ye.matchBase=(r,e,t,n=gn.isWindows(t))=>(e instanceof RegExp?e:ye.makeRe(e,t)).test(q_.basename(r));ye.isMatch=(r,e,t)=>ye(e,t)(r);ye.parse=(r,e)=>Array.isArray(r)?r.map(t=>ye.parse(t,e)):mn(r,{...e,fastpaths:!1});ye.scan=(r,e)=>Y_(r,e);ye.compileRe=(r,e,t=!1,n=!1)=>{if(t===!0)return r.output;let s=e||{},o=s.contains?"":"^",l=s.contains?"":"$",c=`${o}(?:${r.output})${l}`;r&&r.negated===!0&&(c=`^(?!${c}).*$`);let _=ye.toRegex(c,e);return n===!0&&(_.state=r),_};ye.makeRe=(r,e={},t=!1,n=!1)=>{if(!r||typeof r!="string")throw new TypeError("Expected a non-empty string");let s={negated:!1,fastpaths:!0};return e.fastpaths!==!1&&(r[0]==="."||r[0]==="*")&&(s.output=mn.fastpaths(r,e)),s.output||(s=mn(r,e)),ye.compileRe(s,e,t,n)};ye.toRegex=(r,e)=>{try{let t=e||{};return new RegExp(r,t.flags||(t.nocase?"i":""))}catch(t){if(e&&e.debug===!0)throw t;return/$^/}};ye.constants=V_;Ma.exports=ye});var ja=k((pb,Oa)=>{"use strict";Oa.exports=La()});var Ha=k((hb,Ua)=>{"use strict";var Na=require("util"),Ba=ha(),qe=ja(),bn=Wt(),xa=r=>r===""||r==="./",pe=(r,e,t)=>{e=[].concat(e),r=[].concat(r);let n=new Set,s=new Set,o=new Set,l=0,c=f=>{o.add(f.output),t&&t.onResult&&t.onResult(f)};for(let f=0;f<e.length;f++){let w=qe(String(e[f]),{...t,onResult:c},!0),y=w.state.negated||w.state.negatedExtglob;y&&l++;for(let x of r){let I=w(x,!0);!(y?!I.isMatch:I.isMatch)||(y?n.add(I.output):(n.delete(I.output),s.add(I.output)))}}let S=(l===e.length?[...o]:[...s]).filter(f=>!n.has(f));if(t&&S.length===0){if(t.failglob===!0)throw new Error(`No matches found for "${e.join(", ")}"`);if(t.nonull===!0||t.nullglob===!0)return t.unescape?e.map(f=>f.replace(/\\/g,"")):e}return S};pe.match=pe;pe.matcher=(r,e)=>qe(r,e);pe.isMatch=(r,e,t)=>qe(e,t)(r);pe.any=pe.isMatch;pe.not=(r,e,t={})=>{e=[].concat(e).map(String);let n=new Set,s=[],l=pe(r,e,{...t,onResult:c=>{t.onResult&&t.onResult(c),s.push(c.output)}});for(let c of s)l.includes(c)||n.add(c);return[...n]};pe.contains=(r,e,t)=>{if(typeof r!="string")throw new TypeError(`Expected a string: "${Na.inspect(r)}"`);if(Array.isArray(e))return e.some(n=>pe.contains(r,n,t));if(typeof e=="string"){if(xa(r)||xa(e))return!1;if(r.includes(e)||r.startsWith("./")&&r.slice(2).includes(e))return!0}return pe.isMatch(r,e,{...t,contains:!0})};pe.matchKeys=(r,e,t)=>{if(!bn.isObject(r))throw new TypeError("Expected the first argument to be an object");let n=pe(Object.keys(r),e,t),s={};for(let o of n)s[o]=r[o];return s};pe.some=(r,e,t)=>{let n=[].concat(r);for(let s of[].concat(e)){let o=qe(String(s),t);if(n.some(l=>o(l)))return!0}return!1};pe.every=(r,e,t)=>{let n=[].concat(r);for(let s of[].concat(e)){let o=qe(String(s),t);if(!n.every(l=>o(l)))return!1}return!0};pe.all=(r,e,t)=>{if(typeof r!="string")throw new TypeError(`Expected a string: "${Na.inspect(r)}"`);return[].concat(e).every(n=>qe(n,t)(r))};pe.capture=(r,e,t)=>{let n=bn.isWindows(t),o=qe.makeRe(String(r),{...t,capture:!0}).exec(n?bn.toPosixSlashes(e):e);if(o)return o.slice(1).map(l=>l===void 0?"":l)};pe.makeRe=(...r)=>qe.makeRe(...r);pe.scan=(...r)=>qe.scan(...r);pe.parse=(r,e)=>{let t=[];for(let n of[].concat(r||[]))for(let s of Ba(String(n),e))t.push(qe.parse(s,e));return t};pe.braces=(r,e)=>{if(typeof r!="string")throw new TypeError("Expected a string");return e&&e.nobrace===!0||!/\{.*\}/.test(r)?[r]:Ba(r,e)};pe.braceExpand=(r,e)=>{if(typeof r!="string")throw new TypeError("Expected a string");return pe.braces(r,{...e,expand:!0})};Ua.exports=pe});var Ka=k(G=>{"use strict";Object.defineProperty(G,"__esModule",{value:!0});G.matchAny=G.convertPatternsToRe=G.makeRe=G.getPatternParts=G.expandBraceExpansion=G.expandPatternsWithBraceExpansion=G.isAffectDepthOfReadingPattern=G.endsWithSlashGlobStar=G.hasGlobStar=G.getBaseDirectory=G.isPatternRelatedToParentDirectory=G.getPatternsOutsideCurrentDirectory=G.getPatternsInsideCurrentDirectory=G.getPositivePatterns=G.getNegativePatterns=G.isPositivePattern=G.isNegativePattern=G.convertToNegativePattern=G.convertToPositivePattern=G.isDynamicPattern=G.isStaticPattern=void 0;var K_=require("path"),Q_=Fs(),yn=Ha(),$a="**",X_="\\",J_=/[*?]|^!/,Z_=/\[[^[]*]/,ef=/(?:^|[^!*+?@])\([^(]*\|[^|]*\)/,tf=/[!*+?@]\([^(]*\)/,rf=/,|\.\./;function Wa(r,e={}){return!Ga(r,e)}G.isStaticPattern=Wa;function Ga(r,e={}){return r===""?!1:!!(e.caseSensitiveMatch===!1||r.includes(X_)||J_.test(r)||Z_.test(r)||ef.test(r)||e.extglob!==!1&&tf.test(r)||e.braceExpansion!==!1&&nf(r))}G.isDynamicPattern=Ga;function nf(r){let e=r.indexOf("{");if(e===-1)return!1;let t=r.indexOf("}",e+1);if(t===-1)return!1;let n=r.slice(e,t);return rf.test(n)}function sf(r){return mr(r)?r.slice(1):r}G.convertToPositivePattern=sf;function af(r){return"!"+r}G.convertToNegativePattern=af;function mr(r){return r.startsWith("!")&&r[1]!=="("}G.isNegativePattern=mr;function qa(r){return!mr(r)}G.isPositivePattern=qa;function of(r){return r.filter(mr)}G.getNegativePatterns=of;function uf(r){return r.filter(qa)}G.getPositivePatterns=uf;function lf(r){return r.filter(e=>!Sn(e))}G.getPatternsInsideCurrentDirectory=lf;function cf(r){return r.filter(Sn)}G.getPatternsOutsideCurrentDirectory=cf;function Sn(r){return r.startsWith("..")||r.startsWith("./..")}G.isPatternRelatedToParentDirectory=Sn;function df(r){return Q_(r,{flipBackslashes:!1})}G.getBaseDirectory=df;function _f(r){return r.includes($a)}G.hasGlobStar=_f;function Ya(r){return r.endsWith("/"+$a)}G.endsWithSlashGlobStar=Ya;function ff(r){let e=K_.basename(r);return Ya(r)||Wa(e)}G.isAffectDepthOfReadingPattern=ff;function pf(r){return r.reduce((e,t)=>e.concat(Va(t)),[])}G.expandPatternsWithBraceExpansion=pf;function Va(r){return yn.braces(r,{expand:!0,nodupes:!0})}G.expandBraceExpansion=Va;function hf(r,e){let{parts:t}=yn.scan(r,Object.assign(Object.assign({},e),{parts:!0}));return t.length===0&&(t=[r]),t[0].startsWith("/")&&(t[0]=t[0].slice(1),t.unshift("")),t}G.getPatternParts=hf;function za(r,e){return yn.makeRe(r,e)}G.makeRe=za;function mf(r,e){return r.map(t=>za(t,e))}G.convertPatternsToRe=mf;function gf(r,e){return e.some(t=>t.test(r))}G.matchAny=gf});var Za=k((gb,Ja)=>{"use strict";var bf=require("stream"),Qa=bf.PassThrough,yf=Array.prototype.slice;Ja.exports=Sf;function Sf(){let r=[],e=yf.call(arguments),t=!1,n=e[e.length-1];n&&!Array.isArray(n)&&n.pipe==null?e.pop():n={};let s=n.end!==!1,o=n.pipeError===!0;n.objectMode==null&&(n.objectMode=!0),n.highWaterMark==null&&(n.highWaterMark=64*1024);let l=Qa(n);function c(){for(let f=0,w=arguments.length;f<w;f++)r.push(Xa(arguments[f],n));return _(),this}function _(){if(t)return;t=!0;let f=r.shift();if(!f){process.nextTick(S);return}Array.isArray(f)||(f=[f]);let w=f.length+1;function y(){--w>0||(t=!1,_())}function x(I){function M(){I.removeListener("merge2UnpipeEnd",M),I.removeListener("end",M),o&&I.removeListener("error",N),y()}function N(U){l.emit("error",U)}if(I._readableState.endEmitted)return y();I.on("merge2UnpipeEnd",M),I.on("end",M),o&&I.on("error",N),I.pipe(l,{end:!1}),I.resume()}for(let I=0;I<f.length;I++)x(f[I]);y()}function S(){t=!1,l.emit("queueDrain"),s&&l.end()}return l.setMaxListeners(0),l.add=c,l.on("unpipe",function(f){f.emit("merge2UnpipeEnd")}),e.length&&c.apply(null,e),l}function Xa(r,e){if(Array.isArray(r))for(let t=0,n=r.length;t<n;t++)r[t]=Xa(r[t],e);else{if(!r._readableState&&r.pipe&&(r=r.pipe(Qa(e))),!r._readableState||!r.pause||!r.pipe)throw new Error("Only readable stream can be merged.");r.pause()}return r}});var to=k(gr=>{"use strict";Object.defineProperty(gr,"__esModule",{value:!0});gr.merge=void 0;var vf=Za();function Ef(r){let e=vf(r);return r.forEach(t=>{t.once("error",n=>e.emit("error",n))}),e.once("close",()=>eo(r)),e.once("end",()=>eo(r)),e}gr.merge=Ef;function eo(r){r.forEach(e=>e.emit("close"))}});var ro=k(Ct=>{"use strict";Object.defineProperty(Ct,"__esModule",{value:!0});Ct.isEmpty=Ct.isString=void 0;function wf(r){return typeof r=="string"}Ct.isString=wf;function Rf(r){return r===""}Ct.isEmpty=Rf});var Je=k(Ae=>{"use strict";Object.defineProperty(Ae,"__esModule",{value:!0});Ae.string=Ae.stream=Ae.pattern=Ae.path=Ae.fs=Ae.errno=Ae.array=void 0;var Tf=Es();Ae.array=Tf;var Af=ws();Ae.errno=Af;var Cf=Rs();Ae.fs=Cf;var kf=Ts();Ae.path=kf;var Df=Ka();Ae.pattern=Df;var If=to();Ae.stream=If;var Pf=ro();Ae.string=Pf});var so=k(Ce=>{"use strict";Object.defineProperty(Ce,"__esModule",{value:!0});Ce.convertPatternGroupToTask=Ce.convertPatternGroupsToTasks=Ce.groupPatternsByBaseDirectory=Ce.getNegativePatternsAsPositive=Ce.getPositivePatterns=Ce.convertPatternsToTasks=Ce.generate=void 0;var Ze=Je();function Ff(r,e){let t=no(r),n=io(r,e.ignore),s=t.filter(_=>Ze.pattern.isStaticPattern(_,e)),o=t.filter(_=>Ze.pattern.isDynamicPattern(_,e)),l=vn(s,n,!1),c=vn(o,n,!0);return l.concat(c)}Ce.generate=Ff;function vn(r,e,t){let n=[],s=Ze.pattern.getPatternsOutsideCurrentDirectory(r),o=Ze.pattern.getPatternsInsideCurrentDirectory(r),l=En(s),c=En(o);return n.push(...wn(l,e,t)),"."in c?n.push(Rn(".",o,e,t)):n.push(...wn(c,e,t)),n}Ce.convertPatternsToTasks=vn;function no(r){return Ze.pattern.getPositivePatterns(r)}Ce.getPositivePatterns=no;function io(r,e){return Ze.pattern.getNegativePatterns(r).concat(e).map(Ze.pattern.convertToPositivePattern)}Ce.getNegativePatternsAsPositive=io;function En(r){let e={};return r.reduce((t,n)=>{let s=Ze.pattern.getBaseDirectory(n);return s in t?t[s].push(n):t[s]=[n],t},e)}Ce.groupPatternsByBaseDirectory=En;function wn(r,e,t){return Object.keys(r).map(n=>Rn(n,r[n],e,t))}Ce.convertPatternGroupsToTasks=wn;function Rn(r,e,t,n){return{dynamic:n,positive:e,negative:t,base:r,patterns:[].concat(e,t.map(Ze.pattern.convertToNegativePattern))}}Ce.convertPatternGroupToTask=Rn});var oo=k(kt=>{"use strict";Object.defineProperty(kt,"__esModule",{value:!0});kt.removeDuplicateSlashes=kt.transform=void 0;var Mf=/(?!^)\/{2,}/g;function Lf(r){return r.map(e=>ao(e))}kt.transform=Lf;function ao(r){return r.replace(Mf,"/")}kt.removeDuplicateSlashes=ao});var lo=k(br=>{"use strict";Object.defineProperty(br,"__esModule",{value:!0});br.read=void 0;function Of(r,e,t){e.fs.lstat(r,(n,s)=>{if(n!==null){uo(t,n);return}if(!s.isSymbolicLink()||!e.followSymbolicLink){Tn(t,s);return}e.fs.stat(r,(o,l)=>{if(o!==null){if(e.throwErrorOnBrokenSymbolicLink){uo(t,o);return}Tn(t,s);return}e.markSymbolicLink&&(l.isSymbolicLink=()=>!0),Tn(t,l)})})}br.read=Of;function uo(r,e){r(e)}function Tn(r,e){r(null,e)}});var co=k(yr=>{"use strict";Object.defineProperty(yr,"__esModule",{value:!0});yr.read=void 0;function jf(r,e){let t=e.fs.lstatSync(r);if(!t.isSymbolicLink()||!e.followSymbolicLink)return t;try{let n=e.fs.statSync(r);return e.markSymbolicLink&&(n.isSymbolicLink=()=>!0),n}catch(n){if(!e.throwErrorOnBrokenSymbolicLink)return t;throw n}}yr.read=jf});var _o=k(nt=>{"use strict";Object.defineProperty(nt,"__esModule",{value:!0});nt.createFileSystemAdapter=nt.FILE_SYSTEM_ADAPTER=void 0;var Sr=require("fs");nt.FILE_SYSTEM_ADAPTER={lstat:Sr.lstat,stat:Sr.stat,lstatSync:Sr.lstatSync,statSync:Sr.statSync};function xf(r){return r===void 0?nt.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},nt.FILE_SYSTEM_ADAPTER),r)}nt.createFileSystemAdapter=xf});var fo=k(Cn=>{"use strict";Object.defineProperty(Cn,"__esModule",{value:!0});var Nf=_o(),An=class{constructor(e={}){this._options=e,this.followSymbolicLink=this._getValue(this._options.followSymbolicLink,!0),this.fs=Nf.createFileSystemAdapter(this._options.fs),this.markSymbolicLink=this._getValue(this._options.markSymbolicLink,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0)}_getValue(e,t){return e??t}};Cn.default=An});var mt=k(it=>{"use strict";Object.defineProperty(it,"__esModule",{value:!0});it.statSync=it.stat=it.Settings=void 0;var po=lo(),Bf=co(),kn=fo();it.Settings=kn.default;function Uf(r,e,t){if(typeof e=="function"){po.read(r,Dn(),e);return}po.read(r,Dn(e),t)}it.stat=Uf;function Hf(r,e){let t=Dn(e);return Bf.read(r,t)}it.statSync=Hf;function Dn(r={}){return r instanceof kn.default?r:new kn.default(r)}});var go=k((kb,mo)=>{var ho;mo.exports=typeof queueMicrotask=="function"?queueMicrotask.bind(typeof window<"u"?window:global):r=>(ho||(ho=Promise.resolve())).then(r).catch(e=>setTimeout(()=>{throw e},0))});var yo=k((Db,bo)=>{bo.exports=Wf;var $f=go();function Wf(r,e){let t,n,s,o=!0;Array.isArray(r)?(t=[],n=r.length):(s=Object.keys(r),t={},n=s.length);function l(_){function S(){e&&e(_,t),e=null}o?$f(S):S()}function c(_,S,f){t[_]=f,(--n===0||S)&&l(S)}n?s?s.forEach(function(_){r[_](function(S,f){c(_,S,f)})}):r.forEach(function(_,S){_(function(f,w){c(S,f,w)})}):l(null),o=!1}});var In=k(Er=>{"use strict";Object.defineProperty(Er,"__esModule",{value:!0});Er.IS_SUPPORT_READDIR_WITH_FILE_TYPES=void 0;var vr=process.versions.node.split(".");if(vr[0]===void 0||vr[1]===void 0)throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);var So=Number.parseInt(vr[0],10),Gf=Number.parseInt(vr[1],10),vo=10,qf=10,Yf=So>vo,Vf=So===vo&&Gf>=qf;Er.IS_SUPPORT_READDIR_WITH_FILE_TYPES=Yf||Vf});var Eo=k(wr=>{"use strict";Object.defineProperty(wr,"__esModule",{value:!0});wr.createDirentFromStats=void 0;var Pn=class{constructor(e,t){this.name=e,this.isBlockDevice=t.isBlockDevice.bind(t),this.isCharacterDevice=t.isCharacterDevice.bind(t),this.isDirectory=t.isDirectory.bind(t),this.isFIFO=t.isFIFO.bind(t),this.isFile=t.isFile.bind(t),this.isSocket=t.isSocket.bind(t),this.isSymbolicLink=t.isSymbolicLink.bind(t)}};function zf(r,e){return new Pn(r,e)}wr.createDirentFromStats=zf});var Fn=k(Rr=>{"use strict";Object.defineProperty(Rr,"__esModule",{value:!0});Rr.fs=void 0;var Kf=Eo();Rr.fs=Kf});var Mn=k(Tr=>{"use strict";Object.defineProperty(Tr,"__esModule",{value:!0});Tr.joinPathSegments=void 0;function Qf(r,e,t){return r.endsWith(t)?r+e:r+t+e}Tr.joinPathSegments=Qf});var ko=k(st=>{"use strict";Object.defineProperty(st,"__esModule",{value:!0});st.readdir=st.readdirWithFileTypes=st.read=void 0;var Xf=mt(),wo=yo(),Jf=In(),Ro=Fn(),To=Mn();function Zf(r,e,t){if(!e.stats&&Jf.IS_SUPPORT_READDIR_WITH_FILE_TYPES){Ao(r,e,t);return}Co(r,e,t)}st.read=Zf;function Ao(r,e,t){e.fs.readdir(r,{withFileTypes:!0},(n,s)=>{if(n!==null){Ar(t,n);return}let o=s.map(c=>({dirent:c,name:c.name,path:To.joinPathSegments(r,c.name,e.pathSegmentSeparator)}));if(!e.followSymbolicLinks){Ln(t,o);return}let l=o.map(c=>ep(c,e));wo(l,(c,_)=>{if(c!==null){Ar(t,c);return}Ln(t,_)})})}st.readdirWithFileTypes=Ao;function ep(r,e){return t=>{if(!r.dirent.isSymbolicLink()){t(null,r);return}e.fs.stat(r.path,(n,s)=>{if(n!==null){if(e.throwErrorOnBrokenSymbolicLink){t(n);return}t(null,r);return}r.dirent=Ro.fs.createDirentFromStats(r.name,s),t(null,r)})}}function Co(r,e,t){e.fs.readdir(r,(n,s)=>{if(n!==null){Ar(t,n);return}let o=s.map(l=>{let c=To.joinPathSegments(r,l,e.pathSegmentSeparator);return _=>{Xf.stat(c,e.fsStatSettings,(S,f)=>{if(S!==null){_(S);return}let w={name:l,path:c,dirent:Ro.fs.createDirentFromStats(l,f)};e.stats&&(w.stats=f),_(null,w)})}});wo(o,(l,c)=>{if(l!==null){Ar(t,l);return}Ln(t,c)})})}st.readdir=Co;function Ar(r,e){r(e)}function Ln(r,e){r(null,e)}});var Mo=k(at=>{"use strict";Object.defineProperty(at,"__esModule",{value:!0});at.readdir=at.readdirWithFileTypes=at.read=void 0;var tp=mt(),rp=In(),Do=Fn(),Io=Mn();function np(r,e){return!e.stats&&rp.IS_SUPPORT_READDIR_WITH_FILE_TYPES?Po(r,e):Fo(r,e)}at.read=np;function Po(r,e){return e.fs.readdirSync(r,{withFileTypes:!0}).map(n=>{let s={dirent:n,name:n.name,path:Io.joinPathSegments(r,n.name,e.pathSegmentSeparator)};if(s.dirent.isSymbolicLink()&&e.followSymbolicLinks)try{let o=e.fs.statSync(s.path);s.dirent=Do.fs.createDirentFromStats(s.name,o)}catch(o){if(e.throwErrorOnBrokenSymbolicLink)throw o}return s})}at.readdirWithFileTypes=Po;function Fo(r,e){return e.fs.readdirSync(r).map(n=>{let s=Io.joinPathSegments(r,n,e.pathSegmentSeparator),o=tp.statSync(s,e.fsStatSettings),l={name:n,path:s,dirent:Do.fs.createDirentFromStats(n,o)};return e.stats&&(l.stats=o),l})}at.readdir=Fo});var Lo=k(ot=>{"use strict";Object.defineProperty(ot,"__esModule",{value:!0});ot.createFileSystemAdapter=ot.FILE_SYSTEM_ADAPTER=void 0;var Dt=require("fs");ot.FILE_SYSTEM_ADAPTER={lstat:Dt.lstat,stat:Dt.stat,lstatSync:Dt.lstatSync,statSync:Dt.statSync,readdir:Dt.readdir,readdirSync:Dt.readdirSync};function ip(r){return r===void 0?ot.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},ot.FILE_SYSTEM_ADAPTER),r)}ot.createFileSystemAdapter=ip});var Oo=k(jn=>{"use strict";Object.defineProperty(jn,"__esModule",{value:!0});var sp=require("path"),ap=mt(),op=Lo(),On=class{constructor(e={}){this._options=e,this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!1),this.fs=op.createFileSystemAdapter(this._options.fs),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,sp.sep),this.stats=this._getValue(this._options.stats,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0),this.fsStatSettings=new ap.Settings({followSymbolicLink:this.followSymbolicLinks,fs:this.fs,throwErrorOnBrokenSymbolicLink:this.throwErrorOnBrokenSymbolicLink})}_getValue(e,t){return e??t}};jn.default=On});var Cr=k(ut=>{"use strict";Object.defineProperty(ut,"__esModule",{value:!0});ut.Settings=ut.scandirSync=ut.scandir=void 0;var jo=ko(),up=Mo(),xn=Oo();ut.Settings=xn.default;function lp(r,e,t){if(typeof e=="function"){jo.read(r,Nn(),e);return}jo.read(r,Nn(e),t)}ut.scandir=lp;function cp(r,e){let t=Nn(e);return up.read(r,t)}ut.scandirSync=cp;function Nn(r={}){return r instanceof xn.default?r:new xn.default(r)}});var No=k((Bb,xo)=>{"use strict";function dp(r){var e=new r,t=e;function n(){var o=e;return o.next?e=o.next:(e=new r,t=e),o.next=null,o}function s(o){t.next=o,t=o}return{get:n,release:s}}xo.exports=dp});var Uo=k((Ub,Bn)=>{"use strict";var _p=No();function Bo(r,e,t){if(typeof r=="function"&&(t=e,e=r,r=null),t<1)throw new Error("fastqueue concurrency must be greater than 1");var n=_p(fp),s=null,o=null,l=0,c=null,_={push:M,drain:Ne,saturated:Ne,pause:f,paused:!1,concurrency:t,running:S,resume:x,idle:I,length:w,getQueue:y,unshift:N,empty:Ne,kill:ne,killAndDrain:re,error:me};return _;function S(){return l}function f(){_.paused=!0}function w(){for(var q=s,ee=0;q;)q=q.next,ee++;return ee}function y(){for(var q=s,ee=[];q;)ee.push(q.value),q=q.next;return ee}function x(){if(!!_.paused){_.paused=!1;for(var q=0;q<_.concurrency;q++)l++,U()}}function I(){return l===0&&_.length()===0}function M(q,ee){var W=n.get();W.context=r,W.release=U,W.value=q,W.callback=ee||Ne,W.errorHandler=c,l===_.concurrency||_.paused?o?(o.next=W,o=W):(s=W,o=W,_.saturated()):(l++,e.call(r,W.value,W.worked))}function N(q,ee){var W=n.get();W.context=r,W.release=U,W.value=q,W.callback=ee||Ne,l===_.concurrency||_.paused?s?(W.next=s,s=W):(s=W,o=W,_.saturated()):(l++,e.call(r,W.value,W.worked))}function U(q){q&&n.release(q);var ee=s;ee?_.paused?l--:(o===s&&(o=null),s=ee.next,ee.next=null,e.call(r,ee.value,ee.worked),o===null&&_.empty()):--l===0&&_.drain()}function ne(){s=null,o=null,_.drain=Ne}function re(){s=null,o=null,_.drain(),_.drain=Ne}function me(q){c=q}}function Ne(){}function fp(){this.value=null,this.callback=Ne,this.next=null,this.release=Ne,this.context=null,this.errorHandler=null;var r=this;this.worked=function(t,n){var s=r.callback,o=r.errorHandler,l=r.value;r.value=null,r.callback=Ne,r.errorHandler&&o(t,l),s.call(r.context,t,n),r.release(r)}}function pp(r,e,t){typeof r=="function"&&(t=e,e=r,r=null);function n(f,w){e.call(this,f).then(function(y){w(null,y)},w)}var s=Bo(r,n,t),o=s.push,l=s.unshift;return s.push=c,s.unshift=_,s.drained=S,s;function c(f){var w=new Promise(function(y,x){o(f,function(I,M){if(I){x(I);return}y(M)})});return w.catch(Ne),w}function _(f){var w=new Promise(function(y,x){l(f,function(I,M){if(I){x(I);return}y(M)})});return w.catch(Ne),w}function S(){var f=s.drain,w=new Promise(function(y){s.drain=function(){f(),y()}});return w}}Bn.exports=Bo;Bn.exports.promise=pp});var kr=k(Ye=>{"use strict";Object.defineProperty(Ye,"__esModule",{value:!0});Ye.joinPathSegments=Ye.replacePathSegmentSeparator=Ye.isAppliedFilter=Ye.isFatalError=void 0;function hp(r,e){return r.errorFilter===null?!0:!r.errorFilter(e)}Ye.isFatalError=hp;function mp(r,e){return r===null||r(e)}Ye.isAppliedFilter=mp;function gp(r,e){return r.split(/[/\\]/).join(e)}Ye.replacePathSegmentSeparator=gp;function bp(r,e,t){return r===""?e:r.endsWith(t)?r+e:r+t+e}Ye.joinPathSegments=bp});var $n=k(Hn=>{"use strict";Object.defineProperty(Hn,"__esModule",{value:!0});var yp=kr(),Un=class{constructor(e,t){this._root=e,this._settings=t,this._root=yp.replacePathSegmentSeparator(e,t.pathSegmentSeparator)}};Hn.default=Un});var qn=k(Gn=>{"use strict";Object.defineProperty(Gn,"__esModule",{value:!0});var Sp=require("events"),vp=Cr(),Ep=Uo(),Dr=kr(),wp=$n(),Wn=class extends wp.default{constructor(e,t){super(e,t),this._settings=t,this._scandir=vp.scandir,this._emitter=new Sp.EventEmitter,this._queue=Ep(this._worker.bind(this),this._settings.concurrency),this._isFatalError=!1,this._isDestroyed=!1,this._queue.drain=()=>{this._isFatalError||this._emitter.emit("end")}}read(){return this._isFatalError=!1,this._isDestroyed=!1,setImmediate(()=>{this._pushToQueue(this._root,this._settings.basePath)}),this._emitter}get isDestroyed(){return this._isDestroyed}destroy(){if(this._isDestroyed)throw new Error("The reader is already destroyed");this._isDestroyed=!0,this._queue.killAndDrain()}onEntry(e){this._emitter.on("entry",e)}onError(e){this._emitter.once("error",e)}onEnd(e){this._emitter.once("end",e)}_pushToQueue(e,t){let n={directory:e,base:t};this._queue.push(n,s=>{s!==null&&this._handleError(s)})}_worker(e,t){this._scandir(e.directory,this._settings.fsScandirSettings,(n,s)=>{if(n!==null){t(n,void 0);return}for(let o of s)this._handleEntry(o,e.base);t(null,void 0)})}_handleError(e){this._isDestroyed||!Dr.isFatalError(this._settings,e)||(this._isFatalError=!0,this._isDestroyed=!0,this._emitter.emit("error",e))}_handleEntry(e,t){if(this._isDestroyed||this._isFatalError)return;let n=e.path;t!==void 0&&(e.path=Dr.joinPathSegments(t,e.name,this._settings.pathSegmentSeparator)),Dr.isAppliedFilter(this._settings.entryFilter,e)&&this._emitEntry(e),e.dirent.isDirectory()&&Dr.isAppliedFilter(this._settings.deepFilter,e)&&this._pushToQueue(n,t===void 0?void 0:e.path)}_emitEntry(e){this._emitter.emit("entry",e)}};Gn.default=Wn});var Ho=k(Vn=>{"use strict";Object.defineProperty(Vn,"__esModule",{value:!0});var Rp=qn(),Yn=class{constructor(e,t){this._root=e,this._settings=t,this._reader=new Rp.default(this._root,this._settings),this._storage=[]}read(e){this._reader.onError(t=>{Tp(e,t)}),this._reader.onEntry(t=>{this._storage.push(t)}),this._reader.onEnd(()=>{Ap(e,this._storage)}),this._reader.read()}};Vn.default=Yn;function Tp(r,e){r(e)}function Ap(r,e){r(null,e)}});var $o=k(Kn=>{"use strict";Object.defineProperty(Kn,"__esModule",{value:!0});var Cp=require("stream"),kp=qn(),zn=class{constructor(e,t){this._root=e,this._settings=t,this._reader=new kp.default(this._root,this._settings),this._stream=new Cp.Readable({objectMode:!0,read:()=>{},destroy:()=>{this._reader.isDestroyed||this._reader.destroy()}})}read(){return this._reader.onError(e=>{this._stream.emit("error",e)}),this._reader.onEntry(e=>{this._stream.push(e)}),this._reader.onEnd(()=>{this._stream.push(null)}),this._reader.read(),this._stream}};Kn.default=zn});var Wo=k(Xn=>{"use strict";Object.defineProperty(Xn,"__esModule",{value:!0});var Dp=Cr(),Ir=kr(),Ip=$n(),Qn=class extends Ip.default{constructor(){super(...arguments),this._scandir=Dp.scandirSync,this._storage=[],this._queue=new Set}read(){return this._pushToQueue(this._root,this._settings.basePath),this._handleQueue(),this._storage}_pushToQueue(e,t){this._queue.add({directory:e,base:t})}_handleQueue(){for(let e of this._queue.values())this._handleDirectory(e.directory,e.base)}_handleDirectory(e,t){try{let n=this._scandir(e,this._settings.fsScandirSettings);for(let s of n)this._handleEntry(s,t)}catch(n){this._handleError(n)}}_handleError(e){if(!!Ir.isFatalError(this._settings,e))throw e}_handleEntry(e,t){let n=e.path;t!==void 0&&(e.path=Ir.joinPathSegments(t,e.name,this._settings.pathSegmentSeparator)),Ir.isAppliedFilter(this._settings.entryFilter,e)&&this._pushToStorage(e),e.dirent.isDirectory()&&Ir.isAppliedFilter(this._settings.deepFilter,e)&&this._pushToQueue(n,t===void 0?void 0:e.path)}_pushToStorage(e){this._storage.push(e)}};Xn.default=Qn});var Go=k(Zn=>{"use strict";Object.defineProperty(Zn,"__esModule",{value:!0});var Pp=Wo(),Jn=class{constructor(e,t){this._root=e,this._settings=t,this._reader=new Pp.default(this._root,this._settings)}read(){return this._reader.read()}};Zn.default=Jn});var qo=k(ti=>{"use strict";Object.defineProperty(ti,"__esModule",{value:!0});var Fp=require("path"),Mp=Cr(),ei=class{constructor(e={}){this._options=e,this.basePath=this._getValue(this._options.basePath,void 0),this.concurrency=this._getValue(this._options.concurrency,Number.POSITIVE_INFINITY),this.deepFilter=this._getValue(this._options.deepFilter,null),this.entryFilter=this._getValue(this._options.entryFilter,null),this.errorFilter=this._getValue(this._options.errorFilter,null),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,Fp.sep),this.fsScandirSettings=new Mp.Settings({followSymbolicLinks:this._options.followSymbolicLinks,fs:this._options.fs,pathSegmentSeparator:this._options.pathSegmentSeparator,stats:this._options.stats,throwErrorOnBrokenSymbolicLink:this._options.throwErrorOnBrokenSymbolicLink})}_getValue(e,t){return e??t}};ti.default=ei});var Fr=k(Ve=>{"use strict";Object.defineProperty(Ve,"__esModule",{value:!0});Ve.Settings=Ve.walkStream=Ve.walkSync=Ve.walk=void 0;var Yo=Ho(),Lp=$o(),Op=Go(),ri=qo();Ve.Settings=ri.default;function jp(r,e,t){if(typeof e=="function"){new Yo.default(r,Pr()).read(e);return}new Yo.default(r,Pr(e)).read(t)}Ve.walk=jp;function xp(r,e){let t=Pr(e);return new Op.default(r,t).read()}Ve.walkSync=xp;function Np(r,e){let t=Pr(e);return new Lp.default(r,t).read()}Ve.walkStream=Np;function Pr(r={}){return r instanceof ri.default?r:new ri.default(r)}});var Mr=k(ii=>{"use strict";Object.defineProperty(ii,"__esModule",{value:!0});var Bp=require("path"),Up=mt(),Vo=Je(),ni=class{constructor(e){this._settings=e,this._fsStatSettings=new Up.Settings({followSymbolicLink:this._settings.followSymbolicLinks,fs:this._settings.fs,throwErrorOnBrokenSymbolicLink:this._settings.followSymbolicLinks})}_getFullEntryPath(e){return Bp.resolve(this._settings.cwd,e)}_makeEntry(e,t){let n={name:t,path:t,dirent:Vo.fs.createDirentFromStats(t,e)};return this._settings.stats&&(n.stats=e),n}_isFatalError(e){return!Vo.errno.isEnoentCodeError(e)&&!this._settings.suppressErrors}};ii.default=ni});var oi=k(ai=>{"use strict";Object.defineProperty(ai,"__esModule",{value:!0});var Hp=require("stream"),$p=mt(),Wp=Fr(),Gp=Mr(),si=class extends Gp.default{constructor(){super(...arguments),this._walkStream=Wp.walkStream,this._stat=$p.stat}dynamic(e,t){return this._walkStream(e,t)}static(e,t){let n=e.map(this._getFullEntryPath,this),s=new Hp.PassThrough({objectMode:!0});s._write=(o,l,c)=>this._getEntry(n[o],e[o],t).then(_=>{_!==null&&t.entryFilter(_)&&s.push(_),o===n.length-1&&s.end(),c()}).catch(c);for(let o=0;o<n.length;o++)s.write(o);return s}_getEntry(e,t,n){return this._getStat(e).then(s=>this._makeEntry(s,t)).catch(s=>{if(n.errorFilter(s))return null;throw s})}_getStat(e){return new Promise((t,n)=>{this._stat(e,this._fsStatSettings,(s,o)=>s===null?t(o):n(s))})}};ai.default=si});var zo=k(li=>{"use strict";Object.defineProperty(li,"__esModule",{value:!0});var qp=Fr(),Yp=Mr(),Vp=oi(),ui=class extends Yp.default{constructor(){super(...arguments),this._walkAsync=qp.walk,this._readerStream=new Vp.default(this._settings)}dynamic(e,t){return new Promise((n,s)=>{this._walkAsync(e,t,(o,l)=>{o===null?n(l):s(o)})})}async static(e,t){let n=[],s=this._readerStream.static(e,t);return new Promise((o,l)=>{s.once("error",l),s.on("data",c=>n.push(c)),s.once("end",()=>o(n))})}};li.default=ui});var Ko=k(di=>{"use strict";Object.defineProperty(di,"__esModule",{value:!0});var It=Je(),ci=class{constructor(e,t,n){this._patterns=e,this._settings=t,this._micromatchOptions=n,this._storage=[],this._fillStorage()}_fillStorage(){let e=It.pattern.expandPatternsWithBraceExpansion(this._patterns);for(let t of e){let n=this._getPatternSegments(t),s=this._splitSegmentsIntoSections(n);this._storage.push({complete:s.length<=1,pattern:t,segments:n,sections:s})}}_getPatternSegments(e){return It.pattern.getPatternParts(e,this._micromatchOptions).map(n=>It.pattern.isDynamicPattern(n,this._settings)?{dynamic:!0,pattern:n,patternRe:It.pattern.makeRe(n,this._micromatchOptions)}:{dynamic:!1,pattern:n})}_splitSegmentsIntoSections(e){return It.array.splitWhen(e,t=>t.dynamic&&It.pattern.hasGlobStar(t.pattern))}};di.default=ci});var Qo=k(fi=>{"use strict";Object.defineProperty(fi,"__esModule",{value:!0});var zp=Ko(),_i=class extends zp.default{match(e){let t=e.split("/"),n=t.length,s=this._storage.filter(o=>!o.complete||o.segments.length>n);for(let o of s){let l=o.sections[0];if(!o.complete&&n>l.length||t.every((_,S)=>{let f=o.segments[S];return!!(f.dynamic&&f.patternRe.test(_)||!f.dynamic&&f.pattern===_)}))return!0}return!1}};fi.default=_i});var Xo=k(hi=>{"use strict";Object.defineProperty(hi,"__esModule",{value:!0});var Lr=Je(),Kp=Qo(),pi=class{constructor(e,t){this._settings=e,this._micromatchOptions=t}getFilter(e,t,n){let s=this._getMatcher(t),o=this._getNegativePatternsRe(n);return l=>this._filter(e,l,s,o)}_getMatcher(e){return new Kp.default(e,this._settings,this._micromatchOptions)}_getNegativePatternsRe(e){let t=e.filter(Lr.pattern.isAffectDepthOfReadingPattern);return Lr.pattern.convertPatternsToRe(t,this._micromatchOptions)}_filter(e,t,n,s){if(this._isSkippedByDeep(e,t.path)||this._isSkippedSymbolicLink(t))return!1;let o=Lr.path.removeLeadingDotSegment(t.path);return this._isSkippedByPositivePatterns(o,n)?!1:this._isSkippedByNegativePatterns(o,s)}_isSkippedByDeep(e,t){return this._settings.deep===1/0?!1:this._getEntryLevel(e,t)>=this._settings.deep}_getEntryLevel(e,t){let n=t.split("/").length;if(e==="")return n;let s=e.split("/").length;return n-s}_isSkippedSymbolicLink(e){return!this._settings.followSymbolicLinks&&e.dirent.isSymbolicLink()}_isSkippedByPositivePatterns(e,t){return!this._settings.baseNameMatch&&!t.match(e)}_isSkippedByNegativePatterns(e,t){return!Lr.pattern.matchAny(e,t)}};hi.default=pi});var Jo=k(gi=>{"use strict";Object.defineProperty(gi,"__esModule",{value:!0});var gt=Je(),mi=class{constructor(e,t){this._settings=e,this._micromatchOptions=t,this.index=new Map}getFilter(e,t){let n=gt.pattern.convertPatternsToRe(e,this._micromatchOptions),s=gt.pattern.convertPatternsToRe(t,this._micromatchOptions);return o=>this._filter(o,n,s)}_filter(e,t,n){if(this._settings.unique&&this._isDuplicateEntry(e)||this._onlyFileFilter(e)||this._onlyDirectoryFilter(e)||this._isSkippedByAbsoluteNegativePatterns(e.path,n))return!1;let s=this._settings.baseNameMatch?e.name:e.path,o=e.dirent.isDirectory(),l=this._isMatchToPatterns(s,t,o)&&!this._isMatchToPatterns(e.path,n,o);return this._settings.unique&&l&&this._createIndexRecord(e),l}_isDuplicateEntry(e){return this.index.has(e.path)}_createIndexRecord(e){this.index.set(e.path,void 0)}_onlyFileFilter(e){return this._settings.onlyFiles&&!e.dirent.isFile()}_onlyDirectoryFilter(e){return this._settings.onlyDirectories&&!e.dirent.isDirectory()}_isSkippedByAbsoluteNegativePatterns(e,t){if(!this._settings.absolute)return!1;let n=gt.path.makeAbsolute(this._settings.cwd,e);return gt.pattern.matchAny(n,t)}_isMatchToPatterns(e,t,n){let s=gt.path.removeLeadingDotSegment(e),o=gt.pattern.matchAny(s,t);return!o&&n?gt.pattern.matchAny(s+"/",t):o}};gi.default=mi});var Zo=k(yi=>{"use strict";Object.defineProperty(yi,"__esModule",{value:!0});var Qp=Je(),bi=class{constructor(e){this._settings=e}getFilter(){return e=>this._isNonFatalError(e)}_isNonFatalError(e){return Qp.errno.isEnoentCodeError(e)||this._settings.suppressErrors}};yi.default=bi});var tu=k(vi=>{"use strict";Object.defineProperty(vi,"__esModule",{value:!0});var eu=Je(),Si=class{constructor(e){this._settings=e}getTransformer(){return e=>this._transform(e)}_transform(e){let t=e.path;return this._settings.absolute&&(t=eu.path.makeAbsolute(this._settings.cwd,t),t=eu.path.unixify(t)),this._settings.markDirectories&&e.dirent.isDirectory()&&(t+="/"),this._settings.objectMode?Object.assign(Object.assign({},e),{path:t}):t}};vi.default=Si});var Or=k(wi=>{"use strict";Object.defineProperty(wi,"__esModule",{value:!0});var Xp=require("path"),Jp=Xo(),Zp=Jo(),eh=Zo(),th=tu(),Ei=class{constructor(e){this._settings=e,this.errorFilter=new eh.default(this._settings),this.entryFilter=new Zp.default(this._settings,this._getMicromatchOptions()),this.deepFilter=new Jp.default(this._settings,this._getMicromatchOptions()),this.entryTransformer=new th.default(this._settings)}_getRootDirectory(e){return Xp.resolve(this._settings.cwd,e.base)}_getReaderOptions(e){let t=e.base==="."?"":e.base;return{basePath:t,pathSegmentSeparator:"/",concurrency:this._settings.concurrency,deepFilter:this.deepFilter.getFilter(t,e.positive,e.negative),entryFilter:this.entryFilter.getFilter(e.positive,e.negative),errorFilter:this.errorFilter.getFilter(),followSymbolicLinks:this._settings.followSymbolicLinks,fs:this._settings.fs,stats:this._settings.stats,throwErrorOnBrokenSymbolicLink:this._settings.throwErrorOnBrokenSymbolicLink,transform:this.entryTransformer.getTransformer()}}_getMicromatchOptions(){return{dot:this._settings.dot,matchBase:this._settings.baseNameMatch,nobrace:!this._settings.braceExpansion,nocase:!this._settings.caseSensitiveMatch,noext:!this._settings.extglob,noglobstar:!this._settings.globstar,posix:!0,strictSlashes:!1}}};wi.default=Ei});var ru=k(Ti=>{"use strict";Object.defineProperty(Ti,"__esModule",{value:!0});var rh=zo(),nh=Or(),Ri=class extends nh.default{constructor(){super(...arguments),this._reader=new rh.default(this._settings)}async read(e){let t=this._getRootDirectory(e),n=this._getReaderOptions(e);return(await this.api(t,e,n)).map(o=>n.transform(o))}api(e,t,n){return t.dynamic?this._reader.dynamic(e,n):this._reader.static(t.patterns,n)}};Ti.default=Ri});var nu=k(Ci=>{"use strict";Object.defineProperty(Ci,"__esModule",{value:!0});var ih=require("stream"),sh=oi(),ah=Or(),Ai=class extends ah.default{constructor(){super(...arguments),this._reader=new sh.default(this._settings)}read(e){let t=this._getRootDirectory(e),n=this._getReaderOptions(e),s=this.api(t,e,n),o=new ih.Readable({objectMode:!0,read:()=>{}});return s.once("error",l=>o.emit("error",l)).on("data",l=>o.emit("data",n.transform(l))).once("end",()=>o.emit("end")),o.once("close",()=>s.destroy()),o}api(e,t,n){return t.dynamic?this._reader.dynamic(e,n):this._reader.static(t.patterns,n)}};Ci.default=Ai});var iu=k(Di=>{"use strict";Object.defineProperty(Di,"__esModule",{value:!0});var oh=mt(),uh=Fr(),lh=Mr(),ki=class extends lh.default{constructor(){super(...arguments),this._walkSync=uh.walkSync,this._statSync=oh.statSync}dynamic(e,t){return this._walkSync(e,t)}static(e,t){let n=[];for(let s of e){let o=this._getFullEntryPath(s),l=this._getEntry(o,s,t);l===null||!t.entryFilter(l)||n.push(l)}return n}_getEntry(e,t,n){try{let s=this._getStat(e);return this._makeEntry(s,t)}catch(s){if(n.errorFilter(s))return null;throw s}}_getStat(e){return this._statSync(e,this._fsStatSettings)}};Di.default=ki});var su=k(Pi=>{"use strict";Object.defineProperty(Pi,"__esModule",{value:!0});var ch=iu(),dh=Or(),Ii=class extends dh.default{constructor(){super(...arguments),this._reader=new ch.default(this._settings)}read(e){let t=this._getRootDirectory(e),n=this._getReaderOptions(e);return this.api(t,e,n).map(n.transform)}api(e,t,n){return t.dynamic?this._reader.dynamic(e,n):this._reader.static(t.patterns,n)}};Pi.default=Ii});var au=k(Ft=>{"use strict";Object.defineProperty(Ft,"__esModule",{value:!0});Ft.DEFAULT_FILE_SYSTEM_ADAPTER=void 0;var Pt=require("fs"),_h=require("os"),fh=Math.max(_h.cpus().length,1);Ft.DEFAULT_FILE_SYSTEM_ADAPTER={lstat:Pt.lstat,lstatSync:Pt.lstatSync,stat:Pt.stat,statSync:Pt.statSync,readdir:Pt.readdir,readdirSync:Pt.readdirSync};var Fi=class{constructor(e={}){this._options=e,this.absolute=this._getValue(this._options.absolute,!1),this.baseNameMatch=this._getValue(this._options.baseNameMatch,!1),this.braceExpansion=this._getValue(this._options.braceExpansion,!0),this.caseSensitiveMatch=this._getValue(this._options.caseSensitiveMatch,!0),this.concurrency=this._getValue(this._options.concurrency,fh),this.cwd=this._getValue(this._options.cwd,process.cwd()),this.deep=this._getValue(this._options.deep,1/0),this.dot=this._getValue(this._options.dot,!1),this.extglob=this._getValue(this._options.extglob,!0),this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!0),this.fs=this._getFileSystemMethods(this._options.fs),this.globstar=this._getValue(this._options.globstar,!0),this.ignore=this._getValue(this._options.ignore,[]),this.markDirectories=this._getValue(this._options.markDirectories,!1),this.objectMode=this._getValue(this._options.objectMode,!1),this.onlyDirectories=this._getValue(this._options.onlyDirectories,!1),this.onlyFiles=this._getValue(this._options.onlyFiles,!0),this.stats=this._getValue(this._options.stats,!1),this.suppressErrors=this._getValue(this._options.suppressErrors,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!1),this.unique=this._getValue(this._options.unique,!0),this.onlyDirectories&&(this.onlyFiles=!1),this.stats&&(this.objectMode=!0)}_getValue(e,t){return e===void 0?t:e}_getFileSystemMethods(e={}){return Object.assign(Object.assign({},Ft.DEFAULT_FILE_SYSTEM_ADAPTER),e)}};Ft.default=Fi});var cu=k((dy,lu)=>{"use strict";var ou=so(),uu=oo(),ph=ru(),hh=nu(),mh=su(),Mi=au(),bt=Je();async function Li(r,e){Mt(r);let t=Oi(r,ph.default,e),n=await Promise.all(t);return bt.array.flatten(n)}(function(r){function e(l,c){Mt(l);let _=Oi(l,mh.default,c);return bt.array.flatten(_)}r.sync=e;function t(l,c){Mt(l);let _=Oi(l,hh.default,c);return bt.stream.merge(_)}r.stream=t;function n(l,c){Mt(l);let _=uu.transform([].concat(l)),S=new Mi.default(c);return ou.generate(_,S)}r.generateTasks=n;function s(l,c){Mt(l);let _=new Mi.default(c);return bt.pattern.isDynamicPattern(l,_)}r.isDynamicPattern=s;function o(l){return Mt(l),bt.path.escape(l)}r.escapePath=o})(Li||(Li={}));function Oi(r,e,t){let n=uu.transform([].concat(r)),s=new Mi.default(t),o=ou.generate(n,s),l=new e(s);return o.map(l.read,l)}function Mt(r){if(![].concat(r).every(n=>bt.string.isString(n)&&!bt.string.isEmpty(n)))throw new TypeError("Patterns must be a string (non empty) or an array of strings")}lu.exports=Li});var gh={};ud(gh,{registerWorker:()=>_u});module.exports=ld(gh);var Z=Et(require("apache-arrow"));function wt(r){switch(r.typeId){case Z.Type.Binary:return{sqlType:"binary"};case Z.Type.Bool:return{sqlType:"bool"};case Z.Type.Date:return{sqlType:"date"};case Z.Type.DateDay:return{sqlType:"date32[d]"};case Z.Type.DateMillisecond:return{sqlType:"date64[ms]"};case Z.Type.Decimal:{let e=r;return{sqlType:"decimal",precision:e.precision,scale:e.scale}}case Z.Type.Float:return{sqlType:"float"};case Z.Type.Float16:return{sqlType:"float16"};case Z.Type.Float32:return{sqlType:"float32"};case Z.Type.Float64:return{sqlType:"float64"};case Z.Type.Int:return{sqlType:"int32"};case Z.Type.Int16:return{sqlType:"int16"};case Z.Type.Int32:return{sqlType:"int32"};case Z.Type.Int64:return{sqlType:"int64"};case Z.Type.Uint16:return{sqlType:"uint16"};case Z.Type.Uint32:return{sqlType:"uint32"};case Z.Type.Uint64:return{sqlType:"uint64"};case Z.Type.Uint8:return{sqlType:"uint8"};case Z.Type.IntervalDayTime:return{sqlType:"interval[dt]"};case Z.Type.IntervalYearMonth:return{sqlType:"interval[m]"};case Z.Type.List:return{sqlType:"list",valueType:wt(r.valueType)};case Z.Type.FixedSizeBinary:return{sqlType:"fixedsizebinary",byteWidth:r.byteWidth};case Z.Type.Null:return{sqlType:"null"};case Z.Type.Utf8:return{sqlType:"utf8"};case Z.Type.Struct:return{sqlType:"struct",fields:r.children.map(t=>Xt(t.name,t.type))};case Z.Type.Map:{let e=r;return{sqlType:"map",keyType:wt(e.keyType),valueType:wt(e.valueType)}}case Z.Type.Time:return{sqlType:"time[s]"};case Z.Type.TimeMicrosecond:return{sqlType:"time[us]"};case Z.Type.TimeMillisecond:return{sqlType:"time[ms]"};case Z.Type.TimeNanosecond:return{sqlType:"time[ns]"};case Z.Type.TimeSecond:return{sqlType:"time[s]"};case Z.Type.Timestamp:return{sqlType:"timestamp",timezone:r.timezone||void 0};case Z.Type.TimestampSecond:return{sqlType:"timestamp[s]",timezone:r.timezone||void 0};case Z.Type.TimestampMicrosecond:return{sqlType:"timestamp[us]",timezone:r.timezone||void 0};case Z.Type.TimestampNanosecond:return{sqlType:"timestamp[ns]",timezone:r.timezone||void 0};case Z.Type.TimestampMillisecond:return{sqlType:"timestamp[ms]",timezone:r.timezone||void 0}}throw new Error(`unsupported arrow type: ${r.toString()}`)}function Xt(r,e){let t=wt(e);return t.name=r,t}var Jt=class{constructor(){this._bindings=null;this._nextMessageId=0}log(e){this.postMessage({messageId:this._nextMessageId++,requestId:0,type:"LOG",data:e},[])}sendOK(e){this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"OK",data:null},[])}failWith(e,t){let n={name:t.name,message:t.message,stack:t.stack||void 0};this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"ERROR",data:n},[])}async onMessage(e){switch(e.type){case"PING":this.sendOK(e);return;case"INSTANTIATE":this._bindings!=null&&this.failWith(e,new Error("duckdb already initialized"));try{this._bindings=await this.instantiate(e.data[0],e.data[1],t=>{this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"INSTANTIATE_PROGRESS",data:t},[])}),this.sendOK(e)}catch(t){this._bindings=null,this.failWith(e,t)}return;default:break}if(!this._bindings)return this.failWith(e,new Error("duckdb is not initialized"));try{switch(e.type){case"GET_VERSION":this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"VERSION_STRING",data:this._bindings.getVersion()},[]);break;case"GET_FEATURE_FLAGS":this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"FEATURE_FLAGS",data:this._bindings.getFeatureFlags()},[]);break;case"RESET":this._bindings.reset(),this.sendOK(e);break;case"OPEN":this._bindings.open(e.data),this.sendOK(e);break;case"DROP_FILE":this._bindings.dropFile(e.data),this.sendOK(e);break;case"DROP_FILES":this._bindings.dropFiles(),this.sendOK(e);break;case"FLUSH_FILES":this._bindings.flushFiles(),this.sendOK(e);break;case"CONNECT":{let t=this._bindings.connect();this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"CONNECTION_INFO",data:t.useUnsafe((n,s)=>s)},[]);break}case"DISCONNECT":this._bindings.disconnect(e.data),this.sendOK(e);break;case"CREATE_PREPARED":{let t=this._bindings.createPrepared(e.data[0],e.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"PREPARED_STATEMENT_ID",data:t},[]);break}case"CLOSE_PREPARED":{this._bindings.closePrepared(e.data[0],e.data[1]),this.sendOK(e);break}case"RUN_PREPARED":{let t=this._bindings.runPrepared(e.data[0],e.data[1],e.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT",data:t},[t.buffer]);break}case"RUN_QUERY":{let t=this._bindings.runQuery(e.data[0],e.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT",data:t},[t.buffer]);break}case"SEND_PREPARED":{let t=this._bindings.sendPrepared(e.data[0],e.data[1],e.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT_HEADER",data:t},[t.buffer]);break}case"START_PENDING_QUERY":{let t=this._bindings.startPendingQuery(e.data[0],e.data[1]),n=[];t&&n.push(t.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:t},n);break}case"POLL_PENDING_QUERY":{let t=this._bindings.pollPendingQuery(e.data),n=[];t&&n.push(t.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:t},n);break}case"CANCEL_PENDING_QUERY":{let t=this._bindings.cancelPendingQuery(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"SUCCESS",data:t},[]);break}case"FETCH_QUERY_RESULTS":{let t=this._bindings.fetchQueryResults(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"QUERY_RESULT_CHUNK",data:t},[t.buffer]);break}case"GET_TABLE_NAMES":{let t=this._bindings.getTableNames(e.data[0],e.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"TABLE_NAMES",data:t},[]);break}case"GLOB_FILE_INFOS":{let t=this._bindings.globFiles(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"FILE_INFOS",data:t},[]);break}case"REGISTER_FILE_URL":this._bindings.registerFileURL(e.data[0],e.data[1],e.data[2],e.data[3]),this.sendOK(e);break;case"REGISTER_FILE_BUFFER":this._bindings.registerFileBuffer(e.data[0],e.data[1]),this.sendOK(e);break;case"REGISTER_FILE_HANDLE":this._bindings.registerFileHandle(e.data[0],e.data[1],e.data[2],e.data[3]),this.sendOK(e);break;case"COPY_FILE_TO_PATH":this._bindings.copyFileToPath(e.data[0],e.data[1]),this.sendOK(e);break;case"COPY_FILE_TO_BUFFER":{let t=this._bindings.copyFileToBuffer(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"FILE_BUFFER",data:t},[]);break}case"COLLECT_FILE_STATISTICS":this._bindings.collectFileStatistics(e.data[0],e.data[1]),this.sendOK(e);break;case"EXPORT_FILE_STATISTICS":{this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"FILE_STATISTICS",data:this._bindings.exportFileStatistics(e.data)},[]);break}case"INSERT_ARROW_FROM_IPC_STREAM":{this._bindings.insertArrowFromIPCStream(e.data[0],e.data[1],e.data[2]),this.sendOK(e);break}case"IMPORT_CSV_FROM_PATH":{this._bindings.insertCSVFromPath(e.data[0],e.data[1],e.data[2]),this.sendOK(e);break}case"IMPORT_JSON_FROM_PATH":{this._bindings.insertJSONFromPath(e.data[0],e.data[1],e.data[2]),this.sendOK(e);break}case"TOKENIZE":{let t=this._bindings.tokenize(e.data);this.postMessage({messageId:this._nextMessageId++,requestId:e.messageId,type:"SCRIPT_TOKENS",data:t},[]);break}}}catch(t){return this.failWith(e,t)}}};var Zt={},cd=(()=>{var r=Zt.url;return async function(e={}){var t=typeof e<"u"?e:{},n,s;t.ready=new Promise((i,a)=>{n=i,s=a}),["_main","_malloc","_free","_duckdb_web_clear_response","_duckdb_web_collect_file_stats","_duckdb_web_connect","_duckdb_web_copy_file_to_buffer","_duckdb_web_copy_file_to_path","_duckdb_web_disconnect","_duckdb_web_export_file_stats","_duckdb_web_fail_with","_duckdb_web_flush_file","_duckdb_web_flush_files","_duckdb_web_fs_drop_file","_duckdb_web_fs_drop_files","_duckdb_web_fs_get_file_info_by_id","_duckdb_web_fs_get_file_info_by_name","_duckdb_web_fs_glob_add_path","_duckdb_web_fs_glob_file_infos","_duckdb_web_fs_register_file_buffer","_duckdb_web_fs_register_file_url","_duckdb_web_get_feature_flags","_duckdb_web_get_global_file_info","_duckdb_web_get_tablenames","_duckdb_web_get_version","_duckdb_web_insert_arrow_from_ipc_stream","_duckdb_web_insert_csv_from_path","_duckdb_web_insert_json_from_path","_duckdb_web_open","_duckdb_web_pending_query_cancel","_duckdb_web_pending_query_poll","_duckdb_web_pending_query_start","_duckdb_web_prepared_close","_duckdb_web_prepared_create","_duckdb_web_prepared_run","_duckdb_web_prepared_send","_duckdb_web_query_fetch_results","_duckdb_web_query_run","_duckdb_web_reset","_duckdb_web_tokenize","_duckdb_web_udf_scalar_create","_fflush","onRuntimeInitialized"].forEach(i=>{Object.getOwnPropertyDescriptor(t.ready,i)||Object.defineProperty(t.ready,i,{get:()=>D("You are getting "+i+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"),set:()=>D("You are setting "+i+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")})});var o=Object.assign({},t),l=[],c="./this.program",_=(i,a)=>{throw a},S=typeof window=="object",f=typeof importScripts=="function",w=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",y=!S&&!w&&!f;if(t.ENVIRONMENT)throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");var x="";function I(i){return t.locateFile?t.locateFile(i,x):x+i}var M,N,U,ne;if(w){if(typeof process>"u"||!process.release||process.release.name!=="node")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");var re=process.versions.node,me=re.split(".").slice(0,3);me=me[0]*1e4+me[1]*100+me[2].split("-")[0]*1;var q=101900;if(me<101900)throw new Error("This emscripten-generated code requires node v10.19.19.0 (detected v"+re+")");let{createRequire:i}=await import("module");var ee=i(Zt.url),W=ee("fs"),j=ee("path");f?x=j.dirname(x)+"/":x=ee("url").fileURLToPath(new URL("./",Zt.url)),M=(a,u)=>(a=xr(a)?new URL(a):j.normalize(a),W.readFileSync(a,u?void 0:"utf8")),U=a=>{var u=M(a,!0);return u.buffer||(u=new Uint8Array(u)),O(u.buffer),u},N=(a,u,d,E=!0)=>{a=xr(a)?new URL(a):j.normalize(a),W.readFile(a,E?void 0:"utf8",(F,v)=>{F?d(F):u(E?v.buffer:v)})},!t.thisProgram&&process.argv.length>1&&(c=process.argv[1].replace(/\\/g,"/")),l=process.argv.slice(2),_=(a,u)=>{throw process.exitCode=a,u},t.inspect=()=>"[Emscripten Module object]"}else if(y){if(typeof process=="object"&&typeof ee=="function"||typeof window=="object"||typeof importScripts=="function")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");typeof read<"u"&&(M=i=>read(i)),U=i=>{let a;return typeof readbuffer=="function"?new Uint8Array(readbuffer(i)):(a=read(i,"binary"),O(typeof a=="object"),a)},N=(i,a,u)=>{setTimeout(()=>a(U(i)),0)},typeof clearTimeout>"u"&&(globalThis.clearTimeout=i=>{}),typeof scriptArgs<"u"?l=scriptArgs:typeof arguments<"u"&&(l=arguments),typeof quit=="function"&&(_=(i,a)=>{throw setTimeout(()=>{if(!(a instanceof Nr)){let u=a;a&&typeof a=="object"&&a.stack&&(u=[a,a.stack]),R(`exiting due to exception: ${u}`)}quit(i)}),a}),typeof print<"u"&&(typeof console>"u"&&(console={}),console.log=print,console.warn=console.error=typeof printErr<"u"?printErr:print)}else if(S||f){if(f?x=self.location.href:typeof document<"u"&&document.currentScript&&(x=document.currentScript.src),r&&(x=r),x.indexOf("blob:")!==0?x=x.substr(0,x.replace(/[?#].*/,"").lastIndexOf("/")+1):x="",!(typeof window=="object"||typeof importScripts=="function"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");M=i=>{var a=new XMLHttpRequest;return a.open("GET",i,!1),a.send(null),a.responseText},f&&(U=i=>{var a=new XMLHttpRequest;return a.open("GET",i,!1),a.responseType="arraybuffer",a.send(null),new Uint8Array(a.response)}),N=(i,a,u)=>{var d=new XMLHttpRequest;d.open("GET",i,!0),d.responseType="arraybuffer",d.onload=()=>{if(d.status==200||d.status==0&&d.response){a(d.response);return}u()},d.onerror=u,d.send(null)},ne=i=>document.title=i}else throw new Error("environment detection error");var L=t.print||console.log.bind(console),R=t.printErr||console.error.bind(console);Object.assign(t,o),o=null,$c(),t.arguments&&(l=t.arguments),Ke("arguments","arguments_"),t.thisProgram&&(c=t.thisProgram),Ke("thisProgram","thisProgram"),t.quit&&(_=t.quit),Ke("quit","quit_"),O(typeof t.memoryInitializerPrefixURL>"u","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"),O(typeof t.pthreadMainPrefixURL>"u","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"),O(typeof t.cdInitializerPrefixURL>"u","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"),O(typeof t.filePackagePrefixURL>"u","Module.filePackagePrefixURL option was removed, use Module.locateFile instead"),O(typeof t.read>"u","Module.read option was removed (modify read_ in JS)"),O(typeof t.readAsync>"u","Module.readAsync option was removed (modify readAsync in JS)"),O(typeof t.readBinary>"u","Module.readBinary option was removed (modify readBinary in JS)"),O(typeof t.setWindowTitle>"u","Module.setWindowTitle option was removed (modify setWindowTitle in JS)"),O(typeof t.TOTAL_MEMORY>"u","Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"),Ke("read","read_"),Ke("readAsync","readAsync"),Ke("readBinary","readBinary"),Ke("setWindowTitle","setWindowTitle");var m="IDBFS is no longer included by default; build with -lidbfs.js",K="PROXYFS is no longer included by default; build with -lproxyfs.js",Y="WORKERFS is no longer included by default; build with -lworkerfs.js",de="NODEFS is no longer included by default; build with -lnodefs.js";O(!y,"shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");var p;t.wasmBinary&&(p=t.wasmBinary),Ke("wasmBinary","wasmBinary");var h=t.noExitRuntime||!0;Ke("noExitRuntime","noExitRuntime"),typeof WebAssembly!="object"&&D("no native wasm support detected");var ue,Q=!1,ke;function O(i,a){i||D("Assertion failed"+(a?": "+a:""))}var De,Ee,Be,Pe,Ue,b,X,Lt,P;function ae(){var i=ue.buffer;t.HEAP8=Ee=new Int8Array(i),t.HEAP16=Pe=new Int16Array(i),t.HEAP32=b=new Int32Array(i),t.HEAPU8=Be=new Uint8Array(i),t.HEAPU16=Ue=new Uint16Array(i),t.HEAPU32=X=new Uint32Array(i),t.HEAPF32=Lt=new Float32Array(i),t.HEAPF64=P=new Float64Array(i)}O(!t.STACK_SIZE,"STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time"),O(typeof Int32Array<"u"&&typeof Float64Array<"u"&&Int32Array.prototype.subarray!=null&&Int32Array.prototype.set!=null,"JS engine does not provide full typed array support"),O(!t.wasmMemory,"Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally"),O(!t.INITIAL_MEMORY,"Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically");var C;function V(){var i=Kr();O((i&3)==0),i==0&&(i+=4),X[i>>>2]=34821223,X[i+4>>>2]=2310721022,X[0]=1668509029}function oe(){if(!Q){var i=Kr();i==0&&(i+=4);var a=X[i>>>2],u=X[i+4>>>2];(a!=34821223||u!=2310721022)&&D(`Stack overflow! Stack cookie has been overwritten at ${xt(i)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${xt(u)} ${xt(a)}`),X[0]!=1668509029&&D("Runtime error: The application has corrupted its heap memory area (address zero)!")}}(function(){var i=new Int16Array(1),a=new Int8Array(i.buffer);if(i[0]=25459,a[0]!==115||a[1]!==99)throw"Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)"})();var Se=[],ge=[],yt=[],Ot=[],xi=[],jr=!1,Ni=0;function Bi(){return h||Ni>0}function fu(){if(t.preRun)for(typeof t.preRun=="function"&&(t.preRun=[t.preRun]);t.preRun.length;)gu(t.preRun.shift());qt(Se)}function pu(){O(!jr),jr=!0,oe(),qt(ge)}function hu(){oe(),qt(yt)}function mu(){if(oe(),t.postRun)for(typeof t.postRun=="function"&&(t.postRun=[t.postRun]);t.postRun.length;)yu(t.postRun.shift());qt(xi)}function gu(i){Se.unshift(i)}function bu(i){ge.unshift(i)}function bh(i){yt.unshift(i)}function yh(i){}function yu(i){xi.unshift(i)}O(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),O(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),O(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),O(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var et=0,lt=null,jt=null,St={};function Sh(i){for(var a=i;;){if(!St[i])return i;i=a+Math.random()}}function Su(i){et++,t.monitorRunDependencies&&t.monitorRunDependencies(et),i?(O(!St[i]),St[i]=1,lt===null&&typeof setInterval<"u"&&(lt=setInterval(()=>{if(Q){clearInterval(lt),lt=null;return}var a=!1;for(var u in St)a||(a=!0,R("still waiting on run dependencies:")),R("dependency: "+u);a&&R("(end of list)")},1e4))):R("warning: run dependency added without ID")}function vu(i){if(et--,t.monitorRunDependencies&&t.monitorRunDependencies(et),i?(O(St[i]),delete St[i]):R("warning: run dependency removed without ID"),et==0&&(lt!==null&&(clearInterval(lt),lt=null),jt)){var a=jt;jt=null,a()}}function D(i){t.onAbort&&t.onAbort(i),i="Aborted("+i+")",R(i),Q=!0,ke=1;var a=new WebAssembly.RuntimeError(i);throw s(a),a}var Eu="data:application/octet-stream;base64,";function Ui(i){return i.startsWith(Eu)}function xr(i){return i.startsWith("file://")}function g(i,a){return function(){var u=i,d=a;return a||(d=t.asm),O(jr,"native function `"+u+"` called before runtime initialization"),d[i]||O(d[i],"exported native function `"+u+"` not found"),d[i].apply(null,arguments)}}var ze;t.locateFile?(ze="./duckdb-mvp.wasm",Ui(ze)||(ze=I(ze))):ze=new URL("./duckdb-mvp.wasm",Zt.url).href;function Hi(i){try{if(i==ze&&p)return new Uint8Array(p);if(U)return U(i);throw"both async and sync fetching of the wasm failed"}catch(a){D(a)}}function wu(i){return!p&&(S||f)&&typeof fetch=="function"?fetch(i,{credentials:"same-origin"}).then(a=>{if(!a.ok)throw"failed to load wasm binary file at '"+i+"'";return a.arrayBuffer()}).catch(()=>Hi(i)):Promise.resolve().then(()=>Hi(i))}function $i(i,a,u){return wu(i).then(d=>WebAssembly.instantiate(d,a)).then(d=>d).then(u,d=>{R("failed to asynchronously prepare wasm: "+d),xr(ze)&&R("warning: Loading from a file URI ("+ze+") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing"),D(d)})}function Ru(i,a,u,d){return!i&&typeof WebAssembly.instantiateStreaming=="function"&&!Ui(a)&&!w&&typeof fetch=="function"?fetch(a,{credentials:"same-origin"}).then(E=>{var F=WebAssembly.instantiateStreaming(E,u);return F.then(d,function(v){return R("wasm streaming compile failed: "+v),R("falling back to ArrayBuffer instantiation"),$i(a,u,d)})}):$i(a,u,d)}function Tu(){var i={env:os,wasi_snapshot_preview1:os};function a(E,F){var v=E.exports;return t.asm=v,ue=t.asm.memory,O(ue,"memory not found in wasm exports"),ae(),C=t.asm.__indirect_function_table,O(C,"table not found in wasm exports"),bu(t.asm.__wasm_call_ctors),vu("wasm-instantiate"),v}Su("wasm-instantiate");var u=t;function d(E){O(t===u,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"),u=null,a(E.instance)}if(t.instantiateWasm)try{return t.instantiateWasm(i,a)}catch(E){R("Module.instantiateWasm callback failed with error: "+E),s(E)}return Ru(p,ze,i,d).catch(s),{}}var Le,vt;function Ke(i,a){Object.getOwnPropertyDescriptor(t,i)||Object.defineProperty(t,i,{configurable:!0,get:function(){D("Module."+i+" has been replaced with plain "+a+" (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}})}function Au(i){Object.getOwnPropertyDescriptor(t,i)&&D("`Module."+i+"` was supplied but `"+i+"` not included in INCOMING_MODULE_JS_API")}function Wi(i){return i==="FS_createPath"||i==="FS_createDataFile"||i==="FS_createPreloadedFile"||i==="FS_unlink"||i==="addRunDependency"||i==="FS_createLazyFile"||i==="FS_createDevice"||i==="removeRunDependency"}function Cu(i,a){typeof globalThis<"u"&&Object.defineProperty(globalThis,i,{configurable:!0,get:function(){He("`"+i+"` is not longer defined by emscripten. "+a)}})}Cu("buffer","Please use HEAP8.buffer or wasmMemory.buffer");function ku(i){typeof globalThis<"u"&&!Object.getOwnPropertyDescriptor(globalThis,i)&&Object.defineProperty(globalThis,i,{configurable:!0,get:function(){var a="`"+i+"` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line",u=i;u.startsWith("_")||(u="$"+i),a+=" (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE="+u+")",Wi(i)&&(a+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),He(a)}}),Gi(i)}function Gi(i){Object.getOwnPropertyDescriptor(t,i)||Object.defineProperty(t,i,{configurable:!0,get:function(){var a="'"+i+"' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";Wi(i)&&(a+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),D(a)}})}function vh(i){console.warn.apply(console,arguments)}function Nr(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}function qt(i){for(;i.length>0;)i.shift()(t)}function Eh(i,a="i8"){switch(a.endsWith("*")&&(a="*"),a){case"i1":return Ee[i>>>0];case"i8":return Ee[i>>>0];case"i16":return Pe[i>>>1];case"i32":return b[i>>>2];case"i64":D("to do getValue(i64) use WASM_BIGINT");case"float":return Lt[i>>>2];case"double":return P[i>>>3];case"*":return X[i>>>2];default:D(`invalid type for getValue: ${a}`)}}function xt(i){return O(typeof i=="number"),"0x"+i.toString(16).padStart(8,"0")}function wh(i,a,u="i8"){switch(u.endsWith("*")&&(u="*"),u){case"i1":Ee[i>>>0]=a;break;case"i8":Ee[i>>>0]=a;break;case"i16":Pe[i>>>1]=a;break;case"i32":b[i>>>2]=a;break;case"i64":D("to do setValue(i64) use WASM_BIGINT");case"float":Lt[i>>>2]=a;break;case"double":P[i>>>3]=a;break;case"*":X[i>>>2]=a;break;default:D(`invalid type for setValue: ${u}`)}}function He(i){He.shown||(He.shown={}),He.shown[i]||(He.shown[i]=1,w&&(i="warning: "+i),R(i))}function Du(){R("missing function: XML_GetBuffer"),D(-1)}function Iu(){R("missing function: XML_GetErrorCode"),D(-1)}function Pu(){R("missing function: XML_Parse"),D(-1)}function Fu(){R("missing function: XML_ParseBuffer"),D(-1)}function Mu(){R("missing function: XML_ParserCreate"),D(-1)}function Lu(){R("missing function: XML_ParserFree"),D(-1)}function Ou(){R("missing function: XML_ResumeParser"),D(-1)}function ju(){R("missing function: XML_SetCharacterDataHandler"),D(-1)}function xu(){R("missing function: XML_SetElementHandler"),D(-1)}function Nu(){R("missing function: XML_SetUserData"),D(-1)}function Bu(){R("missing function: XML_StopParser"),D(-1)}function Uu(i){this.excPtr=i,this.ptr=i-24,this.set_type=function(a){X[this.ptr+4>>>2]=a},this.get_type=function(){return X[this.ptr+4>>>2]},this.set_destructor=function(a){X[this.ptr+8>>>2]=a},this.get_destructor=function(){return X[this.ptr+8>>>2]},this.set_caught=function(a){a=a?1:0,Ee[this.ptr+12>>>0]=a},this.get_caught=function(){return Ee[this.ptr+12>>>0]!=0},this.set_rethrown=function(a){a=a?1:0,Ee[this.ptr+13>>>0]=a},this.get_rethrown=function(){return Ee[this.ptr+13>>>0]!=0},this.init=function(a,u){this.set_adjusted_ptr(0),this.set_type(a),this.set_destructor(u)},this.set_adjusted_ptr=function(a){X[this.ptr+16>>>2]=a},this.get_adjusted_ptr=function(){return X[this.ptr+16>>>2]},this.get_exception_ptr=function(){var a=zc(this.get_type());if(a)return X[this.excPtr>>>2];var u=this.get_adjusted_ptr();return u!==0?u:this.excPtr}}var Hu=0,$u=0;function Wu(i,a,u){var d=new Uu(i);d.init(a,u),Hu=i,$u++,O(!1,"Exception thrown, but exception catching is not enabled. Compile with -sNO_DISABLE_EXCEPTION_CATCHING or -sEXCEPTION_CATCHING_ALLOWED=[..] to catch.")}var qi="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function Gu(i,a,u){D(qi)}var Yi=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function Vi(i,a,u){a>>>=0;for(var d=a+u,E=a;i[E]&&!(E>=d);)++E;if(E-a>16&&i.buffer&&Yi)return Yi.decode(i.subarray(a,E));for(var F="";a<E;){var v=i[a++];if(!(v&128)){F+=String.fromCharCode(v);continue}var A=i[a++]&63;if((v&224)==192){F+=String.fromCharCode((v&31)<<6|A);continue}var H=i[a++]&63;if((v&240)==224?v=(v&15)<<12|A<<6|H:((v&248)!=240&&He("Invalid UTF-8 leading byte "+xt(v)+" encountered when deserializing a UTF-8 string in wasm memory to a JS string!"),v=(v&7)<<18|A<<12|H<<6|i[a++]&63),v<65536)F+=String.fromCharCode(v);else{var $=v-65536;F+=String.fromCharCode(55296|$>>10,56320|$&1023)}}return F}function ct(i,a){return O(typeof i=="number"),i>>>=0,i?Vi(Be,i,a):""}var tt={varargs:void 0,get:function(){O(tt.varargs!=null),tt.varargs+=4;var i=b[tt.varargs-4>>>2];return i},getStr:function(i){var a=ct(i);return a}};function qu(i,a,u,d,E){O(i<=64,"nfds must be less than or equal to 64"),O(!d,"exceptfds not supported");for(var F=0,v=a?b[a>>>2]:0,A=a?b[a+4>>>2]:0,H=u?b[u>>>2]:0,$=u?b[u+4>>>2]:0,z=d?b[d>>>2]:0,he=d?b[d+4>>>2]:0,te=0,je=0,le=0,be=0,rt=0,Qe=0,T=(a?b[a>>>2]:0)|(u?b[u>>>2]:0)|(d?b[d>>>2]:0),B=(a?b[a+4>>>2]:0)|(u?b[u+4>>>2]:0)|(d?b[d+4>>>2]:0),ve=function(ed,td,rd,hs){return ed<32?td&hs:rd&hs},ie=0;ie<i;ie++){var we=1<<ie%32;if(!!ve(ie,T,B,we)){var Te=tt.getStreamFromFD(ie),dt=tt.DEFAULT_POLLMASK;Te.stream_ops.poll&&(dt=Te.stream_ops.poll(Te)),dt&1&&ve(ie,v,A,we)&&(ie<32?te=te|we:je=je|we,F++),dt&4&&ve(ie,H,$,we)&&(ie<32?le=le|we:be=be|we,F++),dt&2&&ve(ie,z,he,we)&&(ie<32?rt=rt|we:Qe=Qe|we,F++)}}return a&&(b[a>>>2]=te,b[a+4>>>2]=je),u&&(b[u>>>2]=le,b[u+4>>>2]=be),d&&(b[d>>>2]=rt,b[d+4>>>2]=Qe),F}function Yu(){R("missing function: $SOCKFS"),D(-1)}function zi(){R("missing function: $FS"),D(-1)}function Nt(i){var a=Yu.getSocket(i);if(!a)throw new zi.ErrnoError(8);return a}function Rh(i){return b[Gc()>>>2]=i,i}var Th={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};function Br(i){return(i&255)+"."+(i>>8&255)+"."+(i>>16&255)+"."+(i>>24&255)}function Ki(i){var a="",u=0,d=0,E=0,F=0,v=0,A=0,H=[i[0]&65535,i[0]>>16,i[1]&65535,i[1]>>16,i[2]&65535,i[2]>>16,i[3]&65535,i[3]>>16],$=!0,z="";for(A=0;A<5;A++)if(H[A]!==0){$=!1;break}if($){if(z=Br(H[6]|H[7]<<16),H[5]===-1)return a="::ffff:",a+=z,a;if(H[5]===0)return a="::",z==="0.0.0.0"&&(z=""),z==="0.0.0.1"&&(z="1"),a+=z,a}for(u=0;u<8;u++)H[u]===0&&(u-E>1&&(v=0),E=u,v++),v>d&&(d=v,F=u-d+1);for(u=0;u<8;u++){if(d>1&&H[u]===0&&u>=F&&u<F+d){u===F&&(a+=":",F===0&&(a+=":"));continue}a+=Number(us(H[u]&65535)).toString(16),a+=u<7?":":""}return a}function Qi(i,a){var u=Pe[i>>>1],d=us(Ue[i+2>>>1]),E;switch(u){case 2:if(a!==16)return{errno:28};E=b[i+4>>>2],E=Br(E);break;case 10:if(a!==28)return{errno:28};E=[b[i+8>>>2],b[i+12>>>2],b[i+16>>>2],b[i+20>>>2]],E=Ki(E);break;default:return{errno:5}}return{family:u,addr:E,port:d}}function Yt(i){for(var a=i.split("."),u=0;u<4;u++){var d=Number(a[u]);if(isNaN(d))return null;a[u]=d}return(a[0]|a[1]<<8|a[2]<<16|a[3]<<24)>>>0}function Vt(i){return parseInt(i)}function Ur(i){var a,u,d,E,F,v=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,A=[];if(!v.test(i))return null;if(i==="::")return[0,0,0,0,0,0,0,0];for(i.startsWith("::")?i=i.replace("::","Z:"):i=i.replace("::",":Z:"),i.indexOf(".")>0?(i=i.replace(new RegExp("[.]","g"),":"),a=i.split(":"),a[a.length-4]=Vt(a[a.length-4])+Vt(a[a.length-3])*256,a[a.length-3]=Vt(a[a.length-2])+Vt(a[a.length-1])*256,a=a.slice(0,a.length-2)):a=i.split(":"),d=0,E=0,u=0;u<a.length;u++)if(typeof a[u]=="string")if(a[u]==="Z"){for(E=0;E<8-a.length+1;E++)A[u+E]=0;d=E-1}else A[u+d]=Vr(parseInt(a[u],16));else A[u+d]=a[u];return[A[1]<<16|A[0],A[3]<<16|A[2],A[5]<<16|A[4],A[7]<<16|A[6]]}var Oe={address_map:{id:1,addrs:{},names:{}},lookup_name:function(i){var a=Yt(i);if(a!==null||(a=Ur(i),a!==null))return i;var u;if(Oe.address_map.addrs[i])u=Oe.address_map.addrs[i];else{var d=Oe.address_map.id++;O(d<65535,"exceeded max address mappings of 65535"),u="172.29."+(d&255)+"."+(d&65280),Oe.address_map.names[u]=i,Oe.address_map.addrs[i]=u}return u},lookup_addr:function(i){return Oe.address_map.names[i]?Oe.address_map.names[i]:null}};function Xi(i,a,u){if(u&&i===0)return null;var d=Qi(i,a);if(d.errno)throw new zi.ErrnoError(d.errno);return d.addr=Oe.lookup_addr(d.addr)||d.addr,d}function Vu(i,a,u,d,E,F){var v=Nt(i),A=Xi(a,u);return v.sock_ops.bind(v,A.addr,A.port),0}function zu(i,a,u,d,E,F){var v=Nt(i),A=Xi(a,u);return v.sock_ops.connect(v,A.addr,A.port),0}function Ku(i,a,u,d){D("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Qu(i,a,u){return tt.varargs=u,0}function Xu(i,a){D("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Ah(i,a){return O(i==i>>>0||i==(i|0)),O(a===(a|0)),a+2097152>>>0<4194305-!!i?(i>>>0)+a*4294967296:NaN}function Ju(i,a,u){D("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Ji(i,a,u,d){if(u>>>=0,O(typeof i=="string"),!(d>0))return 0;for(var E=u,F=u+d-1,v=0;v<i.length;++v){var A=i.charCodeAt(v);if(A>=55296&&A<=57343){var H=i.charCodeAt(++v);A=65536+((A&1023)<<10)|H&1023}if(A<=127){if(u>=F)break;a[u++>>>0]=A}else if(A<=2047){if(u+1>=F)break;a[u++>>>0]=192|A>>6,a[u++>>>0]=128|A&63}else if(A<=65535){if(u+2>=F)break;a[u++>>>0]=224|A>>12,a[u++>>>0]=128|A>>6&63,a[u++>>>0]=128|A&63}else{if(u+3>=F)break;A>1114111&&He("Invalid Unicode code point "+xt(A)+" encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF)."),a[u++>>>0]=240|A>>18,a[u++>>>0]=128|A>>12&63,a[u++>>>0]=128|A>>6&63,a[u++>>>0]=128|A&63}}return a[u>>>0]=0,u-E}function zt(i,a,u){return O(typeof u=="number","stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),Ji(i,Be,a,u)}function Zu(i,a,u){D("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Zi(i,a){return Be.fill(0,i,i+a),i}function Hr(i,a,u,d,E){switch(a){case 2:u=Yt(u),Zi(i,16),E&&(b[E>>>2]=16),Pe[i>>>1]=a,b[i+4>>>2]=u,Pe[i+2>>>1]=Vr(d);break;case 10:u=Ur(u),Zi(i,28),E&&(b[E>>>2]=28),b[i>>>2]=a,b[i+8>>>2]=u[0],b[i+12>>>2]=u[1],b[i+16>>>2]=u[2],b[i+20>>>2]=u[3],Pe[i+2>>>1]=Vr(d);break;default:return 5}return 0}function el(i,a,u,d,E,F){var v=Nt(i);if(!v.daddr)return-53;var A=Hr(a,v.family,Oe.lookup_name(v.daddr),v.dport,u);return O(!A),0}function tl(i,a,u,d,E,F){var v=Nt(i);return a===1&&u===4?(b[d>>>2]=v.error,b[E>>>2]=4,v.error=null,0):-50}function rl(i,a,u){return tt.varargs=u,0}function nl(i,a){D("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function il(i,a,u){D("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function sl(i,a,u,d){D("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function al(i,a,u,d){tt.varargs=d,D("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function ol(i,a,u,d,E,F){var v=Nt(i),A=v.sock_ops.recvmsg(v,u);if(!A)return 0;if(E){var H=Hr(E,v.family,Oe.lookup_name(A.addr),A.port,F);O(!H)}return Be.set(A.buffer,a>>>0),A.buffer.byteLength}function ul(i,a,u,d){D("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function ll(i){D("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function cl(i,a,u,d,E,F){D("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function dl(i,a,u){D("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function _l(i,a){D("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function fl(i,a,u){D("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}var pl=!0;function hl(){return pl}function ml(i){return X[i>>>2]+b[i+4>>>2]*4294967296}function Bt(i){return i%4===0&&(i%100!==0||i%400===0)}var gl=[0,31,60,91,121,152,182,213,244,274,305,335],bl=[0,31,59,90,120,151,181,212,243,273,304,334];function yl(i){var a=Bt(i.getFullYear()),u=a?gl:bl,d=u[i.getMonth()]+i.getDate()-1;return d}function Sl(i,a){var u=new Date(ml(i)*1e3);b[a>>>2]=u.getSeconds(),b[a+4>>>2]=u.getMinutes(),b[a+8>>>2]=u.getHours(),b[a+12>>>2]=u.getDate(),b[a+16>>>2]=u.getMonth(),b[a+20>>>2]=u.getFullYear()-1900,b[a+24>>>2]=u.getDay();var d=yl(u)|0;b[a+28>>>2]=d,b[a+36>>>2]=-(u.getTimezoneOffset()*60);var E=new Date(u.getFullYear(),0,1),F=new Date(u.getFullYear(),6,1).getTimezoneOffset(),v=E.getTimezoneOffset(),A=(F!=v&&u.getTimezoneOffset()==Math.min(v,F))|0;b[a+32>>>2]=A}function $r(i){for(var a=0,u=0;u<i.length;++u){var d=i.charCodeAt(u);d<=127?a++:d<=2047?a+=2:d>=55296&&d<=57343?(a+=4,++u):a+=3}return a}function es(i){var a=$r(i)+1,u=zr(a);return u&&zt(i,u,a),u}function vl(i,a,u){var d=new Date().getFullYear(),E=new Date(d,0,1),F=new Date(d,6,1),v=E.getTimezoneOffset(),A=F.getTimezoneOffset(),H=Math.max(v,A);X[i>>>2]=H*60,b[a>>>2]=Number(v!=A);function $(le){var be=le.toTimeString().match(/\(([A-Za-z ]+)\)$/);return be?be[1]:"GMT"}var z=$(E),he=$(F),te=es(z),je=es(he);A<v?(X[u>>>2]=te,X[u+4>>>2]=je):(X[u>>>2]=je,X[u+4>>>2]=te)}function El(){D("native code called abort()")}function wl(i,a){D(qi)}function Rl(i,a){return globalThis.DUCKDB_RUNTIME.createDirectory(t,i,a)}function Tl(i,a){return globalThis.DUCKDB_RUNTIME.checkDirectory(t,i,a)}function Al(i,a){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(t,i,a)}function Cl(i,a){return globalThis.DUCKDB_RUNTIME.removeDirectory(t,i,a)}function kl(i){return globalThis.DUCKDB_RUNTIME.closeFile(t,i)}function Dl(i,a){return globalThis.DUCKDB_RUNTIME.checkFile(t,i,a)}function Il(i){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(t,i)}function Pl(i,a,u,d){return globalThis.DUCKDB_RUNTIME.moveFile(t,i,a,u,d)}function Fl(i,a){return globalThis.DUCKDB_RUNTIME.openFile(t,i,a)}function Ml(i,a,u,d){return globalThis.DUCKDB_RUNTIME.readFile(t,i,a,u,d)}function Ll(i,a){return globalThis.DUCKDB_RUNTIME.truncateFile(t,i,a)}function Ol(i,a,u,d){return globalThis.DUCKDB_RUNTIME.writeFile(t,i,a,u,d)}function jl(i){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(i)}function xl(i,a){return globalThis.DUCKDB_RUNTIME.glob(t,i,a)}function Nl(i){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(t,i)}function Bl(i,a,u,d,E,F){return globalThis.DUCKDB_RUNTIME.callScalarUDF(t,i,a,u,d,E,F)}function Ul(i){O(typeof i=="number"),console.error(ct(i))}function Hl(){return Date.now()}function ts(){return 4294901760}function $l(){return ts()}var rs;w&&(global.performance=ee("perf_hooks").performance),rs=()=>performance.now();function Wl(i,a,u){Be.copyWithin(i>>>0,a>>>0,a+u>>>0)}function Gl(i){var a=ue.buffer,u=i-a.byteLength+65535>>>16;try{return ue.grow(u),ae(),1}catch(d){R(`emscripten_realloc_buffer: Attempted to grow heap from ${a.byteLength} bytes to ${i} bytes, but got error: ${d}`)}}function ql(i){var a=Be.length;i=i>>>0,O(i>a);var u=ts();if(i>u)return R(`Cannot enlarge memory, asked to go up to ${i} bytes, but the limit is ${u} bytes!`),!1;for(var d=(H,$)=>H+($-H%$)%$,E=1;E<=4;E*=2){var F=a*(1+.2/E);F=Math.min(F,i+100663296);var v=Math.min(u,d(Math.max(i,F),65536)),A=Gl(v);if(A)return!0}return R(`Failed to grow the heap from ${a} bytes to ${v} bytes, not enough memory!`),!1}var Wr={};function Yl(){return c||"./this.program"}function Ut(){if(!Ut.strings){var i=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",a={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:i,_:Yl()};for(var u in Wr)Wr[u]===void 0?delete a[u]:a[u]=Wr[u];var d=[];for(var u in a)d.push(`${u}=${a[u]}`);Ut.strings=d}return Ut.strings}function Vl(i,a){for(var u=0;u<i.length;++u)O(i.charCodeAt(u)===(i.charCodeAt(u)&255)),Ee[a++>>>0]=i.charCodeAt(u);Ee[a>>>0]=0}function zl(i,a){var u=0;return Ut().forEach(function(d,E){var F=a+u;X[i+E*4>>>2]=F,Vl(d,F),u+=d.length+1}),0}function Kl(i,a){var u=Ut();X[i>>>2]=u.length;var d=0;return u.forEach(function(E){d+=E.length+1}),X[a>>>2]=d,0}function Ql(i){D("fd_close called without SYSCALLS_REQUIRE_FILESYSTEM")}function Xl(i,a){var u=0,d=0,E=0;{O(i==0||i==1||i==2);var F=2;i==0?u=2:(i==1||i==2)&&(u=64),E=1}return Ee[a>>>0]=F,Pe[a+2>>>1]=E,vt=[u>>>0,(Le=u,+Math.abs(Le)>=1?Le>0?+Math.floor(Le/4294967296)>>>0:~~+Math.ceil((Le-+(~~Le>>>0))/4294967296)>>>0:0)],b[a+8>>>2]=vt[0],b[a+12>>>2]=vt[1],vt=[d>>>0,(Le=d,+Math.abs(Le)>=1?Le>0?+Math.floor(Le/4294967296)>>>0:~~+Math.ceil((Le-+(~~Le>>>0))/4294967296)>>>0:0)],b[a+16>>>2]=vt[0],b[a+20>>>2]=vt[1],0}function Jl(i,a,u,d,E,F){D("fd_pread called without SYSCALLS_REQUIRE_FILESYSTEM")}function Zl(i,a,u,d,E,F){D("fd_pwrite called without SYSCALLS_REQUIRE_FILESYSTEM")}function ec(i,a,u,d){D("fd_read called without SYSCALLS_REQUIRE_FILESYSTEM")}function tc(i,a,u,d,E){return 70}function rc(i){D("fd_sync called without SYSCALLS_REQUIRE_FILESYSTEM")}var Gr=[null,[],[]];function qr(i,a){var u=Gr[i];O(u),a===0||a===10?((i===1?L:R)(Vi(u,0)),u.length=0):u.push(a)}function nc(){qc(0),Gr[1].length&&qr(1,10),Gr[2].length&&qr(2,10)}function ic(i,a,u,d){for(var E=0,F=0;F<u;F++){var v=X[a>>>2],A=X[a+4>>>2];a+=8;for(var H=0;H<A;H++)qr(i,Be[v+H>>>0]);E+=A}return X[d>>>2]=E,0}function sc(i,a,u,d){var E=[],F=null,v=0,A=0,H=0,$=0,z=0,he=0,te,je;function le(be,rt,Qe,T,B,ve){var ie,we,Te,dt;return we=be===10?28:16,B=be===10?Ki(B):Br(B),ie=zr(we),dt=Hr(ie,be,B,ve),O(!dt),Te=zr(32),b[Te+4>>>2]=be,b[Te+8>>>2]=rt,b[Te+12>>>2]=Qe,X[Te+24>>>2]=T,X[Te+20>>>2]=ie,be===10?b[Te+16>>>2]=28:b[Te+16>>>2]=16,b[Te+28>>>2]=0,Te}if(u&&(H=b[u>>>2],$=b[u+4>>>2],z=b[u+8>>>2],he=b[u+12>>>2]),z&&!he&&(he=z===2?17:6),!z&&he&&(z=he===17?2:1),he===0&&(he=6),z===0&&(z=1),!i&&!a)return-2;if(H&-1088||u!==0&&b[u>>>2]&2&&!i)return-1;if(H&32)return-2;if(z!==0&&z!==1&&z!==2)return-7;if($!==0&&$!==2&&$!==10)return-6;if(a&&(a=ct(a),A=parseInt(a,10),isNaN(A)))return H&1024?-2:-8;if(!i)return $===0&&($=2),(H&1)===0&&($===2?v=Yr(2130706433):v=[0,0,0,1]),te=le($,z,he,null,v,A),X[d>>>2]=te,0;if(i=ct(i),v=Yt(i),v!==null)if($===0||$===2)$=2;else if($===10&&H&8)v=[0,0,Yr(65535),v],$=10;else return-2;else if(v=Ur(i),v!==null)if($===0||$===10)$=10;else return-2;return v!=null?(te=le($,z,he,i,v,A),X[d>>>2]=te,0):H&4?-2:(i=Oe.lookup_name(i),v=Yt(i),$===0?$=2:$===10&&(v=[0,0,Yr(65535),v]),te=le($,z,he,null,v,A),X[d>>>2]=te,0)}function ac(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return d=>crypto.getRandomValues(d);if(w)try{var i=ee("crypto"),a=i.randomFillSync;if(a)return d=>i.randomFillSync(d);var u=i.randomBytes;return d=>(d.set(u(d.byteLength)),d)}catch{}D("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };")}function ns(i){return(ns=ac())(i)}function oc(i,a){return ns(Be.subarray(i>>>0,i+a>>>0)),0}function uc(i,a,u,d,E,F,v){var A=Qi(i,a);if(A.errno)return-6;var H=A.port,$=A.addr,z=!1;if(u&&d){var he;if(v&1||!(he=Oe.lookup_addr($))){if(v&8)return-2}else $=he;var te=zt($,u,d);te+1>=d&&(z=!0)}if(E&&F){H=""+H;var te=zt(H,E,F);te+1>=F&&(z=!0)}return z?-12:0}function lc(i,a){for(var u=0,d=0;d<=a;u+=i[d++]);return u}var is=[31,29,31,30,31,30,31,31,30,31,30,31],ss=[31,28,31,30,31,30,31,31,30,31,30,31];function cc(i,a){for(var u=new Date(i.getTime());a>0;){var d=Bt(u.getFullYear()),E=u.getMonth(),F=(d?is:ss)[E];if(a>F-u.getDate())a-=F-u.getDate()+1,u.setDate(1),E<11?u.setMonth(E+1):(u.setMonth(0),u.setFullYear(u.getFullYear()+1));else return u.setDate(u.getDate()+a),u}return u}function dc(i,a,u){var d=u>0?u:$r(i)+1,E=new Array(d),F=Ji(i,E,0,E.length);return a&&(E.length=F),E}function as(i,a){O(i.length>=0,"writeArrayToMemory array must have a length (should be an array or typed array)"),Ee.set(i,a>>>0)}function _c(i,a,u,d){var E=b[d+40>>>2],F={tm_sec:b[d>>>2],tm_min:b[d+4>>>2],tm_hour:b[d+8>>>2],tm_mday:b[d+12>>>2],tm_mon:b[d+16>>>2],tm_year:b[d+20>>>2],tm_wday:b[d+24>>>2],tm_yday:b[d+28>>>2],tm_isdst:b[d+32>>>2],tm_gmtoff:b[d+36>>>2],tm_zone:E?ct(E):""},v=ct(u),A={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var H in A)v=v.replace(new RegExp(H,"g"),A[H]);var $=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],z=["January","February","March","April","May","June","July","August","September","October","November","December"];function he(T,B,ve){for(var ie=typeof T=="number"?T.toString():T||"";ie.length<B;)ie=ve[0]+ie;return ie}function te(T,B){return he(T,B,"0")}function je(T,B){function ve(we){return we<0?-1:we>0?1:0}var ie;return(ie=ve(T.getFullYear()-B.getFullYear()))===0&&(ie=ve(T.getMonth()-B.getMonth()))===0&&(ie=ve(T.getDate()-B.getDate())),ie}function le(T){switch(T.getDay()){case 0:return new Date(T.getFullYear()-1,11,29);case 1:return T;case 2:return new Date(T.getFullYear(),0,3);case 3:return new Date(T.getFullYear(),0,2);case 4:return new Date(T.getFullYear(),0,1);case 5:return new Date(T.getFullYear()-1,11,31);case 6:return new Date(T.getFullYear()-1,11,30)}}function be(T){var B=cc(new Date(T.tm_year+1900,0,1),T.tm_yday),ve=new Date(B.getFullYear(),0,4),ie=new Date(B.getFullYear()+1,0,4),we=le(ve),Te=le(ie);return je(we,B)<=0?je(Te,B)<=0?B.getFullYear()+1:B.getFullYear():B.getFullYear()-1}var rt={"%a":function(T){return $[T.tm_wday].substring(0,3)},"%A":function(T){return $[T.tm_wday]},"%b":function(T){return z[T.tm_mon].substring(0,3)},"%B":function(T){return z[T.tm_mon]},"%C":function(T){var B=T.tm_year+1900;return te(B/100|0,2)},"%d":function(T){return te(T.tm_mday,2)},"%e":function(T){return he(T.tm_mday,2," ")},"%g":function(T){return be(T).toString().substring(2)},"%G":function(T){return be(T)},"%H":function(T){return te(T.tm_hour,2)},"%I":function(T){var B=T.tm_hour;return B==0?B=12:B>12&&(B-=12),te(B,2)},"%j":function(T){return te(T.tm_mday+lc(Bt(T.tm_year+1900)?is:ss,T.tm_mon-1),3)},"%m":function(T){return te(T.tm_mon+1,2)},"%M":function(T){return te(T.tm_min,2)},"%n":function(){return`
`},"%p":function(T){return T.tm_hour>=0&&T.tm_hour<12?"AM":"PM"},"%S":function(T){return te(T.tm_sec,2)},"%t":function(){return"	"},"%u":function(T){return T.tm_wday||7},"%U":function(T){var B=T.tm_yday+7-T.tm_wday;return te(Math.floor(B/7),2)},"%V":function(T){var B=Math.floor((T.tm_yday+7-(T.tm_wday+6)%7)/7);if((T.tm_wday+371-T.tm_yday-2)%7<=2&&B++,B){if(B==53){var ie=(T.tm_wday+371-T.tm_yday)%7;ie!=4&&(ie!=3||!Bt(T.tm_year))&&(B=1)}}else{B=52;var ve=(T.tm_wday+7-T.tm_yday-1)%7;(ve==4||ve==5&&Bt(T.tm_year%400-1))&&B++}return te(B,2)},"%w":function(T){return T.tm_wday},"%W":function(T){var B=T.tm_yday+7-(T.tm_wday+6)%7;return te(Math.floor(B/7),2)},"%y":function(T){return(T.tm_year+1900).toString().substring(2)},"%Y":function(T){return T.tm_year+1900},"%z":function(T){var B=T.tm_gmtoff,ve=B>=0;return B=Math.abs(B)/60,B=B/60*100+B%60,(ve?"+":"-")+String("0000"+B).slice(-4)},"%Z":function(T){return T.tm_zone},"%%":function(){return"%"}};v=v.replace(/%%/g,"\0\0");for(var H in rt)v.includes(H)&&(v=v.replace(new RegExp(H,"g"),rt[H](F)));v=v.replace(/\0\0/g,"%");var Qe=dc(v,!1);return Qe.length>a?0:(as(Qe,i),Qe.length-1)}function fc(i,a,u,d,E){return _c(i,a,u,d)}function pc(){R("missing function: ucnv_close_64"),D(-1)}function hc(){R("missing function: ucnv_convertEx_64"),D(-1)}function mc(){R("missing function: ucnv_open_64"),D(-1)}function gc(){R("missing function: ucnv_toAlgorithmic_64"),D(-1)}function bc(){R("missing function: ucsdet_close_64"),D(-1)}function yc(){R("missing function: ucsdet_detect_64"),D(-1)}function Sc(){R("missing function: ucsdet_getConfidence_64"),D(-1)}function vc(){R("missing function: ucsdet_getName_64"),D(-1)}function Ec(){R("missing function: ucsdet_open_64"),D(-1)}function wc(){R("missing function: ucsdet_setText_64"),D(-1)}function Rc(){R("missing function: unzClose"),D(-1)}function Tc(){R("missing function: unzCloseCurrentFile"),D(-1)}function Ac(){R("missing function: unzGetCurrentFileInfo"),D(-1)}function Cc(){R("missing function: unzGetCurrentFileInfo64"),D(-1)}function kc(){R("missing function: unzGetGlobalInfo"),D(-1)}function Dc(){R("missing function: unzGoToFirstFile"),D(-1)}function Ic(){R("missing function: unzGoToNextFile"),D(-1)}function Pc(){R("missing function: unzLocateFile"),D(-1)}function Fc(){R("missing function: unzOpen"),D(-1)}function Mc(){R("missing function: unzOpen2"),D(-1)}function Lc(){R("missing function: unzOpenCurrentFile"),D(-1)}function Oc(){R("missing function: unzReadCurrentFile"),D(-1)}function jc(i){ke=i,Bi()||(t.onExit&&t.onExit(i),Q=!0),_(i,new Nr(i))}function xc(i,a){if(ke=i,Zc(),Bi()&&!a){var u=`program exited (with status: ${i}), but keepRuntimeAlive() is set (counter=${Ni}) due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)`;s(u),R(u)}jc(i)}function Nc(i){if(i instanceof Nr||i=="unwind")return ke;oe(),i instanceof WebAssembly.RuntimeError&&_s()<=0&&R("Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to 65536)"),_(1,i)}function Bc(i){var a=t["_"+i];return O(a,"Cannot call unknown function "+i+", make sure it is exported"),a}function Uc(i){var a=$r(i)+1,u=Qr(a);return zt(i,u,a),u}function Hc(i,a,u,d,E){var F={string:le=>{var be=0;return le!=null&&le!==0&&(be=Uc(le)),be},array:le=>{var be=Qr(le.length);return as(le,be),be}};function v(le){return a==="string"?ct(le):a==="boolean"?Boolean(le):le}var A=Bc(i),H=[],$=0;if(O(a!=="array",'Return type should not be "array".'),d)for(var z=0;z<d.length;z++){var he=F[u[z]];he?($===0&&($=cs()),H[z]=he(d[z])):H[z]=d[z]}var te=A.apply(null,H);function je(le){return $!==0&&ds($),v(le)}return te=je(te),te}function $c(){Au("fetchSettings")}var os={XML_GetBuffer:Du,XML_GetErrorCode:Iu,XML_Parse:Pu,XML_ParseBuffer:Fu,XML_ParserCreate:Mu,XML_ParserFree:Lu,XML_ResumeParser:Ou,XML_SetCharacterDataHandler:ju,XML_SetElementHandler:xu,XML_SetUserData:Nu,XML_StopParser:Bu,__cxa_throw:Wu,__dlsym:Gu,__syscall__newselect:qu,__syscall_bind:Vu,__syscall_connect:zu,__syscall_faccessat:Ku,__syscall_fcntl64:Qu,__syscall_fstat64:Xu,__syscall_ftruncate64:Ju,__syscall_getdents64:Zu,__syscall_getpeername:el,__syscall_getsockopt:tl,__syscall_ioctl:rl,__syscall_lstat64:nl,__syscall_mkdirat:il,__syscall_newfstatat:sl,__syscall_openat:al,__syscall_recvfrom:ol,__syscall_renameat:ul,__syscall_rmdir:ll,__syscall_sendto:cl,__syscall_socket:dl,__syscall_stat64:_l,__syscall_unlinkat:fl,_emscripten_get_now_is_monotonic:hl,_localtime_js:Sl,_tzset_js:vl,abort:El,dlopen:wl,duckdb_web_fs_directory_create:Rl,duckdb_web_fs_directory_exists:Tl,duckdb_web_fs_directory_list_files:Al,duckdb_web_fs_directory_remove:Cl,duckdb_web_fs_file_close:kl,duckdb_web_fs_file_exists:Dl,duckdb_web_fs_file_get_last_modified_time:Il,duckdb_web_fs_file_move:Pl,duckdb_web_fs_file_open:Fl,duckdb_web_fs_file_read:Ml,duckdb_web_fs_file_truncate:Ll,duckdb_web_fs_file_write:Ol,duckdb_web_fs_get_default_data_protocol:jl,duckdb_web_fs_glob:xl,duckdb_web_test_platform_feature:Nl,duckdb_web_udf_scalar_call:Bl,emscripten_console_error:Ul,emscripten_date_now:Hl,emscripten_get_heap_max:$l,emscripten_get_now:rs,emscripten_memcpy_big:Wl,emscripten_resize_heap:ql,environ_get:zl,environ_sizes_get:Kl,fd_close:Ql,fd_fdstat_get:Xl,fd_pread:Jl,fd_pwrite:Zl,fd_read:ec,fd_seek:tc,fd_sync:rc,fd_write:ic,getaddrinfo:sc,getentropy:oc,getnameinfo:uc,strftime_l:fc,ucnv_close_64:pc,ucnv_convertEx_64:hc,ucnv_open_64:mc,ucnv_toAlgorithmic_64:gc,ucsdet_close_64:bc,ucsdet_detect_64:yc,ucsdet_getConfidence_64:Sc,ucsdet_getName_64:vc,ucsdet_open_64:Ec,ucsdet_setText_64:wc,unzClose:Rc,unzCloseCurrentFile:Tc,unzGetCurrentFileInfo:Ac,unzGetCurrentFileInfo64:Cc,unzGetGlobalInfo:kc,unzGoToFirstFile:Dc,unzGoToNextFile:Ic,unzLocateFile:Pc,unzOpen:Fc,unzOpen2:Mc,unzOpenCurrentFile:Lc,unzReadCurrentFile:Oc},Ch=Tu(),kh=g("__wasm_call_ctors"),Wc=t._main=g("main"),Dh=t._duckdb_web_fs_glob_add_path=g("duckdb_web_fs_glob_add_path"),Ih=t._duckdb_web_clear_response=g("duckdb_web_clear_response"),Ph=t._duckdb_web_fail_with=g("duckdb_web_fail_with"),Fh=t._duckdb_web_reset=g("duckdb_web_reset"),Mh=t._duckdb_web_connect=g("duckdb_web_connect"),Lh=t._duckdb_web_disconnect=g("duckdb_web_disconnect"),Oh=t._duckdb_web_flush_files=g("duckdb_web_flush_files"),jh=t._duckdb_web_flush_file=g("duckdb_web_flush_file"),xh=t._duckdb_web_open=g("duckdb_web_open"),Nh=t._duckdb_web_get_global_file_info=g("duckdb_web_get_global_file_info"),Bh=t._duckdb_web_collect_file_stats=g("duckdb_web_collect_file_stats"),Uh=t._duckdb_web_export_file_stats=g("duckdb_web_export_file_stats"),Hh=t._duckdb_web_fs_drop_file=g("duckdb_web_fs_drop_file"),$h=t._duckdb_web_fs_drop_files=g("duckdb_web_fs_drop_files"),Wh=t._duckdb_web_fs_glob_file_infos=g("duckdb_web_fs_glob_file_infos"),Gh=t._duckdb_web_fs_get_file_info_by_id=g("duckdb_web_fs_get_file_info_by_id"),qh=t._duckdb_web_fs_get_file_info_by_name=g("duckdb_web_fs_get_file_info_by_name"),Yh=t._duckdb_web_fs_register_file_url=g("duckdb_web_fs_register_file_url"),Vh=t._duckdb_web_fs_register_file_buffer=g("duckdb_web_fs_register_file_buffer"),zh=t._duckdb_web_copy_file_to_buffer=g("duckdb_web_copy_file_to_buffer"),Kh=t._duckdb_web_copy_file_to_path=g("duckdb_web_copy_file_to_path"),Qh=t._duckdb_web_get_version=g("duckdb_web_get_version"),Xh=t._duckdb_web_get_feature_flags=g("duckdb_web_get_feature_flags"),Jh=t._duckdb_web_tokenize=g("duckdb_web_tokenize"),Zh=t._duckdb_web_udf_scalar_create=g("duckdb_web_udf_scalar_create"),em=t._duckdb_web_prepared_create=g("duckdb_web_prepared_create"),tm=t._duckdb_web_prepared_close=g("duckdb_web_prepared_close"),rm=t._duckdb_web_prepared_run=g("duckdb_web_prepared_run"),nm=t._duckdb_web_prepared_send=g("duckdb_web_prepared_send"),im=t._duckdb_web_query_run=g("duckdb_web_query_run"),sm=t._duckdb_web_pending_query_start=g("duckdb_web_pending_query_start"),am=t._duckdb_web_pending_query_poll=g("duckdb_web_pending_query_poll"),om=t._duckdb_web_pending_query_cancel=g("duckdb_web_pending_query_cancel"),um=t._duckdb_web_query_fetch_results=g("duckdb_web_query_fetch_results"),lm=t._duckdb_web_get_tablenames=g("duckdb_web_get_tablenames"),cm=t._duckdb_web_insert_arrow_from_ipc_stream=g("duckdb_web_insert_arrow_from_ipc_stream"),dm=t._duckdb_web_insert_csv_from_path=g("duckdb_web_insert_csv_from_path"),_m=t._duckdb_web_insert_json_from_path=g("duckdb_web_insert_json_from_path"),Gc=g("__errno_location"),qc=t._fflush=g("fflush"),Yr=g("htonl"),Vr=g("htons"),us=g("ntohs"),zr=t._malloc=g("malloc"),fm=t._free=g("free"),ls=function(){return(ls=t.asm.emscripten_stack_init).apply(null,arguments)},Yc=function(){return(Yc=t.asm.emscripten_stack_get_free).apply(null,arguments)},Vc=function(){return(Vc=t.asm.emscripten_stack_get_base).apply(null,arguments)},Kr=function(){return(Kr=t.asm.emscripten_stack_get_end).apply(null,arguments)},cs=g("stackSave"),ds=g("stackRestore"),Qr=g("stackAlloc"),_s=function(){return(_s=t.asm.emscripten_stack_get_current).apply(null,arguments)},zc=g("__cxa_is_pointer_type"),pm=t.dynCall_jiji=g("dynCall_jiji"),hm=t.dynCall_iiiiij=g("dynCall_iiiiij"),mm=t.dynCall_iiiiijj=g("dynCall_iiiiijj"),gm=t.dynCall_iiiiiijj=g("dynCall_iiiiiijj"),bm=t.dynCall_viijii=g("dynCall_viijii"),ym=t.dynCall_viijji=g("dynCall_viijji"),Sm=t.dynCall_iiiji=g("dynCall_iiiji"),vm=t.dynCall_ji=g("dynCall_ji"),Em=t.dynCall_viij=g("dynCall_viij"),wm=t.dynCall_vij=g("dynCall_vij"),Rm=t.dynCall_vjjijij=g("dynCall_vjjijij"),Tm=t.dynCall_vijjji=g("dynCall_vijjji"),Am=t.dynCall_vjjii=g("dynCall_vjjii"),Cm=t.dynCall_viiiiiji=g("dynCall_viiiiiji"),km=t.dynCall_jiiiji=g("dynCall_jiiiji"),Dm=t.dynCall_jiiij=g("dynCall_jiiij"),Im=t.dynCall_jijjij=g("dynCall_jijjij"),Pm=t.dynCall_iiij=g("dynCall_iiij"),Fm=t.dynCall_vijjj=g("dynCall_vijjj"),Mm=t.dynCall_vijj=g("dynCall_vijj"),Lm=t.dynCall_viijj=g("dynCall_viijj"),Om=t.dynCall_jiijii=g("dynCall_jiijii"),jm=t.dynCall_jijiii=g("dynCall_jijiii"),xm=t.dynCall_viijiiiii=g("dynCall_viijiiiii"),Nm=t.dynCall_viijiiij=g("dynCall_viijiiij"),Bm=t.dynCall_vijiiiji=g("dynCall_vijiiiji"),Um=t.dynCall_viiiij=g("dynCall_viiiij"),Hm=t.dynCall_jiiji=g("dynCall_jiiji"),$m=t.dynCall_viiijij=g("dynCall_viiijij"),Wm=t.dynCall_viijiij=g("dynCall_viijiij"),Gm=t.dynCall_viiiiijj=g("dynCall_viiiiijj"),qm=t.dynCall_viiijji=g("dynCall_viiijji"),Ym=t.dynCall_vijii=g("dynCall_vijii"),Vm=t.dynCall_iiiiiji=g("dynCall_iiiiiji"),zm=t.dynCall_iij=g("dynCall_iij"),Km=t.dynCall_iiijj=g("dynCall_iiijj"),Qm=t.dynCall_iijii=g("dynCall_iijii"),Xm=t.dynCall_viji=g("dynCall_viji"),Jm=t.dynCall_iiji=g("dynCall_iiji"),Zm=t.dynCall_viijjj=g("dynCall_viijjj"),eg=t.dynCall_viiijj=g("dynCall_viiijj"),tg=t.dynCall_jijj=g("dynCall_jijj"),rg=t.dynCall_jiiiii=g("dynCall_jiiiii"),ng=t.dynCall_jiiii=g("dynCall_jiiii"),ig=t.dynCall_jii=g("dynCall_jii"),sg=t.dynCall_viijij=g("dynCall_viijij"),ag=t.dynCall_viiij=g("dynCall_viiij"),og=t.dynCall_j=g("dynCall_j"),ug=t.dynCall_viiijiiiijj=g("dynCall_viiijiiiijj"),lg=t.dynCall_jiiiij=g("dynCall_jiiiij"),cg=t.dynCall_jj=g("dynCall_jj"),dg=t.dynCall_ij=g("dynCall_ij"),_g=t.dynCall_ijjj=g("dynCall_ijjj"),fg=t.dynCall_jjjd=g("dynCall_jjjd"),pg=t.dynCall_jjjjjjd=g("dynCall_jjjjjjd"),hg=t.dynCall_jij=g("dynCall_jij"),mg=t.dynCall_viiijiiijii=g("dynCall_viiijiiijii"),gg=t.dynCall_viijijiiii=g("dynCall_viijijiiii"),bg=t.dynCall_viiji=g("dynCall_viiji"),yg=t.dynCall_jiiiijj=g("dynCall_jiiiijj"),Sg=t.dynCall_viiiji=g("dynCall_viiiji"),vg=t.dynCall_viiiiji=g("dynCall_viiiiji"),Eg=t.dynCall_jijiiii=g("dynCall_jijiiii"),wg=t.dynCall_viiijiji=g("dynCall_viiijiji"),Rg=t.dynCall_viijiji=g("dynCall_viijiji"),Tg=t.dynCall_jiii=g("dynCall_jiii");t.stackAlloc=Qr,t.stackSave=cs,t.stackRestore=ds,t.ccall=Hc;var Kc=["getHostByName","traverseStack","getCallstack","emscriptenLog","convertPCtoSourceLocation","readEmAsmArgs","jstoi_s","listenOnce","autoResumeAudioContext","dynCallLegacy","getDynCaller","dynCall","runtimeKeepalivePush","runtimeKeepalivePop","callUserCallback","maybeExit","safeSetTimeout","asmjsMangle","asyncLoad","alignMemory","mmapAlloc","HandleAllocator","getNativeTypeSize","STACK_SIZE","STACK_ALIGN","POINTER_SIZE","ASSERTIONS","writeI53ToI64","writeI53ToI64Clamped","writeI53ToI64Signaling","writeI53ToU64Clamped","writeI53ToU64Signaling","readI53FromU64","convertI32PairToI53","convertU32PairToI53","cwrap","uleb128Encode","sigToWasmTypes","generateFuncType","convertJsFunctionToWasm","getEmptyTableSlot","updateTableMap","getFunctionAddress","addFunction","removeFunction","reallyNegative","unSign","strLen","reSign","formatString","intArrayToString","AsciiToString","UTF16ToString","stringToUTF16","lengthBytesUTF16","UTF32ToString","stringToUTF32","lengthBytesUTF32","registerKeyEventCallback","maybeCStringToJsString","findEventTarget","findCanvasEventTarget","getBoundingClientRect","fillMouseEventData","registerMouseEventCallback","registerWheelEventCallback","registerUiEventCallback","registerFocusEventCallback","fillDeviceOrientationEventData","registerDeviceOrientationEventCallback","fillDeviceMotionEventData","registerDeviceMotionEventCallback","screenOrientation","fillOrientationChangeEventData","registerOrientationChangeEventCallback","fillFullscreenChangeEventData","registerFullscreenChangeEventCallback","JSEvents_requestFullscreen","JSEvents_resizeCanvasForFullscreen","registerRestoreOldStyle","hideEverythingExceptGivenElement","restoreHiddenElements","setLetterbox","softFullscreenResizeWebGLRenderTarget","doRequestFullscreen","fillPointerlockChangeEventData","registerPointerlockChangeEventCallback","registerPointerlockErrorEventCallback","requestPointerLock","fillVisibilityChangeEventData","registerVisibilityChangeEventCallback","registerTouchEventCallback","fillGamepadEventData","registerGamepadEventCallback","registerBeforeUnloadEventCallback","fillBatteryEventData","battery","registerBatteryEventCallback","setCanvasElementSize","getCanvasElementSize","demangle","demangleAll","jsStackTrace","stackTrace","checkWasiClock","wasiRightsToMuslOFlags","wasiOFlagsToMuslOFlags","createDyncallWrapper","setImmediateWrapped","clearImmediateWrapped","polyfillSetImmediate","getPromise","makePromise","idsToPromises","makePromiseCallback","setMainLoop","heapObjectForWebGLType","heapAccessShiftForWebGLHeap","webgl_enable_ANGLE_instanced_arrays","webgl_enable_OES_vertex_array_object","webgl_enable_WEBGL_draw_buffers","webgl_enable_WEBGL_multi_draw","emscriptenWebGLGet","computeUnpackAlignedImageSize","colorChannelsInGlTextureFormat","emscriptenWebGLGetTexPixelData","__glGenObject","emscriptenWebGLGetUniform","webglGetUniformLocation","webglPrepareUniformLocationsBeforeFirstUse","webglGetLeftBracePos","emscriptenWebGLGetVertexAttrib","__glGetActiveAttribOrUniform","writeGLArray","registerWebGlEventCallback","runAndAbortIfError","SDL_unicode","SDL_ttfContext","SDL_audio","GLFW_Window","ALLOC_NORMAL","ALLOC_STACK","allocate","writeStringToMemory","writeAsciiToMemory"];Kc.forEach(ku);var Qc=["run","addOnPreRun","addOnInit","addOnPreMain","addOnExit","addOnPostRun","addRunDependency","removeRunDependency","FS_createFolder","FS_createPath","FS_createDataFile","FS_createLazyFile","FS_createLink","FS_createDevice","FS_unlink","out","err","callMain","abort","keepRuntimeAlive","wasmMemory","getTempRet0","setTempRet0","writeStackCookie","checkStackCookie","ptrToString","zeroMemory","exitJS","getHeapMax","emscripten_realloc_buffer","ENV","MONTH_DAYS_REGULAR","MONTH_DAYS_LEAP","MONTH_DAYS_REGULAR_CUMULATIVE","MONTH_DAYS_LEAP_CUMULATIVE","isLeapYear","ydayFromDate","arraySum","addDays","ERRNO_CODES","ERRNO_MESSAGES","setErrNo","inetPton4","inetNtop4","inetPton6","inetNtop6","readSockaddr","writeSockaddr","DNS","Protocols","Sockets","initRandomFill","randomFill","timers","warnOnce","UNWIND_CACHE","readEmAsmArgsArray","jstoi_q","getExecutableName","handleException","readI53FromI64","convertI32PairToI53Checked","getCFunc","freeTableIndexes","functionsInTableMap","setValue","getValue","PATH","PATH_FS","UTF8Decoder","UTF8ArrayToString","UTF8ToString","stringToUTF8Array","stringToUTF8","lengthBytesUTF8","intArrayFromString","stringToAscii","UTF16Decoder","stringToNewUTF8","stringToUTF8OnStack","writeArrayToMemory","JSEvents","specialHTMLTargets","currentFullscreenStrategy","restoreOldWindowedStyle","ExitStatus","getEnvStrings","flush_NO_FILESYSTEM","dlopenMissingError","promiseMap","uncaughtExceptionCount","exceptionLast","exceptionCaught","ExceptionInfo","Browser","wget","SYSCALLS","getSocketFromFD","getSocketAddress","tempFixedLengthArray","miniTempWebGLFloatBuffers","miniTempWebGLIntBuffers","GL","emscripten_webgl_power_preferences","AL","GLUT","EGL","GLEW","IDBStore","SDL","SDL_gfx","GLFW","allocateUTF8","allocateUTF8OnStack","SOCKFS","FS"];Qc.forEach(Gi);var Kt;jt=function i(){Kt||fs(),Kt||(jt=i)};function Xc(){O(et==0,'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])'),O(Se.length==0,"cannot call main when preRun functions remain to be called");var i=Wc,a=0,u=0;try{var d=i(a,u);return xc(d,!0),d}catch(E){return Nc(E)}}function Jc(){ls(),V()}function fs(){if(et>0||(Jc(),fu(),et>0))return;function i(){Kt||(Kt=!0,t.calledRun=!0,!Q&&(pu(),hu(),n(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),ps&&Xc(),mu()))}t.setStatus?(t.setStatus("Running..."),setTimeout(function(){setTimeout(function(){t.setStatus("")},1),i()},1)):i(),oe()}function Zc(){var i=L,a=R,u=!1;L=R=d=>{u=!0};try{nc()}catch{}L=i,R=a,u&&(He("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc."),He("(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)"))}if(t.preInit)for(typeof t.preInit=="function"&&(t.preInit=[t.preInit]);t.preInit.length>0;)t.preInit.pop()();var ps=!0;return t.noInitialRun&&(ps=!1),fs(),e.ready}})(),er=cd;var $e=Et(require("apache-arrow")),tr=class{constructor(e,t){this._bindings=e,this._conn=t}close(){this._bindings.disconnect(this._conn)}useUnsafe(e){return e(this._bindings,this._conn)}query(e){let t=this._bindings.runQuery(this._conn,e),n=$e.RecordBatchReader.from(t);return console.assert(n.isSync()),console.assert(n.isFile()),new $e.Table(n)}async send(e){let t=this._bindings.startPendingQuery(this._conn,e);for(;t==null;)t=await new Promise((o,l)=>{try{o(this._bindings.pollPendingQuery(this._conn))}catch(c){l(c)}});let n=new rr(this._bindings,this._conn,t),s=$e.RecordBatchReader.from(n);return console.assert(s.isSync()),console.assert(s.isStream()),s}cancelSent(){return this._bindings.cancelPendingQuery(this._conn)}getTableNames(e){return this._bindings.getTableNames(this._conn,e)}prepare(e){let t=this._bindings.createPrepared(this._conn,e);return new Xr(this._bindings,this._conn,t)}createScalarFunction(e,t,n){this._bindings.createScalarFunction(this._conn,e,t,n)}insertArrowTable(e,t){let n=$e.tableToIPC(e,"stream");this.insertArrowFromIPCStream(n,t)}insertArrowFromIPCStream(e,t){this._bindings.insertArrowFromIPCStream(this._conn,e,t)}insertCSVFromPath(e,t){this._bindings.insertCSVFromPath(this._conn,e,t)}insertJSONFromPath(e,t){this._bindings.insertJSONFromPath(this._conn,e,t)}},rr=class{constructor(e,t,n){this.bindings=e;this.conn=t;this.header=n;this._first=!0,this._depleted=!1}next(){if(this._first)return this._first=!1,{done:!1,value:this.header};if(this._depleted)return{done:!0,value:null};let e=this.bindings.fetchQueryResults(this.conn);return this._depleted=e.length==0,{done:this._depleted,value:e}}[Symbol.iterator](){return this}},Xr=class{constructor(e,t,n){this.bindings=e,this.connectionId=t,this.statementId=n}close(){this.bindings.closePrepared(this.connectionId,this.statementId)}query(...e){let t=this.bindings.runPrepared(this.connectionId,this.statementId,e),n=$e.RecordBatchReader.from(t);return console.assert(n.isSync()),console.assert(n.isFile()),new $e.Table(n)}send(...e){let t=this.bindings.sendPrepared(this.connectionId,this.statementId,e),n=new rr(this.bindings,this.connectionId,t),s=$e.RecordBatchReader.from(n);return console.assert(s.isSync()),console.assert(s.isStream()),s}};var ys=new TextEncoder,gs=new TextDecoder("utf-8");function Jr(r,e,t){let n=ys.encode(t),s=r._malloc(n.byteLength),o=r.HEAPU8.subarray(s,s+n.byteLength);o.set(n),r.HEAPF64[(e>>3)+0]=1,r.HEAPF64[(e>>3)+1]=s,r.HEAPF64[(e>>3)+2]=o.byteLength}function en(r){switch(r){case"UINT8":case"INT8":return 1;case"INT32":case"FLOAT":return 4;case"INT64":case"UINT64":case"DOUBLE":case"VARCHAR":return 8;default:return 0}}function Zr(r,e,t,n){let s=r.HEAPU8.subarray(e,e+n*en(t));switch(t){case"UINT8":return new Uint8Array(s.buffer,s.byteOffset,n);case"INT8":return new Int8Array(s.buffer,s.byteOffset,n);case"INT32":return new Int32Array(s.buffer,s.byteOffset,n);case"FLOAT":return new Float32Array(s.buffer,s.byteOffset,n);case"DOUBLE":return new Float64Array(s.buffer,s.byteOffset,n);case"VARCHAR":return new Float64Array(s.buffer,s.byteOffset,n);default:return new Array(0)}}function bs(r,e,t){let n=r.HEAPU8.subarray(e,e+t);return new Uint8Array(n.buffer,n.byteOffset,t)}function nr(r,e,t){let n=r.HEAPU8.subarray(e,e+t*8);return new Float64Array(n.buffer,n.byteOffset,t)}function Ss(r,e,t,n,s,o,l,c){try{let _=r._udfFunctions.get(n);if(!_){Jr(e,t,"Unknown UDF with id: "+n);return}let S=gs.decode(e.HEAPU8.subarray(s,s+o)),f=JSON.parse(S),w=nr(e,l,c/8),y=L=>{var m;let R=null;switch(L.validityBuffer!==void 0&&(R=bs(e,w[L.validityBuffer],f.rows)),L.physicalType){case"VARCHAR":{if(L.dataBuffer===null||L.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for VARCHAR argument");if(L.lengthBuffer===null||L.lengthBuffer===void 0)throw new Error("malformed data view, expected data length buffer for VARCHAR argument");let K=Zr(e,w[L.dataBuffer],L.physicalType,f.rows),Y=[],de=nr(e,w[L.lengthBuffer],f.rows);for(let p=0;p<f.rows;++p){if(R!=null&&!R[p]){Y.push(null);continue}let h=e.HEAPU8.subarray(K[p],K[p]+de[p]),ue=gs.decode(h);Y.push(ue)}return p=>Y[p]}case"STRUCT":{let K={},Y=[];for(let de=0;de<(((m=L.children)==null?void 0:m.length)||0);++de){let p=L.children[de],h=y(p);Y.push(ue=>{K[p.name]=h(ue)})}return R!=null?de=>{if(!R[de])return null;for(let p of Y)p(de);return K}:de=>{for(let p of Y)p(de);return K}}default:{if(L.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for argument of type: "+L.physicalType);let K=Zr(e,w[L.dataBuffer],L.physicalType,f.rows);return R!=null?Y=>R[Y]?K[Y]:null:Y=>K[Y]}}},x=[];for(let L=0;L<f.args.length;++L)x.push(y(f.args[L]));let I=f.rows*en(f.ret.physicalType),M=e._malloc(I),N=Zr(e,M,f.ret.physicalType,f.rows),U=e._malloc(f.rows),ne=bs(e,U,f.rows);if(N.length==0||ne.length==0){Jr(e,t,"Can't create physical arrays for result");return}let re=N;f.ret.physicalType=="VARCHAR"&&(re=new Array(f.rows));let me=[];for(let L=0;L<f.args.length;++L)me.push(null);for(let L=0;L<f.rows;++L){for(let m=0;m<f.args.length;++m)me[m]=x[m](L);let R=_.func(...me);re[L]=R,ne[L]=R==null?0:1}let q=0;switch(f.ret.physicalType){case"VARCHAR":{let L=new Array(0);q=e._malloc(f.rows*en("DOUBLE"));let R=nr(e,q,f.rows),m=0;for(let p=0;p<f.rows;++p){let h=ys.encode(re[p]||"");L.push(h),R[p]=h.length,m+=h.length}let K=e._malloc(m),Y=e.HEAPU8.subarray(K,K+m),de=0;for(let p=0;p<f.rows;++p){N[p]=de;let h=L[p];Y.subarray(de,de+h.length).set(h),de+=h.length}}}let ee=3*8,W=e._malloc(ee),j=nr(e,W,3);j[0]=M,j[1]=U,j[2]=q,e.HEAPF64[(t>>3)+0]=0,e.HEAPF64[(t>>3)+1]=W,e.HEAPF64[(t>>3)+2]=0}catch(_){Jr(e,t,_.toString())}}function _d(){let r=new TextDecoder;return e=>(typeof SharedArrayBuffer<"u"&&e.buffer instanceof SharedArrayBuffer&&(e=new Uint8Array(e)),r.decode(e))}var _t=_d();function fe(r,e){console.error(`FAIL WITH: ${e}`),r.ccall("duckdb_web_fail_with",null,["string"],[e])}function ft(r,e,t){let n=r.HEAPU8.subarray(e,e+t),s=new Uint8Array(new ArrayBuffer(n.byteLength));return s.set(n),s}function J(r,e,t){return _t(r.HEAPU8.subarray(e,e+t))}function se(r,e,t,n){let s=r.stackSave(),o=r.stackAlloc(3*8);t.unshift("number"),n.unshift(o),r.ccall(e,null,t,n);let l=r.HEAPF64[(o>>3)+0],c=r.HEAPF64[(o>>3)+1],_=r.HEAPF64[(o>>3)+2];return r.stackRestore(s),[l,c,_]}function ce(r){r.ccall("duckdb_web_clear_response",null,[],[])}var ir=class{constructor(e){let t=new Float64Array(e.buffer,e.byteOffset,e.byteLength/8),n=new Uint8Array(new ArrayBuffer(e.byteLength));n.set(e.subarray(7*8)),this.totalFileReadsCold=t[0],this.totalFileReadsAhead=t[1],this.totalFileReadsCached=t[2],this.totalFileWrites=t[3],this.totalPageAccesses=t[4],this.totalPageLoads=t[5],this.blockSize=t[6],this.blockStats=n}getBlockStats(e,t){return t=t||{file_reads_cold:0,file_reads_ahead:0,file_reads_cached:0,file_writes:0,page_accesses:0,page_loads:0},t.file_writes=this.blockStats[e*3+0]&15,t.file_reads_cold=this.blockStats[e*3+0]>>4,t.file_reads_ahead=this.blockStats[e*3+1]&15,t.file_reads_cached=this.blockStats[e*3+1]>>4,t.page_accesses=this.blockStats[e*3+1]&15,t.page_loads=this.blockStats[e*3+1]>>4,t}};var fd=new TextEncoder;var sr=class{constructor(e,t){this._instance=null;this._initPromise=null;this._initPromiseResolver=()=>{};this.onInstantiationProgress=[];this._logger=e,this._runtime=t,this._nextUDFId=1}get logger(){return this._logger}get mod(){return this._instance}get pthread(){return this.mod.PThread||null}async instantiate(e=t=>{}){return this._instance!=null?this:(this._initPromise!=null&&(this.onInstantiationProgress.push(e),await this._initPromise),this._initPromise=new Promise(t=>{this._initPromiseResolver=t}),this.onInstantiationProgress=[e],this._instance=await this.instantiateImpl({print:console.log.bind(console),printErr:console.log.bind(console),onRuntimeInitialized:this._initPromiseResolver}),await this._initPromise,this._initPromise=null,this.onInstantiationProgress=this.onInstantiationProgress.filter(t=>t!=e),this)}open(e){let[t,n,s]=se(this.mod,"duckdb_web_open",["string"],[JSON.stringify(e)]);if(t!==0)throw new Error(J(this.mod,n,s));ce(this.mod)}reset(){let[e,t,n]=se(this.mod,"duckdb_web_reset",[],[]);if(e!==0)throw new Error(J(this.mod,t,n));ce(this.mod)}getVersion(){let[e,t,n]=se(this.mod,"duckdb_web_get_version",[],[]);if(e!==0)throw new Error(J(this.mod,t,n));let s=J(this.mod,t,n);return ce(this.mod),s}getFeatureFlags(){return this.mod.ccall("duckdb_web_get_feature_flags","number",[],[])}tokenize(e){let[t,n,s]=se(this.mod,"duckdb_web_tokenize",["string"],[e]);if(t!==0)throw new Error(J(this.mod,n,s));let o=J(this.mod,n,s);return ce(this.mod),JSON.parse(o)}connect(){let e=this.mod.ccall("duckdb_web_connect","number",[],[]);return new tr(this,e)}disconnect(e){if(this.mod.ccall("duckdb_web_disconnect",null,["number"],[e]),this.pthread)for(let t of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])t.postMessage({cmd:"dropUDFFunctions",connectionId:e})}runQuery(e,t){let[n,s,o]=se(this.mod,"duckdb_web_query_run",["number","string"],[e,t]);if(n!==0)throw new Error(J(this.mod,s,o));let l=ft(this.mod,s,o);return ce(this.mod),l}startPendingQuery(e,t){let[n,s,o]=se(this.mod,"duckdb_web_pending_query_start",["number","string"],[e,t]);if(n!==0)throw new Error(J(this.mod,s,o));if(s==0)return null;let l=ft(this.mod,s,o);return ce(this.mod),l}pollPendingQuery(e){let[t,n,s]=se(this.mod,"duckdb_web_pending_query_poll",["number"],[e]);if(t!==0)throw new Error(J(this.mod,n,s));if(n==0)return null;let o=ft(this.mod,n,s);return ce(this.mod),o}cancelPendingQuery(e){return this.mod.ccall("duckdb_web_pending_query_cancel","boolean",["number"],[e])}fetchQueryResults(e){let[t,n,s]=se(this.mod,"duckdb_web_query_fetch_results",["number"],[e]);if(t!==0)throw new Error(J(this.mod,n,s));let o=ft(this.mod,n,s);return ce(this.mod),o}getTableNames(e,t){let[n,s,o]=se(this.mod,"duckdb_web_get_tablenames",["number","string"],[e,t]);if(n!==0)throw new Error(J(this.mod,s,o));let l=J(this.mod,s,o);return ce(this.mod),JSON.parse(l)}createScalarFunction(e,t,n,s){let o={functionId:this._nextUDFId,name:t,returnType:wt(n)},l={functionId:o.functionId,connectionId:e,name:t,returnType:n,func:s};this._nextUDFId+=1;let[c,_,S]=se(this.mod,"duckdb_web_udf_scalar_create",["number","string"],[e,JSON.stringify(o)]);if(c!==0)throw new Error(J(this.mod,_,S));if(ce(this.mod),globalThis.DUCKDB_RUNTIME._udfFunctions=(globalThis.DUCKDB_RUNTIME._udfFunctions||new Map).set(l.functionId,l),this.pthread)for(let f of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])f.postMessage({cmd:"registerUDFFunction",udf:l})}createPrepared(e,t){let[n,s,o]=se(this.mod,"duckdb_web_prepared_create",["number","string"],[e,t]);if(n!==0)throw new Error(J(this.mod,s,o));return ce(this.mod),s}closePrepared(e,t){let[n,s,o]=se(this.mod,"duckdb_web_prepared_close",["number","number"],[e,t]);if(n!==0)throw new Error(J(this.mod,s,o));ce(this.mod)}runPrepared(e,t,n){let[s,o,l]=se(this.mod,"duckdb_web_prepared_run",["number","number","string"],[e,t,JSON.stringify(n)]);if(s!==0)throw new Error(J(this.mod,o,l));let c=ft(this.mod,o,l);return ce(this.mod),c}sendPrepared(e,t,n){let[s,o,l]=se(this.mod,"duckdb_web_prepared_send",["number","number","string"],[e,t,JSON.stringify(n)]);if(s!==0)throw new Error(J(this.mod,o,l));let c=ft(this.mod,o,l);return ce(this.mod),c}insertArrowFromIPCStream(e,t,n){if(t.length==0)return;let s=this.mod._malloc(t.length);this.mod.HEAPU8.subarray(s,s+t.length).set(t);let l=n?JSON.stringify(n):"",[c,_,S]=se(this.mod,"duckdb_web_insert_arrow_from_ipc_stream",["number","number","number","string"],[e,s,t.length,l]);if(c!==0)throw new Error(J(this.mod,_,S))}insertCSVFromPath(e,t,n){if(n.columns!==void 0){n.columnsFlat=[];for(let S in n.columns)n.columnsFlat.push(Xt(S,n.columns[S]))}let s={...n};s.columns=s.columnsFlat,delete s.columnsFlat;let o=JSON.stringify(s),[l,c,_]=se(this.mod,"duckdb_web_insert_csv_from_path",["number","string","string"],[e,t,o]);if(l!==0)throw new Error(J(this.mod,c,_))}insertJSONFromPath(e,t,n){if(n.columns!==void 0){n.columnsFlat=[];for(let S in n.columns)n.columnsFlat.push(Xt(S,n.columns[S]))}let s={...n};s.columns=s.columnsFlat,delete s.columnsFlat;let o=JSON.stringify(s),[l,c,_]=se(this.mod,"duckdb_web_insert_json_from_path",["number","string","string"],[e,t,o]);if(l!==0)throw new Error(J(this.mod,c,_))}globFiles(e){let[t,n,s]=se(this.mod,"duckdb_web_fs_glob_file_infos",["string"],[e]);if(t!==0)throw new Error(J(this.mod,n,s));let o=J(this.mod,n,s);ce(this.mod);let l=JSON.parse(o);return l??[]}registerFileURL(e,t,n,s=!1){t===void 0&&(t=e);let[o,l,c]=se(this.mod,"duckdb_web_fs_register_file_url",["string","string"],[e,t,n,s]);if(o!==0)throw new Error(J(this.mod,l,c));ce(this.mod)}registerFileText(e,t){let n=fd.encode(t);this.registerFileBuffer(e,n)}registerFileBuffer(e,t){let n=this.mod._malloc(t.length);this.mod.HEAPU8.subarray(n,n+t.length).set(t);let[o,l,c]=se(this.mod,"duckdb_web_fs_register_file_buffer",["string","number","number"],[e,n,t.length]);if(o!==0)throw new Error(J(this.mod,l,c));ce(this.mod)}registerFileHandle(e,t,n,s){let[o,l,c]=se(this.mod,"duckdb_web_fs_register_file_url",["string","string","number","boolean"],[e,e,n,s]);if(o!==0)throw new Error(J(this.mod,l,c));if(ce(this.mod),globalThis.DUCKDB_RUNTIME._files=(globalThis.DUCKDB_RUNTIME._files||new Map).set(e,t),this.pthread){for(let _ of this.pthread.runningWorkers)_.postMessage({cmd:"registerFileHandle",fileName:e,fileHandle:t});for(let _ of this.pthread.unusedWorkers)_.postMessage({cmd:"dropFileHandle",fileName:e})}}dropFile(e){let[t,n,s]=se(this.mod,"duckdb_web_fs_drop_file",["string"],[e]);if(t!==0)throw new Error(J(this.mod,n,s));ce(this.mod)}dropFiles(){let[e,t,n]=se(this.mod,"duckdb_web_fs_drop_files",[],[]);if(e!==0)throw new Error(J(this.mod,t,n));ce(this.mod)}flushFiles(){this.mod.ccall("duckdb_web_flush_files",null,[],[])}copyFileToPath(e,t){let[n,s,o]=se(this.mod,"duckdb_web_copy_file_to_path",["string","string"],[e,t]);if(n!==0)throw new Error(J(this.mod,s,o));ce(this.mod)}copyFileToBuffer(e){let[t,n,s]=se(this.mod,"duckdb_web_copy_file_to_buffer",["string"],[e]);if(t!==0)throw new Error(J(this.mod,n,s));let o=this.mod.HEAPU8.subarray(n,n+s),l=new Uint8Array(o.length);return l.set(o),ce(this.mod),l}collectFileStatistics(e,t){let[n,s,o]=se(this.mod,"duckdb_web_collect_file_stats",["string","boolean"],[e,t]);if(n!==0)throw new Error(J(this.mod,s,o))}exportFileStatistics(e){let[t,n,s]=se(this.mod,"duckdb_web_export_file_stats",["string"],[e]);if(t!==0)throw new Error(J(this.mod,n,s));return new ir(this.mod.HEAPU8.subarray(n,n+s))}};var vs=Et(require("fs")),ar=class extends sr{constructor(t,n,s,o){super(t,n);this.mainModulePath=s,this.pthreadWorkerPath=o}locateFile(t,n){if(t.endsWith(".wasm"))return this.mainModulePath;if(t.endsWith(".worker.js")){if(!this.pthreadWorkerPath)throw new Error("Missing DuckDB worker path!");return this.pthreadWorkerPath}throw new Error(`WASM instantiation requested unexpected file: prefix=${n} path=${t}`)}instantiateWasm(t,n){globalThis.DUCKDB_RUNTIME={};for(let o of Object.getOwnPropertyNames(this._runtime))o!="constructor"&&(globalThis.DUCKDB_RUNTIME[o]=Object.getOwnPropertyDescriptor(this._runtime,o).value);let s=vs.default.readFileSync(this.mainModulePath);return WebAssembly.instantiate(s,t).then(o=>{n(o.instance,o.module)}),[]}instantiateImpl(t){return er({...t,instantiateWasm:this.instantiateWasm.bind(this)})}};var or=class extends ar{constructor(e,t,n,s=null){super(e,t,n,s)}instantiateImpl(e){return er({...e,instantiateWasm:this.instantiateWasm.bind(this),locateFile:this.locateFile.bind(this)})}};var Re=Et(require("fs"));var du=Et(cu());var _e={_files:new Map,_filesById:new Map,_fileInfoCache:new Map,_udfFunctions:new Map,resolveFileInfo(r,e){try{let t=_e._fileInfoCache.get(e),[n,s,o]=se(r,"duckdb_web_fs_get_file_info_by_id",["number","number"],[e,(t==null?void 0:t.cacheEpoch)||0]);if(n!==0)return fe(r,J(r,s,o)),null;if(o===0)return ce(r),t;let l=J(r,s,o);ce(r);let c=JSON.parse(l);return c==null?null:(_e._fileInfoCache.set(e,c),c)}catch(t){return fe(r,t.toString()),null}},testPlatformFeature:(r,e)=>{switch(e){case 1:return typeof BigInt64Array<"u";default:return console.warn(`test for unknown feature: ${e}`),!1}},getDefaultDataProtocol(r){return 1},openFile(r,e,t){var n,s;try{_e._fileInfoCache.delete(e);let o=_e.resolveFileInfo(r,e);switch(o==null?void 0:o.dataProtocol){case 1:{let l=(n=_e._files)==null?void 0:n.get(o.dataUrl);l==null&&(l=Re.default.openSync(o.dataUrl,Re.default.constants.O_CREAT|Re.default.constants.O_RDWR,Re.default.constants.S_IRUSR|Re.default.constants.S_IWUSR),(s=_e._filesById)==null||s.set(o.fileId,l));let c=Re.default.fstatSync(l).size,_=r._malloc(2*8);return r.HEAPF64[(_>>3)+0]=+c,r.HEAPF64[(_>>3)+1]=0,_}case 2:case 3:case 4:case 5:fe(r,"Unsupported data protocol")}}catch(o){fe(r,o.toString())}return 0},syncFile:(r,e)=>{},closeFile:(r,e)=>{try{let t=_e._fileInfoCache.get(e);switch(_e._fileInfoCache.delete(e),t==null?void 0:t.dataProtocol){case 1:{let n=_e._filesById.get(e);_e._filesById.delete(e),n!=null&&Re.default.closeSync(n);break}case 2:case 3:case 4:case 5:break}}catch(t){fe(r,t.toString())}return 0},truncateFile:(r,e,t)=>{try{let n=_e.resolveFileInfo(r,e);switch(n==null?void 0:n.dataProtocol){case 1:{Re.default.truncateSync(n.dataUrl,t);break}case 2:case 3:case 4:case 5:fe(r,"Unsupported data protocol")}}catch(n){fe(r,n.toString())}return 0},readFile:(r,e,t,n,s)=>{try{let o=_e.resolveFileInfo(r,e);switch(o==null?void 0:o.dataProtocol){case 1:{let l=_e._filesById.get(e);return l==null?(fe(r,`File ${e} is missing a file descriptor`),0):Re.default.readSync(l,r.HEAPU8,t,n,s)}case 2:case 3:case 4:case 5:fe(r,"Unsupported data protocol")}}catch(o){fe(r,o.toString())}return 0},writeFile:(r,e,t,n,s)=>{try{let o=_e.resolveFileInfo(r,e);switch(o==null?void 0:o.dataProtocol){case 1:{let l=_e._filesById.get(e);if(l==null)return fe(r,`File ${e} is missing a file descriptor`),0;let c=r.HEAPU8.subarray(t,t+n);return Re.default.writeSync(l,c,0,c.length,s)}case 2:case 3:case 4:case 5:fe(r,"Unsupported data protocol")}}catch(o){fe(r,o.toString())}return 0},getLastFileModificationTime:(r,e)=>{try{let t=_e.resolveFileInfo(r,e);switch(t==null?void 0:t.dataProtocol){case 1:{let n=_e._filesById.get(e);return n==null?(fe(r,`File ${e} is missing a file descriptor`),0):Re.default.fstatSync(n).mtime.getTime()}case 2:case 3:case 4:case 5:fe(r,"Unsupported data protocol")}}catch(t){fe(r,t.toString())}return 0},checkDirectory:(r,e,t)=>{try{let n=_t(r.HEAPU8.subarray(e,e+t));return Re.default.existsSync(n)}catch(n){return fe(r,n.toString()),!1}},createDirectory:(r,e,t)=>{try{let n=_t(r.HEAPU8.subarray(e,e+t));return Re.default.mkdirSync(n)}catch(n){return fe(r,n.toString()),0}},removeDirectory:(r,e,t)=>{try{let n=_t(r.HEAPU8.subarray(e,e+t));return Re.default.rmdirSync(n)}catch(n){return fe(r,n.toString()),0}},listDirectoryEntries:(r,e,t)=>(fe(r,"Not Implemented"),!1),glob:(r,e,t)=>{try{let n=J(r,e,t),s=du.sync([n],{dot:!0});for(let o of s)r.ccall("duckdb_web_fs_glob_add_path",null,["string"],[o])}catch(n){return fe(r,n.toString()),0}},moveFile:(r,e,t,n,s)=>{var _,S;let o=J(r,e,t),l=J(r,n,s),c=(_=_e._files)==null?void 0:_.get(o);c!==void 0&&(_e._files.delete(c),_e._files.set(l,c));for(let[f,w]of((S=_e._fileInfoCache)==null?void 0:S.entries())||[])if(w.dataUrl==o){_e._fileInfoCache.delete(f);break}return!0},checkFile:(r,e,t)=>{try{let n=_t(r.HEAPU8.subarray(e,e+t));return Re.default.existsSync(n)}catch(n){return fe(r,n.toString()),!1}},removeFile:(r,e,t)=>{try{let n=_t(r.HEAPU8.subarray(e,e+t));return Re.default.rmSync(n)}catch(n){return fe(r,n.toString()),0}},callScalarUDF:(r,e,t,n,s,o,l)=>{Ss(_e,r,e,t,n,s,o,l)}};var ji=class extends Jt{postMessage(e,t){globalThis.postMessage(e,t)}async instantiate(e,t,n){return await new or(this,_e,e,t).instantiate(n)}};function _u(){let r=new ji;globalThis.onmessage=async e=>{await r.onMessage(e.data)}}_u();0&&(module.exports={registerWorker});
/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */
/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */
/*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */
/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */
/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
//# sourceMappingURL=data:application/json;base64,
