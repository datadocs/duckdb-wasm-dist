"use strict";var gf=Object.create;var Qr=Object.defineProperty;var bf=Object.getOwnPropertyDescriptor;var yf=Object.getOwnPropertyNames;var vf=Object.getPrototypeOf,Sf=Object.prototype.hasOwnProperty;var L=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),wf=(r,t)=>{for(var e in t)Qr(r,e,{get:t[e],enumerable:!0})},du=(r,t,e,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of yf(t))!Sf.call(r,s)&&s!==e&&Qr(r,s,{get:()=>t[s],enumerable:!(n=bf(t,s))||n.enumerable});return r};var Mt=(r,t,e)=>(e=r!=null?gf(vf(r)):{},du(t||!r||!r.__esModule?Qr(e,"default",{value:r,enumerable:!0}):e,r)),Ef=r=>du(Qr({},"__esModule",{value:!0}),r);var pu=L((en,Sa)=>{"use strict";var va=(()=>{var r=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(r=r||__filename),function(t={}){var e=typeof t<"u"?t:{},n,s;e.ready=new Promise((o,l)=>{n=o,s=l});var c=Object.assign({},e),f=[],h="./this.program",g=(o,l)=>{throw l},D=typeof window=="object",y=typeof importScripts=="function",P=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",S="";function te(o){return e.locateFile?e.locateFile(o,S):S+o}var O,B,G,Y;if(P){var le=require("fs"),ue=require("path");y?S=ue.dirname(S)+"/":S=__dirname+"/",O=(o,l)=>(o=cr(o)?new URL(o):ue.normalize(o),le.readFileSync(o,l?void 0:"utf8")),G=o=>{var l=O(o,!0);return l.buffer||(l=new Uint8Array(l)),l},B=(o,l,p,m=!0)=>{o=cr(o)?new URL(o):ue.normalize(o),le.readFile(o,m?void 0:"utf8",(i,a)=>{i?p(i):l(m?a.buffer:a)})},!e.thisProgram&&process.argv.length>1&&(h=process.argv[1].replace(/\\/g,"/")),f=process.argv.slice(2),g=(o,l)=>{throw process.exitCode=o,l},e.inspect=()=>"[Emscripten Module object]"}else(D||y)&&(y?S=self.location.href:typeof document<"u"&&document.currentScript&&(S=document.currentScript.src),r&&(S=r),S.indexOf("blob:")!==0?S=S.substr(0,S.replace(/[?#].*/,"").lastIndexOf("/")+1):S="",O=o=>{var l=new XMLHttpRequest;return l.open("GET",o,!1),l.send(null),l.responseText},y&&(G=o=>{var l=new XMLHttpRequest;return l.open("GET",o,!1),l.responseType="arraybuffer",l.send(null),new Uint8Array(l.response)}),B=(o,l,p)=>{var m=new XMLHttpRequest;m.open("GET",o,!0),m.responseType="arraybuffer",m.onload=()=>{if(m.status==200||m.status==0&&m.response){l(m.response);return}p()},m.onerror=p,m.send(null)},Y=o=>document.title=o);var ke=e.print||console.log.bind(console),w=e.printErr||console.error.bind(console);Object.assign(e,c),c=null,e.arguments&&(f=e.arguments),e.thisProgram&&(h=e.thisProgram),e.quit&&(g=e.quit);var ie;e.wasmBinary&&(ie=e.wasmBinary);var V=e.noExitRuntime||!0;typeof WebAssembly!="object"&&M("no native wasm support detected");var q,N=!1,Z;function R(o,l){o||M(l)}var j,$,se,v,_,H,ce,Le;function Me(){var o=q.buffer;e.HEAP8=j=new Int8Array(o),e.HEAP16=se=new Int16Array(o),e.HEAP32=_=new Int32Array(o),e.HEAPU8=$=new Uint8Array(o),e.HEAPU16=v=new Uint16Array(o),e.HEAPU32=H=new Uint32Array(o),e.HEAPF32=ce=new Float32Array(o),e.HEAPF64=Le=new Float64Array(o)}var De,Ye=[],vt=[],ct=[],Ne=[],ee=!1,lt=0;function or(){return V||lt>0}function x(){if(e.preRun)for(typeof e.preRun=="function"&&(e.preRun=[e.preRun]);e.preRun.length;)ge(e.preRun.shift());rt(Ye)}function he(){ee=!0,rt(vt)}function I(){rt(ct)}function J(){if(e.postRun)for(typeof e.postRun=="function"&&(e.postRun=[e.postRun]);e.postRun.length;)we(e.postRun.shift());rt(Ne)}function ge(o){Ye.unshift(o)}function Ae(o){vt.unshift(o)}function we(o){Ne.unshift(o)}var Te=0,Ge=null,Ke=null;function Nn(o){Te++,e.monitorRunDependencies&&e.monitorRunDependencies(Te)}function Un(o){if(Te--,e.monitorRunDependencies&&e.monitorRunDependencies(Te),Te==0&&(Ge!==null&&(clearInterval(Ge),Ge=null),Ke)){var l=Ke;Ke=null,l()}}function M(o){e.onAbort&&e.onAbort(o),o="Aborted("+o+")",w(o),N=!0,Z=1,o+=". Build with -sASSERTIONS for more info.",ee&&At();var l=new WebAssembly.RuntimeError(o);throw s(l),l}var Hn="data:application/octet-stream;base64,";function ur(o){return o.startsWith(Hn)}function cr(o){return o.startsWith("file://")}var Ue;Ue="./duckdb-eh.wasm",ur(Ue)||(Ue=te(Ue));function lr(o){try{if(o==Ue&&ie)return new Uint8Array(ie);if(G)return G(o);throw"both async and sync fetching of the wasm failed"}catch(l){M(l)}}function $n(o){return!ie&&(D||y)&&typeof fetch=="function"?fetch(o,{credentials:"same-origin"}).then(l=>{if(!l.ok)throw"failed to load wasm binary file at '"+o+"'";return l.arrayBuffer()}).catch(()=>lr(o)):Promise.resolve().then(()=>lr(o))}function fr(o,l,p){return $n(o).then(m=>WebAssembly.instantiate(m,l)).then(m=>m).then(p,m=>{w("failed to asynchronously prepare wasm: "+m),M(m)})}function qn(o,l,p,m){return!o&&typeof WebAssembly.instantiateStreaming=="function"&&!ur(l)&&!P&&typeof fetch=="function"?fetch(l,{credentials:"same-origin"}).then(i=>{var a=WebAssembly.instantiateStreaming(i,p);return a.then(m,function(u){return w("wasm streaming compile failed: "+u),w("falling back to ArrayBuffer instantiation"),fr(l,p,m)})}):fr(l,p,m)}function Wn(){var o={a:Ls};function l(m,i){var a=m.exports;return e.asm=a,q=e.asm.Qa,Me(),De=e.asm.Ta,Ae(e.asm.Ra),Un("wasm-instantiate"),a}Nn("wasm-instantiate");function p(m){l(m.instance)}if(e.instantiateWasm)try{return e.instantiateWasm(o,l)}catch(m){w("Module.instantiateWasm callback failed with error: "+m),s(m)}return qn(ie,Ue,o,p).catch(s),{}}var be,He;function _r(o){this.name="ExitStatus",this.message=`Program terminated with exit(${o})`,this.status=o}function rt(o){for(;o.length>0;)o.shift()(e)}function Gn(){w("missing function: XML_GetBuffer"),M(-1)}function zn(){w("missing function: XML_GetErrorCode"),M(-1)}function jn(){w("missing function: XML_Parse"),M(-1)}function Kn(){w("missing function: XML_ParseBuffer"),M(-1)}function Yn(){w("missing function: XML_ParserCreate"),M(-1)}function Vn(){w("missing function: XML_ParserFree"),M(-1)}function Xn(){w("missing function: XML_ResumeParser"),M(-1)}function Qn(){w("missing function: XML_SetCharacterDataHandler"),M(-1)}function Jn(){w("missing function: XML_SetElementHandler"),M(-1)}function Zn(){w("missing function: XML_SetUserData"),M(-1)}function ei(){w("missing function: XML_StopParser"),M(-1)}var Cr="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function Pr(o,l,p){M(Cr)}var Mr=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function Fr(o,l,p){l>>>=0;for(var m=l+p,i=l;o[i]&&!(i>=m);)++i;if(i-l>16&&o.buffer&&Mr)return Mr.decode(o.subarray(l,i));for(var a="";l<i;){var u=o[l++];if(!(u&128)){a+=String.fromCharCode(u);continue}var d=o[l++]&63;if((u&224)==192){a+=String.fromCharCode((u&31)<<6|d);continue}var b=o[l++]&63;if((u&240)==224?u=(u&15)<<12|d<<6|b:u=(u&7)<<18|d<<12|b<<6|o[l++]&63,u<65536)a+=String.fromCharCode(u);else{var k=u-65536;a+=String.fromCharCode(55296|k>>10,56320|k&1023)}}return a}function nt(o,l){return o>>>=0,o?Fr($,o,l):""}var it={varargs:void 0,get:function(){it.varargs+=4;var o=_[it.varargs-4>>>2];return o},getStr:function(o){var l=nt(o);return l}};function Ir(o,l,p,m,i){for(var a=0,u=l?_[l>>>2]:0,d=l?_[l+4>>>2]:0,b=p?_[p>>>2]:0,k=p?_[p+4>>>2]:0,E=m?_[m>>>2]:0,C=m?_[m+4>>>2]:0,F=0,K=0,W=0,fe=0,X=0,Ee=0,A=(l?_[l>>>2]:0)|(p?_[p>>>2]:0)|(m?_[m>>>2]:0),U=(l?_[l+4>>>2]:0)|(p?_[p+4>>>2]:0)|(m?_[m+4>>>2]:0),re=function(de,Ce,Ct,Pt){return de<32?Ce&Pt:Ct&Pt},ne=0;ne<o;ne++){var T=1<<ne%32;if(re(ne,A,U,T)){var z=it.getStreamFromFD(ne),_e=it.DEFAULT_POLLMASK;z.stream_ops.poll&&(_e=z.stream_ops.poll(z)),_e&1&&re(ne,u,d,T)&&(ne<32?F=F|T:K=K|T,a++),_e&4&&re(ne,b,k,T)&&(ne<32?W=W|T:fe=fe|T,a++),_e&2&&re(ne,E,C,T)&&(ne<32?X=X|T:Ee=Ee|T,a++)}}return l&&(_[l>>>2]=F,_[l+4>>>2]=K),p&&(_[p>>>2]=W,_[p+4>>>2]=fe),m&&(_[m>>>2]=X,_[m+4>>>2]=Ee),a}function Or(){w("missing function: $SOCKFS"),M(-1)}function st(){w("missing function: $FS"),M(-1)}function $e(o){var l=Or.getSocket(o);if(!l)throw new st.ErrnoError(8);return l}function dr(o){return(o&255)+"."+(o>>8&255)+"."+(o>>16&255)+"."+(o>>24&255)}function Lr(o){var l="",p=0,m=0,i=0,a=0,u=0,d=0,b=[o[0]&65535,o[0]>>16,o[1]&65535,o[1]>>16,o[2]&65535,o[2]>>16,o[3]&65535,o[3]>>16],k=!0,E="";for(d=0;d<5;d++)if(b[d]!==0){k=!1;break}if(k){if(E=dr(b[6]|b[7]<<16),b[5]===-1)return l="::ffff:",l+=E,l;if(b[5]===0)return l="::",E==="0.0.0.0"&&(E=""),E==="0.0.0.1"&&(E="1"),l+=E,l}for(p=0;p<8;p++)b[p]===0&&(p-i>1&&(u=0),i=p,u++),u>m&&(m=u,a=p-m+1);for(p=0;p<8;p++){if(m>1&&b[p]===0&&p>=a&&p<a+m){p===a&&(l+=":",a===0&&(l+=":"));continue}l+=Number(wr(b[p]&65535)).toString(16),l+=p<7?":":""}return l}function pr(o,l){var p=se[o>>>1],m=wr(v[o+2>>>1]),i;switch(p){case 2:if(l!==16)return{errno:28};i=_[o+4>>>2],i=dr(i);break;case 10:if(l!==28)return{errno:28};i=[_[o+8>>>2],_[o+12>>>2],_[o+16>>>2],_[o+20>>>2]],i=Lr(i);break;default:return{errno:5}}return{family:p,addr:i,port:m}}function Ve(o){for(var l=o.split("."),p=0;p<4;p++){var m=Number(l[p]);if(isNaN(m))return null;l[p]=m}return(l[0]|l[1]<<8|l[2]<<16|l[3]<<24)>>>0}function ft(o){return parseInt(o)}function Ut(o){var l,p,m,i,a=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,u=[];if(!a.test(o))return null;if(o==="::")return[0,0,0,0,0,0,0,0];for(o.startsWith("::")?o=o.replace("::","Z:"):o=o.replace("::",":Z:"),o.indexOf(".")>0?(o=o.replace(new RegExp("[.]","g"),":"),l=o.split(":"),l[l.length-4]=ft(l[l.length-4])+ft(l[l.length-3])*256,l[l.length-3]=ft(l[l.length-2])+ft(l[l.length-1])*256,l=l.slice(0,l.length-2)):l=o.split(":"),m=0,i=0,p=0;p<l.length;p++)if(typeof l[p]=="string")if(l[p]==="Z"){for(i=0;i<8-l.length+1;i++)u[p+i]=0;m=i-1}else u[p+m]=jt(parseInt(l[p],16));else u[p+m]=l[p];return[u[1]<<16|u[0],u[3]<<16|u[2],u[5]<<16|u[4],u[7]<<16|u[6]]}var Oe={address_map:{id:1,addrs:{},names:{}},lookup_name:function(o){var l=Ve(o);if(l!==null||(l=Ut(o),l!==null))return o;var p;if(Oe.address_map.addrs[o])p=Oe.address_map.addrs[o];else{var m=Oe.address_map.id++;R(m<65535,"exceeded max address mappings of 65535"),p="172.29."+(m&255)+"."+(m&65280),Oe.address_map.names[p]=o,Oe.address_map.addrs[o]=p}return p},lookup_addr:function(o){return Oe.address_map.names[o]?Oe.address_map.names[o]:null}};function St(o,l,p){if(p&&o===0)return null;var m=pr(o,l);if(m.errno)throw new st.ErrnoError(m.errno);return m.addr=Oe.lookup_addr(m.addr)||m.addr,m}function Ht(o,l,p,m,i,a){var u=$e(o),d=St(l,p);return u.sock_ops.bind(u,d.addr,d.port),0}function hr(o,l,p,m,i,a){var u=$e(o),d=St(l,p);return u.sock_ops.connect(u,d.addr,d.port),0}function xe(o,l,p,m){}function xr(o,l,p){return it.varargs=p,0}function ti(o,l){}function ri(o,l,p){}function Br(o,l,p,m){if(p>>>=0,!(m>0))return 0;for(var i=p,a=p+m-1,u=0;u<o.length;++u){var d=o.charCodeAt(u);if(d>=55296&&d<=57343){var b=o.charCodeAt(++u);d=65536+((d&1023)<<10)|b&1023}if(d<=127){if(p>=a)break;l[p++>>>0]=d}else if(d<=2047){if(p+1>=a)break;l[p++>>>0]=192|d>>6,l[p++>>>0]=128|d&63}else if(d<=65535){if(p+2>=a)break;l[p++>>>0]=224|d>>12,l[p++>>>0]=128|d>>6&63,l[p++>>>0]=128|d&63}else{if(p+3>=a)break;l[p++>>>0]=240|d>>18,l[p++>>>0]=128|d>>12&63,l[p++>>>0]=128|d>>6&63,l[p++>>>0]=128|d&63}}return l[p>>>0]=0,p-i}function $t(o,l,p){return Br(o,$,l,p)}function ni(o,l,p){}function Nr(o,l){return $.fill(0,o,o+l),o}function qt(o,l,p,m,i){switch(l){case 2:p=Ve(p),Nr(o,16),i&&(_[i>>>2]=16),se[o>>>1]=l,_[o+4>>>2]=p,se[o+2>>>1]=jt(m);break;case 10:p=Ut(p),Nr(o,28),i&&(_[i>>>2]=28),_[o>>>2]=l,_[o+8>>>2]=p[0],_[o+12>>>2]=p[1],_[o+16>>>2]=p[2],_[o+20>>>2]=p[3],se[o+2>>>1]=jt(m);break;default:return 5}return 0}function Wt(o,l,p,m,i,a){var u=$e(o);if(!u.daddr)return-53;var d=qt(l,u.family,Oe.lookup_name(u.daddr),u.dport,p);return 0}function ii(o,l,p,m,i,a){var u=$e(o);return l===1&&p===4?(_[m>>>2]=u.error,_[i>>>2]=4,u.error=null,0):-50}function Ur(o,l,p){return it.varargs=p,0}function mr(o,l){}function si(o,l,p){}function ai(o,l,p,m){}function oi(o,l,p,m){it.varargs=m}function ui(o,l,p,m,i,a){var u=$e(o),d=u.sock_ops.recvmsg(u,p);if(!d)return 0;if(i)var b=qt(i,u.family,Oe.lookup_name(d.addr),d.port,a);return $.set(d.buffer,l>>>0),d.buffer.byteLength}function ci(o,l,p,m){}function li(o){}function fi(o,l,p,m,i,a){}function _i(o,l,p){}function di(o,l){}function pi(o,l,p){}var hi=!0;function mi(){return hi}function gi(o){return H[o>>>2]+_[o+4>>>2]*4294967296}function wt(o){return o%4===0&&(o%100!==0||o%400===0)}var bi=[0,31,60,91,121,152,182,213,244,274,305,335],yi=[0,31,59,90,120,151,181,212,243,273,304,334];function vi(o){var l=wt(o.getFullYear()),p=l?bi:yi,m=p[o.getMonth()]+o.getDate()-1;return m}function Et(o,l){var p=new Date(gi(o)*1e3);_[l>>>2]=p.getSeconds(),_[l+4>>>2]=p.getMinutes(),_[l+8>>>2]=p.getHours(),_[l+12>>>2]=p.getDate(),_[l+16>>>2]=p.getMonth(),_[l+20>>>2]=p.getFullYear()-1900,_[l+24>>>2]=p.getDay();var m=vi(p)|0;_[l+28>>>2]=m,_[l+36>>>2]=-(p.getTimezoneOffset()*60);var i=new Date(p.getFullYear(),0,1),a=new Date(p.getFullYear(),6,1).getTimezoneOffset(),u=i.getTimezoneOffset(),d=(a!=u&&p.getTimezoneOffset()==Math.min(u,a))|0;_[l+32>>>2]=d}function gr(o){for(var l=0,p=0;p<o.length;++p){var m=o.charCodeAt(p);m<=127?l++:m<=2047?l+=2:m>=55296&&m<=57343?(l+=4,++p):l+=3}return l}function Hr(o){var l=gr(o)+1,p=Kt(l);return p&&$t(o,p,l),p}function Si(o,l,p){var m=new Date().getFullYear(),i=new Date(m,0,1),a=new Date(m,6,1),u=i.getTimezoneOffset(),d=a.getTimezoneOffset(),b=Math.max(u,d);H[o>>>2]=b*60,_[l>>>2]=+(u!=d);function k(W){var fe=W.toTimeString().match(/\(([A-Za-z ]+)\)$/);return fe?fe[1]:"GMT"}var E=k(i),C=k(a),F=Hr(E),K=Hr(C);d<u?(H[p>>>2]=F,H[p+4>>>2]=K):(H[p>>>2]=K,H[p+4>>>2]=F)}function wi(){M("")}function br(o,l){M(Cr)}function $r(o,l){return globalThis.DUCKDB_RUNTIME.createDirectory(e,o,l)}function Ei(o,l){return globalThis.DUCKDB_RUNTIME.checkDirectory(e,o,l)}function Ri(o,l){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(e,o,l)}function ki(o,l){return globalThis.DUCKDB_RUNTIME.removeDirectory(e,o,l)}function Ai(o){return globalThis.DUCKDB_RUNTIME.closeFile(e,o)}function Ti(o,l){return globalThis.DUCKDB_RUNTIME.checkFile(e,o,l)}function Di(o){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(e,o)}function Ci(o,l,p,m){return globalThis.DUCKDB_RUNTIME.moveFile(e,o,l,p,m)}function Pi(o,l){return globalThis.DUCKDB_RUNTIME.openFile(e,o,l)}function Mi(o,l,p,m){return globalThis.DUCKDB_RUNTIME.readFile(e,o,l,p,m)}function Fi(o,l){return globalThis.DUCKDB_RUNTIME.truncateFile(e,o,l)}function Ii(o,l,p,m){return globalThis.DUCKDB_RUNTIME.writeFile(e,o,l,p,m)}function Oi(o){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(o)}function Li(o,l){return globalThis.DUCKDB_RUNTIME.glob(e,o,l)}function xi(o){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(e,o)}function Bi(o,l,p,m,i,a){return globalThis.DUCKDB_RUNTIME.callScalarUDF(e,o,l,p,m,i,a)}function Ni(){return Date.now()}function qr(){return 4294901760}function Ui(){return qr()}var Wr;P&&(global.performance=require("perf_hooks").performance),Wr=()=>performance.now();function Hi(o,l,p){$.copyWithin(o>>>0,l>>>0,l+p>>>0)}function Gr(o){var l=q.buffer,p=o-l.byteLength+65535>>>16;try{return q.grow(p),Me(),1}catch{}}function $i(o){var l=$.length;o=o>>>0;var p=qr();if(o>p)return!1;for(var m=(b,k)=>b+(k-b%k)%k,i=1;i<=4;i*=2){var a=l*(1+.2/i);a=Math.min(a,o+100663296);var u=Math.min(p,m(Math.max(o,a),65536)),d=Gr(u);if(d)return!0}return!1}var Gt={};function qi(){return h||"./this.program"}function Rt(){if(!Rt.strings){var o=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",l={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:o,_:qi()};for(var p in Gt)Gt[p]===void 0?delete l[p]:l[p]=Gt[p];var m=[];for(var p in l)m.push(`${p}=${l[p]}`);Rt.strings=m}return Rt.strings}function Wi(o,l){for(var p=0;p<o.length;++p)j[l++>>>0]=o.charCodeAt(p);j[l>>>0]=0}function yr(o,l){var p=0;return Rt().forEach(function(m,i){var a=l+p;H[o+i*4>>>2]=a,Wi(m,a),p+=m.length+1}),0}function Gi(o,l){var p=Rt();H[o>>>2]=p.length;var m=0;return p.forEach(function(i){m+=i.length+1}),H[l>>>2]=m,0}function kt(o){return 52}function zi(o,l){var p=0,m=0,i=0;{var a=2;o==0?p=2:(o==1||o==2)&&(p=64),i=1}return j[l>>>0]=a,se[l+2>>>1]=i,He=[p>>>0,(be=p,+Math.abs(be)>=1?be>0?+Math.floor(be/4294967296)>>>0:~~+Math.ceil((be-+(~~be>>>0))/4294967296)>>>0:0)],_[l+8>>>2]=He[0],_[l+12>>>2]=He[1],He=[m>>>0,(be=m,+Math.abs(be)>=1?be>0?+Math.floor(be/4294967296)>>>0:~~+Math.ceil((be-+(~~be>>>0))/4294967296)>>>0:0)],_[l+16>>>2]=He[0],_[l+20>>>2]=He[1],0}function ji(o,l,p,m,i,a){return 52}function Ki(o,l,p,m,i,a){return 52}function Yi(o,l,p,m){return 52}function Vi(o,l,p,m,i){return 70}function Xi(o){return 52}var Qi=[null,[],[]];function Ji(o,l){var p=Qi[o];l===0||l===10?((o===1?ke:w)(Fr(p,0)),p.length=0):p.push(l)}function Zi(o,l,p,m){for(var i=0,a=0;a<p;a++){var u=H[l>>>2],d=H[l+4>>>2];l+=8;for(var b=0;b<d;b++)Ji(o,$[u+b>>>0]);i+=d}return H[m>>>2]=i,0}function es(o,l,p,m){var i=0,a=0,u=0,d=0,b=0,k=0,E;function C(F,K,W,fe,X,Ee){var A,U,re,ne;return U=F===10?28:16,X=F===10?Lr(X):dr(X),A=Kt(U),ne=qt(A,F,X,Ee),R(!ne),re=Kt(32),_[re+4>>>2]=F,_[re+8>>>2]=K,_[re+12>>>2]=W,H[re+24>>>2]=fe,H[re+20>>>2]=A,F===10?_[re+16>>>2]=28:_[re+16>>>2]=16,_[re+28>>>2]=0,re}if(p&&(u=_[p>>>2],d=_[p+4>>>2],b=_[p+8>>>2],k=_[p+12>>>2]),b&&!k&&(k=b===2?17:6),!b&&k&&(b=k===17?2:1),k===0&&(k=6),b===0&&(b=1),!o&&!l)return-2;if(u&-1088||p!==0&&_[p>>>2]&2&&!o)return-1;if(u&32)return-2;if(b!==0&&b!==1&&b!==2)return-7;if(d!==0&&d!==2&&d!==10)return-6;if(l&&(l=nt(l),a=parseInt(l,10),isNaN(a)))return u&1024?-2:-8;if(!o)return d===0&&(d=2),u&1||(d===2?i=zt(2130706433):i=[0,0,0,1]),E=C(d,b,k,null,i,a),H[m>>>2]=E,0;if(o=nt(o),i=Ve(o),i!==null)if(d===0||d===2)d=2;else if(d===10&&u&8)i=[0,0,zt(65535),i],d=10;else return-2;else if(i=Ut(o),i!==null)if(d===0||d===10)d=10;else return-2;return i!=null?(E=C(d,b,k,o,i,a),H[m>>>2]=E,0):u&4?-2:(o=Oe.lookup_name(o),i=Ve(o),d===0?d=2:d===10&&(i=[0,0,zt(65535),i]),E=C(d,b,k,null,i,a),H[m>>>2]=E,0)}function ts(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return m=>crypto.getRandomValues(m);if(P)try{var o=require("crypto"),l=o.randomFillSync;if(l)return m=>o.randomFillSync(m);var p=o.randomBytes;return m=>(m.set(p(m.byteLength)),m)}catch{}M("initRandomDevice")}function zr(o){return(zr=ts())(o)}function rs(o,l){return zr($.subarray(o>>>0,o+l>>>0)),0}function ns(o,l,p,m,i,a,u){var d=pr(o,l);if(d.errno)return-6;var b=d.port,k=d.addr,E=!1;if(p&&m){var C;if(u&1||!(C=Oe.lookup_addr(k))){if(u&8)return-2}else k=C;var F=$t(k,p,m);F+1>=m&&(E=!0)}if(i&&a){b=""+b;var F=$t(b,i,a);F+1>=a&&(E=!0)}return E?-12:0}function is(o,l){for(var p=0,m=0;m<=l;p+=o[m++]);return p}var vr=[31,29,31,30,31,30,31,31,30,31,30,31],jr=[31,28,31,30,31,30,31,31,30,31,30,31];function ss(o,l){for(var p=new Date(o.getTime());l>0;){var m=wt(p.getFullYear()),i=p.getMonth(),a=(m?vr:jr)[i];if(l>a-p.getDate())l-=a-p.getDate()+1,p.setDate(1),i<11?p.setMonth(i+1):(p.setMonth(0),p.setFullYear(p.getFullYear()+1));else return p.setDate(p.getDate()+l),p}return p}function as(o,l,p){var m=p>0?p:gr(o)+1,i=new Array(m),a=Br(o,i,0,i.length);return l&&(i.length=a),i}function Sr(o,l){j.set(o,l>>>0)}function Kr(o,l,p,m){var i=_[m+40>>>2],a={tm_sec:_[m>>>2],tm_min:_[m+4>>>2],tm_hour:_[m+8>>>2],tm_mday:_[m+12>>>2],tm_mon:_[m+16>>>2],tm_year:_[m+20>>>2],tm_wday:_[m+24>>>2],tm_yday:_[m+28>>>2],tm_isdst:_[m+32>>>2],tm_gmtoff:_[m+36>>>2],tm_zone:i?nt(i):""},u=nt(p),d={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var b in d)u=u.replace(new RegExp(b,"g"),d[b]);var k=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],E=["January","February","March","April","May","June","July","August","September","October","November","December"];function C(A,U,re){for(var ne=typeof A=="number"?A.toString():A||"";ne.length<U;)ne=re[0]+ne;return ne}function F(A,U){return C(A,U,"0")}function K(A,U){function re(T){return T<0?-1:T>0?1:0}var ne;return(ne=re(A.getFullYear()-U.getFullYear()))===0&&(ne=re(A.getMonth()-U.getMonth()))===0&&(ne=re(A.getDate()-U.getDate())),ne}function W(A){switch(A.getDay()){case 0:return new Date(A.getFullYear()-1,11,29);case 1:return A;case 2:return new Date(A.getFullYear(),0,3);case 3:return new Date(A.getFullYear(),0,2);case 4:return new Date(A.getFullYear(),0,1);case 5:return new Date(A.getFullYear()-1,11,31);case 6:return new Date(A.getFullYear()-1,11,30)}}function fe(A){var U=ss(new Date(A.tm_year+1900,0,1),A.tm_yday),re=new Date(U.getFullYear(),0,4),ne=new Date(U.getFullYear()+1,0,4),T=W(re),z=W(ne);return K(T,U)<=0?K(z,U)<=0?U.getFullYear()+1:U.getFullYear():U.getFullYear()-1}var X={"%a":function(A){return k[A.tm_wday].substring(0,3)},"%A":function(A){return k[A.tm_wday]},"%b":function(A){return E[A.tm_mon].substring(0,3)},"%B":function(A){return E[A.tm_mon]},"%C":function(A){var U=A.tm_year+1900;return F(U/100|0,2)},"%d":function(A){return F(A.tm_mday,2)},"%e":function(A){return C(A.tm_mday,2," ")},"%g":function(A){return fe(A).toString().substring(2)},"%G":function(A){return fe(A)},"%H":function(A){return F(A.tm_hour,2)},"%I":function(A){var U=A.tm_hour;return U==0?U=12:U>12&&(U-=12),F(U,2)},"%j":function(A){return F(A.tm_mday+is(wt(A.tm_year+1900)?vr:jr,A.tm_mon-1),3)},"%m":function(A){return F(A.tm_mon+1,2)},"%M":function(A){return F(A.tm_min,2)},"%n":function(){return`
`},"%p":function(A){return A.tm_hour>=0&&A.tm_hour<12?"AM":"PM"},"%S":function(A){return F(A.tm_sec,2)},"%t":function(){return"	"},"%u":function(A){return A.tm_wday||7},"%U":function(A){var U=A.tm_yday+7-A.tm_wday;return F(Math.floor(U/7),2)},"%V":function(A){var U=Math.floor((A.tm_yday+7-(A.tm_wday+6)%7)/7);if((A.tm_wday+371-A.tm_yday-2)%7<=2&&U++,U){if(U==53){var ne=(A.tm_wday+371-A.tm_yday)%7;ne!=4&&(ne!=3||!wt(A.tm_year))&&(U=1)}}else{U=52;var re=(A.tm_wday+7-A.tm_yday-1)%7;(re==4||re==5&&wt(A.tm_year%400-1))&&U++}return F(U,2)},"%w":function(A){return A.tm_wday},"%W":function(A){var U=A.tm_yday+7-(A.tm_wday+6)%7;return F(Math.floor(U/7),2)},"%y":function(A){return(A.tm_year+1900).toString().substring(2)},"%Y":function(A){return A.tm_year+1900},"%z":function(A){var U=A.tm_gmtoff,re=U>=0;return U=Math.abs(U)/60,U=U/60*100+U%60,(re?"+":"-")+("0000"+U).slice(-4)},"%Z":function(A){return A.tm_zone},"%%":function(){return"%"}};u=u.replace(/%%/g,"\0\0");for(var b in X)u.includes(b)&&(u=u.replace(new RegExp(b,"g"),X[b](a)));u=u.replace(/\0\0/g,"%");var Ee=as(u,!1);return Ee.length>l?0:(Sr(Ee,o),Ee.length-1)}function os(o,l,p,m,i){return Kr(o,l,p,m)}function us(){w("missing function: ucnv_close_64"),M(-1)}function Yr(){w("missing function: ucnv_convertEx_64"),M(-1)}function cs(){w("missing function: ucnv_open_64"),M(-1)}function ls(){w("missing function: ucnv_toAlgorithmic_64"),M(-1)}function fs(){w("missing function: ucsdet_close_64"),M(-1)}function _s(){w("missing function: ucsdet_detect_64"),M(-1)}function ds(){w("missing function: ucsdet_getConfidence_64"),M(-1)}function ps(){w("missing function: ucsdet_getName_64"),M(-1)}function hs(){w("missing function: ucsdet_open_64"),M(-1)}function ms(){w("missing function: ucsdet_setText_64"),M(-1)}function gs(){w("missing function: unzClose"),M(-1)}function bs(){w("missing function: unzCloseCurrentFile"),M(-1)}function ys(){w("missing function: unzGetCurrentFileInfo"),M(-1)}function vs(){w("missing function: unzGetCurrentFileInfo64"),M(-1)}function Ss(){w("missing function: unzGetGlobalInfo"),M(-1)}function ws(){w("missing function: unzGoToFirstFile"),M(-1)}function Es(){w("missing function: unzGoToNextFile"),M(-1)}function Rs(){w("missing function: unzLocateFile"),M(-1)}function ks(){w("missing function: unzOpen"),M(-1)}function As(){w("missing function: unzOpen2"),M(-1)}function Ts(){w("missing function: unzOpenCurrentFile"),M(-1)}function Ds(){w("missing function: unzReadCurrentFile"),M(-1)}function Cs(o){Z=o,or()||(e.onExit&&e.onExit(o),N=!0),g(o,new _r(o))}function Ps(o,l){Z=o,Cs(o)}function Ms(o){if(o instanceof _r||o=="unwind")return Z;g(1,o)}function Fs(o){var l=e["_"+o];return l}function Is(o){var l=gr(o)+1,p=Vt(l);return $t(o,p,l),p}function Os(o,l,p,m,i){var a={string:W=>{var fe=0;return W!=null&&W!==0&&(fe=Is(W)),fe},array:W=>{var fe=Vt(W.length);return Sr(W,fe),fe}};function u(W){return l==="string"?nt(W):l==="boolean"?!!W:W}var d=Fs(o),b=[],k=0;if(m)for(var E=0;E<m.length;E++){var C=a[p[E]];C?(k===0&&(k=Tt()),b[E]=C(m[E])):b[E]=m[E]}var F=d.apply(null,b);function K(W){return k!==0&&_t(k),u(W)}return F=K(F),F}var Ls={f:Gn,V:zn,W:jn,m:Kn,o:Yn,b:Vn,B:Xn,d:Qn,a:Jn,n:Zn,i:ei,La:Pr,Ga:Ir,Ka:Ht,Ja:hr,Ca:xe,c:xr,Ba:ti,O:ri,wa:ni,Ea:Wt,Fa:ii,L:Ur,ya:mr,xa:si,za:ai,M:oi,Ha:ui,ua:ci,G:li,Ia:fi,I:_i,Aa:di,H:pi,S:mi,ea:Et,fa:Si,j:wi,Ma:br,ma:$r,na:Ei,ja:Ri,ka:ki,E:Ai,ha:Ti,N:Di,ia:Ci,pa:Pi,p:Mi,oa:Fi,F:Ii,qa:Oi,ga:Li,D:xi,ra:Bi,A:Ni,X:Ui,g:Wr,Oa:Hi,Pa:$i,la:yr,ta:Gi,k:kt,Na:zi,Q:ji,P:Ki,K:Yi,R:Vi,va:Xi,v:Zi,J:es,sa:rs,Da:ns,ba:os,e:us,Y:Yr,u:cs,Z:ls,C:fs,aa:_s,$:ds,_:ps,da:hs,ca:ms,h:gs,t:bs,y:ys,q:vs,U:Ss,z:ws,x:Es,s:Rs,w:ks,T:As,r:Ts,l:Ds},lu=Wn(),xs=function(){return(xs=e.asm.Ra).apply(null,arguments)},Vr=e._main=function(){return(Vr=e._main=e.asm.Sa).apply(null,arguments)},Bs=e._duckdb_web_fs_glob_add_path=function(){return(Bs=e._duckdb_web_fs_glob_add_path=e.asm.Ua).apply(null,arguments)},fu=e._duckdb_web_clear_response=function(){return(fu=e._duckdb_web_clear_response=e.asm.Va).apply(null,arguments)},Ns=e._duckdb_web_fail_with=function(){return(Ns=e._duckdb_web_fail_with=e.asm.Wa).apply(null,arguments)},Xr=e._duckdb_web_reset=function(){return(Xr=e._duckdb_web_reset=e.asm.Xa).apply(null,arguments)},Us=e._duckdb_web_connect=function(){return(Us=e._duckdb_web_connect=e.asm.Ya).apply(null,arguments)},Hs=e._duckdb_web_disconnect=function(){return(Hs=e._duckdb_web_disconnect=e.asm.Za).apply(null,arguments)},$s=e._duckdb_web_flush_files=function(){return($s=e._duckdb_web_flush_files=e.asm._a).apply(null,arguments)},qs=e._duckdb_web_flush_file=function(){return(qs=e._duckdb_web_flush_file=e.asm.$a).apply(null,arguments)},Ws=e._duckdb_web_open=function(){return(Ws=e._duckdb_web_open=e.asm.ab).apply(null,arguments)},Gs=e._duckdb_web_get_global_file_info=function(){return(Gs=e._duckdb_web_get_global_file_info=e.asm.bb).apply(null,arguments)},zs=e._duckdb_web_collect_file_stats=function(){return(zs=e._duckdb_web_collect_file_stats=e.asm.cb).apply(null,arguments)},js=e._duckdb_web_export_file_stats=function(){return(js=e._duckdb_web_export_file_stats=e.asm.db).apply(null,arguments)},Ks=e._duckdb_web_fs_drop_file=function(){return(Ks=e._duckdb_web_fs_drop_file=e.asm.eb).apply(null,arguments)},Ys=e._duckdb_web_fs_drop_files=function(){return(Ys=e._duckdb_web_fs_drop_files=e.asm.fb).apply(null,arguments)},Vs=e._duckdb_web_fs_glob_file_infos=function(){return(Vs=e._duckdb_web_fs_glob_file_infos=e.asm.gb).apply(null,arguments)},Xs=e._duckdb_web_fs_get_file_info_by_id=function(){return(Xs=e._duckdb_web_fs_get_file_info_by_id=e.asm.hb).apply(null,arguments)},Qs=e._duckdb_web_fs_get_file_info_by_name=function(){return(Qs=e._duckdb_web_fs_get_file_info_by_name=e.asm.ib).apply(null,arguments)},Js=e._duckdb_web_fs_register_file_url=function(){return(Js=e._duckdb_web_fs_register_file_url=e.asm.jb).apply(null,arguments)},Zs=e._duckdb_web_fs_register_file_buffer=function(){return(Zs=e._duckdb_web_fs_register_file_buffer=e.asm.kb).apply(null,arguments)},ea=e._duckdb_web_copy_file_to_buffer=function(){return(ea=e._duckdb_web_copy_file_to_buffer=e.asm.lb).apply(null,arguments)},ta=e._duckdb_web_copy_file_to_path=function(){return(ta=e._duckdb_web_copy_file_to_path=e.asm.mb).apply(null,arguments)},ra=e._duckdb_web_get_version=function(){return(ra=e._duckdb_web_get_version=e.asm.nb).apply(null,arguments)},na=e._duckdb_web_get_feature_flags=function(){return(na=e._duckdb_web_get_feature_flags=e.asm.ob).apply(null,arguments)},ia=e._duckdb_web_tokenize=function(){return(ia=e._duckdb_web_tokenize=e.asm.pb).apply(null,arguments)},sa=e._duckdb_web_udf_scalar_create=function(){return(sa=e._duckdb_web_udf_scalar_create=e.asm.qb).apply(null,arguments)},aa=e._duckdb_web_prepared_create=function(){return(aa=e._duckdb_web_prepared_create=e.asm.rb).apply(null,arguments)},oa=e._duckdb_web_prepared_close=function(){return(oa=e._duckdb_web_prepared_close=e.asm.sb).apply(null,arguments)},ua=e._duckdb_web_prepared_run=function(){return(ua=e._duckdb_web_prepared_run=e.asm.tb).apply(null,arguments)},ca=e._duckdb_web_prepared_send=function(){return(ca=e._duckdb_web_prepared_send=e.asm.ub).apply(null,arguments)},la=e._duckdb_web_query_run=function(){return(la=e._duckdb_web_query_run=e.asm.vb).apply(null,arguments)},fa=e._duckdb_web_pending_query_start=function(){return(fa=e._duckdb_web_pending_query_start=e.asm.wb).apply(null,arguments)},_a=e._duckdb_web_pending_query_poll=function(){return(_a=e._duckdb_web_pending_query_poll=e.asm.xb).apply(null,arguments)},da=e._duckdb_web_pending_query_cancel=function(){return(da=e._duckdb_web_pending_query_cancel=e.asm.yb).apply(null,arguments)},pa=e._duckdb_web_query_fetch_results=function(){return(pa=e._duckdb_web_query_fetch_results=e.asm.zb).apply(null,arguments)},ha=e._duckdb_web_get_tablenames=function(){return(ha=e._duckdb_web_get_tablenames=e.asm.Ab).apply(null,arguments)},ma=e._duckdb_web_insert_arrow_from_ipc_stream=function(){return(ma=e._duckdb_web_insert_arrow_from_ipc_stream=e.asm.Bb).apply(null,arguments)},ga=e._duckdb_web_insert_csv_from_path=function(){return(ga=e._duckdb_web_insert_csv_from_path=e.asm.Cb).apply(null,arguments)},ba=e._duckdb_web_insert_json_from_path=function(){return(ba=e._duckdb_web_insert_json_from_path=e.asm.Db).apply(null,arguments)},ya=function(){return(ya=e.asm.__errno_location).apply(null,arguments)},zt=function(){return(zt=e.asm.Eb).apply(null,arguments)},jt=function(){return(jt=e.asm.Fb).apply(null,arguments)},wr=function(){return(wr=e.asm.Gb).apply(null,arguments)},Kt=e._malloc=function(){return(Kt=e._malloc=e.asm.Hb).apply(null,arguments)},Yt=e._free=function(){return(Yt=e._free=e.asm.Ib).apply(null,arguments)},At=function(){return(At=e.asm.Jb).apply(null,arguments)},Tt=function(){return(Tt=e.asm.Kb).apply(null,arguments)},_t=function(){return(_t=e.asm.Lb).apply(null,arguments)},Vt=function(){return(Vt=e.asm.Mb).apply(null,arguments)};e.stackAlloc=Vt,e.stackSave=Tt,e.stackRestore=_t,e.ccall=Os;var dt;Ke=function o(){dt||Dt(),dt||(Ke=o)};function Er(){var o=Vr,l=0,p=0;try{var m=o(l,p);return Ps(m,!0),m}catch(i){return Ms(i)}}function Dt(){if(Te>0||(x(),Te>0))return;function o(){dt||(dt=!0,e.calledRun=!0,!N&&(he(),I(),n(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),Rr&&Er(),J()))}e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1),o()},1)):o()}if(e.preInit)for(typeof e.preInit=="function"&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();var Rr=!0;return e.noInitialRun&&(Rr=!1),Dt(),t.ready}})();typeof en=="object"&&typeof Sa=="object"?Sa.exports=va:typeof define=="function"&&define.amd?define([],function(){return va}):typeof en=="object"&&(en.DuckDB=va)});var hu=L((tn,Ea)=>{"use strict";var wa=(()=>{var r=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(r=r||__filename),function(t={}){var e=typeof t<"u"?t:{},n,s;e.ready=new Promise((i,a)=>{n=i,s=a});var c=Object.assign({},e),f=[],h="./this.program",g=(i,a)=>{throw a},D=typeof window=="object",y=typeof importScripts=="function",P=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",S="";function te(i){return e.locateFile?e.locateFile(i,S):S+i}var O,B,G,Y;if(P){var le=require("fs"),ue=require("path");y?S=ue.dirname(S)+"/":S=__dirname+"/",O=(i,a)=>(i=cr(i)?new URL(i):ue.normalize(i),le.readFileSync(i,a?void 0:"utf8")),G=i=>{var a=O(i,!0);return a.buffer||(a=new Uint8Array(a)),a},B=(i,a,u,d=!0)=>{i=cr(i)?new URL(i):ue.normalize(i),le.readFile(i,d?void 0:"utf8",(b,k)=>{b?u(b):a(d?k.buffer:k)})},!e.thisProgram&&process.argv.length>1&&(h=process.argv[1].replace(/\\/g,"/")),f=process.argv.slice(2),g=(i,a)=>{throw process.exitCode=i,a},e.inspect=()=>"[Emscripten Module object]"}else(D||y)&&(y?S=self.location.href:typeof document<"u"&&document.currentScript&&(S=document.currentScript.src),r&&(S=r),S.indexOf("blob:")!==0?S=S.substr(0,S.replace(/[?#].*/,"").lastIndexOf("/")+1):S="",O=i=>{var a=new XMLHttpRequest;return a.open("GET",i,!1),a.send(null),a.responseText},y&&(G=i=>{var a=new XMLHttpRequest;return a.open("GET",i,!1),a.responseType="arraybuffer",a.send(null),new Uint8Array(a.response)}),B=(i,a,u)=>{var d=new XMLHttpRequest;d.open("GET",i,!0),d.responseType="arraybuffer",d.onload=()=>{if(d.status==200||d.status==0&&d.response){a(d.response);return}u()},d.onerror=u,d.send(null)},Y=i=>document.title=i);var ke=e.print||console.log.bind(console),w=e.printErr||console.error.bind(console);Object.assign(e,c),c=null,e.arguments&&(f=e.arguments),e.thisProgram&&(h=e.thisProgram),e.quit&&(g=e.quit);var ie;e.wasmBinary&&(ie=e.wasmBinary);var V=e.noExitRuntime||!0;typeof WebAssembly!="object"&&M("no native wasm support detected");var q,N=!1,Z;function R(i,a){i||M(a)}var j,$,se,v,_,H,ce,Le;function Me(){var i=q.buffer;e.HEAP8=j=new Int8Array(i),e.HEAP16=se=new Int16Array(i),e.HEAP32=_=new Int32Array(i),e.HEAPU8=$=new Uint8Array(i),e.HEAPU16=v=new Uint16Array(i),e.HEAPU32=H=new Uint32Array(i),e.HEAPF32=ce=new Float32Array(i),e.HEAPF64=Le=new Float64Array(i)}var De,Ye=[],vt=[],ct=[],Ne=[],ee=!1,lt=0;function or(){return V||lt>0}function x(){if(e.preRun)for(typeof e.preRun=="function"&&(e.preRun=[e.preRun]);e.preRun.length;)ge(e.preRun.shift());rt(Ye)}function he(){ee=!0,rt(vt)}function I(){rt(ct)}function J(){if(e.postRun)for(typeof e.postRun=="function"&&(e.postRun=[e.postRun]);e.postRun.length;)we(e.postRun.shift());rt(Ne)}function ge(i){Ye.unshift(i)}function Ae(i){vt.unshift(i)}function we(i){Ne.unshift(i)}var Te=0,Ge=null,Ke=null;function Nn(i){Te++,e.monitorRunDependencies&&e.monitorRunDependencies(Te)}function Un(i){if(Te--,e.monitorRunDependencies&&e.monitorRunDependencies(Te),Te==0&&(Ge!==null&&(clearInterval(Ge),Ge=null),Ke)){var a=Ke;Ke=null,a()}}function M(i){e.onAbort&&e.onAbort(i),i="Aborted("+i+")",w(i),N=!0,Z=1,i+=". Build with -sASSERTIONS for more info.";var a=new WebAssembly.RuntimeError(i);throw s(a),a}var Hn="data:application/octet-stream;base64,";function ur(i){return i.startsWith(Hn)}function cr(i){return i.startsWith("file://")}var Ue;Ue="./duckdb-mvp.wasm",ur(Ue)||(Ue=te(Ue));function lr(i){try{if(i==Ue&&ie)return new Uint8Array(ie);if(G)return G(i);throw"both async and sync fetching of the wasm failed"}catch(a){M(a)}}function $n(i){return!ie&&(D||y)&&typeof fetch=="function"?fetch(i,{credentials:"same-origin"}).then(a=>{if(!a.ok)throw"failed to load wasm binary file at '"+i+"'";return a.arrayBuffer()}).catch(()=>lr(i)):Promise.resolve().then(()=>lr(i))}function fr(i,a,u){return $n(i).then(d=>WebAssembly.instantiate(d,a)).then(d=>d).then(u,d=>{w("failed to asynchronously prepare wasm: "+d),M(d)})}function qn(i,a,u,d){return!i&&typeof WebAssembly.instantiateStreaming=="function"&&!ur(a)&&!P&&typeof fetch=="function"?fetch(a,{credentials:"same-origin"}).then(b=>{var k=WebAssembly.instantiateStreaming(b,u);return k.then(d,function(E){return w("wasm streaming compile failed: "+E),w("falling back to ArrayBuffer instantiation"),fr(a,u,d)})}):fr(a,u,d)}function Wn(){var i={a:Bs};function a(d,b){var k=d.exports;return e.asm=k,q=e.asm.Ra,Me(),De=e.asm.Ua,Ae(e.asm.Sa),Un("wasm-instantiate"),k}Nn("wasm-instantiate");function u(d){a(d.instance)}if(e.instantiateWasm)try{return e.instantiateWasm(i,a)}catch(d){w("Module.instantiateWasm callback failed with error: "+d),s(d)}return qn(ie,Ue,i,u).catch(s),{}}var be,He;function _r(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}function rt(i){for(;i.length>0;)i.shift()(e)}function Gn(){w("missing function: XML_GetBuffer"),M(-1)}function zn(){w("missing function: XML_GetErrorCode"),M(-1)}function jn(){w("missing function: XML_Parse"),M(-1)}function Kn(){w("missing function: XML_ParseBuffer"),M(-1)}function Yn(){w("missing function: XML_ParserCreate"),M(-1)}function Vn(){w("missing function: XML_ParserFree"),M(-1)}function Xn(){w("missing function: XML_ResumeParser"),M(-1)}function Qn(){w("missing function: XML_SetCharacterDataHandler"),M(-1)}function Jn(){w("missing function: XML_SetElementHandler"),M(-1)}function Zn(){w("missing function: XML_SetUserData"),M(-1)}function ei(){w("missing function: XML_StopParser"),M(-1)}function Cr(i){this.excPtr=i,this.ptr=i-24,this.set_type=function(a){H[this.ptr+4>>>2]=a},this.get_type=function(){return H[this.ptr+4>>>2]},this.set_destructor=function(a){H[this.ptr+8>>>2]=a},this.get_destructor=function(){return H[this.ptr+8>>>2]},this.set_caught=function(a){a=a?1:0,j[this.ptr+12>>>0]=a},this.get_caught=function(){return j[this.ptr+12>>>0]!=0},this.set_rethrown=function(a){a=a?1:0,j[this.ptr+13>>>0]=a},this.get_rethrown=function(){return j[this.ptr+13>>>0]!=0},this.init=function(a,u){this.set_adjusted_ptr(0),this.set_type(a),this.set_destructor(u)},this.set_adjusted_ptr=function(a){H[this.ptr+16>>>2]=a},this.get_adjusted_ptr=function(){return H[this.ptr+16>>>2]},this.get_exception_ptr=function(){var a=Rr(this.get_type());if(a)return H[this.excPtr>>>2];var u=this.get_adjusted_ptr();return u!==0?u:this.excPtr}}var Pr=0,Mr=0;function Fr(i,a,u){var d=new Cr(i);throw d.init(a,u),Pr=i,Mr++,Pr}var nt="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function it(i,a,u){M(nt)}var Ir=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function Or(i,a,u){a>>>=0;for(var d=a+u,b=a;i[b]&&!(b>=d);)++b;if(b-a>16&&i.buffer&&Ir)return Ir.decode(i.subarray(a,b));for(var k="";a<b;){var E=i[a++];if(!(E&128)){k+=String.fromCharCode(E);continue}var C=i[a++]&63;if((E&224)==192){k+=String.fromCharCode((E&31)<<6|C);continue}var F=i[a++]&63;if((E&240)==224?E=(E&15)<<12|C<<6|F:E=(E&7)<<18|C<<12|F<<6|i[a++]&63,E<65536)k+=String.fromCharCode(E);else{var K=E-65536;k+=String.fromCharCode(55296|K>>10,56320|K&1023)}}return k}function st(i,a){return i>>>=0,i?Or($,i,a):""}var $e={varargs:void 0,get:function(){$e.varargs+=4;var i=_[$e.varargs-4>>>2];return i},getStr:function(i){var a=st(i);return a}};function dr(i,a,u,d,b){for(var k=0,E=a?_[a>>>2]:0,C=a?_[a+4>>>2]:0,F=u?_[u>>>2]:0,K=u?_[u+4>>>2]:0,W=d?_[d>>>2]:0,fe=d?_[d+4>>>2]:0,X=0,Ee=0,A=0,U=0,re=0,ne=0,T=(a?_[a>>>2]:0)|(u?_[u>>>2]:0)|(d?_[d>>>2]:0),z=(a?_[a+4>>>2]:0)|(u?_[u+4>>>2]:0)|(d?_[d+4>>>2]:0),_e=function(pf,hf,mf,_u){return pf<32?hf&_u:mf&_u},de=0;de<i;de++){var Ce=1<<de%32;if(_e(de,T,z,Ce)){var Ct=$e.getStreamFromFD(de),Pt=$e.DEFAULT_POLLMASK;Ct.stream_ops.poll&&(Pt=Ct.stream_ops.poll(Ct)),Pt&1&&_e(de,E,C,Ce)&&(de<32?X=X|Ce:Ee=Ee|Ce,k++),Pt&4&&_e(de,F,K,Ce)&&(de<32?A=A|Ce:U=U|Ce,k++),Pt&2&&_e(de,W,fe,Ce)&&(de<32?re=re|Ce:ne=ne|Ce,k++)}}return a&&(_[a>>>2]=X,_[a+4>>>2]=Ee),u&&(_[u>>>2]=A,_[u+4>>>2]=U),d&&(_[d>>>2]=re,_[d+4>>>2]=ne),k}function Lr(){w("missing function: $SOCKFS"),M(-1)}function pr(){w("missing function: $FS"),M(-1)}function Ve(i){var a=Lr.getSocket(i);if(!a)throw new pr.ErrnoError(8);return a}function ft(i){return(i&255)+"."+(i>>8&255)+"."+(i>>16&255)+"."+(i>>24&255)}function Ut(i){var a="",u=0,d=0,b=0,k=0,E=0,C=0,F=[i[0]&65535,i[0]>>16,i[1]&65535,i[1]>>16,i[2]&65535,i[2]>>16,i[3]&65535,i[3]>>16],K=!0,W="";for(C=0;C<5;C++)if(F[C]!==0){K=!1;break}if(K){if(W=ft(F[6]|F[7]<<16),F[5]===-1)return a="::ffff:",a+=W,a;if(F[5]===0)return a="::",W==="0.0.0.0"&&(W=""),W==="0.0.0.1"&&(W="1"),a+=W,a}for(u=0;u<8;u++)F[u]===0&&(u-b>1&&(E=0),b=u,E++),E>d&&(d=E,k=u-d+1);for(u=0;u<8;u++){if(d>1&&F[u]===0&&u>=k&&u<k+d){u===k&&(a+=":",k===0&&(a+=":"));continue}a+=Number(Tt(F[u]&65535)).toString(16),a+=u<7?":":""}return a}function Oe(i,a){var u=se[i>>>1],d=Tt(v[i+2>>>1]),b;switch(u){case 2:if(a!==16)return{errno:28};b=_[i+4>>>2],b=ft(b);break;case 10:if(a!==28)return{errno:28};b=[_[i+8>>>2],_[i+12>>>2],_[i+16>>>2],_[i+20>>>2]],b=Ut(b);break;default:return{errno:5}}return{family:u,addr:b,port:d}}function St(i){for(var a=i.split("."),u=0;u<4;u++){var d=Number(a[u]);if(isNaN(d))return null;a[u]=d}return(a[0]|a[1]<<8|a[2]<<16|a[3]<<24)>>>0}function Ht(i){return parseInt(i)}function hr(i){var a,u,d,b,k=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,E=[];if(!k.test(i))return null;if(i==="::")return[0,0,0,0,0,0,0,0];for(i.startsWith("::")?i=i.replace("::","Z:"):i=i.replace("::",":Z:"),i.indexOf(".")>0?(i=i.replace(new RegExp("[.]","g"),":"),a=i.split(":"),a[a.length-4]=Ht(a[a.length-4])+Ht(a[a.length-3])*256,a[a.length-3]=Ht(a[a.length-2])+Ht(a[a.length-1])*256,a=a.slice(0,a.length-2)):a=i.split(":"),d=0,b=0,u=0;u<a.length;u++)if(typeof a[u]=="string")if(a[u]==="Z"){for(b=0;b<8-a.length+1;b++)E[u+b]=0;d=b-1}else E[u+d]=At(parseInt(a[u],16));else E[u+d]=a[u];return[E[1]<<16|E[0],E[3]<<16|E[2],E[5]<<16|E[4],E[7]<<16|E[6]]}var xe={address_map:{id:1,addrs:{},names:{}},lookup_name:function(i){var a=St(i);if(a!==null||(a=hr(i),a!==null))return i;var u;if(xe.address_map.addrs[i])u=xe.address_map.addrs[i];else{var d=xe.address_map.id++;R(d<65535,"exceeded max address mappings of 65535"),u="172.29."+(d&255)+"."+(d&65280),xe.address_map.names[u]=i,xe.address_map.addrs[i]=u}return u},lookup_addr:function(i){return xe.address_map.names[i]?xe.address_map.names[i]:null}};function xr(i,a,u){if(u&&i===0)return null;var d=Oe(i,a);if(d.errno)throw new pr.ErrnoError(d.errno);return d.addr=xe.lookup_addr(d.addr)||d.addr,d}function ti(i,a,u,d,b,k){var E=Ve(i),C=xr(a,u);return E.sock_ops.bind(E,C.addr,C.port),0}function ri(i,a,u,d,b,k){var E=Ve(i),C=xr(a,u);return E.sock_ops.connect(E,C.addr,C.port),0}function Br(i,a,u,d){}function $t(i,a,u){return $e.varargs=u,0}function ni(i,a){}function Nr(i,a,u){}function qt(i,a,u,d){if(u>>>=0,!(d>0))return 0;for(var b=u,k=u+d-1,E=0;E<i.length;++E){var C=i.charCodeAt(E);if(C>=55296&&C<=57343){var F=i.charCodeAt(++E);C=65536+((C&1023)<<10)|F&1023}if(C<=127){if(u>=k)break;a[u++>>>0]=C}else if(C<=2047){if(u+1>=k)break;a[u++>>>0]=192|C>>6,a[u++>>>0]=128|C&63}else if(C<=65535){if(u+2>=k)break;a[u++>>>0]=224|C>>12,a[u++>>>0]=128|C>>6&63,a[u++>>>0]=128|C&63}else{if(u+3>=k)break;a[u++>>>0]=240|C>>18,a[u++>>>0]=128|C>>12&63,a[u++>>>0]=128|C>>6&63,a[u++>>>0]=128|C&63}}return a[u>>>0]=0,u-b}function Wt(i,a,u){return qt(i,$,a,u)}function ii(i,a,u){}function Ur(i,a){return $.fill(0,i,i+a),i}function mr(i,a,u,d,b){switch(a){case 2:u=St(u),Ur(i,16),b&&(_[b>>>2]=16),se[i>>>1]=a,_[i+4>>>2]=u,se[i+2>>>1]=At(d);break;case 10:u=hr(u),Ur(i,28),b&&(_[b>>>2]=28),_[i>>>2]=a,_[i+8>>>2]=u[0],_[i+12>>>2]=u[1],_[i+16>>>2]=u[2],_[i+20>>>2]=u[3],se[i+2>>>1]=At(d);break;default:return 5}return 0}function si(i,a,u,d,b,k){var E=Ve(i);if(!E.daddr)return-53;var C=mr(a,E.family,xe.lookup_name(E.daddr),E.dport,u);return 0}function ai(i,a,u,d,b,k){var E=Ve(i);return a===1&&u===4?(_[d>>>2]=E.error,_[b>>>2]=4,E.error=null,0):-50}function oi(i,a,u){return $e.varargs=u,0}function ui(i,a){}function ci(i,a,u){}function li(i,a,u,d){}function fi(i,a,u,d){$e.varargs=d}function _i(i,a,u,d,b,k){var E=Ve(i),C=E.sock_ops.recvmsg(E,u);if(!C)return 0;if(b)var F=mr(b,E.family,xe.lookup_name(C.addr),C.port,k);return $.set(C.buffer,a>>>0),C.buffer.byteLength}function di(i,a,u,d){}function pi(i){}function hi(i,a,u,d,b,k){}function mi(i,a,u){}function gi(i,a){}function wt(i,a,u){}var bi=!0;function yi(){return bi}function vi(i){return H[i>>>2]+_[i+4>>>2]*4294967296}function Et(i){return i%4===0&&(i%100!==0||i%400===0)}var gr=[0,31,60,91,121,152,182,213,244,274,305,335],Hr=[0,31,59,90,120,151,181,212,243,273,304,334];function Si(i){var a=Et(i.getFullYear()),u=a?gr:Hr,d=u[i.getMonth()]+i.getDate()-1;return d}function wi(i,a){var u=new Date(vi(i)*1e3);_[a>>>2]=u.getSeconds(),_[a+4>>>2]=u.getMinutes(),_[a+8>>>2]=u.getHours(),_[a+12>>>2]=u.getDate(),_[a+16>>>2]=u.getMonth(),_[a+20>>>2]=u.getFullYear()-1900,_[a+24>>>2]=u.getDay();var d=Si(u)|0;_[a+28>>>2]=d,_[a+36>>>2]=-(u.getTimezoneOffset()*60);var b=new Date(u.getFullYear(),0,1),k=new Date(u.getFullYear(),6,1).getTimezoneOffset(),E=b.getTimezoneOffset(),C=(k!=E&&u.getTimezoneOffset()==Math.min(E,k))|0;_[a+32>>>2]=C}function br(i){for(var a=0,u=0;u<i.length;++u){var d=i.charCodeAt(u);d<=127?a++:d<=2047?a+=2:d>=55296&&d<=57343?(a+=4,++u):a+=3}return a}function $r(i){var a=br(i)+1,u=_t(a);return u&&Wt(i,u,a),u}function Ei(i,a,u){var d=new Date().getFullYear(),b=new Date(d,0,1),k=new Date(d,6,1),E=b.getTimezoneOffset(),C=k.getTimezoneOffset(),F=Math.max(E,C);H[i>>>2]=F*60,_[a>>>2]=+(E!=C);function K(A){var U=A.toTimeString().match(/\(([A-Za-z ]+)\)$/);return U?U[1]:"GMT"}var W=K(b),fe=K(k),X=$r(W),Ee=$r(fe);C<E?(H[u>>>2]=X,H[u+4>>>2]=Ee):(H[u>>>2]=Ee,H[u+4>>>2]=X)}function Ri(){M("")}function ki(i,a){M(nt)}function Ai(i,a){return globalThis.DUCKDB_RUNTIME.createDirectory(e,i,a)}function Ti(i,a){return globalThis.DUCKDB_RUNTIME.checkDirectory(e,i,a)}function Di(i,a){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(e,i,a)}function Ci(i,a){return globalThis.DUCKDB_RUNTIME.removeDirectory(e,i,a)}function Pi(i){return globalThis.DUCKDB_RUNTIME.closeFile(e,i)}function Mi(i,a){return globalThis.DUCKDB_RUNTIME.checkFile(e,i,a)}function Fi(i){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(e,i)}function Ii(i,a,u,d){return globalThis.DUCKDB_RUNTIME.moveFile(e,i,a,u,d)}function Oi(i,a){return globalThis.DUCKDB_RUNTIME.openFile(e,i,a)}function Li(i,a,u,d){return globalThis.DUCKDB_RUNTIME.readFile(e,i,a,u,d)}function xi(i,a){return globalThis.DUCKDB_RUNTIME.truncateFile(e,i,a)}function Bi(i,a,u,d){return globalThis.DUCKDB_RUNTIME.writeFile(e,i,a,u,d)}function Ni(i){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(i)}function qr(i,a){return globalThis.DUCKDB_RUNTIME.glob(e,i,a)}function Ui(i){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(e,i)}function Wr(i,a,u,d,b,k){return globalThis.DUCKDB_RUNTIME.callScalarUDF(e,i,a,u,d,b,k)}function Hi(){return Date.now()}function Gr(){return 4294901760}function $i(){return Gr()}var Gt;P&&(global.performance=require("perf_hooks").performance),Gt=()=>performance.now();function qi(i,a,u){$.copyWithin(i>>>0,a>>>0,a+u>>>0)}function Rt(i){var a=q.buffer,u=i-a.byteLength+65535>>>16;try{return q.grow(u),Me(),1}catch{}}function Wi(i){var a=$.length;i=i>>>0;var u=Gr();if(i>u)return!1;for(var d=(F,K)=>F+(K-F%K)%K,b=1;b<=4;b*=2){var k=a*(1+.2/b);k=Math.min(k,i+100663296);var E=Math.min(u,d(Math.max(i,k),65536)),C=Rt(E);if(C)return!0}return!1}var yr={};function Gi(){return h||"./this.program"}function kt(){if(!kt.strings){var i=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",a={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:i,_:Gi()};for(var u in yr)yr[u]===void 0?delete a[u]:a[u]=yr[u];var d=[];for(var u in a)d.push(`${u}=${a[u]}`);kt.strings=d}return kt.strings}function zi(i,a){for(var u=0;u<i.length;++u)j[a++>>>0]=i.charCodeAt(u);j[a>>>0]=0}function ji(i,a){var u=0;return kt().forEach(function(d,b){var k=a+u;H[i+b*4>>>2]=k,zi(d,k),u+=d.length+1}),0}function Ki(i,a){var u=kt();H[i>>>2]=u.length;var d=0;return u.forEach(function(b){d+=b.length+1}),H[a>>>2]=d,0}function Yi(i){return 52}function Vi(i,a){var u=0,d=0,b=0;{var k=2;i==0?u=2:(i==1||i==2)&&(u=64),b=1}return j[a>>>0]=k,se[a+2>>>1]=b,He=[u>>>0,(be=u,+Math.abs(be)>=1?be>0?+Math.floor(be/4294967296)>>>0:~~+Math.ceil((be-+(~~be>>>0))/4294967296)>>>0:0)],_[a+8>>>2]=He[0],_[a+12>>>2]=He[1],He=[d>>>0,(be=d,+Math.abs(be)>=1?be>0?+Math.floor(be/4294967296)>>>0:~~+Math.ceil((be-+(~~be>>>0))/4294967296)>>>0:0)],_[a+16>>>2]=He[0],_[a+20>>>2]=He[1],0}function Xi(i,a,u,d,b,k){return 52}function Qi(i,a,u,d,b,k){return 52}function Ji(i,a,u,d){return 52}function Zi(i,a,u,d,b){return 70}function es(i){return 52}var ts=[null,[],[]];function zr(i,a){var u=ts[i];a===0||a===10?((i===1?ke:w)(Or(u,0)),u.length=0):u.push(a)}function rs(i,a,u,d){for(var b=0,k=0;k<u;k++){var E=H[a>>>2],C=H[a+4>>>2];a+=8;for(var F=0;F<C;F++)zr(i,$[E+F>>>0]);b+=C}return H[d>>>2]=b,0}function ns(i,a,u,d){var b=0,k=0,E=0,C=0,F=0,K=0,W;function fe(X,Ee,A,U,re,ne){var T,z,_e,de;return z=X===10?28:16,re=X===10?Ut(re):ft(re),T=_t(z),de=mr(T,X,re,ne),R(!de),_e=_t(32),_[_e+4>>>2]=X,_[_e+8>>>2]=Ee,_[_e+12>>>2]=A,H[_e+24>>>2]=U,H[_e+20>>>2]=T,X===10?_[_e+16>>>2]=28:_[_e+16>>>2]=16,_[_e+28>>>2]=0,_e}if(u&&(E=_[u>>>2],C=_[u+4>>>2],F=_[u+8>>>2],K=_[u+12>>>2]),F&&!K&&(K=F===2?17:6),!F&&K&&(F=K===17?2:1),K===0&&(K=6),F===0&&(F=1),!i&&!a)return-2;if(E&-1088||u!==0&&_[u>>>2]&2&&!i)return-1;if(E&32)return-2;if(F!==0&&F!==1&&F!==2)return-7;if(C!==0&&C!==2&&C!==10)return-6;if(a&&(a=st(a),k=parseInt(a,10),isNaN(k)))return E&1024?-2:-8;if(!i)return C===0&&(C=2),E&1||(C===2?b=Yt(2130706433):b=[0,0,0,1]),W=fe(C,F,K,null,b,k),H[d>>>2]=W,0;if(i=st(i),b=St(i),b!==null)if(C===0||C===2)C=2;else if(C===10&&E&8)b=[0,0,Yt(65535),b],C=10;else return-2;else if(b=hr(i),b!==null)if(C===0||C===10)C=10;else return-2;return b!=null?(W=fe(C,F,K,i,b,k),H[d>>>2]=W,0):E&4?-2:(i=xe.lookup_name(i),b=St(i),C===0?C=2:C===10&&(b=[0,0,Yt(65535),b]),W=fe(C,F,K,null,b,k),H[d>>>2]=W,0)}function is(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return d=>crypto.getRandomValues(d);if(P)try{var i=require("crypto"),a=i.randomFillSync;if(a)return d=>i.randomFillSync(d);var u=i.randomBytes;return d=>(d.set(u(d.byteLength)),d)}catch{}M("initRandomDevice")}function vr(i){return(vr=is())(i)}function jr(i,a){return vr($.subarray(i>>>0,i+a>>>0)),0}function ss(i,a,u,d,b,k,E){var C=Oe(i,a);if(C.errno)return-6;var F=C.port,K=C.addr,W=!1;if(u&&d){var fe;if(E&1||!(fe=xe.lookup_addr(K))){if(E&8)return-2}else K=fe;var X=Wt(K,u,d);X+1>=d&&(W=!0)}if(b&&k){F=""+F;var X=Wt(F,b,k);X+1>=k&&(W=!0)}return W?-12:0}function as(i,a){for(var u=0,d=0;d<=a;u+=i[d++]);return u}var Sr=[31,29,31,30,31,30,31,31,30,31,30,31],Kr=[31,28,31,30,31,30,31,31,30,31,30,31];function os(i,a){for(var u=new Date(i.getTime());a>0;){var d=Et(u.getFullYear()),b=u.getMonth(),k=(d?Sr:Kr)[b];if(a>k-u.getDate())a-=k-u.getDate()+1,u.setDate(1),b<11?u.setMonth(b+1):(u.setMonth(0),u.setFullYear(u.getFullYear()+1));else return u.setDate(u.getDate()+a),u}return u}function us(i,a,u){var d=u>0?u:br(i)+1,b=new Array(d),k=qt(i,b,0,b.length);return a&&(b.length=k),b}function Yr(i,a){j.set(i,a>>>0)}function cs(i,a,u,d){var b=_[d+40>>>2],k={tm_sec:_[d>>>2],tm_min:_[d+4>>>2],tm_hour:_[d+8>>>2],tm_mday:_[d+12>>>2],tm_mon:_[d+16>>>2],tm_year:_[d+20>>>2],tm_wday:_[d+24>>>2],tm_yday:_[d+28>>>2],tm_isdst:_[d+32>>>2],tm_gmtoff:_[d+36>>>2],tm_zone:b?st(b):""},E=st(u),C={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var F in C)E=E.replace(new RegExp(F,"g"),C[F]);var K=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],W=["January","February","March","April","May","June","July","August","September","October","November","December"];function fe(T,z,_e){for(var de=typeof T=="number"?T.toString():T||"";de.length<z;)de=_e[0]+de;return de}function X(T,z){return fe(T,z,"0")}function Ee(T,z){function _e(Ce){return Ce<0?-1:Ce>0?1:0}var de;return(de=_e(T.getFullYear()-z.getFullYear()))===0&&(de=_e(T.getMonth()-z.getMonth()))===0&&(de=_e(T.getDate()-z.getDate())),de}function A(T){switch(T.getDay()){case 0:return new Date(T.getFullYear()-1,11,29);case 1:return T;case 2:return new Date(T.getFullYear(),0,3);case 3:return new Date(T.getFullYear(),0,2);case 4:return new Date(T.getFullYear(),0,1);case 5:return new Date(T.getFullYear()-1,11,31);case 6:return new Date(T.getFullYear()-1,11,30)}}function U(T){var z=os(new Date(T.tm_year+1900,0,1),T.tm_yday),_e=new Date(z.getFullYear(),0,4),de=new Date(z.getFullYear()+1,0,4),Ce=A(_e),Ct=A(de);return Ee(Ce,z)<=0?Ee(Ct,z)<=0?z.getFullYear()+1:z.getFullYear():z.getFullYear()-1}var re={"%a":function(T){return K[T.tm_wday].substring(0,3)},"%A":function(T){return K[T.tm_wday]},"%b":function(T){return W[T.tm_mon].substring(0,3)},"%B":function(T){return W[T.tm_mon]},"%C":function(T){var z=T.tm_year+1900;return X(z/100|0,2)},"%d":function(T){return X(T.tm_mday,2)},"%e":function(T){return fe(T.tm_mday,2," ")},"%g":function(T){return U(T).toString().substring(2)},"%G":function(T){return U(T)},"%H":function(T){return X(T.tm_hour,2)},"%I":function(T){var z=T.tm_hour;return z==0?z=12:z>12&&(z-=12),X(z,2)},"%j":function(T){return X(T.tm_mday+as(Et(T.tm_year+1900)?Sr:Kr,T.tm_mon-1),3)},"%m":function(T){return X(T.tm_mon+1,2)},"%M":function(T){return X(T.tm_min,2)},"%n":function(){return`
`},"%p":function(T){return T.tm_hour>=0&&T.tm_hour<12?"AM":"PM"},"%S":function(T){return X(T.tm_sec,2)},"%t":function(){return"	"},"%u":function(T){return T.tm_wday||7},"%U":function(T){var z=T.tm_yday+7-T.tm_wday;return X(Math.floor(z/7),2)},"%V":function(T){var z=Math.floor((T.tm_yday+7-(T.tm_wday+6)%7)/7);if((T.tm_wday+371-T.tm_yday-2)%7<=2&&z++,z){if(z==53){var de=(T.tm_wday+371-T.tm_yday)%7;de!=4&&(de!=3||!Et(T.tm_year))&&(z=1)}}else{z=52;var _e=(T.tm_wday+7-T.tm_yday-1)%7;(_e==4||_e==5&&Et(T.tm_year%400-1))&&z++}return X(z,2)},"%w":function(T){return T.tm_wday},"%W":function(T){var z=T.tm_yday+7-(T.tm_wday+6)%7;return X(Math.floor(z/7),2)},"%y":function(T){return(T.tm_year+1900).toString().substring(2)},"%Y":function(T){return T.tm_year+1900},"%z":function(T){var z=T.tm_gmtoff,_e=z>=0;return z=Math.abs(z)/60,z=z/60*100+z%60,(_e?"+":"-")+("0000"+z).slice(-4)},"%Z":function(T){return T.tm_zone},"%%":function(){return"%"}};E=E.replace(/%%/g,"\0\0");for(var F in re)E.includes(F)&&(E=E.replace(new RegExp(F,"g"),re[F](k)));E=E.replace(/\0\0/g,"%");var ne=us(E,!1);return ne.length>a?0:(Yr(ne,i),ne.length-1)}function ls(i,a,u,d,b){return cs(i,a,u,d)}function fs(){w("missing function: ucnv_close_64"),M(-1)}function _s(){w("missing function: ucnv_convertEx_64"),M(-1)}function ds(){w("missing function: ucnv_open_64"),M(-1)}function ps(){w("missing function: ucnv_toAlgorithmic_64"),M(-1)}function hs(){w("missing function: ucsdet_close_64"),M(-1)}function ms(){w("missing function: ucsdet_detect_64"),M(-1)}function gs(){w("missing function: ucsdet_getConfidence_64"),M(-1)}function bs(){w("missing function: ucsdet_getName_64"),M(-1)}function ys(){w("missing function: ucsdet_open_64"),M(-1)}function vs(){w("missing function: ucsdet_setText_64"),M(-1)}function Ss(){w("missing function: unzClose"),M(-1)}function ws(){w("missing function: unzCloseCurrentFile"),M(-1)}function Es(){w("missing function: unzGetCurrentFileInfo"),M(-1)}function Rs(){w("missing function: unzGetCurrentFileInfo64"),M(-1)}function ks(){w("missing function: unzGetGlobalInfo"),M(-1)}function As(){w("missing function: unzGoToFirstFile"),M(-1)}function Ts(){w("missing function: unzGoToNextFile"),M(-1)}function Ds(){w("missing function: unzLocateFile"),M(-1)}function Cs(){w("missing function: unzOpen"),M(-1)}function Ps(){w("missing function: unzOpen2"),M(-1)}function Ms(){w("missing function: unzOpenCurrentFile"),M(-1)}function Fs(){w("missing function: unzReadCurrentFile"),M(-1)}function Is(i){Z=i,or()||(e.onExit&&e.onExit(i),N=!0),g(i,new _r(i))}function Os(i,a){Z=i,Is(i)}function Ls(i){if(i instanceof _r||i=="unwind")return Z;g(1,i)}function lu(i){var a=e["_"+i];return a}function xs(i){var a=br(i)+1,u=Dt(a);return Wt(i,u,a),u}function Vr(i,a,u,d,b){var k={string:A=>{var U=0;return A!=null&&A!==0&&(U=xs(A)),U},array:A=>{var U=Dt(A.length);return Yr(A,U),U}};function E(A){return a==="string"?st(A):a==="boolean"?!!A:A}var C=lu(i),F=[],K=0;if(d)for(var W=0;W<d.length;W++){var fe=k[u[W]];fe?(K===0&&(K=dt()),F[W]=fe(d[W])):F[W]=d[W]}var X=C.apply(null,F);function Ee(A){return K!==0&&Er(K),E(A)}return X=Ee(X),X}var Bs={g:Gn,V:zn,da:jn,n:Kn,p:Yn,d:Vn,B:Xn,f:Qn,b:Jn,o:Zn,h:ei,a:Fr,La:it,Fa:dr,Ja:ti,Ia:ri,Ba:Br,e:$t,Aa:ni,O:Nr,va:ii,Da:si,Ea:ai,K:oi,xa:ui,wa:ci,ya:li,L:fi,Ga:_i,ta:di,F:pi,Ha:hi,H:mi,za:gi,G:wt,Na:yi,fa:wi,ga:Ei,j:Ri,Ma:ki,ma:Ai,na:Ti,ka:Di,la:Ci,D:Pi,ia:Mi,N:Fi,ja:Ii,pa:Oi,q:Li,oa:xi,E:Bi,qa:Ni,ha:qr,C:Ui,ra:Wr,M:Hi,Oa:$i,i:Gt,Ka:qi,Qa:Wi,T:ji,W:Ki,l:Yi,ea:Vi,Q:Xi,P:Qi,J:Ji,R:Zi,ua:es,w:rs,I:ns,sa:jr,Ca:ss,Pa:ls,c:fs,X:_s,v:ds,Z:ps,Y:hs,aa:ms,$:gs,_:bs,ca:ys,ba:vs,k:Ss,u:ws,z:Es,r:Rs,U:ks,A:As,y:Ts,t:Ds,x:Cs,S:Ps,s:Ms,m:Fs},fu=Wn(),Ns=function(){return(Ns=e.asm.Sa).apply(null,arguments)},Xr=e._main=function(){return(Xr=e._main=e.asm.Ta).apply(null,arguments)},Us=e._duckdb_web_fs_glob_add_path=function(){return(Us=e._duckdb_web_fs_glob_add_path=e.asm.Va).apply(null,arguments)},Hs=e._duckdb_web_clear_response=function(){return(Hs=e._duckdb_web_clear_response=e.asm.Wa).apply(null,arguments)},$s=e._duckdb_web_fail_with=function(){return($s=e._duckdb_web_fail_with=e.asm.Xa).apply(null,arguments)},qs=e._duckdb_web_reset=function(){return(qs=e._duckdb_web_reset=e.asm.Ya).apply(null,arguments)},Ws=e._duckdb_web_connect=function(){return(Ws=e._duckdb_web_connect=e.asm.Za).apply(null,arguments)},Gs=e._duckdb_web_disconnect=function(){return(Gs=e._duckdb_web_disconnect=e.asm._a).apply(null,arguments)},zs=e._duckdb_web_flush_files=function(){return(zs=e._duckdb_web_flush_files=e.asm.$a).apply(null,arguments)},js=e._duckdb_web_flush_file=function(){return(js=e._duckdb_web_flush_file=e.asm.ab).apply(null,arguments)},Ks=e._duckdb_web_open=function(){return(Ks=e._duckdb_web_open=e.asm.bb).apply(null,arguments)},Ys=e._duckdb_web_get_global_file_info=function(){return(Ys=e._duckdb_web_get_global_file_info=e.asm.cb).apply(null,arguments)},Vs=e._duckdb_web_collect_file_stats=function(){return(Vs=e._duckdb_web_collect_file_stats=e.asm.db).apply(null,arguments)},Xs=e._duckdb_web_export_file_stats=function(){return(Xs=e._duckdb_web_export_file_stats=e.asm.eb).apply(null,arguments)},Qs=e._duckdb_web_fs_drop_file=function(){return(Qs=e._duckdb_web_fs_drop_file=e.asm.fb).apply(null,arguments)},Js=e._duckdb_web_fs_drop_files=function(){return(Js=e._duckdb_web_fs_drop_files=e.asm.gb).apply(null,arguments)},Zs=e._duckdb_web_fs_glob_file_infos=function(){return(Zs=e._duckdb_web_fs_glob_file_infos=e.asm.hb).apply(null,arguments)},ea=e._duckdb_web_fs_get_file_info_by_id=function(){return(ea=e._duckdb_web_fs_get_file_info_by_id=e.asm.ib).apply(null,arguments)},ta=e._duckdb_web_fs_get_file_info_by_name=function(){return(ta=e._duckdb_web_fs_get_file_info_by_name=e.asm.jb).apply(null,arguments)},ra=e._duckdb_web_fs_register_file_url=function(){return(ra=e._duckdb_web_fs_register_file_url=e.asm.kb).apply(null,arguments)},na=e._duckdb_web_fs_register_file_buffer=function(){return(na=e._duckdb_web_fs_register_file_buffer=e.asm.lb).apply(null,arguments)},ia=e._duckdb_web_copy_file_to_buffer=function(){return(ia=e._duckdb_web_copy_file_to_buffer=e.asm.mb).apply(null,arguments)},sa=e._duckdb_web_copy_file_to_path=function(){return(sa=e._duckdb_web_copy_file_to_path=e.asm.nb).apply(null,arguments)},aa=e._duckdb_web_get_version=function(){return(aa=e._duckdb_web_get_version=e.asm.ob).apply(null,arguments)},oa=e._duckdb_web_get_feature_flags=function(){return(oa=e._duckdb_web_get_feature_flags=e.asm.pb).apply(null,arguments)},ua=e._duckdb_web_tokenize=function(){return(ua=e._duckdb_web_tokenize=e.asm.qb).apply(null,arguments)},ca=e._duckdb_web_udf_scalar_create=function(){return(ca=e._duckdb_web_udf_scalar_create=e.asm.rb).apply(null,arguments)},la=e._duckdb_web_prepared_create=function(){return(la=e._duckdb_web_prepared_create=e.asm.sb).apply(null,arguments)},fa=e._duckdb_web_prepared_close=function(){return(fa=e._duckdb_web_prepared_close=e.asm.tb).apply(null,arguments)},_a=e._duckdb_web_prepared_run=function(){return(_a=e._duckdb_web_prepared_run=e.asm.ub).apply(null,arguments)},da=e._duckdb_web_prepared_send=function(){return(da=e._duckdb_web_prepared_send=e.asm.vb).apply(null,arguments)},pa=e._duckdb_web_query_run=function(){return(pa=e._duckdb_web_query_run=e.asm.wb).apply(null,arguments)},ha=e._duckdb_web_pending_query_start=function(){return(ha=e._duckdb_web_pending_query_start=e.asm.xb).apply(null,arguments)},ma=e._duckdb_web_pending_query_poll=function(){return(ma=e._duckdb_web_pending_query_poll=e.asm.yb).apply(null,arguments)},ga=e._duckdb_web_pending_query_cancel=function(){return(ga=e._duckdb_web_pending_query_cancel=e.asm.zb).apply(null,arguments)},ba=e._duckdb_web_query_fetch_results=function(){return(ba=e._duckdb_web_query_fetch_results=e.asm.Ab).apply(null,arguments)},ya=e._duckdb_web_get_tablenames=function(){return(ya=e._duckdb_web_get_tablenames=e.asm.Bb).apply(null,arguments)},zt=e._duckdb_web_insert_arrow_from_ipc_stream=function(){return(zt=e._duckdb_web_insert_arrow_from_ipc_stream=e.asm.Cb).apply(null,arguments)},jt=e._duckdb_web_insert_csv_from_path=function(){return(jt=e._duckdb_web_insert_csv_from_path=e.asm.Db).apply(null,arguments)},wr=e._duckdb_web_insert_json_from_path=function(){return(wr=e._duckdb_web_insert_json_from_path=e.asm.Eb).apply(null,arguments)},Kt=function(){return(Kt=e.asm.__errno_location).apply(null,arguments)},Yt=function(){return(Yt=e.asm.Fb).apply(null,arguments)},At=function(){return(At=e.asm.Gb).apply(null,arguments)},Tt=function(){return(Tt=e.asm.Hb).apply(null,arguments)},_t=e._malloc=function(){return(_t=e._malloc=e.asm.Ib).apply(null,arguments)},Vt=e._free=function(){return(Vt=e._free=e.asm.Jb).apply(null,arguments)},dt=function(){return(dt=e.asm.Kb).apply(null,arguments)},Er=function(){return(Er=e.asm.Lb).apply(null,arguments)},Dt=function(){return(Dt=e.asm.Mb).apply(null,arguments)},Rr=function(){return(Rr=e.asm.Nb).apply(null,arguments)};e.stackAlloc=Dt,e.stackSave=dt,e.stackRestore=Er,e.ccall=Vr;var o;Ke=function i(){o||p(),o||(Ke=i)};function l(){var i=Xr,a=0,u=0;try{var d=i(a,u);return Os(d,!0),d}catch(b){return Ls(b)}}function p(){if(Te>0||(x(),Te>0))return;function i(){o||(o=!0,e.calledRun=!0,!N&&(he(),I(),n(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),m&&l(),J()))}e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1),i()},1)):i()}if(e.preInit)for(typeof e.preInit=="function"&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();var m=!0;return e.noInitialRun&&(m=!1),p(),t.ready}})();typeof tn=="object"&&typeof Ea=="object"?Ea.exports=wa:typeof define=="function"&&define.amd?define([],function(){return wa}):typeof tn=="object"&&(tn.DuckDB=wa)});var Eu=L(Qt=>{"use strict";Object.defineProperty(Qt,"__esModule",{value:!0});Qt.splitWhen=Qt.flatten=void 0;function Tf(r){return r.reduce((t,e)=>[].concat(t,e),[])}Qt.flatten=Tf;function Df(r,t){let e=[[]],n=0;for(let s of r)t(s)?(n++,e[n]=[]):e[n].push(s);return e}Qt.splitWhen=Df});var Ru=L(ln=>{"use strict";Object.defineProperty(ln,"__esModule",{value:!0});ln.isEnoentCodeError=void 0;function Cf(r){return r.code==="ENOENT"}ln.isEnoentCodeError=Cf});var ku=L(fn=>{"use strict";Object.defineProperty(fn,"__esModule",{value:!0});fn.createDirentFromStats=void 0;var Da=class{constructor(t,e){this.name=t,this.isBlockDevice=e.isBlockDevice.bind(e),this.isCharacterDevice=e.isCharacterDevice.bind(e),this.isDirectory=e.isDirectory.bind(e),this.isFIFO=e.isFIFO.bind(e),this.isFile=e.isFile.bind(e),this.isSocket=e.isSocket.bind(e),this.isSymbolicLink=e.isSymbolicLink.bind(e)}};function Pf(r,t){return new Da(r,t)}fn.createDirentFromStats=Pf});var Au=L(Qe=>{"use strict";Object.defineProperty(Qe,"__esModule",{value:!0});Qe.removeLeadingDotSegment=Qe.escape=Qe.makeAbsolute=Qe.unixify=void 0;var Mf=require("path"),Ff=2,If=/(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;function Of(r){return r.replace(/\\/g,"/")}Qe.unixify=Of;function Lf(r,t){return Mf.resolve(r,t)}Qe.makeAbsolute=Lf;function xf(r){return r.replace(If,"\\$2")}Qe.escape=xf;function Bf(r){if(r.charAt(0)==="."){let t=r.charAt(1);if(t==="/"||t==="\\")return r.slice(Ff)}return r}Qe.removeLeadingDotSegment=Bf});var Du=L((Qh,Tu)=>{Tu.exports=function(t){if(typeof t!="string"||t==="")return!1;for(var e;e=/(\\).|([@?!+*]\(.*\))/g.exec(t);){if(e[2])return!0;t=t.slice(e.index+e[0].length)}return!1}});var Mu=L((Jh,Pu)=>{var Nf=Du(),Cu={"{":"}","(":")","[":"]"},Uf=function(r){if(r[0]==="!")return!0;for(var t=0,e=-2,n=-2,s=-2,c=-2,f=-2;t<r.length;){if(r[t]==="*"||r[t+1]==="?"&&/[\].+)]/.test(r[t])||n!==-1&&r[t]==="["&&r[t+1]!=="]"&&(n<t&&(n=r.indexOf("]",t)),n>t&&(f===-1||f>n||(f=r.indexOf("\\",t),f===-1||f>n)))||s!==-1&&r[t]==="{"&&r[t+1]!=="}"&&(s=r.indexOf("}",t),s>t&&(f=r.indexOf("\\",t),f===-1||f>s))||c!==-1&&r[t]==="("&&r[t+1]==="?"&&/[:!=]/.test(r[t+2])&&r[t+3]!==")"&&(c=r.indexOf(")",t),c>t&&(f=r.indexOf("\\",t),f===-1||f>c))||e!==-1&&r[t]==="("&&r[t+1]!=="|"&&(e<t&&(e=r.indexOf("|",t)),e!==-1&&r[e+1]!==")"&&(c=r.indexOf(")",e),c>e&&(f=r.indexOf("\\",e),f===-1||f>c))))return!0;if(r[t]==="\\"){var h=r[t+1];t+=2;var g=Cu[h];if(g){var D=r.indexOf(g,t);D!==-1&&(t=D+1)}if(r[t]==="!")return!0}else t++}return!1},Hf=function(r){if(r[0]==="!")return!0;for(var t=0;t<r.length;){if(/[*?{}()[\]]/.test(r[t]))return!0;if(r[t]==="\\"){var e=r[t+1];t+=2;var n=Cu[e];if(n){var s=r.indexOf(n,t);s!==-1&&(t=s+1)}if(r[t]==="!")return!0}else t++}return!1};Pu.exports=function(t,e){if(typeof t!="string"||t==="")return!1;if(Nf(t))return!0;var n=Uf;return e&&e.strict===!1&&(n=Hf),n(t)}});var Iu=L((Zh,Fu)=>{"use strict";var $f=Mu(),qf=require("path").posix.dirname,Wf=require("os").platform()==="win32",Ca="/",Gf=/\\/g,zf=/[\{\[].*[\}\]]$/,jf=/(^|[^\\])([\{\[]|\([^\)]+$)/,Kf=/\\([\!\*\?\|\[\]\(\)\{\}])/g;Fu.exports=function(t,e){var n=Object.assign({flipBackslashes:!0},e);n.flipBackslashes&&Wf&&t.indexOf(Ca)<0&&(t=t.replace(Gf,Ca)),zf.test(t)&&(t+=Ca),t+="a";do t=qf(t);while($f(t)||jf.test(t));return t.replace(Kf,"$1")}});var _n=L(ze=>{"use strict";ze.isInteger=r=>typeof r=="number"?Number.isInteger(r):typeof r=="string"&&r.trim()!==""?Number.isInteger(Number(r)):!1;ze.find=(r,t)=>r.nodes.find(e=>e.type===t);ze.exceedsLimit=(r,t,e=1,n)=>n===!1||!ze.isInteger(r)||!ze.isInteger(t)?!1:(Number(t)-Number(r))/Number(e)>=n;ze.escapeNode=(r,t=0,e)=>{let n=r.nodes[t];n&&(e&&n.type===e||n.type==="open"||n.type==="close")&&n.escaped!==!0&&(n.value="\\"+n.value,n.escaped=!0)};ze.encloseBrace=r=>r.type!=="brace"||r.commas>>0+r.ranges>>0?!1:(r.invalid=!0,!0);ze.isInvalidBrace=r=>r.type!=="brace"?!1:r.invalid===!0||r.dollar?!0:!(r.commas>>0+r.ranges>>0)||r.open!==!0||r.close!==!0?(r.invalid=!0,!0):!1;ze.isOpenOrClose=r=>r.type==="open"||r.type==="close"?!0:r.open===!0||r.close===!0;ze.reduce=r=>r.reduce((t,e)=>(e.type==="text"&&t.push(e.value),e.type==="range"&&(e.type="text"),t),[]);ze.flatten=(...r)=>{let t=[],e=n=>{for(let s=0;s<n.length;s++){let c=n[s];Array.isArray(c)?e(c,t):c!==void 0&&t.push(c)}return t};return e(r),t}});var dn=L((tm,Lu)=>{"use strict";var Ou=_n();Lu.exports=(r,t={})=>{let e=(n,s={})=>{let c=t.escapeInvalid&&Ou.isInvalidBrace(s),f=n.invalid===!0&&t.escapeInvalid===!0,h="";if(n.value)return(c||f)&&Ou.isOpenOrClose(n)?"\\"+n.value:n.value;if(n.value)return n.value;if(n.nodes)for(let g of n.nodes)h+=e(g);return h};return e(r)}});var Bu=L((rm,xu)=>{"use strict";xu.exports=function(r){return typeof r=="number"?r-r===0:typeof r=="string"&&r.trim()!==""?Number.isFinite?Number.isFinite(+r):isFinite(+r):!1}});var ju=L((nm,zu)=>{"use strict";var Nu=Bu(),Ot=(r,t,e)=>{if(Nu(r)===!1)throw new TypeError("toRegexRange: expected the first argument to be a number");if(t===void 0||r===t)return String(r);if(Nu(t)===!1)throw new TypeError("toRegexRange: expected the second argument to be a number.");let n={relaxZeros:!0,...e};typeof n.strictZeros=="boolean"&&(n.relaxZeros=n.strictZeros===!1);let s=String(n.relaxZeros),c=String(n.shorthand),f=String(n.capture),h=String(n.wrap),g=r+":"+t+"="+s+c+f+h;if(Ot.cache.hasOwnProperty(g))return Ot.cache[g].result;let D=Math.min(r,t),y=Math.max(r,t);if(Math.abs(D-y)===1){let B=r+"|"+t;return n.capture?`(${B})`:n.wrap===!1?B:`(?:${B})`}let P=Gu(r)||Gu(t),S={min:r,max:t,a:D,b:y},te=[],O=[];if(P&&(S.isPadded=P,S.maxLen=String(S.max).length),D<0){let B=y<0?Math.abs(y):1;O=Uu(B,Math.abs(D),S,n),D=S.a=0}return y>=0&&(te=Uu(D,y,S,n)),S.negatives=O,S.positives=te,S.result=Yf(O,te,n),n.capture===!0?S.result=`(${S.result})`:n.wrap!==!1&&te.length+O.length>1&&(S.result=`(?:${S.result})`),Ot.cache[g]=S,S.result};function Yf(r,t,e){let n=Pa(r,t,"-",!1,e)||[],s=Pa(t,r,"",!1,e)||[],c=Pa(r,t,"-?",!0,e)||[];return n.concat(c).concat(s).join("|")}function Vf(r,t){let e=1,n=1,s=$u(r,e),c=new Set([t]);for(;r<=s&&s<=t;)c.add(s),e+=1,s=$u(r,e);for(s=qu(t+1,n)-1;r<s&&s<=t;)c.add(s),n+=1,s=qu(t+1,n)-1;return c=[...c],c.sort(Jf),c}function Xf(r,t,e){if(r===t)return{pattern:r,count:[],digits:0};let n=Qf(r,t),s=n.length,c="",f=0;for(let h=0;h<s;h++){let[g,D]=n[h];g===D?c+=g:g!=="0"||D!=="9"?c+=Zf(g,D,e):f++}return f&&(c+=e.shorthand===!0?"\\d":"[0-9]"),{pattern:c,count:[f],digits:s}}function Uu(r,t,e,n){let s=Vf(r,t),c=[],f=r,h;for(let g=0;g<s.length;g++){let D=s[g],y=Xf(String(f),String(D),n),P="";if(!e.isPadded&&h&&h.pattern===y.pattern){h.count.length>1&&h.count.pop(),h.count.push(y.count[0]),h.string=h.pattern+Wu(h.count),f=D+1;continue}e.isPadded&&(P=e_(D,e,n)),y.string=P+y.pattern+Wu(y.count),c.push(y),f=D+1,h=y}return c}function Pa(r,t,e,n,s){let c=[];for(let f of r){let{string:h}=f;!n&&!Hu(t,"string",h)&&c.push(e+h),n&&Hu(t,"string",h)&&c.push(e+h)}return c}function Qf(r,t){let e=[];for(let n=0;n<r.length;n++)e.push([r[n],t[n]]);return e}function Jf(r,t){return r>t?1:t>r?-1:0}function Hu(r,t,e){return r.some(n=>n[t]===e)}function $u(r,t){return Number(String(r).slice(0,-t)+"9".repeat(t))}function qu(r,t){return r-r%Math.pow(10,t)}function Wu(r){let[t=0,e=""]=r;return e||t>1?`{${t+(e?","+e:"")}}`:""}function Zf(r,t,e){return`[${r}${t-r===1?"":"-"}${t}]`}function Gu(r){return/^-?(0+)\d/.test(r)}function e_(r,t,e){if(!t.isPadded)return r;let n=Math.abs(t.maxLen-String(r).length),s=e.relaxZeros!==!1;switch(n){case 0:return"";case 1:return s?"0?":"0";case 2:return s?"0{0,2}":"00";default:return s?`0{0,${n}}`:`0{${n}}`}}Ot.cache={};Ot.clearCache=()=>Ot.cache={};zu.exports=Ot});var Ia=L((im,ec)=>{"use strict";var t_=require("util"),Vu=ju(),Ku=r=>r!==null&&typeof r=="object"&&!Array.isArray(r),r_=r=>t=>r===!0?Number(t):String(t),Ma=r=>typeof r=="number"||typeof r=="string"&&r!=="",kr=r=>Number.isInteger(+r),Fa=r=>{let t=`${r}`,e=-1;if(t[0]==="-"&&(t=t.slice(1)),t==="0")return!1;for(;t[++e]==="0";);return e>0},n_=(r,t,e)=>typeof r=="string"||typeof t=="string"?!0:e.stringify===!0,i_=(r,t,e)=>{if(t>0){let n=r[0]==="-"?"-":"";n&&(r=r.slice(1)),r=n+r.padStart(n?t-1:t,"0")}return e===!1?String(r):r},Yu=(r,t)=>{let e=r[0]==="-"?"-":"";for(e&&(r=r.slice(1),t--);r.length<t;)r="0"+r;return e?"-"+r:r},s_=(r,t)=>{r.negatives.sort((f,h)=>f<h?-1:f>h?1:0),r.positives.sort((f,h)=>f<h?-1:f>h?1:0);let e=t.capture?"":"?:",n="",s="",c;return r.positives.length&&(n=r.positives.join("|")),r.negatives.length&&(s=`-(${e}${r.negatives.join("|")})`),n&&s?c=`${n}|${s}`:c=n||s,t.wrap?`(${e}${c})`:c},Xu=(r,t,e,n)=>{if(e)return Vu(r,t,{wrap:!1,...n});let s=String.fromCharCode(r);if(r===t)return s;let c=String.fromCharCode(t);return`[${s}-${c}]`},Qu=(r,t,e)=>{if(Array.isArray(r)){let n=e.wrap===!0,s=e.capture?"":"?:";return n?`(${s}${r.join("|")})`:r.join("|")}return Vu(r,t,e)},Ju=(...r)=>new RangeError("Invalid range arguments: "+t_.inspect(...r)),Zu=(r,t,e)=>{if(e.strictRanges===!0)throw Ju([r,t]);return[]},a_=(r,t)=>{if(t.strictRanges===!0)throw new TypeError(`Expected step "${r}" to be a number`);return[]},o_=(r,t,e=1,n={})=>{let s=Number(r),c=Number(t);if(!Number.isInteger(s)||!Number.isInteger(c)){if(n.strictRanges===!0)throw Ju([r,t]);return[]}s===0&&(s=0),c===0&&(c=0);let f=s>c,h=String(r),g=String(t),D=String(e);e=Math.max(Math.abs(e),1);let y=Fa(h)||Fa(g)||Fa(D),P=y?Math.max(h.length,g.length,D.length):0,S=y===!1&&n_(r,t,n)===!1,te=n.transform||r_(S);if(n.toRegex&&e===1)return Xu(Yu(r,P),Yu(t,P),!0,n);let O={negatives:[],positives:[]},B=le=>O[le<0?"negatives":"positives"].push(Math.abs(le)),G=[],Y=0;for(;f?s>=c:s<=c;)n.toRegex===!0&&e>1?B(s):G.push(i_(te(s,Y),P,S)),s=f?s-e:s+e,Y++;return n.toRegex===!0?e>1?s_(O,n):Qu(G,null,{wrap:!1,...n}):G},u_=(r,t,e=1,n={})=>{if(!kr(r)&&r.length>1||!kr(t)&&t.length>1)return Zu(r,t,n);let s=n.transform||(S=>String.fromCharCode(S)),c=`${r}`.charCodeAt(0),f=`${t}`.charCodeAt(0),h=c>f,g=Math.min(c,f),D=Math.max(c,f);if(n.toRegex&&e===1)return Xu(g,D,!1,n);let y=[],P=0;for(;h?c>=f:c<=f;)y.push(s(c,P)),c=h?c-e:c+e,P++;return n.toRegex===!0?Qu(y,null,{wrap:!1,options:n}):y},pn=(r,t,e,n={})=>{if(t==null&&Ma(r))return[r];if(!Ma(r)||!Ma(t))return Zu(r,t,n);if(typeof e=="function")return pn(r,t,1,{transform:e});if(Ku(e))return pn(r,t,0,e);let s={...n};return s.capture===!0&&(s.wrap=!0),e=e||s.step||1,kr(e)?kr(r)&&kr(t)?o_(r,t,e,s):u_(r,t,Math.max(Math.abs(e),1),s):e!=null&&!Ku(e)?a_(e,s):pn(r,t,1,e)};ec.exports=pn});var nc=L((sm,rc)=>{"use strict";var c_=Ia(),tc=_n(),l_=(r,t={})=>{let e=(n,s={})=>{let c=tc.isInvalidBrace(s),f=n.invalid===!0&&t.escapeInvalid===!0,h=c===!0||f===!0,g=t.escapeInvalid===!0?"\\":"",D="";if(n.isOpen===!0||n.isClose===!0)return g+n.value;if(n.type==="open")return h?g+n.value:"(";if(n.type==="close")return h?g+n.value:")";if(n.type==="comma")return n.prev.type==="comma"?"":h?n.value:"|";if(n.value)return n.value;if(n.nodes&&n.ranges>0){let y=tc.reduce(n.nodes),P=c_(...y,{...t,wrap:!1,toRegex:!0});if(P.length!==0)return y.length>1&&P.length>1?`(${P})`:P}if(n.nodes)for(let y of n.nodes)D+=e(y,n);return D};return e(r)};rc.exports=l_});var ac=L((am,sc)=>{"use strict";var f_=Ia(),ic=dn(),Jt=_n(),Lt=(r="",t="",e=!1)=>{let n=[];if(r=[].concat(r),t=[].concat(t),!t.length)return r;if(!r.length)return e?Jt.flatten(t).map(s=>`{${s}}`):t;for(let s of r)if(Array.isArray(s))for(let c of s)n.push(Lt(c,t,e));else for(let c of t)e===!0&&typeof c=="string"&&(c=`{${c}}`),n.push(Array.isArray(c)?Lt(s,c,e):s+c);return Jt.flatten(n)},__=(r,t={})=>{let e=t.rangeLimit===void 0?1e3:t.rangeLimit,n=(s,c={})=>{s.queue=[];let f=c,h=c.queue;for(;f.type!=="brace"&&f.type!=="root"&&f.parent;)f=f.parent,h=f.queue;if(s.invalid||s.dollar){h.push(Lt(h.pop(),ic(s,t)));return}if(s.type==="brace"&&s.invalid!==!0&&s.nodes.length===2){h.push(Lt(h.pop(),["{}"]));return}if(s.nodes&&s.ranges>0){let P=Jt.reduce(s.nodes);if(Jt.exceedsLimit(...P,t.step,e))throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");let S=f_(...P,t);S.length===0&&(S=ic(s,t)),h.push(Lt(h.pop(),S)),s.nodes=[];return}let g=Jt.encloseBrace(s),D=s.queue,y=s;for(;y.type!=="brace"&&y.type!=="root"&&y.parent;)y=y.parent,D=y.queue;for(let P=0;P<s.nodes.length;P++){let S=s.nodes[P];if(S.type==="comma"&&s.type==="brace"){P===1&&D.push(""),D.push("");continue}if(S.type==="close"){h.push(Lt(h.pop(),D,g));continue}if(S.value&&S.type!=="open"){D.push(Lt(D.pop(),S.value));continue}S.nodes&&n(S,s)}return D};return Jt.flatten(n(r))};sc.exports=__});var uc=L((om,oc)=>{"use strict";oc.exports={MAX_LENGTH:1024*64,CHAR_0:"0",CHAR_9:"9",CHAR_UPPERCASE_A:"A",CHAR_LOWERCASE_A:"a",CHAR_UPPERCASE_Z:"Z",CHAR_LOWERCASE_Z:"z",CHAR_LEFT_PARENTHESES:"(",CHAR_RIGHT_PARENTHESES:")",CHAR_ASTERISK:"*",CHAR_AMPERSAND:"&",CHAR_AT:"@",CHAR_BACKSLASH:"\\",CHAR_BACKTICK:"`",CHAR_CARRIAGE_RETURN:"\r",CHAR_CIRCUMFLEX_ACCENT:"^",CHAR_COLON:":",CHAR_COMMA:",",CHAR_DOLLAR:"$",CHAR_DOT:".",CHAR_DOUBLE_QUOTE:'"',CHAR_EQUAL:"=",CHAR_EXCLAMATION_MARK:"!",CHAR_FORM_FEED:"\f",CHAR_FORWARD_SLASH:"/",CHAR_HASH:"#",CHAR_HYPHEN_MINUS:"-",CHAR_LEFT_ANGLE_BRACKET:"<",CHAR_LEFT_CURLY_BRACE:"{",CHAR_LEFT_SQUARE_BRACKET:"[",CHAR_LINE_FEED:`
`,CHAR_NO_BREAK_SPACE:"\xA0",CHAR_PERCENT:"%",CHAR_PLUS:"+",CHAR_QUESTION_MARK:"?",CHAR_RIGHT_ANGLE_BRACKET:">",CHAR_RIGHT_CURLY_BRACE:"}",CHAR_RIGHT_SQUARE_BRACKET:"]",CHAR_SEMICOLON:";",CHAR_SINGLE_QUOTE:"'",CHAR_SPACE:" ",CHAR_TAB:"	",CHAR_UNDERSCORE:"_",CHAR_VERTICAL_LINE:"|",CHAR_ZERO_WIDTH_NOBREAK_SPACE:"\uFEFF"}});var dc=L((um,_c)=>{"use strict";var d_=dn(),{MAX_LENGTH:cc,CHAR_BACKSLASH:Oa,CHAR_BACKTICK:p_,CHAR_COMMA:h_,CHAR_DOT:m_,CHAR_LEFT_PARENTHESES:g_,CHAR_RIGHT_PARENTHESES:b_,CHAR_LEFT_CURLY_BRACE:y_,CHAR_RIGHT_CURLY_BRACE:v_,CHAR_LEFT_SQUARE_BRACKET:lc,CHAR_RIGHT_SQUARE_BRACKET:fc,CHAR_DOUBLE_QUOTE:S_,CHAR_SINGLE_QUOTE:w_,CHAR_NO_BREAK_SPACE:E_,CHAR_ZERO_WIDTH_NOBREAK_SPACE:R_}=uc(),k_=(r,t={})=>{if(typeof r!="string")throw new TypeError("Expected a string");let e=t||{},n=typeof e.maxLength=="number"?Math.min(cc,e.maxLength):cc;if(r.length>n)throw new SyntaxError(`Input length (${r.length}), exceeds max characters (${n})`);let s={type:"root",input:r,nodes:[]},c=[s],f=s,h=s,g=0,D=r.length,y=0,P=0,S,te={},O=()=>r[y++],B=G=>{if(G.type==="text"&&h.type==="dot"&&(h.type="text"),h&&h.type==="text"&&G.type==="text"){h.value+=G.value;return}return f.nodes.push(G),G.parent=f,G.prev=h,h=G,G};for(B({type:"bos"});y<D;)if(f=c[c.length-1],S=O(),!(S===R_||S===E_)){if(S===Oa){B({type:"text",value:(t.keepEscaping?S:"")+O()});continue}if(S===fc){B({type:"text",value:"\\"+S});continue}if(S===lc){g++;let G=!0,Y;for(;y<D&&(Y=O());){if(S+=Y,Y===lc){g++;continue}if(Y===Oa){S+=O();continue}if(Y===fc&&(g--,g===0))break}B({type:"text",value:S});continue}if(S===g_){f=B({type:"paren",nodes:[]}),c.push(f),B({type:"text",value:S});continue}if(S===b_){if(f.type!=="paren"){B({type:"text",value:S});continue}f=c.pop(),B({type:"text",value:S}),f=c[c.length-1];continue}if(S===S_||S===w_||S===p_){let G=S,Y;for(t.keepQuotes!==!0&&(S="");y<D&&(Y=O());){if(Y===Oa){S+=Y+O();continue}if(Y===G){t.keepQuotes===!0&&(S+=Y);break}S+=Y}B({type:"text",value:S});continue}if(S===y_){P++;let Y={type:"brace",open:!0,close:!1,dollar:h.value&&h.value.slice(-1)==="$"||f.dollar===!0,depth:P,commas:0,ranges:0,nodes:[]};f=B(Y),c.push(f),B({type:"open",value:S});continue}if(S===v_){if(f.type!=="brace"){B({type:"text",value:S});continue}let G="close";f=c.pop(),f.close=!0,B({type:G,value:S}),P--,f=c[c.length-1];continue}if(S===h_&&P>0){if(f.ranges>0){f.ranges=0;let G=f.nodes.shift();f.nodes=[G,{type:"text",value:d_(f)}]}B({type:"comma",value:S}),f.commas++;continue}if(S===m_&&P>0&&f.commas===0){let G=f.nodes;if(P===0||G.length===0){B({type:"text",value:S});continue}if(h.type==="dot"){if(f.range=[],h.value+=S,h.type="range",f.nodes.length!==3&&f.nodes.length!==5){f.invalid=!0,f.ranges=0,h.type="text";continue}f.ranges++,f.args=[];continue}if(h.type==="range"){G.pop();let Y=G[G.length-1];Y.value+=h.value+S,h=Y,f.ranges--;continue}B({type:"dot",value:S});continue}B({type:"text",value:S})}do if(f=c.pop(),f.type!=="root"){f.nodes.forEach(le=>{le.nodes||(le.type==="open"&&(le.isOpen=!0),le.type==="close"&&(le.isClose=!0),le.nodes||(le.type="text"),le.invalid=!0)});let G=c[c.length-1],Y=G.nodes.indexOf(f);G.nodes.splice(Y,1,...f.nodes)}while(c.length>0);return B({type:"eos"}),s};_c.exports=k_});var mc=L((cm,hc)=>{"use strict";var pc=dn(),A_=nc(),T_=ac(),D_=dc(),qe=(r,t={})=>{let e=[];if(Array.isArray(r))for(let n of r){let s=qe.create(n,t);Array.isArray(s)?e.push(...s):e.push(s)}else e=[].concat(qe.create(r,t));return t&&t.expand===!0&&t.nodupes===!0&&(e=[...new Set(e)]),e};qe.parse=(r,t={})=>D_(r,t);qe.stringify=(r,t={})=>pc(typeof r=="string"?qe.parse(r,t):r,t);qe.compile=(r,t={})=>(typeof r=="string"&&(r=qe.parse(r,t)),A_(r,t));qe.expand=(r,t={})=>{typeof r=="string"&&(r=qe.parse(r,t));let e=T_(r,t);return t.noempty===!0&&(e=e.filter(Boolean)),t.nodupes===!0&&(e=[...new Set(e)]),e};qe.create=(r,t={})=>r===""||r.length<3?[r]:t.expand!==!0?qe.compile(r,t):qe.expand(r,t);hc.exports=qe});var Ar=L((lm,Sc)=>{"use strict";var C_=require("path"),Je="\\\\/",gc=`[^${Je}]`,at="\\.",P_="\\+",M_="\\?",hn="\\/",F_="(?=.)",bc="[^/]",La=`(?:${hn}|$)`,yc=`(?:^|${hn})`,xa=`${at}{1,2}${La}`,I_=`(?!${at})`,O_=`(?!${yc}${xa})`,L_=`(?!${at}{0,1}${La})`,x_=`(?!${xa})`,B_=`[^.${hn}]`,N_=`${bc}*?`,vc={DOT_LITERAL:at,PLUS_LITERAL:P_,QMARK_LITERAL:M_,SLASH_LITERAL:hn,ONE_CHAR:F_,QMARK:bc,END_ANCHOR:La,DOTS_SLASH:xa,NO_DOT:I_,NO_DOTS:O_,NO_DOT_SLASH:L_,NO_DOTS_SLASH:x_,QMARK_NO_DOT:B_,STAR:N_,START_ANCHOR:yc},U_={...vc,SLASH_LITERAL:`[${Je}]`,QMARK:gc,STAR:`${gc}*?`,DOTS_SLASH:`${at}{1,2}(?:[${Je}]|$)`,NO_DOT:`(?!${at})`,NO_DOTS:`(?!(?:^|[${Je}])${at}{1,2}(?:[${Je}]|$))`,NO_DOT_SLASH:`(?!${at}{0,1}(?:[${Je}]|$))`,NO_DOTS_SLASH:`(?!${at}{1,2}(?:[${Je}]|$))`,QMARK_NO_DOT:`[^.${Je}]`,START_ANCHOR:`(?:^|[${Je}])`,END_ANCHOR:`(?:[${Je}]|$)`},H_={alnum:"a-zA-Z0-9",alpha:"a-zA-Z",ascii:"\\x00-\\x7F",blank:" \\t",cntrl:"\\x00-\\x1F\\x7F",digit:"0-9",graph:"\\x21-\\x7E",lower:"a-z",print:"\\x20-\\x7E ",punct:"\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",space:" \\t\\r\\n\\v\\f",upper:"A-Z",word:"A-Za-z0-9_",xdigit:"A-Fa-f0-9"};Sc.exports={MAX_LENGTH:1024*64,POSIX_REGEX_SOURCE:H_,REGEX_BACKSLASH:/\\(?![*+?^${}(|)[\]])/g,REGEX_NON_SPECIAL_CHARS:/^[^@![\].,$*+?^{}()|\\/]+/,REGEX_SPECIAL_CHARS:/[-*+?.^${}(|)[\]]/,REGEX_SPECIAL_CHARS_BACKREF:/(\\?)((\W)(\3*))/g,REGEX_SPECIAL_CHARS_GLOBAL:/([-*+?.^${}(|)[\]])/g,REGEX_REMOVE_BACKSLASH:/(?:\[.*?[^\\]\]|\\(?=.))/g,REPLACEMENTS:{"***":"*","**/**":"**","**/**/**":"**"},CHAR_0:48,CHAR_9:57,CHAR_UPPERCASE_A:65,CHAR_LOWERCASE_A:97,CHAR_UPPERCASE_Z:90,CHAR_LOWERCASE_Z:122,CHAR_LEFT_PARENTHESES:40,CHAR_RIGHT_PARENTHESES:41,CHAR_ASTERISK:42,CHAR_AMPERSAND:38,CHAR_AT:64,CHAR_BACKWARD_SLASH:92,CHAR_CARRIAGE_RETURN:13,CHAR_CIRCUMFLEX_ACCENT:94,CHAR_COLON:58,CHAR_COMMA:44,CHAR_DOT:46,CHAR_DOUBLE_QUOTE:34,CHAR_EQUAL:61,CHAR_EXCLAMATION_MARK:33,CHAR_FORM_FEED:12,CHAR_FORWARD_SLASH:47,CHAR_GRAVE_ACCENT:96,CHAR_HASH:35,CHAR_HYPHEN_MINUS:45,CHAR_LEFT_ANGLE_BRACKET:60,CHAR_LEFT_CURLY_BRACE:123,CHAR_LEFT_SQUARE_BRACKET:91,CHAR_LINE_FEED:10,CHAR_NO_BREAK_SPACE:160,CHAR_PERCENT:37,CHAR_PLUS:43,CHAR_QUESTION_MARK:63,CHAR_RIGHT_ANGLE_BRACKET:62,CHAR_RIGHT_CURLY_BRACE:125,CHAR_RIGHT_SQUARE_BRACKET:93,CHAR_SEMICOLON:59,CHAR_SINGLE_QUOTE:39,CHAR_SPACE:32,CHAR_TAB:9,CHAR_UNDERSCORE:95,CHAR_VERTICAL_LINE:124,CHAR_ZERO_WIDTH_NOBREAK_SPACE:65279,SEP:C_.sep,extglobChars(r){return{"!":{type:"negate",open:"(?:(?!(?:",close:`))${r.STAR})`},"?":{type:"qmark",open:"(?:",close:")?"},"+":{type:"plus",open:"(?:",close:")+"},"*":{type:"star",open:"(?:",close:")*"},"@":{type:"at",open:"(?:",close:")"}}},globChars(r){return r===!0?U_:vc}}});var Tr=L(Be=>{"use strict";var $_=require("path"),q_=process.platform==="win32",{REGEX_BACKSLASH:W_,REGEX_REMOVE_BACKSLASH:G_,REGEX_SPECIAL_CHARS:z_,REGEX_SPECIAL_CHARS_GLOBAL:j_}=Ar();Be.isObject=r=>r!==null&&typeof r=="object"&&!Array.isArray(r);Be.hasRegexChars=r=>z_.test(r);Be.isRegexChar=r=>r.length===1&&Be.hasRegexChars(r);Be.escapeRegex=r=>r.replace(j_,"\\$1");Be.toPosixSlashes=r=>r.replace(W_,"/");Be.removeBackslashes=r=>r.replace(G_,t=>t==="\\"?"":t);Be.supportsLookbehinds=()=>{let r=process.version.slice(1).split(".").map(Number);return r.length===3&&r[0]>=9||r[0]===8&&r[1]>=10};Be.isWindows=r=>r&&typeof r.windows=="boolean"?r.windows:q_===!0||$_.sep==="\\";Be.escapeLast=(r,t,e)=>{let n=r.lastIndexOf(t,e);return n===-1?r:r[n-1]==="\\"?Be.escapeLast(r,t,n-1):`${r.slice(0,n)}\\${r.slice(n)}`};Be.removePrefix=(r,t={})=>{let e=r;return e.startsWith("./")&&(e=e.slice(2),t.prefix="./"),e};Be.wrapOutput=(r,t={},e={})=>{let n=e.contains?"":"^",s=e.contains?"":"$",c=`${n}(?:${r})${s}`;return t.negated===!0&&(c=`(?:^(?!${c}).*$)`),c}});var Cc=L((_m,Dc)=>{"use strict";var wc=Tr(),{CHAR_ASTERISK:Ba,CHAR_AT:K_,CHAR_BACKWARD_SLASH:Dr,CHAR_COMMA:Y_,CHAR_DOT:Na,CHAR_EXCLAMATION_MARK:Ua,CHAR_FORWARD_SLASH:Tc,CHAR_LEFT_CURLY_BRACE:Ha,CHAR_LEFT_PARENTHESES:$a,CHAR_LEFT_SQUARE_BRACKET:V_,CHAR_PLUS:X_,CHAR_QUESTION_MARK:Ec,CHAR_RIGHT_CURLY_BRACE:Q_,CHAR_RIGHT_PARENTHESES:Rc,CHAR_RIGHT_SQUARE_BRACKET:J_}=Ar(),kc=r=>r===Tc||r===Dr,Ac=r=>{r.isPrefix!==!0&&(r.depth=r.isGlobstar?1/0:1)},Z_=(r,t)=>{let e=t||{},n=r.length-1,s=e.parts===!0||e.scanToEnd===!0,c=[],f=[],h=[],g=r,D=-1,y=0,P=0,S=!1,te=!1,O=!1,B=!1,G=!1,Y=!1,le=!1,ue=!1,ke=!1,w=!1,ie=0,V,q,N={value:"",depth:0,isGlob:!1},Z=()=>D>=n,R=()=>g.charCodeAt(D+1),j=()=>(V=q,g.charCodeAt(++D));for(;D<n;){q=j();let H;if(q===Dr){le=N.backslashes=!0,q=j(),q===Ha&&(Y=!0);continue}if(Y===!0||q===Ha){for(ie++;Z()!==!0&&(q=j());){if(q===Dr){le=N.backslashes=!0,j();continue}if(q===Ha){ie++;continue}if(Y!==!0&&q===Na&&(q=j())===Na){if(S=N.isBrace=!0,O=N.isGlob=!0,w=!0,s===!0)continue;break}if(Y!==!0&&q===Y_){if(S=N.isBrace=!0,O=N.isGlob=!0,w=!0,s===!0)continue;break}if(q===Q_&&(ie--,ie===0)){Y=!1,S=N.isBrace=!0,w=!0;break}}if(s===!0)continue;break}if(q===Tc){if(c.push(D),f.push(N),N={value:"",depth:0,isGlob:!1},w===!0)continue;if(V===Na&&D===y+1){y+=2;continue}P=D+1;continue}if(e.noext!==!0&&(q===X_||q===K_||q===Ba||q===Ec||q===Ua)===!0&&R()===$a){if(O=N.isGlob=!0,B=N.isExtglob=!0,w=!0,q===Ua&&D===y&&(ke=!0),s===!0){for(;Z()!==!0&&(q=j());){if(q===Dr){le=N.backslashes=!0,q=j();continue}if(q===Rc){O=N.isGlob=!0,w=!0;break}}continue}break}if(q===Ba){if(V===Ba&&(G=N.isGlobstar=!0),O=N.isGlob=!0,w=!0,s===!0)continue;break}if(q===Ec){if(O=N.isGlob=!0,w=!0,s===!0)continue;break}if(q===V_){for(;Z()!==!0&&(H=j());){if(H===Dr){le=N.backslashes=!0,j();continue}if(H===J_){te=N.isBracket=!0,O=N.isGlob=!0,w=!0;break}}if(s===!0)continue;break}if(e.nonegate!==!0&&q===Ua&&D===y){ue=N.negated=!0,y++;continue}if(e.noparen!==!0&&q===$a){if(O=N.isGlob=!0,s===!0){for(;Z()!==!0&&(q=j());){if(q===$a){le=N.backslashes=!0,q=j();continue}if(q===Rc){w=!0;break}}continue}break}if(O===!0){if(w=!0,s===!0)continue;break}}e.noext===!0&&(B=!1,O=!1);let $=g,se="",v="";y>0&&(se=g.slice(0,y),g=g.slice(y),P-=y),$&&O===!0&&P>0?($=g.slice(0,P),v=g.slice(P)):O===!0?($="",v=g):$=g,$&&$!==""&&$!=="/"&&$!==g&&kc($.charCodeAt($.length-1))&&($=$.slice(0,-1)),e.unescape===!0&&(v&&(v=wc.removeBackslashes(v)),$&&le===!0&&($=wc.removeBackslashes($)));let _={prefix:se,input:r,start:y,base:$,glob:v,isBrace:S,isBracket:te,isGlob:O,isExtglob:B,isGlobstar:G,negated:ue,negatedExtglob:ke};if(e.tokens===!0&&(_.maxDepth=0,kc(q)||f.push(N),_.tokens=f),e.parts===!0||e.tokens===!0){let H;for(let ce=0;ce<c.length;ce++){let Le=H?H+1:y,Me=c[ce],De=r.slice(Le,Me);e.tokens&&(ce===0&&y!==0?(f[ce].isPrefix=!0,f[ce].value=se):f[ce].value=De,Ac(f[ce]),_.maxDepth+=f[ce].depth),(ce!==0||De!=="")&&h.push(De),H=Me}if(H&&H+1<r.length){let ce=r.slice(H+1);h.push(ce),e.tokens&&(f[f.length-1].value=ce,Ac(f[f.length-1]),_.maxDepth+=f[f.length-1].depth)}_.slashes=c,_.parts=h}return _};Dc.exports=Z_});var Ic=L((dm,Fc)=>{"use strict";var mn=Ar(),We=Tr(),{MAX_LENGTH:gn,POSIX_REGEX_SOURCE:ed,REGEX_NON_SPECIAL_CHARS:td,REGEX_SPECIAL_CHARS_BACKREF:rd,REPLACEMENTS:Pc}=mn,nd=(r,t)=>{if(typeof t.expandRange=="function")return t.expandRange(...r,t);r.sort();let e=`[${r.join("-")}]`;try{new RegExp(e)}catch{return r.map(s=>We.escapeRegex(s)).join("..")}return e},Zt=(r,t)=>`Missing ${r}: "${t}" - use "\\\\${t}" to match literal characters`,Mc=(r,t)=>{if(typeof r!="string")throw new TypeError("Expected a string");r=Pc[r]||r;let e={...t},n=typeof e.maxLength=="number"?Math.min(gn,e.maxLength):gn,s=r.length;if(s>n)throw new SyntaxError(`Input length: ${s}, exceeds maximum allowed length: ${n}`);let c={type:"bos",value:"",output:e.prepend||""},f=[c],h=e.capture?"":"?:",g=We.isWindows(t),D=mn.globChars(g),y=mn.extglobChars(D),{DOT_LITERAL:P,PLUS_LITERAL:S,SLASH_LITERAL:te,ONE_CHAR:O,DOTS_SLASH:B,NO_DOT:G,NO_DOT_SLASH:Y,NO_DOTS_SLASH:le,QMARK:ue,QMARK_NO_DOT:ke,STAR:w,START_ANCHOR:ie}=D,V=x=>`(${h}(?:(?!${ie}${x.dot?B:P}).)*?)`,q=e.dot?"":G,N=e.dot?ue:ke,Z=e.bash===!0?V(e):w;e.capture&&(Z=`(${Z})`),typeof e.noext=="boolean"&&(e.noextglob=e.noext);let R={input:r,index:-1,start:0,dot:e.dot===!0,consumed:"",output:"",prefix:"",backtrack:!1,negated:!1,brackets:0,braces:0,parens:0,quotes:0,globstar:!1,tokens:f};r=We.removePrefix(r,R),s=r.length;let j=[],$=[],se=[],v=c,_,H=()=>R.index===s-1,ce=R.peek=(x=1)=>r[R.index+x],Le=R.advance=()=>r[++R.index]||"",Me=()=>r.slice(R.index+1),De=(x="",he=0)=>{R.consumed+=x,R.index+=he},Ye=x=>{R.output+=x.output!=null?x.output:x.value,De(x.value)},vt=()=>{let x=1;for(;ce()==="!"&&(ce(2)!=="("||ce(3)==="?");)Le(),R.start++,x++;return x%2===0?!1:(R.negated=!0,R.start++,!0)},ct=x=>{R[x]++,se.push(x)},Ne=x=>{R[x]--,se.pop()},ee=x=>{if(v.type==="globstar"){let he=R.braces>0&&(x.type==="comma"||x.type==="brace"),I=x.extglob===!0||j.length&&(x.type==="pipe"||x.type==="paren");x.type!=="slash"&&x.type!=="paren"&&!he&&!I&&(R.output=R.output.slice(0,-v.output.length),v.type="star",v.value="*",v.output=Z,R.output+=v.output)}if(j.length&&x.type!=="paren"&&(j[j.length-1].inner+=x.value),(x.value||x.output)&&Ye(x),v&&v.type==="text"&&x.type==="text"){v.value+=x.value,v.output=(v.output||"")+x.value;return}x.prev=v,f.push(x),v=x},lt=(x,he)=>{let I={...y[he],conditions:1,inner:""};I.prev=v,I.parens=R.parens,I.output=R.output;let J=(e.capture?"(":"")+I.open;ct("parens"),ee({type:x,value:he,output:R.output?"":O}),ee({type:"paren",extglob:!0,value:Le(),output:J}),j.push(I)},or=x=>{let he=x.close+(e.capture?")":""),I;if(x.type==="negate"){let J=Z;x.inner&&x.inner.length>1&&x.inner.includes("/")&&(J=V(e)),(J!==Z||H()||/^\)+$/.test(Me()))&&(he=x.close=`)$))${J}`),x.inner.includes("*")&&(I=Me())&&/^\.[^\\/.]+$/.test(I)&&(he=x.close=`)${I})${J})`),x.prev.type==="bos"&&(R.negatedExtglob=!0)}ee({type:"paren",extglob:!0,value:_,output:he}),Ne("parens")};if(e.fastpaths!==!1&&!/(^[*!]|[/()[\]{}"])/.test(r)){let x=!1,he=r.replace(rd,(I,J,ge,Ae,we,Te)=>Ae==="\\"?(x=!0,I):Ae==="?"?J?J+Ae+(we?ue.repeat(we.length):""):Te===0?N+(we?ue.repeat(we.length):""):ue.repeat(ge.length):Ae==="."?P.repeat(ge.length):Ae==="*"?J?J+Ae+(we?Z:""):Z:J?I:`\\${I}`);return x===!0&&(e.unescape===!0?he=he.replace(/\\/g,""):he=he.replace(/\\+/g,I=>I.length%2===0?"\\\\":I?"\\":"")),he===r&&e.contains===!0?(R.output=r,R):(R.output=We.wrapOutput(he,R,t),R)}for(;!H();){if(_=Le(),_==="\0")continue;if(_==="\\"){let I=ce();if(I==="/"&&e.bash!==!0||I==="."||I===";")continue;if(!I){_+="\\",ee({type:"text",value:_});continue}let J=/^\\+/.exec(Me()),ge=0;if(J&&J[0].length>2&&(ge=J[0].length,R.index+=ge,ge%2!==0&&(_+="\\")),e.unescape===!0?_=Le():_+=Le(),R.brackets===0){ee({type:"text",value:_});continue}}if(R.brackets>0&&(_!=="]"||v.value==="["||v.value==="[^")){if(e.posix!==!1&&_===":"){let I=v.value.slice(1);if(I.includes("[")&&(v.posix=!0,I.includes(":"))){let J=v.value.lastIndexOf("["),ge=v.value.slice(0,J),Ae=v.value.slice(J+2),we=ed[Ae];if(we){v.value=ge+we,R.backtrack=!0,Le(),!c.output&&f.indexOf(v)===1&&(c.output=O);continue}}}(_==="["&&ce()!==":"||_==="-"&&ce()==="]")&&(_=`\\${_}`),_==="]"&&(v.value==="["||v.value==="[^")&&(_=`\\${_}`),e.posix===!0&&_==="!"&&v.value==="["&&(_="^"),v.value+=_,Ye({value:_});continue}if(R.quotes===1&&_!=='"'){_=We.escapeRegex(_),v.value+=_,Ye({value:_});continue}if(_==='"'){R.quotes=R.quotes===1?0:1,e.keepQuotes===!0&&ee({type:"text",value:_});continue}if(_==="("){ct("parens"),ee({type:"paren",value:_});continue}if(_===")"){if(R.parens===0&&e.strictBrackets===!0)throw new SyntaxError(Zt("opening","("));let I=j[j.length-1];if(I&&R.parens===I.parens+1){or(j.pop());continue}ee({type:"paren",value:_,output:R.parens?")":"\\)"}),Ne("parens");continue}if(_==="["){if(e.nobracket===!0||!Me().includes("]")){if(e.nobracket!==!0&&e.strictBrackets===!0)throw new SyntaxError(Zt("closing","]"));_=`\\${_}`}else ct("brackets");ee({type:"bracket",value:_});continue}if(_==="]"){if(e.nobracket===!0||v&&v.type==="bracket"&&v.value.length===1){ee({type:"text",value:_,output:`\\${_}`});continue}if(R.brackets===0){if(e.strictBrackets===!0)throw new SyntaxError(Zt("opening","["));ee({type:"text",value:_,output:`\\${_}`});continue}Ne("brackets");let I=v.value.slice(1);if(v.posix!==!0&&I[0]==="^"&&!I.includes("/")&&(_=`/${_}`),v.value+=_,Ye({value:_}),e.literalBrackets===!1||We.hasRegexChars(I))continue;let J=We.escapeRegex(v.value);if(R.output=R.output.slice(0,-v.value.length),e.literalBrackets===!0){R.output+=J,v.value=J;continue}v.value=`(${h}${J}|${v.value})`,R.output+=v.value;continue}if(_==="{"&&e.nobrace!==!0){ct("braces");let I={type:"brace",value:_,output:"(",outputIndex:R.output.length,tokensIndex:R.tokens.length};$.push(I),ee(I);continue}if(_==="}"){let I=$[$.length-1];if(e.nobrace===!0||!I){ee({type:"text",value:_,output:_});continue}let J=")";if(I.dots===!0){let ge=f.slice(),Ae=[];for(let we=ge.length-1;we>=0&&(f.pop(),ge[we].type!=="brace");we--)ge[we].type!=="dots"&&Ae.unshift(ge[we].value);J=nd(Ae,e),R.backtrack=!0}if(I.comma!==!0&&I.dots!==!0){let ge=R.output.slice(0,I.outputIndex),Ae=R.tokens.slice(I.tokensIndex);I.value=I.output="\\{",_=J="\\}",R.output=ge;for(let we of Ae)R.output+=we.output||we.value}ee({type:"brace",value:_,output:J}),Ne("braces"),$.pop();continue}if(_==="|"){j.length>0&&j[j.length-1].conditions++,ee({type:"text",value:_});continue}if(_===","){let I=_,J=$[$.length-1];J&&se[se.length-1]==="braces"&&(J.comma=!0,I="|"),ee({type:"comma",value:_,output:I});continue}if(_==="/"){if(v.type==="dot"&&R.index===R.start+1){R.start=R.index+1,R.consumed="",R.output="",f.pop(),v=c;continue}ee({type:"slash",value:_,output:te});continue}if(_==="."){if(R.braces>0&&v.type==="dot"){v.value==="."&&(v.output=P);let I=$[$.length-1];v.type="dots",v.output+=_,v.value+=_,I.dots=!0;continue}if(R.braces+R.parens===0&&v.type!=="bos"&&v.type!=="slash"){ee({type:"text",value:_,output:P});continue}ee({type:"dot",value:_,output:P});continue}if(_==="?"){if(!(v&&v.value==="(")&&e.noextglob!==!0&&ce()==="("&&ce(2)!=="?"){lt("qmark",_);continue}if(v&&v.type==="paren"){let J=ce(),ge=_;if(J==="<"&&!We.supportsLookbehinds())throw new Error("Node.js v10 or higher is required for regex lookbehinds");(v.value==="("&&!/[!=<:]/.test(J)||J==="<"&&!/<([!=]|\w+>)/.test(Me()))&&(ge=`\\${_}`),ee({type:"text",value:_,output:ge});continue}if(e.dot!==!0&&(v.type==="slash"||v.type==="bos")){ee({type:"qmark",value:_,output:ke});continue}ee({type:"qmark",value:_,output:ue});continue}if(_==="!"){if(e.noextglob!==!0&&ce()==="("&&(ce(2)!=="?"||!/[!=<:]/.test(ce(3)))){lt("negate",_);continue}if(e.nonegate!==!0&&R.index===0){vt();continue}}if(_==="+"){if(e.noextglob!==!0&&ce()==="("&&ce(2)!=="?"){lt("plus",_);continue}if(v&&v.value==="("||e.regex===!1){ee({type:"plus",value:_,output:S});continue}if(v&&(v.type==="bracket"||v.type==="paren"||v.type==="brace")||R.parens>0){ee({type:"plus",value:_});continue}ee({type:"plus",value:S});continue}if(_==="@"){if(e.noextglob!==!0&&ce()==="("&&ce(2)!=="?"){ee({type:"at",extglob:!0,value:_,output:""});continue}ee({type:"text",value:_});continue}if(_!=="*"){(_==="$"||_==="^")&&(_=`\\${_}`);let I=td.exec(Me());I&&(_+=I[0],R.index+=I[0].length),ee({type:"text",value:_});continue}if(v&&(v.type==="globstar"||v.star===!0)){v.type="star",v.star=!0,v.value+=_,v.output=Z,R.backtrack=!0,R.globstar=!0,De(_);continue}let x=Me();if(e.noextglob!==!0&&/^\([^?]/.test(x)){lt("star",_);continue}if(v.type==="star"){if(e.noglobstar===!0){De(_);continue}let I=v.prev,J=I.prev,ge=I.type==="slash"||I.type==="bos",Ae=J&&(J.type==="star"||J.type==="globstar");if(e.bash===!0&&(!ge||x[0]&&x[0]!=="/")){ee({type:"star",value:_,output:""});continue}let we=R.braces>0&&(I.type==="comma"||I.type==="brace"),Te=j.length&&(I.type==="pipe"||I.type==="paren");if(!ge&&I.type!=="paren"&&!we&&!Te){ee({type:"star",value:_,output:""});continue}for(;x.slice(0,3)==="/**";){let Ge=r[R.index+4];if(Ge&&Ge!=="/")break;x=x.slice(3),De("/**",3)}if(I.type==="bos"&&H()){v.type="globstar",v.value+=_,v.output=V(e),R.output=v.output,R.globstar=!0,De(_);continue}if(I.type==="slash"&&I.prev.type!=="bos"&&!Ae&&H()){R.output=R.output.slice(0,-(I.output+v.output).length),I.output=`(?:${I.output}`,v.type="globstar",v.output=V(e)+(e.strictSlashes?")":"|$)"),v.value+=_,R.globstar=!0,R.output+=I.output+v.output,De(_);continue}if(I.type==="slash"&&I.prev.type!=="bos"&&x[0]==="/"){let Ge=x[1]!==void 0?"|$":"";R.output=R.output.slice(0,-(I.output+v.output).length),I.output=`(?:${I.output}`,v.type="globstar",v.output=`${V(e)}${te}|${te}${Ge})`,v.value+=_,R.output+=I.output+v.output,R.globstar=!0,De(_+Le()),ee({type:"slash",value:"/",output:""});continue}if(I.type==="bos"&&x[0]==="/"){v.type="globstar",v.value+=_,v.output=`(?:^|${te}|${V(e)}${te})`,R.output=v.output,R.globstar=!0,De(_+Le()),ee({type:"slash",value:"/",output:""});continue}R.output=R.output.slice(0,-v.output.length),v.type="globstar",v.output=V(e),v.value+=_,R.output+=v.output,R.globstar=!0,De(_);continue}let he={type:"star",value:_,output:Z};if(e.bash===!0){he.output=".*?",(v.type==="bos"||v.type==="slash")&&(he.output=q+he.output),ee(he);continue}if(v&&(v.type==="bracket"||v.type==="paren")&&e.regex===!0){he.output=_,ee(he);continue}(R.index===R.start||v.type==="slash"||v.type==="dot")&&(v.type==="dot"?(R.output+=Y,v.output+=Y):e.dot===!0?(R.output+=le,v.output+=le):(R.output+=q,v.output+=q),ce()!=="*"&&(R.output+=O,v.output+=O)),ee(he)}for(;R.brackets>0;){if(e.strictBrackets===!0)throw new SyntaxError(Zt("closing","]"));R.output=We.escapeLast(R.output,"["),Ne("brackets")}for(;R.parens>0;){if(e.strictBrackets===!0)throw new SyntaxError(Zt("closing",")"));R.output=We.escapeLast(R.output,"("),Ne("parens")}for(;R.braces>0;){if(e.strictBrackets===!0)throw new SyntaxError(Zt("closing","}"));R.output=We.escapeLast(R.output,"{"),Ne("braces")}if(e.strictSlashes!==!0&&(v.type==="star"||v.type==="bracket")&&ee({type:"maybe_slash",value:"",output:`${te}?`}),R.backtrack===!0){R.output="";for(let x of R.tokens)R.output+=x.output!=null?x.output:x.value,x.suffix&&(R.output+=x.suffix)}return R};Mc.fastpaths=(r,t)=>{let e={...t},n=typeof e.maxLength=="number"?Math.min(gn,e.maxLength):gn,s=r.length;if(s>n)throw new SyntaxError(`Input length: ${s}, exceeds maximum allowed length: ${n}`);r=Pc[r]||r;let c=We.isWindows(t),{DOT_LITERAL:f,SLASH_LITERAL:h,ONE_CHAR:g,DOTS_SLASH:D,NO_DOT:y,NO_DOTS:P,NO_DOTS_SLASH:S,STAR:te,START_ANCHOR:O}=mn.globChars(c),B=e.dot?P:y,G=e.dot?S:y,Y=e.capture?"":"?:",le={negated:!1,prefix:""},ue=e.bash===!0?".*?":te;e.capture&&(ue=`(${ue})`);let ke=q=>q.noglobstar===!0?ue:`(${Y}(?:(?!${O}${q.dot?D:f}).)*?)`,w=q=>{switch(q){case"*":return`${B}${g}${ue}`;case".*":return`${f}${g}${ue}`;case"*.*":return`${B}${ue}${f}${g}${ue}`;case"*/*":return`${B}${ue}${h}${g}${G}${ue}`;case"**":return B+ke(e);case"**/*":return`(?:${B}${ke(e)}${h})?${G}${g}${ue}`;case"**/*.*":return`(?:${B}${ke(e)}${h})?${G}${ue}${f}${g}${ue}`;case"**/.*":return`(?:${B}${ke(e)}${h})?${f}${g}${ue}`;default:{let N=/^(.*?)\.(\w+)$/.exec(q);if(!N)return;let Z=w(N[1]);return Z?Z+f+N[2]:void 0}}},ie=We.removePrefix(r,le),V=w(ie);return V&&e.strictSlashes!==!0&&(V+=`${h}?`),V};Fc.exports=Mc});var Lc=L((pm,Oc)=>{"use strict";var id=require("path"),sd=Cc(),qa=Ic(),Wa=Tr(),ad=Ar(),od=r=>r&&typeof r=="object"&&!Array.isArray(r),Re=(r,t,e=!1)=>{if(Array.isArray(r)){let y=r.map(S=>Re(S,t,e));return S=>{for(let te of y){let O=te(S);if(O)return O}return!1}}let n=od(r)&&r.tokens&&r.input;if(r===""||typeof r!="string"&&!n)throw new TypeError("Expected pattern to be a non-empty string");let s=t||{},c=Wa.isWindows(t),f=n?Re.compileRe(r,t):Re.makeRe(r,t,!1,!0),h=f.state;delete f.state;let g=()=>!1;if(s.ignore){let y={...t,ignore:null,onMatch:null,onResult:null};g=Re(s.ignore,y,e)}let D=(y,P=!1)=>{let{isMatch:S,match:te,output:O}=Re.test(y,f,t,{glob:r,posix:c}),B={glob:r,state:h,regex:f,posix:c,input:y,output:O,match:te,isMatch:S};return typeof s.onResult=="function"&&s.onResult(B),S===!1?(B.isMatch=!1,P?B:!1):g(y)?(typeof s.onIgnore=="function"&&s.onIgnore(B),B.isMatch=!1,P?B:!1):(typeof s.onMatch=="function"&&s.onMatch(B),P?B:!0)};return e&&(D.state=h),D};Re.test=(r,t,e,{glob:n,posix:s}={})=>{if(typeof r!="string")throw new TypeError("Expected input to be a string");if(r==="")return{isMatch:!1,output:""};let c=e||{},f=c.format||(s?Wa.toPosixSlashes:null),h=r===n,g=h&&f?f(r):r;return h===!1&&(g=f?f(r):r,h=g===n),(h===!1||c.capture===!0)&&(c.matchBase===!0||c.basename===!0?h=Re.matchBase(r,t,e,s):h=t.exec(g)),{isMatch:!!h,match:h,output:g}};Re.matchBase=(r,t,e,n=Wa.isWindows(e))=>(t instanceof RegExp?t:Re.makeRe(t,e)).test(id.basename(r));Re.isMatch=(r,t,e)=>Re(t,e)(r);Re.parse=(r,t)=>Array.isArray(r)?r.map(e=>Re.parse(e,t)):qa(r,{...t,fastpaths:!1});Re.scan=(r,t)=>sd(r,t);Re.compileRe=(r,t,e=!1,n=!1)=>{if(e===!0)return r.output;let s=t||{},c=s.contains?"":"^",f=s.contains?"":"$",h=`${c}(?:${r.output})${f}`;r&&r.negated===!0&&(h=`^(?!${h}).*$`);let g=Re.toRegex(h,t);return n===!0&&(g.state=r),g};Re.makeRe=(r,t={},e=!1,n=!1)=>{if(!r||typeof r!="string")throw new TypeError("Expected a non-empty string");let s={negated:!1,fastpaths:!0};return t.fastpaths!==!1&&(r[0]==="."||r[0]==="*")&&(s.output=qa.fastpaths(r,t)),s.output||(s=qa(r,t)),Re.compileRe(s,t,e,n)};Re.toRegex=(r,t)=>{try{let e=t||{};return new RegExp(r,e.flags||(e.nocase?"i":""))}catch(e){if(t&&t.debug===!0)throw e;return/$^/}};Re.constants=ad;Oc.exports=Re});var Bc=L((hm,xc)=>{"use strict";xc.exports=Lc()});var qc=L((mm,$c)=>{"use strict";var Uc=require("util"),Hc=mc(),Ze=Bc(),Ga=Tr(),Nc=r=>r===""||r==="./",Se=(r,t,e)=>{t=[].concat(t),r=[].concat(r);let n=new Set,s=new Set,c=new Set,f=0,h=y=>{c.add(y.output),e&&e.onResult&&e.onResult(y)};for(let y=0;y<t.length;y++){let P=Ze(String(t[y]),{...e,onResult:h},!0),S=P.state.negated||P.state.negatedExtglob;S&&f++;for(let te of r){let O=P(te,!0);(S?!O.isMatch:O.isMatch)&&(S?n.add(O.output):(n.delete(O.output),s.add(O.output)))}}let D=(f===t.length?[...c]:[...s]).filter(y=>!n.has(y));if(e&&D.length===0){if(e.failglob===!0)throw new Error(`No matches found for "${t.join(", ")}"`);if(e.nonull===!0||e.nullglob===!0)return e.unescape?t.map(y=>y.replace(/\\/g,"")):t}return D};Se.match=Se;Se.matcher=(r,t)=>Ze(r,t);Se.isMatch=(r,t,e)=>Ze(t,e)(r);Se.any=Se.isMatch;Se.not=(r,t,e={})=>{t=[].concat(t).map(String);let n=new Set,s=[],f=Se(r,t,{...e,onResult:h=>{e.onResult&&e.onResult(h),s.push(h.output)}});for(let h of s)f.includes(h)||n.add(h);return[...n]};Se.contains=(r,t,e)=>{if(typeof r!="string")throw new TypeError(`Expected a string: "${Uc.inspect(r)}"`);if(Array.isArray(t))return t.some(n=>Se.contains(r,n,e));if(typeof t=="string"){if(Nc(r)||Nc(t))return!1;if(r.includes(t)||r.startsWith("./")&&r.slice(2).includes(t))return!0}return Se.isMatch(r,t,{...e,contains:!0})};Se.matchKeys=(r,t,e)=>{if(!Ga.isObject(r))throw new TypeError("Expected the first argument to be an object");let n=Se(Object.keys(r),t,e),s={};for(let c of n)s[c]=r[c];return s};Se.some=(r,t,e)=>{let n=[].concat(r);for(let s of[].concat(t)){let c=Ze(String(s),e);if(n.some(f=>c(f)))return!0}return!1};Se.every=(r,t,e)=>{let n=[].concat(r);for(let s of[].concat(t)){let c=Ze(String(s),e);if(!n.every(f=>c(f)))return!1}return!0};Se.all=(r,t,e)=>{if(typeof r!="string")throw new TypeError(`Expected a string: "${Uc.inspect(r)}"`);return[].concat(t).every(n=>Ze(n,e)(r))};Se.capture=(r,t,e)=>{let n=Ga.isWindows(e),c=Ze.makeRe(String(r),{...e,capture:!0}).exec(n?Ga.toPosixSlashes(t):t);if(c)return c.slice(1).map(f=>f===void 0?"":f)};Se.makeRe=(...r)=>Ze.makeRe(...r);Se.scan=(...r)=>Ze.scan(...r);Se.parse=(r,t)=>{let e=[];for(let n of[].concat(r||[]))for(let s of Hc(String(n),t))e.push(Ze.parse(s,t));return e};Se.braces=(r,t)=>{if(typeof r!="string")throw new TypeError("Expected a string");return t&&t.nobrace===!0||!/\{.*\}/.test(r)?[r]:Hc(r,t)};Se.braceExpand=(r,t)=>{if(typeof r!="string")throw new TypeError("Expected a string");return Se.braces(r,{...t,expand:!0})};$c.exports=Se});var Xc=L(Q=>{"use strict";Object.defineProperty(Q,"__esModule",{value:!0});Q.matchAny=Q.convertPatternsToRe=Q.makeRe=Q.getPatternParts=Q.expandBraceExpansion=Q.expandPatternsWithBraceExpansion=Q.isAffectDepthOfReadingPattern=Q.endsWithSlashGlobStar=Q.hasGlobStar=Q.getBaseDirectory=Q.isPatternRelatedToParentDirectory=Q.getPatternsOutsideCurrentDirectory=Q.getPatternsInsideCurrentDirectory=Q.getPositivePatterns=Q.getNegativePatterns=Q.isPositivePattern=Q.isNegativePattern=Q.convertToNegativePattern=Q.convertToPositivePattern=Q.isDynamicPattern=Q.isStaticPattern=void 0;var ud=require("path"),cd=Iu(),za=qc(),Wc="**",ld="\\",fd=/[*?]|^!/,_d=/\[[^[]*]/,dd=/(?:^|[^!*+?@])\([^(]*\|[^|]*\)/,pd=/[!*+?@]\([^(]*\)/,hd=/,|\.\./;function Gc(r,t={}){return!zc(r,t)}Q.isStaticPattern=Gc;function zc(r,t={}){return r===""?!1:!!(t.caseSensitiveMatch===!1||r.includes(ld)||fd.test(r)||_d.test(r)||dd.test(r)||t.extglob!==!1&&pd.test(r)||t.braceExpansion!==!1&&md(r))}Q.isDynamicPattern=zc;function md(r){let t=r.indexOf("{");if(t===-1)return!1;let e=r.indexOf("}",t+1);if(e===-1)return!1;let n=r.slice(t,e);return hd.test(n)}function gd(r){return bn(r)?r.slice(1):r}Q.convertToPositivePattern=gd;function bd(r){return"!"+r}Q.convertToNegativePattern=bd;function bn(r){return r.startsWith("!")&&r[1]!=="("}Q.isNegativePattern=bn;function jc(r){return!bn(r)}Q.isPositivePattern=jc;function yd(r){return r.filter(bn)}Q.getNegativePatterns=yd;function vd(r){return r.filter(jc)}Q.getPositivePatterns=vd;function Sd(r){return r.filter(t=>!ja(t))}Q.getPatternsInsideCurrentDirectory=Sd;function wd(r){return r.filter(ja)}Q.getPatternsOutsideCurrentDirectory=wd;function ja(r){return r.startsWith("..")||r.startsWith("./..")}Q.isPatternRelatedToParentDirectory=ja;function Ed(r){return cd(r,{flipBackslashes:!1})}Q.getBaseDirectory=Ed;function Rd(r){return r.includes(Wc)}Q.hasGlobStar=Rd;function Kc(r){return r.endsWith("/"+Wc)}Q.endsWithSlashGlobStar=Kc;function kd(r){let t=ud.basename(r);return Kc(r)||Gc(t)}Q.isAffectDepthOfReadingPattern=kd;function Ad(r){return r.reduce((t,e)=>t.concat(Yc(e)),[])}Q.expandPatternsWithBraceExpansion=Ad;function Yc(r){return za.braces(r,{expand:!0,nodupes:!0})}Q.expandBraceExpansion=Yc;function Td(r,t){let{parts:e}=za.scan(r,Object.assign(Object.assign({},t),{parts:!0}));return e.length===0&&(e=[r]),e[0].startsWith("/")&&(e[0]=e[0].slice(1),e.unshift("")),e}Q.getPatternParts=Td;function Vc(r,t){return za.makeRe(r,t)}Q.makeRe=Vc;function Dd(r,t){return r.map(e=>Vc(e,t))}Q.convertPatternsToRe=Dd;function Cd(r,t){return t.some(e=>e.test(r))}Q.matchAny=Cd});var el=L((bm,Zc)=>{"use strict";var Pd=require("stream"),Qc=Pd.PassThrough,Md=Array.prototype.slice;Zc.exports=Fd;function Fd(){let r=[],t=Md.call(arguments),e=!1,n=t[t.length-1];n&&!Array.isArray(n)&&n.pipe==null?t.pop():n={};let s=n.end!==!1,c=n.pipeError===!0;n.objectMode==null&&(n.objectMode=!0),n.highWaterMark==null&&(n.highWaterMark=64*1024);let f=Qc(n);function h(){for(let y=0,P=arguments.length;y<P;y++)r.push(Jc(arguments[y],n));return g(),this}function g(){if(e)return;e=!0;let y=r.shift();if(!y){process.nextTick(D);return}Array.isArray(y)||(y=[y]);let P=y.length+1;function S(){--P>0||(e=!1,g())}function te(O){function B(){O.removeListener("merge2UnpipeEnd",B),O.removeListener("end",B),c&&O.removeListener("error",G),S()}function G(Y){f.emit("error",Y)}if(O._readableState.endEmitted)return S();O.on("merge2UnpipeEnd",B),O.on("end",B),c&&O.on("error",G),O.pipe(f,{end:!1}),O.resume()}for(let O=0;O<y.length;O++)te(y[O]);S()}function D(){e=!1,f.emit("queueDrain"),s&&f.end()}return f.setMaxListeners(0),f.add=h,f.on("unpipe",function(y){y.emit("merge2UnpipeEnd")}),t.length&&h.apply(null,t),f}function Jc(r,t){if(Array.isArray(r))for(let e=0,n=r.length;e<n;e++)r[e]=Jc(r[e],t);else{if(!r._readableState&&r.pipe&&(r=r.pipe(Qc(t))),!r._readableState||!r.pause||!r.pipe)throw new Error("Only readable stream can be merged.");r.pause()}return r}});var rl=L(yn=>{"use strict";Object.defineProperty(yn,"__esModule",{value:!0});yn.merge=void 0;var Id=el();function Od(r){let t=Id(r);return r.forEach(e=>{e.once("error",n=>t.emit("error",n))}),t.once("close",()=>tl(r)),t.once("end",()=>tl(r)),t}yn.merge=Od;function tl(r){r.forEach(t=>t.emit("close"))}});var nl=L(er=>{"use strict";Object.defineProperty(er,"__esModule",{value:!0});er.isEmpty=er.isString=void 0;function Ld(r){return typeof r=="string"}er.isString=Ld;function xd(r){return r===""}er.isEmpty=xd});var ot=L(Fe=>{"use strict";Object.defineProperty(Fe,"__esModule",{value:!0});Fe.string=Fe.stream=Fe.pattern=Fe.path=Fe.fs=Fe.errno=Fe.array=void 0;var Bd=Eu();Fe.array=Bd;var Nd=Ru();Fe.errno=Nd;var Ud=ku();Fe.fs=Ud;var Hd=Au();Fe.path=Hd;var $d=Xc();Fe.pattern=$d;var qd=rl();Fe.stream=qd;var Wd=nl();Fe.string=Wd});var al=L(Ie=>{"use strict";Object.defineProperty(Ie,"__esModule",{value:!0});Ie.convertPatternGroupToTask=Ie.convertPatternGroupsToTasks=Ie.groupPatternsByBaseDirectory=Ie.getNegativePatternsAsPositive=Ie.getPositivePatterns=Ie.convertPatternsToTasks=Ie.generate=void 0;var ut=ot();function Gd(r,t){let e=il(r),n=sl(r,t.ignore),s=e.filter(g=>ut.pattern.isStaticPattern(g,t)),c=e.filter(g=>ut.pattern.isDynamicPattern(g,t)),f=Ka(s,n,!1),h=Ka(c,n,!0);return f.concat(h)}Ie.generate=Gd;function Ka(r,t,e){let n=[],s=ut.pattern.getPatternsOutsideCurrentDirectory(r),c=ut.pattern.getPatternsInsideCurrentDirectory(r),f=Ya(s),h=Ya(c);return n.push(...Va(f,t,e)),"."in h?n.push(Xa(".",c,t,e)):n.push(...Va(h,t,e)),n}Ie.convertPatternsToTasks=Ka;function il(r){return ut.pattern.getPositivePatterns(r)}Ie.getPositivePatterns=il;function sl(r,t){return ut.pattern.getNegativePatterns(r).concat(t).map(ut.pattern.convertToPositivePattern)}Ie.getNegativePatternsAsPositive=sl;function Ya(r){let t={};return r.reduce((e,n)=>{let s=ut.pattern.getBaseDirectory(n);return s in e?e[s].push(n):e[s]=[n],e},t)}Ie.groupPatternsByBaseDirectory=Ya;function Va(r,t,e){return Object.keys(r).map(n=>Xa(n,r[n],t,e))}Ie.convertPatternGroupsToTasks=Va;function Xa(r,t,e,n){return{dynamic:n,positive:t,negative:e,base:r,patterns:[].concat(t,e.map(ut.pattern.convertToNegativePattern))}}Ie.convertPatternGroupToTask=Xa});var ul=L(tr=>{"use strict";Object.defineProperty(tr,"__esModule",{value:!0});tr.removeDuplicateSlashes=tr.transform=void 0;var zd=/(?!^)\/{2,}/g;function jd(r){return r.map(t=>ol(t))}tr.transform=jd;function ol(r){return r.replace(zd,"/")}tr.removeDuplicateSlashes=ol});var ll=L(vn=>{"use strict";Object.defineProperty(vn,"__esModule",{value:!0});vn.read=void 0;function Kd(r,t,e){t.fs.lstat(r,(n,s)=>{if(n!==null){cl(e,n);return}if(!s.isSymbolicLink()||!t.followSymbolicLink){Qa(e,s);return}t.fs.stat(r,(c,f)=>{if(c!==null){if(t.throwErrorOnBrokenSymbolicLink){cl(e,c);return}Qa(e,s);return}t.markSymbolicLink&&(f.isSymbolicLink=()=>!0),Qa(e,f)})})}vn.read=Kd;function cl(r,t){r(t)}function Qa(r,t){r(null,t)}});var fl=L(Sn=>{"use strict";Object.defineProperty(Sn,"__esModule",{value:!0});Sn.read=void 0;function Yd(r,t){let e=t.fs.lstatSync(r);if(!e.isSymbolicLink()||!t.followSymbolicLink)return e;try{let n=t.fs.statSync(r);return t.markSymbolicLink&&(n.isSymbolicLink=()=>!0),n}catch(n){if(!t.throwErrorOnBrokenSymbolicLink)return e;throw n}}Sn.read=Yd});var _l=L(pt=>{"use strict";Object.defineProperty(pt,"__esModule",{value:!0});pt.createFileSystemAdapter=pt.FILE_SYSTEM_ADAPTER=void 0;var wn=require("fs");pt.FILE_SYSTEM_ADAPTER={lstat:wn.lstat,stat:wn.stat,lstatSync:wn.lstatSync,statSync:wn.statSync};function Vd(r){return r===void 0?pt.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},pt.FILE_SYSTEM_ADAPTER),r)}pt.createFileSystemAdapter=Vd});var dl=L(Za=>{"use strict";Object.defineProperty(Za,"__esModule",{value:!0});var Xd=_l(),Ja=class{constructor(t={}){this._options=t,this.followSymbolicLink=this._getValue(this._options.followSymbolicLink,!0),this.fs=Xd.createFileSystemAdapter(this._options.fs),this.markSymbolicLink=this._getValue(this._options.markSymbolicLink,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0)}_getValue(t,e){return t??e}};Za.default=Ja});var xt=L(ht=>{"use strict";Object.defineProperty(ht,"__esModule",{value:!0});ht.statSync=ht.stat=ht.Settings=void 0;var pl=ll(),Qd=fl(),eo=dl();ht.Settings=eo.default;function Jd(r,t,e){if(typeof t=="function"){pl.read(r,to(),t);return}pl.read(r,to(t),e)}ht.stat=Jd;function Zd(r,t){let e=to(t);return Qd.read(r,e)}ht.statSync=Zd;function to(r={}){return r instanceof eo.default?r:new eo.default(r)}});var gl=L((Cm,ml)=>{var hl;ml.exports=typeof queueMicrotask=="function"?queueMicrotask.bind(typeof window<"u"?window:global):r=>(hl||(hl=Promise.resolve())).then(r).catch(t=>setTimeout(()=>{throw t},0))});var yl=L((Pm,bl)=>{bl.exports=tp;var ep=gl();function tp(r,t){let e,n,s,c=!0;Array.isArray(r)?(e=[],n=r.length):(s=Object.keys(r),e={},n=s.length);function f(g){function D(){t&&t(g,e),t=null}c?ep(D):D()}function h(g,D,y){e[g]=y,(--n===0||D)&&f(D)}n?s?s.forEach(function(g){r[g](function(D,y){h(g,D,y)})}):r.forEach(function(g,D){g(function(y,P){h(D,y,P)})}):f(null),c=!1}});var ro=L(Rn=>{"use strict";Object.defineProperty(Rn,"__esModule",{value:!0});Rn.IS_SUPPORT_READDIR_WITH_FILE_TYPES=void 0;var En=process.versions.node.split(".");if(En[0]===void 0||En[1]===void 0)throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);var vl=Number.parseInt(En[0],10),rp=Number.parseInt(En[1],10),Sl=10,np=10,ip=vl>Sl,sp=vl===Sl&&rp>=np;Rn.IS_SUPPORT_READDIR_WITH_FILE_TYPES=ip||sp});var wl=L(kn=>{"use strict";Object.defineProperty(kn,"__esModule",{value:!0});kn.createDirentFromStats=void 0;var no=class{constructor(t,e){this.name=t,this.isBlockDevice=e.isBlockDevice.bind(e),this.isCharacterDevice=e.isCharacterDevice.bind(e),this.isDirectory=e.isDirectory.bind(e),this.isFIFO=e.isFIFO.bind(e),this.isFile=e.isFile.bind(e),this.isSocket=e.isSocket.bind(e),this.isSymbolicLink=e.isSymbolicLink.bind(e)}};function ap(r,t){return new no(r,t)}kn.createDirentFromStats=ap});var io=L(An=>{"use strict";Object.defineProperty(An,"__esModule",{value:!0});An.fs=void 0;var op=wl();An.fs=op});var so=L(Tn=>{"use strict";Object.defineProperty(Tn,"__esModule",{value:!0});Tn.joinPathSegments=void 0;function up(r,t,e){return r.endsWith(e)?r+t:r+e+t}Tn.joinPathSegments=up});var Dl=L(mt=>{"use strict";Object.defineProperty(mt,"__esModule",{value:!0});mt.readdir=mt.readdirWithFileTypes=mt.read=void 0;var cp=xt(),El=yl(),lp=ro(),Rl=io(),kl=so();function fp(r,t,e){if(!t.stats&&lp.IS_SUPPORT_READDIR_WITH_FILE_TYPES){Al(r,t,e);return}Tl(r,t,e)}mt.read=fp;function Al(r,t,e){t.fs.readdir(r,{withFileTypes:!0},(n,s)=>{if(n!==null){Dn(e,n);return}let c=s.map(h=>({dirent:h,name:h.name,path:kl.joinPathSegments(r,h.name,t.pathSegmentSeparator)}));if(!t.followSymbolicLinks){ao(e,c);return}let f=c.map(h=>_p(h,t));El(f,(h,g)=>{if(h!==null){Dn(e,h);return}ao(e,g)})})}mt.readdirWithFileTypes=Al;function _p(r,t){return e=>{if(!r.dirent.isSymbolicLink()){e(null,r);return}t.fs.stat(r.path,(n,s)=>{if(n!==null){if(t.throwErrorOnBrokenSymbolicLink){e(n);return}e(null,r);return}r.dirent=Rl.fs.createDirentFromStats(r.name,s),e(null,r)})}}function Tl(r,t,e){t.fs.readdir(r,(n,s)=>{if(n!==null){Dn(e,n);return}let c=s.map(f=>{let h=kl.joinPathSegments(r,f,t.pathSegmentSeparator);return g=>{cp.stat(h,t.fsStatSettings,(D,y)=>{if(D!==null){g(D);return}let P={name:f,path:h,dirent:Rl.fs.createDirentFromStats(f,y)};t.stats&&(P.stats=y),g(null,P)})}});El(c,(f,h)=>{if(f!==null){Dn(e,f);return}ao(e,h)})})}mt.readdir=Tl;function Dn(r,t){r(t)}function ao(r,t){r(null,t)}});var Il=L(gt=>{"use strict";Object.defineProperty(gt,"__esModule",{value:!0});gt.readdir=gt.readdirWithFileTypes=gt.read=void 0;var dp=xt(),pp=ro(),Cl=io(),Pl=so();function hp(r,t){return!t.stats&&pp.IS_SUPPORT_READDIR_WITH_FILE_TYPES?Ml(r,t):Fl(r,t)}gt.read=hp;function Ml(r,t){return t.fs.readdirSync(r,{withFileTypes:!0}).map(n=>{let s={dirent:n,name:n.name,path:Pl.joinPathSegments(r,n.name,t.pathSegmentSeparator)};if(s.dirent.isSymbolicLink()&&t.followSymbolicLinks)try{let c=t.fs.statSync(s.path);s.dirent=Cl.fs.createDirentFromStats(s.name,c)}catch(c){if(t.throwErrorOnBrokenSymbolicLink)throw c}return s})}gt.readdirWithFileTypes=Ml;function Fl(r,t){return t.fs.readdirSync(r).map(n=>{let s=Pl.joinPathSegments(r,n,t.pathSegmentSeparator),c=dp.statSync(s,t.fsStatSettings),f={name:n,path:s,dirent:Cl.fs.createDirentFromStats(n,c)};return t.stats&&(f.stats=c),f})}gt.readdir=Fl});var Ol=L(bt=>{"use strict";Object.defineProperty(bt,"__esModule",{value:!0});bt.createFileSystemAdapter=bt.FILE_SYSTEM_ADAPTER=void 0;var rr=require("fs");bt.FILE_SYSTEM_ADAPTER={lstat:rr.lstat,stat:rr.stat,lstatSync:rr.lstatSync,statSync:rr.statSync,readdir:rr.readdir,readdirSync:rr.readdirSync};function mp(r){return r===void 0?bt.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},bt.FILE_SYSTEM_ADAPTER),r)}bt.createFileSystemAdapter=mp});var Ll=L(uo=>{"use strict";Object.defineProperty(uo,"__esModule",{value:!0});var gp=require("path"),bp=xt(),yp=Ol(),oo=class{constructor(t={}){this._options=t,this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!1),this.fs=yp.createFileSystemAdapter(this._options.fs),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,gp.sep),this.stats=this._getValue(this._options.stats,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0),this.fsStatSettings=new bp.Settings({followSymbolicLink:this.followSymbolicLinks,fs:this.fs,throwErrorOnBrokenSymbolicLink:this.throwErrorOnBrokenSymbolicLink})}_getValue(t,e){return t??e}};uo.default=oo});var Cn=L(yt=>{"use strict";Object.defineProperty(yt,"__esModule",{value:!0});yt.Settings=yt.scandirSync=yt.scandir=void 0;var xl=Dl(),vp=Il(),co=Ll();yt.Settings=co.default;function Sp(r,t,e){if(typeof t=="function"){xl.read(r,lo(),t);return}xl.read(r,lo(t),e)}yt.scandir=Sp;function wp(r,t){let e=lo(t);return vp.read(r,e)}yt.scandirSync=wp;function lo(r={}){return r instanceof co.default?r:new co.default(r)}});var Nl=L((Hm,Bl)=>{"use strict";function Ep(r){var t=new r,e=t;function n(){var c=t;return c.next?t=c.next:(t=new r,e=t),c.next=null,c}function s(c){e.next=c,e=c}return{get:n,release:s}}Bl.exports=Ep});var Hl=L(($m,fo)=>{"use strict";var Rp=Nl();function Ul(r,t,e){if(typeof r=="function"&&(e=t,t=r,r=null),e<1)throw new Error("fastqueue concurrency must be greater than 1");var n=Rp(kp),s=null,c=null,f=0,h=null,g={push:B,drain:je,saturated:je,pause:y,paused:!1,concurrency:e,running:D,resume:te,idle:O,length:P,getQueue:S,unshift:G,empty:je,kill:le,killAndDrain:ue,error:ke};return g;function D(){return f}function y(){g.paused=!0}function P(){for(var w=s,ie=0;w;)w=w.next,ie++;return ie}function S(){for(var w=s,ie=[];w;)ie.push(w.value),w=w.next;return ie}function te(){if(g.paused){g.paused=!1;for(var w=0;w<g.concurrency;w++)f++,Y()}}function O(){return f===0&&g.length()===0}function B(w,ie){var V=n.get();V.context=r,V.release=Y,V.value=w,V.callback=ie||je,V.errorHandler=h,f===g.concurrency||g.paused?c?(c.next=V,c=V):(s=V,c=V,g.saturated()):(f++,t.call(r,V.value,V.worked))}function G(w,ie){var V=n.get();V.context=r,V.release=Y,V.value=w,V.callback=ie||je,f===g.concurrency||g.paused?s?(V.next=s,s=V):(s=V,c=V,g.saturated()):(f++,t.call(r,V.value,V.worked))}function Y(w){w&&n.release(w);var ie=s;ie?g.paused?f--:(c===s&&(c=null),s=ie.next,ie.next=null,t.call(r,ie.value,ie.worked),c===null&&g.empty()):--f===0&&g.drain()}function le(){s=null,c=null,g.drain=je}function ue(){s=null,c=null,g.drain(),g.drain=je}function ke(w){h=w}}function je(){}function kp(){this.value=null,this.callback=je,this.next=null,this.release=je,this.context=null,this.errorHandler=null;var r=this;this.worked=function(e,n){var s=r.callback,c=r.errorHandler,f=r.value;r.value=null,r.callback=je,r.errorHandler&&c(e,f),s.call(r.context,e,n),r.release(r)}}function Ap(r,t,e){typeof r=="function"&&(e=t,t=r,r=null);function n(y,P){t.call(this,y).then(function(S){P(null,S)},P)}var s=Ul(r,n,e),c=s.push,f=s.unshift;return s.push=h,s.unshift=g,s.drained=D,s;function h(y){var P=new Promise(function(S,te){c(y,function(O,B){if(O){te(O);return}S(B)})});return P.catch(je),P}function g(y){var P=new Promise(function(S,te){f(y,function(O,B){if(O){te(O);return}S(B)})});return P.catch(je),P}function D(){var y=s.drain,P=new Promise(function(S){s.drain=function(){y(),S()}});return P}}fo.exports=Ul;fo.exports.promise=Ap});var Pn=L(et=>{"use strict";Object.defineProperty(et,"__esModule",{value:!0});et.joinPathSegments=et.replacePathSegmentSeparator=et.isAppliedFilter=et.isFatalError=void 0;function Tp(r,t){return r.errorFilter===null?!0:!r.errorFilter(t)}et.isFatalError=Tp;function Dp(r,t){return r===null||r(t)}et.isAppliedFilter=Dp;function Cp(r,t){return r.split(/[/\\]/).join(t)}et.replacePathSegmentSeparator=Cp;function Pp(r,t,e){return r===""?t:r.endsWith(e)?r+t:r+e+t}et.joinPathSegments=Pp});var ho=L(po=>{"use strict";Object.defineProperty(po,"__esModule",{value:!0});var Mp=Pn(),_o=class{constructor(t,e){this._root=t,this._settings=e,this._root=Mp.replacePathSegmentSeparator(t,e.pathSegmentSeparator)}};po.default=_o});var bo=L(go=>{"use strict";Object.defineProperty(go,"__esModule",{value:!0});var Fp=require("events"),Ip=Cn(),Op=Hl(),Mn=Pn(),Lp=ho(),mo=class extends Lp.default{constructor(t,e){super(t,e),this._settings=e,this._scandir=Ip.scandir,this._emitter=new Fp.EventEmitter,this._queue=Op(this._worker.bind(this),this._settings.concurrency),this._isFatalError=!1,this._isDestroyed=!1,this._queue.drain=()=>{this._isFatalError||this._emitter.emit("end")}}read(){return this._isFatalError=!1,this._isDestroyed=!1,setImmediate(()=>{this._pushToQueue(this._root,this._settings.basePath)}),this._emitter}get isDestroyed(){return this._isDestroyed}destroy(){if(this._isDestroyed)throw new Error("The reader is already destroyed");this._isDestroyed=!0,this._queue.killAndDrain()}onEntry(t){this._emitter.on("entry",t)}onError(t){this._emitter.once("error",t)}onEnd(t){this._emitter.once("end",t)}_pushToQueue(t,e){let n={directory:t,base:e};this._queue.push(n,s=>{s!==null&&this._handleError(s)})}_worker(t,e){this._scandir(t.directory,this._settings.fsScandirSettings,(n,s)=>{if(n!==null){e(n,void 0);return}for(let c of s)this._handleEntry(c,t.base);e(null,void 0)})}_handleError(t){this._isDestroyed||!Mn.isFatalError(this._settings,t)||(this._isFatalError=!0,this._isDestroyed=!0,this._emitter.emit("error",t))}_handleEntry(t,e){if(this._isDestroyed||this._isFatalError)return;let n=t.path;e!==void 0&&(t.path=Mn.joinPathSegments(e,t.name,this._settings.pathSegmentSeparator)),Mn.isAppliedFilter(this._settings.entryFilter,t)&&this._emitEntry(t),t.dirent.isDirectory()&&Mn.isAppliedFilter(this._settings.deepFilter,t)&&this._pushToQueue(n,e===void 0?void 0:t.path)}_emitEntry(t){this._emitter.emit("entry",t)}};go.default=mo});var $l=L(vo=>{"use strict";Object.defineProperty(vo,"__esModule",{value:!0});var xp=bo(),yo=class{constructor(t,e){this._root=t,this._settings=e,this._reader=new xp.default(this._root,this._settings),this._storage=[]}read(t){this._reader.onError(e=>{Bp(t,e)}),this._reader.onEntry(e=>{this._storage.push(e)}),this._reader.onEnd(()=>{Np(t,this._storage)}),this._reader.read()}};vo.default=yo;function Bp(r,t){r(t)}function Np(r,t){r(null,t)}});var ql=L(wo=>{"use strict";Object.defineProperty(wo,"__esModule",{value:!0});var Up=require("stream"),Hp=bo(),So=class{constructor(t,e){this._root=t,this._settings=e,this._reader=new Hp.default(this._root,this._settings),this._stream=new Up.Readable({objectMode:!0,read:()=>{},destroy:()=>{this._reader.isDestroyed||this._reader.destroy()}})}read(){return this._reader.onError(t=>{this._stream.emit("error",t)}),this._reader.onEntry(t=>{this._stream.push(t)}),this._reader.onEnd(()=>{this._stream.push(null)}),this._reader.read(),this._stream}};wo.default=So});var Wl=L(Ro=>{"use strict";Object.defineProperty(Ro,"__esModule",{value:!0});var $p=Cn(),Fn=Pn(),qp=ho(),Eo=class extends qp.default{constructor(){super(...arguments),this._scandir=$p.scandirSync,this._storage=[],this._queue=new Set}read(){return this._pushToQueue(this._root,this._settings.basePath),this._handleQueue(),this._storage}_pushToQueue(t,e){this._queue.add({directory:t,base:e})}_handleQueue(){for(let t of this._queue.values())this._handleDirectory(t.directory,t.base)}_handleDirectory(t,e){try{let n=this._scandir(t,this._settings.fsScandirSettings);for(let s of n)this._handleEntry(s,e)}catch(n){this._handleError(n)}}_handleError(t){if(Fn.isFatalError(this._settings,t))throw t}_handleEntry(t,e){let n=t.path;e!==void 0&&(t.path=Fn.joinPathSegments(e,t.name,this._settings.pathSegmentSeparator)),Fn.isAppliedFilter(this._settings.entryFilter,t)&&this._pushToStorage(t),t.dirent.isDirectory()&&Fn.isAppliedFilter(this._settings.deepFilter,t)&&this._pushToQueue(n,e===void 0?void 0:t.path)}_pushToStorage(t){this._storage.push(t)}};Ro.default=Eo});var Gl=L(Ao=>{"use strict";Object.defineProperty(Ao,"__esModule",{value:!0});var Wp=Wl(),ko=class{constructor(t,e){this._root=t,this._settings=e,this._reader=new Wp.default(this._root,this._settings)}read(){return this._reader.read()}};Ao.default=ko});var zl=L(Do=>{"use strict";Object.defineProperty(Do,"__esModule",{value:!0});var Gp=require("path"),zp=Cn(),To=class{constructor(t={}){this._options=t,this.basePath=this._getValue(this._options.basePath,void 0),this.concurrency=this._getValue(this._options.concurrency,Number.POSITIVE_INFINITY),this.deepFilter=this._getValue(this._options.deepFilter,null),this.entryFilter=this._getValue(this._options.entryFilter,null),this.errorFilter=this._getValue(this._options.errorFilter,null),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,Gp.sep),this.fsScandirSettings=new zp.Settings({followSymbolicLinks:this._options.followSymbolicLinks,fs:this._options.fs,pathSegmentSeparator:this._options.pathSegmentSeparator,stats:this._options.stats,throwErrorOnBrokenSymbolicLink:this._options.throwErrorOnBrokenSymbolicLink})}_getValue(t,e){return t??e}};Do.default=To});var On=L(tt=>{"use strict";Object.defineProperty(tt,"__esModule",{value:!0});tt.Settings=tt.walkStream=tt.walkSync=tt.walk=void 0;var jl=$l(),jp=ql(),Kp=Gl(),Co=zl();tt.Settings=Co.default;function Yp(r,t,e){if(typeof t=="function"){new jl.default(r,In()).read(t);return}new jl.default(r,In(t)).read(e)}tt.walk=Yp;function Vp(r,t){let e=In(t);return new Kp.default(r,e).read()}tt.walkSync=Vp;function Xp(r,t){let e=In(t);return new jp.default(r,e).read()}tt.walkStream=Xp;function In(r={}){return r instanceof Co.default?r:new Co.default(r)}});var Ln=L(Mo=>{"use strict";Object.defineProperty(Mo,"__esModule",{value:!0});var Qp=require("path"),Jp=xt(),Kl=ot(),Po=class{constructor(t){this._settings=t,this._fsStatSettings=new Jp.Settings({followSymbolicLink:this._settings.followSymbolicLinks,fs:this._settings.fs,throwErrorOnBrokenSymbolicLink:this._settings.followSymbolicLinks})}_getFullEntryPath(t){return Qp.resolve(this._settings.cwd,t)}_makeEntry(t,e){let n={name:e,path:e,dirent:Kl.fs.createDirentFromStats(e,t)};return this._settings.stats&&(n.stats=t),n}_isFatalError(t){return!Kl.errno.isEnoentCodeError(t)&&!this._settings.suppressErrors}};Mo.default=Po});var Oo=L(Io=>{"use strict";Object.defineProperty(Io,"__esModule",{value:!0});var Zp=require("stream"),eh=xt(),th=On(),rh=Ln(),Fo=class extends rh.default{constructor(){super(...arguments),this._walkStream=th.walkStream,this._stat=eh.stat}dynamic(t,e){return this._walkStream(t,e)}static(t,e){let n=t.map(this._getFullEntryPath,this),s=new Zp.PassThrough({objectMode:!0});s._write=(c,f,h)=>this._getEntry(n[c],t[c],e).then(g=>{g!==null&&e.entryFilter(g)&&s.push(g),c===n.length-1&&s.end(),h()}).catch(h);for(let c=0;c<n.length;c++)s.write(c);return s}_getEntry(t,e,n){return this._getStat(t).then(s=>this._makeEntry(s,e)).catch(s=>{if(n.errorFilter(s))return null;throw s})}_getStat(t){return new Promise((e,n)=>{this._stat(t,this._fsStatSettings,(s,c)=>s===null?e(c):n(s))})}};Io.default=Fo});var Yl=L(xo=>{"use strict";Object.defineProperty(xo,"__esModule",{value:!0});var nh=On(),ih=Ln(),sh=Oo(),Lo=class extends ih.default{constructor(){super(...arguments),this._walkAsync=nh.walk,this._readerStream=new sh.default(this._settings)}dynamic(t,e){return new Promise((n,s)=>{this._walkAsync(t,e,(c,f)=>{c===null?n(f):s(c)})})}async static(t,e){let n=[],s=this._readerStream.static(t,e);return new Promise((c,f)=>{s.once("error",f),s.on("data",h=>n.push(h)),s.once("end",()=>c(n))})}};xo.default=Lo});var Vl=L(No=>{"use strict";Object.defineProperty(No,"__esModule",{value:!0});var nr=ot(),Bo=class{constructor(t,e,n){this._patterns=t,this._settings=e,this._micromatchOptions=n,this._storage=[],this._fillStorage()}_fillStorage(){let t=nr.pattern.expandPatternsWithBraceExpansion(this._patterns);for(let e of t){let n=this._getPatternSegments(e),s=this._splitSegmentsIntoSections(n);this._storage.push({complete:s.length<=1,pattern:e,segments:n,sections:s})}}_getPatternSegments(t){return nr.pattern.getPatternParts(t,this._micromatchOptions).map(n=>nr.pattern.isDynamicPattern(n,this._settings)?{dynamic:!0,pattern:n,patternRe:nr.pattern.makeRe(n,this._micromatchOptions)}:{dynamic:!1,pattern:n})}_splitSegmentsIntoSections(t){return nr.array.splitWhen(t,e=>e.dynamic&&nr.pattern.hasGlobStar(e.pattern))}};No.default=Bo});var Xl=L(Ho=>{"use strict";Object.defineProperty(Ho,"__esModule",{value:!0});var ah=Vl(),Uo=class extends ah.default{match(t){let e=t.split("/"),n=e.length,s=this._storage.filter(c=>!c.complete||c.segments.length>n);for(let c of s){let f=c.sections[0];if(!c.complete&&n>f.length||e.every((g,D)=>{let y=c.segments[D];return!!(y.dynamic&&y.patternRe.test(g)||!y.dynamic&&y.pattern===g)}))return!0}return!1}};Ho.default=Uo});var Ql=L(qo=>{"use strict";Object.defineProperty(qo,"__esModule",{value:!0});var xn=ot(),oh=Xl(),$o=class{constructor(t,e){this._settings=t,this._micromatchOptions=e}getFilter(t,e,n){let s=this._getMatcher(e),c=this._getNegativePatternsRe(n);return f=>this._filter(t,f,s,c)}_getMatcher(t){return new oh.default(t,this._settings,this._micromatchOptions)}_getNegativePatternsRe(t){let e=t.filter(xn.pattern.isAffectDepthOfReadingPattern);return xn.pattern.convertPatternsToRe(e,this._micromatchOptions)}_filter(t,e,n,s){if(this._isSkippedByDeep(t,e.path)||this._isSkippedSymbolicLink(e))return!1;let c=xn.path.removeLeadingDotSegment(e.path);return this._isSkippedByPositivePatterns(c,n)?!1:this._isSkippedByNegativePatterns(c,s)}_isSkippedByDeep(t,e){return this._settings.deep===1/0?!1:this._getEntryLevel(t,e)>=this._settings.deep}_getEntryLevel(t,e){let n=e.split("/").length;if(t==="")return n;let s=t.split("/").length;return n-s}_isSkippedSymbolicLink(t){return!this._settings.followSymbolicLinks&&t.dirent.isSymbolicLink()}_isSkippedByPositivePatterns(t,e){return!this._settings.baseNameMatch&&!e.match(t)}_isSkippedByNegativePatterns(t,e){return!xn.pattern.matchAny(t,e)}};qo.default=$o});var Jl=L(Go=>{"use strict";Object.defineProperty(Go,"__esModule",{value:!0});var Bt=ot(),Wo=class{constructor(t,e){this._settings=t,this._micromatchOptions=e,this.index=new Map}getFilter(t,e){let n=Bt.pattern.convertPatternsToRe(t,this._micromatchOptions),s=Bt.pattern.convertPatternsToRe(e,this._micromatchOptions);return c=>this._filter(c,n,s)}_filter(t,e,n){if(this._settings.unique&&this._isDuplicateEntry(t)||this._onlyFileFilter(t)||this._onlyDirectoryFilter(t)||this._isSkippedByAbsoluteNegativePatterns(t.path,n))return!1;let s=this._settings.baseNameMatch?t.name:t.path,c=t.dirent.isDirectory(),f=this._isMatchToPatterns(s,e,c)&&!this._isMatchToPatterns(t.path,n,c);return this._settings.unique&&f&&this._createIndexRecord(t),f}_isDuplicateEntry(t){return this.index.has(t.path)}_createIndexRecord(t){this.index.set(t.path,void 0)}_onlyFileFilter(t){return this._settings.onlyFiles&&!t.dirent.isFile()}_onlyDirectoryFilter(t){return this._settings.onlyDirectories&&!t.dirent.isDirectory()}_isSkippedByAbsoluteNegativePatterns(t,e){if(!this._settings.absolute)return!1;let n=Bt.path.makeAbsolute(this._settings.cwd,t);return Bt.pattern.matchAny(n,e)}_isMatchToPatterns(t,e,n){let s=Bt.path.removeLeadingDotSegment(t),c=Bt.pattern.matchAny(s,e);return!c&&n?Bt.pattern.matchAny(s+"/",e):c}};Go.default=Wo});var Zl=L(jo=>{"use strict";Object.defineProperty(jo,"__esModule",{value:!0});var uh=ot(),zo=class{constructor(t){this._settings=t}getFilter(){return t=>this._isNonFatalError(t)}_isNonFatalError(t){return uh.errno.isEnoentCodeError(t)||this._settings.suppressErrors}};jo.default=zo});var tf=L(Yo=>{"use strict";Object.defineProperty(Yo,"__esModule",{value:!0});var ef=ot(),Ko=class{constructor(t){this._settings=t}getTransformer(){return t=>this._transform(t)}_transform(t){let e=t.path;return this._settings.absolute&&(e=ef.path.makeAbsolute(this._settings.cwd,e),e=ef.path.unixify(e)),this._settings.markDirectories&&t.dirent.isDirectory()&&(e+="/"),this._settings.objectMode?Object.assign(Object.assign({},t),{path:e}):e}};Yo.default=Ko});var Bn=L(Xo=>{"use strict";Object.defineProperty(Xo,"__esModule",{value:!0});var ch=require("path"),lh=Ql(),fh=Jl(),_h=Zl(),dh=tf(),Vo=class{constructor(t){this._settings=t,this.errorFilter=new _h.default(this._settings),this.entryFilter=new fh.default(this._settings,this._getMicromatchOptions()),this.deepFilter=new lh.default(this._settings,this._getMicromatchOptions()),this.entryTransformer=new dh.default(this._settings)}_getRootDirectory(t){return ch.resolve(this._settings.cwd,t.base)}_getReaderOptions(t){let e=t.base==="."?"":t.base;return{basePath:e,pathSegmentSeparator:"/",concurrency:this._settings.concurrency,deepFilter:this.deepFilter.getFilter(e,t.positive,t.negative),entryFilter:this.entryFilter.getFilter(t.positive,t.negative),errorFilter:this.errorFilter.getFilter(),followSymbolicLinks:this._settings.followSymbolicLinks,fs:this._settings.fs,stats:this._settings.stats,throwErrorOnBrokenSymbolicLink:this._settings.throwErrorOnBrokenSymbolicLink,transform:this.entryTransformer.getTransformer()}}_getMicromatchOptions(){return{dot:this._settings.dot,matchBase:this._settings.baseNameMatch,nobrace:!this._settings.braceExpansion,nocase:!this._settings.caseSensitiveMatch,noext:!this._settings.extglob,noglobstar:!this._settings.globstar,posix:!0,strictSlashes:!1}}};Xo.default=Vo});var rf=L(Jo=>{"use strict";Object.defineProperty(Jo,"__esModule",{value:!0});var ph=Yl(),hh=Bn(),Qo=class extends hh.default{constructor(){super(...arguments),this._reader=new ph.default(this._settings)}async read(t){let e=this._getRootDirectory(t),n=this._getReaderOptions(t);return(await this.api(e,t,n)).map(c=>n.transform(c))}api(t,e,n){return e.dynamic?this._reader.dynamic(t,n):this._reader.static(e.patterns,n)}};Jo.default=Qo});var nf=L(eu=>{"use strict";Object.defineProperty(eu,"__esModule",{value:!0});var mh=require("stream"),gh=Oo(),bh=Bn(),Zo=class extends bh.default{constructor(){super(...arguments),this._reader=new gh.default(this._settings)}read(t){let e=this._getRootDirectory(t),n=this._getReaderOptions(t),s=this.api(e,t,n),c=new mh.Readable({objectMode:!0,read:()=>{}});return s.once("error",f=>c.emit("error",f)).on("data",f=>c.emit("data",n.transform(f))).once("end",()=>c.emit("end")),c.once("close",()=>s.destroy()),c}api(t,e,n){return e.dynamic?this._reader.dynamic(t,n):this._reader.static(e.patterns,n)}};eu.default=Zo});var sf=L(ru=>{"use strict";Object.defineProperty(ru,"__esModule",{value:!0});var yh=xt(),vh=On(),Sh=Ln(),tu=class extends Sh.default{constructor(){super(...arguments),this._walkSync=vh.walkSync,this._statSync=yh.statSync}dynamic(t,e){return this._walkSync(t,e)}static(t,e){let n=[];for(let s of t){let c=this._getFullEntryPath(s),f=this._getEntry(c,s,e);f===null||!e.entryFilter(f)||n.push(f)}return n}_getEntry(t,e,n){try{let s=this._getStat(t);return this._makeEntry(s,e)}catch(s){if(n.errorFilter(s))return null;throw s}}_getStat(t){return this._statSync(t,this._fsStatSettings)}};ru.default=tu});var af=L(iu=>{"use strict";Object.defineProperty(iu,"__esModule",{value:!0});var wh=sf(),Eh=Bn(),nu=class extends Eh.default{constructor(){super(...arguments),this._reader=new wh.default(this._settings)}read(t){let e=this._getRootDirectory(t),n=this._getReaderOptions(t);return this.api(e,t,n).map(n.transform)}api(t,e,n){return e.dynamic?this._reader.dynamic(t,n):this._reader.static(e.patterns,n)}};iu.default=nu});var of=L(sr=>{"use strict";Object.defineProperty(sr,"__esModule",{value:!0});sr.DEFAULT_FILE_SYSTEM_ADAPTER=void 0;var ir=require("fs"),Rh=require("os"),kh=Math.max(Rh.cpus().length,1);sr.DEFAULT_FILE_SYSTEM_ADAPTER={lstat:ir.lstat,lstatSync:ir.lstatSync,stat:ir.stat,statSync:ir.statSync,readdir:ir.readdir,readdirSync:ir.readdirSync};var su=class{constructor(t={}){this._options=t,this.absolute=this._getValue(this._options.absolute,!1),this.baseNameMatch=this._getValue(this._options.baseNameMatch,!1),this.braceExpansion=this._getValue(this._options.braceExpansion,!0),this.caseSensitiveMatch=this._getValue(this._options.caseSensitiveMatch,!0),this.concurrency=this._getValue(this._options.concurrency,kh),this.cwd=this._getValue(this._options.cwd,process.cwd()),this.deep=this._getValue(this._options.deep,1/0),this.dot=this._getValue(this._options.dot,!1),this.extglob=this._getValue(this._options.extglob,!0),this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!0),this.fs=this._getFileSystemMethods(this._options.fs),this.globstar=this._getValue(this._options.globstar,!0),this.ignore=this._getValue(this._options.ignore,[]),this.markDirectories=this._getValue(this._options.markDirectories,!1),this.objectMode=this._getValue(this._options.objectMode,!1),this.onlyDirectories=this._getValue(this._options.onlyDirectories,!1),this.onlyFiles=this._getValue(this._options.onlyFiles,!0),this.stats=this._getValue(this._options.stats,!1),this.suppressErrors=this._getValue(this._options.suppressErrors,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!1),this.unique=this._getValue(this._options.unique,!0),this.onlyDirectories&&(this.onlyFiles=!1),this.stats&&(this.objectMode=!0)}_getValue(t,e){return t===void 0?e:t}_getFileSystemMethods(t={}){return Object.assign(Object.assign({},sr.DEFAULT_FILE_SYSTEM_ADAPTER),t)}};sr.default=su});var ff=L((_g,lf)=>{"use strict";var uf=al(),cf=ul(),Ah=rf(),Th=nf(),Dh=af(),au=of(),Nt=ot();async function ou(r,t){ar(r);let e=uu(r,Ah.default,t),n=await Promise.all(e);return Nt.array.flatten(n)}(function(r){function t(f,h){ar(f);let g=uu(f,Dh.default,h);return Nt.array.flatten(g)}r.sync=t;function e(f,h){ar(f);let g=uu(f,Th.default,h);return Nt.stream.merge(g)}r.stream=e;function n(f,h){ar(f);let g=cf.transform([].concat(f)),D=new au.default(h);return uf.generate(g,D)}r.generateTasks=n;function s(f,h){ar(f);let g=new au.default(h);return Nt.pattern.isDynamicPattern(f,g)}r.isDynamicPattern=s;function c(f){return ar(f),Nt.path.escape(f)}r.escapePath=c})(ou||(ou={}));function uu(r,t,e){let n=cf.transform([].concat(r)),s=new au.default(e),c=uf.generate(n,s),f=new t(s);return c.map(f.read,f)}function ar(r){if(![].concat(r).every(n=>Nt.string.isString(n)&&!Nt.string.isEmpty(n)))throw new TypeError("Patterns must be a string (non empty) or an array of strings")}lf.exports=ou});var Ch={};wf(Ch,{registerWorker:()=>df});module.exports=Ef(Ch);var oe=Mt(require("apache-arrow"));function Xt(r){switch(r.typeId){case oe.Type.Binary:return{sqlType:"binary"};case oe.Type.Bool:return{sqlType:"bool"};case oe.Type.Date:return{sqlType:"date"};case oe.Type.DateDay:return{sqlType:"date32[d]"};case oe.Type.DateMillisecond:return{sqlType:"date64[ms]"};case oe.Type.Decimal:{let t=r;return{sqlType:"decimal",precision:t.precision,scale:t.scale}}case oe.Type.Float:return{sqlType:"float"};case oe.Type.Float16:return{sqlType:"float16"};case oe.Type.Float32:return{sqlType:"float32"};case oe.Type.Float64:return{sqlType:"float64"};case oe.Type.Int:return{sqlType:"int32"};case oe.Type.Int16:return{sqlType:"int16"};case oe.Type.Int32:return{sqlType:"int32"};case oe.Type.Int64:return{sqlType:"int64"};case oe.Type.Uint16:return{sqlType:"uint16"};case oe.Type.Uint32:return{sqlType:"uint32"};case oe.Type.Uint64:return{sqlType:"uint64"};case oe.Type.Uint8:return{sqlType:"uint8"};case oe.Type.IntervalDayTime:return{sqlType:"interval[dt]"};case oe.Type.IntervalYearMonth:return{sqlType:"interval[m]"};case oe.Type.List:return{sqlType:"list",valueType:Xt(r.valueType)};case oe.Type.FixedSizeBinary:return{sqlType:"fixedsizebinary",byteWidth:r.byteWidth};case oe.Type.Null:return{sqlType:"null"};case oe.Type.Utf8:return{sqlType:"utf8"};case oe.Type.Struct:return{sqlType:"struct",fields:r.children.map(e=>Jr(e.name,e.type))};case oe.Type.Map:{let t=r;return{sqlType:"map",keyType:Xt(t.keyType),valueType:Xt(t.valueType)}}case oe.Type.Time:return{sqlType:"time[s]"};case oe.Type.TimeMicrosecond:return{sqlType:"time[us]"};case oe.Type.TimeMillisecond:return{sqlType:"time[ms]"};case oe.Type.TimeNanosecond:return{sqlType:"time[ns]"};case oe.Type.TimeSecond:return{sqlType:"time[s]"};case oe.Type.Timestamp:return{sqlType:"timestamp",timezone:r.timezone||void 0};case oe.Type.TimestampSecond:return{sqlType:"timestamp[s]",timezone:r.timezone||void 0};case oe.Type.TimestampMicrosecond:return{sqlType:"timestamp[us]",timezone:r.timezone||void 0};case oe.Type.TimestampNanosecond:return{sqlType:"timestamp[ns]",timezone:r.timezone||void 0};case oe.Type.TimestampMillisecond:return{sqlType:"timestamp[ms]",timezone:r.timezone||void 0}}throw new Error(`unsupported arrow type: ${r.toString()}`)}function Jr(r,t){let e=Xt(t);return e.name=r,e}var Zr=class{constructor(){this._bindings=null;this._nextMessageId=0}log(t){this.postMessage({messageId:this._nextMessageId++,requestId:0,type:"LOG",data:t},[])}sendOK(t){this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"OK",data:null},[])}failWith(t,e){let n={name:e.name,message:e.message,stack:e.stack||void 0};this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"ERROR",data:n},[])}async onMessage(t){switch(t.type){case"PING":this.sendOK(t);return;case"INSTANTIATE":this._bindings!=null&&this.failWith(t,new Error("duckdb already initialized"));try{this._bindings=await this.instantiate(t.data[0],t.data[1],e=>{this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"INSTANTIATE_PROGRESS",data:e},[])}),this.sendOK(t)}catch(e){console.log(e),this._bindings=null,this.failWith(t,e)}return;default:break}if(!this._bindings)return this.failWith(t,new Error("duckdb is not initialized"));try{switch(t.type){case"GET_VERSION":this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"VERSION_STRING",data:this._bindings.getVersion()},[]);break;case"GET_FEATURE_FLAGS":this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FEATURE_FLAGS",data:this._bindings.getFeatureFlags()},[]);break;case"RESET":this._bindings.reset(),this.sendOK(t);break;case"OPEN":this._bindings.open(t.data),this.sendOK(t);break;case"DROP_FILE":this._bindings.dropFile(t.data),this.sendOK(t);break;case"DROP_FILES":this._bindings.dropFiles(),this.sendOK(t);break;case"FLUSH_FILES":this._bindings.flushFiles(),this.sendOK(t);break;case"CONNECT":{let e=this._bindings.connect();this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"CONNECTION_INFO",data:e.useUnsafe((n,s)=>s)},[]);break}case"DISCONNECT":this._bindings.disconnect(t.data),this.sendOK(t);break;case"CREATE_PREPARED":{let e=this._bindings.createPrepared(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"PREPARED_STATEMENT_ID",data:e},[]);break}case"CLOSE_PREPARED":{this._bindings.closePrepared(t.data[0],t.data[1]),this.sendOK(t);break}case"RUN_PREPARED":{let e=this._bindings.runPrepared(t.data[0],t.data[1],t.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT",data:e},[e.buffer]);break}case"RUN_QUERY":{let e=this._bindings.runQuery(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT",data:e},[e.buffer]);break}case"SEND_PREPARED":{let e=this._bindings.sendPrepared(t.data[0],t.data[1],t.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER",data:e},[e.buffer]);break}case"START_PENDING_QUERY":{let e=this._bindings.startPendingQuery(t.data[0],t.data[1]),n=[];e&&n.push(e.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:e},n);break}case"POLL_PENDING_QUERY":{let e=this._bindings.pollPendingQuery(t.data),n=[];e&&n.push(e.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:e},n);break}case"CANCEL_PENDING_QUERY":{let e=this._bindings.cancelPendingQuery(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"SUCCESS",data:e},[]);break}case"FETCH_QUERY_RESULTS":{let e=this._bindings.fetchQueryResults(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_CHUNK",data:e},[e.buffer]);break}case"GET_TABLE_NAMES":{let e=this._bindings.getTableNames(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"TABLE_NAMES",data:e},[]);break}case"GLOB_FILE_INFOS":{let e=this._bindings.globFiles(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_INFOS",data:e},[]);break}case"REGISTER_FILE_URL":this._bindings.registerFileURL(t.data[0],t.data[1],t.data[2],t.data[3]),this.sendOK(t);break;case"REGISTER_FILE_BUFFER":this._bindings.registerFileBuffer(t.data[0],t.data[1]),this.sendOK(t);break;case"REGISTER_FILE_HANDLE":this._bindings.registerFileHandle(t.data[0],t.data[1],t.data[2],t.data[3]),this.sendOK(t);break;case"COPY_FILE_TO_PATH":this._bindings.copyFileToPath(t.data[0],t.data[1]),this.sendOK(t);break;case"COPY_FILE_TO_BUFFER":{let e=this._bindings.copyFileToBuffer(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_BUFFER",data:e},[]);break}case"COLLECT_FILE_STATISTICS":this._bindings.collectFileStatistics(t.data[0],t.data[1]),this.sendOK(t);break;case"EXPORT_FILE_STATISTICS":{this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_STATISTICS",data:this._bindings.exportFileStatistics(t.data)},[]);break}case"INSERT_ARROW_FROM_IPC_STREAM":{this._bindings.insertArrowFromIPCStream(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"IMPORT_CSV_FROM_PATH":{this._bindings.insertCSVFromPath(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"IMPORT_JSON_FROM_PATH":{this._bindings.insertJSONFromPath(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"TOKENIZE":{let e=this._bindings.tokenize(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"SCRIPT_TOKENS",data:e},[]);break}}}catch(e){return console.log(e),this.failWith(t,e)}}};var wu=Mt(pu());var vu=Mt(hu());var Xe=Mt(require("apache-arrow")),rn=class{constructor(t,e){this._bindings=t,this._conn=e}close(){this._bindings.disconnect(this._conn)}useUnsafe(t){return t(this._bindings,this._conn)}query(t){let e=this._bindings.runQuery(this._conn,t),n=Xe.RecordBatchReader.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new Xe.Table(n)}async send(t){let e=this._bindings.startPendingQuery(this._conn,t);for(;e==null;)e=await new Promise((c,f)=>{try{c(this._bindings.pollPendingQuery(this._conn))}catch(h){console.log(h),f(h)}});let n=new nn(this._bindings,this._conn,e),s=Xe.RecordBatchReader.from(n);return console.assert(s.isSync()),console.assert(s.isStream()),s}cancelSent(){return this._bindings.cancelPendingQuery(this._conn)}getTableNames(t){return this._bindings.getTableNames(this._conn,t)}prepare(t){let e=this._bindings.createPrepared(this._conn,t);return new Ra(this._bindings,this._conn,e)}createScalarFunction(t,e,n){this._bindings.createScalarFunction(this._conn,t,e,n)}insertArrowTable(t,e){let n=Xe.tableToIPC(t,"stream");this.insertArrowFromIPCStream(n,e)}insertArrowFromIPCStream(t,e){this._bindings.insertArrowFromIPCStream(this._conn,t,e)}insertCSVFromPath(t,e){this._bindings.insertCSVFromPath(this._conn,t,e)}insertJSONFromPath(t,e){this._bindings.insertJSONFromPath(this._conn,t,e)}},nn=class{constructor(t,e,n){this.bindings=t;this.conn=e;this.header=n;this._first=!0,this._depleted=!1}next(){if(this._first)return this._first=!1,{done:!1,value:this.header};if(this._depleted)return{done:!0,value:null};let t=this.bindings.fetchQueryResults(this.conn);return this._depleted=t.length==0,{done:this._depleted,value:t}}[Symbol.iterator](){return this}},Ra=class{constructor(t,e,n){this.bindings=t,this.connectionId=e,this.statementId=n}close(){this.bindings.closePrepared(this.connectionId,this.statementId)}query(...t){let e=this.bindings.runPrepared(this.connectionId,this.statementId,t),n=Xe.RecordBatchReader.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new Xe.Table(n)}send(...t){let e=this.bindings.sendPrepared(this.connectionId,this.statementId,t),n=new nn(this.bindings,this.connectionId,e),s=Xe.RecordBatchReader.from(n);return console.assert(s.isSync()),console.assert(s.isStream()),s}};var bu=new TextEncoder,mu=new TextDecoder("utf-8");function ka(r,t,e){let n=bu.encode(e),s=r._malloc(n.byteLength),c=r.HEAPU8.subarray(s,s+n.byteLength);c.set(n),r.HEAPF64[(t>>3)+0]=1,r.HEAPF64[(t>>3)+1]=s,r.HEAPF64[(t>>3)+2]=c.byteLength}function Ta(r){switch(r){case"UINT8":case"INT8":return 1;case"INT32":case"FLOAT":return 4;case"INT64":case"UINT64":case"DOUBLE":case"VARCHAR":return 8;default:return 0}}function Aa(r,t,e,n){let s=r.HEAPU8.subarray(t,t+n*Ta(e));switch(e){case"UINT8":return new Uint8Array(s.buffer,s.byteOffset,n);case"INT8":return new Int8Array(s.buffer,s.byteOffset,n);case"INT32":return new Int32Array(s.buffer,s.byteOffset,n);case"FLOAT":return new Float32Array(s.buffer,s.byteOffset,n);case"DOUBLE":return new Float64Array(s.buffer,s.byteOffset,n);case"VARCHAR":return new Float64Array(s.buffer,s.byteOffset,n);default:return new Array(0)}}function gu(r,t,e){let n=r.HEAPU8.subarray(t,t+e);return new Uint8Array(n.buffer,n.byteOffset,e)}function sn(r,t,e){let n=r.HEAPU8.subarray(t,t+e*8);return new Float64Array(n.buffer,n.byteOffset,e)}function yu(r,t,e,n,s,c,f,h){try{let g=r._udfFunctions.get(n);if(!g){ka(t,e,"Unknown UDF with id: "+n);return}let D=mu.decode(t.HEAPU8.subarray(s,s+c)),y=JSON.parse(D),P=sn(t,f,h/8),S=N=>{var R;let Z=null;switch(N.validityBuffer!==void 0&&(Z=gu(t,P[N.validityBuffer],y.rows)),N.physicalType){case"VARCHAR":{if(N.dataBuffer===null||N.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for VARCHAR argument");if(N.lengthBuffer===null||N.lengthBuffer===void 0)throw new Error("malformed data view, expected data length buffer for VARCHAR argument");let j=Aa(t,P[N.dataBuffer],N.physicalType,y.rows),$=[],se=sn(t,P[N.lengthBuffer],y.rows);for(let v=0;v<y.rows;++v){if(Z!=null&&!Z[v]){$.push(null);continue}let _=t.HEAPU8.subarray(j[v],j[v]+se[v]),H=mu.decode(_);$.push(H)}return v=>$[v]}case"STRUCT":{let j={},$=[];for(let se=0;se<(((R=N.children)==null?void 0:R.length)||0);++se){let v=N.children[se],_=S(v);$.push(H=>{j[v.name]=_(H)})}return Z!=null?se=>{if(!Z[se])return null;for(let v of $)v(se);return j}:se=>{for(let v of $)v(se);return j}}default:{if(N.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for argument of type: "+N.physicalType);let j=Aa(t,P[N.dataBuffer],N.physicalType,y.rows);return Z!=null?$=>Z[$]?j[$]:null:$=>j[$]}}},te=[];for(let N=0;N<y.args.length;++N)te.push(S(y.args[N]));let O=y.rows*Ta(y.ret.physicalType),B=t._malloc(O),G=Aa(t,B,y.ret.physicalType,y.rows),Y=t._malloc(y.rows),le=gu(t,Y,y.rows);if(G.length==0||le.length==0){ka(t,e,"Can't create physical arrays for result");return}let ue=G;y.ret.physicalType=="VARCHAR"&&(ue=new Array(y.rows));let ke=[];for(let N=0;N<y.args.length;++N)ke.push(null);for(let N=0;N<y.rows;++N){for(let R=0;R<y.args.length;++R)ke[R]=te[R](N);let Z=g.func(...ke);ue[N]=Z,le[N]=Z==null?0:1}let w=0;switch(y.ret.physicalType){case"VARCHAR":{let N=new Array(0);w=t._malloc(y.rows*Ta("DOUBLE"));let Z=sn(t,w,y.rows),R=0;for(let v=0;v<y.rows;++v){let _=bu.encode(ue[v]||"");N.push(_),Z[v]=_.length,R+=_.length}let j=t._malloc(R),$=t.HEAPU8.subarray(j,j+R),se=0;for(let v=0;v<y.rows;++v){G[v]=se;let _=N[v];$.subarray(se,se+_.length).set(_),se+=_.length}}}let ie=3*8,V=t._malloc(ie),q=sn(t,V,3);q[0]=B,q[1]=Y,q[2]=w,t.HEAPF64[(e>>3)+0]=0,t.HEAPF64[(e>>3)+1]=V,t.HEAPF64[(e>>3)+2]=0}catch(g){ka(t,e,g.toString())}}function kf(){let r=new TextDecoder;return t=>(typeof SharedArrayBuffer<"u"&&t.buffer instanceof SharedArrayBuffer&&(t=new Uint8Array(t)),r.decode(t))}var Ft=kf();function ve(r,t){console.error(`FAIL WITH: ${t}`),r.ccall("duckdb_web_fail_with",null,["string"],[t])}function It(r,t,e){let n=r.HEAPU8.subarray(t,t+e),s=new Uint8Array(new ArrayBuffer(n.byteLength));return s.set(n),s}function ae(r,t,e){return Ft(r.HEAPU8.subarray(t,t+e))}function pe(r,t,e,n){let s=r.stackSave(),c=r.stackAlloc(3*8);e.unshift("number"),n.unshift(c),r.ccall(t,null,e,n);let f=r.HEAPF64[(c>>3)+0],h=r.HEAPF64[(c>>3)+1],g=r.HEAPF64[(c>>3)+2];return r.stackRestore(s),[f,h,g]}function me(r){r.ccall("duckdb_web_clear_response",null,[],[])}var an=class{constructor(t){let e=new Float64Array(t.buffer,t.byteOffset,t.byteLength/8),n=new Uint8Array(new ArrayBuffer(t.byteLength));n.set(t.subarray(7*8)),this.totalFileReadsCold=e[0],this.totalFileReadsAhead=e[1],this.totalFileReadsCached=e[2],this.totalFileWrites=e[3],this.totalPageAccesses=e[4],this.totalPageLoads=e[5],this.blockSize=e[6],this.blockStats=n}getBlockStats(t,e){return e=e||{file_reads_cold:0,file_reads_ahead:0,file_reads_cached:0,file_writes:0,page_accesses:0,page_loads:0},e.file_writes=this.blockStats[t*3+0]&15,e.file_reads_cold=this.blockStats[t*3+0]>>4,e.file_reads_ahead=this.blockStats[t*3+1]&15,e.file_reads_cached=this.blockStats[t*3+1]>>4,e.page_accesses=this.blockStats[t*3+1]&15,e.page_loads=this.blockStats[t*3+1]>>4,e}};var Af=new TextEncoder;var on=class{constructor(t,e){this._instance=null;this._initPromise=null;this._initPromiseResolver=()=>{};this.onInstantiationProgress=[];this._logger=t,this._runtime=e,this._nextUDFId=1}get logger(){return this._logger}get mod(){return this._instance}get pthread(){return this.mod.PThread||null}async instantiate(t=e=>{}){return this._instance!=null?this:(this._initPromise!=null&&(this.onInstantiationProgress.push(t),await this._initPromise),this._initPromise=new Promise(e=>{this._initPromiseResolver=e}),this.onInstantiationProgress=[t],this._instance=await this.instantiateImpl({print:console.log.bind(console),printErr:console.log.bind(console),onRuntimeInitialized:this._initPromiseResolver}),await this._initPromise,this._initPromise=null,this.onInstantiationProgress=this.onInstantiationProgress.filter(e=>e!=t),this)}open(t){let[e,n,s]=pe(this.mod,"duckdb_web_open",["string"],[JSON.stringify(t)]);if(e!==0)throw new Error(ae(this.mod,n,s));me(this.mod)}reset(){let[t,e,n]=pe(this.mod,"duckdb_web_reset",[],[]);if(t!==0)throw new Error(ae(this.mod,e,n));me(this.mod)}getVersion(){let[t,e,n]=pe(this.mod,"duckdb_web_get_version",[],[]);if(t!==0)throw new Error(ae(this.mod,e,n));let s=ae(this.mod,e,n);return me(this.mod),s}getFeatureFlags(){return this.mod.ccall("duckdb_web_get_feature_flags","number",[],[])}tokenize(t){let[e,n,s]=pe(this.mod,"duckdb_web_tokenize",["string"],[t]);if(e!==0)throw new Error(ae(this.mod,n,s));let c=ae(this.mod,n,s);return me(this.mod),JSON.parse(c)}connect(){let t=this.mod.ccall("duckdb_web_connect","number",[],[]);return new rn(this,t)}disconnect(t){if(this.mod.ccall("duckdb_web_disconnect",null,["number"],[t]),this.pthread)for(let e of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])e.postMessage({cmd:"dropUDFFunctions",connectionId:t})}runQuery(t,e){let[n,s,c]=pe(this.mod,"duckdb_web_query_run",["number","string"],[t,e]);if(n!==0)throw new Error(ae(this.mod,s,c));let f=It(this.mod,s,c);return me(this.mod),f}startPendingQuery(t,e){let[n,s,c]=pe(this.mod,"duckdb_web_pending_query_start",["number","string"],[t,e]);if(n!==0)throw new Error(ae(this.mod,s,c));if(s==0)return null;let f=It(this.mod,s,c);return me(this.mod),f}pollPendingQuery(t){let[e,n,s]=pe(this.mod,"duckdb_web_pending_query_poll",["number"],[t]);if(e!==0)throw new Error(ae(this.mod,n,s));if(n==0)return null;let c=It(this.mod,n,s);return me(this.mod),c}cancelPendingQuery(t){return this.mod.ccall("duckdb_web_pending_query_cancel","boolean",["number"],[t])}fetchQueryResults(t){let[e,n,s]=pe(this.mod,"duckdb_web_query_fetch_results",["number"],[t]);if(e!==0)throw new Error(ae(this.mod,n,s));let c=It(this.mod,n,s);return me(this.mod),c}getTableNames(t,e){let[n,s,c]=pe(this.mod,"duckdb_web_get_tablenames",["number","string"],[t,e]);if(n!==0)throw new Error(ae(this.mod,s,c));let f=ae(this.mod,s,c);return me(this.mod),JSON.parse(f)}createScalarFunction(t,e,n,s){let c={functionId:this._nextUDFId,name:e,returnType:Xt(n)},f={functionId:c.functionId,connectionId:t,name:e,returnType:n,func:s};this._nextUDFId+=1;let[h,g,D]=pe(this.mod,"duckdb_web_udf_scalar_create",["number","string"],[t,JSON.stringify(c)]);if(h!==0)throw new Error(ae(this.mod,g,D));if(me(this.mod),globalThis.DUCKDB_RUNTIME._udfFunctions=(globalThis.DUCKDB_RUNTIME._udfFunctions||new Map).set(f.functionId,f),this.pthread)for(let y of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])y.postMessage({cmd:"registerUDFFunction",udf:f})}createPrepared(t,e){let[n,s,c]=pe(this.mod,"duckdb_web_prepared_create",["number","string"],[t,e]);if(n!==0)throw new Error(ae(this.mod,s,c));return me(this.mod),s}closePrepared(t,e){let[n,s,c]=pe(this.mod,"duckdb_web_prepared_close",["number","number"],[t,e]);if(n!==0)throw new Error(ae(this.mod,s,c));me(this.mod)}runPrepared(t,e,n){let[s,c,f]=pe(this.mod,"duckdb_web_prepared_run",["number","number","string"],[t,e,JSON.stringify(n)]);if(s!==0)throw new Error(ae(this.mod,c,f));let h=It(this.mod,c,f);return me(this.mod),h}sendPrepared(t,e,n){let[s,c,f]=pe(this.mod,"duckdb_web_prepared_send",["number","number","string"],[t,e,JSON.stringify(n)]);if(s!==0)throw new Error(ae(this.mod,c,f));let h=It(this.mod,c,f);return me(this.mod),h}insertArrowFromIPCStream(t,e,n){if(e.length==0)return;let s=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(s,s+e.length).set(e);let f=n?JSON.stringify(n):"",[h,g,D]=pe(this.mod,"duckdb_web_insert_arrow_from_ipc_stream",["number","number","number","string"],[t,s,e.length,f]);if(h!==0)throw new Error(ae(this.mod,g,D))}insertCSVFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let D in n.columns)n.columnsFlat.push(Jr(D,n.columns[D]))}let s={...n};s.columns=s.columnsFlat,delete s.columnsFlat;let c=JSON.stringify(s),[f,h,g]=pe(this.mod,"duckdb_web_insert_csv_from_path",["number","string","string"],[t,e,c]);if(f!==0)throw new Error(ae(this.mod,h,g))}insertJSONFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let D in n.columns)n.columnsFlat.push(Jr(D,n.columns[D]))}let s={...n};s.columns=s.columnsFlat,delete s.columnsFlat;let c=JSON.stringify(s),[f,h,g]=pe(this.mod,"duckdb_web_insert_json_from_path",["number","string","string"],[t,e,c]);if(f!==0)throw new Error(ae(this.mod,h,g))}globFiles(t){let[e,n,s]=pe(this.mod,"duckdb_web_fs_glob_file_infos",["string"],[t]);if(e!==0)throw new Error(ae(this.mod,n,s));let c=ae(this.mod,n,s);me(this.mod);let f=JSON.parse(c);return f??[]}registerFileURL(t,e,n,s=!1){e===void 0&&(e=t);let[c,f,h]=pe(this.mod,"duckdb_web_fs_register_file_url",["string","string"],[t,e,n,s]);if(c!==0)throw new Error(ae(this.mod,f,h));me(this.mod)}registerFileText(t,e){let n=Af.encode(e);this.registerFileBuffer(t,n)}registerFileBuffer(t,e){let n=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(n,n+e.length).set(e);let[c,f,h]=pe(this.mod,"duckdb_web_fs_register_file_buffer",["string","number","number"],[t,n,e.length]);if(c!==0)throw new Error(ae(this.mod,f,h));me(this.mod)}registerFileHandle(t,e,n,s){let[c,f,h]=pe(this.mod,"duckdb_web_fs_register_file_url",["string","string","number","boolean"],[t,t,n,s]);if(c!==0)throw new Error(ae(this.mod,f,h));if(me(this.mod),globalThis.DUCKDB_RUNTIME._files=(globalThis.DUCKDB_RUNTIME._files||new Map).set(t,e),this.pthread){for(let g of this.pthread.runningWorkers)g.postMessage({cmd:"registerFileHandle",fileName:t,fileHandle:e});for(let g of this.pthread.unusedWorkers)g.postMessage({cmd:"dropFileHandle",fileName:t})}}dropFile(t){let[e,n,s]=pe(this.mod,"duckdb_web_fs_drop_file",["string"],[t]);if(e!==0)throw new Error(ae(this.mod,n,s));me(this.mod)}dropFiles(){let[t,e,n]=pe(this.mod,"duckdb_web_fs_drop_files",[],[]);if(t!==0)throw new Error(ae(this.mod,e,n));me(this.mod)}flushFiles(){this.mod.ccall("duckdb_web_flush_files",null,[],[])}copyFileToPath(t,e){let[n,s,c]=pe(this.mod,"duckdb_web_copy_file_to_path",["string","string"],[t,e]);if(n!==0)throw new Error(ae(this.mod,s,c));me(this.mod)}copyFileToBuffer(t){let[e,n,s]=pe(this.mod,"duckdb_web_copy_file_to_buffer",["string"],[t]);if(e!==0)throw new Error(ae(this.mod,n,s));let c=this.mod.HEAPU8.subarray(n,n+s),f=new Uint8Array(c.length);return f.set(c),me(this.mod),f}collectFileStatistics(t,e){let[n,s,c]=pe(this.mod,"duckdb_web_collect_file_stats",["string","boolean"],[t,e]);if(n!==0)throw new Error(ae(this.mod,s,c))}exportFileStatistics(t){let[e,n,s]=pe(this.mod,"duckdb_web_export_file_stats",["string"],[t]);if(e!==0)throw new Error(ae(this.mod,n,s));return new an(this.mod.HEAPU8.subarray(n,n+s))}};var Su=Mt(require("fs")),un=class extends on{constructor(e,n,s,c){super(e,n);this.mainModulePath=s,this.pthreadWorkerPath=c}locateFile(e,n){if(e.endsWith(".wasm"))return this.mainModulePath;if(e.endsWith(".worker.js")){if(!this.pthreadWorkerPath)throw new Error("Missing DuckDB worker path!");return this.pthreadWorkerPath}throw new Error(`WASM instantiation requested unexpected file: prefix=${n} path=${e}`)}instantiateWasm(e,n){globalThis.DUCKDB_RUNTIME={};for(let c of Object.getOwnPropertyNames(this._runtime))c!="constructor"&&(globalThis.DUCKDB_RUNTIME[c]=Object.getOwnPropertyDescriptor(this._runtime,c).value);let s=Su.default.readFileSync(this.mainModulePath);return WebAssembly.instantiate(s,e).then(c=>{n(c.instance,c.module)}),[]}instantiateImpl(e){return(0,vu.default)({...e,instantiateWasm:this.instantiateWasm.bind(this)})}};var cn=class extends un{constructor(t,e,n,s=null){super(t,e,n,s)}instantiateImpl(t){return(0,wu.default)({...t,instantiateWasm:this.instantiateWasm.bind(this),locateFile:this.locateFile.bind(this)})}};var Pe=Mt(require("fs"));var _f=Mt(ff());var ye={_files:new Map,_filesById:new Map,_fileInfoCache:new Map,_udfFunctions:new Map,resolveFileInfo(r,t){try{let e=ye._fileInfoCache.get(t),[n,s,c]=pe(r,"duckdb_web_fs_get_file_info_by_id",["number","number"],[t,(e==null?void 0:e.cacheEpoch)||0]);if(n!==0)return ve(r,ae(r,s,c)),null;if(c===0)return me(r),e;let f=ae(r,s,c);me(r);let h=JSON.parse(f);return h==null?null:(ye._fileInfoCache.set(t,h),h)}catch(e){return console.log(e),ve(r,e.toString()),null}},testPlatformFeature:(r,t)=>{switch(t){case 1:return typeof BigInt64Array<"u";default:return console.warn(`test for unknown feature: ${t}`),!1}},getDefaultDataProtocol(r){return 1},openFile(r,t,e){var n,s;try{ye._fileInfoCache.delete(t);let c=ye.resolveFileInfo(r,t);switch(c==null?void 0:c.dataProtocol){case 1:{let f=(n=ye._files)==null?void 0:n.get(c.dataUrl);f==null&&(f=Pe.default.openSync(c.dataUrl,Pe.default.constants.O_CREAT|Pe.default.constants.O_RDWR,Pe.default.constants.S_IRUSR|Pe.default.constants.S_IWUSR),(s=ye._filesById)==null||s.set(c.fileId,f));let h=Pe.default.fstatSync(f).size,g=r._malloc(2*8);return r.HEAPF64[(g>>3)+0]=+h,r.HEAPF64[(g>>3)+1]=0,g}case 2:case 3:case 4:case 5:ve(r,"Unsupported data protocol")}}catch(c){console.log(c),ve(r,c.toString())}return 0},syncFile:(r,t)=>{},closeFile:(r,t)=>{try{let e=ye._fileInfoCache.get(t);switch(ye._fileInfoCache.delete(t),e==null?void 0:e.dataProtocol){case 1:{let n=ye._filesById.get(t);ye._filesById.delete(t),n!=null&&Pe.default.closeSync(n);break}case 2:case 3:case 4:case 5:break}}catch(e){console.log(e),ve(r,e.toString())}return 0},truncateFile:(r,t,e)=>{try{let n=ye.resolveFileInfo(r,t);switch(n==null?void 0:n.dataProtocol){case 1:{Pe.default.truncateSync(n.dataUrl,e);break}case 2:case 3:case 4:case 5:ve(r,"Unsupported data protocol")}}catch(n){console.log(n),ve(r,n.toString())}return 0},readFile:(r,t,e,n,s)=>{try{let c=ye.resolveFileInfo(r,t);switch(c==null?void 0:c.dataProtocol){case 1:{let f=ye._filesById.get(t);return f==null?(ve(r,`File ${t} is missing a file descriptor`),0):Pe.default.readSync(f,r.HEAPU8,e,n,s)}case 2:case 3:case 4:case 5:ve(r,"Unsupported data protocol")}}catch(c){console.log(c),ve(r,c.toString())}return 0},writeFile:(r,t,e,n,s)=>{try{let c=ye.resolveFileInfo(r,t);switch(c==null?void 0:c.dataProtocol){case 1:{let f=ye._filesById.get(t);if(f==null)return ve(r,`File ${t} is missing a file descriptor`),0;let h=r.HEAPU8.subarray(e,e+n);return Pe.default.writeSync(f,h,0,h.length,s)}case 2:case 3:case 4:case 5:ve(r,"Unsupported data protocol")}}catch(c){console.log(c),ve(r,c.toString())}return 0},getLastFileModificationTime:(r,t)=>{try{let e=ye.resolveFileInfo(r,t);switch(e==null?void 0:e.dataProtocol){case 1:{let n=ye._filesById.get(t);return n==null?(ve(r,`File ${t} is missing a file descriptor`),0):Pe.default.fstatSync(n).mtime.getTime()}case 2:case 3:case 4:case 5:ve(r,"Unsupported data protocol")}}catch(e){console.log(e),ve(r,e.toString())}return 0},checkDirectory:(r,t,e)=>{try{let n=Ft(r.HEAPU8.subarray(t,t+e));return Pe.default.existsSync(n)}catch(n){return console.log(n),ve(r,n.toString()),!1}},createDirectory:(r,t,e)=>{try{let n=Ft(r.HEAPU8.subarray(t,t+e));return Pe.default.mkdirSync(n)}catch(n){return console.log(n),ve(r,n.toString()),0}},removeDirectory:(r,t,e)=>{try{let n=Ft(r.HEAPU8.subarray(t,t+e));return Pe.default.rmdirSync(n)}catch(n){return console.log(n),ve(r,n.toString()),0}},listDirectoryEntries:(r,t,e)=>(ve(r,"Not Implemented"),!1),glob:(r,t,e)=>{try{let n=ae(r,t,e),s=_f.sync([n],{dot:!0});for(let c of s)r.ccall("duckdb_web_fs_glob_add_path",null,["string"],[c])}catch(n){return console.log(n),ve(r,n.toString()),0}},moveFile:(r,t,e,n,s)=>{var g,D;let c=ae(r,t,e),f=ae(r,n,s),h=(g=ye._files)==null?void 0:g.get(c);h!==void 0&&(ye._files.delete(h),ye._files.set(f,h));for(let[y,P]of((D=ye._fileInfoCache)==null?void 0:D.entries())||[])if(P.dataUrl==c){ye._fileInfoCache.delete(y);break}return!0},checkFile:(r,t,e)=>{try{let n=Ft(r.HEAPU8.subarray(t,t+e));return Pe.default.existsSync(n)}catch(n){return console.log(n),ve(r,n.toString()),!1}},removeFile:(r,t,e)=>{try{let n=Ft(r.HEAPU8.subarray(t,t+e));return Pe.default.rmSync(n)}catch(n){return console.log(n),ve(r,n.toString()),0}},callScalarUDF:(r,t,e,n,s,c,f)=>{yu(ye,r,t,e,n,s,c,f)}};var cu=class extends Zr{postMessage(t,e){globalThis.postMessage(t,e)}async instantiate(t,e,n){return await new cn(this,ye,t,e).instantiate(n)}};function df(){let r=new cu;globalThis.onmessage=async t=>{await r.onMessage(t.data)}}df();0&&(module.exports={registerWorker});
/*! Bundled license information:

is-extglob/index.js:
  (*!
   * is-extglob <https://github.com/jonschlinkert/is-extglob>
   *
   * Copyright (c) 2014-2016, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

is-glob/index.js:
  (*!
   * is-glob <https://github.com/jonschlinkert/is-glob>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

is-number/index.js:
  (*!
   * is-number <https://github.com/jonschlinkert/is-number>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Released under the MIT License.
   *)

to-regex-range/index.js:
  (*!
   * to-regex-range <https://github.com/micromatch/to-regex-range>
   *
   * Copyright (c) 2015-present, Jon Schlinkert.
   * Released under the MIT License.
   *)

fill-range/index.js:
  (*!
   * fill-range <https://github.com/jonschlinkert/fill-range>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

queue-microtask/index.js:
  (*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

run-parallel/index.js:
  (*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
*/
//# sourceMappingURL=data:application/json;base64,
