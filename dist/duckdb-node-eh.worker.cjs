"use strict";var Ef=Object.create;var Tn=Object.defineProperty;var Cf=Object.getOwnPropertyDescriptor;var Tf=Object.getOwnPropertyNames;var kf=Object.getPrototypeOf,Rf=Object.prototype.hasOwnProperty;var Y=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),Af=(r,t)=>{for(var e in t)Tn(r,e,{get:t[e],enumerable:!0})},Il=(r,t,e,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of Tf(t))!Rf.call(r,s)&&s!==e&&Tn(r,s,{get:()=>t[s],enumerable:!(n=Cf(t,s))||n.enumerable});return r};var Gt=(r,t,e)=>(e=r!=null?Ef(kf(r)):{},Il(t||!r||!r.__esModule?Tn(e,"default",{value:r,enumerable:!0}):e,r)),jf=r=>Il(Tn({},"__esModule",{value:!0}),r);var Bl=Y(cr=>{"use strict";Object.defineProperty(cr,"__esModule",{value:!0});cr.splitWhen=cr.flatten=void 0;function Pf(r){return r.reduce((t,e)=>[].concat(t,e),[])}cr.flatten=Pf;function Of(r,t){let e=[[]],n=0;for(let s of r)t(s)?(n++,e[n]=[]):e[n].push(s);return e}cr.splitWhen=Of});var Hl=Y(xn=>{"use strict";Object.defineProperty(xn,"__esModule",{value:!0});xn.isEnoentCodeError=void 0;function xf(r){return r.code==="ENOENT"}xn.isEnoentCodeError=xf});var Wl=Y(Un=>{"use strict";Object.defineProperty(Un,"__esModule",{value:!0});Un.createDirentFromStats=void 0;var ks=class{constructor(t,e){this.name=t,this.isBlockDevice=e.isBlockDevice.bind(e),this.isCharacterDevice=e.isCharacterDevice.bind(e),this.isDirectory=e.isDirectory.bind(e),this.isFIFO=e.isFIFO.bind(e),this.isFile=e.isFile.bind(e),this.isSocket=e.isSocket.bind(e),this.isSymbolicLink=e.isSymbolicLink.bind(e)}};function Uf(r,t){return new ks(r,t)}Un.createDirentFromStats=Uf});var Yl=Y(dt=>{"use strict";Object.defineProperty(dt,"__esModule",{value:!0});dt.removeLeadingDotSegment=dt.escape=dt.makeAbsolute=dt.unixify=void 0;var Nf=require("path"),Bf=2,Hf=/(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;function Wf(r){return r.replace(/\\/g,"/")}dt.unixify=Wf;function Yf(r,t){return Nf.resolve(r,t)}dt.makeAbsolute=Yf;function Gf(r){return r.replace(Hf,"\\$2")}dt.escape=Gf;function $f(r){if(r.charAt(0)==="."){let t=r.charAt(1);if(t==="/"||t==="\\")return r.slice(Bf)}return r}dt.removeLeadingDotSegment=$f});var $l=Y((ug,Gl)=>{Gl.exports=function(t){if(typeof t!="string"||t==="")return!1;for(var e;e=/(\\).|([@?!+*]\(.*\))/g.exec(t);){if(e[2])return!0;t=t.slice(e.index+e[0].length)}return!1}});var Vl=Y((cg,zl)=>{var qf=$l(),ql={"{":"}","(":")","[":"]"},zf=function(r){if(r[0]==="!")return!0;for(var t=0,e=-2,n=-2,s=-2,u=-2,d=-2;t<r.length;){if(r[t]==="*"||r[t+1]==="?"&&/[\].+)]/.test(r[t])||n!==-1&&r[t]==="["&&r[t+1]!=="]"&&(n<t&&(n=r.indexOf("]",t)),n>t&&(d===-1||d>n||(d=r.indexOf("\\",t),d===-1||d>n)))||s!==-1&&r[t]==="{"&&r[t+1]!=="}"&&(s=r.indexOf("}",t),s>t&&(d=r.indexOf("\\",t),d===-1||d>s))||u!==-1&&r[t]==="("&&r[t+1]==="?"&&/[:!=]/.test(r[t+2])&&r[t+3]!==")"&&(u=r.indexOf(")",t),u>t&&(d=r.indexOf("\\",t),d===-1||d>u))||e!==-1&&r[t]==="("&&r[t+1]!=="|"&&(e<t&&(e=r.indexOf("|",t)),e!==-1&&r[e+1]!==")"&&(u=r.indexOf(")",e),u>e&&(d=r.indexOf("\\",e),d===-1||d>u))))return!0;if(r[t]==="\\"){var h=r[t+1];t+=2;var g=ql[h];if(g){var M=r.indexOf(g,t);M!==-1&&(t=M+1)}if(r[t]==="!")return!0}else t++}return!1},Vf=function(r){if(r[0]==="!")return!0;for(var t=0;t<r.length;){if(/[*?{}()[\]]/.test(r[t]))return!0;if(r[t]==="\\"){var e=r[t+1];t+=2;var n=ql[e];if(n){var s=r.indexOf(n,t);s!==-1&&(t=s+1)}if(r[t]==="!")return!0}else t++}return!1};zl.exports=function(t,e){if(typeof t!="string"||t==="")return!1;if(qf(t))return!0;var n=zf;return e&&e.strict===!1&&(n=Vf),n(t)}});var Xl=Y((_g,Kl)=>{"use strict";var Kf=Vl(),Xf=require("path").posix.dirname,Qf=require("os").platform()==="win32",Rs="/",Jf=/\\/g,Zf=/[\{\[].*[\}\]]$/,ep=/(^|[^\\])([\{\[]|\([^\)]+$)/,tp=/\\([\!\*\?\|\[\]\(\)\{\}])/g;Kl.exports=function(t,e){var n=Object.assign({flipBackslashes:!0},e);n.flipBackslashes&&Qf&&t.indexOf(Rs)<0&&(t=t.replace(Jf,Rs)),Zf.test(t)&&(t+=Rs),t+="a";do t=Xf(t);while(Kf(t)||ep.test(t));return t.replace(tp,"$1")}});var Nn=Y(at=>{"use strict";at.isInteger=r=>typeof r=="number"?Number.isInteger(r):typeof r=="string"&&r.trim()!==""?Number.isInteger(Number(r)):!1;at.find=(r,t)=>r.nodes.find(e=>e.type===t);at.exceedsLimit=(r,t,e=1,n)=>n===!1||!at.isInteger(r)||!at.isInteger(t)?!1:(Number(t)-Number(r))/Number(e)>=n;at.escapeNode=(r,t=0,e)=>{let n=r.nodes[t];!n||(e&&n.type===e||n.type==="open"||n.type==="close")&&n.escaped!==!0&&(n.value="\\"+n.value,n.escaped=!0)};at.encloseBrace=r=>r.type!=="brace"?!1:r.commas>>0+r.ranges>>0===0?(r.invalid=!0,!0):!1;at.isInvalidBrace=r=>r.type!=="brace"?!1:r.invalid===!0||r.dollar?!0:r.commas>>0+r.ranges>>0===0||r.open!==!0||r.close!==!0?(r.invalid=!0,!0):!1;at.isOpenOrClose=r=>r.type==="open"||r.type==="close"?!0:r.open===!0||r.close===!0;at.reduce=r=>r.reduce((t,e)=>(e.type==="text"&&t.push(e.value),e.type==="range"&&(e.type="text"),t),[]);at.flatten=(...r)=>{let t=[],e=n=>{for(let s=0;s<n.length;s++){let u=n[s];Array.isArray(u)?e(u,t):u!==void 0&&t.push(u)}return t};return e(r),t}});var Bn=Y((fg,Jl)=>{"use strict";var Ql=Nn();Jl.exports=(r,t={})=>{let e=(n,s={})=>{let u=t.escapeInvalid&&Ql.isInvalidBrace(s),d=n.invalid===!0&&t.escapeInvalid===!0,h="";if(n.value)return(u||d)&&Ql.isOpenOrClose(n)?"\\"+n.value:n.value;if(n.value)return n.value;if(n.nodes)for(let g of n.nodes)h+=e(g);return h};return e(r)}});var eu=Y((pg,Zl)=>{"use strict";Zl.exports=function(r){return typeof r=="number"?r-r===0:typeof r=="string"&&r.trim()!==""?Number.isFinite?Number.isFinite(+r):isFinite(+r):!1}});var uu=Y((hg,lu)=>{"use strict";var tu=eu(),zt=(r,t,e)=>{if(tu(r)===!1)throw new TypeError("toRegexRange: expected the first argument to be a number");if(t===void 0||r===t)return String(r);if(tu(t)===!1)throw new TypeError("toRegexRange: expected the second argument to be a number.");let n={relaxZeros:!0,...e};typeof n.strictZeros=="boolean"&&(n.relaxZeros=n.strictZeros===!1);let s=String(n.relaxZeros),u=String(n.shorthand),d=String(n.capture),h=String(n.wrap),g=r+":"+t+"="+s+u+d+h;if(zt.cache.hasOwnProperty(g))return zt.cache[g].result;let M=Math.min(r,t),y=Math.max(r,t);if(Math.abs(M-y)===1){let W=r+"|"+t;return n.capture?`(${W})`:n.wrap===!1?W:`(?:${W})`}let L=ou(r)||ou(t),A={min:r,max:t,a:M,b:y},z=[],H=[];if(L&&(A.isPadded=L,A.maxLen=String(A.max).length),M<0){let W=y<0?Math.abs(y):1;H=ru(W,Math.abs(M),A,n),M=A.a=0}return y>=0&&(z=ru(M,y,A,n)),A.negatives=H,A.positives=z,A.result=rp(H,z,n),n.capture===!0?A.result=`(${A.result})`:n.wrap!==!1&&z.length+H.length>1&&(A.result=`(?:${A.result})`),zt.cache[g]=A,A.result};function rp(r,t,e){let n=As(r,t,"-",!1,e)||[],s=As(t,r,"",!1,e)||[],u=As(r,t,"-?",!0,e)||[];return n.concat(u).concat(s).join("|")}function np(r,t){let e=1,n=1,s=iu(r,e),u=new Set([t]);for(;r<=s&&s<=t;)u.add(s),e+=1,s=iu(r,e);for(s=au(t+1,n)-1;r<s&&s<=t;)u.add(s),n+=1,s=au(t+1,n)-1;return u=[...u],u.sort(sp),u}function ip(r,t,e){if(r===t)return{pattern:r,count:[],digits:0};let n=ap(r,t),s=n.length,u="",d=0;for(let h=0;h<s;h++){let[g,M]=n[h];g===M?u+=g:g!=="0"||M!=="9"?u+=op(g,M,e):d++}return d&&(u+=e.shorthand===!0?"\\d":"[0-9]"),{pattern:u,count:[d],digits:s}}function ru(r,t,e,n){let s=np(r,t),u=[],d=r,h;for(let g=0;g<s.length;g++){let M=s[g],y=ip(String(d),String(M),n),L="";if(!e.isPadded&&h&&h.pattern===y.pattern){h.count.length>1&&h.count.pop(),h.count.push(y.count[0]),h.string=h.pattern+su(h.count),d=M+1;continue}e.isPadded&&(L=lp(M,e,n)),y.string=L+y.pattern+su(y.count),u.push(y),d=M+1,h=y}return u}function As(r,t,e,n,s){let u=[];for(let d of r){let{string:h}=d;!n&&!nu(t,"string",h)&&u.push(e+h),n&&nu(t,"string",h)&&u.push(e+h)}return u}function ap(r,t){let e=[];for(let n=0;n<r.length;n++)e.push([r[n],t[n]]);return e}function sp(r,t){return r>t?1:t>r?-1:0}function nu(r,t,e){return r.some(n=>n[t]===e)}function iu(r,t){return Number(String(r).slice(0,-t)+"9".repeat(t))}function au(r,t){return r-r%Math.pow(10,t)}function su(r){let[t=0,e=""]=r;return e||t>1?`{${t+(e?","+e:"")}}`:""}function op(r,t,e){return`[${r}${t-r===1?"":"-"}${t}]`}function ou(r){return/^-?(0+)\d/.test(r)}function lp(r,t,e){if(!t.isPadded)return r;let n=Math.abs(t.maxLen-String(r).length),s=e.relaxZeros!==!1;switch(n){case 0:return"";case 1:return s?"0?":"0";case 2:return s?"0{0,2}":"00";default:return s?`0{0,${n}}`:`0{${n}}`}}zt.cache={};zt.clearCache=()=>zt.cache={};lu.exports=zt});var Ds=Y((bg,mu)=>{"use strict";var up=require("util"),du=uu(),cu=r=>r!==null&&typeof r=="object"&&!Array.isArray(r),cp=r=>t=>r===!0?Number(t):String(t),js=r=>typeof r=="number"||typeof r=="string"&&r!=="",Yr=r=>Number.isInteger(+r),Ms=r=>{let t=`${r}`,e=-1;if(t[0]==="-"&&(t=t.slice(1)),t==="0")return!1;for(;t[++e]==="0";);return e>0},_p=(r,t,e)=>typeof r=="string"||typeof t=="string"?!0:e.stringify===!0,dp=(r,t,e)=>{if(t>0){let n=r[0]==="-"?"-":"";n&&(r=r.slice(1)),r=n+r.padStart(n?t-1:t,"0")}return e===!1?String(r):r},_u=(r,t)=>{let e=r[0]==="-"?"-":"";for(e&&(r=r.slice(1),t--);r.length<t;)r="0"+r;return e?"-"+r:r},fp=(r,t)=>{r.negatives.sort((d,h)=>d<h?-1:d>h?1:0),r.positives.sort((d,h)=>d<h?-1:d>h?1:0);let e=t.capture?"":"?:",n="",s="",u;return r.positives.length&&(n=r.positives.join("|")),r.negatives.length&&(s=`-(${e}${r.negatives.join("|")})`),n&&s?u=`${n}|${s}`:u=n||s,t.wrap?`(${e}${u})`:u},fu=(r,t,e,n)=>{if(e)return du(r,t,{wrap:!1,...n});let s=String.fromCharCode(r);if(r===t)return s;let u=String.fromCharCode(t);return`[${s}-${u}]`},pu=(r,t,e)=>{if(Array.isArray(r)){let n=e.wrap===!0,s=e.capture?"":"?:";return n?`(${s}${r.join("|")})`:r.join("|")}return du(r,t,e)},hu=(...r)=>new RangeError("Invalid range arguments: "+up.inspect(...r)),bu=(r,t,e)=>{if(e.strictRanges===!0)throw hu([r,t]);return[]},pp=(r,t)=>{if(t.strictRanges===!0)throw new TypeError(`Expected step "${r}" to be a number`);return[]},hp=(r,t,e=1,n={})=>{let s=Number(r),u=Number(t);if(!Number.isInteger(s)||!Number.isInteger(u)){if(n.strictRanges===!0)throw hu([r,t]);return[]}s===0&&(s=0),u===0&&(u=0);let d=s>u,h=String(r),g=String(t),M=String(e);e=Math.max(Math.abs(e),1);let y=Ms(h)||Ms(g)||Ms(M),L=y?Math.max(h.length,g.length,M.length):0,A=y===!1&&_p(r,t,n)===!1,z=n.transform||cp(A);if(n.toRegex&&e===1)return fu(_u(r,L),_u(t,L),!0,n);let H={negatives:[],positives:[]},W=he=>H[he<0?"negatives":"positives"].push(Math.abs(he)),J=[],X=0;for(;d?s>=u:s<=u;)n.toRegex===!0&&e>1?W(s):J.push(dp(z(s,X),L,A)),s=d?s-e:s+e,X++;return n.toRegex===!0?e>1?fp(H,n):pu(J,null,{wrap:!1,...n}):J},bp=(r,t,e=1,n={})=>{if(!Yr(r)&&r.length>1||!Yr(t)&&t.length>1)return bu(r,t,n);let s=n.transform||(A=>String.fromCharCode(A)),u=`${r}`.charCodeAt(0),d=`${t}`.charCodeAt(0),h=u>d,g=Math.min(u,d),M=Math.max(u,d);if(n.toRegex&&e===1)return fu(g,M,!1,n);let y=[],L=0;for(;h?u>=d:u<=d;)y.push(s(u,L)),u=h?u-e:u+e,L++;return n.toRegex===!0?pu(y,null,{wrap:!1,options:n}):y},Hn=(r,t,e,n={})=>{if(t==null&&js(r))return[r];if(!js(r)||!js(t))return bu(r,t,n);if(typeof e=="function")return Hn(r,t,1,{transform:e});if(cu(e))return Hn(r,t,0,e);let s={...n};return s.capture===!0&&(s.wrap=!0),e=e||s.step||1,Yr(e)?Yr(r)&&Yr(t)?hp(r,t,e,s):bp(r,t,Math.max(Math.abs(e),1),s):e!=null&&!cu(e)?pp(e,s):Hn(r,t,1,e)};mu.exports=Hn});var vu=Y((mg,yu)=>{"use strict";var mp=Ds(),gu=Nn(),gp=(r,t={})=>{let e=(n,s={})=>{let u=gu.isInvalidBrace(s),d=n.invalid===!0&&t.escapeInvalid===!0,h=u===!0||d===!0,g=t.escapeInvalid===!0?"\\":"",M="";if(n.isOpen===!0||n.isClose===!0)return g+n.value;if(n.type==="open")return h?g+n.value:"(";if(n.type==="close")return h?g+n.value:")";if(n.type==="comma")return n.prev.type==="comma"?"":h?n.value:"|";if(n.value)return n.value;if(n.nodes&&n.ranges>0){let y=gu.reduce(n.nodes),L=mp(...y,{...t,wrap:!1,toRegex:!0});if(L.length!==0)return y.length>1&&L.length>1?`(${L})`:L}if(n.nodes)for(let y of n.nodes)M+=e(y,n);return M};return e(r)};yu.exports=gp});var Eu=Y((gg,wu)=>{"use strict";var yp=Ds(),Su=Bn(),_r=Nn(),Vt=(r="",t="",e=!1)=>{let n=[];if(r=[].concat(r),t=[].concat(t),!t.length)return r;if(!r.length)return e?_r.flatten(t).map(s=>`{${s}}`):t;for(let s of r)if(Array.isArray(s))for(let u of s)n.push(Vt(u,t,e));else for(let u of t)e===!0&&typeof u=="string"&&(u=`{${u}}`),n.push(Array.isArray(u)?Vt(s,u,e):s+u);return _r.flatten(n)},vp=(r,t={})=>{let e=t.rangeLimit===void 0?1e3:t.rangeLimit,n=(s,u={})=>{s.queue=[];let d=u,h=u.queue;for(;d.type!=="brace"&&d.type!=="root"&&d.parent;)d=d.parent,h=d.queue;if(s.invalid||s.dollar){h.push(Vt(h.pop(),Su(s,t)));return}if(s.type==="brace"&&s.invalid!==!0&&s.nodes.length===2){h.push(Vt(h.pop(),["{}"]));return}if(s.nodes&&s.ranges>0){let L=_r.reduce(s.nodes);if(_r.exceedsLimit(...L,t.step,e))throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");let A=yp(...L,t);A.length===0&&(A=Su(s,t)),h.push(Vt(h.pop(),A)),s.nodes=[];return}let g=_r.encloseBrace(s),M=s.queue,y=s;for(;y.type!=="brace"&&y.type!=="root"&&y.parent;)y=y.parent,M=y.queue;for(let L=0;L<s.nodes.length;L++){let A=s.nodes[L];if(A.type==="comma"&&s.type==="brace"){L===1&&M.push(""),M.push("");continue}if(A.type==="close"){h.push(Vt(h.pop(),M,g));continue}if(A.value&&A.type!=="open"){M.push(Vt(M.pop(),A.value));continue}A.nodes&&n(A,s)}return M};return _r.flatten(n(r))};wu.exports=vp});var Tu=Y((yg,Cu)=>{"use strict";Cu.exports={MAX_LENGTH:1024*64,CHAR_0:"0",CHAR_9:"9",CHAR_UPPERCASE_A:"A",CHAR_LOWERCASE_A:"a",CHAR_UPPERCASE_Z:"Z",CHAR_LOWERCASE_Z:"z",CHAR_LEFT_PARENTHESES:"(",CHAR_RIGHT_PARENTHESES:")",CHAR_ASTERISK:"*",CHAR_AMPERSAND:"&",CHAR_AT:"@",CHAR_BACKSLASH:"\\",CHAR_BACKTICK:"`",CHAR_CARRIAGE_RETURN:"\r",CHAR_CIRCUMFLEX_ACCENT:"^",CHAR_COLON:":",CHAR_COMMA:",",CHAR_DOLLAR:"$",CHAR_DOT:".",CHAR_DOUBLE_QUOTE:'"',CHAR_EQUAL:"=",CHAR_EXCLAMATION_MARK:"!",CHAR_FORM_FEED:"\f",CHAR_FORWARD_SLASH:"/",CHAR_HASH:"#",CHAR_HYPHEN_MINUS:"-",CHAR_LEFT_ANGLE_BRACKET:"<",CHAR_LEFT_CURLY_BRACE:"{",CHAR_LEFT_SQUARE_BRACKET:"[",CHAR_LINE_FEED:`
`,CHAR_NO_BREAK_SPACE:"\xA0",CHAR_PERCENT:"%",CHAR_PLUS:"+",CHAR_QUESTION_MARK:"?",CHAR_RIGHT_ANGLE_BRACKET:">",CHAR_RIGHT_CURLY_BRACE:"}",CHAR_RIGHT_SQUARE_BRACKET:"]",CHAR_SEMICOLON:";",CHAR_SINGLE_QUOTE:"'",CHAR_SPACE:" ",CHAR_TAB:"	",CHAR_UNDERSCORE:"_",CHAR_VERTICAL_LINE:"|",CHAR_ZERO_WIDTH_NOBREAK_SPACE:"\uFEFF"}});var Mu=Y((vg,ju)=>{"use strict";var Sp=Bn(),{MAX_LENGTH:ku,CHAR_BACKSLASH:Is,CHAR_BACKTICK:wp,CHAR_COMMA:Ep,CHAR_DOT:Cp,CHAR_LEFT_PARENTHESES:Tp,CHAR_RIGHT_PARENTHESES:kp,CHAR_LEFT_CURLY_BRACE:Rp,CHAR_RIGHT_CURLY_BRACE:Ap,CHAR_LEFT_SQUARE_BRACKET:Ru,CHAR_RIGHT_SQUARE_BRACKET:Au,CHAR_DOUBLE_QUOTE:jp,CHAR_SINGLE_QUOTE:Mp,CHAR_NO_BREAK_SPACE:Dp,CHAR_ZERO_WIDTH_NOBREAK_SPACE:Ip}=Tu(),Fp=(r,t={})=>{if(typeof r!="string")throw new TypeError("Expected a string");let e=t||{},n=typeof e.maxLength=="number"?Math.min(ku,e.maxLength):ku;if(r.length>n)throw new SyntaxError(`Input length (${r.length}), exceeds max characters (${n})`);let s={type:"root",input:r,nodes:[]},u=[s],d=s,h=s,g=0,M=r.length,y=0,L=0,A,z={},H=()=>r[y++],W=J=>{if(J.type==="text"&&h.type==="dot"&&(h.type="text"),h&&h.type==="text"&&J.type==="text"){h.value+=J.value;return}return d.nodes.push(J),J.parent=d,J.prev=h,h=J,J};for(W({type:"bos"});y<M;)if(d=u[u.length-1],A=H(),!(A===Ip||A===Dp)){if(A===Is){W({type:"text",value:(t.keepEscaping?A:"")+H()});continue}if(A===Au){W({type:"text",value:"\\"+A});continue}if(A===Ru){g++;let J=!0,X;for(;y<M&&(X=H());){if(A+=X,X===Ru){g++;continue}if(X===Is){A+=H();continue}if(X===Au&&(g--,g===0))break}W({type:"text",value:A});continue}if(A===Tp){d=W({type:"paren",nodes:[]}),u.push(d),W({type:"text",value:A});continue}if(A===kp){if(d.type!=="paren"){W({type:"text",value:A});continue}d=u.pop(),W({type:"text",value:A}),d=u[u.length-1];continue}if(A===jp||A===Mp||A===wp){let J=A,X;for(t.keepQuotes!==!0&&(A="");y<M&&(X=H());){if(X===Is){A+=X+H();continue}if(X===J){t.keepQuotes===!0&&(A+=X);break}A+=X}W({type:"text",value:A});continue}if(A===Rp){L++;let X={type:"brace",open:!0,close:!1,dollar:h.value&&h.value.slice(-1)==="$"||d.dollar===!0,depth:L,commas:0,ranges:0,nodes:[]};d=W(X),u.push(d),W({type:"open",value:A});continue}if(A===Ap){if(d.type!=="brace"){W({type:"text",value:A});continue}let J="close";d=u.pop(),d.close=!0,W({type:J,value:A}),L--,d=u[u.length-1];continue}if(A===Ep&&L>0){if(d.ranges>0){d.ranges=0;let J=d.nodes.shift();d.nodes=[J,{type:"text",value:Sp(d)}]}W({type:"comma",value:A}),d.commas++;continue}if(A===Cp&&L>0&&d.commas===0){let J=d.nodes;if(L===0||J.length===0){W({type:"text",value:A});continue}if(h.type==="dot"){if(d.range=[],h.value+=A,h.type="range",d.nodes.length!==3&&d.nodes.length!==5){d.invalid=!0,d.ranges=0,h.type="text";continue}d.ranges++,d.args=[];continue}if(h.type==="range"){J.pop();let X=J[J.length-1];X.value+=h.value+A,h=X,d.ranges--;continue}W({type:"dot",value:A});continue}W({type:"text",value:A})}do if(d=u.pop(),d.type!=="root"){d.nodes.forEach(he=>{he.nodes||(he.type==="open"&&(he.isOpen=!0),he.type==="close"&&(he.isClose=!0),he.nodes||(he.type="text"),he.invalid=!0)});let J=u[u.length-1],X=J.nodes.indexOf(d);J.nodes.splice(X,1,...d.nodes)}while(u.length>0);return W({type:"eos"}),s};ju.exports=Fp});var Fu=Y((Sg,Iu)=>{"use strict";var Du=Bn(),Lp=vu(),Pp=Eu(),Op=Mu(),tt=(r,t={})=>{let e=[];if(Array.isArray(r))for(let n of r){let s=tt.create(n,t);Array.isArray(s)?e.push(...s):e.push(s)}else e=[].concat(tt.create(r,t));return t&&t.expand===!0&&t.nodupes===!0&&(e=[...new Set(e)]),e};tt.parse=(r,t={})=>Op(r,t);tt.stringify=(r,t={})=>Du(typeof r=="string"?tt.parse(r,t):r,t);tt.compile=(r,t={})=>(typeof r=="string"&&(r=tt.parse(r,t)),Lp(r,t));tt.expand=(r,t={})=>{typeof r=="string"&&(r=tt.parse(r,t));let e=Pp(r,t);return t.noempty===!0&&(e=e.filter(Boolean)),t.nodupes===!0&&(e=[...new Set(e)]),e};tt.create=(r,t={})=>r===""||r.length<3?[r]:t.expand!==!0?tt.compile(r,t):tt.expand(r,t);Iu.exports=tt});var Gr=Y((wg,Uu)=>{"use strict";var xp=require("path"),ft="\\\\/",Lu=`[^${ft}]`,Et="\\.",Up="\\+",Np="\\?",Wn="\\/",Bp="(?=.)",Pu="[^/]",Fs=`(?:${Wn}|$)`,Ou=`(?:^|${Wn})`,Ls=`${Et}{1,2}${Fs}`,Hp=`(?!${Et})`,Wp=`(?!${Ou}${Ls})`,Yp=`(?!${Et}{0,1}${Fs})`,Gp=`(?!${Ls})`,$p=`[^.${Wn}]`,qp=`${Pu}*?`,xu={DOT_LITERAL:Et,PLUS_LITERAL:Up,QMARK_LITERAL:Np,SLASH_LITERAL:Wn,ONE_CHAR:Bp,QMARK:Pu,END_ANCHOR:Fs,DOTS_SLASH:Ls,NO_DOT:Hp,NO_DOTS:Wp,NO_DOT_SLASH:Yp,NO_DOTS_SLASH:Gp,QMARK_NO_DOT:$p,STAR:qp,START_ANCHOR:Ou},zp={...xu,SLASH_LITERAL:`[${ft}]`,QMARK:Lu,STAR:`${Lu}*?`,DOTS_SLASH:`${Et}{1,2}(?:[${ft}]|$)`,NO_DOT:`(?!${Et})`,NO_DOTS:`(?!(?:^|[${ft}])${Et}{1,2}(?:[${ft}]|$))`,NO_DOT_SLASH:`(?!${Et}{0,1}(?:[${ft}]|$))`,NO_DOTS_SLASH:`(?!${Et}{1,2}(?:[${ft}]|$))`,QMARK_NO_DOT:`[^.${ft}]`,START_ANCHOR:`(?:^|[${ft}])`,END_ANCHOR:`(?:[${ft}]|$)`},Vp={alnum:"a-zA-Z0-9",alpha:"a-zA-Z",ascii:"\\x00-\\x7F",blank:" \\t",cntrl:"\\x00-\\x1F\\x7F",digit:"0-9",graph:"\\x21-\\x7E",lower:"a-z",print:"\\x20-\\x7E ",punct:"\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",space:" \\t\\r\\n\\v\\f",upper:"A-Z",word:"A-Za-z0-9_",xdigit:"A-Fa-f0-9"};Uu.exports={MAX_LENGTH:1024*64,POSIX_REGEX_SOURCE:Vp,REGEX_BACKSLASH:/\\(?![*+?^${}(|)[\]])/g,REGEX_NON_SPECIAL_CHARS:/^[^@![\].,$*+?^{}()|\\/]+/,REGEX_SPECIAL_CHARS:/[-*+?.^${}(|)[\]]/,REGEX_SPECIAL_CHARS_BACKREF:/(\\?)((\W)(\3*))/g,REGEX_SPECIAL_CHARS_GLOBAL:/([-*+?.^${}(|)[\]])/g,REGEX_REMOVE_BACKSLASH:/(?:\[.*?[^\\]\]|\\(?=.))/g,REPLACEMENTS:{"***":"*","**/**":"**","**/**/**":"**"},CHAR_0:48,CHAR_9:57,CHAR_UPPERCASE_A:65,CHAR_LOWERCASE_A:97,CHAR_UPPERCASE_Z:90,CHAR_LOWERCASE_Z:122,CHAR_LEFT_PARENTHESES:40,CHAR_RIGHT_PARENTHESES:41,CHAR_ASTERISK:42,CHAR_AMPERSAND:38,CHAR_AT:64,CHAR_BACKWARD_SLASH:92,CHAR_CARRIAGE_RETURN:13,CHAR_CIRCUMFLEX_ACCENT:94,CHAR_COLON:58,CHAR_COMMA:44,CHAR_DOT:46,CHAR_DOUBLE_QUOTE:34,CHAR_EQUAL:61,CHAR_EXCLAMATION_MARK:33,CHAR_FORM_FEED:12,CHAR_FORWARD_SLASH:47,CHAR_GRAVE_ACCENT:96,CHAR_HASH:35,CHAR_HYPHEN_MINUS:45,CHAR_LEFT_ANGLE_BRACKET:60,CHAR_LEFT_CURLY_BRACE:123,CHAR_LEFT_SQUARE_BRACKET:91,CHAR_LINE_FEED:10,CHAR_NO_BREAK_SPACE:160,CHAR_PERCENT:37,CHAR_PLUS:43,CHAR_QUESTION_MARK:63,CHAR_RIGHT_ANGLE_BRACKET:62,CHAR_RIGHT_CURLY_BRACE:125,CHAR_RIGHT_SQUARE_BRACKET:93,CHAR_SEMICOLON:59,CHAR_SINGLE_QUOTE:39,CHAR_SPACE:32,CHAR_TAB:9,CHAR_UNDERSCORE:95,CHAR_VERTICAL_LINE:124,CHAR_ZERO_WIDTH_NOBREAK_SPACE:65279,SEP:xp.sep,extglobChars(r){return{"!":{type:"negate",open:"(?:(?!(?:",close:`))${r.STAR})`},"?":{type:"qmark",open:"(?:",close:")?"},"+":{type:"plus",open:"(?:",close:")+"},"*":{type:"star",open:"(?:",close:")*"},"@":{type:"at",open:"(?:",close:")"}}},globChars(r){return r===!0?zp:xu}}});var $r=Y(Qe=>{"use strict";var Kp=require("path"),Xp=process.platform==="win32",{REGEX_BACKSLASH:Qp,REGEX_REMOVE_BACKSLASH:Jp,REGEX_SPECIAL_CHARS:Zp,REGEX_SPECIAL_CHARS_GLOBAL:eh}=Gr();Qe.isObject=r=>r!==null&&typeof r=="object"&&!Array.isArray(r);Qe.hasRegexChars=r=>Zp.test(r);Qe.isRegexChar=r=>r.length===1&&Qe.hasRegexChars(r);Qe.escapeRegex=r=>r.replace(eh,"\\$1");Qe.toPosixSlashes=r=>r.replace(Qp,"/");Qe.removeBackslashes=r=>r.replace(Jp,t=>t==="\\"?"":t);Qe.supportsLookbehinds=()=>{let r=process.version.slice(1).split(".").map(Number);return r.length===3&&r[0]>=9||r[0]===8&&r[1]>=10};Qe.isWindows=r=>r&&typeof r.windows=="boolean"?r.windows:Xp===!0||Kp.sep==="\\";Qe.escapeLast=(r,t,e)=>{let n=r.lastIndexOf(t,e);return n===-1?r:r[n-1]==="\\"?Qe.escapeLast(r,t,n-1):`${r.slice(0,n)}\\${r.slice(n)}`};Qe.removePrefix=(r,t={})=>{let e=r;return e.startsWith("./")&&(e=e.slice(2),t.prefix="./"),e};Qe.wrapOutput=(r,t={},e={})=>{let n=e.contains?"":"^",s=e.contains?"":"$",u=`${n}(?:${r})${s}`;return t.negated===!0&&(u=`(?:^(?!${u}).*$)`),u}});var qu=Y((Cg,$u)=>{"use strict";var Nu=$r(),{CHAR_ASTERISK:Ps,CHAR_AT:th,CHAR_BACKWARD_SLASH:qr,CHAR_COMMA:rh,CHAR_DOT:Os,CHAR_EXCLAMATION_MARK:xs,CHAR_FORWARD_SLASH:Gu,CHAR_LEFT_CURLY_BRACE:Us,CHAR_LEFT_PARENTHESES:Ns,CHAR_LEFT_SQUARE_BRACKET:nh,CHAR_PLUS:ih,CHAR_QUESTION_MARK:Bu,CHAR_RIGHT_CURLY_BRACE:ah,CHAR_RIGHT_PARENTHESES:Hu,CHAR_RIGHT_SQUARE_BRACKET:sh}=Gr(),Wu=r=>r===Gu||r===qr,Yu=r=>{r.isPrefix!==!0&&(r.depth=r.isGlobstar?1/0:1)},oh=(r,t)=>{let e=t||{},n=r.length-1,s=e.parts===!0||e.scanToEnd===!0,u=[],d=[],h=[],g=r,M=-1,y=0,L=0,A=!1,z=!1,H=!1,W=!1,J=!1,X=!1,he=!1,fe=!1,we=!1,ie=!1,ue=0,te,Q,$={value:"",depth:0,isGlob:!1},w=()=>M>=n,k=()=>g.charCodeAt(M+1),ce=()=>(te=Q,g.charCodeAt(++M));for(;M<n;){Q=ce();let be;if(Q===qr){he=$.backslashes=!0,Q=ce(),Q===Us&&(X=!0);continue}if(X===!0||Q===Us){for(ue++;w()!==!0&&(Q=ce());){if(Q===qr){he=$.backslashes=!0,ce();continue}if(Q===Us){ue++;continue}if(X!==!0&&Q===Os&&(Q=ce())===Os){if(A=$.isBrace=!0,H=$.isGlob=!0,ie=!0,s===!0)continue;break}if(X!==!0&&Q===rh){if(A=$.isBrace=!0,H=$.isGlob=!0,ie=!0,s===!0)continue;break}if(Q===ah&&(ue--,ue===0)){X=!1,A=$.isBrace=!0,ie=!0;break}}if(s===!0)continue;break}if(Q===Gu){if(u.push(M),d.push($),$={value:"",depth:0,isGlob:!1},ie===!0)continue;if(te===Os&&M===y+1){y+=2;continue}L=M+1;continue}if(e.noext!==!0&&(Q===ih||Q===th||Q===Ps||Q===Bu||Q===xs)===!0&&k()===Ns){if(H=$.isGlob=!0,W=$.isExtglob=!0,ie=!0,Q===xs&&M===y&&(we=!0),s===!0){for(;w()!==!0&&(Q=ce());){if(Q===qr){he=$.backslashes=!0,Q=ce();continue}if(Q===Hu){H=$.isGlob=!0,ie=!0;break}}continue}break}if(Q===Ps){if(te===Ps&&(J=$.isGlobstar=!0),H=$.isGlob=!0,ie=!0,s===!0)continue;break}if(Q===Bu){if(H=$.isGlob=!0,ie=!0,s===!0)continue;break}if(Q===nh){for(;w()!==!0&&(be=ce());){if(be===qr){he=$.backslashes=!0,ce();continue}if(be===sh){z=$.isBracket=!0,H=$.isGlob=!0,ie=!0;break}}if(s===!0)continue;break}if(e.nonegate!==!0&&Q===xs&&M===y){fe=$.negated=!0,y++;continue}if(e.noparen!==!0&&Q===Ns){if(H=$.isGlob=!0,s===!0){for(;w()!==!0&&(Q=ce());){if(Q===Ns){he=$.backslashes=!0,Q=ce();continue}if(Q===Hu){ie=!0;break}}continue}break}if(H===!0){if(ie=!0,s===!0)continue;break}}e.noext===!0&&(W=!1,H=!1);let oe=g,Ce="",v="";y>0&&(Ce=g.slice(0,y),g=g.slice(y),L-=y),oe&&H===!0&&L>0?(oe=g.slice(0,L),v=g.slice(L)):H===!0?(oe="",v=g):oe=g,oe&&oe!==""&&oe!=="/"&&oe!==g&&Wu(oe.charCodeAt(oe.length-1))&&(oe=oe.slice(0,-1)),e.unescape===!0&&(v&&(v=Nu.removeBackslashes(v)),oe&&he===!0&&(oe=Nu.removeBackslashes(oe)));let C={prefix:Ce,input:r,start:y,base:oe,glob:v,isBrace:A,isBracket:z,isGlob:H,isExtglob:W,isGlobstar:J,negated:fe,negatedExtglob:we};if(e.tokens===!0&&(C.maxDepth=0,Wu(Q)||d.push($),C.tokens=d),e.parts===!0||e.tokens===!0){let be;for(let re=0;re<u.length;re++){let Pe=be?be+1:y,R=u[re],$e=r.slice(Pe,R);e.tokens&&(re===0&&y!==0?(d[re].isPrefix=!0,d[re].value=Ce):d[re].value=$e,Yu(d[re]),C.maxDepth+=d[re].depth),(re!==0||$e!=="")&&h.push($e),be=R}if(be&&be+1<r.length){let re=r.slice(be+1);h.push(re),e.tokens&&(d[d.length-1].value=re,Yu(d[d.length-1]),C.maxDepth+=d[d.length-1].depth)}C.slashes=u,C.parts=h}return C};$u.exports=oh});var Xu=Y((Tg,Ku)=>{"use strict";var Yn=Gr(),rt=$r(),{MAX_LENGTH:Gn,POSIX_REGEX_SOURCE:lh,REGEX_NON_SPECIAL_CHARS:uh,REGEX_SPECIAL_CHARS_BACKREF:ch,REPLACEMENTS:zu}=Yn,_h=(r,t)=>{if(typeof t.expandRange=="function")return t.expandRange(...r,t);r.sort();let e=`[${r.join("-")}]`;try{new RegExp(e)}catch{return r.map(s=>rt.escapeRegex(s)).join("..")}return e},dr=(r,t)=>`Missing ${r}: "${t}" - use "\\\\${t}" to match literal characters`,Vu=(r,t)=>{if(typeof r!="string")throw new TypeError("Expected a string");r=zu[r]||r;let e={...t},n=typeof e.maxLength=="number"?Math.min(Gn,e.maxLength):Gn,s=r.length;if(s>n)throw new SyntaxError(`Input length: ${s}, exceeds maximum allowed length: ${n}`);let u={type:"bos",value:"",output:e.prepend||""},d=[u],h=e.capture?"":"?:",g=rt.isWindows(t),M=Yn.globChars(g),y=Yn.extglobChars(M),{DOT_LITERAL:L,PLUS_LITERAL:A,SLASH_LITERAL:z,ONE_CHAR:H,DOTS_SLASH:W,NO_DOT:J,NO_DOT_SLASH:X,NO_DOTS_SLASH:he,QMARK:fe,QMARK_NO_DOT:we,STAR:ie,START_ANCHOR:ue}=M,te=B=>`(${h}(?:(?!${ue}${B.dot?W:L}).)*?)`,Q=e.dot?"":J,$=e.dot?fe:we,w=e.bash===!0?te(e):ie;e.capture&&(w=`(${w})`),typeof e.noext=="boolean"&&(e.noextglob=e.noext);let k={input:r,index:-1,start:0,dot:e.dot===!0,consumed:"",output:"",prefix:"",backtrack:!1,negated:!1,brackets:0,braces:0,parens:0,quotes:0,globstar:!1,tokens:d};r=rt.removePrefix(r,k),s=r.length;let ce=[],oe=[],Ce=[],v=u,C,be=()=>k.index===s-1,re=k.peek=(B=1)=>r[k.index+B],Pe=k.advance=()=>r[++k.index]||"",R=()=>r.slice(k.index+1),$e=(B="",me=0)=>{k.consumed+=B,k.index+=me},Ee=B=>{k.output+=B.output!=null?B.output:B.value,$e(B.value)},Fe=()=>{let B=1;for(;re()==="!"&&(re(2)!=="("||re(3)==="?");)Pe(),k.start++,B++;return B%2===0?!1:(k.negated=!0,k.start++,!0)},Ie=B=>{k[B]++,Ce.push(B)},Je=B=>{k[B]--,Ce.pop()},b=B=>{if(v.type==="globstar"){let me=k.braces>0&&(B.type==="comma"||B.type==="brace"),U=B.extglob===!0||ce.length&&(B.type==="pipe"||B.type==="paren");B.type!=="slash"&&B.type!=="paren"&&!me&&!U&&(k.output=k.output.slice(0,-v.output.length),v.type="star",v.value="*",v.output=w,k.output+=v.output)}if(ce.length&&B.type!=="paren"&&(ce[ce.length-1].inner+=B.value),(B.value||B.output)&&Ee(B),v&&v.type==="text"&&B.type==="text"){v.value+=B.value,v.output=(v.output||"")+B.value;return}B.prev=v,d.push(B),v=B},q=(B,me)=>{let U={...y[me],conditions:1,inner:""};U.prev=v,U.parens=k.parens,U.output=k.output;let le=(e.capture?"(":"")+U.open;Ie("parens"),b({type:B,value:me,output:k.output?"":H}),b({type:"paren",extglob:!0,value:Pe(),output:le}),ce.push(U)},mt=B=>{let me=B.close+(e.capture?")":""),U;if(B.type==="negate"){let le=w;B.inner&&B.inner.length>1&&B.inner.includes("/")&&(le=te(e)),(le!==w||be()||/^\)+$/.test(R()))&&(me=B.close=`)$))${le}`),B.inner.includes("*")&&(U=R())&&/^\.[^\\/.]+$/.test(U)&&(me=B.close=`)${U})${le})`),B.prev.type==="bos"&&(k.negatedExtglob=!0)}b({type:"paren",extglob:!0,value:C,output:me}),Je("parens")};if(e.fastpaths!==!1&&!/(^[*!]|[/()[\]{}"])/.test(r)){let B=!1,me=r.replace(ch,(U,le,pe,De,ke,gt)=>De==="\\"?(B=!0,U):De==="?"?le?le+De+(ke?fe.repeat(ke.length):""):gt===0?$+(ke?fe.repeat(ke.length):""):fe.repeat(pe.length):De==="."?L.repeat(pe.length):De==="*"?le?le+De+(ke?w:""):w:le?U:`\\${U}`);return B===!0&&(e.unescape===!0?me=me.replace(/\\/g,""):me=me.replace(/\\+/g,U=>U.length%2===0?"\\\\":U?"\\":"")),me===r&&e.contains===!0?(k.output=r,k):(k.output=rt.wrapOutput(me,k,t),k)}for(;!be();){if(C=Pe(),C==="\0")continue;if(C==="\\"){let U=re();if(U==="/"&&e.bash!==!0||U==="."||U===";")continue;if(!U){C+="\\",b({type:"text",value:C});continue}let le=/^\\+/.exec(R()),pe=0;if(le&&le[0].length>2&&(pe=le[0].length,k.index+=pe,pe%2!==0&&(C+="\\")),e.unescape===!0?C=Pe():C+=Pe(),k.brackets===0){b({type:"text",value:C});continue}}if(k.brackets>0&&(C!=="]"||v.value==="["||v.value==="[^")){if(e.posix!==!1&&C===":"){let U=v.value.slice(1);if(U.includes("[")&&(v.posix=!0,U.includes(":"))){let le=v.value.lastIndexOf("["),pe=v.value.slice(0,le),De=v.value.slice(le+2),ke=lh[De];if(ke){v.value=pe+ke,k.backtrack=!0,Pe(),!u.output&&d.indexOf(v)===1&&(u.output=H);continue}}}(C==="["&&re()!==":"||C==="-"&&re()==="]")&&(C=`\\${C}`),C==="]"&&(v.value==="["||v.value==="[^")&&(C=`\\${C}`),e.posix===!0&&C==="!"&&v.value==="["&&(C="^"),v.value+=C,Ee({value:C});continue}if(k.quotes===1&&C!=='"'){C=rt.escapeRegex(C),v.value+=C,Ee({value:C});continue}if(C==='"'){k.quotes=k.quotes===1?0:1,e.keepQuotes===!0&&b({type:"text",value:C});continue}if(C==="("){Ie("parens"),b({type:"paren",value:C});continue}if(C===")"){if(k.parens===0&&e.strictBrackets===!0)throw new SyntaxError(dr("opening","("));let U=ce[ce.length-1];if(U&&k.parens===U.parens+1){mt(ce.pop());continue}b({type:"paren",value:C,output:k.parens?")":"\\)"}),Je("parens");continue}if(C==="["){if(e.nobracket===!0||!R().includes("]")){if(e.nobracket!==!0&&e.strictBrackets===!0)throw new SyntaxError(dr("closing","]"));C=`\\${C}`}else Ie("brackets");b({type:"bracket",value:C});continue}if(C==="]"){if(e.nobracket===!0||v&&v.type==="bracket"&&v.value.length===1){b({type:"text",value:C,output:`\\${C}`});continue}if(k.brackets===0){if(e.strictBrackets===!0)throw new SyntaxError(dr("opening","["));b({type:"text",value:C,output:`\\${C}`});continue}Je("brackets");let U=v.value.slice(1);if(v.posix!==!0&&U[0]==="^"&&!U.includes("/")&&(C=`/${C}`),v.value+=C,Ee({value:C}),e.literalBrackets===!1||rt.hasRegexChars(U))continue;let le=rt.escapeRegex(v.value);if(k.output=k.output.slice(0,-v.value.length),e.literalBrackets===!0){k.output+=le,v.value=le;continue}v.value=`(${h}${le}|${v.value})`,k.output+=v.value;continue}if(C==="{"&&e.nobrace!==!0){Ie("braces");let U={type:"brace",value:C,output:"(",outputIndex:k.output.length,tokensIndex:k.tokens.length};oe.push(U),b(U);continue}if(C==="}"){let U=oe[oe.length-1];if(e.nobrace===!0||!U){b({type:"text",value:C,output:C});continue}let le=")";if(U.dots===!0){let pe=d.slice(),De=[];for(let ke=pe.length-1;ke>=0&&(d.pop(),pe[ke].type!=="brace");ke--)pe[ke].type!=="dots"&&De.unshift(pe[ke].value);le=_h(De,e),k.backtrack=!0}if(U.comma!==!0&&U.dots!==!0){let pe=k.output.slice(0,U.outputIndex),De=k.tokens.slice(U.tokensIndex);U.value=U.output="\\{",C=le="\\}",k.output=pe;for(let ke of De)k.output+=ke.output||ke.value}b({type:"brace",value:C,output:le}),Je("braces"),oe.pop();continue}if(C==="|"){ce.length>0&&ce[ce.length-1].conditions++,b({type:"text",value:C});continue}if(C===","){let U=C,le=oe[oe.length-1];le&&Ce[Ce.length-1]==="braces"&&(le.comma=!0,U="|"),b({type:"comma",value:C,output:U});continue}if(C==="/"){if(v.type==="dot"&&k.index===k.start+1){k.start=k.index+1,k.consumed="",k.output="",d.pop(),v=u;continue}b({type:"slash",value:C,output:z});continue}if(C==="."){if(k.braces>0&&v.type==="dot"){v.value==="."&&(v.output=L);let U=oe[oe.length-1];v.type="dots",v.output+=C,v.value+=C,U.dots=!0;continue}if(k.braces+k.parens===0&&v.type!=="bos"&&v.type!=="slash"){b({type:"text",value:C,output:L});continue}b({type:"dot",value:C,output:L});continue}if(C==="?"){if(!(v&&v.value==="(")&&e.noextglob!==!0&&re()==="("&&re(2)!=="?"){q("qmark",C);continue}if(v&&v.type==="paren"){let le=re(),pe=C;if(le==="<"&&!rt.supportsLookbehinds())throw new Error("Node.js v10 or higher is required for regex lookbehinds");(v.value==="("&&!/[!=<:]/.test(le)||le==="<"&&!/<([!=]|\w+>)/.test(R()))&&(pe=`\\${C}`),b({type:"text",value:C,output:pe});continue}if(e.dot!==!0&&(v.type==="slash"||v.type==="bos")){b({type:"qmark",value:C,output:we});continue}b({type:"qmark",value:C,output:fe});continue}if(C==="!"){if(e.noextglob!==!0&&re()==="("&&(re(2)!=="?"||!/[!=<:]/.test(re(3)))){q("negate",C);continue}if(e.nonegate!==!0&&k.index===0){Fe();continue}}if(C==="+"){if(e.noextglob!==!0&&re()==="("&&re(2)!=="?"){q("plus",C);continue}if(v&&v.value==="("||e.regex===!1){b({type:"plus",value:C,output:A});continue}if(v&&(v.type==="bracket"||v.type==="paren"||v.type==="brace")||k.parens>0){b({type:"plus",value:C});continue}b({type:"plus",value:A});continue}if(C==="@"){if(e.noextglob!==!0&&re()==="("&&re(2)!=="?"){b({type:"at",extglob:!0,value:C,output:""});continue}b({type:"text",value:C});continue}if(C!=="*"){(C==="$"||C==="^")&&(C=`\\${C}`);let U=uh.exec(R());U&&(C+=U[0],k.index+=U[0].length),b({type:"text",value:C});continue}if(v&&(v.type==="globstar"||v.star===!0)){v.type="star",v.star=!0,v.value+=C,v.output=w,k.backtrack=!0,k.globstar=!0,$e(C);continue}let B=R();if(e.noextglob!==!0&&/^\([^?]/.test(B)){q("star",C);continue}if(v.type==="star"){if(e.noglobstar===!0){$e(C);continue}let U=v.prev,le=U.prev,pe=U.type==="slash"||U.type==="bos",De=le&&(le.type==="star"||le.type==="globstar");if(e.bash===!0&&(!pe||B[0]&&B[0]!=="/")){b({type:"star",value:C,output:""});continue}let ke=k.braces>0&&(U.type==="comma"||U.type==="brace"),gt=ce.length&&(U.type==="pipe"||U.type==="paren");if(!pe&&U.type!=="paren"&&!ke&&!gt){b({type:"star",value:C,output:""});continue}for(;B.slice(0,3)==="/**";){let Jt=r[k.index+4];if(Jt&&Jt!=="/")break;B=B.slice(3),$e("/**",3)}if(U.type==="bos"&&be()){v.type="globstar",v.value+=C,v.output=te(e),k.output=v.output,k.globstar=!0,$e(C);continue}if(U.type==="slash"&&U.prev.type!=="bos"&&!De&&be()){k.output=k.output.slice(0,-(U.output+v.output).length),U.output=`(?:${U.output}`,v.type="globstar",v.output=te(e)+(e.strictSlashes?")":"|$)"),v.value+=C,k.globstar=!0,k.output+=U.output+v.output,$e(C);continue}if(U.type==="slash"&&U.prev.type!=="bos"&&B[0]==="/"){let Jt=B[1]!==void 0?"|$":"";k.output=k.output.slice(0,-(U.output+v.output).length),U.output=`(?:${U.output}`,v.type="globstar",v.output=`${te(e)}${z}|${z}${Jt})`,v.value+=C,k.output+=U.output+v.output,k.globstar=!0,$e(C+Pe()),b({type:"slash",value:"/",output:""});continue}if(U.type==="bos"&&B[0]==="/"){v.type="globstar",v.value+=C,v.output=`(?:^|${z}|${te(e)}${z})`,k.output=v.output,k.globstar=!0,$e(C+Pe()),b({type:"slash",value:"/",output:""});continue}k.output=k.output.slice(0,-v.output.length),v.type="globstar",v.output=te(e),v.value+=C,k.output+=v.output,k.globstar=!0,$e(C);continue}let me={type:"star",value:C,output:w};if(e.bash===!0){me.output=".*?",(v.type==="bos"||v.type==="slash")&&(me.output=Q+me.output),b(me);continue}if(v&&(v.type==="bracket"||v.type==="paren")&&e.regex===!0){me.output=C,b(me);continue}(k.index===k.start||v.type==="slash"||v.type==="dot")&&(v.type==="dot"?(k.output+=X,v.output+=X):e.dot===!0?(k.output+=he,v.output+=he):(k.output+=Q,v.output+=Q),re()!=="*"&&(k.output+=H,v.output+=H)),b(me)}for(;k.brackets>0;){if(e.strictBrackets===!0)throw new SyntaxError(dr("closing","]"));k.output=rt.escapeLast(k.output,"["),Je("brackets")}for(;k.parens>0;){if(e.strictBrackets===!0)throw new SyntaxError(dr("closing",")"));k.output=rt.escapeLast(k.output,"("),Je("parens")}for(;k.braces>0;){if(e.strictBrackets===!0)throw new SyntaxError(dr("closing","}"));k.output=rt.escapeLast(k.output,"{"),Je("braces")}if(e.strictSlashes!==!0&&(v.type==="star"||v.type==="bracket")&&b({type:"maybe_slash",value:"",output:`${z}?`}),k.backtrack===!0){k.output="";for(let B of k.tokens)k.output+=B.output!=null?B.output:B.value,B.suffix&&(k.output+=B.suffix)}return k};Vu.fastpaths=(r,t)=>{let e={...t},n=typeof e.maxLength=="number"?Math.min(Gn,e.maxLength):Gn,s=r.length;if(s>n)throw new SyntaxError(`Input length: ${s}, exceeds maximum allowed length: ${n}`);r=zu[r]||r;let u=rt.isWindows(t),{DOT_LITERAL:d,SLASH_LITERAL:h,ONE_CHAR:g,DOTS_SLASH:M,NO_DOT:y,NO_DOTS:L,NO_DOTS_SLASH:A,STAR:z,START_ANCHOR:H}=Yn.globChars(u),W=e.dot?L:y,J=e.dot?A:y,X=e.capture?"":"?:",he={negated:!1,prefix:""},fe=e.bash===!0?".*?":z;e.capture&&(fe=`(${fe})`);let we=Q=>Q.noglobstar===!0?fe:`(${X}(?:(?!${H}${Q.dot?M:d}).)*?)`,ie=Q=>{switch(Q){case"*":return`${W}${g}${fe}`;case".*":return`${d}${g}${fe}`;case"*.*":return`${W}${fe}${d}${g}${fe}`;case"*/*":return`${W}${fe}${h}${g}${J}${fe}`;case"**":return W+we(e);case"**/*":return`(?:${W}${we(e)}${h})?${J}${g}${fe}`;case"**/*.*":return`(?:${W}${we(e)}${h})?${J}${fe}${d}${g}${fe}`;case"**/.*":return`(?:${W}${we(e)}${h})?${d}${g}${fe}`;default:{let $=/^(.*?)\.(\w+)$/.exec(Q);if(!$)return;let w=ie($[1]);return w?w+d+$[2]:void 0}}},ue=rt.removePrefix(r,he),te=ie(ue);return te&&e.strictSlashes!==!0&&(te+=`${h}?`),te};Ku.exports=Vu});var Ju=Y((kg,Qu)=>{"use strict";var dh=require("path"),fh=qu(),Bs=Xu(),Hs=$r(),ph=Gr(),hh=r=>r&&typeof r=="object"&&!Array.isArray(r),Le=(r,t,e=!1)=>{if(Array.isArray(r)){let y=r.map(A=>Le(A,t,e));return A=>{for(let z of y){let H=z(A);if(H)return H}return!1}}let n=hh(r)&&r.tokens&&r.input;if(r===""||typeof r!="string"&&!n)throw new TypeError("Expected pattern to be a non-empty string");let s=t||{},u=Hs.isWindows(t),d=n?Le.compileRe(r,t):Le.makeRe(r,t,!1,!0),h=d.state;delete d.state;let g=()=>!1;if(s.ignore){let y={...t,ignore:null,onMatch:null,onResult:null};g=Le(s.ignore,y,e)}let M=(y,L=!1)=>{let{isMatch:A,match:z,output:H}=Le.test(y,d,t,{glob:r,posix:u}),W={glob:r,state:h,regex:d,posix:u,input:y,output:H,match:z,isMatch:A};return typeof s.onResult=="function"&&s.onResult(W),A===!1?(W.isMatch=!1,L?W:!1):g(y)?(typeof s.onIgnore=="function"&&s.onIgnore(W),W.isMatch=!1,L?W:!1):(typeof s.onMatch=="function"&&s.onMatch(W),L?W:!0)};return e&&(M.state=h),M};Le.test=(r,t,e,{glob:n,posix:s}={})=>{if(typeof r!="string")throw new TypeError("Expected input to be a string");if(r==="")return{isMatch:!1,output:""};let u=e||{},d=u.format||(s?Hs.toPosixSlashes:null),h=r===n,g=h&&d?d(r):r;return h===!1&&(g=d?d(r):r,h=g===n),(h===!1||u.capture===!0)&&(u.matchBase===!0||u.basename===!0?h=Le.matchBase(r,t,e,s):h=t.exec(g)),{isMatch:Boolean(h),match:h,output:g}};Le.matchBase=(r,t,e,n=Hs.isWindows(e))=>(t instanceof RegExp?t:Le.makeRe(t,e)).test(dh.basename(r));Le.isMatch=(r,t,e)=>Le(t,e)(r);Le.parse=(r,t)=>Array.isArray(r)?r.map(e=>Le.parse(e,t)):Bs(r,{...t,fastpaths:!1});Le.scan=(r,t)=>fh(r,t);Le.compileRe=(r,t,e=!1,n=!1)=>{if(e===!0)return r.output;let s=t||{},u=s.contains?"":"^",d=s.contains?"":"$",h=`${u}(?:${r.output})${d}`;r&&r.negated===!0&&(h=`^(?!${h}).*$`);let g=Le.toRegex(h,t);return n===!0&&(g.state=r),g};Le.makeRe=(r,t={},e=!1,n=!1)=>{if(!r||typeof r!="string")throw new TypeError("Expected a non-empty string");let s={negated:!1,fastpaths:!0};return t.fastpaths!==!1&&(r[0]==="."||r[0]==="*")&&(s.output=Bs.fastpaths(r,t)),s.output||(s=Bs(r,t)),Le.compileRe(s,t,e,n)};Le.toRegex=(r,t)=>{try{let e=t||{};return new RegExp(r,e.flags||(e.nocase?"i":""))}catch(e){if(t&&t.debug===!0)throw e;return/$^/}};Le.constants=ph;Qu.exports=Le});var ec=Y((Rg,Zu)=>{"use strict";Zu.exports=Ju()});var ac=Y((Ag,ic)=>{"use strict";var rc=require("util"),nc=Fu(),pt=ec(),Ws=$r(),tc=r=>r===""||r==="./",Me=(r,t,e)=>{t=[].concat(t),r=[].concat(r);let n=new Set,s=new Set,u=new Set,d=0,h=y=>{u.add(y.output),e&&e.onResult&&e.onResult(y)};for(let y=0;y<t.length;y++){let L=pt(String(t[y]),{...e,onResult:h},!0),A=L.state.negated||L.state.negatedExtglob;A&&d++;for(let z of r){let H=L(z,!0);!(A?!H.isMatch:H.isMatch)||(A?n.add(H.output):(n.delete(H.output),s.add(H.output)))}}let M=(d===t.length?[...u]:[...s]).filter(y=>!n.has(y));if(e&&M.length===0){if(e.failglob===!0)throw new Error(`No matches found for "${t.join(", ")}"`);if(e.nonull===!0||e.nullglob===!0)return e.unescape?t.map(y=>y.replace(/\\/g,"")):t}return M};Me.match=Me;Me.matcher=(r,t)=>pt(r,t);Me.isMatch=(r,t,e)=>pt(t,e)(r);Me.any=Me.isMatch;Me.not=(r,t,e={})=>{t=[].concat(t).map(String);let n=new Set,s=[],d=Me(r,t,{...e,onResult:h=>{e.onResult&&e.onResult(h),s.push(h.output)}});for(let h of s)d.includes(h)||n.add(h);return[...n]};Me.contains=(r,t,e)=>{if(typeof r!="string")throw new TypeError(`Expected a string: "${rc.inspect(r)}"`);if(Array.isArray(t))return t.some(n=>Me.contains(r,n,e));if(typeof t=="string"){if(tc(r)||tc(t))return!1;if(r.includes(t)||r.startsWith("./")&&r.slice(2).includes(t))return!0}return Me.isMatch(r,t,{...e,contains:!0})};Me.matchKeys=(r,t,e)=>{if(!Ws.isObject(r))throw new TypeError("Expected the first argument to be an object");let n=Me(Object.keys(r),t,e),s={};for(let u of n)s[u]=r[u];return s};Me.some=(r,t,e)=>{let n=[].concat(r);for(let s of[].concat(t)){let u=pt(String(s),e);if(n.some(d=>u(d)))return!0}return!1};Me.every=(r,t,e)=>{let n=[].concat(r);for(let s of[].concat(t)){let u=pt(String(s),e);if(!n.every(d=>u(d)))return!1}return!0};Me.all=(r,t,e)=>{if(typeof r!="string")throw new TypeError(`Expected a string: "${rc.inspect(r)}"`);return[].concat(t).every(n=>pt(n,e)(r))};Me.capture=(r,t,e)=>{let n=Ws.isWindows(e),u=pt.makeRe(String(r),{...e,capture:!0}).exec(n?Ws.toPosixSlashes(t):t);if(u)return u.slice(1).map(d=>d===void 0?"":d)};Me.makeRe=(...r)=>pt.makeRe(...r);Me.scan=(...r)=>pt.scan(...r);Me.parse=(r,t)=>{let e=[];for(let n of[].concat(r||[]))for(let s of nc(String(n),t))e.push(pt.parse(s,t));return e};Me.braces=(r,t)=>{if(typeof r!="string")throw new TypeError("Expected a string");return t&&t.nobrace===!0||!/\{.*\}/.test(r)?[r]:nc(r,t)};Me.braceExpand=(r,t)=>{if(typeof r!="string")throw new TypeError("Expected a string");return Me.braces(r,{...t,expand:!0})};ic.exports=Me});var fc=Y(ne=>{"use strict";Object.defineProperty(ne,"__esModule",{value:!0});ne.matchAny=ne.convertPatternsToRe=ne.makeRe=ne.getPatternParts=ne.expandBraceExpansion=ne.expandPatternsWithBraceExpansion=ne.isAffectDepthOfReadingPattern=ne.endsWithSlashGlobStar=ne.hasGlobStar=ne.getBaseDirectory=ne.isPatternRelatedToParentDirectory=ne.getPatternsOutsideCurrentDirectory=ne.getPatternsInsideCurrentDirectory=ne.getPositivePatterns=ne.getNegativePatterns=ne.isPositivePattern=ne.isNegativePattern=ne.convertToNegativePattern=ne.convertToPositivePattern=ne.isDynamicPattern=ne.isStaticPattern=void 0;var bh=require("path"),mh=Xl(),Ys=ac(),sc="**",gh="\\",yh=/[*?]|^!/,vh=/\[[^[]*]/,Sh=/(?:^|[^!*+?@])\([^(]*\|[^|]*\)/,wh=/[!*+?@]\([^(]*\)/,Eh=/,|\.\./;function oc(r,t={}){return!lc(r,t)}ne.isStaticPattern=oc;function lc(r,t={}){return r===""?!1:!!(t.caseSensitiveMatch===!1||r.includes(gh)||yh.test(r)||vh.test(r)||Sh.test(r)||t.extglob!==!1&&wh.test(r)||t.braceExpansion!==!1&&Ch(r))}ne.isDynamicPattern=lc;function Ch(r){let t=r.indexOf("{");if(t===-1)return!1;let e=r.indexOf("}",t+1);if(e===-1)return!1;let n=r.slice(t,e);return Eh.test(n)}function Th(r){return $n(r)?r.slice(1):r}ne.convertToPositivePattern=Th;function kh(r){return"!"+r}ne.convertToNegativePattern=kh;function $n(r){return r.startsWith("!")&&r[1]!=="("}ne.isNegativePattern=$n;function uc(r){return!$n(r)}ne.isPositivePattern=uc;function Rh(r){return r.filter($n)}ne.getNegativePatterns=Rh;function Ah(r){return r.filter(uc)}ne.getPositivePatterns=Ah;function jh(r){return r.filter(t=>!Gs(t))}ne.getPatternsInsideCurrentDirectory=jh;function Mh(r){return r.filter(Gs)}ne.getPatternsOutsideCurrentDirectory=Mh;function Gs(r){return r.startsWith("..")||r.startsWith("./..")}ne.isPatternRelatedToParentDirectory=Gs;function Dh(r){return mh(r,{flipBackslashes:!1})}ne.getBaseDirectory=Dh;function Ih(r){return r.includes(sc)}ne.hasGlobStar=Ih;function cc(r){return r.endsWith("/"+sc)}ne.endsWithSlashGlobStar=cc;function Fh(r){let t=bh.basename(r);return cc(r)||oc(t)}ne.isAffectDepthOfReadingPattern=Fh;function Lh(r){return r.reduce((t,e)=>t.concat(_c(e)),[])}ne.expandPatternsWithBraceExpansion=Lh;function _c(r){return Ys.braces(r,{expand:!0,nodupes:!0})}ne.expandBraceExpansion=_c;function Ph(r,t){let{parts:e}=Ys.scan(r,Object.assign(Object.assign({},t),{parts:!0}));return e.length===0&&(e=[r]),e[0].startsWith("/")&&(e[0]=e[0].slice(1),e.unshift("")),e}ne.getPatternParts=Ph;function dc(r,t){return Ys.makeRe(r,t)}ne.makeRe=dc;function Oh(r,t){return r.map(e=>dc(e,t))}ne.convertPatternsToRe=Oh;function xh(r,t){return t.some(e=>e.test(r))}ne.matchAny=xh});var mc=Y((Mg,bc)=>{"use strict";var Uh=require("stream"),pc=Uh.PassThrough,Nh=Array.prototype.slice;bc.exports=Bh;function Bh(){let r=[],t=Nh.call(arguments),e=!1,n=t[t.length-1];n&&!Array.isArray(n)&&n.pipe==null?t.pop():n={};let s=n.end!==!1,u=n.pipeError===!0;n.objectMode==null&&(n.objectMode=!0),n.highWaterMark==null&&(n.highWaterMark=64*1024);let d=pc(n);function h(){for(let y=0,L=arguments.length;y<L;y++)r.push(hc(arguments[y],n));return g(),this}function g(){if(e)return;e=!0;let y=r.shift();if(!y){process.nextTick(M);return}Array.isArray(y)||(y=[y]);let L=y.length+1;function A(){--L>0||(e=!1,g())}function z(H){function W(){H.removeListener("merge2UnpipeEnd",W),H.removeListener("end",W),u&&H.removeListener("error",J),A()}function J(X){d.emit("error",X)}if(H._readableState.endEmitted)return A();H.on("merge2UnpipeEnd",W),H.on("end",W),u&&H.on("error",J),H.pipe(d,{end:!1}),H.resume()}for(let H=0;H<y.length;H++)z(y[H]);A()}function M(){e=!1,d.emit("queueDrain"),s&&d.end()}return d.setMaxListeners(0),d.add=h,d.on("unpipe",function(y){y.emit("merge2UnpipeEnd")}),t.length&&h.apply(null,t),d}function hc(r,t){if(Array.isArray(r))for(let e=0,n=r.length;e<n;e++)r[e]=hc(r[e],t);else{if(!r._readableState&&r.pipe&&(r=r.pipe(pc(t))),!r._readableState||!r.pause||!r.pipe)throw new Error("Only readable stream can be merged.");r.pause()}return r}});var yc=Y(qn=>{"use strict";Object.defineProperty(qn,"__esModule",{value:!0});qn.merge=void 0;var Hh=mc();function Wh(r){let t=Hh(r);return r.forEach(e=>{e.once("error",n=>t.emit("error",n))}),t.once("close",()=>gc(r)),t.once("end",()=>gc(r)),t}qn.merge=Wh;function gc(r){r.forEach(t=>t.emit("close"))}});var vc=Y(fr=>{"use strict";Object.defineProperty(fr,"__esModule",{value:!0});fr.isEmpty=fr.isString=void 0;function Yh(r){return typeof r=="string"}fr.isString=Yh;function Gh(r){return r===""}fr.isEmpty=Gh});var Ct=Y(Ye=>{"use strict";Object.defineProperty(Ye,"__esModule",{value:!0});Ye.string=Ye.stream=Ye.pattern=Ye.path=Ye.fs=Ye.errno=Ye.array=void 0;var $h=Bl();Ye.array=$h;var qh=Hl();Ye.errno=qh;var zh=Wl();Ye.fs=zh;var Vh=Yl();Ye.path=Vh;var Kh=fc();Ye.pattern=Kh;var Xh=yc();Ye.stream=Xh;var Qh=vc();Ye.string=Qh});var Ec=Y(Ge=>{"use strict";Object.defineProperty(Ge,"__esModule",{value:!0});Ge.convertPatternGroupToTask=Ge.convertPatternGroupsToTasks=Ge.groupPatternsByBaseDirectory=Ge.getNegativePatternsAsPositive=Ge.getPositivePatterns=Ge.convertPatternsToTasks=Ge.generate=void 0;var Tt=Ct();function Jh(r,t){let e=Sc(r),n=wc(r,t.ignore),s=e.filter(g=>Tt.pattern.isStaticPattern(g,t)),u=e.filter(g=>Tt.pattern.isDynamicPattern(g,t)),d=$s(s,n,!1),h=$s(u,n,!0);return d.concat(h)}Ge.generate=Jh;function $s(r,t,e){let n=[],s=Tt.pattern.getPatternsOutsideCurrentDirectory(r),u=Tt.pattern.getPatternsInsideCurrentDirectory(r),d=qs(s),h=qs(u);return n.push(...zs(d,t,e)),"."in h?n.push(Vs(".",u,t,e)):n.push(...zs(h,t,e)),n}Ge.convertPatternsToTasks=$s;function Sc(r){return Tt.pattern.getPositivePatterns(r)}Ge.getPositivePatterns=Sc;function wc(r,t){return Tt.pattern.getNegativePatterns(r).concat(t).map(Tt.pattern.convertToPositivePattern)}Ge.getNegativePatternsAsPositive=wc;function qs(r){let t={};return r.reduce((e,n)=>{let s=Tt.pattern.getBaseDirectory(n);return s in e?e[s].push(n):e[s]=[n],e},t)}Ge.groupPatternsByBaseDirectory=qs;function zs(r,t,e){return Object.keys(r).map(n=>Vs(n,r[n],t,e))}Ge.convertPatternGroupsToTasks=zs;function Vs(r,t,e,n){return{dynamic:n,positive:t,negative:e,base:r,patterns:[].concat(t,e.map(Tt.pattern.convertToNegativePattern))}}Ge.convertPatternGroupToTask=Vs});var Tc=Y(pr=>{"use strict";Object.defineProperty(pr,"__esModule",{value:!0});pr.removeDuplicateSlashes=pr.transform=void 0;var Zh=/(?!^)\/{2,}/g;function eb(r){return r.map(t=>Cc(t))}pr.transform=eb;function Cc(r){return r.replace(Zh,"/")}pr.removeDuplicateSlashes=Cc});var Rc=Y(zn=>{"use strict";Object.defineProperty(zn,"__esModule",{value:!0});zn.read=void 0;function tb(r,t,e){t.fs.lstat(r,(n,s)=>{if(n!==null){kc(e,n);return}if(!s.isSymbolicLink()||!t.followSymbolicLink){Ks(e,s);return}t.fs.stat(r,(u,d)=>{if(u!==null){if(t.throwErrorOnBrokenSymbolicLink){kc(e,u);return}Ks(e,s);return}t.markSymbolicLink&&(d.isSymbolicLink=()=>!0),Ks(e,d)})})}zn.read=tb;function kc(r,t){r(t)}function Ks(r,t){r(null,t)}});var Ac=Y(Vn=>{"use strict";Object.defineProperty(Vn,"__esModule",{value:!0});Vn.read=void 0;function rb(r,t){let e=t.fs.lstatSync(r);if(!e.isSymbolicLink()||!t.followSymbolicLink)return e;try{let n=t.fs.statSync(r);return t.markSymbolicLink&&(n.isSymbolicLink=()=>!0),n}catch(n){if(!t.throwErrorOnBrokenSymbolicLink)return e;throw n}}Vn.read=rb});var jc=Y(jt=>{"use strict";Object.defineProperty(jt,"__esModule",{value:!0});jt.createFileSystemAdapter=jt.FILE_SYSTEM_ADAPTER=void 0;var Kn=require("fs");jt.FILE_SYSTEM_ADAPTER={lstat:Kn.lstat,stat:Kn.stat,lstatSync:Kn.lstatSync,statSync:Kn.statSync};function nb(r){return r===void 0?jt.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},jt.FILE_SYSTEM_ADAPTER),r)}jt.createFileSystemAdapter=nb});var Mc=Y(Qs=>{"use strict";Object.defineProperty(Qs,"__esModule",{value:!0});var ib=jc(),Xs=class{constructor(t={}){this._options=t,this.followSymbolicLink=this._getValue(this._options.followSymbolicLink,!0),this.fs=ib.createFileSystemAdapter(this._options.fs),this.markSymbolicLink=this._getValue(this._options.markSymbolicLink,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0)}_getValue(t,e){return t??e}};Qs.default=Xs});var Kt=Y(Mt=>{"use strict";Object.defineProperty(Mt,"__esModule",{value:!0});Mt.statSync=Mt.stat=Mt.Settings=void 0;var Dc=Rc(),ab=Ac(),Js=Mc();Mt.Settings=Js.default;function sb(r,t,e){if(typeof t=="function"){Dc.read(r,Zs(),t);return}Dc.read(r,Zs(t),e)}Mt.stat=sb;function ob(r,t){let e=Zs(t);return ab.read(r,e)}Mt.statSync=ob;function Zs(r={}){return r instanceof Js.default?r:new Js.default(r)}});var Lc=Y((Hg,Fc)=>{var Ic;Fc.exports=typeof queueMicrotask=="function"?queueMicrotask.bind(typeof window<"u"?window:global):r=>(Ic||(Ic=Promise.resolve())).then(r).catch(t=>setTimeout(()=>{throw t},0))});var Oc=Y((Wg,Pc)=>{Pc.exports=ub;var lb=Lc();function ub(r,t){let e,n,s,u=!0;Array.isArray(r)?(e=[],n=r.length):(s=Object.keys(r),e={},n=s.length);function d(g){function M(){t&&t(g,e),t=null}u?lb(M):M()}function h(g,M,y){e[g]=y,(--n===0||M)&&d(M)}n?s?s.forEach(function(g){r[g](function(M,y){h(g,M,y)})}):r.forEach(function(g,M){g(function(y,L){h(M,y,L)})}):d(null),u=!1}});var eo=Y(Qn=>{"use strict";Object.defineProperty(Qn,"__esModule",{value:!0});Qn.IS_SUPPORT_READDIR_WITH_FILE_TYPES=void 0;var Xn=process.versions.node.split(".");if(Xn[0]===void 0||Xn[1]===void 0)throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);var xc=Number.parseInt(Xn[0],10),cb=Number.parseInt(Xn[1],10),Uc=10,_b=10,db=xc>Uc,fb=xc===Uc&&cb>=_b;Qn.IS_SUPPORT_READDIR_WITH_FILE_TYPES=db||fb});var Nc=Y(Jn=>{"use strict";Object.defineProperty(Jn,"__esModule",{value:!0});Jn.createDirentFromStats=void 0;var to=class{constructor(t,e){this.name=t,this.isBlockDevice=e.isBlockDevice.bind(e),this.isCharacterDevice=e.isCharacterDevice.bind(e),this.isDirectory=e.isDirectory.bind(e),this.isFIFO=e.isFIFO.bind(e),this.isFile=e.isFile.bind(e),this.isSocket=e.isSocket.bind(e),this.isSymbolicLink=e.isSymbolicLink.bind(e)}};function pb(r,t){return new to(r,t)}Jn.createDirentFromStats=pb});var ro=Y(Zn=>{"use strict";Object.defineProperty(Zn,"__esModule",{value:!0});Zn.fs=void 0;var hb=Nc();Zn.fs=hb});var no=Y(ei=>{"use strict";Object.defineProperty(ei,"__esModule",{value:!0});ei.joinPathSegments=void 0;function bb(r,t,e){return r.endsWith(e)?r+t:r+e+t}ei.joinPathSegments=bb});var $c=Y(Dt=>{"use strict";Object.defineProperty(Dt,"__esModule",{value:!0});Dt.readdir=Dt.readdirWithFileTypes=Dt.read=void 0;var mb=Kt(),Bc=Oc(),gb=eo(),Hc=ro(),Wc=no();function yb(r,t,e){if(!t.stats&&gb.IS_SUPPORT_READDIR_WITH_FILE_TYPES){Yc(r,t,e);return}Gc(r,t,e)}Dt.read=yb;function Yc(r,t,e){t.fs.readdir(r,{withFileTypes:!0},(n,s)=>{if(n!==null){ti(e,n);return}let u=s.map(h=>({dirent:h,name:h.name,path:Wc.joinPathSegments(r,h.name,t.pathSegmentSeparator)}));if(!t.followSymbolicLinks){io(e,u);return}let d=u.map(h=>vb(h,t));Bc(d,(h,g)=>{if(h!==null){ti(e,h);return}io(e,g)})})}Dt.readdirWithFileTypes=Yc;function vb(r,t){return e=>{if(!r.dirent.isSymbolicLink()){e(null,r);return}t.fs.stat(r.path,(n,s)=>{if(n!==null){if(t.throwErrorOnBrokenSymbolicLink){e(n);return}e(null,r);return}r.dirent=Hc.fs.createDirentFromStats(r.name,s),e(null,r)})}}function Gc(r,t,e){t.fs.readdir(r,(n,s)=>{if(n!==null){ti(e,n);return}let u=s.map(d=>{let h=Wc.joinPathSegments(r,d,t.pathSegmentSeparator);return g=>{mb.stat(h,t.fsStatSettings,(M,y)=>{if(M!==null){g(M);return}let L={name:d,path:h,dirent:Hc.fs.createDirentFromStats(d,y)};t.stats&&(L.stats=y),g(null,L)})}});Bc(u,(d,h)=>{if(d!==null){ti(e,d);return}io(e,h)})})}Dt.readdir=Gc;function ti(r,t){r(t)}function io(r,t){r(null,t)}});var Xc=Y(It=>{"use strict";Object.defineProperty(It,"__esModule",{value:!0});It.readdir=It.readdirWithFileTypes=It.read=void 0;var Sb=Kt(),wb=eo(),qc=ro(),zc=no();function Eb(r,t){return!t.stats&&wb.IS_SUPPORT_READDIR_WITH_FILE_TYPES?Vc(r,t):Kc(r,t)}It.read=Eb;function Vc(r,t){return t.fs.readdirSync(r,{withFileTypes:!0}).map(n=>{let s={dirent:n,name:n.name,path:zc.joinPathSegments(r,n.name,t.pathSegmentSeparator)};if(s.dirent.isSymbolicLink()&&t.followSymbolicLinks)try{let u=t.fs.statSync(s.path);s.dirent=qc.fs.createDirentFromStats(s.name,u)}catch(u){if(t.throwErrorOnBrokenSymbolicLink)throw u}return s})}It.readdirWithFileTypes=Vc;function Kc(r,t){return t.fs.readdirSync(r).map(n=>{let s=zc.joinPathSegments(r,n,t.pathSegmentSeparator),u=Sb.statSync(s,t.fsStatSettings),d={name:n,path:s,dirent:qc.fs.createDirentFromStats(n,u)};return t.stats&&(d.stats=u),d})}It.readdir=Kc});var Qc=Y(Ft=>{"use strict";Object.defineProperty(Ft,"__esModule",{value:!0});Ft.createFileSystemAdapter=Ft.FILE_SYSTEM_ADAPTER=void 0;var hr=require("fs");Ft.FILE_SYSTEM_ADAPTER={lstat:hr.lstat,stat:hr.stat,lstatSync:hr.lstatSync,statSync:hr.statSync,readdir:hr.readdir,readdirSync:hr.readdirSync};function Cb(r){return r===void 0?Ft.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},Ft.FILE_SYSTEM_ADAPTER),r)}Ft.createFileSystemAdapter=Cb});var Jc=Y(so=>{"use strict";Object.defineProperty(so,"__esModule",{value:!0});var Tb=require("path"),kb=Kt(),Rb=Qc(),ao=class{constructor(t={}){this._options=t,this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!1),this.fs=Rb.createFileSystemAdapter(this._options.fs),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,Tb.sep),this.stats=this._getValue(this._options.stats,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0),this.fsStatSettings=new kb.Settings({followSymbolicLink:this.followSymbolicLinks,fs:this.fs,throwErrorOnBrokenSymbolicLink:this.throwErrorOnBrokenSymbolicLink})}_getValue(t,e){return t??e}};so.default=ao});var ri=Y(Lt=>{"use strict";Object.defineProperty(Lt,"__esModule",{value:!0});Lt.Settings=Lt.scandirSync=Lt.scandir=void 0;var Zc=$c(),Ab=Xc(),oo=Jc();Lt.Settings=oo.default;function jb(r,t,e){if(typeof t=="function"){Zc.read(r,lo(),t);return}Zc.read(r,lo(t),e)}Lt.scandir=jb;function Mb(r,t){let e=lo(t);return Ab.read(r,e)}Lt.scandirSync=Mb;function lo(r={}){return r instanceof oo.default?r:new oo.default(r)}});var t_=Y((Jg,e_)=>{"use strict";function Db(r){var t=new r,e=t;function n(){var u=t;return u.next?t=u.next:(t=new r,e=t),u.next=null,u}function s(u){e.next=u,e=u}return{get:n,release:s}}e_.exports=Db});var n_=Y((Zg,uo)=>{"use strict";var Ib=t_();function r_(r,t,e){if(typeof r=="function"&&(e=t,t=r,r=null),e<1)throw new Error("fastqueue concurrency must be greater than 1");var n=Ib(Fb),s=null,u=null,d=0,h=null,g={push:W,drain:st,saturated:st,pause:y,paused:!1,concurrency:e,running:M,resume:z,idle:H,length:L,getQueue:A,unshift:J,empty:st,kill:he,killAndDrain:fe,error:we};return g;function M(){return d}function y(){g.paused=!0}function L(){for(var ie=s,ue=0;ie;)ie=ie.next,ue++;return ue}function A(){for(var ie=s,ue=[];ie;)ue.push(ie.value),ie=ie.next;return ue}function z(){if(!!g.paused){g.paused=!1;for(var ie=0;ie<g.concurrency;ie++)d++,X()}}function H(){return d===0&&g.length()===0}function W(ie,ue){var te=n.get();te.context=r,te.release=X,te.value=ie,te.callback=ue||st,te.errorHandler=h,d===g.concurrency||g.paused?u?(u.next=te,u=te):(s=te,u=te,g.saturated()):(d++,t.call(r,te.value,te.worked))}function J(ie,ue){var te=n.get();te.context=r,te.release=X,te.value=ie,te.callback=ue||st,d===g.concurrency||g.paused?s?(te.next=s,s=te):(s=te,u=te,g.saturated()):(d++,t.call(r,te.value,te.worked))}function X(ie){ie&&n.release(ie);var ue=s;ue?g.paused?d--:(u===s&&(u=null),s=ue.next,ue.next=null,t.call(r,ue.value,ue.worked),u===null&&g.empty()):--d===0&&g.drain()}function he(){s=null,u=null,g.drain=st}function fe(){s=null,u=null,g.drain(),g.drain=st}function we(ie){h=ie}}function st(){}function Fb(){this.value=null,this.callback=st,this.next=null,this.release=st,this.context=null,this.errorHandler=null;var r=this;this.worked=function(e,n){var s=r.callback,u=r.errorHandler,d=r.value;r.value=null,r.callback=st,r.errorHandler&&u(e,d),s.call(r.context,e,n),r.release(r)}}function Lb(r,t,e){typeof r=="function"&&(e=t,t=r,r=null);function n(y,L){t.call(this,y).then(function(A){L(null,A)},L)}var s=r_(r,n,e),u=s.push,d=s.unshift;return s.push=h,s.unshift=g,s.drained=M,s;function h(y){var L=new Promise(function(A,z){u(y,function(H,W){if(H){z(H);return}A(W)})});return L.catch(st),L}function g(y){var L=new Promise(function(A,z){d(y,function(H,W){if(H){z(H);return}A(W)})});return L.catch(st),L}function M(){var y=s.drain,L=new Promise(function(A){s.drain=function(){y(),A()}});return L}}uo.exports=r_;uo.exports.promise=Lb});var ni=Y(ht=>{"use strict";Object.defineProperty(ht,"__esModule",{value:!0});ht.joinPathSegments=ht.replacePathSegmentSeparator=ht.isAppliedFilter=ht.isFatalError=void 0;function Pb(r,t){return r.errorFilter===null?!0:!r.errorFilter(t)}ht.isFatalError=Pb;function Ob(r,t){return r===null||r(t)}ht.isAppliedFilter=Ob;function xb(r,t){return r.split(/[/\\]/).join(t)}ht.replacePathSegmentSeparator=xb;function Ub(r,t,e){return r===""?t:r.endsWith(e)?r+t:r+e+t}ht.joinPathSegments=Ub});var fo=Y(_o=>{"use strict";Object.defineProperty(_o,"__esModule",{value:!0});var Nb=ni(),co=class{constructor(t,e){this._root=t,this._settings=e,this._root=Nb.replacePathSegmentSeparator(t,e.pathSegmentSeparator)}};_o.default=co});var bo=Y(ho=>{"use strict";Object.defineProperty(ho,"__esModule",{value:!0});var Bb=require("events"),Hb=ri(),Wb=n_(),ii=ni(),Yb=fo(),po=class extends Yb.default{constructor(t,e){super(t,e),this._settings=e,this._scandir=Hb.scandir,this._emitter=new Bb.EventEmitter,this._queue=Wb(this._worker.bind(this),this._settings.concurrency),this._isFatalError=!1,this._isDestroyed=!1,this._queue.drain=()=>{this._isFatalError||this._emitter.emit("end")}}read(){return this._isFatalError=!1,this._isDestroyed=!1,setImmediate(()=>{this._pushToQueue(this._root,this._settings.basePath)}),this._emitter}get isDestroyed(){return this._isDestroyed}destroy(){if(this._isDestroyed)throw new Error("The reader is already destroyed");this._isDestroyed=!0,this._queue.killAndDrain()}onEntry(t){this._emitter.on("entry",t)}onError(t){this._emitter.once("error",t)}onEnd(t){this._emitter.once("end",t)}_pushToQueue(t,e){let n={directory:t,base:e};this._queue.push(n,s=>{s!==null&&this._handleError(s)})}_worker(t,e){this._scandir(t.directory,this._settings.fsScandirSettings,(n,s)=>{if(n!==null){e(n,void 0);return}for(let u of s)this._handleEntry(u,t.base);e(null,void 0)})}_handleError(t){this._isDestroyed||!ii.isFatalError(this._settings,t)||(this._isFatalError=!0,this._isDestroyed=!0,this._emitter.emit("error",t))}_handleEntry(t,e){if(this._isDestroyed||this._isFatalError)return;let n=t.path;e!==void 0&&(t.path=ii.joinPathSegments(e,t.name,this._settings.pathSegmentSeparator)),ii.isAppliedFilter(this._settings.entryFilter,t)&&this._emitEntry(t),t.dirent.isDirectory()&&ii.isAppliedFilter(this._settings.deepFilter,t)&&this._pushToQueue(n,e===void 0?void 0:t.path)}_emitEntry(t){this._emitter.emit("entry",t)}};ho.default=po});var i_=Y(go=>{"use strict";Object.defineProperty(go,"__esModule",{value:!0});var Gb=bo(),mo=class{constructor(t,e){this._root=t,this._settings=e,this._reader=new Gb.default(this._root,this._settings),this._storage=[]}read(t){this._reader.onError(e=>{$b(t,e)}),this._reader.onEntry(e=>{this._storage.push(e)}),this._reader.onEnd(()=>{qb(t,this._storage)}),this._reader.read()}};go.default=mo;function $b(r,t){r(t)}function qb(r,t){r(null,t)}});var a_=Y(vo=>{"use strict";Object.defineProperty(vo,"__esModule",{value:!0});var zb=require("stream"),Vb=bo(),yo=class{constructor(t,e){this._root=t,this._settings=e,this._reader=new Vb.default(this._root,this._settings),this._stream=new zb.Readable({objectMode:!0,read:()=>{},destroy:()=>{this._reader.isDestroyed||this._reader.destroy()}})}read(){return this._reader.onError(t=>{this._stream.emit("error",t)}),this._reader.onEntry(t=>{this._stream.push(t)}),this._reader.onEnd(()=>{this._stream.push(null)}),this._reader.read(),this._stream}};vo.default=yo});var s_=Y(wo=>{"use strict";Object.defineProperty(wo,"__esModule",{value:!0});var Kb=ri(),ai=ni(),Xb=fo(),So=class extends Xb.default{constructor(){super(...arguments),this._scandir=Kb.scandirSync,this._storage=[],this._queue=new Set}read(){return this._pushToQueue(this._root,this._settings.basePath),this._handleQueue(),this._storage}_pushToQueue(t,e){this._queue.add({directory:t,base:e})}_handleQueue(){for(let t of this._queue.values())this._handleDirectory(t.directory,t.base)}_handleDirectory(t,e){try{let n=this._scandir(t,this._settings.fsScandirSettings);for(let s of n)this._handleEntry(s,e)}catch(n){this._handleError(n)}}_handleError(t){if(!!ai.isFatalError(this._settings,t))throw t}_handleEntry(t,e){let n=t.path;e!==void 0&&(t.path=ai.joinPathSegments(e,t.name,this._settings.pathSegmentSeparator)),ai.isAppliedFilter(this._settings.entryFilter,t)&&this._pushToStorage(t),t.dirent.isDirectory()&&ai.isAppliedFilter(this._settings.deepFilter,t)&&this._pushToQueue(n,e===void 0?void 0:t.path)}_pushToStorage(t){this._storage.push(t)}};wo.default=So});var o_=Y(Co=>{"use strict";Object.defineProperty(Co,"__esModule",{value:!0});var Qb=s_(),Eo=class{constructor(t,e){this._root=t,this._settings=e,this._reader=new Qb.default(this._root,this._settings)}read(){return this._reader.read()}};Co.default=Eo});var l_=Y(ko=>{"use strict";Object.defineProperty(ko,"__esModule",{value:!0});var Jb=require("path"),Zb=ri(),To=class{constructor(t={}){this._options=t,this.basePath=this._getValue(this._options.basePath,void 0),this.concurrency=this._getValue(this._options.concurrency,Number.POSITIVE_INFINITY),this.deepFilter=this._getValue(this._options.deepFilter,null),this.entryFilter=this._getValue(this._options.entryFilter,null),this.errorFilter=this._getValue(this._options.errorFilter,null),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,Jb.sep),this.fsScandirSettings=new Zb.Settings({followSymbolicLinks:this._options.followSymbolicLinks,fs:this._options.fs,pathSegmentSeparator:this._options.pathSegmentSeparator,stats:this._options.stats,throwErrorOnBrokenSymbolicLink:this._options.throwErrorOnBrokenSymbolicLink})}_getValue(t,e){return t??e}};ko.default=To});var oi=Y(bt=>{"use strict";Object.defineProperty(bt,"__esModule",{value:!0});bt.Settings=bt.walkStream=bt.walkSync=bt.walk=void 0;var u_=i_(),em=a_(),tm=o_(),Ro=l_();bt.Settings=Ro.default;function rm(r,t,e){if(typeof t=="function"){new u_.default(r,si()).read(t);return}new u_.default(r,si(t)).read(e)}bt.walk=rm;function nm(r,t){let e=si(t);return new tm.default(r,e).read()}bt.walkSync=nm;function im(r,t){let e=si(t);return new em.default(r,e).read()}bt.walkStream=im;function si(r={}){return r instanceof Ro.default?r:new Ro.default(r)}});var li=Y(jo=>{"use strict";Object.defineProperty(jo,"__esModule",{value:!0});var am=require("path"),sm=Kt(),c_=Ct(),Ao=class{constructor(t){this._settings=t,this._fsStatSettings=new sm.Settings({followSymbolicLink:this._settings.followSymbolicLinks,fs:this._settings.fs,throwErrorOnBrokenSymbolicLink:this._settings.followSymbolicLinks})}_getFullEntryPath(t){return am.resolve(this._settings.cwd,t)}_makeEntry(t,e){let n={name:e,path:e,dirent:c_.fs.createDirentFromStats(e,t)};return this._settings.stats&&(n.stats=t),n}_isFatalError(t){return!c_.errno.isEnoentCodeError(t)&&!this._settings.suppressErrors}};jo.default=Ao});var Io=Y(Do=>{"use strict";Object.defineProperty(Do,"__esModule",{value:!0});var om=require("stream"),lm=Kt(),um=oi(),cm=li(),Mo=class extends cm.default{constructor(){super(...arguments),this._walkStream=um.walkStream,this._stat=lm.stat}dynamic(t,e){return this._walkStream(t,e)}static(t,e){let n=t.map(this._getFullEntryPath,this),s=new om.PassThrough({objectMode:!0});s._write=(u,d,h)=>this._getEntry(n[u],t[u],e).then(g=>{g!==null&&e.entryFilter(g)&&s.push(g),u===n.length-1&&s.end(),h()}).catch(h);for(let u=0;u<n.length;u++)s.write(u);return s}_getEntry(t,e,n){return this._getStat(t).then(s=>this._makeEntry(s,e)).catch(s=>{if(n.errorFilter(s))return null;throw s})}_getStat(t){return new Promise((e,n)=>{this._stat(t,this._fsStatSettings,(s,u)=>s===null?e(u):n(s))})}};Do.default=Mo});var __=Y(Lo=>{"use strict";Object.defineProperty(Lo,"__esModule",{value:!0});var _m=oi(),dm=li(),fm=Io(),Fo=class extends dm.default{constructor(){super(...arguments),this._walkAsync=_m.walk,this._readerStream=new fm.default(this._settings)}dynamic(t,e){return new Promise((n,s)=>{this._walkAsync(t,e,(u,d)=>{u===null?n(d):s(u)})})}async static(t,e){let n=[],s=this._readerStream.static(t,e);return new Promise((u,d)=>{s.once("error",d),s.on("data",h=>n.push(h)),s.once("end",()=>u(n))})}};Lo.default=Fo});var d_=Y(Oo=>{"use strict";Object.defineProperty(Oo,"__esModule",{value:!0});var br=Ct(),Po=class{constructor(t,e,n){this._patterns=t,this._settings=e,this._micromatchOptions=n,this._storage=[],this._fillStorage()}_fillStorage(){let t=br.pattern.expandPatternsWithBraceExpansion(this._patterns);for(let e of t){let n=this._getPatternSegments(e),s=this._splitSegmentsIntoSections(n);this._storage.push({complete:s.length<=1,pattern:e,segments:n,sections:s})}}_getPatternSegments(t){return br.pattern.getPatternParts(t,this._micromatchOptions).map(n=>br.pattern.isDynamicPattern(n,this._settings)?{dynamic:!0,pattern:n,patternRe:br.pattern.makeRe(n,this._micromatchOptions)}:{dynamic:!1,pattern:n})}_splitSegmentsIntoSections(t){return br.array.splitWhen(t,e=>e.dynamic&&br.pattern.hasGlobStar(e.pattern))}};Oo.default=Po});var f_=Y(Uo=>{"use strict";Object.defineProperty(Uo,"__esModule",{value:!0});var pm=d_(),xo=class extends pm.default{match(t){let e=t.split("/"),n=e.length,s=this._storage.filter(u=>!u.complete||u.segments.length>n);for(let u of s){let d=u.sections[0];if(!u.complete&&n>d.length||e.every((g,M)=>{let y=u.segments[M];return!!(y.dynamic&&y.patternRe.test(g)||!y.dynamic&&y.pattern===g)}))return!0}return!1}};Uo.default=xo});var p_=Y(Bo=>{"use strict";Object.defineProperty(Bo,"__esModule",{value:!0});var ui=Ct(),hm=f_(),No=class{constructor(t,e){this._settings=t,this._micromatchOptions=e}getFilter(t,e,n){let s=this._getMatcher(e),u=this._getNegativePatternsRe(n);return d=>this._filter(t,d,s,u)}_getMatcher(t){return new hm.default(t,this._settings,this._micromatchOptions)}_getNegativePatternsRe(t){let e=t.filter(ui.pattern.isAffectDepthOfReadingPattern);return ui.pattern.convertPatternsToRe(e,this._micromatchOptions)}_filter(t,e,n,s){if(this._isSkippedByDeep(t,e.path)||this._isSkippedSymbolicLink(e))return!1;let u=ui.path.removeLeadingDotSegment(e.path);return this._isSkippedByPositivePatterns(u,n)?!1:this._isSkippedByNegativePatterns(u,s)}_isSkippedByDeep(t,e){return this._settings.deep===1/0?!1:this._getEntryLevel(t,e)>=this._settings.deep}_getEntryLevel(t,e){let n=e.split("/").length;if(t==="")return n;let s=t.split("/").length;return n-s}_isSkippedSymbolicLink(t){return!this._settings.followSymbolicLinks&&t.dirent.isSymbolicLink()}_isSkippedByPositivePatterns(t,e){return!this._settings.baseNameMatch&&!e.match(t)}_isSkippedByNegativePatterns(t,e){return!ui.pattern.matchAny(t,e)}};Bo.default=No});var h_=Y(Wo=>{"use strict";Object.defineProperty(Wo,"__esModule",{value:!0});var Xt=Ct(),Ho=class{constructor(t,e){this._settings=t,this._micromatchOptions=e,this.index=new Map}getFilter(t,e){let n=Xt.pattern.convertPatternsToRe(t,this._micromatchOptions),s=Xt.pattern.convertPatternsToRe(e,this._micromatchOptions);return u=>this._filter(u,n,s)}_filter(t,e,n){if(this._settings.unique&&this._isDuplicateEntry(t)||this._onlyFileFilter(t)||this._onlyDirectoryFilter(t)||this._isSkippedByAbsoluteNegativePatterns(t.path,n))return!1;let s=this._settings.baseNameMatch?t.name:t.path,u=t.dirent.isDirectory(),d=this._isMatchToPatterns(s,e,u)&&!this._isMatchToPatterns(t.path,n,u);return this._settings.unique&&d&&this._createIndexRecord(t),d}_isDuplicateEntry(t){return this.index.has(t.path)}_createIndexRecord(t){this.index.set(t.path,void 0)}_onlyFileFilter(t){return this._settings.onlyFiles&&!t.dirent.isFile()}_onlyDirectoryFilter(t){return this._settings.onlyDirectories&&!t.dirent.isDirectory()}_isSkippedByAbsoluteNegativePatterns(t,e){if(!this._settings.absolute)return!1;let n=Xt.path.makeAbsolute(this._settings.cwd,t);return Xt.pattern.matchAny(n,e)}_isMatchToPatterns(t,e,n){let s=Xt.path.removeLeadingDotSegment(t),u=Xt.pattern.matchAny(s,e);return!u&&n?Xt.pattern.matchAny(s+"/",e):u}};Wo.default=Ho});var b_=Y(Go=>{"use strict";Object.defineProperty(Go,"__esModule",{value:!0});var bm=Ct(),Yo=class{constructor(t){this._settings=t}getFilter(){return t=>this._isNonFatalError(t)}_isNonFatalError(t){return bm.errno.isEnoentCodeError(t)||this._settings.suppressErrors}};Go.default=Yo});var g_=Y(qo=>{"use strict";Object.defineProperty(qo,"__esModule",{value:!0});var m_=Ct(),$o=class{constructor(t){this._settings=t}getTransformer(){return t=>this._transform(t)}_transform(t){let e=t.path;return this._settings.absolute&&(e=m_.path.makeAbsolute(this._settings.cwd,e),e=m_.path.unixify(e)),this._settings.markDirectories&&t.dirent.isDirectory()&&(e+="/"),this._settings.objectMode?Object.assign(Object.assign({},t),{path:e}):e}};qo.default=$o});var ci=Y(Vo=>{"use strict";Object.defineProperty(Vo,"__esModule",{value:!0});var mm=require("path"),gm=p_(),ym=h_(),vm=b_(),Sm=g_(),zo=class{constructor(t){this._settings=t,this.errorFilter=new vm.default(this._settings),this.entryFilter=new ym.default(this._settings,this._getMicromatchOptions()),this.deepFilter=new gm.default(this._settings,this._getMicromatchOptions()),this.entryTransformer=new Sm.default(this._settings)}_getRootDirectory(t){return mm.resolve(this._settings.cwd,t.base)}_getReaderOptions(t){let e=t.base==="."?"":t.base;return{basePath:e,pathSegmentSeparator:"/",concurrency:this._settings.concurrency,deepFilter:this.deepFilter.getFilter(e,t.positive,t.negative),entryFilter:this.entryFilter.getFilter(t.positive,t.negative),errorFilter:this.errorFilter.getFilter(),followSymbolicLinks:this._settings.followSymbolicLinks,fs:this._settings.fs,stats:this._settings.stats,throwErrorOnBrokenSymbolicLink:this._settings.throwErrorOnBrokenSymbolicLink,transform:this.entryTransformer.getTransformer()}}_getMicromatchOptions(){return{dot:this._settings.dot,matchBase:this._settings.baseNameMatch,nobrace:!this._settings.braceExpansion,nocase:!this._settings.caseSensitiveMatch,noext:!this._settings.extglob,noglobstar:!this._settings.globstar,posix:!0,strictSlashes:!1}}};Vo.default=zo});var y_=Y(Xo=>{"use strict";Object.defineProperty(Xo,"__esModule",{value:!0});var wm=__(),Em=ci(),Ko=class extends Em.default{constructor(){super(...arguments),this._reader=new wm.default(this._settings)}async read(t){let e=this._getRootDirectory(t),n=this._getReaderOptions(t);return(await this.api(e,t,n)).map(u=>n.transform(u))}api(t,e,n){return e.dynamic?this._reader.dynamic(t,n):this._reader.static(e.patterns,n)}};Xo.default=Ko});var v_=Y(Jo=>{"use strict";Object.defineProperty(Jo,"__esModule",{value:!0});var Cm=require("stream"),Tm=Io(),km=ci(),Qo=class extends km.default{constructor(){super(...arguments),this._reader=new Tm.default(this._settings)}read(t){let e=this._getRootDirectory(t),n=this._getReaderOptions(t),s=this.api(e,t,n),u=new Cm.Readable({objectMode:!0,read:()=>{}});return s.once("error",d=>u.emit("error",d)).on("data",d=>u.emit("data",n.transform(d))).once("end",()=>u.emit("end")),u.once("close",()=>s.destroy()),u}api(t,e,n){return e.dynamic?this._reader.dynamic(t,n):this._reader.static(e.patterns,n)}};Jo.default=Qo});var S_=Y(el=>{"use strict";Object.defineProperty(el,"__esModule",{value:!0});var Rm=Kt(),Am=oi(),jm=li(),Zo=class extends jm.default{constructor(){super(...arguments),this._walkSync=Am.walkSync,this._statSync=Rm.statSync}dynamic(t,e){return this._walkSync(t,e)}static(t,e){let n=[];for(let s of t){let u=this._getFullEntryPath(s),d=this._getEntry(u,s,e);d===null||!e.entryFilter(d)||n.push(d)}return n}_getEntry(t,e,n){try{let s=this._getStat(t);return this._makeEntry(s,e)}catch(s){if(n.errorFilter(s))return null;throw s}}_getStat(t){return this._statSync(t,this._fsStatSettings)}};el.default=Zo});var w_=Y(rl=>{"use strict";Object.defineProperty(rl,"__esModule",{value:!0});var Mm=S_(),Dm=ci(),tl=class extends Dm.default{constructor(){super(...arguments),this._reader=new Mm.default(this._settings)}read(t){let e=this._getRootDirectory(t),n=this._getReaderOptions(t);return this.api(e,t,n).map(n.transform)}api(t,e,n){return e.dynamic?this._reader.dynamic(t,n):this._reader.static(e.patterns,n)}};rl.default=tl});var E_=Y(gr=>{"use strict";Object.defineProperty(gr,"__esModule",{value:!0});gr.DEFAULT_FILE_SYSTEM_ADAPTER=void 0;var mr=require("fs"),Im=require("os"),Fm=Math.max(Im.cpus().length,1);gr.DEFAULT_FILE_SYSTEM_ADAPTER={lstat:mr.lstat,lstatSync:mr.lstatSync,stat:mr.stat,statSync:mr.statSync,readdir:mr.readdir,readdirSync:mr.readdirSync};var nl=class{constructor(t={}){this._options=t,this.absolute=this._getValue(this._options.absolute,!1),this.baseNameMatch=this._getValue(this._options.baseNameMatch,!1),this.braceExpansion=this._getValue(this._options.braceExpansion,!0),this.caseSensitiveMatch=this._getValue(this._options.caseSensitiveMatch,!0),this.concurrency=this._getValue(this._options.concurrency,Fm),this.cwd=this._getValue(this._options.cwd,process.cwd()),this.deep=this._getValue(this._options.deep,1/0),this.dot=this._getValue(this._options.dot,!1),this.extglob=this._getValue(this._options.extglob,!0),this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!0),this.fs=this._getFileSystemMethods(this._options.fs),this.globstar=this._getValue(this._options.globstar,!0),this.ignore=this._getValue(this._options.ignore,[]),this.markDirectories=this._getValue(this._options.markDirectories,!1),this.objectMode=this._getValue(this._options.objectMode,!1),this.onlyDirectories=this._getValue(this._options.onlyDirectories,!1),this.onlyFiles=this._getValue(this._options.onlyFiles,!0),this.stats=this._getValue(this._options.stats,!1),this.suppressErrors=this._getValue(this._options.suppressErrors,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!1),this.unique=this._getValue(this._options.unique,!0),this.onlyDirectories&&(this.onlyFiles=!1),this.stats&&(this.objectMode=!0)}_getValue(t,e){return t===void 0?e:t}_getFileSystemMethods(t={}){return Object.assign(Object.assign({},gr.DEFAULT_FILE_SYSTEM_ADAPTER),t)}};gr.default=nl});var R_=Y((Cy,k_)=>{"use strict";var C_=Ec(),T_=Tc(),Lm=y_(),Pm=v_(),Om=w_(),il=E_(),Qt=Ct();async function al(r,t){yr(r);let e=sl(r,Lm.default,t),n=await Promise.all(e);return Qt.array.flatten(n)}(function(r){function t(d,h){yr(d);let g=sl(d,Om.default,h);return Qt.array.flatten(g)}r.sync=t;function e(d,h){yr(d);let g=sl(d,Pm.default,h);return Qt.stream.merge(g)}r.stream=e;function n(d,h){yr(d);let g=T_.transform([].concat(d)),M=new il.default(h);return C_.generate(g,M)}r.generateTasks=n;function s(d,h){yr(d);let g=new il.default(h);return Qt.pattern.isDynamicPattern(d,g)}r.isDynamicPattern=s;function u(d){return yr(d),Qt.path.escape(d)}r.escapePath=u})(al||(al={}));function sl(r,t,e){let n=T_.transform([].concat(r)),s=new il.default(e),u=C_.generate(n,s),d=new t(s);return u.map(d.read,d)}function yr(r){if(![].concat(r).every(n=>Qt.string.isString(n)&&!Qt.string.isEmpty(n)))throw new TypeError("Patterns must be a string (non empty) or an array of strings")}k_.exports=al});var xm={};Af(xm,{registerWorker:()=>j_});module.exports=jf(xm);var de=Gt(require("apache-arrow"));function ur(r){switch(r.typeId){case de.Type.Binary:return{sqlType:"binary"};case de.Type.Bool:return{sqlType:"bool"};case de.Type.Date:return{sqlType:"date"};case de.Type.DateDay:return{sqlType:"date32[d]"};case de.Type.DateMillisecond:return{sqlType:"date64[ms]"};case de.Type.Decimal:{let t=r;return{sqlType:"decimal",precision:t.precision,scale:t.scale}}case de.Type.Float:return{sqlType:"float"};case de.Type.Float16:return{sqlType:"float16"};case de.Type.Float32:return{sqlType:"float32"};case de.Type.Float64:return{sqlType:"float64"};case de.Type.Int:return{sqlType:"int32"};case de.Type.Int16:return{sqlType:"int16"};case de.Type.Int32:return{sqlType:"int32"};case de.Type.Int64:return{sqlType:"int64"};case de.Type.Uint16:return{sqlType:"uint16"};case de.Type.Uint32:return{sqlType:"uint32"};case de.Type.Uint64:return{sqlType:"uint64"};case de.Type.Uint8:return{sqlType:"uint8"};case de.Type.IntervalDayTime:return{sqlType:"interval[dt]"};case de.Type.IntervalYearMonth:return{sqlType:"interval[m]"};case de.Type.List:return{sqlType:"list",valueType:ur(r.valueType)};case de.Type.FixedSizeBinary:return{sqlType:"fixedsizebinary",byteWidth:r.byteWidth};case de.Type.Null:return{sqlType:"null"};case de.Type.Utf8:return{sqlType:"utf8"};case de.Type.Struct:return{sqlType:"struct",fields:r.children.map(e=>kn(e.name,e.type))};case de.Type.Map:{let t=r;return{sqlType:"map",keyType:ur(t.keyType),valueType:ur(t.valueType)}}case de.Type.Time:return{sqlType:"time[s]"};case de.Type.TimeMicrosecond:return{sqlType:"time[us]"};case de.Type.TimeMillisecond:return{sqlType:"time[ms]"};case de.Type.TimeNanosecond:return{sqlType:"time[ns]"};case de.Type.TimeSecond:return{sqlType:"time[s]"};case de.Type.Timestamp:return{sqlType:"timestamp",timezone:r.timezone||void 0};case de.Type.TimestampSecond:return{sqlType:"timestamp[s]",timezone:r.timezone||void 0};case de.Type.TimestampMicrosecond:return{sqlType:"timestamp[us]",timezone:r.timezone||void 0};case de.Type.TimestampNanosecond:return{sqlType:"timestamp[ns]",timezone:r.timezone||void 0};case de.Type.TimestampMillisecond:return{sqlType:"timestamp[ms]",timezone:r.timezone||void 0}}throw new Error(`unsupported arrow type: ${r.toString()}`)}function kn(r,t){let e=ur(t);return e.name=r,e}var Rn=class{constructor(){this._bindings=null;this._nextMessageId=0}log(t){this.postMessage({messageId:this._nextMessageId++,requestId:0,type:"LOG",data:t},[])}sendOK(t){this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"OK",data:null},[])}failWith(t,e){let n={name:e.name,message:e.message,stack:e.stack||void 0};this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"ERROR",data:n},[])}async onMessage(t){switch(t.type){case"PING":this.sendOK(t);return;case"INSTANTIATE":this._bindings!=null&&this.failWith(t,new Error("duckdb already initialized"));try{this._bindings=await this.instantiate(t.data[0],t.data[1],e=>{this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"INSTANTIATE_PROGRESS",data:e},[])}),this.sendOK(t)}catch(e){this._bindings=null,this.failWith(t,e)}return;default:break}if(!this._bindings)return this.failWith(t,new Error("duckdb is not initialized"));try{switch(t.type){case"GET_VERSION":this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"VERSION_STRING",data:this._bindings.getVersion()},[]);break;case"GET_FEATURE_FLAGS":this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FEATURE_FLAGS",data:this._bindings.getFeatureFlags()},[]);break;case"RESET":this._bindings.reset(),this.sendOK(t);break;case"OPEN":this._bindings.open(t.data),this.sendOK(t);break;case"DROP_FILE":this._bindings.dropFile(t.data),this.sendOK(t);break;case"DROP_FILES":this._bindings.dropFiles(),this.sendOK(t);break;case"FLUSH_FILES":this._bindings.flushFiles(),this.sendOK(t);break;case"CONNECT":{let e=this._bindings.connect();this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"CONNECTION_INFO",data:e.useUnsafe((n,s)=>s)},[]);break}case"DISCONNECT":this._bindings.disconnect(t.data),this.sendOK(t);break;case"CREATE_PREPARED":{let e=this._bindings.createPrepared(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"PREPARED_STATEMENT_ID",data:e},[]);break}case"CLOSE_PREPARED":{this._bindings.closePrepared(t.data[0],t.data[1]),this.sendOK(t);break}case"RUN_PREPARED":{let e=this._bindings.runPrepared(t.data[0],t.data[1],t.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT",data:e},[e.buffer]);break}case"RUN_QUERY":{let e=this._bindings.runQuery(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT",data:e},[e.buffer]);break}case"SEND_PREPARED":{let e=this._bindings.sendPrepared(t.data[0],t.data[1],t.data[2]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER",data:e},[e.buffer]);break}case"START_PENDING_QUERY":{let e=this._bindings.startPendingQuery(t.data[0],t.data[1]),n=[];e&&n.push(e.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:e},n);break}case"POLL_PENDING_QUERY":{let e=this._bindings.pollPendingQuery(t.data),n=[];e&&n.push(e.buffer),this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_HEADER_OR_NULL",data:e},n);break}case"CANCEL_PENDING_QUERY":{let e=this._bindings.cancelPendingQuery(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"SUCCESS",data:e},[]);break}case"FETCH_QUERY_RESULTS":{let e=this._bindings.fetchQueryResults(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"QUERY_RESULT_CHUNK",data:e},[e.buffer]);break}case"GET_TABLE_NAMES":{let e=this._bindings.getTableNames(t.data[0],t.data[1]);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"TABLE_NAMES",data:e},[]);break}case"GLOB_FILE_INFOS":{let e=this._bindings.globFiles(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_INFOS",data:e},[]);break}case"REGISTER_FILE_URL":this._bindings.registerFileURL(t.data[0],t.data[1],t.data[2],t.data[3]),this.sendOK(t);break;case"REGISTER_FILE_BUFFER":this._bindings.registerFileBuffer(t.data[0],t.data[1]),this.sendOK(t);break;case"REGISTER_FILE_HANDLE":this._bindings.registerFileHandle(t.data[0],t.data[1],t.data[2],t.data[3]),this.sendOK(t);break;case"COPY_FILE_TO_PATH":this._bindings.copyFileToPath(t.data[0],t.data[1]),this.sendOK(t);break;case"COPY_FILE_TO_BUFFER":{let e=this._bindings.copyFileToBuffer(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_BUFFER",data:e},[]);break}case"COLLECT_FILE_STATISTICS":this._bindings.collectFileStatistics(t.data[0],t.data[1]),this.sendOK(t);break;case"EXPORT_FILE_STATISTICS":{this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"FILE_STATISTICS",data:this._bindings.exportFileStatistics(t.data)},[]);break}case"INSERT_ARROW_FROM_IPC_STREAM":{this._bindings.insertArrowFromIPCStream(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"IMPORT_CSV_FROM_PATH":{this._bindings.insertCSVFromPath(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"IMPORT_JSON_FROM_PATH":{this._bindings.insertJSONFromPath(t.data[0],t.data[1],t.data[2]),this.sendOK(t);break}case"TOKENIZE":{let e=this._bindings.tokenize(t.data);this.postMessage({messageId:this._nextMessageId++,requestId:t.messageId,type:"SCRIPT_TOKENS",data:e},[]);break}}}catch(e){return this.failWith(t,e)}}};var An={},Mf=(()=>{var r=An.url;return async function(t={}){var e=typeof t<"u"?t:{},n,s;e.ready=new Promise((i,o)=>{n=i,s=o}),["_main","_malloc","_free","_duckdb_web_clear_response","_duckdb_web_collect_file_stats","_duckdb_web_connect","_duckdb_web_copy_file_to_buffer","_duckdb_web_copy_file_to_path","_duckdb_web_disconnect","_duckdb_web_export_file_stats","_duckdb_web_fail_with","_duckdb_web_flush_file","_duckdb_web_flush_files","_duckdb_web_fs_drop_file","_duckdb_web_fs_drop_files","_duckdb_web_fs_get_file_info_by_id","_duckdb_web_fs_get_file_info_by_name","_duckdb_web_fs_glob_add_path","_duckdb_web_fs_glob_file_infos","_duckdb_web_fs_register_file_buffer","_duckdb_web_fs_register_file_url","_duckdb_web_get_feature_flags","_duckdb_web_get_global_file_info","_duckdb_web_get_tablenames","_duckdb_web_get_version","_duckdb_web_insert_arrow_from_ipc_stream","_duckdb_web_insert_csv_from_path","_duckdb_web_insert_json_from_path","_duckdb_web_open","_duckdb_web_pending_query_cancel","_duckdb_web_pending_query_poll","_duckdb_web_pending_query_start","_duckdb_web_prepared_close","_duckdb_web_prepared_create","_duckdb_web_prepared_run","_duckdb_web_prepared_send","_duckdb_web_query_fetch_results","_duckdb_web_query_run","_duckdb_web_reset","_duckdb_web_tokenize","_duckdb_web_udf_scalar_create","getExceptionMessage","___get_exception_message","___cpp_exception","___cxa_increment_exception_refcount","___cxa_decrement_exception_refcount","___thrown_object_from_unwind_exception","_fflush","onRuntimeInitialized"].forEach(i=>{Object.getOwnPropertyDescriptor(e.ready,i)||Object.defineProperty(e.ready,i,{get:()=>S("You are getting "+i+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"),set:()=>S("You are setting "+i+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")})});var u=Object.assign({},e),d=[],h="./this.program",g=(i,o)=>{throw o},M=typeof window=="object",y=typeof importScripts=="function",L=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",A=!M&&!L&&!y;if(e.ENVIRONMENT)throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");var z="";function H(i){return e.locateFile?e.locateFile(i,z):z+i}var W,J,X,he;if(L){if(typeof process>"u"||!process.release||process.release.name!=="node")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");var fe=process.versions.node,we=fe.split(".").slice(0,3);we=we[0]*1e4+we[1]*100+we[2].split("-")[0]*1;var ie=101900;if(we<101900)throw new Error("This emscripten-generated code requires node v10.19.19.0 (detected v"+fe+")");let{createRequire:i}=await import("module");var ue=i(An.url),te=ue("fs"),Q=ue("path");y?z=Q.dirname(z)+"/":z=ue("url").fileURLToPath(new URL("./",An.url)),W=(o,c)=>(o=Pt(o)?new URL(o):Q.normalize(o),te.readFileSync(o,c?void 0:"utf8")),X=o=>{var c=W(o,!0);return c.buffer||(c=new Uint8Array(c)),R(c.buffer),c},J=(o,c,p,j=!0)=>{o=Pt(o)?new URL(o):Q.normalize(o),te.readFile(o,j?void 0:"utf8",(I,T)=>{I?p(I):c(j?T.buffer:T)})},!e.thisProgram&&process.argv.length>1&&(h=process.argv[1].replace(/\\/g,"/")),d=process.argv.slice(2),g=(o,c)=>{throw process.exitCode=o,c},e.inspect=()=>"[Emscripten Module object]"}else if(A){if(typeof process=="object"&&typeof ue=="function"||typeof window=="object"||typeof importScripts=="function")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");typeof read<"u"&&(W=i=>read(i)),X=i=>{let o;return typeof readbuffer=="function"?new Uint8Array(readbuffer(i)):(o=read(i,"binary"),R(typeof o=="object"),o)},J=(i,o,c)=>{setTimeout(()=>o(X(i)),0)},typeof clearTimeout>"u"&&(globalThis.clearTimeout=i=>{}),typeof scriptArgs<"u"?d=scriptArgs:typeof arguments<"u"&&(d=arguments),typeof quit=="function"&&(g=(i,o)=>{throw setTimeout(()=>{if(!(o instanceof Ot)){let c=o;o&&typeof o=="object"&&o.stack&&(c=[o,o.stack]),w(`exiting due to exception: ${c}`)}quit(i)}),o}),typeof print<"u"&&(typeof console>"u"&&(console={}),console.log=print,console.warn=console.error=typeof printErr<"u"?printErr:print)}else if(M||y){if(y?z=self.location.href:typeof document<"u"&&document.currentScript&&(z=document.currentScript.src),r&&(z=r),z.indexOf("blob:")!==0?z=z.substr(0,z.replace(/[?#].*/,"").lastIndexOf("/")+1):z="",!(typeof window=="object"||typeof importScripts=="function"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");W=i=>{var o=new XMLHttpRequest;return o.open("GET",i,!1),o.send(null),o.responseText},y&&(X=i=>{var o=new XMLHttpRequest;return o.open("GET",i,!1),o.responseType="arraybuffer",o.send(null),new Uint8Array(o.response)}),J=(i,o,c)=>{var p=new XMLHttpRequest;p.open("GET",i,!0),p.responseType="arraybuffer",p.onload=()=>{if(p.status==200||p.status==0&&p.response){o(p.response);return}c()},p.onerror=c,p.send(null)},he=i=>document.title=i}else throw new Error("environment detection error");var $=e.print||console.log.bind(console),w=e.printErr||console.error.bind(console);Object.assign(e,u),u=null,ml(),e.arguments&&(d=e.arguments),xe("arguments","arguments_"),e.thisProgram&&(h=e.thisProgram),xe("thisProgram","thisProgram"),e.quit&&(g=e.quit),xe("quit","quit_"),R(typeof e.memoryInitializerPrefixURL>"u","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"),R(typeof e.pthreadMainPrefixURL>"u","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"),R(typeof e.cdInitializerPrefixURL>"u","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"),R(typeof e.filePackagePrefixURL>"u","Module.filePackagePrefixURL option was removed, use Module.locateFile instead"),R(typeof e.read>"u","Module.read option was removed (modify read_ in JS)"),R(typeof e.readAsync>"u","Module.readAsync option was removed (modify readAsync in JS)"),R(typeof e.readBinary>"u","Module.readBinary option was removed (modify readBinary in JS)"),R(typeof e.setWindowTitle>"u","Module.setWindowTitle option was removed (modify setWindowTitle in JS)"),R(typeof e.TOTAL_MEMORY>"u","Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"),xe("read","read_"),xe("readAsync","readAsync"),xe("readBinary","readBinary"),xe("setWindowTitle","setWindowTitle");var k="IDBFS is no longer included by default; build with -lidbfs.js",ce="PROXYFS is no longer included by default; build with -lproxyfs.js",oe="WORKERFS is no longer included by default; build with -lworkerfs.js",Ce="NODEFS is no longer included by default; build with -lnodefs.js";R(!A,"shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");var v;e.wasmBinary&&(v=e.wasmBinary),xe("wasmBinary","wasmBinary");var C=e.noExitRuntime||!0;xe("noExitRuntime","noExitRuntime"),typeof WebAssembly!="object"&&S("no native wasm support detected");var be,re=!1,Pe;function R(i,o){i||S("Assertion failed"+(o?": "+o:""))}var $e,Ee,Fe,Ie,Je,b,q,mt,B;function me(){var i=be.buffer;e.HEAP8=Ee=new Int8Array(i),e.HEAP16=Ie=new Int16Array(i),e.HEAP32=b=new Int32Array(i),e.HEAPU8=Fe=new Uint8Array(i),e.HEAPU16=Je=new Uint16Array(i),e.HEAPU32=q=new Uint32Array(i),e.HEAPF32=mt=new Float32Array(i),e.HEAPF64=B=new Float64Array(i)}R(!e.STACK_SIZE,"STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time"),R(typeof Int32Array<"u"&&typeof Float64Array<"u"&&Int32Array.prototype.subarray!=null&&Int32Array.prototype.set!=null,"JS engine does not provide full typed array support"),R(!e.wasmMemory,"Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally"),R(!e.INITIAL_MEMORY,"Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically");var U;function le(){var i=wn();R((i&3)==0),i==0&&(i+=4),q[i>>>2]=34821223,q[i+4>>>2]=2310721022,q[0]=1668509029}function pe(){if(!re){var i=wn();i==0&&(i+=4);var o=q[i>>>2],c=q[i+4>>>2];(o!=34821223||c!=2310721022)&&S(`Stack overflow! Stack cookie has been overwritten at ${xt(i)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${xt(c)} ${xt(o)}`),q[0]!=1668509029&&S("Runtime error: The application has corrupted its heap memory area (address zero)!")}}(function(){var i=new Int16Array(1),o=new Int8Array(i.buffer);if(i[0]=25459,o[0]!==115||o[1]!==99)throw"Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)"})();var De=[],ke=[],gt=[],Jt=[],vr=[],kt=!1,Sr=0;function wr(){return C||Sr>0}function _i(){if(e.preRun)for(typeof e.preRun=="function"&&(e.preRun=[e.preRun]);e.preRun.length;)hi(e.preRun.shift());yt(De)}function di(){R(!kt),kt=!0,pe(),yt(ke)}function fi(){pe(),yt(gt)}function pi(){if(pe(),e.postRun)for(typeof e.postRun=="function"&&(e.postRun=[e.postRun]);e.postRun.length;)mi(e.postRun.shift());yt(vr)}function hi(i){De.unshift(i)}function bi(i){ke.unshift(i)}function M_(i){gt.unshift(i)}function D_(i){}function mi(i){vr.unshift(i)}R(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),R(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),R(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),R(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var Be=0,qe=null,ot=null,Ze={};function I_(i){for(var o=i;;){if(!Ze[i])return i;i=o+Math.random()}}function gi(i){Be++,e.monitorRunDependencies&&e.monitorRunDependencies(Be),i?(R(!Ze[i]),Ze[i]=1,qe===null&&typeof setInterval<"u"&&(qe=setInterval(()=>{if(re){clearInterval(qe),qe=null;return}var o=!1;for(var c in Ze)o||(o=!0,w("still waiting on run dependencies:")),w("dependency: "+c);o&&w("(end of list)")},1e4))):w("warning: run dependency added without ID")}function yi(i){if(Be--,e.monitorRunDependencies&&e.monitorRunDependencies(Be),i?(R(Ze[i]),delete Ze[i]):w("warning: run dependency removed without ID"),Be==0&&(qe!==null&&(clearInterval(qe),qe=null),ot)){var o=ot;ot=null,o()}}function S(i){e.onAbort&&e.onAbort(i),i="Aborted("+i+")",w(i),re=!0,Pe=1,kt&&Hr();var o=new WebAssembly.RuntimeError(i);throw s(o),o}var vi="data:application/octet-stream;base64,";function Er(i){return i.startsWith(vi)}function Pt(i){return i.startsWith("file://")}function f(i,o){return function(){var c=i,p=o;return o||(p=e.asm),R(kt,"native function `"+c+"` called before runtime initialization"),p[i]||R(p[i],"exported native function `"+c+"` not found"),p[i].apply(null,arguments)}}var Oe;e.locateFile?(Oe="./duckdb-eh.wasm",Er(Oe)||(Oe=H(Oe))):Oe=new URL("./duckdb-eh.wasm",An.url).href;function Cr(i){try{if(i==Oe&&v)return new Uint8Array(v);if(X)return X(i);throw"both async and sync fetching of the wasm failed"}catch(o){S(o)}}function Si(i){return!v&&(M||y)&&typeof fetch=="function"?fetch(i,{credentials:"same-origin"}).then(o=>{if(!o.ok)throw"failed to load wasm binary file at '"+i+"'";return o.arrayBuffer()}).catch(()=>Cr(i)):Promise.resolve().then(()=>Cr(i))}function Tr(i,o,c){return Si(i).then(p=>WebAssembly.instantiate(p,o)).then(p=>p).then(c,p=>{w("failed to asynchronously prepare wasm: "+p),Pt(Oe)&&w("warning: Loading from a file URI ("+Oe+") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing"),S(p)})}function wi(i,o,c,p){return!i&&typeof WebAssembly.instantiateStreaming=="function"&&!Er(o)&&!L&&typeof fetch=="function"?fetch(o,{credentials:"same-origin"}).then(j=>{var I=WebAssembly.instantiateStreaming(j,c);return I.then(p,function(T){return w("wasm streaming compile failed: "+T),w("falling back to ArrayBuffer instantiation"),Tr(o,c,p)})}):Tr(o,c,p)}function Ei(){var i={env:bs,wasi_snapshot_preview1:bs};function o(j,I){var T=j.exports;return e.asm=T,be=e.asm.memory,R(be,"memory not found in wasm exports"),me(),U=e.asm.__indirect_function_table,R(U,"table not found in wasm exports"),bi(e.asm.__wasm_call_ctors),yi("wasm-instantiate"),T}gi("wasm-instantiate");var c=e;function p(j){R(e===c,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"),c=null,o(j.instance)}if(e.instantiateWasm)try{return e.instantiateWasm(i,o)}catch(j){w("Module.instantiateWasm callback failed with error: "+j),s(j)}return wi(v,Oe,i,p).catch(s),{}}var Re,et;function xe(i,o){Object.getOwnPropertyDescriptor(e,i)||Object.defineProperty(e,i,{configurable:!0,get:function(){S("Module."+i+" has been replaced with plain "+o+" (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}})}function Ci(i){Object.getOwnPropertyDescriptor(e,i)&&S("`Module."+i+"` was supplied but `"+i+"` not included in INCOMING_MODULE_JS_API")}function kr(i){return i==="FS_createPath"||i==="FS_createDataFile"||i==="FS_createPreloadedFile"||i==="FS_unlink"||i==="addRunDependency"||i==="FS_createLazyFile"||i==="FS_createDevice"||i==="removeRunDependency"}function Ti(i,o){typeof globalThis<"u"&&Object.defineProperty(globalThis,i,{configurable:!0,get:function(){it("`"+i+"` is not longer defined by emscripten. "+o)}})}Ti("buffer","Please use HEAP8.buffer or wasmMemory.buffer");function ki(i){typeof globalThis<"u"&&!Object.getOwnPropertyDescriptor(globalThis,i)&&Object.defineProperty(globalThis,i,{configurable:!0,get:function(){var o="`"+i+"` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line",c=i;c.startsWith("_")||(c="$"+i),o+=" (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE="+c+")",kr(i)&&(o+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),it(o)}}),Rr(i)}function Rr(i){Object.getOwnPropertyDescriptor(e,i)||Object.defineProperty(e,i,{configurable:!0,get:function(){var o="'"+i+"' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";kr(i)&&(o+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),S(o)}})}function F_(i){console.warn.apply(console,arguments)}function Ot(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}function yt(i){for(;i.length>0;)i.shift()(e)}function Ri(){return e.asm.__cpp_exception}function vt(i){var o=i.getArg(Ri(),0);return Cl(o)}function L_(i){var o=vt(i);wl(o)}function nt(i){var o=En(),c=i();return Cn(o),c}var zr=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function Vr(i,o,c){o>>>=0;for(var p=o+c,j=o;i[j]&&!(j>=p);)++j;if(j-o>16&&i.buffer&&zr)return zr.decode(i.subarray(o,j));for(var I="";o<j;){var T=i[o++];if(!(T&128)){I+=String.fromCharCode(T);continue}var P=i[o++]&63;if((T&224)==192){I+=String.fromCharCode((T&31)<<6|P);continue}var K=i[o++]&63;if((T&240)==224?T=(T&15)<<12|P<<6|K:((T&248)!=240&&it("Invalid UTF-8 leading byte "+xt(T)+" encountered when deserializing a UTF-8 string in wasm memory to a JS string!"),T=(T&7)<<18|P<<12|K<<6|i[o++]&63),T<65536)I+=String.fromCharCode(T);else{var E=T-65536;I+=String.fromCharCode(55296|E>>10,56320|E&1023)}}return I}function Ve(i,o){return R(typeof i=="number"),i>>>=0,i?Vr(Fe,i,o):""}function Ai(i){return nt(function(){var o=lr(4),c=lr(4);Tl(i,o,c);var p=q[o>>>2],j=q[c>>>2],I=Ve(p);Br(p);var T;return j&&(T=Ve(j),Br(j)),[I,T]})}function Kr(i){var o=vt(i);return Ai(o)}e.getExceptionMessage=Kr;function ll(i,o="i8"){switch(o.endsWith("*")&&(o="*"),o){case"i1":return Ee[i>>>0];case"i8":return Ee[i>>>0];case"i16":return Ie[i>>>1];case"i32":return b[i>>>2];case"i64":S("to do getValue(i64) use WASM_BIGINT");case"float":return mt[i>>>2];case"double":return B[i>>>3];case"*":return q[i>>>2];default:S(`invalid type for getValue: ${o}`)}}function ul(i){var o=vt(i);El(o)}function xt(i){return R(typeof i=="number"),"0x"+i.toString(16).padStart(8,"0")}function cl(i,o,c="i8"){switch(c.endsWith("*")&&(c="*"),c){case"i1":Ee[i>>>0]=o;break;case"i8":Ee[i>>>0]=o;break;case"i16":Ie[i>>>1]=o;break;case"i32":b[i>>>2]=o;break;case"i64":S("to do setValue(i64) use WASM_BIGINT");case"float":mt[i>>>2]=o;break;case"double":B[i>>>3]=o;break;case"*":q[i>>>2]=o;break;default:S(`invalid type for setValue: ${c}`)}}function it(i){it.shown||(it.shown={}),it.shown[i]||(it.shown[i]=1,L&&(i="warning: "+i),w(i))}function ji(){w("missing function: XML_GetBuffer"),S(-1)}function Mi(){w("missing function: XML_GetErrorCode"),S(-1)}function Di(){w("missing function: XML_Parse"),S(-1)}function Ii(){w("missing function: XML_ParseBuffer"),S(-1)}function Fi(){w("missing function: XML_ParserCreate"),S(-1)}function Xr(){w("missing function: XML_ParserFree"),S(-1)}function Li(){w("missing function: XML_ResumeParser"),S(-1)}function Qr(){w("missing function: XML_SetCharacterDataHandler"),S(-1)}function Jr(){w("missing function: XML_SetElementHandler"),S(-1)}function St(){w("missing function: XML_SetUserData"),S(-1)}function ut(){w("missing function: XML_StopParser"),S(-1)}function Pi(i,o,c,p){S(`Assertion failed: ${Ve(i)}, at: `+[o?Ve(o):"unknown filename",c,p?Ve(p):"unknown function"])}var Zr="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function en(i,o,c){S(Zr)}var Ke={varargs:void 0,get:function(){R(Ke.varargs!=null),Ke.varargs+=4;var i=b[Ke.varargs-4>>>2];return i},getStr:function(i){var o=Ve(i);return o}};function _l(i,o,c,p,j){R(i<=64,"nfds must be less than or equal to 64"),R(!p,"exceptfds not supported");for(var I=0,T=o?b[o>>>2]:0,P=o?b[o+4>>>2]:0,K=c?b[c>>>2]:0,E=c?b[c+4>>>2]:0,O=p?b[p>>>2]:0,ae=p?b[p+4>>>2]:0,V=0,ge=0,se=0,Se=0,ct=0,lt=0,x=(o?b[o>>>2]:0)|(c?b[c>>>2]:0)|(p?b[p>>>2]:0),Z=(o?b[o+4>>>2]:0)|(c?b[c+4>>>2]:0)|(p?b[p+4>>>2]:0),Ue=function(vf,Sf,wf,Dl){return vf<32?Sf&Dl:wf&Dl},ye=0;ye<i;ye++){var Ne=1<<ye%32;if(!!Ue(ye,x,Z,Ne)){var We=Ke.getStreamFromFD(ye),Yt=Ke.DEFAULT_POLLMASK;We.stream_ops.poll&&(Yt=We.stream_ops.poll(We)),Yt&1&&Ue(ye,T,P,Ne)&&(ye<32?V=V|Ne:ge=ge|Ne,I++),Yt&4&&Ue(ye,K,E,Ne)&&(ye<32?se=se|Ne:Se=Se|Ne,I++),Yt&2&&Ue(ye,O,ae,Ne)&&(ye<32?ct=ct|Ne:lt=lt|Ne,I++)}}return o&&(b[o>>>2]=V,b[o+4>>>2]=ge),c&&(b[c>>>2]=se,b[c+4>>>2]=Se),p&&(b[p>>>2]=ct,b[p+4>>>2]=lt),I}function dl(){w("missing function: $SOCKFS"),S(-1)}function Zt(){w("missing function: $FS"),S(-1)}function Rt(i){var o=dl.getSocket(i);if(!o)throw new Zt.ErrnoError(8);return o}function Oi(i){return b[Ur()>>>2]=i,i}var Ar={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};function At(i){return(i&255)+"."+(i>>8&255)+"."+(i>>16&255)+"."+(i>>24&255)}function er(i){var o="",c=0,p=0,j=0,I=0,T=0,P=0,K=[i[0]&65535,i[0]>>16,i[1]&65535,i[1]>>16,i[2]&65535,i[2]>>16,i[3]&65535,i[3]>>16],E=!0,O="";for(P=0;P<5;P++)if(K[P]!==0){E=!1;break}if(E){if(O=At(K[6]|K[7]<<16),K[5]===-1)return o="::ffff:",o+=O,o;if(K[5]===0)return o="::",O==="0.0.0.0"&&(O=""),O==="0.0.0.1"&&(O="1"),o+=O,o}for(c=0;c<8;c++)K[c]===0&&(c-j>1&&(T=0),j=c,T++),T>p&&(p=T,I=c-p+1);for(c=0;c<8;c++){if(p>1&&K[c]===0&&c>=I&&c<I+p){c===I&&(o+=":",I===0&&(o+=":"));continue}o+=Number(vn(K[c]&65535)).toString(16),o+=c<7?":":""}return o}function ze(i,o){var c=Ie[i>>>1],p=vn(Je[i+2>>>1]),j;switch(c){case 2:if(o!==16)return{errno:28};j=b[i+4>>>2],j=At(j);break;case 10:if(o!==28)return{errno:28};j=[b[i+8>>>2],b[i+12>>>2],b[i+16>>>2],b[i+20>>>2]],j=er(j);break;default:return{errno:5}}return{family:c,addr:j,port:p}}function Ut(i){for(var o=i.split("."),c=0;c<4;c++){var p=Number(o[c]);if(isNaN(p))return null;o[c]=p}return(o[0]|o[1]<<8|o[2]<<16|o[3]<<24)>>>0}function tr(i){return parseInt(i)}function jr(i){var o,c,p,j,I,T=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,P=[];if(!T.test(i))return null;if(i==="::")return[0,0,0,0,0,0,0,0];for(i.startsWith("::")?i=i.replace("::","Z:"):i=i.replace("::",":Z:"),i.indexOf(".")>0?(i=i.replace(new RegExp("[.]","g"),":"),o=i.split(":"),o[o.length-4]=tr(o[o.length-4])+tr(o[o.length-3])*256,o[o.length-3]=tr(o[o.length-2])+tr(o[o.length-1])*256,o=o.slice(0,o.length-2)):o=i.split(":"),p=0,j=0,c=0;c<o.length;c++)if(typeof o[c]=="string")if(o[c]==="Z"){for(j=0;j<8-o.length+1;j++)P[c+j]=0;p=j-1}else P[c+p]=Nr(parseInt(o[c],16));else P[c+p]=o[c];return[P[1]<<16|P[0],P[3]<<16|P[2],P[5]<<16|P[4],P[7]<<16|P[6]]}var Xe={address_map:{id:1,addrs:{},names:{}},lookup_name:function(i){var o=Ut(i);if(o!==null||(o=jr(i),o!==null))return i;var c;if(Xe.address_map.addrs[i])c=Xe.address_map.addrs[i];else{var p=Xe.address_map.id++;R(p<65535,"exceeded max address mappings of 65535"),c="172.29."+(p&255)+"."+(p&65280),Xe.address_map.names[c]=i,Xe.address_map.addrs[i]=c}return c},lookup_addr:function(i){return Xe.address_map.names[i]?Xe.address_map.names[i]:null}};function tn(i,o,c){if(c&&i===0)return null;var p=ze(i,o);if(p.errno)throw new Zt.ErrnoError(p.errno);return p.addr=Xe.lookup_addr(p.addr)||p.addr,p}function xi(i,o,c,p,j,I){var T=Rt(i),P=tn(o,c);return T.sock_ops.bind(T,P.addr,P.port),0}function fl(i,o,c,p,j,I){var T=Rt(i),P=tn(o,c);return T.sock_ops.connect(T,P.addr,P.port),0}function Ui(i,o,c,p){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function rn(i,o,c){return Ke.varargs=c,0}function rr(i,o){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function pl(i,o){return R(i==i>>>0||i==(i|0)),R(o===(o|0)),o+2097152>>>0<4194305-!!i?(i>>>0)+o*4294967296:NaN}function nn(i,o,c){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function nr(i,o,c,p){if(c>>>=0,R(typeof i=="string"),!(p>0))return 0;for(var j=c,I=c+p-1,T=0;T<i.length;++T){var P=i.charCodeAt(T);if(P>=55296&&P<=57343){var K=i.charCodeAt(++T);P=65536+((P&1023)<<10)|K&1023}if(P<=127){if(c>=I)break;o[c++>>>0]=P}else if(P<=2047){if(c+1>=I)break;o[c++>>>0]=192|P>>6,o[c++>>>0]=128|P&63}else if(P<=65535){if(c+2>=I)break;o[c++>>>0]=224|P>>12,o[c++>>>0]=128|P>>6&63,o[c++>>>0]=128|P&63}else{if(c+3>=I)break;P>1114111&&it("Invalid Unicode code point "+xt(P)+" encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF)."),o[c++>>>0]=240|P>>18,o[c++>>>0]=128|P>>12&63,o[c++>>>0]=128|P>>6&63,o[c++>>>0]=128|P&63}}return o[c>>>0]=0,c-j}function ir(i,o,c){return R(typeof c=="number","stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),nr(i,Fe,o,c)}function Ni(i,o,c){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function an(i,o){return Fe.fill(0,i,i+o),i}function Mr(i,o,c,p,j){switch(o){case 2:c=Ut(c),an(i,16),j&&(b[j>>>2]=16),Ie[i>>>1]=o,b[i+4>>>2]=c,Ie[i+2>>>1]=Nr(p);break;case 10:c=jr(c),an(i,28),j&&(b[j>>>2]=28),b[i>>>2]=o,b[i+8>>>2]=c[0],b[i+12>>>2]=c[1],b[i+16>>>2]=c[2],b[i+20>>>2]=c[3],Ie[i+2>>>1]=Nr(p);break;default:return 5}return 0}function Bi(i,o,c,p,j,I){var T=Rt(i);if(!T.daddr)return-53;var P=Mr(o,T.family,Xe.lookup_name(T.daddr),T.dport,c);return R(!P),0}function Hi(i,o,c,p,j,I){var T=Rt(i);return o===1&&c===4?(b[p>>>2]=T.error,b[j>>>2]=4,T.error=null,0):-50}function Wi(i,o,c){return Ke.varargs=c,0}function Yi(i,o){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Gi(i,o,c){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function $i(i,o,c,p){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function qi(i,o,c,p){Ke.varargs=p,S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function zi(i,o,c,p,j,I){var T=Rt(i),P=T.sock_ops.recvmsg(T,c);if(!P)return 0;if(j){var K=Mr(j,T.family,Xe.lookup_name(P.addr),P.port,I);R(!K)}return Fe.set(P.buffer,o>>>0),P.buffer.byteLength}function Vi(i,o,c,p){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Ki(i){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Xi(i,o,c,p,j,I){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Qi(i,o,c){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Ji(i,o){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Nt(i,o,c){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Zi(i){var o=new WebAssembly.Exception(Ri(),[i],{traceStack:!0});if(o.message=Kr(o),o.stack){var c=o.stack.split(`
`);c.splice(1,1),o.stack=c.join(`
`)}throw o}var ea=!0;function ta(){return ea}function ra(i){return q[i>>>2]+b[i+4>>>2]*4294967296}function wt(i){return i%4===0&&(i%100!==0||i%400===0)}var sn=[0,31,60,91,121,152,182,213,244,274,305,335],na=[0,31,59,90,120,151,181,212,243,273,304,334];function ia(i){var o=wt(i.getFullYear()),c=o?sn:na,p=c[i.getMonth()]+i.getDate()-1;return p}function aa(i,o){var c=new Date(ra(i)*1e3);b[o>>>2]=c.getSeconds(),b[o+4>>>2]=c.getMinutes(),b[o+8>>>2]=c.getHours(),b[o+12>>>2]=c.getDate(),b[o+16>>>2]=c.getMonth(),b[o+20>>>2]=c.getFullYear()-1900,b[o+24>>>2]=c.getDay();var p=ia(c)|0;b[o+28>>>2]=p,b[o+36>>>2]=-(c.getTimezoneOffset()*60);var j=new Date(c.getFullYear(),0,1),I=new Date(c.getFullYear(),6,1).getTimezoneOffset(),T=j.getTimezoneOffset(),P=(I!=T&&c.getTimezoneOffset()==Math.min(T,I))|0;b[o+32>>>2]=P}function Dr(i){for(var o=0,c=0;c<i.length;++c){var p=i.charCodeAt(c);p<=127?o++:p<=2047?o+=2:p>=55296&&p<=57343?(o+=4,++c):o+=3}return o}function on(i){var o=Dr(i)+1,c=Wt(o);return c&&ir(i,c,o),c}function sa(i,o,c){var p=new Date().getFullYear(),j=new Date(p,0,1),I=new Date(p,6,1),T=j.getTimezoneOffset(),P=I.getTimezoneOffset(),K=Math.max(T,P);q[i>>>2]=K*60,b[o>>>2]=Number(T!=P);function E(se){var Se=se.toTimeString().match(/\(([A-Za-z ]+)\)$/);return Se?Se[1]:"GMT"}var O=E(j),ae=E(I),V=on(O),ge=on(ae);P<T?(q[c>>>2]=V,q[c+4>>>2]=ge):(q[c>>>2]=ge,q[c+4>>>2]=V)}function oa(){S("native code called abort()")}function la(i,o){S(Zr)}function ua(i,o){return globalThis.DUCKDB_RUNTIME.createDirectory(e,i,o)}function ca(i,o){return globalThis.DUCKDB_RUNTIME.checkDirectory(e,i,o)}function _a(i,o){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(e,i,o)}function da(i,o){return globalThis.DUCKDB_RUNTIME.removeDirectory(e,i,o)}function fa(i){return globalThis.DUCKDB_RUNTIME.closeFile(e,i)}function pa(i,o){return globalThis.DUCKDB_RUNTIME.checkFile(e,i,o)}function ha(i){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(e,i)}function ba(i,o,c,p){return globalThis.DUCKDB_RUNTIME.moveFile(e,i,o,c,p)}function ma(i,o){return globalThis.DUCKDB_RUNTIME.openFile(e,i,o)}function ga(i,o,c,p){return globalThis.DUCKDB_RUNTIME.readFile(e,i,o,c,p)}function ya(i,o){return globalThis.DUCKDB_RUNTIME.truncateFile(e,i,o)}function va(i,o,c,p){return globalThis.DUCKDB_RUNTIME.writeFile(e,i,o,c,p)}function Sa(i){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(i)}function ln(i,o){return globalThis.DUCKDB_RUNTIME.glob(e,i,o)}function wa(i){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(e,i)}function un(i,o,c,p,j,I){return globalThis.DUCKDB_RUNTIME.callScalarUDF(e,i,o,c,p,j,I)}function Ea(i){R(typeof i=="number"),console.error(Ve(i))}function Ca(){return Date.now()}function cn(){return 4294901760}function Ir(){return cn()}var _n;L&&(global.performance=ue("perf_hooks").performance),_n=()=>performance.now();function Bt(i,o,c){Fe.copyWithin(i>>>0,o>>>0,o+c>>>0)}function Ta(i){var o=be.buffer,c=i-o.byteLength+65535>>>16;try{return be.grow(c),me(),1}catch(p){w(`emscripten_realloc_buffer: Attempted to grow heap from ${o.byteLength} bytes to ${i} bytes, but got error: ${p}`)}}function ka(i){var o=Fe.length;i=i>>>0,R(i>o);var c=cn();if(i>c)return w(`Cannot enlarge memory, asked to go up to ${i} bytes, but the limit is ${c} bytes!`),!1;for(var p=(K,E)=>K+(E-K%E)%E,j=1;j<=4;j*=2){var I=o*(1+.2/j);I=Math.min(I,i+100663296);var T=Math.min(c,p(Math.max(i,I),65536)),P=Ta(T);if(P)return!0}return w(`Failed to grow the heap from ${o} bytes to ${T} bytes, not enough memory!`),!1}var Fr={};function Ra(){return h||"./this.program"}function Ht(){if(!Ht.strings){var i=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",o={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:i,_:Ra()};for(var c in Fr)Fr[c]===void 0?delete o[c]:o[c]=Fr[c];var p=[];for(var c in o)p.push(`${c}=${o[c]}`);Ht.strings=p}return Ht.strings}function Aa(i,o){for(var c=0;c<i.length;++c)R(i.charCodeAt(c)===(i.charCodeAt(c)&255)),Ee[o++>>>0]=i.charCodeAt(c);Ee[o>>>0]=0}function ja(i,o){var c=0;return Ht().forEach(function(p,j){var I=o+c;q[i+j*4>>>2]=I,Aa(p,I),c+=p.length+1}),0}function Ma(i,o){var c=Ht();q[i>>>2]=c.length;var p=0;return c.forEach(function(j){p+=j.length+1}),q[o>>>2]=p,0}function Da(i){S("fd_close called without SYSCALLS_REQUIRE_FILESYSTEM")}function Ia(i,o){var c=0,p=0,j=0;{R(i==0||i==1||i==2);var I=2;i==0?c=2:(i==1||i==2)&&(c=64),j=1}return Ee[o>>>0]=I,Ie[o+2>>>1]=j,et=[c>>>0,(Re=c,+Math.abs(Re)>=1?Re>0?+Math.floor(Re/4294967296)>>>0:~~+Math.ceil((Re-+(~~Re>>>0))/4294967296)>>>0:0)],b[o+8>>>2]=et[0],b[o+12>>>2]=et[1],et=[p>>>0,(Re=p,+Math.abs(Re)>=1?Re>0?+Math.floor(Re/4294967296)>>>0:~~+Math.ceil((Re-+(~~Re>>>0))/4294967296)>>>0:0)],b[o+16>>>2]=et[0],b[o+20>>>2]=et[1],0}function Lr(i,o,c,p,j,I){S("fd_pread called without SYSCALLS_REQUIRE_FILESYSTEM")}function Pr(i,o,c,p,j,I){S("fd_pwrite called without SYSCALLS_REQUIRE_FILESYSTEM")}function Fa(i,o,c,p){S("fd_read called without SYSCALLS_REQUIRE_FILESYSTEM")}function La(i,o,c,p,j){return 70}function Pa(i){S("fd_sync called without SYSCALLS_REQUIRE_FILESYSTEM")}var Or=[null,[],[]];function ar(i,o){var c=Or[i];R(c),o===0||o===10?((i===1?$:w)(Vr(c,0)),c.length=0):c.push(o)}function Oa(){Sl(0),Or[1].length&&ar(1,10),Or[2].length&&ar(2,10)}function xa(i,o,c,p){for(var j=0,I=0;I<c;I++){var T=q[o>>>2],P=q[o+4>>>2];o+=8;for(var K=0;K<P;K++)ar(i,Fe[T+K>>>0]);j+=P}return q[p>>>2]=j,0}function Ua(i,o,c,p){var j=[],I=null,T=0,P=0,K=0,E=0,O=0,ae=0,V,ge;function se(Se,ct,lt,x,Z,Ue){var ye,Ne,We,Yt;return Ne=Se===10?28:16,Z=Se===10?er(Z):At(Z),ye=Wt(Ne),Yt=Mr(ye,Se,Z,Ue),R(!Yt),We=Wt(32),b[We+4>>>2]=Se,b[We+8>>>2]=ct,b[We+12>>>2]=lt,q[We+24>>>2]=x,q[We+20>>>2]=ye,Se===10?b[We+16>>>2]=28:b[We+16>>>2]=16,b[We+28>>>2]=0,We}if(c&&(K=b[c>>>2],E=b[c+4>>>2],O=b[c+8>>>2],ae=b[c+12>>>2]),O&&!ae&&(ae=O===2?17:6),!O&&ae&&(O=ae===17?2:1),ae===0&&(ae=6),O===0&&(O=1),!i&&!o)return-2;if(K&-1088||c!==0&&b[c>>>2]&2&&!i)return-1;if(K&32)return-2;if(O!==0&&O!==1&&O!==2)return-7;if(E!==0&&E!==2&&E!==10)return-6;if(o&&(o=Ve(o),P=parseInt(o,10),isNaN(P)))return K&1024?-2:-8;if(!i)return E===0&&(E=2),(K&1)===0&&(E===2?T=sr(2130706433):T=[0,0,0,1]),V=se(E,O,ae,null,T,P),q[p>>>2]=V,0;if(i=Ve(i),T=Ut(i),T!==null)if(E===0||E===2)E=2;else if(E===10&&K&8)T=[0,0,sr(65535),T],E=10;else return-2;else if(T=jr(i),T!==null)if(E===0||E===10)E=10;else return-2;return T!=null?(V=se(E,O,ae,i,T,P),q[p>>>2]=V,0):K&4?-2:(i=Xe.lookup_name(i),T=Ut(i),E===0?E=2:E===10&&(T=[0,0,sr(65535),T]),V=se(E,O,ae,null,T,P),q[p>>>2]=V,0)}function dn(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return p=>crypto.getRandomValues(p);if(L)try{var i=ue("crypto"),o=i.randomFillSync;if(o)return p=>i.randomFillSync(p);var c=i.randomBytes;return p=>(p.set(c(p.byteLength)),p)}catch{}S("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };")}function xr(i){return(xr=dn())(i)}function Na(i,o){return xr(Fe.subarray(i>>>0,i+o>>>0)),0}function Ba(i,o,c,p,j,I,T){var P=ze(i,o);if(P.errno)return-6;var K=P.port,E=P.addr,O=!1;if(c&&p){var ae;if(T&1||!(ae=Xe.lookup_addr(E))){if(T&8)return-2}else E=ae;var V=ir(E,c,p);V+1>=p&&(O=!0)}if(j&&I){K=""+K;var V=ir(K,j,I);V+1>=I&&(O=!0)}return O?-12:0}function fn(i,o){for(var c=0,p=0;p<=o;c+=i[p++]);return c}var pn=[31,29,31,30,31,30,31,31,30,31,30,31],hn=[31,28,31,30,31,30,31,31,30,31,30,31];function Ha(i,o){for(var c=new Date(i.getTime());o>0;){var p=wt(c.getFullYear()),j=c.getMonth(),I=(p?pn:hn)[j];if(o>I-c.getDate())o-=I-c.getDate()+1,c.setDate(1),j<11?c.setMonth(j+1):(c.setMonth(0),c.setFullYear(c.getFullYear()+1));else return c.setDate(c.getDate()+o),c}return c}function Wa(i,o,c){var p=c>0?c:Dr(i)+1,j=new Array(p),I=nr(i,j,0,j.length);return o&&(j.length=I),j}function bn(i,o){R(i.length>=0,"writeArrayToMemory array must have a length (should be an array or typed array)"),Ee.set(i,o>>>0)}function Ya(i,o,c,p){var j=b[p+40>>>2],I={tm_sec:b[p>>>2],tm_min:b[p+4>>>2],tm_hour:b[p+8>>>2],tm_mday:b[p+12>>>2],tm_mon:b[p+16>>>2],tm_year:b[p+20>>>2],tm_wday:b[p+24>>>2],tm_yday:b[p+28>>>2],tm_isdst:b[p+32>>>2],tm_gmtoff:b[p+36>>>2],tm_zone:j?Ve(j):""},T=Ve(c),P={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var K in P)T=T.replace(new RegExp(K,"g"),P[K]);var E=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],O=["January","February","March","April","May","June","July","August","September","October","November","December"];function ae(x,Z,Ue){for(var ye=typeof x=="number"?x.toString():x||"";ye.length<Z;)ye=Ue[0]+ye;return ye}function V(x,Z){return ae(x,Z,"0")}function ge(x,Z){function Ue(Ne){return Ne<0?-1:Ne>0?1:0}var ye;return(ye=Ue(x.getFullYear()-Z.getFullYear()))===0&&(ye=Ue(x.getMonth()-Z.getMonth()))===0&&(ye=Ue(x.getDate()-Z.getDate())),ye}function se(x){switch(x.getDay()){case 0:return new Date(x.getFullYear()-1,11,29);case 1:return x;case 2:return new Date(x.getFullYear(),0,3);case 3:return new Date(x.getFullYear(),0,2);case 4:return new Date(x.getFullYear(),0,1);case 5:return new Date(x.getFullYear()-1,11,31);case 6:return new Date(x.getFullYear()-1,11,30)}}function Se(x){var Z=Ha(new Date(x.tm_year+1900,0,1),x.tm_yday),Ue=new Date(Z.getFullYear(),0,4),ye=new Date(Z.getFullYear()+1,0,4),Ne=se(Ue),We=se(ye);return ge(Ne,Z)<=0?ge(We,Z)<=0?Z.getFullYear()+1:Z.getFullYear():Z.getFullYear()-1}var ct={"%a":function(x){return E[x.tm_wday].substring(0,3)},"%A":function(x){return E[x.tm_wday]},"%b":function(x){return O[x.tm_mon].substring(0,3)},"%B":function(x){return O[x.tm_mon]},"%C":function(x){var Z=x.tm_year+1900;return V(Z/100|0,2)},"%d":function(x){return V(x.tm_mday,2)},"%e":function(x){return ae(x.tm_mday,2," ")},"%g":function(x){return Se(x).toString().substring(2)},"%G":function(x){return Se(x)},"%H":function(x){return V(x.tm_hour,2)},"%I":function(x){var Z=x.tm_hour;return Z==0?Z=12:Z>12&&(Z-=12),V(Z,2)},"%j":function(x){return V(x.tm_mday+fn(wt(x.tm_year+1900)?pn:hn,x.tm_mon-1),3)},"%m":function(x){return V(x.tm_mon+1,2)},"%M":function(x){return V(x.tm_min,2)},"%n":function(){return`
`},"%p":function(x){return x.tm_hour>=0&&x.tm_hour<12?"AM":"PM"},"%S":function(x){return V(x.tm_sec,2)},"%t":function(){return"	"},"%u":function(x){return x.tm_wday||7},"%U":function(x){var Z=x.tm_yday+7-x.tm_wday;return V(Math.floor(Z/7),2)},"%V":function(x){var Z=Math.floor((x.tm_yday+7-(x.tm_wday+6)%7)/7);if((x.tm_wday+371-x.tm_yday-2)%7<=2&&Z++,Z){if(Z==53){var ye=(x.tm_wday+371-x.tm_yday)%7;ye!=4&&(ye!=3||!wt(x.tm_year))&&(Z=1)}}else{Z=52;var Ue=(x.tm_wday+7-x.tm_yday-1)%7;(Ue==4||Ue==5&&wt(x.tm_year%400-1))&&Z++}return V(Z,2)},"%w":function(x){return x.tm_wday},"%W":function(x){var Z=x.tm_yday+7-(x.tm_wday+6)%7;return V(Math.floor(Z/7),2)},"%y":function(x){return(x.tm_year+1900).toString().substring(2)},"%Y":function(x){return x.tm_year+1900},"%z":function(x){var Z=x.tm_gmtoff,Ue=Z>=0;return Z=Math.abs(Z)/60,Z=Z/60*100+Z%60,(Ue?"+":"-")+String("0000"+Z).slice(-4)},"%Z":function(x){return x.tm_zone},"%%":function(){return"%"}};T=T.replace(/%%/g,"\0\0");for(var K in ct)T.includes(K)&&(T=T.replace(new RegExp(K,"g"),ct[K](I)));T=T.replace(/\0\0/g,"%");var lt=Wa(T,!1);return lt.length>o?0:(bn(lt,i),lt.length-1)}function Ga(i,o,c,p,j){return Ya(i,o,c,p)}function $a(){w("missing function: ucnv_close_64"),S(-1)}function qa(){w("missing function: ucnv_convertEx_64"),S(-1)}function za(){w("missing function: ucnv_open_64"),S(-1)}function Va(){w("missing function: ucnv_toAlgorithmic_64"),S(-1)}function Ka(){w("missing function: ucsdet_close_64"),S(-1)}function Xa(){w("missing function: ucsdet_detect_64"),S(-1)}function Qa(){w("missing function: ucsdet_getConfidence_64"),S(-1)}function Ja(){w("missing function: ucsdet_getName_64"),S(-1)}function Za(){w("missing function: ucsdet_open_64"),S(-1)}function es(){w("missing function: ucsdet_setText_64"),S(-1)}function ts(){w("missing function: unzClose"),S(-1)}function rs(){w("missing function: unzCloseCurrentFile"),S(-1)}function ns(){w("missing function: unzGetCurrentFileInfo"),S(-1)}function is(){w("missing function: unzGetCurrentFileInfo64"),S(-1)}function as(){w("missing function: unzGetGlobalInfo"),S(-1)}function ss(){w("missing function: unzGoToFirstFile"),S(-1)}function os(){w("missing function: unzGoToNextFile"),S(-1)}function ls(){w("missing function: unzLocateFile"),S(-1)}function us(){w("missing function: unzOpen"),S(-1)}function cs(){w("missing function: unzOpen2"),S(-1)}function _s(){w("missing function: unzOpenCurrentFile"),S(-1)}function ds(){w("missing function: unzReadCurrentFile"),S(-1)}function fs(i){Pe=i,wr()||(e.onExit&&e.onExit(i),re=!0),g(i,new Ot(i))}function ps(i,o){if(Pe=i,N(),wr()&&!o){var c=`program exited (with status: ${i}), but keepRuntimeAlive() is set (counter=${Sr}) due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)`;s(c),w(c)}fs(i)}function mn(i){if(i instanceof Ot||i=="unwind")return Pe;pe(),i instanceof WebAssembly.RuntimeError&&ys()<=0&&w("Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to 65536)"),g(1,i)}function hl(i){var o=e["_"+i];return R(o,"Cannot call unknown function "+i+", make sure it is exported"),o}function bl(i){var o=Dr(i)+1,c=lr(o);return ir(i,c,o),c}function hs(i,o,c,p,j){var I={string:se=>{var Se=0;return se!=null&&se!==0&&(Se=bl(se)),Se},array:se=>{var Se=lr(se.length);return bn(se,Se),Se}};function T(se){return o==="string"?Ve(se):o==="boolean"?Boolean(se):se}var P=hl(i),K=[],E=0;if(R(o!=="array",'Return type should not be "array".'),p)for(var O=0;O<p.length;O++){var ae=I[c[O]];ae?(E===0&&(E=En()),K[O]=ae(p[O])):K[O]=p[O]}var V=P.apply(null,K);function ge(se){return E!==0&&Cn(E),T(se)}return V=ge(V),V}function ml(){Ci("fetchSettings")}var bs={XML_GetBuffer:ji,XML_GetErrorCode:Mi,XML_Parse:Di,XML_ParseBuffer:Ii,XML_ParserCreate:Fi,XML_ParserFree:Xr,XML_ResumeParser:Li,XML_SetCharacterDataHandler:Qr,XML_SetElementHandler:Jr,XML_SetUserData:St,XML_StopParser:ut,__assert_fail:Pi,__dlsym:en,__syscall__newselect:_l,__syscall_bind:xi,__syscall_connect:fl,__syscall_faccessat:Ui,__syscall_fcntl64:rn,__syscall_fstat64:rr,__syscall_ftruncate64:nn,__syscall_getdents64:Ni,__syscall_getpeername:Bi,__syscall_getsockopt:Hi,__syscall_ioctl:Wi,__syscall_lstat64:Yi,__syscall_mkdirat:Gi,__syscall_newfstatat:$i,__syscall_openat:qi,__syscall_recvfrom:zi,__syscall_renameat:Vi,__syscall_rmdir:Ki,__syscall_sendto:Xi,__syscall_socket:Qi,__syscall_stat64:Ji,__syscall_unlinkat:Nt,__throw_exception_with_stack_trace:Zi,_emscripten_get_now_is_monotonic:ta,_localtime_js:aa,_tzset_js:sa,abort:oa,dlopen:la,duckdb_web_fs_directory_create:ua,duckdb_web_fs_directory_exists:ca,duckdb_web_fs_directory_list_files:_a,duckdb_web_fs_directory_remove:da,duckdb_web_fs_file_close:fa,duckdb_web_fs_file_exists:pa,duckdb_web_fs_file_get_last_modified_time:ha,duckdb_web_fs_file_move:ba,duckdb_web_fs_file_open:ma,duckdb_web_fs_file_read:ga,duckdb_web_fs_file_truncate:ya,duckdb_web_fs_file_write:va,duckdb_web_fs_get_default_data_protocol:Sa,duckdb_web_fs_glob:ln,duckdb_web_test_platform_feature:wa,duckdb_web_udf_scalar_call:un,emscripten_console_error:Ea,emscripten_date_now:Ca,emscripten_get_heap_max:Ir,emscripten_get_now:_n,emscripten_memcpy_big:Bt,emscripten_resize_heap:ka,environ_get:ja,environ_sizes_get:Ma,fd_close:Da,fd_fdstat_get:Ia,fd_pread:Lr,fd_pwrite:Pr,fd_read:Fa,fd_seek:La,fd_sync:Pa,fd_write:xa,getaddrinfo:Ua,getentropy:Na,getnameinfo:Ba,strftime_l:Ga,ucnv_close_64:$a,ucnv_convertEx_64:qa,ucnv_open_64:za,ucnv_toAlgorithmic_64:Va,ucsdet_close_64:Ka,ucsdet_detect_64:Xa,ucsdet_getConfidence_64:Qa,ucsdet_getName_64:Ja,ucsdet_open_64:Za,ucsdet_setText_64:es,unzClose:ts,unzCloseCurrentFile:rs,unzGetCurrentFileInfo:ns,unzGetCurrentFileInfo64:is,unzGetGlobalInfo:as,unzGoToFirstFile:ss,unzGoToNextFile:os,unzLocateFile:ls,unzOpen:us,unzOpen2:cs,unzOpenCurrentFile:_s,unzReadCurrentFile:ds},P_=Ei(),O_=f("__wasm_call_ctors"),gl=e._main=f("main"),x_=e._duckdb_web_fs_glob_add_path=f("duckdb_web_fs_glob_add_path"),U_=e._duckdb_web_clear_response=f("duckdb_web_clear_response"),N_=e._duckdb_web_fail_with=f("duckdb_web_fail_with"),B_=e._duckdb_web_reset=f("duckdb_web_reset"),H_=e._duckdb_web_connect=f("duckdb_web_connect"),W_=e._duckdb_web_disconnect=f("duckdb_web_disconnect"),Y_=e._duckdb_web_flush_files=f("duckdb_web_flush_files"),G_=e._duckdb_web_flush_file=f("duckdb_web_flush_file"),$_=e._duckdb_web_open=f("duckdb_web_open"),q_=e._duckdb_web_get_global_file_info=f("duckdb_web_get_global_file_info"),z_=e._duckdb_web_collect_file_stats=f("duckdb_web_collect_file_stats"),V_=e._duckdb_web_export_file_stats=f("duckdb_web_export_file_stats"),K_=e._duckdb_web_fs_drop_file=f("duckdb_web_fs_drop_file"),X_=e._duckdb_web_fs_drop_files=f("duckdb_web_fs_drop_files"),Q_=e._duckdb_web_fs_glob_file_infos=f("duckdb_web_fs_glob_file_infos"),J_=e._duckdb_web_fs_get_file_info_by_id=f("duckdb_web_fs_get_file_info_by_id"),Z_=e._duckdb_web_fs_get_file_info_by_name=f("duckdb_web_fs_get_file_info_by_name"),ed=e._duckdb_web_fs_register_file_url=f("duckdb_web_fs_register_file_url"),td=e._duckdb_web_fs_register_file_buffer=f("duckdb_web_fs_register_file_buffer"),rd=e._duckdb_web_copy_file_to_buffer=f("duckdb_web_copy_file_to_buffer"),nd=e._duckdb_web_copy_file_to_path=f("duckdb_web_copy_file_to_path"),id=e._duckdb_web_get_version=f("duckdb_web_get_version"),ad=e._duckdb_web_get_feature_flags=f("duckdb_web_get_feature_flags"),sd=e._duckdb_web_tokenize=f("duckdb_web_tokenize"),od=e._duckdb_web_udf_scalar_create=f("duckdb_web_udf_scalar_create"),ld=e._duckdb_web_prepared_create=f("duckdb_web_prepared_create"),ud=e._duckdb_web_prepared_close=f("duckdb_web_prepared_close"),cd=e._duckdb_web_prepared_run=f("duckdb_web_prepared_run"),_d=e._duckdb_web_prepared_send=f("duckdb_web_prepared_send"),dd=e._duckdb_web_query_run=f("duckdb_web_query_run"),fd=e._duckdb_web_pending_query_start=f("duckdb_web_pending_query_start"),pd=e._duckdb_web_pending_query_poll=f("duckdb_web_pending_query_poll"),hd=e._duckdb_web_pending_query_cancel=f("duckdb_web_pending_query_cancel"),yl=e._duckdb_web_query_fetch_results=f("duckdb_web_query_fetch_results"),vl=e._duckdb_web_get_tablenames=f("duckdb_web_get_tablenames"),gn=e._duckdb_web_insert_arrow_from_ipc_stream=f("duckdb_web_insert_arrow_from_ipc_stream"),yn=e._duckdb_web_insert_csv_from_path=f("duckdb_web_insert_csv_from_path"),ms=e._duckdb_web_insert_json_from_path=f("duckdb_web_insert_json_from_path"),Ur=f("__errno_location"),Sl=e._fflush=f("fflush"),sr=f("htonl"),Nr=f("htons"),vn=f("ntohs"),Wt=e._malloc=f("malloc"),Br=e._free=f("free"),Hr=function(){return(Hr=e.asm.__trap).apply(null,arguments)},or=function(){return(or=e.asm.emscripten_stack_init).apply(null,arguments)},Sn=function(){return(Sn=e.asm.emscripten_stack_get_free).apply(null,arguments)},gs=function(){return(gs=e.asm.emscripten_stack_get_base).apply(null,arguments)},wn=function(){return(wn=e.asm.emscripten_stack_get_end).apply(null,arguments)},En=f("stackSave"),Cn=f("stackRestore"),lr=f("stackAlloc"),ys=function(){return(ys=e.asm.emscripten_stack_get_current).apply(null,arguments)},wl=e.___cxa_decrement_exception_refcount=f("__cxa_decrement_exception_refcount"),El=e.___cxa_increment_exception_refcount=f("__cxa_increment_exception_refcount"),Cl=e.___thrown_object_from_unwind_exception=f("__thrown_object_from_unwind_exception"),Tl=e.___get_exception_message=f("__get_exception_message"),bd=e.dynCall_jiji=f("dynCall_jiji"),md=e.dynCall_iiiiij=f("dynCall_iiiiij"),gd=e.dynCall_iiiiijj=f("dynCall_iiiiijj"),yd=e.dynCall_iiiiiijj=f("dynCall_iiiiiijj"),vd=e.dynCall_viijii=f("dynCall_viijii"),Sd=e.dynCall_viijji=f("dynCall_viijji"),wd=e.dynCall_iiiji=f("dynCall_iiiji"),Ed=e.dynCall_ji=f("dynCall_ji"),Cd=e.dynCall_viij=f("dynCall_viij"),Td=e.dynCall_vij=f("dynCall_vij"),kd=e.dynCall_vjjijij=f("dynCall_vjjijij"),Rd=e.dynCall_vijjji=f("dynCall_vijjji"),Ad=e.dynCall_vjjii=f("dynCall_vjjii"),jd=e.dynCall_viiiiiji=f("dynCall_viiiiiji"),Md=e.dynCall_jiiiji=f("dynCall_jiiiji"),Dd=e.dynCall_jiiij=f("dynCall_jiiij"),Id=e.dynCall_jijjij=f("dynCall_jijjij"),Fd=e.dynCall_iiij=f("dynCall_iiij"),Ld=e.dynCall_vijjj=f("dynCall_vijjj"),Pd=e.dynCall_vijj=f("dynCall_vijj"),Od=e.dynCall_viijj=f("dynCall_viijj"),xd=e.dynCall_jiijii=f("dynCall_jiijii"),Ud=e.dynCall_jijiii=f("dynCall_jijiii"),Nd=e.dynCall_viijiiiii=f("dynCall_viijiiiii"),Bd=e.dynCall_viijiiij=f("dynCall_viijiiij"),Hd=e.dynCall_vijiiiji=f("dynCall_vijiiiji"),Wd=e.dynCall_viiiij=f("dynCall_viiiij"),Yd=e.dynCall_jiiji=f("dynCall_jiiji"),Gd=e.dynCall_viiijij=f("dynCall_viiijij"),$d=e.dynCall_viijiij=f("dynCall_viijiij"),qd=e.dynCall_viiiiijj=f("dynCall_viiiiijj"),zd=e.dynCall_viiijji=f("dynCall_viiijji"),Vd=e.dynCall_vijii=f("dynCall_vijii"),Kd=e.dynCall_iiiiiji=f("dynCall_iiiiiji"),Xd=e.dynCall_iij=f("dynCall_iij"),Qd=e.dynCall_iiijj=f("dynCall_iiijj"),Jd=e.dynCall_iijii=f("dynCall_iijii"),Zd=e.dynCall_viji=f("dynCall_viji"),ef=e.dynCall_iiji=f("dynCall_iiji"),tf=e.dynCall_viijjj=f("dynCall_viijjj"),rf=e.dynCall_viiijj=f("dynCall_viiijj"),nf=e.dynCall_jijj=f("dynCall_jijj"),af=e.dynCall_jiiiii=f("dynCall_jiiiii"),sf=e.dynCall_jiiii=f("dynCall_jiiii"),of=e.dynCall_jii=f("dynCall_jii"),lf=e.dynCall_viijij=f("dynCall_viijij"),uf=e.dynCall_viiij=f("dynCall_viiij"),cf=e.dynCall_j=f("dynCall_j"),_f=e.dynCall_viiijiiiijj=f("dynCall_viiijiiiijj"),df=e.dynCall_jiiiij=f("dynCall_jiiiij"),ff=e.dynCall_jj=f("dynCall_jj"),pf=e.dynCall_ij=f("dynCall_ij"),hf=e.dynCall_ijjj=f("dynCall_ijjj"),bf=e.dynCall_jjjd=f("dynCall_jjjd"),mf=e.dynCall_jjjjjjd=f("dynCall_jjjjjjd"),gf=e.dynCall_jij=f("dynCall_jij"),yf=e.dynCall_viiijiiijii=f("dynCall_viiijiiijii"),kl=e.dynCall_viijijiiii=f("dynCall_viijijiiii"),Rl=e.dynCall_viiji=f("dynCall_viiji"),Wr=e.dynCall_jiiiijj=f("dynCall_jiiiijj"),Al=e.dynCall_viiiji=f("dynCall_viiiji"),jl=e.dynCall_viiiiji=f("dynCall_viiiiji"),vs=e.dynCall_jijiiii=f("dynCall_jijiiii"),Ml=e.dynCall_viiijiji=f("dynCall_viiijiji"),Ss=e.dynCall_viijiji=f("dynCall_viijiji"),a=e.dynCall_jiii=f("dynCall_jiii");e.stackAlloc=lr,e.stackSave=En,e.stackRestore=Cn,e.ccall=hs;var l=["getHostByName","traverseStack","getCallstack","emscriptenLog","convertPCtoSourceLocation","readEmAsmArgs","jstoi_s","listenOnce","autoResumeAudioContext","dynCallLegacy","getDynCaller","dynCall","runtimeKeepalivePush","runtimeKeepalivePop","callUserCallback","maybeExit","safeSetTimeout","asmjsMangle","asyncLoad","alignMemory","mmapAlloc","HandleAllocator","getNativeTypeSize","STACK_SIZE","STACK_ALIGN","POINTER_SIZE","ASSERTIONS","writeI53ToI64","writeI53ToI64Clamped","writeI53ToI64Signaling","writeI53ToU64Clamped","writeI53ToU64Signaling","readI53FromU64","convertI32PairToI53","convertU32PairToI53","cwrap","uleb128Encode","sigToWasmTypes","generateFuncType","convertJsFunctionToWasm","getEmptyTableSlot","updateTableMap","getFunctionAddress","addFunction","removeFunction","reallyNegative","unSign","strLen","reSign","formatString","intArrayToString","AsciiToString","UTF16ToString","stringToUTF16","lengthBytesUTF16","UTF32ToString","stringToUTF32","lengthBytesUTF32","registerKeyEventCallback","maybeCStringToJsString","findEventTarget","findCanvasEventTarget","getBoundingClientRect","fillMouseEventData","registerMouseEventCallback","registerWheelEventCallback","registerUiEventCallback","registerFocusEventCallback","fillDeviceOrientationEventData","registerDeviceOrientationEventCallback","fillDeviceMotionEventData","registerDeviceMotionEventCallback","screenOrientation","fillOrientationChangeEventData","registerOrientationChangeEventCallback","fillFullscreenChangeEventData","registerFullscreenChangeEventCallback","JSEvents_requestFullscreen","JSEvents_resizeCanvasForFullscreen","registerRestoreOldStyle","hideEverythingExceptGivenElement","restoreHiddenElements","setLetterbox","softFullscreenResizeWebGLRenderTarget","doRequestFullscreen","fillPointerlockChangeEventData","registerPointerlockChangeEventCallback","registerPointerlockErrorEventCallback","requestPointerLock","fillVisibilityChangeEventData","registerVisibilityChangeEventCallback","registerTouchEventCallback","fillGamepadEventData","registerGamepadEventCallback","registerBeforeUnloadEventCallback","fillBatteryEventData","battery","registerBatteryEventCallback","setCanvasElementSize","getCanvasElementSize","demangle","demangleAll","jsStackTrace","stackTrace","checkWasiClock","wasiRightsToMuslOFlags","wasiOFlagsToMuslOFlags","createDyncallWrapper","setImmediateWrapped","clearImmediateWrapped","polyfillSetImmediate","getPromise","makePromise","idsToPromises","makePromiseCallback","setMainLoop","heapObjectForWebGLType","heapAccessShiftForWebGLHeap","webgl_enable_ANGLE_instanced_arrays","webgl_enable_OES_vertex_array_object","webgl_enable_WEBGL_draw_buffers","webgl_enable_WEBGL_multi_draw","emscriptenWebGLGet","computeUnpackAlignedImageSize","colorChannelsInGlTextureFormat","emscriptenWebGLGetTexPixelData","__glGenObject","emscriptenWebGLGetUniform","webglGetUniformLocation","webglPrepareUniformLocationsBeforeFirstUse","webglGetLeftBracePos","emscriptenWebGLGetVertexAttrib","__glGetActiveAttribOrUniform","writeGLArray","registerWebGlEventCallback","runAndAbortIfError","SDL_unicode","SDL_ttfContext","SDL_audio","GLFW_Window","ALLOC_NORMAL","ALLOC_STACK","allocate","writeStringToMemory","writeAsciiToMemory"];l.forEach(ki);var _=["run","addOnPreRun","addOnInit","addOnPreMain","addOnExit","addOnPostRun","addRunDependency","removeRunDependency","FS_createFolder","FS_createPath","FS_createDataFile","FS_createLazyFile","FS_createLink","FS_createDevice","FS_unlink","out","err","callMain","abort","keepRuntimeAlive","wasmMemory","getTempRet0","setTempRet0","writeStackCookie","checkStackCookie","ptrToString","zeroMemory","exitJS","getHeapMax","emscripten_realloc_buffer","ENV","MONTH_DAYS_REGULAR","MONTH_DAYS_LEAP","MONTH_DAYS_REGULAR_CUMULATIVE","MONTH_DAYS_LEAP_CUMULATIVE","isLeapYear","ydayFromDate","arraySum","addDays","ERRNO_CODES","ERRNO_MESSAGES","setErrNo","inetPton4","inetNtop4","inetPton6","inetNtop6","readSockaddr","writeSockaddr","DNS","Protocols","Sockets","initRandomFill","randomFill","timers","warnOnce","UNWIND_CACHE","readEmAsmArgsArray","jstoi_q","getExecutableName","handleException","readI53FromI64","convertI32PairToI53Checked","getCFunc","freeTableIndexes","functionsInTableMap","setValue","getValue","PATH","PATH_FS","UTF8Decoder","UTF8ArrayToString","UTF8ToString","stringToUTF8Array","stringToUTF8","lengthBytesUTF8","intArrayFromString","stringToAscii","UTF16Decoder","stringToNewUTF8","stringToUTF8OnStack","writeArrayToMemory","JSEvents","specialHTMLTargets","currentFullscreenStrategy","restoreOldWindowedStyle","ExitStatus","getEnvStrings","flush_NO_FILESYSTEM","dlopenMissingError","promiseMap","getExceptionMessageCommon","getCppExceptionTag","getCppExceptionThrownObjectFromWebAssemblyException","incrementExceptionRefcount","decrementExceptionRefcount","getExceptionMessage","Browser","wget","SYSCALLS","getSocketFromFD","getSocketAddress","tempFixedLengthArray","miniTempWebGLFloatBuffers","miniTempWebGLIntBuffers","GL","emscripten_webgl_power_preferences","AL","GLUT","EGL","GLEW","IDBStore","SDL","SDL_gfx","GLFW","allocateUTF8","allocateUTF8OnStack","SOCKFS","FS"];_.forEach(Rr);var m;ot=function i(){m||D(),m||(ot=i)};function F(){R(Be==0,'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])'),R(De.length==0,"cannot call main when preRun functions remain to be called");var i=gl,o=0,c=0;try{var p=i(o,c);return ps(p,!0),p}catch(j){return mn(j)}}function G(){or(),le()}function D(){if(Be>0||(G(),_i(),Be>0))return;function i(){m||(m=!0,e.calledRun=!0,!re&&(di(),fi(),n(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),ee&&F(),pi()))}e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1),i()},1)):i(),pe()}function N(){var i=$,o=w,c=!1;$=w=p=>{c=!0};try{Oa()}catch{}$=i,w=o,c&&(it("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc."),it("(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)"))}if(e.preInit)for(typeof e.preInit=="function"&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();var ee=!0;return e.noInitialRun&&(ee=!1),D(),t.ready}})(),Fl=Mf;var jn={},Df=(()=>{var r=jn.url;return async function(t={}){var e=typeof t<"u"?t:{},n,s;e.ready=new Promise((a,l)=>{n=a,s=l}),["_main","_malloc","_free","_duckdb_web_clear_response","_duckdb_web_collect_file_stats","_duckdb_web_connect","_duckdb_web_copy_file_to_buffer","_duckdb_web_copy_file_to_path","_duckdb_web_disconnect","_duckdb_web_export_file_stats","_duckdb_web_fail_with","_duckdb_web_flush_file","_duckdb_web_flush_files","_duckdb_web_fs_drop_file","_duckdb_web_fs_drop_files","_duckdb_web_fs_get_file_info_by_id","_duckdb_web_fs_get_file_info_by_name","_duckdb_web_fs_glob_add_path","_duckdb_web_fs_glob_file_infos","_duckdb_web_fs_register_file_buffer","_duckdb_web_fs_register_file_url","_duckdb_web_get_feature_flags","_duckdb_web_get_global_file_info","_duckdb_web_get_tablenames","_duckdb_web_get_version","_duckdb_web_insert_arrow_from_ipc_stream","_duckdb_web_insert_csv_from_path","_duckdb_web_insert_json_from_path","_duckdb_web_open","_duckdb_web_pending_query_cancel","_duckdb_web_pending_query_poll","_duckdb_web_pending_query_start","_duckdb_web_prepared_close","_duckdb_web_prepared_create","_duckdb_web_prepared_run","_duckdb_web_prepared_send","_duckdb_web_query_fetch_results","_duckdb_web_query_run","_duckdb_web_reset","_duckdb_web_tokenize","_duckdb_web_udf_scalar_create","_fflush","onRuntimeInitialized"].forEach(a=>{Object.getOwnPropertyDescriptor(e.ready,a)||Object.defineProperty(e.ready,a,{get:()=>S("You are getting "+a+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"),set:()=>S("You are setting "+a+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")})});var u=Object.assign({},e),d=[],h="./this.program",g=(a,l)=>{throw l},M=typeof window=="object",y=typeof importScripts=="function",L=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",A=!M&&!L&&!y;if(e.ENVIRONMENT)throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");var z="";function H(a){return e.locateFile?e.locateFile(a,z):z+a}var W,J,X,he;if(L){if(typeof process>"u"||!process.release||process.release.name!=="node")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");var fe=process.versions.node,we=fe.split(".").slice(0,3);we=we[0]*1e4+we[1]*100+we[2].split("-")[0]*1;var ie=101900;if(we<101900)throw new Error("This emscripten-generated code requires node v10.19.19.0 (detected v"+fe+")");let{createRequire:a}=await import("module");var ue=a(jn.url),te=ue("fs"),Q=ue("path");y?z=Q.dirname(z)+"/":z=ue("url").fileURLToPath(new URL("./",jn.url)),W=(l,_)=>(l=Pt(l)?new URL(l):Q.normalize(l),te.readFileSync(l,_?void 0:"utf8")),X=l=>{var _=W(l,!0);return _.buffer||(_=new Uint8Array(_)),R(_.buffer),_},J=(l,_,m,F=!0)=>{l=Pt(l)?new URL(l):Q.normalize(l),te.readFile(l,F?void 0:"utf8",(G,D)=>{G?m(G):_(F?D.buffer:D)})},!e.thisProgram&&process.argv.length>1&&(h=process.argv[1].replace(/\\/g,"/")),d=process.argv.slice(2),g=(l,_)=>{throw process.exitCode=l,_},e.inspect=()=>"[Emscripten Module object]"}else if(A){if(typeof process=="object"&&typeof ue=="function"||typeof window=="object"||typeof importScripts=="function")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");typeof read<"u"&&(W=a=>read(a)),X=a=>{let l;return typeof readbuffer=="function"?new Uint8Array(readbuffer(a)):(l=read(a,"binary"),R(typeof l=="object"),l)},J=(a,l,_)=>{setTimeout(()=>l(X(a)),0)},typeof clearTimeout>"u"&&(globalThis.clearTimeout=a=>{}),typeof scriptArgs<"u"?d=scriptArgs:typeof arguments<"u"&&(d=arguments),typeof quit=="function"&&(g=(a,l)=>{throw setTimeout(()=>{if(!(l instanceof Ot)){let _=l;l&&typeof l=="object"&&l.stack&&(_=[l,l.stack]),w(`exiting due to exception: ${_}`)}quit(a)}),l}),typeof print<"u"&&(typeof console>"u"&&(console={}),console.log=print,console.warn=console.error=typeof printErr<"u"?printErr:print)}else if(M||y){if(y?z=self.location.href:typeof document<"u"&&document.currentScript&&(z=document.currentScript.src),r&&(z=r),z.indexOf("blob:")!==0?z=z.substr(0,z.replace(/[?#].*/,"").lastIndexOf("/")+1):z="",!(typeof window=="object"||typeof importScripts=="function"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");W=a=>{var l=new XMLHttpRequest;return l.open("GET",a,!1),l.send(null),l.responseText},y&&(X=a=>{var l=new XMLHttpRequest;return l.open("GET",a,!1),l.responseType="arraybuffer",l.send(null),new Uint8Array(l.response)}),J=(a,l,_)=>{var m=new XMLHttpRequest;m.open("GET",a,!0),m.responseType="arraybuffer",m.onload=()=>{if(m.status==200||m.status==0&&m.response){l(m.response);return}_()},m.onerror=_,m.send(null)},he=a=>document.title=a}else throw new Error("environment detection error");var $=e.print||console.log.bind(console),w=e.printErr||console.error.bind(console);Object.assign(e,u),u=null,ps(),e.arguments&&(d=e.arguments),xe("arguments","arguments_"),e.thisProgram&&(h=e.thisProgram),xe("thisProgram","thisProgram"),e.quit&&(g=e.quit),xe("quit","quit_"),R(typeof e.memoryInitializerPrefixURL>"u","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"),R(typeof e.pthreadMainPrefixURL>"u","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"),R(typeof e.cdInitializerPrefixURL>"u","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"),R(typeof e.filePackagePrefixURL>"u","Module.filePackagePrefixURL option was removed, use Module.locateFile instead"),R(typeof e.read>"u","Module.read option was removed (modify read_ in JS)"),R(typeof e.readAsync>"u","Module.readAsync option was removed (modify readAsync in JS)"),R(typeof e.readBinary>"u","Module.readBinary option was removed (modify readBinary in JS)"),R(typeof e.setWindowTitle>"u","Module.setWindowTitle option was removed (modify setWindowTitle in JS)"),R(typeof e.TOTAL_MEMORY>"u","Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"),xe("read","read_"),xe("readAsync","readAsync"),xe("readBinary","readBinary"),xe("setWindowTitle","setWindowTitle");var k="IDBFS is no longer included by default; build with -lidbfs.js",ce="PROXYFS is no longer included by default; build with -lproxyfs.js",oe="WORKERFS is no longer included by default; build with -lworkerfs.js",Ce="NODEFS is no longer included by default; build with -lnodefs.js";R(!A,"shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");var v;e.wasmBinary&&(v=e.wasmBinary),xe("wasmBinary","wasmBinary");var C=e.noExitRuntime||!0;xe("noExitRuntime","noExitRuntime"),typeof WebAssembly!="object"&&S("no native wasm support detected");var be,re=!1,Pe;function R(a,l){a||S("Assertion failed"+(l?": "+l:""))}var $e,Ee,Fe,Ie,Je,b,q,mt,B;function me(){var a=be.buffer;e.HEAP8=Ee=new Int8Array(a),e.HEAP16=Ie=new Int16Array(a),e.HEAP32=b=new Int32Array(a),e.HEAPU8=Fe=new Uint8Array(a),e.HEAPU16=Je=new Uint16Array(a),e.HEAPU32=q=new Uint32Array(a),e.HEAPF32=mt=new Float32Array(a),e.HEAPF64=B=new Float64Array(a)}R(!e.STACK_SIZE,"STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time"),R(typeof Int32Array<"u"&&typeof Float64Array<"u"&&Int32Array.prototype.subarray!=null&&Int32Array.prototype.set!=null,"JS engine does not provide full typed array support"),R(!e.wasmMemory,"Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally"),R(!e.INITIAL_MEMORY,"Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically");var U;function le(){var a=Wt();R((a&3)==0),a==0&&(a+=4),q[a>>>2]=34821223,q[a+4>>>2]=2310721022,q[0]=1668509029}function pe(){if(!re){var a=Wt();a==0&&(a+=4);var l=q[a>>>2],_=q[a+4>>>2];(l!=34821223||_!=2310721022)&&S(`Stack overflow! Stack cookie has been overwritten at ${vt(a)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${vt(_)} ${vt(l)}`),q[0]!=1668509029&&S("Runtime error: The application has corrupted its heap memory area (address zero)!")}}(function(){var a=new Int16Array(1),l=new Int8Array(a.buffer);if(a[0]=25459,l[0]!==115||l[1]!==99)throw"Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)"})();var De=[],ke=[],gt=[],Jt=[],vr=[],kt=!1,Sr=0;function wr(){return C||Sr>0}function _i(){if(e.preRun)for(typeof e.preRun=="function"&&(e.preRun=[e.preRun]);e.preRun.length;)hi(e.preRun.shift());yt(De)}function di(){R(!kt),kt=!0,pe(),yt(ke)}function fi(){pe(),yt(gt)}function pi(){if(pe(),e.postRun)for(typeof e.postRun=="function"&&(e.postRun=[e.postRun]);e.postRun.length;)mi(e.postRun.shift());yt(vr)}function hi(a){De.unshift(a)}function bi(a){ke.unshift(a)}function M_(a){gt.unshift(a)}function D_(a){}function mi(a){vr.unshift(a)}R(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),R(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),R(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),R(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var Be=0,qe=null,ot=null,Ze={};function I_(a){for(var l=a;;){if(!Ze[a])return a;a=l+Math.random()}}function gi(a){Be++,e.monitorRunDependencies&&e.monitorRunDependencies(Be),a?(R(!Ze[a]),Ze[a]=1,qe===null&&typeof setInterval<"u"&&(qe=setInterval(()=>{if(re){clearInterval(qe),qe=null;return}var l=!1;for(var _ in Ze)l||(l=!0,w("still waiting on run dependencies:")),w("dependency: "+_);l&&w("(end of list)")},1e4))):w("warning: run dependency added without ID")}function yi(a){if(Be--,e.monitorRunDependencies&&e.monitorRunDependencies(Be),a?(R(Ze[a]),delete Ze[a]):w("warning: run dependency removed without ID"),Be==0&&(qe!==null&&(clearInterval(qe),qe=null),ot)){var l=ot;ot=null,l()}}function S(a){e.onAbort&&e.onAbort(a),a="Aborted("+a+")",w(a),re=!0,Pe=1;var l=new WebAssembly.RuntimeError(a);throw s(l),l}var vi="data:application/octet-stream;base64,";function Er(a){return a.startsWith(vi)}function Pt(a){return a.startsWith("file://")}function f(a,l){return function(){var _=a,m=l;return l||(m=e.asm),R(kt,"native function `"+_+"` called before runtime initialization"),m[a]||R(m[a],"exported native function `"+_+"` not found"),m[a].apply(null,arguments)}}var Oe;e.locateFile?(Oe="./duckdb-mvp.wasm",Er(Oe)||(Oe=H(Oe))):Oe=new URL("./duckdb-mvp.wasm",jn.url).href;function Cr(a){try{if(a==Oe&&v)return new Uint8Array(v);if(X)return X(a);throw"both async and sync fetching of the wasm failed"}catch(l){S(l)}}function Si(a){return!v&&(M||y)&&typeof fetch=="function"?fetch(a,{credentials:"same-origin"}).then(l=>{if(!l.ok)throw"failed to load wasm binary file at '"+a+"'";return l.arrayBuffer()}).catch(()=>Cr(a)):Promise.resolve().then(()=>Cr(a))}function Tr(a,l,_){return Si(a).then(m=>WebAssembly.instantiate(m,l)).then(m=>m).then(_,m=>{w("failed to asynchronously prepare wasm: "+m),Pt(Oe)&&w("warning: Loading from a file URI ("+Oe+") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing"),S(m)})}function wi(a,l,_,m){return!a&&typeof WebAssembly.instantiateStreaming=="function"&&!Er(l)&&!L&&typeof fetch=="function"?fetch(l,{credentials:"same-origin"}).then(F=>{var G=WebAssembly.instantiateStreaming(F,_);return G.then(m,function(D){return w("wasm streaming compile failed: "+D),w("falling back to ArrayBuffer instantiation"),Tr(l,_,m)})}):Tr(l,_,m)}function Ei(){var a={env:mn,wasi_snapshot_preview1:mn};function l(F,G){var D=F.exports;return e.asm=D,be=e.asm.memory,R(be,"memory not found in wasm exports"),me(),U=e.asm.__indirect_function_table,R(U,"table not found in wasm exports"),bi(e.asm.__wasm_call_ctors),yi("wasm-instantiate"),D}gi("wasm-instantiate");var _=e;function m(F){R(e===_,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"),_=null,l(F.instance)}if(e.instantiateWasm)try{return e.instantiateWasm(a,l)}catch(F){w("Module.instantiateWasm callback failed with error: "+F),s(F)}return wi(v,Oe,a,m).catch(s),{}}var Re,et;function xe(a,l){Object.getOwnPropertyDescriptor(e,a)||Object.defineProperty(e,a,{configurable:!0,get:function(){S("Module."+a+" has been replaced with plain "+l+" (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}})}function Ci(a){Object.getOwnPropertyDescriptor(e,a)&&S("`Module."+a+"` was supplied but `"+a+"` not included in INCOMING_MODULE_JS_API")}function kr(a){return a==="FS_createPath"||a==="FS_createDataFile"||a==="FS_createPreloadedFile"||a==="FS_unlink"||a==="addRunDependency"||a==="FS_createLazyFile"||a==="FS_createDevice"||a==="removeRunDependency"}function Ti(a,l){typeof globalThis<"u"&&Object.defineProperty(globalThis,a,{configurable:!0,get:function(){nt("`"+a+"` is not longer defined by emscripten. "+l)}})}Ti("buffer","Please use HEAP8.buffer or wasmMemory.buffer");function ki(a){typeof globalThis<"u"&&!Object.getOwnPropertyDescriptor(globalThis,a)&&Object.defineProperty(globalThis,a,{configurable:!0,get:function(){var l="`"+a+"` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line",_=a;_.startsWith("_")||(_="$"+a),l+=" (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE="+_+")",kr(a)&&(l+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),nt(l)}}),Rr(a)}function Rr(a){Object.getOwnPropertyDescriptor(e,a)||Object.defineProperty(e,a,{configurable:!0,get:function(){var l="'"+a+"' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";kr(a)&&(l+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),S(l)}})}function F_(a){console.warn.apply(console,arguments)}function Ot(a){this.name="ExitStatus",this.message=`Program terminated with exit(${a})`,this.status=a}function yt(a){for(;a.length>0;)a.shift()(e)}function Ri(a,l="i8"){switch(l.endsWith("*")&&(l="*"),l){case"i1":return Ee[a>>>0];case"i8":return Ee[a>>>0];case"i16":return Ie[a>>>1];case"i32":return b[a>>>2];case"i64":S("to do getValue(i64) use WASM_BIGINT");case"float":return mt[a>>>2];case"double":return B[a>>>3];case"*":return q[a>>>2];default:S(`invalid type for getValue: ${l}`)}}function vt(a){return R(typeof a=="number"),"0x"+a.toString(16).padStart(8,"0")}function L_(a,l,_="i8"){switch(_.endsWith("*")&&(_="*"),_){case"i1":Ee[a>>>0]=l;break;case"i8":Ee[a>>>0]=l;break;case"i16":Ie[a>>>1]=l;break;case"i32":b[a>>>2]=l;break;case"i64":S("to do setValue(i64) use WASM_BIGINT");case"float":mt[a>>>2]=l;break;case"double":B[a>>>3]=l;break;case"*":q[a>>>2]=l;break;default:S(`invalid type for setValue: ${_}`)}}function nt(a){nt.shown||(nt.shown={}),nt.shown[a]||(nt.shown[a]=1,L&&(a="warning: "+a),w(a))}function zr(){w("missing function: XML_GetBuffer"),S(-1)}function Vr(){w("missing function: XML_GetErrorCode"),S(-1)}function Ve(){w("missing function: XML_Parse"),S(-1)}function Ai(){w("missing function: XML_ParseBuffer"),S(-1)}function Kr(){w("missing function: XML_ParserCreate"),S(-1)}function ll(){w("missing function: XML_ParserFree"),S(-1)}function ul(){w("missing function: XML_ResumeParser"),S(-1)}function xt(){w("missing function: XML_SetCharacterDataHandler"),S(-1)}function cl(){w("missing function: XML_SetElementHandler"),S(-1)}function it(){w("missing function: XML_SetUserData"),S(-1)}function ji(){w("missing function: XML_StopParser"),S(-1)}function Mi(a){this.excPtr=a,this.ptr=a-24,this.set_type=function(l){q[this.ptr+4>>>2]=l},this.get_type=function(){return q[this.ptr+4>>>2]},this.set_destructor=function(l){q[this.ptr+8>>>2]=l},this.get_destructor=function(){return q[this.ptr+8>>>2]},this.set_caught=function(l){l=l?1:0,Ee[this.ptr+12>>>0]=l},this.get_caught=function(){return Ee[this.ptr+12>>>0]!=0},this.set_rethrown=function(l){l=l?1:0,Ee[this.ptr+13>>>0]=l},this.get_rethrown=function(){return Ee[this.ptr+13>>>0]!=0},this.init=function(l,_){this.set_adjusted_ptr(0),this.set_type(l),this.set_destructor(_)},this.set_adjusted_ptr=function(l){q[this.ptr+16>>>2]=l},this.get_adjusted_ptr=function(){return q[this.ptr+16>>>2]},this.get_exception_ptr=function(){var l=gs(this.get_type());if(l)return q[this.excPtr>>>2];var _=this.get_adjusted_ptr();return _!==0?_:this.excPtr}}var Di=0,Ii=0;function Fi(a,l,_){var m=new Mi(a);m.init(l,_),Di=a,Ii++,R(!1,"Exception thrown, but exception catching is not enabled. Compile with -sNO_DISABLE_EXCEPTION_CATCHING or -sEXCEPTION_CATCHING_ALLOWED=[..] to catch.")}var Xr="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function Li(a,l,_){S(Xr)}var Qr=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function Jr(a,l,_){l>>>=0;for(var m=l+_,F=l;a[F]&&!(F>=m);)++F;if(F-l>16&&a.buffer&&Qr)return Qr.decode(a.subarray(l,F));for(var G="";l<F;){var D=a[l++];if(!(D&128)){G+=String.fromCharCode(D);continue}var N=a[l++]&63;if((D&224)==192){G+=String.fromCharCode((D&31)<<6|N);continue}var ee=a[l++]&63;if((D&240)==224?D=(D&15)<<12|N<<6|ee:((D&248)!=240&&nt("Invalid UTF-8 leading byte "+vt(D)+" encountered when deserializing a UTF-8 string in wasm memory to a JS string!"),D=(D&7)<<18|N<<12|ee<<6|a[l++]&63),D<65536)G+=String.fromCharCode(D);else{var i=D-65536;G+=String.fromCharCode(55296|i>>10,56320|i&1023)}}return G}function St(a,l){return R(typeof a=="number"),a>>>=0,a?Jr(Fe,a,l):""}var ut={varargs:void 0,get:function(){R(ut.varargs!=null),ut.varargs+=4;var a=b[ut.varargs-4>>>2];return a},getStr:function(a){var l=St(a);return l}};function Pi(a,l,_,m,F){R(a<=64,"nfds must be less than or equal to 64"),R(!m,"exceptfds not supported");for(var G=0,D=l?b[l>>>2]:0,N=l?b[l+4>>>2]:0,ee=_?b[_>>>2]:0,i=_?b[_+4>>>2]:0,o=m?b[m>>>2]:0,c=m?b[m+4>>>2]:0,p=0,j=0,I=0,T=0,P=0,K=0,E=(l?b[l>>>2]:0)|(_?b[_>>>2]:0)|(m?b[m>>>2]:0),O=(l?b[l+4>>>2]:0)|(_?b[_+4>>>2]:0)|(m?b[m+4>>>2]:0),ae=function(ct,lt,x,Z){return ct<32?lt&Z:x&Z},V=0;V<a;V++){var ge=1<<V%32;if(!!ae(V,E,O,ge)){var se=ut.getStreamFromFD(V),Se=ut.DEFAULT_POLLMASK;se.stream_ops.poll&&(Se=se.stream_ops.poll(se)),Se&1&&ae(V,D,N,ge)&&(V<32?p=p|ge:j=j|ge,G++),Se&4&&ae(V,ee,i,ge)&&(V<32?I=I|ge:T=T|ge,G++),Se&2&&ae(V,o,c,ge)&&(V<32?P=P|ge:K=K|ge,G++)}}return l&&(b[l>>>2]=p,b[l+4>>>2]=j),_&&(b[_>>>2]=I,b[_+4>>>2]=T),m&&(b[m>>>2]=P,b[m+4>>>2]=K),G}function Zr(){w("missing function: $SOCKFS"),S(-1)}function en(){w("missing function: $FS"),S(-1)}function Ke(a){var l=Zr.getSocket(a);if(!l)throw new en.ErrnoError(8);return l}function _l(a){return b[yl()>>>2]=a,a}var dl={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};function Zt(a){return(a&255)+"."+(a>>8&255)+"."+(a>>16&255)+"."+(a>>24&255)}function Rt(a){var l="",_=0,m=0,F=0,G=0,D=0,N=0,ee=[a[0]&65535,a[0]>>16,a[1]&65535,a[1]>>16,a[2]&65535,a[2]>>16,a[3]&65535,a[3]>>16],i=!0,o="";for(N=0;N<5;N++)if(ee[N]!==0){i=!1;break}if(i){if(o=Zt(ee[6]|ee[7]<<16),ee[5]===-1)return l="::ffff:",l+=o,l;if(ee[5]===0)return l="::",o==="0.0.0.0"&&(o=""),o==="0.0.0.1"&&(o="1"),l+=o,l}for(_=0;_<8;_++)ee[_]===0&&(_-F>1&&(D=0),F=_,D++),D>m&&(m=D,G=_-m+1);for(_=0;_<8;_++){if(m>1&&ee[_]===0&&_>=G&&_<G+m){_===G&&(l+=":",G===0&&(l+=":"));continue}l+=Number(ms(ee[_]&65535)).toString(16),l+=_<7?":":""}return l}function Oi(a,l){var _=Ie[a>>>1],m=ms(Je[a+2>>>1]),F;switch(_){case 2:if(l!==16)return{errno:28};F=b[a+4>>>2],F=Zt(F);break;case 10:if(l!==28)return{errno:28};F=[b[a+8>>>2],b[a+12>>>2],b[a+16>>>2],b[a+20>>>2]],F=Rt(F);break;default:return{errno:5}}return{family:_,addr:F,port:m}}function Ar(a){for(var l=a.split("."),_=0;_<4;_++){var m=Number(l[_]);if(isNaN(m))return null;l[_]=m}return(l[0]|l[1]<<8|l[2]<<16|l[3]<<24)>>>0}function At(a){return parseInt(a)}function er(a){var l,_,m,F,G,D=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,N=[];if(!D.test(a))return null;if(a==="::")return[0,0,0,0,0,0,0,0];for(a.startsWith("::")?a=a.replace("::","Z:"):a=a.replace("::",":Z:"),a.indexOf(".")>0?(a=a.replace(new RegExp("[.]","g"),":"),l=a.split(":"),l[l.length-4]=At(l[l.length-4])+At(l[l.length-3])*256,l[l.length-3]=At(l[l.length-2])+At(l[l.length-1])*256,l=l.slice(0,l.length-2)):l=a.split(":"),m=0,F=0,_=0;_<l.length;_++)if(typeof l[_]=="string")if(l[_]==="Z"){for(F=0;F<8-l.length+1;F++)N[_+F]=0;m=F-1}else N[_+m]=yn(parseInt(l[_],16));else N[_+m]=l[_];return[N[1]<<16|N[0],N[3]<<16|N[2],N[5]<<16|N[4],N[7]<<16|N[6]]}var ze={address_map:{id:1,addrs:{},names:{}},lookup_name:function(a){var l=Ar(a);if(l!==null||(l=er(a),l!==null))return a;var _;if(ze.address_map.addrs[a])_=ze.address_map.addrs[a];else{var m=ze.address_map.id++;R(m<65535,"exceeded max address mappings of 65535"),_="172.29."+(m&255)+"."+(m&65280),ze.address_map.names[_]=a,ze.address_map.addrs[a]=_}return _},lookup_addr:function(a){return ze.address_map.names[a]?ze.address_map.names[a]:null}};function Ut(a,l,_){if(_&&a===0)return null;var m=Oi(a,l);if(m.errno)throw new en.ErrnoError(m.errno);return m.addr=ze.lookup_addr(m.addr)||m.addr,m}function tr(a,l,_,m,F,G){var D=Ke(a),N=Ut(l,_);return D.sock_ops.bind(D,N.addr,N.port),0}function jr(a,l,_,m,F,G){var D=Ke(a),N=Ut(l,_);return D.sock_ops.connect(D,N.addr,N.port),0}function Xe(a,l,_,m){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function tn(a,l,_){return ut.varargs=_,0}function xi(a,l){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function fl(a,l){return R(a==a>>>0||a==(a|0)),R(l===(l|0)),l+2097152>>>0<4194305-!!a?(a>>>0)+l*4294967296:NaN}function Ui(a,l,_){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function rn(a,l,_,m){if(_>>>=0,R(typeof a=="string"),!(m>0))return 0;for(var F=_,G=_+m-1,D=0;D<a.length;++D){var N=a.charCodeAt(D);if(N>=55296&&N<=57343){var ee=a.charCodeAt(++D);N=65536+((N&1023)<<10)|ee&1023}if(N<=127){if(_>=G)break;l[_++>>>0]=N}else if(N<=2047){if(_+1>=G)break;l[_++>>>0]=192|N>>6,l[_++>>>0]=128|N&63}else if(N<=65535){if(_+2>=G)break;l[_++>>>0]=224|N>>12,l[_++>>>0]=128|N>>6&63,l[_++>>>0]=128|N&63}else{if(_+3>=G)break;N>1114111&&nt("Invalid Unicode code point "+vt(N)+" encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF)."),l[_++>>>0]=240|N>>18,l[_++>>>0]=128|N>>12&63,l[_++>>>0]=128|N>>6&63,l[_++>>>0]=128|N&63}}return l[_>>>0]=0,_-F}function rr(a,l,_){return R(typeof _=="number","stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),rn(a,Fe,l,_)}function pl(a,l,_){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function nn(a,l){return Fe.fill(0,a,a+l),a}function nr(a,l,_,m,F){switch(l){case 2:_=Ar(_),nn(a,16),F&&(b[F>>>2]=16),Ie[a>>>1]=l,b[a+4>>>2]=_,Ie[a+2>>>1]=yn(m);break;case 10:_=er(_),nn(a,28),F&&(b[F>>>2]=28),b[a>>>2]=l,b[a+8>>>2]=_[0],b[a+12>>>2]=_[1],b[a+16>>>2]=_[2],b[a+20>>>2]=_[3],Ie[a+2>>>1]=yn(m);break;default:return 5}return 0}function ir(a,l,_,m,F,G){var D=Ke(a);if(!D.daddr)return-53;var N=nr(l,D.family,ze.lookup_name(D.daddr),D.dport,_);return R(!N),0}function Ni(a,l,_,m,F,G){var D=Ke(a);return l===1&&_===4?(b[m>>>2]=D.error,b[F>>>2]=4,D.error=null,0):-50}function an(a,l,_){return ut.varargs=_,0}function Mr(a,l){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Bi(a,l,_){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Hi(a,l,_,m){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Wi(a,l,_,m){ut.varargs=m,S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Yi(a,l,_,m,F,G){var D=Ke(a),N=D.sock_ops.recvmsg(D,_);if(!N)return 0;if(F){var ee=nr(F,D.family,ze.lookup_name(N.addr),N.port,G);R(!ee)}return Fe.set(N.buffer,l>>>0),N.buffer.byteLength}function Gi(a,l,_,m){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function $i(a){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function qi(a,l,_,m,F,G){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function zi(a,l,_){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Vi(a,l){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Ki(a,l,_){S("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}var Xi=!0;function Qi(){return Xi}function Ji(a){return q[a>>>2]+b[a+4>>>2]*4294967296}function Nt(a){return a%4===0&&(a%100!==0||a%400===0)}var Zi=[0,31,60,91,121,152,182,213,244,274,305,335],ea=[0,31,59,90,120,151,181,212,243,273,304,334];function ta(a){var l=Nt(a.getFullYear()),_=l?Zi:ea,m=_[a.getMonth()]+a.getDate()-1;return m}function ra(a,l){var _=new Date(Ji(a)*1e3);b[l>>>2]=_.getSeconds(),b[l+4>>>2]=_.getMinutes(),b[l+8>>>2]=_.getHours(),b[l+12>>>2]=_.getDate(),b[l+16>>>2]=_.getMonth(),b[l+20>>>2]=_.getFullYear()-1900,b[l+24>>>2]=_.getDay();var m=ta(_)|0;b[l+28>>>2]=m,b[l+36>>>2]=-(_.getTimezoneOffset()*60);var F=new Date(_.getFullYear(),0,1),G=new Date(_.getFullYear(),6,1).getTimezoneOffset(),D=F.getTimezoneOffset(),N=(G!=D&&_.getTimezoneOffset()==Math.min(D,G))|0;b[l+32>>>2]=N}function wt(a){for(var l=0,_=0;_<a.length;++_){var m=a.charCodeAt(_);m<=127?l++:m<=2047?l+=2:m>=55296&&m<=57343?(l+=4,++_):l+=3}return l}function sn(a){var l=wt(a)+1,_=Ur(l);return _&&rr(a,_,l),_}function na(a,l,_){var m=new Date().getFullYear(),F=new Date(m,0,1),G=new Date(m,6,1),D=F.getTimezoneOffset(),N=G.getTimezoneOffset(),ee=Math.max(D,N);q[a>>>2]=ee*60,b[l>>>2]=Number(D!=N);function i(I){var T=I.toTimeString().match(/\(([A-Za-z ]+)\)$/);return T?T[1]:"GMT"}var o=i(F),c=i(G),p=sn(o),j=sn(c);N<D?(q[_>>>2]=p,q[_+4>>>2]=j):(q[_>>>2]=j,q[_+4>>>2]=p)}function ia(){S("native code called abort()")}function aa(a,l){S(Xr)}function Dr(a,l){return globalThis.DUCKDB_RUNTIME.createDirectory(e,a,l)}function on(a,l){return globalThis.DUCKDB_RUNTIME.checkDirectory(e,a,l)}function sa(a,l){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(e,a,l)}function oa(a,l){return globalThis.DUCKDB_RUNTIME.removeDirectory(e,a,l)}function la(a){return globalThis.DUCKDB_RUNTIME.closeFile(e,a)}function ua(a,l){return globalThis.DUCKDB_RUNTIME.checkFile(e,a,l)}function ca(a){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(e,a)}function _a(a,l,_,m){return globalThis.DUCKDB_RUNTIME.moveFile(e,a,l,_,m)}function da(a,l){return globalThis.DUCKDB_RUNTIME.openFile(e,a,l)}function fa(a,l,_,m){return globalThis.DUCKDB_RUNTIME.readFile(e,a,l,_,m)}function pa(a,l){return globalThis.DUCKDB_RUNTIME.truncateFile(e,a,l)}function ha(a,l,_,m){return globalThis.DUCKDB_RUNTIME.writeFile(e,a,l,_,m)}function ba(a){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(a)}function ma(a,l){return globalThis.DUCKDB_RUNTIME.glob(e,a,l)}function ga(a){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(e,a)}function ya(a,l,_,m,F,G){return globalThis.DUCKDB_RUNTIME.callScalarUDF(e,a,l,_,m,F,G)}function va(a){R(typeof a=="number"),console.error(St(a))}function Sa(){return Date.now()}function ln(){return 4294901760}function wa(){return ln()}var un;L&&(global.performance=ue("perf_hooks").performance),un=()=>performance.now();function Ea(a,l,_){Fe.copyWithin(a>>>0,l>>>0,l+_>>>0)}function Ca(a){var l=be.buffer,_=a-l.byteLength+65535>>>16;try{return be.grow(_),me(),1}catch(m){w(`emscripten_realloc_buffer: Attempted to grow heap from ${l.byteLength} bytes to ${a} bytes, but got error: ${m}`)}}function cn(a){var l=Fe.length;a=a>>>0,R(a>l);var _=ln();if(a>_)return w(`Cannot enlarge memory, asked to go up to ${a} bytes, but the limit is ${_} bytes!`),!1;for(var m=(ee,i)=>ee+(i-ee%i)%i,F=1;F<=4;F*=2){var G=l*(1+.2/F);G=Math.min(G,a+100663296);var D=Math.min(_,m(Math.max(a,G),65536)),N=Ca(D);if(N)return!0}return w(`Failed to grow the heap from ${l} bytes to ${D} bytes, not enough memory!`),!1}var Ir={};function _n(){return h||"./this.program"}function Bt(){if(!Bt.strings){var a=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",l={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:a,_:_n()};for(var _ in Ir)Ir[_]===void 0?delete l[_]:l[_]=Ir[_];var m=[];for(var _ in l)m.push(`${_}=${l[_]}`);Bt.strings=m}return Bt.strings}function Ta(a,l){for(var _=0;_<a.length;++_)R(a.charCodeAt(_)===(a.charCodeAt(_)&255)),Ee[l++>>>0]=a.charCodeAt(_);Ee[l>>>0]=0}function ka(a,l){var _=0;return Bt().forEach(function(m,F){var G=l+_;q[a+F*4>>>2]=G,Ta(m,G),_+=m.length+1}),0}function Fr(a,l){var _=Bt();q[a>>>2]=_.length;var m=0;return _.forEach(function(F){m+=F.length+1}),q[l>>>2]=m,0}function Ra(a){S("fd_close called without SYSCALLS_REQUIRE_FILESYSTEM")}function Ht(a,l){var _=0,m=0,F=0;{R(a==0||a==1||a==2);var G=2;a==0?_=2:(a==1||a==2)&&(_=64),F=1}return Ee[l>>>0]=G,Ie[l+2>>>1]=F,et=[_>>>0,(Re=_,+Math.abs(Re)>=1?Re>0?+Math.floor(Re/4294967296)>>>0:~~+Math.ceil((Re-+(~~Re>>>0))/4294967296)>>>0:0)],b[l+8>>>2]=et[0],b[l+12>>>2]=et[1],et=[m>>>0,(Re=m,+Math.abs(Re)>=1?Re>0?+Math.floor(Re/4294967296)>>>0:~~+Math.ceil((Re-+(~~Re>>>0))/4294967296)>>>0:0)],b[l+16>>>2]=et[0],b[l+20>>>2]=et[1],0}function Aa(a,l,_,m,F,G){S("fd_pread called without SYSCALLS_REQUIRE_FILESYSTEM")}function ja(a,l,_,m,F,G){S("fd_pwrite called without SYSCALLS_REQUIRE_FILESYSTEM")}function Ma(a,l,_,m){S("fd_read called without SYSCALLS_REQUIRE_FILESYSTEM")}function Da(a,l,_,m,F){return 70}function Ia(a){S("fd_sync called without SYSCALLS_REQUIRE_FILESYSTEM")}var Lr=[null,[],[]];function Pr(a,l){var _=Lr[a];R(_),l===0||l===10?((a===1?$:w)(Jr(_,0)),_.length=0):_.push(l)}function Fa(){vl(0),Lr[1].length&&Pr(1,10),Lr[2].length&&Pr(2,10)}function La(a,l,_,m){for(var F=0,G=0;G<_;G++){var D=q[l>>>2],N=q[l+4>>>2];l+=8;for(var ee=0;ee<N;ee++)Pr(a,Fe[D+ee>>>0]);F+=N}return q[m>>>2]=F,0}function Pa(a,l,_,m){var F=[],G=null,D=0,N=0,ee=0,i=0,o=0,c=0,p,j;function I(T,P,K,E,O,ae){var V,ge,se,Se;return ge=T===10?28:16,O=T===10?Rt(O):Zt(O),V=Ur(ge),Se=nr(V,T,O,ae),R(!Se),se=Ur(32),b[se+4>>>2]=T,b[se+8>>>2]=P,b[se+12>>>2]=K,q[se+24>>>2]=E,q[se+20>>>2]=V,T===10?b[se+16>>>2]=28:b[se+16>>>2]=16,b[se+28>>>2]=0,se}if(_&&(ee=b[_>>>2],i=b[_+4>>>2],o=b[_+8>>>2],c=b[_+12>>>2]),o&&!c&&(c=o===2?17:6),!o&&c&&(o=c===17?2:1),c===0&&(c=6),o===0&&(o=1),!a&&!l)return-2;if(ee&-1088||_!==0&&b[_>>>2]&2&&!a)return-1;if(ee&32)return-2;if(o!==0&&o!==1&&o!==2)return-7;if(i!==0&&i!==2&&i!==10)return-6;if(l&&(l=St(l),N=parseInt(l,10),isNaN(N)))return ee&1024?-2:-8;if(!a)return i===0&&(i=2),(ee&1)===0&&(i===2?D=gn(2130706433):D=[0,0,0,1]),p=I(i,o,c,null,D,N),q[m>>>2]=p,0;if(a=St(a),D=Ar(a),D!==null)if(i===0||i===2)i=2;else if(i===10&&ee&8)D=[0,0,gn(65535),D],i=10;else return-2;else if(D=er(a),D!==null)if(i===0||i===10)i=10;else return-2;return D!=null?(p=I(i,o,c,a,D,N),q[m>>>2]=p,0):ee&4?-2:(a=ze.lookup_name(a),D=Ar(a),i===0?i=2:i===10&&(D=[0,0,gn(65535),D]),p=I(i,o,c,null,D,N),q[m>>>2]=p,0)}function Or(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return m=>crypto.getRandomValues(m);if(L)try{var a=ue("crypto"),l=a.randomFillSync;if(l)return m=>a.randomFillSync(m);var _=a.randomBytes;return m=>(m.set(_(m.byteLength)),m)}catch{}S("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };")}function ar(a){return(ar=Or())(a)}function Oa(a,l){return ar(Fe.subarray(a>>>0,a+l>>>0)),0}function xa(a,l,_,m,F,G,D){var N=Oi(a,l);if(N.errno)return-6;var ee=N.port,i=N.addr,o=!1;if(_&&m){var c;if(D&1||!(c=ze.lookup_addr(i))){if(D&8)return-2}else i=c;var p=rr(i,_,m);p+1>=m&&(o=!0)}if(F&&G){ee=""+ee;var p=rr(ee,F,G);p+1>=G&&(o=!0)}return o?-12:0}function Ua(a,l){for(var _=0,m=0;m<=l;_+=a[m++]);return _}var dn=[31,29,31,30,31,30,31,31,30,31,30,31],xr=[31,28,31,30,31,30,31,31,30,31,30,31];function Na(a,l){for(var _=new Date(a.getTime());l>0;){var m=Nt(_.getFullYear()),F=_.getMonth(),G=(m?dn:xr)[F];if(l>G-_.getDate())l-=G-_.getDate()+1,_.setDate(1),F<11?_.setMonth(F+1):(_.setMonth(0),_.setFullYear(_.getFullYear()+1));else return _.setDate(_.getDate()+l),_}return _}function Ba(a,l,_){var m=_>0?_:wt(a)+1,F=new Array(m),G=rn(a,F,0,F.length);return l&&(F.length=G),F}function fn(a,l){R(a.length>=0,"writeArrayToMemory array must have a length (should be an array or typed array)"),Ee.set(a,l>>>0)}function pn(a,l,_,m){var F=b[m+40>>>2],G={tm_sec:b[m>>>2],tm_min:b[m+4>>>2],tm_hour:b[m+8>>>2],tm_mday:b[m+12>>>2],tm_mon:b[m+16>>>2],tm_year:b[m+20>>>2],tm_wday:b[m+24>>>2],tm_yday:b[m+28>>>2],tm_isdst:b[m+32>>>2],tm_gmtoff:b[m+36>>>2],tm_zone:F?St(F):""},D=St(_),N={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ee in N)D=D.replace(new RegExp(ee,"g"),N[ee]);var i=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],o=["January","February","March","April","May","June","July","August","September","October","November","December"];function c(E,O,ae){for(var V=typeof E=="number"?E.toString():E||"";V.length<O;)V=ae[0]+V;return V}function p(E,O){return c(E,O,"0")}function j(E,O){function ae(ge){return ge<0?-1:ge>0?1:0}var V;return(V=ae(E.getFullYear()-O.getFullYear()))===0&&(V=ae(E.getMonth()-O.getMonth()))===0&&(V=ae(E.getDate()-O.getDate())),V}function I(E){switch(E.getDay()){case 0:return new Date(E.getFullYear()-1,11,29);case 1:return E;case 2:return new Date(E.getFullYear(),0,3);case 3:return new Date(E.getFullYear(),0,2);case 4:return new Date(E.getFullYear(),0,1);case 5:return new Date(E.getFullYear()-1,11,31);case 6:return new Date(E.getFullYear()-1,11,30)}}function T(E){var O=Na(new Date(E.tm_year+1900,0,1),E.tm_yday),ae=new Date(O.getFullYear(),0,4),V=new Date(O.getFullYear()+1,0,4),ge=I(ae),se=I(V);return j(ge,O)<=0?j(se,O)<=0?O.getFullYear()+1:O.getFullYear():O.getFullYear()-1}var P={"%a":function(E){return i[E.tm_wday].substring(0,3)},"%A":function(E){return i[E.tm_wday]},"%b":function(E){return o[E.tm_mon].substring(0,3)},"%B":function(E){return o[E.tm_mon]},"%C":function(E){var O=E.tm_year+1900;return p(O/100|0,2)},"%d":function(E){return p(E.tm_mday,2)},"%e":function(E){return c(E.tm_mday,2," ")},"%g":function(E){return T(E).toString().substring(2)},"%G":function(E){return T(E)},"%H":function(E){return p(E.tm_hour,2)},"%I":function(E){var O=E.tm_hour;return O==0?O=12:O>12&&(O-=12),p(O,2)},"%j":function(E){return p(E.tm_mday+Ua(Nt(E.tm_year+1900)?dn:xr,E.tm_mon-1),3)},"%m":function(E){return p(E.tm_mon+1,2)},"%M":function(E){return p(E.tm_min,2)},"%n":function(){return`
`},"%p":function(E){return E.tm_hour>=0&&E.tm_hour<12?"AM":"PM"},"%S":function(E){return p(E.tm_sec,2)},"%t":function(){return"	"},"%u":function(E){return E.tm_wday||7},"%U":function(E){var O=E.tm_yday+7-E.tm_wday;return p(Math.floor(O/7),2)},"%V":function(E){var O=Math.floor((E.tm_yday+7-(E.tm_wday+6)%7)/7);if((E.tm_wday+371-E.tm_yday-2)%7<=2&&O++,O){if(O==53){var V=(E.tm_wday+371-E.tm_yday)%7;V!=4&&(V!=3||!Nt(E.tm_year))&&(O=1)}}else{O=52;var ae=(E.tm_wday+7-E.tm_yday-1)%7;(ae==4||ae==5&&Nt(E.tm_year%400-1))&&O++}return p(O,2)},"%w":function(E){return E.tm_wday},"%W":function(E){var O=E.tm_yday+7-(E.tm_wday+6)%7;return p(Math.floor(O/7),2)},"%y":function(E){return(E.tm_year+1900).toString().substring(2)},"%Y":function(E){return E.tm_year+1900},"%z":function(E){var O=E.tm_gmtoff,ae=O>=0;return O=Math.abs(O)/60,O=O/60*100+O%60,(ae?"+":"-")+String("0000"+O).slice(-4)},"%Z":function(E){return E.tm_zone},"%%":function(){return"%"}};D=D.replace(/%%/g,"\0\0");for(var ee in P)D.includes(ee)&&(D=D.replace(new RegExp(ee,"g"),P[ee](G)));D=D.replace(/\0\0/g,"%");var K=Ba(D,!1);return K.length>l?0:(fn(K,a),K.length-1)}function hn(a,l,_,m,F){return pn(a,l,_,m)}function Ha(){w("missing function: ucnv_close_64"),S(-1)}function Wa(){w("missing function: ucnv_convertEx_64"),S(-1)}function bn(){w("missing function: ucnv_open_64"),S(-1)}function Ya(){w("missing function: ucnv_toAlgorithmic_64"),S(-1)}function Ga(){w("missing function: ucsdet_close_64"),S(-1)}function $a(){w("missing function: ucsdet_detect_64"),S(-1)}function qa(){w("missing function: ucsdet_getConfidence_64"),S(-1)}function za(){w("missing function: ucsdet_getName_64"),S(-1)}function Va(){w("missing function: ucsdet_open_64"),S(-1)}function Ka(){w("missing function: ucsdet_setText_64"),S(-1)}function Xa(){w("missing function: unzClose"),S(-1)}function Qa(){w("missing function: unzCloseCurrentFile"),S(-1)}function Ja(){w("missing function: unzGetCurrentFileInfo"),S(-1)}function Za(){w("missing function: unzGetCurrentFileInfo64"),S(-1)}function es(){w("missing function: unzGetGlobalInfo"),S(-1)}function ts(){w("missing function: unzGoToFirstFile"),S(-1)}function rs(){w("missing function: unzGoToNextFile"),S(-1)}function ns(){w("missing function: unzLocateFile"),S(-1)}function is(){w("missing function: unzOpen"),S(-1)}function as(){w("missing function: unzOpen2"),S(-1)}function ss(){w("missing function: unzOpenCurrentFile"),S(-1)}function os(){w("missing function: unzReadCurrentFile"),S(-1)}function ls(a){Pe=a,wr()||(e.onExit&&e.onExit(a),re=!0),g(a,new Ot(a))}function us(a,l){if(Pe=a,Ml(),wr()&&!l){var _=`program exited (with status: ${a}), but keepRuntimeAlive() is set (counter=${Sr}) due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)`;s(_),w(_)}ls(a)}function cs(a){if(a instanceof Ot||a=="unwind")return Pe;pe(),a instanceof WebAssembly.RuntimeError&&Sn()<=0&&w("Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to 65536)"),g(1,a)}function _s(a){var l=e["_"+a];return R(l,"Cannot call unknown function "+a+", make sure it is exported"),l}function ds(a){var l=wt(a)+1,_=or(l);return rr(a,_,l),_}function fs(a,l,_,m,F){var G={string:I=>{var T=0;return I!=null&&I!==0&&(T=ds(I)),T},array:I=>{var T=or(I.length);return fn(I,T),T}};function D(I){return l==="string"?St(I):l==="boolean"?Boolean(I):I}var N=_s(a),ee=[],i=0;if(R(l!=="array",'Return type should not be "array".'),m)for(var o=0;o<m.length;o++){var c=G[_[o]];c?(i===0&&(i=Br()),ee[o]=c(m[o])):ee[o]=m[o]}var p=N.apply(null,ee);function j(I){return i!==0&&Hr(i),D(I)}return p=j(p),p}function ps(){Ci("fetchSettings")}var mn={XML_GetBuffer:zr,XML_GetErrorCode:Vr,XML_Parse:Ve,XML_ParseBuffer:Ai,XML_ParserCreate:Kr,XML_ParserFree:ll,XML_ResumeParser:ul,XML_SetCharacterDataHandler:xt,XML_SetElementHandler:cl,XML_SetUserData:it,XML_StopParser:ji,__cxa_throw:Fi,__dlsym:Li,__syscall__newselect:Pi,__syscall_bind:tr,__syscall_connect:jr,__syscall_faccessat:Xe,__syscall_fcntl64:tn,__syscall_fstat64:xi,__syscall_ftruncate64:Ui,__syscall_getdents64:pl,__syscall_getpeername:ir,__syscall_getsockopt:Ni,__syscall_ioctl:an,__syscall_lstat64:Mr,__syscall_mkdirat:Bi,__syscall_newfstatat:Hi,__syscall_openat:Wi,__syscall_recvfrom:Yi,__syscall_renameat:Gi,__syscall_rmdir:$i,__syscall_sendto:qi,__syscall_socket:zi,__syscall_stat64:Vi,__syscall_unlinkat:Ki,_emscripten_get_now_is_monotonic:Qi,_localtime_js:ra,_tzset_js:na,abort:ia,dlopen:aa,duckdb_web_fs_directory_create:Dr,duckdb_web_fs_directory_exists:on,duckdb_web_fs_directory_list_files:sa,duckdb_web_fs_directory_remove:oa,duckdb_web_fs_file_close:la,duckdb_web_fs_file_exists:ua,duckdb_web_fs_file_get_last_modified_time:ca,duckdb_web_fs_file_move:_a,duckdb_web_fs_file_open:da,duckdb_web_fs_file_read:fa,duckdb_web_fs_file_truncate:pa,duckdb_web_fs_file_write:ha,duckdb_web_fs_get_default_data_protocol:ba,duckdb_web_fs_glob:ma,duckdb_web_test_platform_feature:ga,duckdb_web_udf_scalar_call:ya,emscripten_console_error:va,emscripten_date_now:Sa,emscripten_get_heap_max:wa,emscripten_get_now:un,emscripten_memcpy_big:Ea,emscripten_resize_heap:cn,environ_get:ka,environ_sizes_get:Fr,fd_close:Ra,fd_fdstat_get:Ht,fd_pread:Aa,fd_pwrite:ja,fd_read:Ma,fd_seek:Da,fd_sync:Ia,fd_write:La,getaddrinfo:Pa,getentropy:Oa,getnameinfo:xa,strftime_l:hn,ucnv_close_64:Ha,ucnv_convertEx_64:Wa,ucnv_open_64:bn,ucnv_toAlgorithmic_64:Ya,ucsdet_close_64:Ga,ucsdet_detect_64:$a,ucsdet_getConfidence_64:qa,ucsdet_getName_64:za,ucsdet_open_64:Va,ucsdet_setText_64:Ka,unzClose:Xa,unzCloseCurrentFile:Qa,unzGetCurrentFileInfo:Ja,unzGetCurrentFileInfo64:Za,unzGetGlobalInfo:es,unzGoToFirstFile:ts,unzGoToNextFile:rs,unzLocateFile:ns,unzOpen:is,unzOpen2:as,unzOpenCurrentFile:ss,unzReadCurrentFile:os},hl=Ei(),bl=f("__wasm_call_ctors"),hs=e._main=f("main"),ml=e._duckdb_web_fs_glob_add_path=f("duckdb_web_fs_glob_add_path"),bs=e._duckdb_web_clear_response=f("duckdb_web_clear_response"),P_=e._duckdb_web_fail_with=f("duckdb_web_fail_with"),O_=e._duckdb_web_reset=f("duckdb_web_reset"),gl=e._duckdb_web_connect=f("duckdb_web_connect"),x_=e._duckdb_web_disconnect=f("duckdb_web_disconnect"),U_=e._duckdb_web_flush_files=f("duckdb_web_flush_files"),N_=e._duckdb_web_flush_file=f("duckdb_web_flush_file"),B_=e._duckdb_web_open=f("duckdb_web_open"),H_=e._duckdb_web_get_global_file_info=f("duckdb_web_get_global_file_info"),W_=e._duckdb_web_collect_file_stats=f("duckdb_web_collect_file_stats"),Y_=e._duckdb_web_export_file_stats=f("duckdb_web_export_file_stats"),G_=e._duckdb_web_fs_drop_file=f("duckdb_web_fs_drop_file"),$_=e._duckdb_web_fs_drop_files=f("duckdb_web_fs_drop_files"),q_=e._duckdb_web_fs_glob_file_infos=f("duckdb_web_fs_glob_file_infos"),z_=e._duckdb_web_fs_get_file_info_by_id=f("duckdb_web_fs_get_file_info_by_id"),V_=e._duckdb_web_fs_get_file_info_by_name=f("duckdb_web_fs_get_file_info_by_name"),K_=e._duckdb_web_fs_register_file_url=f("duckdb_web_fs_register_file_url"),X_=e._duckdb_web_fs_register_file_buffer=f("duckdb_web_fs_register_file_buffer"),Q_=e._duckdb_web_copy_file_to_buffer=f("duckdb_web_copy_file_to_buffer"),J_=e._duckdb_web_copy_file_to_path=f("duckdb_web_copy_file_to_path"),Z_=e._duckdb_web_get_version=f("duckdb_web_get_version"),ed=e._duckdb_web_get_feature_flags=f("duckdb_web_get_feature_flags"),td=e._duckdb_web_tokenize=f("duckdb_web_tokenize"),rd=e._duckdb_web_udf_scalar_create=f("duckdb_web_udf_scalar_create"),nd=e._duckdb_web_prepared_create=f("duckdb_web_prepared_create"),id=e._duckdb_web_prepared_close=f("duckdb_web_prepared_close"),ad=e._duckdb_web_prepared_run=f("duckdb_web_prepared_run"),sd=e._duckdb_web_prepared_send=f("duckdb_web_prepared_send"),od=e._duckdb_web_query_run=f("duckdb_web_query_run"),ld=e._duckdb_web_pending_query_start=f("duckdb_web_pending_query_start"),ud=e._duckdb_web_pending_query_poll=f("duckdb_web_pending_query_poll"),cd=e._duckdb_web_pending_query_cancel=f("duckdb_web_pending_query_cancel"),_d=e._duckdb_web_query_fetch_results=f("duckdb_web_query_fetch_results"),dd=e._duckdb_web_get_tablenames=f("duckdb_web_get_tablenames"),fd=e._duckdb_web_insert_arrow_from_ipc_stream=f("duckdb_web_insert_arrow_from_ipc_stream"),pd=e._duckdb_web_insert_csv_from_path=f("duckdb_web_insert_csv_from_path"),hd=e._duckdb_web_insert_json_from_path=f("duckdb_web_insert_json_from_path"),yl=f("__errno_location"),vl=e._fflush=f("fflush"),gn=f("htonl"),yn=f("htons"),ms=f("ntohs"),Ur=e._malloc=f("malloc"),Sl=e._free=f("free"),sr=function(){return(sr=e.asm.emscripten_stack_init).apply(null,arguments)},Nr=function(){return(Nr=e.asm.emscripten_stack_get_free).apply(null,arguments)},vn=function(){return(vn=e.asm.emscripten_stack_get_base).apply(null,arguments)},Wt=function(){return(Wt=e.asm.emscripten_stack_get_end).apply(null,arguments)},Br=f("stackSave"),Hr=f("stackRestore"),or=f("stackAlloc"),Sn=function(){return(Sn=e.asm.emscripten_stack_get_current).apply(null,arguments)},gs=f("__cxa_is_pointer_type"),wn=e.dynCall_jiji=f("dynCall_jiji"),En=e.dynCall_iiiiij=f("dynCall_iiiiij"),Cn=e.dynCall_iiiiijj=f("dynCall_iiiiijj"),lr=e.dynCall_iiiiiijj=f("dynCall_iiiiiijj"),ys=e.dynCall_viijii=f("dynCall_viijii"),wl=e.dynCall_viijji=f("dynCall_viijji"),El=e.dynCall_iiiji=f("dynCall_iiiji"),Cl=e.dynCall_ji=f("dynCall_ji"),Tl=e.dynCall_viij=f("dynCall_viij"),bd=e.dynCall_vij=f("dynCall_vij"),md=e.dynCall_vjjijij=f("dynCall_vjjijij"),gd=e.dynCall_vijjji=f("dynCall_vijjji"),yd=e.dynCall_vjjii=f("dynCall_vjjii"),vd=e.dynCall_viiiiiji=f("dynCall_viiiiiji"),Sd=e.dynCall_jiiiji=f("dynCall_jiiiji"),wd=e.dynCall_jiiij=f("dynCall_jiiij"),Ed=e.dynCall_jijjij=f("dynCall_jijjij"),Cd=e.dynCall_iiij=f("dynCall_iiij"),Td=e.dynCall_vijjj=f("dynCall_vijjj"),kd=e.dynCall_vijj=f("dynCall_vijj"),Rd=e.dynCall_viijj=f("dynCall_viijj"),Ad=e.dynCall_jiijii=f("dynCall_jiijii"),jd=e.dynCall_jijiii=f("dynCall_jijiii"),Md=e.dynCall_viijiiiii=f("dynCall_viijiiiii"),Dd=e.dynCall_viijiiij=f("dynCall_viijiiij"),Id=e.dynCall_vijiiiji=f("dynCall_vijiiiji"),Fd=e.dynCall_viiiij=f("dynCall_viiiij"),Ld=e.dynCall_jiiji=f("dynCall_jiiji"),Pd=e.dynCall_viiijij=f("dynCall_viiijij"),Od=e.dynCall_viijiij=f("dynCall_viijiij"),xd=e.dynCall_viiiiijj=f("dynCall_viiiiijj"),Ud=e.dynCall_viiijji=f("dynCall_viiijji"),Nd=e.dynCall_vijii=f("dynCall_vijii"),Bd=e.dynCall_iiiiiji=f("dynCall_iiiiiji"),Hd=e.dynCall_iij=f("dynCall_iij"),Wd=e.dynCall_iiijj=f("dynCall_iiijj"),Yd=e.dynCall_iijii=f("dynCall_iijii"),Gd=e.dynCall_viji=f("dynCall_viji"),$d=e.dynCall_iiji=f("dynCall_iiji"),qd=e.dynCall_viijjj=f("dynCall_viijjj"),zd=e.dynCall_viiijj=f("dynCall_viiijj"),Vd=e.dynCall_jijj=f("dynCall_jijj"),Kd=e.dynCall_jiiiii=f("dynCall_jiiiii"),Xd=e.dynCall_jiiii=f("dynCall_jiiii"),Qd=e.dynCall_jii=f("dynCall_jii"),Jd=e.dynCall_viijij=f("dynCall_viijij"),Zd=e.dynCall_viiij=f("dynCall_viiij"),ef=e.dynCall_j=f("dynCall_j"),tf=e.dynCall_viiijiiiijj=f("dynCall_viiijiiiijj"),rf=e.dynCall_jiiiij=f("dynCall_jiiiij"),nf=e.dynCall_jj=f("dynCall_jj"),af=e.dynCall_ij=f("dynCall_ij"),sf=e.dynCall_ijjj=f("dynCall_ijjj"),of=e.dynCall_jjjd=f("dynCall_jjjd"),lf=e.dynCall_jjjjjjd=f("dynCall_jjjjjjd"),uf=e.dynCall_jij=f("dynCall_jij"),cf=e.dynCall_viiijiiijii=f("dynCall_viiijiiijii"),_f=e.dynCall_viijijiiii=f("dynCall_viijijiiii"),df=e.dynCall_viiji=f("dynCall_viiji"),ff=e.dynCall_jiiiijj=f("dynCall_jiiiijj"),pf=e.dynCall_viiiji=f("dynCall_viiiji"),hf=e.dynCall_viiiiji=f("dynCall_viiiiji"),bf=e.dynCall_jijiiii=f("dynCall_jijiiii"),mf=e.dynCall_viiijiji=f("dynCall_viiijiji"),gf=e.dynCall_viijiji=f("dynCall_viijiji"),yf=e.dynCall_jiii=f("dynCall_jiii");e.stackAlloc=or,e.stackSave=Br,e.stackRestore=Hr,e.ccall=fs;var kl=["getHostByName","traverseStack","getCallstack","emscriptenLog","convertPCtoSourceLocation","readEmAsmArgs","jstoi_s","listenOnce","autoResumeAudioContext","dynCallLegacy","getDynCaller","dynCall","runtimeKeepalivePush","runtimeKeepalivePop","callUserCallback","maybeExit","safeSetTimeout","asmjsMangle","asyncLoad","alignMemory","mmapAlloc","HandleAllocator","getNativeTypeSize","STACK_SIZE","STACK_ALIGN","POINTER_SIZE","ASSERTIONS","writeI53ToI64","writeI53ToI64Clamped","writeI53ToI64Signaling","writeI53ToU64Clamped","writeI53ToU64Signaling","readI53FromU64","convertI32PairToI53","convertU32PairToI53","cwrap","uleb128Encode","sigToWasmTypes","generateFuncType","convertJsFunctionToWasm","getEmptyTableSlot","updateTableMap","getFunctionAddress","addFunction","removeFunction","reallyNegative","unSign","strLen","reSign","formatString","intArrayToString","AsciiToString","UTF16ToString","stringToUTF16","lengthBytesUTF16","UTF32ToString","stringToUTF32","lengthBytesUTF32","registerKeyEventCallback","maybeCStringToJsString","findEventTarget","findCanvasEventTarget","getBoundingClientRect","fillMouseEventData","registerMouseEventCallback","registerWheelEventCallback","registerUiEventCallback","registerFocusEventCallback","fillDeviceOrientationEventData","registerDeviceOrientationEventCallback","fillDeviceMotionEventData","registerDeviceMotionEventCallback","screenOrientation","fillOrientationChangeEventData","registerOrientationChangeEventCallback","fillFullscreenChangeEventData","registerFullscreenChangeEventCallback","JSEvents_requestFullscreen","JSEvents_resizeCanvasForFullscreen","registerRestoreOldStyle","hideEverythingExceptGivenElement","restoreHiddenElements","setLetterbox","softFullscreenResizeWebGLRenderTarget","doRequestFullscreen","fillPointerlockChangeEventData","registerPointerlockChangeEventCallback","registerPointerlockErrorEventCallback","requestPointerLock","fillVisibilityChangeEventData","registerVisibilityChangeEventCallback","registerTouchEventCallback","fillGamepadEventData","registerGamepadEventCallback","registerBeforeUnloadEventCallback","fillBatteryEventData","battery","registerBatteryEventCallback","setCanvasElementSize","getCanvasElementSize","demangle","demangleAll","jsStackTrace","stackTrace","checkWasiClock","wasiRightsToMuslOFlags","wasiOFlagsToMuslOFlags","createDyncallWrapper","setImmediateWrapped","clearImmediateWrapped","polyfillSetImmediate","getPromise","makePromise","idsToPromises","makePromiseCallback","setMainLoop","heapObjectForWebGLType","heapAccessShiftForWebGLHeap","webgl_enable_ANGLE_instanced_arrays","webgl_enable_OES_vertex_array_object","webgl_enable_WEBGL_draw_buffers","webgl_enable_WEBGL_multi_draw","emscriptenWebGLGet","computeUnpackAlignedImageSize","colorChannelsInGlTextureFormat","emscriptenWebGLGetTexPixelData","__glGenObject","emscriptenWebGLGetUniform","webglGetUniformLocation","webglPrepareUniformLocationsBeforeFirstUse","webglGetLeftBracePos","emscriptenWebGLGetVertexAttrib","__glGetActiveAttribOrUniform","writeGLArray","registerWebGlEventCallback","runAndAbortIfError","SDL_unicode","SDL_ttfContext","SDL_audio","GLFW_Window","ALLOC_NORMAL","ALLOC_STACK","allocate","writeStringToMemory","writeAsciiToMemory"];kl.forEach(ki);var Rl=["run","addOnPreRun","addOnInit","addOnPreMain","addOnExit","addOnPostRun","addRunDependency","removeRunDependency","FS_createFolder","FS_createPath","FS_createDataFile","FS_createLazyFile","FS_createLink","FS_createDevice","FS_unlink","out","err","callMain","abort","keepRuntimeAlive","wasmMemory","getTempRet0","setTempRet0","writeStackCookie","checkStackCookie","ptrToString","zeroMemory","exitJS","getHeapMax","emscripten_realloc_buffer","ENV","MONTH_DAYS_REGULAR","MONTH_DAYS_LEAP","MONTH_DAYS_REGULAR_CUMULATIVE","MONTH_DAYS_LEAP_CUMULATIVE","isLeapYear","ydayFromDate","arraySum","addDays","ERRNO_CODES","ERRNO_MESSAGES","setErrNo","inetPton4","inetNtop4","inetPton6","inetNtop6","readSockaddr","writeSockaddr","DNS","Protocols","Sockets","initRandomFill","randomFill","timers","warnOnce","UNWIND_CACHE","readEmAsmArgsArray","jstoi_q","getExecutableName","handleException","readI53FromI64","convertI32PairToI53Checked","getCFunc","freeTableIndexes","functionsInTableMap","setValue","getValue","PATH","PATH_FS","UTF8Decoder","UTF8ArrayToString","UTF8ToString","stringToUTF8Array","stringToUTF8","lengthBytesUTF8","intArrayFromString","stringToAscii","UTF16Decoder","stringToNewUTF8","stringToUTF8OnStack","writeArrayToMemory","JSEvents","specialHTMLTargets","currentFullscreenStrategy","restoreOldWindowedStyle","ExitStatus","getEnvStrings","flush_NO_FILESYSTEM","dlopenMissingError","promiseMap","uncaughtExceptionCount","exceptionLast","exceptionCaught","ExceptionInfo","Browser","wget","SYSCALLS","getSocketFromFD","getSocketAddress","tempFixedLengthArray","miniTempWebGLFloatBuffers","miniTempWebGLIntBuffers","GL","emscripten_webgl_power_preferences","AL","GLUT","EGL","GLEW","IDBStore","SDL","SDL_gfx","GLFW","allocateUTF8","allocateUTF8OnStack","SOCKFS","FS"];Rl.forEach(Rr);var Wr;ot=function a(){Wr||vs(),Wr||(ot=a)};function Al(){R(Be==0,'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])'),R(De.length==0,"cannot call main when preRun functions remain to be called");var a=hs,l=0,_=0;try{var m=a(l,_);return us(m,!0),m}catch(F){return cs(F)}}function jl(){sr(),le()}function vs(){if(Be>0||(jl(),_i(),Be>0))return;function a(){Wr||(Wr=!0,e.calledRun=!0,!re&&(di(),fi(),n(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),Ss&&Al(),pi()))}e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1),a()},1)):a(),pe()}function Ml(){var a=$,l=w,_=!1;$=w=m=>{_=!0};try{Fa()}catch{}$=a,w=l,_&&(nt("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc."),nt("(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)"))}if(e.preInit)for(typeof e.preInit=="function"&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();var Ss=!0;return e.noInitialRun&&(Ss=!1),vs(),t.ready}})(),Ll=Df;var _t=Gt(require("apache-arrow")),Mn=class{constructor(t,e){this._bindings=t,this._conn=e}close(){this._bindings.disconnect(this._conn)}useUnsafe(t){return t(this._bindings,this._conn)}query(t){let e=this._bindings.runQuery(this._conn,t),n=_t.RecordBatchReader.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new _t.Table(n)}async send(t){let e=this._bindings.startPendingQuery(this._conn,t);for(;e==null;)e=await new Promise((u,d)=>{try{u(this._bindings.pollPendingQuery(this._conn))}catch(h){d(h)}});let n=new Dn(this._bindings,this._conn,e),s=_t.RecordBatchReader.from(n);return console.assert(s.isSync()),console.assert(s.isStream()),s}cancelSent(){return this._bindings.cancelPendingQuery(this._conn)}getTableNames(t){return this._bindings.getTableNames(this._conn,t)}prepare(t){let e=this._bindings.createPrepared(this._conn,t);return new ws(this._bindings,this._conn,e)}createScalarFunction(t,e,n){this._bindings.createScalarFunction(this._conn,t,e,n)}insertArrowTable(t,e){let n=_t.tableToIPC(t,"stream");this.insertArrowFromIPCStream(n,e)}insertArrowFromIPCStream(t,e){this._bindings.insertArrowFromIPCStream(this._conn,t,e)}insertCSVFromPath(t,e){this._bindings.insertCSVFromPath(this._conn,t,e)}insertJSONFromPath(t,e){this._bindings.insertJSONFromPath(this._conn,t,e)}},Dn=class{constructor(t,e,n){this.bindings=t;this.conn=e;this.header=n;this._first=!0,this._depleted=!1}next(){if(this._first)return this._first=!1,{done:!1,value:this.header};if(this._depleted)return{done:!0,value:null};let t=this.bindings.fetchQueryResults(this.conn);return this._depleted=t.length==0,{done:this._depleted,value:t}}[Symbol.iterator](){return this}},ws=class{constructor(t,e,n){this.bindings=t,this.connectionId=e,this.statementId=n}close(){this.bindings.closePrepared(this.connectionId,this.statementId)}query(...t){let e=this.bindings.runPrepared(this.connectionId,this.statementId,t),n=_t.RecordBatchReader.from(e);return console.assert(n.isSync()),console.assert(n.isFile()),new _t.Table(n)}send(...t){let e=this.bindings.sendPrepared(this.connectionId,this.statementId,t),n=new Dn(this.bindings,this.connectionId,e),s=_t.RecordBatchReader.from(n);return console.assert(s.isSync()),console.assert(s.isStream()),s}};var xl=new TextEncoder,Pl=new TextDecoder("utf-8");function Es(r,t,e){let n=xl.encode(e),s=r._malloc(n.byteLength),u=r.HEAPU8.subarray(s,s+n.byteLength);u.set(n),r.HEAPF64[(t>>3)+0]=1,r.HEAPF64[(t>>3)+1]=s,r.HEAPF64[(t>>3)+2]=u.byteLength}function Ts(r){switch(r){case"UINT8":case"INT8":return 1;case"INT32":case"FLOAT":return 4;case"INT64":case"UINT64":case"DOUBLE":case"VARCHAR":return 8;default:return 0}}function Cs(r,t,e,n){let s=r.HEAPU8.subarray(t,t+n*Ts(e));switch(e){case"UINT8":return new Uint8Array(s.buffer,s.byteOffset,n);case"INT8":return new Int8Array(s.buffer,s.byteOffset,n);case"INT32":return new Int32Array(s.buffer,s.byteOffset,n);case"FLOAT":return new Float32Array(s.buffer,s.byteOffset,n);case"DOUBLE":return new Float64Array(s.buffer,s.byteOffset,n);case"VARCHAR":return new Float64Array(s.buffer,s.byteOffset,n);default:return new Array(0)}}function Ol(r,t,e){let n=r.HEAPU8.subarray(t,t+e);return new Uint8Array(n.buffer,n.byteOffset,e)}function In(r,t,e){let n=r.HEAPU8.subarray(t,t+e*8);return new Float64Array(n.buffer,n.byteOffset,e)}function Ul(r,t,e,n,s,u,d,h){try{let g=r._udfFunctions.get(n);if(!g){Es(t,e,"Unknown UDF with id: "+n);return}let M=Pl.decode(t.HEAPU8.subarray(s,s+u)),y=JSON.parse(M),L=In(t,d,h/8),A=$=>{var k;let w=null;switch($.validityBuffer!==void 0&&(w=Ol(t,L[$.validityBuffer],y.rows)),$.physicalType){case"VARCHAR":{if($.dataBuffer===null||$.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for VARCHAR argument");if($.lengthBuffer===null||$.lengthBuffer===void 0)throw new Error("malformed data view, expected data length buffer for VARCHAR argument");let ce=Cs(t,L[$.dataBuffer],$.physicalType,y.rows),oe=[],Ce=In(t,L[$.lengthBuffer],y.rows);for(let v=0;v<y.rows;++v){if(w!=null&&!w[v]){oe.push(null);continue}let C=t.HEAPU8.subarray(ce[v],ce[v]+Ce[v]),be=Pl.decode(C);oe.push(be)}return v=>oe[v]}case"STRUCT":{let ce={},oe=[];for(let Ce=0;Ce<(((k=$.children)==null?void 0:k.length)||0);++Ce){let v=$.children[Ce],C=A(v);oe.push(be=>{ce[v.name]=C(be)})}return w!=null?Ce=>{if(!w[Ce])return null;for(let v of oe)v(Ce);return ce}:Ce=>{for(let v of oe)v(Ce);return ce}}default:{if($.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for argument of type: "+$.physicalType);let ce=Cs(t,L[$.dataBuffer],$.physicalType,y.rows);return w!=null?oe=>w[oe]?ce[oe]:null:oe=>ce[oe]}}},z=[];for(let $=0;$<y.args.length;++$)z.push(A(y.args[$]));let H=y.rows*Ts(y.ret.physicalType),W=t._malloc(H),J=Cs(t,W,y.ret.physicalType,y.rows),X=t._malloc(y.rows),he=Ol(t,X,y.rows);if(J.length==0||he.length==0){Es(t,e,"Can't create physical arrays for result");return}let fe=J;y.ret.physicalType=="VARCHAR"&&(fe=new Array(y.rows));let we=[];for(let $=0;$<y.args.length;++$)we.push(null);for(let $=0;$<y.rows;++$){for(let k=0;k<y.args.length;++k)we[k]=z[k]($);let w=g.func(...we);fe[$]=w,he[$]=w==null?0:1}let ie=0;switch(y.ret.physicalType){case"VARCHAR":{let $=new Array(0);ie=t._malloc(y.rows*Ts("DOUBLE"));let w=In(t,ie,y.rows),k=0;for(let v=0;v<y.rows;++v){let C=xl.encode(fe[v]||"");$.push(C),w[v]=C.length,k+=C.length}let ce=t._malloc(k),oe=t.HEAPU8.subarray(ce,ce+k),Ce=0;for(let v=0;v<y.rows;++v){J[v]=Ce;let C=$[v];oe.subarray(Ce,Ce+C.length).set(C),Ce+=C.length}}}let ue=3*8,te=t._malloc(ue),Q=In(t,te,3);Q[0]=W,Q[1]=X,Q[2]=ie,t.HEAPF64[(e>>3)+0]=0,t.HEAPF64[(e>>3)+1]=te,t.HEAPF64[(e>>3)+2]=0}catch(g){Es(t,e,g.toString())}}function Ff(){let r=new TextDecoder;return t=>(typeof SharedArrayBuffer<"u"&&t.buffer instanceof SharedArrayBuffer&&(t=new Uint8Array(t)),r.decode(t))}var $t=Ff();function je(r,t){console.error(`FAIL WITH: ${t}`),r.ccall("duckdb_web_fail_with",null,["string"],[t])}function qt(r,t,e){let n=r.HEAPU8.subarray(t,t+e),s=new Uint8Array(new ArrayBuffer(n.byteLength));return s.set(n),s}function _e(r,t,e){return $t(r.HEAPU8.subarray(t,t+e))}function ve(r,t,e,n){let s=r.stackSave(),u=r.stackAlloc(3*8);e.unshift("number"),n.unshift(u),r.ccall(t,null,e,n);let d=r.HEAPF64[(u>>3)+0],h=r.HEAPF64[(u>>3)+1],g=r.HEAPF64[(u>>3)+2];return r.stackRestore(s),[d,h,g]}function Te(r){r.ccall("duckdb_web_clear_response",null,[],[])}var Fn=class{constructor(t){let e=new Float64Array(t.buffer,t.byteOffset,t.byteLength/8),n=new Uint8Array(new ArrayBuffer(t.byteLength));n.set(t.subarray(7*8)),this.totalFileReadsCold=e[0],this.totalFileReadsAhead=e[1],this.totalFileReadsCached=e[2],this.totalFileWrites=e[3],this.totalPageAccesses=e[4],this.totalPageLoads=e[5],this.blockSize=e[6],this.blockStats=n}getBlockStats(t,e){return e=e||{file_reads_cold:0,file_reads_ahead:0,file_reads_cached:0,file_writes:0,page_accesses:0,page_loads:0},e.file_writes=this.blockStats[t*3+0]&15,e.file_reads_cold=this.blockStats[t*3+0]>>4,e.file_reads_ahead=this.blockStats[t*3+1]&15,e.file_reads_cached=this.blockStats[t*3+1]>>4,e.page_accesses=this.blockStats[t*3+1]&15,e.page_loads=this.blockStats[t*3+1]>>4,e}};var Lf=new TextEncoder;var Ln=class{constructor(t,e){this._instance=null;this._initPromise=null;this._initPromiseResolver=()=>{};this.onInstantiationProgress=[];this._logger=t,this._runtime=e,this._nextUDFId=1}get logger(){return this._logger}get mod(){return this._instance}get pthread(){return this.mod.PThread||null}async instantiate(t=e=>{}){return this._instance!=null?this:(this._initPromise!=null&&(this.onInstantiationProgress.push(t),await this._initPromise),this._initPromise=new Promise(e=>{this._initPromiseResolver=e}),this.onInstantiationProgress=[t],this._instance=await this.instantiateImpl({print:console.log.bind(console),printErr:console.log.bind(console),onRuntimeInitialized:this._initPromiseResolver}),await this._initPromise,this._initPromise=null,this.onInstantiationProgress=this.onInstantiationProgress.filter(e=>e!=t),this)}open(t){let[e,n,s]=ve(this.mod,"duckdb_web_open",["string"],[JSON.stringify(t)]);if(e!==0)throw new Error(_e(this.mod,n,s));Te(this.mod)}reset(){let[t,e,n]=ve(this.mod,"duckdb_web_reset",[],[]);if(t!==0)throw new Error(_e(this.mod,e,n));Te(this.mod)}getVersion(){let[t,e,n]=ve(this.mod,"duckdb_web_get_version",[],[]);if(t!==0)throw new Error(_e(this.mod,e,n));let s=_e(this.mod,e,n);return Te(this.mod),s}getFeatureFlags(){return this.mod.ccall("duckdb_web_get_feature_flags","number",[],[])}tokenize(t){let[e,n,s]=ve(this.mod,"duckdb_web_tokenize",["string"],[t]);if(e!==0)throw new Error(_e(this.mod,n,s));let u=_e(this.mod,n,s);return Te(this.mod),JSON.parse(u)}connect(){let t=this.mod.ccall("duckdb_web_connect","number",[],[]);return new Mn(this,t)}disconnect(t){if(this.mod.ccall("duckdb_web_disconnect",null,["number"],[t]),this.pthread)for(let e of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])e.postMessage({cmd:"dropUDFFunctions",connectionId:t})}runQuery(t,e){let[n,s,u]=ve(this.mod,"duckdb_web_query_run",["number","string"],[t,e]);if(n!==0)throw new Error(_e(this.mod,s,u));let d=qt(this.mod,s,u);return Te(this.mod),d}startPendingQuery(t,e){let[n,s,u]=ve(this.mod,"duckdb_web_pending_query_start",["number","string"],[t,e]);if(n!==0)throw new Error(_e(this.mod,s,u));if(s==0)return null;let d=qt(this.mod,s,u);return Te(this.mod),d}pollPendingQuery(t){let[e,n,s]=ve(this.mod,"duckdb_web_pending_query_poll",["number"],[t]);if(e!==0)throw new Error(_e(this.mod,n,s));if(n==0)return null;let u=qt(this.mod,n,s);return Te(this.mod),u}cancelPendingQuery(t){return this.mod.ccall("duckdb_web_pending_query_cancel","boolean",["number"],[t])}fetchQueryResults(t){let[e,n,s]=ve(this.mod,"duckdb_web_query_fetch_results",["number"],[t]);if(e!==0)throw new Error(_e(this.mod,n,s));let u=qt(this.mod,n,s);return Te(this.mod),u}getTableNames(t,e){let[n,s,u]=ve(this.mod,"duckdb_web_get_tablenames",["number","string"],[t,e]);if(n!==0)throw new Error(_e(this.mod,s,u));let d=_e(this.mod,s,u);return Te(this.mod),JSON.parse(d)}createScalarFunction(t,e,n,s){let u={functionId:this._nextUDFId,name:e,returnType:ur(n)},d={functionId:u.functionId,connectionId:t,name:e,returnType:n,func:s};this._nextUDFId+=1;let[h,g,M]=ve(this.mod,"duckdb_web_udf_scalar_create",["number","string"],[t,JSON.stringify(u)]);if(h!==0)throw new Error(_e(this.mod,g,M));if(Te(this.mod),globalThis.DUCKDB_RUNTIME._udfFunctions=(globalThis.DUCKDB_RUNTIME._udfFunctions||new Map).set(d.functionId,d),this.pthread)for(let y of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])y.postMessage({cmd:"registerUDFFunction",udf:d})}createPrepared(t,e){let[n,s,u]=ve(this.mod,"duckdb_web_prepared_create",["number","string"],[t,e]);if(n!==0)throw new Error(_e(this.mod,s,u));return Te(this.mod),s}closePrepared(t,e){let[n,s,u]=ve(this.mod,"duckdb_web_prepared_close",["number","number"],[t,e]);if(n!==0)throw new Error(_e(this.mod,s,u));Te(this.mod)}runPrepared(t,e,n){let[s,u,d]=ve(this.mod,"duckdb_web_prepared_run",["number","number","string"],[t,e,JSON.stringify(n)]);if(s!==0)throw new Error(_e(this.mod,u,d));let h=qt(this.mod,u,d);return Te(this.mod),h}sendPrepared(t,e,n){let[s,u,d]=ve(this.mod,"duckdb_web_prepared_send",["number","number","string"],[t,e,JSON.stringify(n)]);if(s!==0)throw new Error(_e(this.mod,u,d));let h=qt(this.mod,u,d);return Te(this.mod),h}insertArrowFromIPCStream(t,e,n){if(e.length==0)return;let s=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(s,s+e.length).set(e);let d=n?JSON.stringify(n):"",[h,g,M]=ve(this.mod,"duckdb_web_insert_arrow_from_ipc_stream",["number","number","number","string"],[t,s,e.length,d]);if(h!==0)throw new Error(_e(this.mod,g,M))}insertCSVFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let M in n.columns)n.columnsFlat.push(kn(M,n.columns[M]))}let s={...n};s.columns=s.columnsFlat,delete s.columnsFlat;let u=JSON.stringify(s),[d,h,g]=ve(this.mod,"duckdb_web_insert_csv_from_path",["number","string","string"],[t,e,u]);if(d!==0)throw new Error(_e(this.mod,h,g))}insertJSONFromPath(t,e,n){if(n.columns!==void 0){n.columnsFlat=[];for(let M in n.columns)n.columnsFlat.push(kn(M,n.columns[M]))}let s={...n};s.columns=s.columnsFlat,delete s.columnsFlat;let u=JSON.stringify(s),[d,h,g]=ve(this.mod,"duckdb_web_insert_json_from_path",["number","string","string"],[t,e,u]);if(d!==0)throw new Error(_e(this.mod,h,g))}globFiles(t){let[e,n,s]=ve(this.mod,"duckdb_web_fs_glob_file_infos",["string"],[t]);if(e!==0)throw new Error(_e(this.mod,n,s));let u=_e(this.mod,n,s);Te(this.mod);let d=JSON.parse(u);return d??[]}registerFileURL(t,e,n,s=!1){e===void 0&&(e=t);let[u,d,h]=ve(this.mod,"duckdb_web_fs_register_file_url",["string","string"],[t,e,n,s]);if(u!==0)throw new Error(_e(this.mod,d,h));Te(this.mod)}registerFileText(t,e){let n=Lf.encode(e);this.registerFileBuffer(t,n)}registerFileBuffer(t,e){let n=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(n,n+e.length).set(e);let[u,d,h]=ve(this.mod,"duckdb_web_fs_register_file_buffer",["string","number","number"],[t,n,e.length]);if(u!==0)throw new Error(_e(this.mod,d,h));Te(this.mod)}registerFileHandle(t,e,n,s){let[u,d,h]=ve(this.mod,"duckdb_web_fs_register_file_url",["string","string","number","boolean"],[t,t,n,s]);if(u!==0)throw new Error(_e(this.mod,d,h));if(Te(this.mod),globalThis.DUCKDB_RUNTIME._files=(globalThis.DUCKDB_RUNTIME._files||new Map).set(t,e),this.pthread){for(let g of this.pthread.runningWorkers)g.postMessage({cmd:"registerFileHandle",fileName:t,fileHandle:e});for(let g of this.pthread.unusedWorkers)g.postMessage({cmd:"dropFileHandle",fileName:t})}}dropFile(t){let[e,n,s]=ve(this.mod,"duckdb_web_fs_drop_file",["string"],[t]);if(e!==0)throw new Error(_e(this.mod,n,s));Te(this.mod)}dropFiles(){let[t,e,n]=ve(this.mod,"duckdb_web_fs_drop_files",[],[]);if(t!==0)throw new Error(_e(this.mod,e,n));Te(this.mod)}flushFiles(){this.mod.ccall("duckdb_web_flush_files",null,[],[])}copyFileToPath(t,e){let[n,s,u]=ve(this.mod,"duckdb_web_copy_file_to_path",["string","string"],[t,e]);if(n!==0)throw new Error(_e(this.mod,s,u));Te(this.mod)}copyFileToBuffer(t){let[e,n,s]=ve(this.mod,"duckdb_web_copy_file_to_buffer",["string"],[t]);if(e!==0)throw new Error(_e(this.mod,n,s));let u=this.mod.HEAPU8.subarray(n,n+s),d=new Uint8Array(u.length);return d.set(u),Te(this.mod),d}collectFileStatistics(t,e){let[n,s,u]=ve(this.mod,"duckdb_web_collect_file_stats",["string","boolean"],[t,e]);if(n!==0)throw new Error(_e(this.mod,s,u))}exportFileStatistics(t){let[e,n,s]=ve(this.mod,"duckdb_web_export_file_stats",["string"],[t]);if(e!==0)throw new Error(_e(this.mod,n,s));return new Fn(this.mod.HEAPU8.subarray(n,n+s))}};var Nl=Gt(require("fs")),Pn=class extends Ln{constructor(e,n,s,u){super(e,n);this.mainModulePath=s,this.pthreadWorkerPath=u}locateFile(e,n){if(e.endsWith(".wasm"))return this.mainModulePath;if(e.endsWith(".worker.js")){if(!this.pthreadWorkerPath)throw new Error("Missing DuckDB worker path!");return this.pthreadWorkerPath}throw new Error(`WASM instantiation requested unexpected file: prefix=${n} path=${e}`)}instantiateWasm(e,n){globalThis.DUCKDB_RUNTIME={};for(let u of Object.getOwnPropertyNames(this._runtime))u!="constructor"&&(globalThis.DUCKDB_RUNTIME[u]=Object.getOwnPropertyDescriptor(this._runtime,u).value);let s=Nl.default.readFileSync(this.mainModulePath);return WebAssembly.instantiate(s,e).then(u=>{n(u.instance,u.module)}),[]}instantiateImpl(e){return Ll({...e,instantiateWasm:this.instantiateWasm.bind(this)})}};var On=class extends Pn{constructor(t,e,n,s=null){super(t,e,n,s)}instantiateImpl(t){return Fl({...t,instantiateWasm:this.instantiateWasm.bind(this),locateFile:this.locateFile.bind(this)})}};var He=Gt(require("fs"));var A_=Gt(R_());var Ae={_files:new Map,_filesById:new Map,_fileInfoCache:new Map,_udfFunctions:new Map,resolveFileInfo(r,t){try{let e=Ae._fileInfoCache.get(t),[n,s,u]=ve(r,"duckdb_web_fs_get_file_info_by_id",["number","number"],[t,(e==null?void 0:e.cacheEpoch)||0]);if(n!==0)return je(r,_e(r,s,u)),null;if(u===0)return Te(r),e;let d=_e(r,s,u);Te(r);let h=JSON.parse(d);return h==null?null:(Ae._fileInfoCache.set(t,h),h)}catch(e){return je(r,e.toString()),null}},testPlatformFeature:(r,t)=>{switch(t){case 1:return typeof BigInt64Array<"u";default:return console.warn(`test for unknown feature: ${t}`),!1}},getDefaultDataProtocol(r){return 1},openFile(r,t,e){var n,s;try{Ae._fileInfoCache.delete(t);let u=Ae.resolveFileInfo(r,t);switch(u==null?void 0:u.dataProtocol){case 1:{let d=(n=Ae._files)==null?void 0:n.get(u.dataUrl);d==null&&(d=He.default.openSync(u.dataUrl,He.default.constants.O_CREAT|He.default.constants.O_RDWR,He.default.constants.S_IRUSR|He.default.constants.S_IWUSR),(s=Ae._filesById)==null||s.set(u.fileId,d));let h=He.default.fstatSync(d).size,g=r._malloc(2*8);return r.HEAPF64[(g>>3)+0]=+h,r.HEAPF64[(g>>3)+1]=0,g}case 2:case 3:case 4:case 5:je(r,"Unsupported data protocol")}}catch(u){je(r,u.toString())}return 0},syncFile:(r,t)=>{},closeFile:(r,t)=>{try{let e=Ae._fileInfoCache.get(t);switch(Ae._fileInfoCache.delete(t),e==null?void 0:e.dataProtocol){case 1:{let n=Ae._filesById.get(t);Ae._filesById.delete(t),n!=null&&He.default.closeSync(n);break}case 2:case 3:case 4:case 5:break}}catch(e){je(r,e.toString())}return 0},truncateFile:(r,t,e)=>{try{let n=Ae.resolveFileInfo(r,t);switch(n==null?void 0:n.dataProtocol){case 1:{He.default.truncateSync(n.dataUrl,e);break}case 2:case 3:case 4:case 5:je(r,"Unsupported data protocol")}}catch(n){je(r,n.toString())}return 0},readFile:(r,t,e,n,s)=>{try{let u=Ae.resolveFileInfo(r,t);switch(u==null?void 0:u.dataProtocol){case 1:{let d=Ae._filesById.get(t);return d==null?(je(r,`File ${t} is missing a file descriptor`),0):He.default.readSync(d,r.HEAPU8,e,n,s)}case 2:case 3:case 4:case 5:je(r,"Unsupported data protocol")}}catch(u){je(r,u.toString())}return 0},writeFile:(r,t,e,n,s)=>{try{let u=Ae.resolveFileInfo(r,t);switch(u==null?void 0:u.dataProtocol){case 1:{let d=Ae._filesById.get(t);if(d==null)return je(r,`File ${t} is missing a file descriptor`),0;let h=r.HEAPU8.subarray(e,e+n);return He.default.writeSync(d,h,0,h.length,s)}case 2:case 3:case 4:case 5:je(r,"Unsupported data protocol")}}catch(u){je(r,u.toString())}return 0},getLastFileModificationTime:(r,t)=>{try{let e=Ae.resolveFileInfo(r,t);switch(e==null?void 0:e.dataProtocol){case 1:{let n=Ae._filesById.get(t);return n==null?(je(r,`File ${t} is missing a file descriptor`),0):He.default.fstatSync(n).mtime.getTime()}case 2:case 3:case 4:case 5:je(r,"Unsupported data protocol")}}catch(e){je(r,e.toString())}return 0},checkDirectory:(r,t,e)=>{try{let n=$t(r.HEAPU8.subarray(t,t+e));return He.default.existsSync(n)}catch(n){return je(r,n.toString()),!1}},createDirectory:(r,t,e)=>{try{let n=$t(r.HEAPU8.subarray(t,t+e));return He.default.mkdirSync(n)}catch(n){return je(r,n.toString()),0}},removeDirectory:(r,t,e)=>{try{let n=$t(r.HEAPU8.subarray(t,t+e));return He.default.rmdirSync(n)}catch(n){return je(r,n.toString()),0}},listDirectoryEntries:(r,t,e)=>(je(r,"Not Implemented"),!1),glob:(r,t,e)=>{try{let n=_e(r,t,e),s=A_.sync([n],{dot:!0});for(let u of s)r.ccall("duckdb_web_fs_glob_add_path",null,["string"],[u])}catch(n){return je(r,n.toString()),0}},moveFile:(r,t,e,n,s)=>{var g,M;let u=_e(r,t,e),d=_e(r,n,s),h=(g=Ae._files)==null?void 0:g.get(u);h!==void 0&&(Ae._files.delete(h),Ae._files.set(d,h));for(let[y,L]of((M=Ae._fileInfoCache)==null?void 0:M.entries())||[])if(L.dataUrl==u){Ae._fileInfoCache.delete(y);break}return!0},checkFile:(r,t,e)=>{try{let n=$t(r.HEAPU8.subarray(t,t+e));return He.default.existsSync(n)}catch(n){return je(r,n.toString()),!1}},removeFile:(r,t,e)=>{try{let n=$t(r.HEAPU8.subarray(t,t+e));return He.default.rmSync(n)}catch(n){return je(r,n.toString()),0}},callScalarUDF:(r,t,e,n,s,u,d)=>{Ul(Ae,r,t,e,n,s,u,d)}};var ol=class extends Rn{postMessage(t,e){globalThis.postMessage(t,e)}async instantiate(t,e,n){return await new On(this,Ae,t,e).instantiate(n)}};function j_(){let r=new ol;globalThis.onmessage=async t=>{await r.onMessage(t.data)}}j_();0&&(module.exports={registerWorker});
/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */
/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */
/*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */
/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */
/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
//# sourceMappingURL=data:application/json;base64,
