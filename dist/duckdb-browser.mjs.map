{
  "version": 3,
  "sources": ["../../web-worker/cjs/browser.js", "../src/bindings/config.ts", "../src/log.ts", "../src/status.ts", "../src/parallel/async_connection.ts", "../src/parallel/worker_request.ts", "../src/json_typedef.ts", "../src/parallel/async_bindings.ts", "../src/parallel/worker_dispatcher.ts", "../../wasm-feature-detect/dist/esm/index.js", "../src/version.ts", "../src/platform.ts", "../src/worker.ts", "../src/bindings/runtime.ts"],
  "sourcesContent": ["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nmodule.exports = Worker;", "export interface DuckDBQueryConfig {\r\n    /**\r\n     * The polling interval for queries\r\n     */\r\n    queryPollingInterval?: number;\r\n    /**\r\n     * Cast BigInt to Double?\r\n     */\r\n    castBigIntToDouble?: boolean;\r\n    /**\r\n     * Cast Timestamp to Date64?\r\n     */\r\n    castTimestampToDate?: boolean;\r\n    /**\r\n     * Cast Timestamp to Date64?\r\n     */\r\n    castDurationToTime64?: boolean;\r\n    /**\r\n     * Cast Decimal to Double?\r\n     */\r\n    castDecimalToDouble?: boolean;\r\n}\r\n\r\nexport interface DuckDBFilesystemConfig {\r\n    /**\r\n     * Allow falling back to full HTTP reads if the server does not support range requests.\r\n     */\r\n    allowFullHTTPReads?: boolean;\r\n}\r\n\r\nexport enum DuckDBAccessMode {\r\n    UNDEFINED = 0,\r\n    AUTOMATIC = 1,\r\n    READ_ONLY = 2,\r\n    READ_WRITE = 3,\r\n}\r\n\r\nexport interface DuckDBConfig {\r\n    /**\r\n     * The database path\r\n     */\r\n    path?: string;\r\n    /**\r\n     * The access mode\r\n     */\r\n    accessMode?: DuckDBAccessMode;\r\n    /**\r\n     * The maximum number of threads.\r\n     * Note that this will only work with cross-origin isolated sites since it requires SharedArrayBuffers.\r\n     */\r\n    maximumThreads?: number;\r\n    /**\r\n     * The query config\r\n     */\r\n    query?: DuckDBQueryConfig;\r\n    /**\r\n     * The filesystem config\r\n     */\r\n    filesystem?: DuckDBFilesystemConfig;\r\n}\r\n", "export enum LogLevel {\r\n    NONE = 0,\r\n    DEBUG = 1,\r\n    INFO = 2,\r\n    WARNING = 3,\r\n    ERROR = 4,\r\n}\r\n\r\nexport enum LogTopic {\r\n    NONE = 0,\r\n    CONNECT = 1,\r\n    DISCONNECT = 2,\r\n    OPEN = 3,\r\n    QUERY = 4,\r\n    INSTANTIATE = 5,\r\n}\r\n\r\nexport enum LogEvent {\r\n    NONE = 0,\r\n    OK = 1,\r\n    ERROR = 2,\r\n    START = 3,\r\n    RUN = 4,\r\n    CAPTURE = 5,\r\n}\r\n\r\nexport enum LogOrigin {\r\n    NONE = 0,\r\n    WEB_WORKER = 1,\r\n    NODE_WORKER = 2,\r\n    BINDINGS = 3,\r\n    ASYNC_DUCKDB = 4,\r\n}\r\n\r\nexport type LogEntry<O, T, E, V> = {\r\n    readonly timestamp: Date;\r\n    readonly level: LogLevel;\r\n    readonly origin: O;\r\n    readonly topic: T;\r\n    readonly event: E;\r\n    readonly value: V;\r\n};\r\n\r\nexport type LogEntryVariant =\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.INSTANTIATE, LogEvent.ERROR, string>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.START, void>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.OK, void>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.ERROR, void>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.CONNECT, LogEvent.OK, void>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.CONNECT, LogEvent.ERROR, void>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.DISCONNECT, LogEvent.OK, void>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.DISCONNECT, LogEvent.ERROR, void>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.START, void>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.OK, void>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.ERROR, void>\r\n    | LogEntry<LogOrigin.ASYNC_DUCKDB, LogTopic.QUERY, LogEvent.RUN, string>;\r\n\r\nexport interface Logger {\r\n    log(entry: LogEntryVariant): void;\r\n}\r\n\r\nexport class VoidLogger implements Logger {\r\n    public log(_entry: LogEntryVariant): void {}\r\n}\r\n\r\nexport class ConsoleLogger implements Logger {\r\n    constructor(protected level: LogLevel = LogLevel.INFO) {}\r\n    public log(entry: LogEntryVariant): void {\r\n        if (entry.level >= this.level) {\r\n            console.log(entry);\r\n        }\r\n    }\r\n}\r\n\r\nexport function getLogLevelLabel(level: LogLevel): string {\r\n    switch (level) {\r\n        case LogLevel.NONE:\r\n            return 'NONE';\r\n        case LogLevel.DEBUG:\r\n            return 'DEBUG';\r\n        case LogLevel.INFO:\r\n            return 'INFO';\r\n        case LogLevel.WARNING:\r\n            return 'WARNING';\r\n        case LogLevel.ERROR:\r\n            return 'ERROR';\r\n        default:\r\n            return '?';\r\n    }\r\n}\r\n\r\nexport function getLogEventLabel(event: LogEvent): string {\r\n    switch (event) {\r\n        case LogEvent.NONE:\r\n            return 'NONE';\r\n        case LogEvent.OK:\r\n            return 'OK';\r\n        case LogEvent.ERROR:\r\n            return 'ERROR';\r\n        case LogEvent.START:\r\n            return 'START';\r\n        case LogEvent.RUN:\r\n            return 'RUN';\r\n        case LogEvent.CAPTURE:\r\n            return 'CAPTURE';\r\n        default:\r\n            return '?';\r\n    }\r\n}\r\n\r\nexport function getLogTopicLabel(topic: LogTopic): string {\r\n    switch (topic) {\r\n        case LogTopic.CONNECT:\r\n            return 'CONNECT';\r\n        case LogTopic.DISCONNECT:\r\n            return 'DISCONNECT';\r\n        case LogTopic.INSTANTIATE:\r\n            return 'INSTANTIATE';\r\n        case LogTopic.OPEN:\r\n            return 'OPEN';\r\n        case LogTopic.QUERY:\r\n            return 'QUERY';\r\n        default:\r\n            return '?';\r\n    }\r\n}\r\n\r\nexport function getLogOriginLabel(origin: LogOrigin): string {\r\n    switch (origin) {\r\n        case LogOrigin.NONE:\r\n            return 'NONE';\r\n        case LogOrigin.WEB_WORKER:\r\n            return 'WEB WORKER';\r\n        case LogOrigin.NODE_WORKER:\r\n            return 'NODE WORKER';\r\n        case LogOrigin.BINDINGS:\r\n            return 'DUCKDB BINDINGS';\r\n        case LogOrigin.ASYNC_DUCKDB:\r\n            return 'DUCKDB';\r\n        default:\r\n            return '?';\r\n    }\r\n}\r\n", "export enum StatusCode {\r\n    SUCCESS = 0,\r\n}\r\n", "import * as arrow from 'apache-arrow';\r\nimport { AsyncDuckDB } from './async_bindings';\r\nimport { LogLevel, LogTopic, LogOrigin, LogEvent } from '../log';\r\nimport { ArrowInsertOptions, CSVInsertOptions, JSONInsertOptions } from '../bindings/insert_options';\r\n\r\n/** A thin helper to memoize the connection id */\r\nexport class AsyncDuckDBConnection {\r\n    /** The async duckdb */\r\n    protected readonly _bindings: AsyncDuckDB;\r\n    /** The conn handle */\r\n    protected readonly _conn: number;\r\n\r\n    constructor(bindings: AsyncDuckDB, conn: number) {\r\n        this._bindings = bindings;\r\n        this._conn = conn;\r\n    }\r\n\r\n    /** Access the database bindings */\r\n    public get bindings(): AsyncDuckDB {\r\n        return this._bindings;\r\n    }\r\n\r\n    /** Disconnect from the database */\r\n    public async close(): Promise<void> {\r\n        return this._bindings.disconnect(this._conn);\r\n    }\r\n\r\n    /** Brave souls may use this function to consume the underlying connection id */\r\n    public useUnsafe<R>(callback: (bindings: AsyncDuckDB, conn: number) => R) {\r\n        return callback(this._bindings, this._conn);\r\n    }\r\n\r\n    /** Run a query */\r\n    public async query<T extends { [key: string]: arrow.DataType } = any>(text: string): Promise<arrow.Table<T>> {\r\n        this._bindings.logger.log({\r\n            timestamp: new Date(),\r\n            level: LogLevel.INFO,\r\n            origin: LogOrigin.ASYNC_DUCKDB,\r\n            topic: LogTopic.QUERY,\r\n            event: LogEvent.RUN,\r\n            value: text,\r\n        });\r\n        const buffer = await this._bindings.runQuery(this._conn, text);\r\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\r\n        console.assert(reader.isSync(), \"Reader is not sync\");\r\n        console.assert(reader.isFile(), \"Reader is not file\");\r\n        return new arrow.Table(reader as arrow.RecordBatchFileReader);\r\n    }\r\n\r\n    /** Send a query */\r\n    public async send<T extends { [key: string]: arrow.DataType } = any>(\r\n        text: string,\r\n    ): Promise<arrow.AsyncRecordBatchStreamReader<T>> {\r\n        this._bindings.logger.log({\r\n            timestamp: new Date(),\r\n            level: LogLevel.INFO,\r\n            origin: LogOrigin.ASYNC_DUCKDB,\r\n            topic: LogTopic.QUERY,\r\n            event: LogEvent.RUN,\r\n            value: text,\r\n        });\r\n        let header = await this._bindings.startPendingQuery(this._conn, text);\r\n        while (header == null) {\r\n            header = await this._bindings.pollPendingQuery(this._conn);\r\n        }\r\n        const iter = new AsyncResultStreamIterator(this._bindings, this._conn, header);\r\n        const reader = await arrow.RecordBatchReader.from<T>(iter);\r\n        console.assert(reader.isAsync());\r\n        console.assert(reader.isStream());\r\n        return reader as unknown as arrow.AsyncRecordBatchStreamReader<T>; // XXX\r\n    }\r\n\r\n    /** Cancel a query that was sent earlier */\r\n    public async cancelSent(): Promise<boolean> {\r\n        return await this._bindings.cancelPendingQuery(this._conn);\r\n    }\r\n\r\n    /** Get table names */\r\n    public async getTableNames(query: string): Promise<string[]> {\r\n        return await this._bindings.getTableNames(this._conn, query);\r\n    }\r\n\r\n    /** Create a prepared statement */\r\n    public async prepare<T extends { [key: string]: arrow.DataType } = any>(\r\n        text: string,\r\n    ): Promise<AsyncPreparedStatement> {\r\n        const stmt = await this._bindings.createPrepared(this._conn, text);\r\n        return new AsyncPreparedStatement<T>(this._bindings, this._conn, stmt);\r\n    }\r\n\r\n    /** Insert an arrow table */\r\n    public async insertArrowTable(table: arrow.Table, options: ArrowInsertOptions): Promise<void> {\r\n        const buffer = arrow.tableToIPC(table, 'stream');\r\n        await this.insertArrowFromIPCStream(buffer, options);\r\n    }\r\n    /** Insert an arrow table from an ipc stream */\r\n    public async insertArrowFromIPCStream(buffer: Uint8Array, options: ArrowInsertOptions): Promise<void> {\r\n        await this._bindings.insertArrowFromIPCStream(this._conn, buffer, options);\r\n    }\r\n    /** Insert csv file from path */\r\n    public async insertCSVFromPath(text: string, options: CSVInsertOptions): Promise<void> {\r\n        await this._bindings.insertCSVFromPath(this._conn, text, options);\r\n    }\r\n    /** Insert json file from path */\r\n    public async insertJSONFromPath(text: string, options: JSONInsertOptions): Promise<void> {\r\n        await this._bindings.insertJSONFromPath(this._conn, text, options);\r\n    }\r\n}\r\n\r\n/** An async result stream iterator */\r\nexport class AsyncResultStreamIterator implements AsyncIterable<Uint8Array> {\r\n    /** First chunk? */\r\n    protected _first: boolean;\r\n    /** Reached end of stream? */\r\n    protected _depleted: boolean;\r\n    /** In-flight */\r\n    protected _inFlight: Promise<Uint8Array> | null;\r\n\r\n    constructor(\r\n        protected readonly db: AsyncDuckDB,\r\n        protected readonly conn: number,\r\n        protected readonly header: Uint8Array,\r\n    ) {\r\n        this._first = true;\r\n        this._depleted = false;\r\n        this._inFlight = null;\r\n    }\r\n\r\n    async next(): Promise<IteratorResult<Uint8Array>> {\r\n        if (this._first) {\r\n            this._first = false;\r\n            return { done: false, value: this.header };\r\n        }\r\n        if (this._depleted) {\r\n            return { done: true, value: null };\r\n        }\r\n        let buffer: Uint8Array;\r\n        if (this._inFlight != null) {\r\n            buffer = await this._inFlight;\r\n            this._inFlight = null;\r\n        } else {\r\n            buffer = await this.db.fetchQueryResults(this.conn);\r\n        }\r\n        this._depleted = buffer.length == 0;\r\n        if (!this._depleted) {\r\n            this._inFlight = this.db.fetchQueryResults(this.conn);\r\n        }\r\n        return {\r\n            done: this._depleted,\r\n            value: buffer,\r\n        };\r\n    }\r\n\r\n    [Symbol.asyncIterator]() {\r\n        return this;\r\n    }\r\n}\r\n\r\n/** A thin helper to bind the prepared statement id */\r\nexport class AsyncPreparedStatement<T extends { [key: string]: arrow.DataType } = any> {\r\n    /** The bindings */\r\n    protected readonly bindings: AsyncDuckDB;\r\n    /** The connection id */\r\n    protected readonly connectionId: number;\r\n    /** The statement id */\r\n    protected readonly statementId: number;\r\n\r\n    /** Constructor */\r\n    constructor(bindings: AsyncDuckDB, connectionId: number, statementId: number) {\r\n        this.bindings = bindings;\r\n        this.connectionId = connectionId;\r\n        this.statementId = statementId;\r\n    }\r\n\r\n    /** Close a prepared statement */\r\n    public async close() {\r\n        await this.bindings.closePrepared(this.connectionId, this.statementId);\r\n    }\r\n\r\n    /** Run a prepared statement */\r\n    public async query(...params: any[]): Promise<arrow.Table<T>> {\r\n        const buffer = await this.bindings.runPrepared(this.connectionId, this.statementId, params);\r\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\r\n        console.assert(reader.isSync());\r\n        console.assert(reader.isFile());\r\n        return new arrow.Table(reader as arrow.RecordBatchFileReader);\r\n    }\r\n\r\n    /** Send a prepared statement */\r\n    public async send(...params: any[]): Promise<arrow.AsyncRecordBatchStreamReader<T>> {\r\n        const header = await this.bindings.sendPrepared(this.connectionId, this.statementId, params);\r\n        const iter = new AsyncResultStreamIterator(this.bindings, this.connectionId, header);\r\n        const reader = await arrow.RecordBatchReader.from<T>(iter);\r\n        console.assert(reader.isAsync());\r\n        console.assert(reader.isStream());\r\n        return reader as unknown as arrow.AsyncRecordBatchStreamReader<T>; // XXX\r\n    }\r\n}\r\n", "import { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from '../bindings/insert_options';\r\nimport { LogEntryVariant } from '../log';\r\nimport { ScriptTokens } from '../bindings/tokens';\r\nimport { FileStatistics } from '../bindings/file_stats';\r\nimport { DuckDBConfig } from '../bindings/config';\r\nimport { WebFile } from '../bindings/web_file';\r\nimport { InstantiationProgress } from '../bindings/progress';\r\nimport { DuckDBDataProtocol } from '../bindings';\r\n\r\nexport type ConnectionID = number;\r\nexport type StatementID = number;\r\n\r\nexport enum WorkerRequestType {\r\n    CANCEL_PENDING_QUERY = 'CANCEL_PENDING_QUERY',\r\n    CLOSE_PREPARED = 'CLOSE_PREPARED',\r\n    COLLECT_FILE_STATISTICS = 'COLLECT_FILE_STATISTICS',\r\n    CONNECT = 'CONNECT',\r\n    COPY_FILE_TO_BUFFER = 'COPY_FILE_TO_BUFFER',\r\n    COPY_FILE_TO_PATH = 'COPY_FILE_TO_PATH',\r\n    CREATE_PREPARED = 'CREATE_PREPARED',\r\n    DISCONNECT = 'DISCONNECT',\r\n    DROP_FILE = 'DROP_FILE',\r\n    DROP_FILES = 'DROP_FILES',\r\n    EXPORT_FILE_STATISTICS = 'EXPORT_FILE_STATISTICS',\r\n    FETCH_QUERY_RESULTS = 'FETCH_QUERY_RESULTS',\r\n    FLUSH_FILES = 'FLUSH_FILES',\r\n    GET_FEATURE_FLAGS = 'GET_FEATURE_FLAGS',\r\n    GET_TABLE_NAMES = 'GET_TABLE_NAMES',\r\n    GET_VERSION = 'GET_VERSION',\r\n    GLOB_FILE_INFOS = 'GLOB_FILE_INFOS',\r\n    INSERT_ARROW_FROM_IPC_STREAM = 'INSERT_ARROW_FROM_IPC_STREAM',\r\n    INSERT_CSV_FROM_PATH = 'IMPORT_CSV_FROM_PATH',\r\n    INSERT_JSON_FROM_PATH = 'IMPORT_JSON_FROM_PATH',\r\n    INSTANTIATE = 'INSTANTIATE',\r\n    OPEN = 'OPEN',\r\n    PING = 'PING',\r\n    POLL_PENDING_QUERY = 'POLL_PENDING_QUERY',\r\n    REGISTER_FILE_BUFFER = 'REGISTER_FILE_BUFFER',\r\n    REGISTER_FILE_HANDLE = 'REGISTER_FILE_HANDLE',\r\n    REGISTER_FILE_URL = 'REGISTER_FILE_URL',\r\n    RESET = 'RESET',\r\n    RUN_PREPARED = 'RUN_PREPARED',\r\n    RUN_QUERY = 'RUN_QUERY',\r\n    SEND_PREPARED = 'SEND_PREPARED',\r\n    START_PENDING_QUERY = 'START_PENDING_QUERY',\r\n    TOKENIZE = 'TOKENIZE',\r\n}\r\n\r\nexport enum WorkerResponseType {\r\n    CONNECTION_INFO = 'CONNECTION_INFO',\r\n    ERROR = 'ERROR',\r\n    FEATURE_FLAGS = 'FEATURE_FLAGS',\r\n    FILE_BUFFER = 'FILE_BUFFER',\r\n    FILE_INFOS = 'FILE_INFOS',\r\n    FILE_SIZE = 'FILE_SIZE',\r\n    FILE_STATISTICS = 'FILE_STATISTICS',\r\n    INSTANTIATE_PROGRESS = 'INSTANTIATE_PROGRESS',\r\n    LOG = 'LOG',\r\n    OK = 'OK',\r\n    PREPARED_STATEMENT_ID = 'PREPARED_STATEMENT_ID',\r\n    QUERY_PLAN = 'QUERY_PLAN',\r\n    QUERY_RESULT = 'QUERY_RESULT',\r\n    QUERY_RESULT_CHUNK = 'QUERY_RESULT_CHUNK',\r\n    QUERY_RESULT_HEADER = 'QUERY_RESULT_HEADER',\r\n    QUERY_RESULT_HEADER_OR_NULL = 'QUERY_RESULT_HEADER_OR_NULL',\r\n    REGISTERED_FILE = 'REGISTERED_FILE',\r\n    SCRIPT_TOKENS = 'SCRIPT_TOKENS',\r\n    SUCCESS = 'SUCCESS',\r\n    TABLE_NAMES = 'TABLE_NAMES',\r\n    VERSION_STRING = 'VERSION_STRING',\r\n}\r\n\r\nexport type WorkerRequest<T, P> = {\r\n    readonly messageId: number;\r\n    readonly type: T;\r\n    readonly data: P;\r\n};\r\n\r\nexport type WorkerResponse<T, P> = {\r\n    readonly messageId: number;\r\n    readonly requestId: number;\r\n    readonly type: T;\r\n    readonly data: P;\r\n};\r\n\r\nexport type WorkerTaskReturnType<T extends WorkerTaskVariant> = T extends WorkerTask<any, any, infer P> ? P : never;\r\n\r\nexport class WorkerTask<T, D, P> {\r\n    readonly type: T;\r\n    readonly data: D;\r\n    promise: Promise<P>;\r\n    promiseResolver: (value: P | PromiseLike<P>) => void = () => {};\r\n    promiseRejecter: (value: any) => void = () => {};\r\n\r\n    constructor(type: T, data: D) {\r\n        this.type = type;\r\n        this.data = data;\r\n        this.promise = new Promise<P>(\r\n            (resolve: (value: P | PromiseLike<P>) => void, reject: (reason?: void) => void) => {\r\n                this.promiseResolver = resolve;\r\n                this.promiseRejecter = reject;\r\n            },\r\n        );\r\n    }\r\n}\r\n\r\nexport type WorkerRequestVariant =\r\n    | WorkerRequest<WorkerRequestType.CLOSE_PREPARED, [ConnectionID, StatementID]>\r\n    | WorkerRequest<WorkerRequestType.CANCEL_PENDING_QUERY, number>\r\n    | WorkerRequest<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean]>\r\n    | WorkerRequest<WorkerRequestType.CONNECT, null>\r\n    | WorkerRequest<WorkerRequestType.COPY_FILE_TO_BUFFER, string>\r\n    | WorkerRequest<WorkerRequestType.COPY_FILE_TO_PATH, [string, string]>\r\n    | WorkerRequest<WorkerRequestType.CREATE_PREPARED, [ConnectionID, string]>\r\n    | WorkerRequest<WorkerRequestType.DISCONNECT, number>\r\n    | WorkerRequest<WorkerRequestType.DROP_FILE, string>\r\n    | WorkerRequest<WorkerRequestType.DROP_FILES, null>\r\n    | WorkerRequest<WorkerRequestType.EXPORT_FILE_STATISTICS, string>\r\n    | WorkerRequest<WorkerRequestType.FETCH_QUERY_RESULTS, number>\r\n    | WorkerRequest<WorkerRequestType.FLUSH_FILES, null>\r\n    | WorkerRequest<WorkerRequestType.GET_FEATURE_FLAGS, null>\r\n    | WorkerRequest<WorkerRequestType.GET_TABLE_NAMES, [number, string]>\r\n    | WorkerRequest<WorkerRequestType.GET_VERSION, null>\r\n    | WorkerRequest<WorkerRequestType.GLOB_FILE_INFOS, string>\r\n    | WorkerRequest<\r\n          WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\r\n          [number, Uint8Array, ArrowInsertOptions | undefined]\r\n      >\r\n    | WorkerRequest<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions]>\r\n    | WorkerRequest<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions]>\r\n    | WorkerRequest<WorkerRequestType.INSTANTIATE, [string, string | null]>\r\n    | WorkerRequest<WorkerRequestType.OPEN, DuckDBConfig>\r\n    | WorkerRequest<WorkerRequestType.PING, null>\r\n    | WorkerRequest<WorkerRequestType.POLL_PENDING_QUERY, number>\r\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array]>\r\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_HANDLE, [string, any, DuckDBDataProtocol, boolean]>\r\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_URL, [string, string, DuckDBDataProtocol, boolean]>\r\n    | WorkerRequest<WorkerRequestType.RESET, null>\r\n    | WorkerRequest<WorkerRequestType.RUN_PREPARED, [number, number, any[]]>\r\n    | WorkerRequest<WorkerRequestType.RUN_QUERY, [number, string]>\r\n    | WorkerRequest<WorkerRequestType.SEND_PREPARED, [number, number, any[]]>\r\n    | WorkerRequest<WorkerRequestType.START_PENDING_QUERY, [number, string]>\r\n    | WorkerRequest<WorkerRequestType.TOKENIZE, string>;\r\n\r\nexport type WorkerResponseVariant =\r\n    | WorkerResponse<WorkerResponseType.CONNECTION_INFO, number>\r\n    | WorkerResponse<WorkerResponseType.ERROR, any>\r\n    | WorkerResponse<WorkerResponseType.FEATURE_FLAGS, number>\r\n    | WorkerResponse<WorkerResponseType.FILE_BUFFER, Uint8Array>\r\n    | WorkerResponse<WorkerResponseType.FILE_INFOS, WebFile[]>\r\n    | WorkerResponse<WorkerResponseType.FILE_SIZE, number>\r\n    | WorkerResponse<WorkerResponseType.FILE_STATISTICS, FileStatistics>\r\n    | WorkerResponse<WorkerResponseType.INSTANTIATE_PROGRESS, InstantiationProgress>\r\n    | WorkerResponse<WorkerResponseType.LOG, LogEntryVariant>\r\n    | WorkerResponse<WorkerResponseType.OK, null>\r\n    | WorkerResponse<WorkerResponseType.PREPARED_STATEMENT_ID, number>\r\n    | WorkerResponse<WorkerResponseType.QUERY_PLAN, Uint8Array>\r\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT, Uint8Array>\r\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT_CHUNK, Uint8Array>\r\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT_HEADER, Uint8Array>\r\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT_HEADER_OR_NULL, Uint8Array | null>\r\n    | WorkerResponse<WorkerResponseType.SCRIPT_TOKENS, ScriptTokens>\r\n    | WorkerResponse<WorkerResponseType.SUCCESS, boolean>\r\n    | WorkerResponse<WorkerResponseType.TABLE_NAMES, string[]>\r\n    | WorkerResponse<WorkerResponseType.VERSION_STRING, string>;\r\n\r\nexport type WorkerTaskVariant =\r\n    | WorkerTask<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean], null>\r\n    | WorkerTask<WorkerRequestType.CLOSE_PREPARED, [number, number], null>\r\n    | WorkerTask<WorkerRequestType.CONNECT, null, ConnectionID>\r\n    | WorkerTask<WorkerRequestType.COPY_FILE_TO_BUFFER, string, Uint8Array>\r\n    | WorkerTask<WorkerRequestType.COPY_FILE_TO_PATH, [string, string], null>\r\n    | WorkerTask<WorkerRequestType.CREATE_PREPARED, [number, string], number>\r\n    | WorkerTask<WorkerRequestType.DISCONNECT, ConnectionID, null>\r\n    | WorkerTask<WorkerRequestType.DROP_FILE, string, null>\r\n    | WorkerTask<WorkerRequestType.DROP_FILES, null, null>\r\n    | WorkerTask<WorkerRequestType.EXPORT_FILE_STATISTICS, string, FileStatistics>\r\n    | WorkerTask<WorkerRequestType.FETCH_QUERY_RESULTS, ConnectionID, Uint8Array>\r\n    | WorkerTask<WorkerRequestType.FLUSH_FILES, null, null>\r\n    | WorkerTask<WorkerRequestType.GET_FEATURE_FLAGS, null, number>\r\n    | WorkerTask<WorkerRequestType.GET_TABLE_NAMES, [number, string], string[]>\r\n    | WorkerTask<WorkerRequestType.GET_VERSION, null, string>\r\n    | WorkerTask<\r\n          WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\r\n          [number, Uint8Array, ArrowInsertOptions | undefined],\r\n          null\r\n      >\r\n    | WorkerTask<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions], null>\r\n    | WorkerTask<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions], null>\r\n    | WorkerTask<WorkerRequestType.INSTANTIATE, [string, string | null], null>\r\n    | WorkerTask<WorkerRequestType.OPEN, DuckDBConfig, null>\r\n    | WorkerTask<WorkerRequestType.PING, null, null>\r\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>\r\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_HANDLE, [string, any, DuckDBDataProtocol, boolean], null>\r\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_URL, [string, string, DuckDBDataProtocol, boolean], null>\r\n    | WorkerTask<WorkerRequestType.GLOB_FILE_INFOS, string, WebFile[]>\r\n    | WorkerTask<WorkerRequestType.RESET, null, null>\r\n    | WorkerTask<WorkerRequestType.RUN_PREPARED, [number, number, any[]], Uint8Array>\r\n    | WorkerTask<WorkerRequestType.RUN_QUERY, [ConnectionID, string], Uint8Array>\r\n    | WorkerTask<WorkerRequestType.SEND_PREPARED, [number, number, any[]], Uint8Array>\r\n    | WorkerTask<WorkerRequestType.START_PENDING_QUERY, [ConnectionID, string], Uint8Array | null>\r\n    | WorkerTask<WorkerRequestType.POLL_PENDING_QUERY, ConnectionID, Uint8Array | null>\r\n    | WorkerTask<WorkerRequestType.CANCEL_PENDING_QUERY, ConnectionID, boolean>\r\n    | WorkerTask<WorkerRequestType.TOKENIZE, string, ScriptTokens>;\r\n", "import * as arrow from 'apache-arrow';\r\n\r\nexport interface SQLType {\r\n    /// The sql type\r\n    sqlType: string;\r\n    /// Is nullable?\r\n    nullable?: boolean;\r\n    /// Decimal precision\r\n    precision?: number;\r\n    /// Decimal scaling\r\n    scale?: number;\r\n    /// Timezone\r\n    timezone?: string;\r\n    /// Byte width (FixedSizeBinary)\r\n    byteWidth?: number;\r\n    /// Key type\r\n    keyType?: SQLType;\r\n    /// Value type\r\n    valueType?: SQLType;\r\n    /// Fields\r\n    fields?: SQLField[];\r\n}\r\n\r\nexport function arrowToSQLType(type: arrow.DataType): SQLType {\r\n    switch (type.typeId) {\r\n        case arrow.Type.Binary:\r\n            return { sqlType: 'binary' };\r\n        case arrow.Type.Bool:\r\n            return { sqlType: 'bool' };\r\n        case arrow.Type.Date:\r\n            return { sqlType: 'date' };\r\n        case arrow.Type.DateDay:\r\n            return { sqlType: 'date32[d]' };\r\n        case arrow.Type.DateMillisecond:\r\n            return { sqlType: 'date64[ms]' };\r\n        case arrow.Type.Decimal: {\r\n            const dec = type as arrow.Decimal;\r\n            return { sqlType: 'decimal', precision: dec.precision, scale: dec.scale };\r\n        }\r\n        case arrow.Type.Float:\r\n            return { sqlType: 'float' };\r\n        case arrow.Type.Float16:\r\n            return { sqlType: 'float16' };\r\n        case arrow.Type.Float32:\r\n            return { sqlType: 'float32' };\r\n        case arrow.Type.Float64:\r\n            return { sqlType: 'float64' };\r\n        case arrow.Type.Int:\r\n            return { sqlType: 'int32' };\r\n        case arrow.Type.Int16:\r\n            return { sqlType: 'int16' };\r\n        case arrow.Type.Int32:\r\n            return { sqlType: 'int32' };\r\n        case arrow.Type.Int64:\r\n            return { sqlType: 'int64' };\r\n        case arrow.Type.Uint16:\r\n            return { sqlType: 'uint16' };\r\n        case arrow.Type.Uint32:\r\n            return { sqlType: 'uint32' };\r\n        case arrow.Type.Uint64:\r\n            return { sqlType: 'uint64' };\r\n        case arrow.Type.Uint8:\r\n            return { sqlType: 'uint8' };\r\n        case arrow.Type.IntervalDayTime:\r\n            return { sqlType: 'interval[dt]' };\r\n        case arrow.Type.IntervalYearMonth:\r\n            return { sqlType: 'interval[m]' };\r\n        case arrow.Type.List: {\r\n            const list = type as arrow.List;\r\n            return {\r\n                sqlType: 'list',\r\n                valueType: arrowToSQLType(list.valueType),\r\n            };\r\n        }\r\n        case arrow.Type.FixedSizeBinary: {\r\n            const bin = type as arrow.FixedSizeBinary;\r\n            return { sqlType: 'fixedsizebinary', byteWidth: bin.byteWidth };\r\n        }\r\n        case arrow.Type.Null:\r\n            return { sqlType: 'null' };\r\n        case arrow.Type.Utf8:\r\n            return { sqlType: 'utf8' };\r\n        case arrow.Type.Struct: {\r\n            const struct_ = type as arrow.Struct;\r\n            return {\r\n                sqlType: 'struct',\r\n                fields: struct_.children.map(c => arrowToSQLField(c.name, c.type)),\r\n            };\r\n        }\r\n        case arrow.Type.Map: {\r\n            const map_ = type as arrow.Map_;\r\n            return {\r\n                sqlType: 'map',\r\n                keyType: arrowToSQLType(map_.keyType),\r\n                valueType: arrowToSQLType(map_.valueType),\r\n            };\r\n        }\r\n        case arrow.Type.Time:\r\n            return { sqlType: 'time[s]' };\r\n        case arrow.Type.TimeMicrosecond:\r\n            return { sqlType: 'time[us]' };\r\n        case arrow.Type.TimeMillisecond:\r\n            return { sqlType: 'time[ms]' };\r\n        case arrow.Type.TimeNanosecond:\r\n            return { sqlType: 'time[ns]' };\r\n        case arrow.Type.TimeSecond:\r\n            return { sqlType: 'time[s]' };\r\n        case arrow.Type.Timestamp: {\r\n            const ts = type as arrow.Timestamp;\r\n            return { sqlType: 'timestamp', timezone: ts.timezone || undefined };\r\n        }\r\n        case arrow.Type.TimestampSecond: {\r\n            const ts = type as arrow.TimestampSecond;\r\n            return { sqlType: 'timestamp[s]', timezone: ts.timezone || undefined };\r\n        }\r\n        case arrow.Type.TimestampMicrosecond: {\r\n            const ts = type as arrow.TimestampMicrosecond;\r\n            return { sqlType: 'timestamp[us]', timezone: ts.timezone || undefined };\r\n        }\r\n        case arrow.Type.TimestampNanosecond: {\r\n            const ts = type as arrow.TimestampNanosecond;\r\n            return { sqlType: 'timestamp[ns]', timezone: ts.timezone || undefined };\r\n        }\r\n        case arrow.Type.TimestampMillisecond: {\r\n            const ts = type as arrow.TimestampMillisecond;\r\n            return { sqlType: 'timestamp[ms]', timezone: ts.timezone || undefined };\r\n        }\r\n    }\r\n    throw new Error(`unsupported arrow type: ${type.toString()}`);\r\n}\r\n\r\nexport type SQLField = SQLType & { name: string };\r\n\r\nexport function arrowToSQLField(name: string, type: arrow.DataType): SQLField {\r\n    const t = arrowToSQLType(type) as SQLField;\r\n    t.name = name;\r\n    return t;\r\n}\r\n", "import {\r\n    WorkerRequestType,\r\n    WorkerResponseType,\r\n    WorkerResponseVariant,\r\n    WorkerTaskVariant,\r\n    WorkerTask,\r\n    ConnectionID,\r\n    WorkerTaskReturnType,\r\n} from './worker_request';\r\nimport { AsyncDuckDBBindings } from './async_bindings_interface';\r\nimport { Logger } from '../log';\r\nimport { AsyncDuckDBConnection } from './async_connection';\r\nimport { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from '../bindings/insert_options';\r\nimport { ScriptTokens } from '../bindings/tokens';\r\nimport { FileStatistics } from '../bindings/file_stats';\r\nimport { DuckDBConfig } from '../bindings/config';\r\nimport { InstantiationProgress } from '../bindings/progress';\r\nimport { arrowToSQLField } from '../json_typedef';\r\nimport { WebFile } from '../bindings/web_file';\r\nimport { DuckDBDataProtocol } from '../bindings';\r\n\r\nconst TEXT_ENCODER = new TextEncoder();\r\n\r\nexport class AsyncDuckDB implements AsyncDuckDBBindings {\r\n    /** The message handler */\r\n    protected readonly _onMessageHandler: (event: MessageEvent) => void;\r\n    /** The error handler */\r\n    protected readonly _onErrorHandler: (event: ErrorEvent) => void;\r\n    /** The close handler */\r\n    protected readonly _onCloseHandler: () => void;\r\n\r\n    /** Instantiate the module */\r\n    protected _onInstantiationProgress: ((p: InstantiationProgress) => void)[] = [];\r\n\r\n    /** The logger */\r\n    protected readonly _logger: Logger;\r\n    /** The worker */\r\n    protected _worker: Worker | null = null;\r\n    /** The promise for the worker shutdown */\r\n    protected _workerShutdownPromise: Promise<null> | null = null;\r\n    /** Make the worker as terminated */\r\n    protected _workerShutdownResolver: (value: PromiseLike<null> | null) => void = () => {};\r\n\r\n    /** The next message id */\r\n    protected _nextMessageId = 0;\r\n    /** The pending requests */\r\n    protected _pendingRequests: Map<number, WorkerTaskVariant> = new Map();\r\n\r\n    constructor(logger: Logger, worker: Worker | null = null) {\r\n        this._logger = logger;\r\n        this._onMessageHandler = this.onMessage.bind(this);\r\n        this._onErrorHandler = this.onError.bind(this);\r\n        this._onCloseHandler = this.onClose.bind(this);\r\n        if (worker != null) this.attach(worker);\r\n    }\r\n\r\n    /** Get the logger */\r\n    public get logger(): Logger {\r\n        return this._logger;\r\n    }\r\n\r\n    /** Attach to worker */\r\n    protected attach(worker: Worker): void {\r\n        this._worker = worker;\r\n        this._worker.addEventListener('message', this._onMessageHandler);\r\n        this._worker.addEventListener('error', this._onErrorHandler);\r\n        this._worker.addEventListener('close', this._onCloseHandler);\r\n        this._workerShutdownPromise = new Promise<null>(\r\n            (resolve: (value: PromiseLike<null> | null) => void, _reject: (reason?: void) => void) => {\r\n                this._workerShutdownResolver = resolve;\r\n            },\r\n        );\r\n    }\r\n\r\n    /** Detach from worker */\r\n    public detach(): void {\r\n        if (!this._worker) return;\r\n        this._worker.removeEventListener('message', this._onMessageHandler);\r\n        this._worker.removeEventListener('error', this._onErrorHandler);\r\n        this._worker.removeEventListener('close', this._onCloseHandler);\r\n        this._worker = null;\r\n        this._workerShutdownResolver(null);\r\n        this._workerShutdownPromise = null;\r\n        this._workerShutdownResolver = () => {};\r\n    }\r\n\r\n    /** Kill the worker */\r\n    public async terminate(): Promise<void> {\r\n        if (!this._worker) return;\r\n        this._worker.terminate();\r\n        //await this._workerShutdownPromise; TODO deadlocking in karma?\r\n        this._worker = null;\r\n        this._workerShutdownPromise = null;\r\n        this._workerShutdownResolver = () => {};\r\n    }\r\n\r\n    /** Post a task */\r\n    protected async postTask<W extends WorkerTaskVariant>(\r\n        task: W,\r\n        transfer: ArrayBuffer[] = [],\r\n    ): Promise<WorkerTaskReturnType<W>> {\r\n        if (!this._worker) {\r\n            console.error('cannot send a message since the worker is not set!');\r\n            return undefined as any;\r\n        }\r\n        const mid = this._nextMessageId++;\r\n        this._pendingRequests.set(mid, task);\r\n        this._worker.postMessage(\r\n            {\r\n                messageId: mid,\r\n                type: task.type,\r\n                data: task.data,\r\n            },\r\n            transfer,\r\n        );\r\n        return (await task.promise) as WorkerTaskReturnType<W>;\r\n    }\r\n\r\n    /** Received a message */\r\n    protected onMessage(event: MessageEvent): void {\r\n        // Unassociated responses?\r\n        const response = event.data as WorkerResponseVariant;\r\n        switch (response.type) {\r\n            // Request failed?\r\n            case WorkerResponseType.LOG: {\r\n                this._logger.log(response.data);\r\n                return;\r\n            }\r\n            // Call progress callback\r\n            case WorkerResponseType.INSTANTIATE_PROGRESS: {\r\n                for (const p of this._onInstantiationProgress) {\r\n                    p(response.data);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Get associated task\r\n        const task = this._pendingRequests.get(response.requestId);\r\n        if (!task) {\r\n            console.warn(`unassociated response: [${response.requestId}, ${response.type.toString()}]`);\r\n            return;\r\n        }\r\n        this._pendingRequests.delete(response.requestId);\r\n\r\n        // Request failed?\r\n        if (response.type == WorkerResponseType.ERROR) {\r\n            // Workaround for Firefox not being able to perform structured-clone on Native Errors\r\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1556604\r\n            const e = new Error(response.data.message);\r\n            e.name = response.data.name;\r\n            e.stack = response.data.stack;\r\n            task.promiseRejecter(e);\r\n            return;\r\n        }\r\n\r\n        // Otherwise differentiate between the tasks first\r\n        switch (task.type) {\r\n            case WorkerRequestType.CLOSE_PREPARED:\r\n            case WorkerRequestType.COLLECT_FILE_STATISTICS:\r\n            case WorkerRequestType.COPY_FILE_TO_PATH:\r\n            case WorkerRequestType.DISCONNECT:\r\n            case WorkerRequestType.DROP_FILE:\r\n            case WorkerRequestType.DROP_FILES:\r\n            case WorkerRequestType.FLUSH_FILES:\r\n            case WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM:\r\n            case WorkerRequestType.INSERT_CSV_FROM_PATH:\r\n            case WorkerRequestType.INSERT_JSON_FROM_PATH:\r\n            case WorkerRequestType.OPEN:\r\n            case WorkerRequestType.PING:\r\n            case WorkerRequestType.REGISTER_FILE_BUFFER:\r\n            case WorkerRequestType.REGISTER_FILE_HANDLE:\r\n            case WorkerRequestType.REGISTER_FILE_URL:\r\n            case WorkerRequestType.RESET:\r\n                if (response.type == WorkerResponseType.OK) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.INSTANTIATE:\r\n                this._onInstantiationProgress = [];\r\n                if (response.type == WorkerResponseType.OK) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.GLOB_FILE_INFOS:\r\n                if (response.type == WorkerResponseType.FILE_INFOS) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.GET_VERSION:\r\n                if (response.type == WorkerResponseType.VERSION_STRING) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.GET_FEATURE_FLAGS:\r\n                if (response.type == WorkerResponseType.FEATURE_FLAGS) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.GET_TABLE_NAMES:\r\n                if (response.type == WorkerResponseType.TABLE_NAMES) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.TOKENIZE:\r\n                if (response.type == WorkerResponseType.SCRIPT_TOKENS) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.COPY_FILE_TO_BUFFER:\r\n                if (response.type == WorkerResponseType.FILE_BUFFER) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.EXPORT_FILE_STATISTICS:\r\n                if (response.type == WorkerResponseType.FILE_STATISTICS) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.CONNECT:\r\n                if (response.type == WorkerResponseType.CONNECTION_INFO) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.RUN_PREPARED:\r\n            case WorkerRequestType.RUN_QUERY:\r\n                if (response.type == WorkerResponseType.QUERY_RESULT) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.SEND_PREPARED:\r\n                if (response.type == WorkerResponseType.QUERY_RESULT_HEADER) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.START_PENDING_QUERY:\r\n                if (response.type == WorkerResponseType.QUERY_RESULT_HEADER_OR_NULL) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.POLL_PENDING_QUERY:\r\n                if (response.type == WorkerResponseType.QUERY_RESULT_HEADER_OR_NULL) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.CANCEL_PENDING_QUERY:\r\n                this._onInstantiationProgress = [];\r\n                if (response.type == WorkerResponseType.SUCCESS) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.FETCH_QUERY_RESULTS:\r\n                if (response.type == WorkerResponseType.QUERY_RESULT_CHUNK) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.CREATE_PREPARED:\r\n                if (response.type == WorkerResponseType.PREPARED_STATEMENT_ID) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n        }\r\n        task.promiseRejecter(new Error(`unexpected response type: ${response.type.toString()}`));\r\n    }\r\n\r\n    /** Received an error */\r\n    protected onError(event: ErrorEvent): void {\r\n        console.error(event);\r\n        console.error(`error in duckdb worker: ${event.message}`);\r\n        this._pendingRequests.clear();\r\n    }\r\n\r\n    /** The worker was closed */\r\n    protected onClose(): void {\r\n        this._workerShutdownResolver(null);\r\n        if (this._pendingRequests.size != 0) {\r\n            console.warn(`worker terminated with ${this._pendingRequests.size} pending requests`);\r\n            return;\r\n        }\r\n        this._pendingRequests.clear();\r\n    }\r\n\r\n    /** Reset the duckdb */\r\n    public async reset(): Promise<null> {\r\n        const task = new WorkerTask<WorkerRequestType.RESET, null, null>(WorkerRequestType.RESET, null);\r\n        return await this.postTask(task);\r\n    }\r\n\r\n    /** Ping the worker thread */\r\n    public async ping(): Promise<any> {\r\n        const task = new WorkerTask<WorkerRequestType.PING, null, null>(WorkerRequestType.PING, null);\r\n        await this.postTask(task);\r\n    }\r\n    /** Try to drop a file */\r\n    public async dropFile(name: string): Promise<null> {\r\n        const task = new WorkerTask<WorkerRequestType.DROP_FILE, string, null>(WorkerRequestType.DROP_FILE, name);\r\n        return await this.postTask(task);\r\n    }\r\n    /** Try to drop files */\r\n    public async dropFiles(): Promise<null> {\r\n        const task = new WorkerTask<WorkerRequestType.DROP_FILES, null, null>(WorkerRequestType.DROP_FILES, null);\r\n        return await this.postTask(task);\r\n    }\r\n    /** Flush all files */\r\n    public async flushFiles(): Promise<null> {\r\n        const task = new WorkerTask<WorkerRequestType.FLUSH_FILES, null, null>(WorkerRequestType.FLUSH_FILES, null);\r\n        return await this.postTask(task);\r\n    }\r\n\r\n    /** Open the database */\r\n    public async instantiate(\r\n        mainModuleURL: string,\r\n        pthreadWorkerURL: string | null = null,\r\n        progress: (progress: InstantiationProgress) => void = _p => {},\r\n    ): Promise<null> {\r\n        this._onInstantiationProgress.push(progress);\r\n        const task = new WorkerTask<WorkerRequestType.INSTANTIATE, [string, string | null], null>(\r\n            WorkerRequestType.INSTANTIATE,\r\n            [mainModuleURL, pthreadWorkerURL],\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n\r\n    /** Get the version */\r\n    public async getVersion(): Promise<string> {\r\n        const task = new WorkerTask<WorkerRequestType.GET_VERSION, null, string>(WorkerRequestType.GET_VERSION, null);\r\n        const version = await this.postTask(task);\r\n        return version;\r\n    }\r\n\r\n    /** Get the feature flags */\r\n    public async getFeatureFlags(): Promise<number> {\r\n        const task = new WorkerTask<WorkerRequestType.GET_FEATURE_FLAGS, null, number>(\r\n            WorkerRequestType.GET_FEATURE_FLAGS,\r\n            null,\r\n        );\r\n        const feature = await this.postTask(task);\r\n        return feature;\r\n    }\r\n\r\n    /** Open a new database */\r\n    public async open(config: DuckDBConfig): Promise<void> {\r\n        const task = new WorkerTask<WorkerRequestType.OPEN, DuckDBConfig, null>(WorkerRequestType.OPEN, config);\r\n        await this.postTask(task);\r\n    }\r\n\r\n    /** Tokenize a script text */\r\n    public async tokenize(text: string): Promise<ScriptTokens> {\r\n        const task = new WorkerTask<WorkerRequestType.TOKENIZE, string, ScriptTokens>(WorkerRequestType.TOKENIZE, text);\r\n        const tokens = await this.postTask(task);\r\n        return tokens;\r\n    }\r\n\r\n    /** Connect to the database */\r\n    public async connectInternal(): Promise<number> {\r\n        const task = new WorkerTask<WorkerRequestType.CONNECT, null, ConnectionID>(WorkerRequestType.CONNECT, null);\r\n        return await this.postTask(task);\r\n    }\r\n\r\n    /** Connect to the database */\r\n    public async connect(): Promise<AsyncDuckDBConnection> {\r\n        const cid = await this.connectInternal();\r\n        return new AsyncDuckDBConnection(this, cid);\r\n    }\r\n\r\n    /** Disconnect from the database */\r\n    public async disconnect(conn: ConnectionID): Promise<void> {\r\n        const task = new WorkerTask<WorkerRequestType.DISCONNECT, ConnectionID, null>(\r\n            WorkerRequestType.DISCONNECT,\r\n            conn,\r\n        );\r\n        await this.postTask(task);\r\n    }\r\n\r\n    /** Run a query */\r\n    public async runQuery(conn: ConnectionID, text: string): Promise<Uint8Array> {\r\n        const task = new WorkerTask<WorkerRequestType.RUN_QUERY, [ConnectionID, string], Uint8Array>(\r\n            WorkerRequestType.RUN_QUERY,\r\n            [conn, text],\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n\r\n    /** Start a pending query */\r\n    public async startPendingQuery(conn: ConnectionID, text: string): Promise<Uint8Array | null> {\r\n        const task = new WorkerTask<WorkerRequestType.START_PENDING_QUERY, [ConnectionID, string], Uint8Array | null>(\r\n            WorkerRequestType.START_PENDING_QUERY,\r\n            [conn, text],\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n    /** Poll a pending query */\r\n    public async pollPendingQuery(conn: ConnectionID): Promise<Uint8Array | null> {\r\n        const task = new WorkerTask<WorkerRequestType.POLL_PENDING_QUERY, ConnectionID, Uint8Array | null>(\r\n            WorkerRequestType.POLL_PENDING_QUERY,\r\n            conn,\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n    /** Cancel a pending query */\r\n    public async cancelPendingQuery(conn: ConnectionID): Promise<boolean> {\r\n        const task = new WorkerTask<WorkerRequestType.CANCEL_PENDING_QUERY, ConnectionID, boolean>(\r\n            WorkerRequestType.CANCEL_PENDING_QUERY,\r\n            conn,\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n\r\n    /** Fetch query results */\r\n    public async fetchQueryResults(conn: ConnectionID): Promise<Uint8Array> {\r\n        const task = new WorkerTask<WorkerRequestType.FETCH_QUERY_RESULTS, ConnectionID, Uint8Array>(\r\n            WorkerRequestType.FETCH_QUERY_RESULTS,\r\n            conn,\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n\r\n    /** Get table names */\r\n    public async getTableNames(conn: number, text: string): Promise<string[]> {\r\n        const task = new WorkerTask<WorkerRequestType.GET_TABLE_NAMES, [number, string], string[]>(\r\n            WorkerRequestType.GET_TABLE_NAMES,\r\n            [conn, text],\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n\r\n    /** Prepare a statement and return its identifier */\r\n    public async createPrepared(conn: number, text: string): Promise<number> {\r\n        const task = new WorkerTask<WorkerRequestType.CREATE_PREPARED, [number, string], number>(\r\n            WorkerRequestType.CREATE_PREPARED,\r\n            [conn, text],\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n    /** Close a prepared statement */\r\n    public async closePrepared(conn: number, statement: number): Promise<void> {\r\n        const task = new WorkerTask<WorkerRequestType.CLOSE_PREPARED, [number, number], null>(\r\n            WorkerRequestType.CLOSE_PREPARED,\r\n            [conn, statement],\r\n        );\r\n        await this.postTask(task);\r\n    }\r\n    /** Execute a prepared statement and return the full result */\r\n    public async runPrepared(conn: number, statement: number, params: any[]): Promise<Uint8Array> {\r\n        const task = new WorkerTask<WorkerRequestType.RUN_PREPARED, [ConnectionID, number, any[]], Uint8Array>(\r\n            WorkerRequestType.RUN_PREPARED,\r\n            [conn, statement, params],\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n    /** Execute a prepared statement and stream the result */\r\n    public async sendPrepared(conn: number, statement: number, params: any[]): Promise<Uint8Array> {\r\n        const task = new WorkerTask<WorkerRequestType.SEND_PREPARED, [ConnectionID, number, any[]], Uint8Array>(\r\n            WorkerRequestType.SEND_PREPARED,\r\n            [conn, statement, params],\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n    /** Glob file infos */\r\n    public async globFiles(path: string): Promise<WebFile[]> {\r\n        const task = new WorkerTask<WorkerRequestType.GLOB_FILE_INFOS, string, WebFile[]>(\r\n            WorkerRequestType.GLOB_FILE_INFOS,\r\n            path,\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n    /** Register file text */\r\n    public async registerFileText(name: string, text: string): Promise<void> {\r\n        const buffer = TEXT_ENCODER.encode(text);\r\n        await this.registerFileBuffer(name, buffer);\r\n    }\r\n    /** Register a file path. */\r\n    public async registerFileURL(\r\n        name: string,\r\n        url: string,\r\n        proto: DuckDBDataProtocol,\r\n        directIO: boolean,\r\n    ): Promise<void> {\r\n        if (url === undefined) {\r\n            url = name;\r\n        }\r\n        const task = new WorkerTask<\r\n            WorkerRequestType.REGISTER_FILE_URL,\r\n            [string, string, DuckDBDataProtocol, boolean],\r\n            null\r\n        >(WorkerRequestType.REGISTER_FILE_URL, [name, url, proto, directIO]);\r\n        await this.postTask(task);\r\n    }\r\n\r\n    /** Register an empty file buffer. */\r\n    public async registerEmptyFileBuffer(name: string): Promise<void> {\r\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>(\r\n            WorkerRequestType.REGISTER_FILE_BUFFER,\r\n            [name, new Uint8Array()],\r\n        );\r\n        await this.postTask(task);\r\n    }\r\n\r\n    /** Register a file buffer. */\r\n    public async registerFileBuffer(name: string, buffer: Uint8Array): Promise<void> {\r\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>(\r\n            WorkerRequestType.REGISTER_FILE_BUFFER,\r\n            [name, buffer],\r\n        );\r\n        await this.postTask(task, [buffer.buffer]);\r\n    }\r\n\r\n    /** Register a file handle. */\r\n    public async registerFileHandle<HandleType>(\r\n        name: string,\r\n        handle: HandleType,\r\n        protocol: DuckDBDataProtocol,\r\n        directIO: boolean,\r\n    ): Promise<void> {\r\n        const task = new WorkerTask<\r\n            WorkerRequestType.REGISTER_FILE_HANDLE,\r\n            [string, any, DuckDBDataProtocol, boolean],\r\n            null\r\n        >(WorkerRequestType.REGISTER_FILE_HANDLE, [name, handle, protocol, directIO]);\r\n        await this.postTask(task, []);\r\n    }\r\n\r\n    /** Enable file statistics */\r\n    public async collectFileStatistics(name: string, enable: boolean): Promise<void> {\r\n        const task = new WorkerTask<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean], null>(\r\n            WorkerRequestType.COLLECT_FILE_STATISTICS,\r\n            [name, enable],\r\n        );\r\n        await this.postTask(task, []);\r\n    }\r\n\r\n    /** Export file statistics */\r\n    public async exportFileStatistics(name: string): Promise<FileStatistics> {\r\n        const task = new WorkerTask<WorkerRequestType.EXPORT_FILE_STATISTICS, string, FileStatistics>(\r\n            WorkerRequestType.EXPORT_FILE_STATISTICS,\r\n            name,\r\n        );\r\n        return await this.postTask(task, []);\r\n    }\r\n\r\n    /** Copy a file to a buffer. */\r\n    public async copyFileToBuffer(name: string): Promise<Uint8Array> {\r\n        const task = new WorkerTask<WorkerRequestType.COPY_FILE_TO_BUFFER, string, Uint8Array>(\r\n            WorkerRequestType.COPY_FILE_TO_BUFFER,\r\n            name,\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n\r\n    /** Copy a file to a path. */\r\n    public async copyFileToPath(name: string, path: string): Promise<void> {\r\n        const task = new WorkerTask<WorkerRequestType.COPY_FILE_TO_PATH, [string, string], null>(\r\n            WorkerRequestType.COPY_FILE_TO_PATH,\r\n            [name, path],\r\n        );\r\n        await this.postTask(task);\r\n    }\r\n\r\n    /** Insert arrow from an ipc stream */\r\n    public async insertArrowFromIPCStream(\r\n        conn: ConnectionID,\r\n        buffer: Uint8Array,\r\n        options?: ArrowInsertOptions,\r\n    ): Promise<void> {\r\n        if (buffer.length == 0) return;\r\n        // Pass to the worker\r\n        const task = new WorkerTask<\r\n            WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\r\n            [number, Uint8Array, ArrowInsertOptions | undefined],\r\n            null\r\n        >(WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM, [conn, buffer, options]);\r\n        await this.postTask(task, [buffer.buffer]);\r\n    }\r\n    /** Insert a csv file */\r\n    public async insertCSVFromPath(conn: ConnectionID, path: string, options: CSVInsertOptions): Promise<void> {\r\n        // Flatten the table options\r\n        if (options.columns !== undefined) {\r\n            const out = [];\r\n            for (const k in options.columns) {\r\n                const type = options.columns[k];\r\n                out.push(arrowToSQLField(k, type));\r\n            }\r\n            options.columnsFlat = out;\r\n            delete options.columns;\r\n        }\r\n\r\n        // Pass to the worker\r\n        const task = new WorkerTask<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions], null>(\r\n            WorkerRequestType.INSERT_CSV_FROM_PATH,\r\n            [conn, path, options],\r\n        );\r\n        await this.postTask(task);\r\n    }\r\n    /** Insert a json file */\r\n    public async insertJSONFromPath(conn: ConnectionID, path: string, options: JSONInsertOptions): Promise<void> {\r\n        // Flatten the table options\r\n        if (options.columns !== undefined) {\r\n            const out = [];\r\n            for (const k in options.columns) {\r\n                const type = options.columns[k];\r\n                out.push(arrowToSQLField(k, type));\r\n            }\r\n            options.columnsFlat = out;\r\n            delete options.columns;\r\n        }\r\n\r\n        // Pass to the worker\r\n        const task = new WorkerTask<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions], null>(\r\n            WorkerRequestType.INSERT_JSON_FROM_PATH,\r\n            [conn, path, options],\r\n        );\r\n        await this.postTask(task);\r\n    }\r\n}\r\n", "import { DuckDBBindings } from '../bindings';\r\nimport { WorkerResponseVariant, WorkerRequestVariant, WorkerRequestType, WorkerResponseType } from './worker_request';\r\nimport { Logger, LogEntryVariant } from '../log';\r\nimport { InstantiationProgress } from '../bindings/progress';\r\n\r\nexport abstract class AsyncDuckDBDispatcher implements Logger {\r\n    /** The bindings */\r\n    protected _bindings: DuckDBBindings | null = null;\r\n    /** The next message id */\r\n    protected _nextMessageId = 0;\r\n\r\n    /** Instantiate the wasm module */\r\n    protected abstract instantiate(\r\n        mainModule: string,\r\n        pthreadWorker: string | null,\r\n        progress: (p: InstantiationProgress) => void,\r\n    ): Promise<DuckDBBindings>;\r\n    /** Post a response to the main thread */\r\n    protected abstract postMessage(response: WorkerResponseVariant, transfer: ArrayBuffer[]): void;\r\n\r\n    /** Send log entry to the main thread */\r\n    public log(entry: LogEntryVariant): void {\r\n        this.postMessage(\r\n            {\r\n                messageId: this._nextMessageId++,\r\n                requestId: 0,\r\n                type: WorkerResponseType.LOG,\r\n                data: entry,\r\n            },\r\n            [],\r\n        );\r\n    }\r\n\r\n    /** Send plain OK without further data */\r\n    protected sendOK(request: WorkerRequestVariant): void {\r\n        this.postMessage(\r\n            {\r\n                messageId: this._nextMessageId++,\r\n                requestId: request.messageId,\r\n                type: WorkerResponseType.OK,\r\n                data: null,\r\n            },\r\n            [],\r\n        );\r\n    }\r\n\r\n    /** Fail with an error */\r\n    protected failWith(request: WorkerRequestVariant, e: Error): void {\r\n        // Workaround for Firefox not being able to perform structured-clone on Native Errors\r\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1556604\r\n        const obj: any = {\r\n            name: e.name,\r\n            message: e.message,\r\n            stack: e.stack || undefined,\r\n        };\r\n        this.postMessage(\r\n            {\r\n                messageId: this._nextMessageId++,\r\n                requestId: request.messageId,\r\n                type: WorkerResponseType.ERROR,\r\n                data: obj,\r\n            },\r\n            [],\r\n        );\r\n        return;\r\n    }\r\n\r\n    /** Process a request from the main thread */\r\n    public async onMessage(request: WorkerRequestVariant): Promise<void> {\r\n        // First process those requests that don't need bindings\r\n        switch (request.type) {\r\n            case WorkerRequestType.PING:\r\n                this.sendOK(request);\r\n                return;\r\n            case WorkerRequestType.INSTANTIATE:\r\n                if (this._bindings != null) {\r\n                    this.failWith(request, new Error('duckdb already initialized'));\r\n                }\r\n                try {\r\n                    this._bindings = await this.instantiate(request.data[0], request.data[1], p => {\r\n                        this.postMessage(\r\n                            {\r\n                                messageId: this._nextMessageId++,\r\n                                requestId: request.messageId,\r\n                                type: WorkerResponseType.INSTANTIATE_PROGRESS,\r\n                                data: p,\r\n                            },\r\n                            [],\r\n                        );\r\n                    });\r\n                    this.sendOK(request);\r\n                } catch (e: any) {\r\n                    this._bindings = null;\r\n                    this.failWith(request, e);\r\n                }\r\n                return;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // Bindings not initialized?\r\n        if (!this._bindings) {\r\n            return this.failWith(request, new Error('duckdb is not initialized'));\r\n        }\r\n\r\n        // Catch every exception and forward it as error message to the main thread\r\n        try {\r\n            switch (request.type) {\r\n                case WorkerRequestType.GET_VERSION:\r\n                    this.postMessage(\r\n                        {\r\n                            messageId: this._nextMessageId++,\r\n                            requestId: request.messageId,\r\n                            type: WorkerResponseType.VERSION_STRING,\r\n                            data: this._bindings.getVersion(),\r\n                        },\r\n                        [],\r\n                    );\r\n                    break;\r\n                case WorkerRequestType.GET_FEATURE_FLAGS:\r\n                    this.postMessage(\r\n                        {\r\n                            messageId: this._nextMessageId++,\r\n                            requestId: request.messageId,\r\n                            type: WorkerResponseType.FEATURE_FLAGS,\r\n                            data: this._bindings.getFeatureFlags(),\r\n                        },\r\n                        [],\r\n                    );\r\n                    break;\r\n                case WorkerRequestType.RESET:\r\n                    this._bindings.reset();\r\n                    this.sendOK(request);\r\n                    break;\r\n\r\n                case WorkerRequestType.OPEN:\r\n                    this._bindings.open(request.data);\r\n                    this.sendOK(request);\r\n                    break;\r\n                case WorkerRequestType.DROP_FILE:\r\n                    this._bindings.dropFile(request.data);\r\n                    this.sendOK(request);\r\n                    break;\r\n                case WorkerRequestType.DROP_FILES:\r\n                    this._bindings.dropFiles();\r\n                    this.sendOK(request);\r\n                    break;\r\n                case WorkerRequestType.FLUSH_FILES:\r\n                    this._bindings.flushFiles();\r\n                    this.sendOK(request);\r\n                    break;\r\n                case WorkerRequestType.CONNECT: {\r\n                    const conn = this._bindings.connect();\r\n                    this.postMessage(\r\n                        {\r\n                            messageId: this._nextMessageId++,\r\n                            requestId: request.messageId,\r\n                            type: WorkerResponseType.CONNECTION_INFO,\r\n                            data: conn.useUnsafe((_, c) => c),\r\n                        },\r\n                        [],\r\n                    );\r\n                    break;\r\n                }\r\n                case WorkerRequestType.DISCONNECT:\r\n                    this._bindings.disconnect(request.data);\r\n                    this.sendOK(request);\r\n                    break;\r\n                case WorkerRequestType.CREATE_PREPARED: {\r\n                    const result = this._bindings.createPrepared(request.data[0], request.data[1]);\r\n                    this.postMessage(\r\n                        {\r\n                            messageId: this._nextMessageId++,\r\n                            requestId: request.messageId,\r\n                            type: WorkerResponseType.PREPARED_STATEMENT_ID,\r\n                            data: result,\r\n                        },\r\n                        [],\r\n                    );\r\n                    break;\r\n                }\r\n                case WorkerRequestType.CLOSE_PREPARED: {\r\n                    this._bindings.closePrepared(request.data[0], request.data[1]);\r\n                    this.sendOK(request);\r\n                    break;\r\n                }\r\n                case WorkerRequestType.RUN_PREPARED: {\r\n                    const result = this._bindings.runPrepared(request.data[0], request.data[1], request.data[2]);\r\n                    this.postMessage(\r\n                        {\r\n                            messageId: this._nextMessageId++,\r\n                            requestId: request.messageId,\r\n                            type: WorkerResponseType.QUERY_RESULT,\r\n                            data: result,\r\n                        },\r\n                        [result.buffer],\r\n                    );\r\n                    break;\r\n                }\r\n                case WorkerRequestType.RUN_QUERY: {\r\n                    const result = this._bindings.runQuery(request.data[0], request.data[1]);\r\n                    this.postMessage(\r\n                        {\r\n                            messageId: this._nextMessageId++,\r\n                            requestId: request.messageId,\r\n                            type: WorkerResponseType.QUERY_RESULT,\r\n                            data: result,\r\n                        },\r\n                        [result.buffer],\r\n                    );\r\n                    break;\r\n                }\r\n                case WorkerRequestType.SEND_PREPARED: {\r\n                    const result = this._bindings.sendPrepared(request.data[0], request.data[1], request.data[2]);\r\n                    this.postMessage(\r\n                        {\r\n                            messageId: this._nextMessageId++,\r\n                            requestId: request.messageId,\r\n                            type: WorkerResponseType.QUERY_RESULT_HEADER,\r\n                            data: result,\r\n                        },\r\n                        [result.buffer],\r\n                    );\r\n                    break;\r\n                }\r\n                case WorkerRequestType.START_PENDING_QUERY: {\r\n                    const result = this._bindings.startPendingQuery(request.data[0], request.data[1]);\r\n                    const transfer = [];\r\n                    if (result) {\r\n                        transfer.push(result.buffer);\r\n                    }\r\n                    this.postMessage(\r\n                        {\r\n                            messageId: this._nextMessageId++,\r\n                            requestId: request.messageId,\r\n                            type: WorkerResponseType.QUERY_RESULT_HEADER_OR_NULL,\r\n                            data: result,\r\n                        },\r\n                        transfer,\r\n                    );\r\n                    break;\r\n                }\r\n                case WorkerRequestType.POLL_PENDING_QUERY: {\r\n                    const result = this._bindings.pollPendingQuery(request.data);\r\n                    const transfer = [];\r\n                    if (result) {\r\n                        transfer.push(result.buffer);\r\n                    }\r\n                    this.postMessage(\r\n                        {\r\n                            messageId: this._nextMessageId++,\r\n                            requestId: request.messageId,\r\n                            type: WorkerResponseType.QUERY_RESULT_HEADER_OR_NULL,\r\n                            data: result,\r\n                        },\r\n                        transfer,\r\n                    );\r\n                    break;\r\n                }\r\n                case WorkerRequestType.CANCEL_PENDING_QUERY: {\r\n                    const result = this._bindings.cancelPendingQuery(request.data);\r\n                    this.postMessage(\r\n                        {\r\n                            messageId: this._nextMessageId++,\r\n                            requestId: request.messageId,\r\n                            type: WorkerResponseType.SUCCESS,\r\n                            data: result,\r\n                        },\r\n                        [],\r\n                    );\r\n                    break;\r\n                }\r\n                case WorkerRequestType.FETCH_QUERY_RESULTS: {\r\n                    const result = this._bindings.fetchQueryResults(request.data);\r\n                    this.postMessage(\r\n                        {\r\n                            messageId: this._nextMessageId++,\r\n                            requestId: request.messageId,\r\n                            type: WorkerResponseType.QUERY_RESULT_CHUNK,\r\n                            data: result,\r\n                        },\r\n                        [result.buffer],\r\n                    );\r\n                    break;\r\n                }\r\n                case WorkerRequestType.GET_TABLE_NAMES: {\r\n                    const result = this._bindings.getTableNames(request.data[0], request.data[1]);\r\n                    this.postMessage(\r\n                        {\r\n                            messageId: this._nextMessageId++,\r\n                            requestId: request.messageId,\r\n                            type: WorkerResponseType.TABLE_NAMES,\r\n                            data: result,\r\n                        },\r\n                        [],\r\n                    );\r\n                    break;\r\n                }\r\n                case WorkerRequestType.GLOB_FILE_INFOS: {\r\n                    const infos = this._bindings.globFiles(request.data);\r\n                    this.postMessage(\r\n                        {\r\n                            messageId: this._nextMessageId++,\r\n                            requestId: request.messageId,\r\n                            type: WorkerResponseType.FILE_INFOS,\r\n                            data: infos,\r\n                        },\r\n                        [],\r\n                    );\r\n                    break;\r\n                }\r\n\r\n                case WorkerRequestType.REGISTER_FILE_URL:\r\n                    this._bindings.registerFileURL(request.data[0], request.data[1], request.data[2], request.data[3]);\r\n                    this.sendOK(request);\r\n                    break;\r\n\r\n                case WorkerRequestType.REGISTER_FILE_BUFFER:\r\n                    this._bindings.registerFileBuffer(request.data[0], request.data[1]);\r\n                    this.sendOK(request);\r\n                    break;\r\n\r\n                case WorkerRequestType.REGISTER_FILE_HANDLE:\r\n                    this._bindings.registerFileHandle(\r\n                        request.data[0],\r\n                        request.data[1],\r\n                        request.data[2],\r\n                        request.data[3],\r\n                    );\r\n                    this.sendOK(request);\r\n                    break;\r\n\r\n                case WorkerRequestType.COPY_FILE_TO_PATH:\r\n                    this._bindings.copyFileToPath(request.data[0], request.data[1]);\r\n                    this.sendOK(request);\r\n                    break;\r\n\r\n                case WorkerRequestType.COPY_FILE_TO_BUFFER: {\r\n                    const buffer = this._bindings.copyFileToBuffer(request.data);\r\n                    this.postMessage(\r\n                        {\r\n                            messageId: this._nextMessageId++,\r\n                            requestId: request.messageId,\r\n                            type: WorkerResponseType.FILE_BUFFER,\r\n                            data: buffer,\r\n                        },\r\n                        [],\r\n                    );\r\n                    break;\r\n                }\r\n                case WorkerRequestType.COLLECT_FILE_STATISTICS:\r\n                    this._bindings.collectFileStatistics(request.data[0], request.data[1]);\r\n                    this.sendOK(request);\r\n                    break;\r\n\r\n                case WorkerRequestType.EXPORT_FILE_STATISTICS: {\r\n                    this.postMessage(\r\n                        {\r\n                            messageId: this._nextMessageId++,\r\n                            requestId: request.messageId,\r\n                            type: WorkerResponseType.FILE_STATISTICS,\r\n                            data: this._bindings.exportFileStatistics(request.data),\r\n                        },\r\n                        [],\r\n                    );\r\n                    break;\r\n                }\r\n                case WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM: {\r\n                    this._bindings.insertArrowFromIPCStream(request.data[0], request.data[1], request.data[2]);\r\n                    this.sendOK(request);\r\n                    break;\r\n                }\r\n                case WorkerRequestType.INSERT_CSV_FROM_PATH: {\r\n                    this._bindings.insertCSVFromPath(request.data[0], request.data[1], request.data[2]);\r\n                    this.sendOK(request);\r\n                    break;\r\n                }\r\n                case WorkerRequestType.INSERT_JSON_FROM_PATH: {\r\n                    this._bindings.insertJSONFromPath(request.data[0], request.data[1], request.data[2]);\r\n                    this.sendOK(request);\r\n                    break;\r\n                }\r\n                case WorkerRequestType.TOKENIZE: {\r\n                    const result = this._bindings.tokenize(request.data);\r\n                    this.postMessage(\r\n                        {\r\n                            messageId: this._nextMessageId++,\r\n                            requestId: request.messageId,\r\n                            type: WorkerResponseType.SCRIPT_TOKENS,\r\n                            data: result,\r\n                        },\r\n                        [],\r\n                    );\r\n                    break;\r\n                }\r\n            }\r\n        } catch (e: any) {\r\n            return this.failWith(request, e);\r\n        }\r\n    }\r\n}\r\n", "export const bigInt=()=>(async e=>{try{return(await WebAssembly.instantiate(e)).instance.exports.b(BigInt(0))===BigInt(0)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,126,1,126,3,2,1,0,7,5,1,1,98,0,0,10,6,1,4,0,32,0,11])),bulkMemory=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),exceptions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),extendedConst=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,0,1,11,9,1,0,65,1,65,2,106,11,0])),gc=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,10,2,95,1,125,0,96,0,1,107,0,3,2,1,1,10,12,1,10,0,67,0,0,0,0,251,7,0,11])),memory64=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,4,1])),multiValue=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,0,2,127,127,3,2,1,0,10,8,1,6,0,65,0,65,0,11])),mutableGlobals=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1])),referenceTypes=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,7,1,5,0,208,112,26,11])),relaxedSimd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,15,1,13,0,65,1,253,15,65,2,253,15,253,128,2,11])),saturatedFloatToInt=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,12,1,10,0,67,0,0,0,0,252,0,26,11])),signExtensions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,65,0,192,26,11])),simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),streamingCompilation=()=>(async()=>\"compileStreaming\"in WebAssembly)(),tailCall=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,6,1,4,0,18,0,11])),threads=()=>(async e=>{try{return\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]));\n", "import config from '../package.json';\r\n\r\nexport const PACKAGE_NAME = config.name;\r\nexport const PACKAGE_VERSION = config.version;\r\n\r\nconst VERSION_PARTS = config.version.split('.');\r\nexport const PACKAGE_VERSION_MAJOR = VERSION_PARTS[0];\r\nexport const PACKAGE_VERSION_MINOR = VERSION_PARTS[1];\r\nexport const PACKAGE_VERSION_PATCH = VERSION_PARTS[2];\r\n", "import * as check from 'wasm-feature-detect';\r\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\r\n\r\n// Platform check taken from here:\r\n// https://github.com/xtermjs/xterm.js/blob/master/src/common/Platform.ts#L21\r\n\r\ninterface INavigator {\r\n    userAgent: string;\r\n    language: string;\r\n    platform: string;\r\n}\r\n\r\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\r\n// we want this module to live in common.\r\ndeclare const navigator: INavigator;\r\n\r\nexport const isNode = () => (typeof navigator === 'undefined' ? true : false);\r\nconst userAgent = () => (isNode() ? 'node' : navigator.userAgent);\r\nexport const isFirefox = () => userAgent().includes('Firefox');\r\nexport const isSafari = () => /^((?!chrome|android).)*safari/i.test(userAgent());\r\n\r\nexport interface DuckDBBundles {\r\n    mvp: {\r\n        mainModule: string;\r\n        mainWorker: string;\r\n    };\r\n    eh?: {\r\n        mainModule: string;\r\n        mainWorker: string;\r\n    };\r\n    coi?: {\r\n        mainModule: string;\r\n        mainWorker: string;\r\n        pthreadWorker: string;\r\n    };\r\n}\r\n\r\nexport function getJsDelivrBundles(): DuckDBBundles {\r\n    const jsdelivr_dist_url = `https://cdn.jsdelivr.net/npm/${PACKAGE_NAME}@${PACKAGE_VERSION}/dist/`;\r\n    return {\r\n        mvp: {\r\n            mainModule: `${jsdelivr_dist_url}duckdb-mvp.wasm`,\r\n            mainWorker: `${jsdelivr_dist_url}duckdb-browser-mvp.worker.js`,\r\n        },\r\n        eh: {\r\n            mainModule: `${jsdelivr_dist_url}duckdb-eh.wasm`,\r\n            mainWorker: `${jsdelivr_dist_url}duckdb-browser-eh.worker.js`,\r\n        },\r\n        // COI is still experimental, let the user opt in explicitly\r\n    };\r\n}\r\n\r\nexport interface DuckDBBundle {\r\n    mainModule: string;\r\n    mainWorker: string | null;\r\n    pthreadWorker: string | null;\r\n}\r\n\r\nexport interface PlatformFeatures {\r\n    bigInt64Array: boolean;\r\n    crossOriginIsolated: boolean;\r\n    wasmExceptions: boolean;\r\n    wasmSIMD: boolean;\r\n    wasmBulkMemory: boolean;\r\n    wasmThreads: boolean;\r\n}\r\n\r\nlet bigInt64Array: boolean | null = null;\r\nlet wasmExceptions: boolean | null = null;\r\nlet wasmThreads: boolean | null = null;\r\nlet wasmSIMD: boolean | null = null;\r\nlet wasmBulkMemory: boolean | null = null;\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\ndeclare namespace globalThis {\r\n    let crossOriginIsolated: boolean;\r\n}\r\n\r\nexport async function getPlatformFeatures(): Promise<PlatformFeatures> {\r\n    if (bigInt64Array == null) {\r\n        bigInt64Array = typeof BigInt64Array != 'undefined';\r\n    }\r\n    if (wasmExceptions == null) {\r\n        wasmExceptions = await check.exceptions();\r\n    }\r\n    if (wasmThreads == null) {\r\n        wasmThreads = await check.threads();\r\n    }\r\n    if (wasmSIMD == null) {\r\n        wasmSIMD = await check.simd();\r\n    }\r\n    if (wasmBulkMemory == null) {\r\n        wasmBulkMemory = await check.bulkMemory();\r\n    }\r\n    return {\r\n        bigInt64Array: bigInt64Array!,\r\n        crossOriginIsolated: isNode() || globalThis.crossOriginIsolated || false,\r\n        wasmExceptions: wasmExceptions!,\r\n        wasmSIMD: wasmSIMD!,\r\n        wasmThreads: wasmThreads!,\r\n        wasmBulkMemory: wasmBulkMemory!,\r\n    };\r\n}\r\n\r\nexport async function selectBundle(bundles: DuckDBBundles): Promise<DuckDBBundle> {\r\n    const platform = await getPlatformFeatures();\r\n    if (platform.wasmExceptions) {\r\n        if (platform.wasmSIMD && platform.wasmThreads && platform.crossOriginIsolated && bundles.coi) {\r\n            return {\r\n                mainModule: bundles.coi.mainModule,\r\n                mainWorker: bundles.coi.mainWorker,\r\n                pthreadWorker: bundles.coi.pthreadWorker,\r\n            };\r\n        }\r\n        if (bundles.eh) {\r\n            return {\r\n                mainModule: bundles.eh.mainModule,\r\n                mainWorker: bundles.eh.mainWorker,\r\n                pthreadWorker: null,\r\n            };\r\n        }\r\n    }\r\n    return {\r\n        mainModule: bundles.mvp.mainModule,\r\n        mainWorker: bundles.mvp.mainWorker,\r\n        pthreadWorker: null,\r\n    };\r\n}\r\n", "import Worker from 'web-worker';\r\n\r\nexport async function createWorker(url: string) {\r\n    const request = new Request(url);\r\n    const workerScript = await fetch(request);\r\n    const workerURL = URL.createObjectURL(await workerScript.blob());\r\n    return new Worker(workerURL);\r\n}\r\n", "import { DuckDBModule } from './duckdb_module';\r\nimport { UDFFunction } from './udf_function';\r\nimport * as udf_rt from './udf_runtime';\r\n\r\n/** Wrapper for TextDecoder to support shared array buffers */\r\nfunction TextDecoderWrapper(): (input?: BufferSource) => string {\r\n    const decoder = new TextDecoder();\r\n    return (data: any) => {\r\n        if (typeof SharedArrayBuffer !== 'undefined' && data.buffer instanceof SharedArrayBuffer) {\r\n            data = new Uint8Array(data);\r\n        }\r\n        return decoder.decode(data);\r\n    };\r\n}\r\n/** Helper to decode text */\r\nexport const decodeText = TextDecoderWrapper();\r\n\r\n/** Copy a buffer */\r\nexport function failWith(mod: DuckDBModule, msg: string): void {\r\n    console.error(`FAIL WITH: ${msg}`);\r\n    mod.ccall('duckdb_web_fail_with', null, ['string'], [msg]);\r\n}\r\n\r\n/** Copy a buffer */\r\nexport function copyBuffer(mod: DuckDBModule, begin: number, length: number): Uint8Array {\r\n    const buffer = mod.HEAPU8.subarray(begin, begin + length);\r\n    const copy = new Uint8Array(new ArrayBuffer(buffer.byteLength));\r\n    copy.set(buffer);\r\n    return copy;\r\n}\r\n\r\n/** Decode a string */\r\nexport function readString(mod: DuckDBModule, begin: number, length: number): string {\r\n    return decodeText(mod.HEAPU8.subarray(begin, begin + length));\r\n}\r\n\r\n/** The data protocol */\r\nexport enum DuckDBDataProtocol {\r\n    BUFFER = 0,\r\n    NODE_FS = 1,\r\n    BROWSER_FILEREADER = 2,\r\n    BROWSER_FSACCESS = 3,\r\n    HTTP = 4,\r\n    S3 = 5,\r\n}\r\n\r\n/** File flags for opening files*/\r\nexport enum FileFlags {\r\n    //! Open file with read access\r\n    FILE_FLAGS_READ = 1 << 0,\r\n    //! Open file with write access\r\n    FILE_FLAGS_WRITE = 1 << 1,\r\n    //! Use direct IO when reading/writing to the file\r\n    FILE_FLAGS_DIRECT_IO = 1 << 2,\r\n    //! Create file if not exists, can only be used together with WRITE\r\n    FILE_FLAGS_FILE_CREATE = 1 << 3,\r\n    //! Always create a new file. If a file exists, the file is truncated. Cannot be used together with CREATE.\r\n    FILE_FLAGS_FILE_CREATE_NEW = 1 << 4,\r\n    //! Open file in append mode\r\n    FILE_FLAGS_APPEND = 1 << 5,\r\n}\r\n\r\n/** Configuration for the AWS S3 Filesystem */\r\nexport interface S3Config {\r\n    region?: string;\r\n    endpoint?: string;\r\n    accessKeyId?: string;\r\n    secretAccessKey?: string;\r\n    sessionToken?: string;\r\n}\r\n\r\n/** An info for a file registered with DuckDB */\r\nexport interface DuckDBFileInfo {\r\n    cacheEpoch: number;\r\n    fileId: number;\r\n    fileName: string;\r\n    dataProtocol: DuckDBDataProtocol;\r\n    dataUrl: string | null;\r\n    allowFullHttpReads?: boolean;\r\n    s3Config?: S3Config;\r\n}\r\n\r\n/** Global info for all files registered with DuckDB */\r\nexport interface DuckDBGlobalFileInfo {\r\n    cacheEpoch: number;\r\n    allowFullHttpReads?: boolean;\r\n    s3Config?: S3Config;\r\n}\r\n\r\n/** Call a function with packed response buffer */\r\nexport function callSRet(\r\n    mod: DuckDBModule,\r\n    funcName: string,\r\n    argTypes: Array<Emscripten.JSType>,\r\n    args: Array<any>,\r\n): [number, number, number] {\r\n    const stackPointer = mod.stackSave();\r\n\r\n    // Allocate the packed response buffer\r\n    const response = mod.stackAlloc(3 * 8);\r\n    argTypes.unshift('number');\r\n    args.unshift(response);\r\n\r\n    // Do the call\r\n    mod.ccall(funcName, null, argTypes, args);\r\n\r\n    // Read the response\r\n    const status = mod.HEAPF64[(response >> 3) + 0];\r\n    const data = mod.HEAPF64[(response >> 3) + 1];\r\n    const dataSize = mod.HEAPF64[(response >> 3) + 2];\r\n\r\n    // Restore the stack\r\n    mod.stackRestore(stackPointer);\r\n    return [status, data, dataSize];\r\n}\r\n\r\n/** Drop response buffers */\r\nexport function dropResponseBuffers(mod: DuckDBModule): void {\r\n    mod.ccall('duckdb_web_clear_response', null, [], []);\r\n}\r\n\r\n/** The duckdb runtime */\r\nexport interface DuckDBRuntime {\r\n    _files?: Map<string, any>;\r\n    _udfFunctions: Map<number, UDFFunction>;\r\n\r\n    // Test a platform feature\r\n    testPlatformFeature(mod: DuckDBModule, feature: number): boolean;\r\n\r\n    // File APIs with dedicated file identifier\r\n    getDefaultDataProtocol(mod: DuckDBModule): number;\r\n    openFile(mod: DuckDBModule, fileId: number, flags: FileFlags): void;\r\n    syncFile(mod: DuckDBModule, fileId: number): void;\r\n    closeFile(mod: DuckDBModule, fileId: number): void;\r\n    getLastFileModificationTime(mod: DuckDBModule, fileId: number): number;\r\n    truncateFile(mod: DuckDBModule, fileId: number, newSize: number): void;\r\n    readFile(mod: DuckDBModule, fileId: number, buffer: number, bytes: number, location: number): number;\r\n    writeFile(mod: DuckDBModule, fileId: number, buffer: number, bytes: number, location: number): number;\r\n\r\n    // File APIs with path parameter\r\n    removeDirectory(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\r\n    checkDirectory(mod: DuckDBModule, pathPtr: number, pathLen: number): boolean;\r\n    createDirectory(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\r\n    listDirectoryEntries(mod: DuckDBModule, pathPtr: number, pathLen: number): boolean;\r\n    glob(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\r\n    moveFile(mod: DuckDBModule, fromPtr: number, fromLen: number, toPtr: number, toLen: number): void;\r\n    checkFile(mod: DuckDBModule, pathPtr: number, pathLen: number): boolean;\r\n    removeFile(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\r\n\r\n    // Call a scalar UDF function\r\n    callScalarUDF(\r\n        mod: DuckDBModule,\r\n        response: number,\r\n        funcId: number,\r\n        descPtr: number,\r\n        descSize: number,\r\n        ptrsPtr: number,\r\n        ptrsSize: number,\r\n    ): void;\r\n}\r\n\r\nexport const DEFAULT_RUNTIME: DuckDBRuntime = {\r\n    _udfFunctions: new Map(),\r\n\r\n    testPlatformFeature: (_mod: DuckDBModule, _feature: number): boolean => false,\r\n    getDefaultDataProtocol: (_mod: DuckDBModule): number => DuckDBDataProtocol.BUFFER,\r\n    openFile: (_mod: DuckDBModule, _fileId: number, flags: FileFlags): void => {},\r\n    syncFile: (_mod: DuckDBModule, _fileId: number): void => {},\r\n    closeFile: (_mod: DuckDBModule, _fileId: number): void => {},\r\n    getLastFileModificationTime: (_mod: DuckDBModule, _fileId: number): number => {\r\n        return 0;\r\n    },\r\n    truncateFile: (_mod: DuckDBModule, _fileId: number, _newSize: number): void => {},\r\n    readFile: (_mod: DuckDBModule, _fileId: number, _buffer: number, _bytes: number, _location: number): number => {\r\n        return 0;\r\n    },\r\n    writeFile: (_mod: DuckDBModule, _fileId: number, _buffer: number, _bytes: number, _location: number): number => {\r\n        return 0;\r\n    },\r\n\r\n    removeDirectory: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\r\n    checkDirectory: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): boolean => {\r\n        return false;\r\n    },\r\n    createDirectory: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\r\n    listDirectoryEntries: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): boolean => {\r\n        return false;\r\n    },\r\n    glob: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\r\n    moveFile: (_mod: DuckDBModule, _fromPtr: number, _fromLen: number, _toPtr: number, _toLen: number): void => {},\r\n    checkFile: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): boolean => {\r\n        return false;\r\n    },\r\n    removeFile: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\r\n    callScalarUDF: (\r\n        mod: DuckDBModule,\r\n        response: number,\r\n        funcId: number,\r\n        descPtr: number,\r\n        descSize: number,\r\n        ptrsPtr: number,\r\n        ptrsSize: number,\r\n    ): void => {\r\n        udf_rt.callScalarUDF(DEFAULT_RUNTIME, mod, response, funcId, descPtr, descSize, ptrsPtr, ptrsSize);\r\n    },\r\n};\r\n"],
  "mappings": "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",
  "names": ["require_browser", "__commonJSMin", "exports", "module", "DuckDBAccessMode", "LogLevel", "LogTopic", "LogEvent", "LogOrigin", "VoidLogger", "_entry", "ConsoleLogger", "level", "entry", "getLogLevelLabel", "getLogEventLabel", "event", "getLogTopicLabel", "topic", "getLogOriginLabel", "origin", "StatusCode", "arrow", "AsyncDuckDBConnection", "bindings", "conn", "callback", "text", "buffer", "reader", "header", "iter", "AsyncResultStreamIterator", "query", "stmt", "AsyncPreparedStatement", "table", "options", "db", "connectionId", "statementId", "params", "WorkerRequestType", "WorkerResponseType", "WorkerTask", "type", "data", "resolve", "reject", "arrow", "arrowToSQLType", "type", "dec", "c", "arrowToSQLField", "map_", "name", "t", "TEXT_ENCODER", "AsyncDuckDB", "logger", "worker", "resolve", "_reject", "task", "transfer", "mid", "event", "response", "p", "e", "WorkerTask", "name", "mainModuleURL", "pthreadWorkerURL", "progress", "_p", "config", "text", "cid", "AsyncDuckDBConnection", "conn", "statement", "params", "path", "buffer", "url", "proto", "directIO", "handle", "protocol", "enable", "options", "out", "k", "type", "arrowToSQLField", "AsyncDuckDBDispatcher", "entry", "request", "e", "obj", "p", "conn", "_", "c", "result", "transfer", "infos", "buffer", "bulkMemory", "exceptions", "simd", "threads", "e", "PACKAGE_NAME", "package_default", "PACKAGE_VERSION", "VERSION_PARTS", "PACKAGE_VERSION_MAJOR", "PACKAGE_VERSION_MINOR", "PACKAGE_VERSION_PATCH", "isNode", "userAgent", "isFirefox", "isSafari", "getJsDelivrBundles", "jsdelivr_dist_url", "PACKAGE_NAME", "PACKAGE_VERSION", "bigInt64Array", "wasmExceptions", "wasmThreads", "wasmSIMD", "wasmBulkMemory", "getPlatformFeatures", "exceptions", "threads", "simd", "bulkMemory", "selectBundle", "bundles", "platform", "import_web_worker", "createWorker", "url", "request", "workerScript", "workerURL", "Worker", "TextDecoderWrapper", "decoder", "data", "decodeText", "DuckDBDataProtocol"]
}
