{
  "version": 3,
  "sources": ["../../fast-glob/out/utils/array.js", "../../fast-glob/out/utils/errno.js", "../../fast-glob/out/utils/fs.js", "../../fast-glob/out/utils/path.js", "../../is-extglob/index.js", "../../is-glob/index.js", "../../glob-parent/index.js", "../../braces/lib/utils.js", "../../braces/lib/stringify.js", "../../is-number/index.js", "../../to-regex-range/index.js", "../../fill-range/index.js", "../../braces/lib/compile.js", "../../braces/lib/expand.js", "../../braces/lib/constants.js", "../../braces/lib/parse.js", "../../braces/index.js", "../../picomatch/lib/constants.js", "../../picomatch/lib/utils.js", "../../picomatch/lib/scan.js", "../../picomatch/lib/parse.js", "../../picomatch/lib/picomatch.js", "../../picomatch/index.js", "../../micromatch/index.js", "../../fast-glob/out/utils/pattern.js", "../../merge2/index.js", "../../fast-glob/out/utils/stream.js", "../../fast-glob/out/utils/string.js", "../../fast-glob/out/utils/index.js", "../../fast-glob/out/managers/tasks.js", "../../fast-glob/out/managers/patterns.js", "../../@nodelib/fs.stat/out/providers/async.js", "../../@nodelib/fs.stat/out/providers/sync.js", "../../@nodelib/fs.stat/out/adapters/fs.js", "../../@nodelib/fs.stat/out/settings.js", "../../@nodelib/fs.stat/out/index.js", "../../queue-microtask/index.js", "../../run-parallel/index.js", "../../@nodelib/fs.scandir/out/constants.js", "../../@nodelib/fs.scandir/out/utils/fs.js", "../../@nodelib/fs.scandir/out/utils/index.js", "../../@nodelib/fs.scandir/out/providers/common.js", "../../@nodelib/fs.scandir/out/providers/async.js", "../../@nodelib/fs.scandir/out/providers/sync.js", "../../@nodelib/fs.scandir/out/adapters/fs.js", "../../@nodelib/fs.scandir/out/settings.js", "../../@nodelib/fs.scandir/out/index.js", "../../reusify/reusify.js", "../../fastq/queue.js", "../../@nodelib/fs.walk/out/readers/common.js", "../../@nodelib/fs.walk/out/readers/reader.js", "../../@nodelib/fs.walk/out/readers/async.js", "../../@nodelib/fs.walk/out/providers/async.js", "../../@nodelib/fs.walk/out/providers/stream.js", "../../@nodelib/fs.walk/out/readers/sync.js", "../../@nodelib/fs.walk/out/providers/sync.js", "../../@nodelib/fs.walk/out/settings.js", "../../@nodelib/fs.walk/out/index.js", "../../fast-glob/out/readers/reader.js", "../../fast-glob/out/readers/stream.js", "../../fast-glob/out/readers/async.js", "../../fast-glob/out/providers/matchers/matcher.js", "../../fast-glob/out/providers/matchers/partial.js", "../../fast-glob/out/providers/filters/deep.js", "../../fast-glob/out/providers/filters/entry.js", "../../fast-glob/out/providers/filters/error.js", "../../fast-glob/out/providers/transformers/entry.js", "../../fast-glob/out/providers/provider.js", "../../fast-glob/out/providers/async.js", "../../fast-glob/out/providers/stream.js", "../../fast-glob/out/readers/sync.js", "../../fast-glob/out/providers/sync.js", "../../fast-glob/out/settings.js", "../../fast-glob/out/index.js", "../src/bindings/connection.ts", "../src/bindings/udf_runtime.ts", "../src/bindings/runtime.ts", "../src/bindings/file_stats.ts", "../src/json_typedef.ts", "../src/bindings/bindings_base.ts", "../src/log.ts", "../../wasm-feature-detect/dist/esm/index.js", "../src/platform.ts", "../src/bindings/runtime_node.ts", "../src/bindings/duckdb-mvp.js", "../src/bindings/bindings_node_base.ts", "../src/bindings/bindings_node_mvp.ts", "../src/bindings/duckdb-eh.js", "../src/bindings/bindings_node_eh.ts", "../src/targets/duckdb-node-blocking.ts", "../src/parallel/async_connection.ts", "../src/parallel/worker_request.ts", "../src/parallel/async_bindings.ts", "../test/index_node.ts", "../test/all_types.test.ts", "../test/bindings.test.ts", "../test/batch_stream.test.ts", "../test/filesystem.test.ts", "../test/batch_stream_async.test.ts", "../test/insert_arrow.test.ts", "../test/table_test.ts", "../test/insert_json.test.ts", "../test/insert_csv.test.ts", "../test/tokenizer.test.ts", "../test/tablenames.test.ts", "../test/udf.test.ts", "../test/regression/github_332.test.ts", "../test/regression/github_334.test.ts", "../test/regression/github_393.test.ts", "../test/regression/github_448.test.ts", "../test/regression/github_470.test.ts", "../test/regression/github_477.test.ts", "../test/regression/index.ts", "../test/fts.test.ts"],
  "sourcesContent": ["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.splitWhen = exports.flatten = void 0;\r\nfunction flatten(items) {\r\n    return items.reduce((collection, item) => [].concat(collection, item), []);\r\n}\r\nexports.flatten = flatten;\r\nfunction splitWhen(items, predicate) {\r\n    const result = [[]];\r\n    let groupIndex = 0;\r\n    for (const item of items) {\r\n        if (predicate(item)) {\r\n            groupIndex++;\r\n            result[groupIndex] = [];\r\n        }\r\n        else {\r\n            result[groupIndex].push(item);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexports.splitWhen = splitWhen;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.isEnoentCodeError = void 0;\r\nfunction isEnoentCodeError(error) {\r\n    return error.code === 'ENOENT';\r\n}\r\nexports.isEnoentCodeError = isEnoentCodeError;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.createDirentFromStats = void 0;\r\nclass DirentFromStats {\r\n    constructor(name, stats) {\r\n        this.name = name;\r\n        this.isBlockDevice = stats.isBlockDevice.bind(stats);\r\n        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);\r\n        this.isDirectory = stats.isDirectory.bind(stats);\r\n        this.isFIFO = stats.isFIFO.bind(stats);\r\n        this.isFile = stats.isFile.bind(stats);\r\n        this.isSocket = stats.isSocket.bind(stats);\r\n        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);\r\n    }\r\n}\r\nfunction createDirentFromStats(name, stats) {\r\n    return new DirentFromStats(name, stats);\r\n}\r\nexports.createDirentFromStats = createDirentFromStats;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.removeLeadingDotSegment = exports.escape = exports.makeAbsolute = exports.unixify = void 0;\r\nconst path = require(\"path\");\r\nconst LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2; // ./ or .\\\\\r\nconst UNESCAPED_GLOB_SYMBOLS_RE = /(\\\\?)([()*?[\\]{|}]|^!|[!+@](?=\\())/g;\r\n/**\r\n * Designed to work only with simple paths: `dir\\\\file`.\r\n */\r\nfunction unixify(filepath) {\r\n    return filepath.replace(/\\\\/g, '/');\r\n}\r\nexports.unixify = unixify;\r\nfunction makeAbsolute(cwd, filepath) {\r\n    return path.resolve(cwd, filepath);\r\n}\r\nexports.makeAbsolute = makeAbsolute;\r\nfunction escape(pattern) {\r\n    return pattern.replace(UNESCAPED_GLOB_SYMBOLS_RE, '\\\\$2');\r\n}\r\nexports.escape = escape;\r\nfunction removeLeadingDotSegment(entry) {\r\n    // We do not use `startsWith` because this is 10x slower than current implementation for some cases.\r\n    // eslint-disable-next-line @typescript-eslint/prefer-string-starts-ends-with\r\n    if (entry.charAt(0) === '.') {\r\n        const secondCharactery = entry.charAt(1);\r\n        if (secondCharactery === '/' || secondCharactery === '\\\\') {\r\n            return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);\r\n        }\r\n    }\r\n    return entry;\r\n}\r\nexports.removeLeadingDotSegment = removeLeadingDotSegment;\r\n", "/*!\n * is-extglob <https://github.com/jonschlinkert/is-extglob>\n *\n * Copyright (c) 2014-2016, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\nmodule.exports = function isExtglob(str) {\n  if (typeof str !== 'string' || str === '') {\n    return false;\n  }\n\n  var match;\n  while ((match = /(\\\\).|([@?!+*]\\(.*\\))/g.exec(str))) {\n    if (match[2]) return true;\n    str = str.slice(match.index + match[0].length);\n  }\n\n  return false;\n};\n", "/*!\n * is-glob <https://github.com/jonschlinkert/is-glob>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nvar isExtglob = require('is-extglob');\nvar chars = { '{': '}', '(': ')', '[': ']'};\nvar strictCheck = function(str) {\n  if (str[0] === '!') {\n    return true;\n  }\n  var index = 0;\n  var pipeIndex = -2;\n  var closeSquareIndex = -2;\n  var closeCurlyIndex = -2;\n  var closeParenIndex = -2;\n  var backSlashIndex = -2;\n  while (index < str.length) {\n    if (str[index] === '*') {\n      return true;\n    }\n\n    if (str[index + 1] === '?' && /[\\].+)]/.test(str[index])) {\n      return true;\n    }\n\n    if (closeSquareIndex !== -1 && str[index] === '[' && str[index + 1] !== ']') {\n      if (closeSquareIndex < index) {\n        closeSquareIndex = str.indexOf(']', index);\n      }\n      if (closeSquareIndex > index) {\n        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {\n          return true;\n        }\n        backSlashIndex = str.indexOf('\\\\', index);\n        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {\n          return true;\n        }\n      }\n    }\n\n    if (closeCurlyIndex !== -1 && str[index] === '{' && str[index + 1] !== '}') {\n      closeCurlyIndex = str.indexOf('}', index);\n      if (closeCurlyIndex > index) {\n        backSlashIndex = str.indexOf('\\\\', index);\n        if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {\n          return true;\n        }\n      }\n    }\n\n    if (closeParenIndex !== -1 && str[index] === '(' && str[index + 1] === '?' && /[:!=]/.test(str[index + 2]) && str[index + 3] !== ')') {\n      closeParenIndex = str.indexOf(')', index);\n      if (closeParenIndex > index) {\n        backSlashIndex = str.indexOf('\\\\', index);\n        if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {\n          return true;\n        }\n      }\n    }\n\n    if (pipeIndex !== -1 && str[index] === '(' && str[index + 1] !== '|') {\n      if (pipeIndex < index) {\n        pipeIndex = str.indexOf('|', index);\n      }\n      if (pipeIndex !== -1 && str[pipeIndex + 1] !== ')') {\n        closeParenIndex = str.indexOf(')', pipeIndex);\n        if (closeParenIndex > pipeIndex) {\n          backSlashIndex = str.indexOf('\\\\', pipeIndex);\n          if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {\n            return true;\n          }\n        }\n      }\n    }\n\n    if (str[index] === '\\\\') {\n      var open = str[index + 1];\n      index += 2;\n      var close = chars[open];\n\n      if (close) {\n        var n = str.indexOf(close, index);\n        if (n !== -1) {\n          index = n + 1;\n        }\n      }\n\n      if (str[index] === '!') {\n        return true;\n      }\n    } else {\n      index++;\n    }\n  }\n  return false;\n};\n\nvar relaxedCheck = function(str) {\n  if (str[0] === '!') {\n    return true;\n  }\n  var index = 0;\n  while (index < str.length) {\n    if (/[*?{}()[\\]]/.test(str[index])) {\n      return true;\n    }\n\n    if (str[index] === '\\\\') {\n      var open = str[index + 1];\n      index += 2;\n      var close = chars[open];\n\n      if (close) {\n        var n = str.indexOf(close, index);\n        if (n !== -1) {\n          index = n + 1;\n        }\n      }\n\n      if (str[index] === '!') {\n        return true;\n      }\n    } else {\n      index++;\n    }\n  }\n  return false;\n};\n\nmodule.exports = function isGlob(str, options) {\n  if (typeof str !== 'string' || str === '') {\n    return false;\n  }\n\n  if (isExtglob(str)) {\n    return true;\n  }\n\n  var check = strictCheck;\n\n  // optionally relax check\n  if (options && options.strict === false) {\n    check = relaxedCheck;\n  }\n\n  return check(str);\n};\n", "'use strict';\n\nvar isGlob = require('is-glob');\nvar pathPosixDirname = require('path').posix.dirname;\nvar isWin32 = require('os').platform() === 'win32';\n\nvar slash = '/';\nvar backslash = /\\\\/g;\nvar enclosure = /[\\{\\[].*[\\}\\]]$/;\nvar globby = /(^|[^\\\\])([\\{\\[]|\\([^\\)]+$)/;\nvar escaped = /\\\\([\\!\\*\\?\\|\\[\\]\\(\\)\\{\\}])/g;\n\n/**\n * @param {string} str\n * @param {Object} opts\n * @param {boolean} [opts.flipBackslashes=true]\n * @returns {string}\n */\nmodule.exports = function globParent(str, opts) {\n  var options = Object.assign({ flipBackslashes: true }, opts);\n\n  // flip windows path separators\n  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {\n    str = str.replace(backslash, slash);\n  }\n\n  // special case for strings ending in enclosure containing path separator\n  if (enclosure.test(str)) {\n    str += slash;\n  }\n\n  // preserves full path in case of trailing path separator\n  str += 'a';\n\n  // remove path parts that are globby\n  do {\n    str = pathPosixDirname(str);\n  } while (isGlob(str) || globby.test(str));\n\n  // remove escape chars and return result\n  return str.replace(escaped, '$1');\n};\n", "'use strict';\n\nexports.isInteger = num => {\n  if (typeof num === 'number') {\n    return Number.isInteger(num);\n  }\n  if (typeof num === 'string' && num.trim() !== '') {\n    return Number.isInteger(Number(num));\n  }\n  return false;\n};\n\n/**\n * Find a node of the given type\n */\n\nexports.find = (node, type) => node.nodes.find(node => node.type === type);\n\n/**\n * Find a node of the given type\n */\n\nexports.exceedsLimit = (min, max, step = 1, limit) => {\n  if (limit === false) return false;\n  if (!exports.isInteger(min) || !exports.isInteger(max)) return false;\n  return ((Number(max) - Number(min)) / Number(step)) >= limit;\n};\n\n/**\n * Escape the given node with '\\\\' before node.value\n */\n\nexports.escapeNode = (block, n = 0, type) => {\n  let node = block.nodes[n];\n  if (!node) return;\n\n  if ((type && node.type === type) || node.type === 'open' || node.type === 'close') {\n    if (node.escaped !== true) {\n      node.value = '\\\\' + node.value;\n      node.escaped = true;\n    }\n  }\n};\n\n/**\n * Returns true if the given brace node should be enclosed in literal braces\n */\n\nexports.encloseBrace = node => {\n  if (node.type !== 'brace') return false;\n  if ((node.commas >> 0 + node.ranges >> 0) === 0) {\n    node.invalid = true;\n    return true;\n  }\n  return false;\n};\n\n/**\n * Returns true if a brace node is invalid.\n */\n\nexports.isInvalidBrace = block => {\n  if (block.type !== 'brace') return false;\n  if (block.invalid === true || block.dollar) return true;\n  if ((block.commas >> 0 + block.ranges >> 0) === 0) {\n    block.invalid = true;\n    return true;\n  }\n  if (block.open !== true || block.close !== true) {\n    block.invalid = true;\n    return true;\n  }\n  return false;\n};\n\n/**\n * Returns true if a node is an open or close node\n */\n\nexports.isOpenOrClose = node => {\n  if (node.type === 'open' || node.type === 'close') {\n    return true;\n  }\n  return node.open === true || node.close === true;\n};\n\n/**\n * Reduce an array of text nodes.\n */\n\nexports.reduce = nodes => nodes.reduce((acc, node) => {\n  if (node.type === 'text') acc.push(node.value);\n  if (node.type === 'range') node.type = 'text';\n  return acc;\n}, []);\n\n/**\n * Flatten an array\n */\n\nexports.flatten = (...args) => {\n  const result = [];\n  const flat = arr => {\n    for (let i = 0; i < arr.length; i++) {\n      let ele = arr[i];\n      Array.isArray(ele) ? flat(ele, result) : ele !== void 0 && result.push(ele);\n    }\n    return result;\n  };\n  flat(args);\n  return result;\n};\n", "'use strict';\n\nconst utils = require('./utils');\n\nmodule.exports = (ast, options = {}) => {\n  let stringify = (node, parent = {}) => {\n    let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);\n    let invalidNode = node.invalid === true && options.escapeInvalid === true;\n    let output = '';\n\n    if (node.value) {\n      if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {\n        return '\\\\' + node.value;\n      }\n      return node.value;\n    }\n\n    if (node.value) {\n      return node.value;\n    }\n\n    if (node.nodes) {\n      for (let child of node.nodes) {\n        output += stringify(child);\n      }\n    }\n    return output;\n  };\n\n  return stringify(ast);\n};\n\n", "/*!\n * is-number <https://github.com/jonschlinkert/is-number>\n *\n * Copyright (c) 2014-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nmodule.exports = function(num) {\n  if (typeof num === 'number') {\n    return num - num === 0;\n  }\n  if (typeof num === 'string' && num.trim() !== '') {\n    return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);\n  }\n  return false;\n};\n", "/*!\n * to-regex-range <https://github.com/micromatch/to-regex-range>\n *\n * Copyright (c) 2015-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nconst isNumber = require('is-number');\n\nconst toRegexRange = (min, max, options) => {\n  if (isNumber(min) === false) {\n    throw new TypeError('toRegexRange: expected the first argument to be a number');\n  }\n\n  if (max === void 0 || min === max) {\n    return String(min);\n  }\n\n  if (isNumber(max) === false) {\n    throw new TypeError('toRegexRange: expected the second argument to be a number.');\n  }\n\n  let opts = { relaxZeros: true, ...options };\n  if (typeof opts.strictZeros === 'boolean') {\n    opts.relaxZeros = opts.strictZeros === false;\n  }\n\n  let relax = String(opts.relaxZeros);\n  let shorthand = String(opts.shorthand);\n  let capture = String(opts.capture);\n  let wrap = String(opts.wrap);\n  let cacheKey = min + ':' + max + '=' + relax + shorthand + capture + wrap;\n\n  if (toRegexRange.cache.hasOwnProperty(cacheKey)) {\n    return toRegexRange.cache[cacheKey].result;\n  }\n\n  let a = Math.min(min, max);\n  let b = Math.max(min, max);\n\n  if (Math.abs(a - b) === 1) {\n    let result = min + '|' + max;\n    if (opts.capture) {\n      return `(${result})`;\n    }\n    if (opts.wrap === false) {\n      return result;\n    }\n    return `(?:${result})`;\n  }\n\n  let isPadded = hasPadding(min) || hasPadding(max);\n  let state = { min, max, a, b };\n  let positives = [];\n  let negatives = [];\n\n  if (isPadded) {\n    state.isPadded = isPadded;\n    state.maxLen = String(state.max).length;\n  }\n\n  if (a < 0) {\n    let newMin = b < 0 ? Math.abs(b) : 1;\n    negatives = splitToPatterns(newMin, Math.abs(a), state, opts);\n    a = state.a = 0;\n  }\n\n  if (b >= 0) {\n    positives = splitToPatterns(a, b, state, opts);\n  }\n\n  state.negatives = negatives;\n  state.positives = positives;\n  state.result = collatePatterns(negatives, positives, opts);\n\n  if (opts.capture === true) {\n    state.result = `(${state.result})`;\n  } else if (opts.wrap !== false && (positives.length + negatives.length) > 1) {\n    state.result = `(?:${state.result})`;\n  }\n\n  toRegexRange.cache[cacheKey] = state;\n  return state.result;\n};\n\nfunction collatePatterns(neg, pos, options) {\n  let onlyNegative = filterPatterns(neg, pos, '-', false, options) || [];\n  let onlyPositive = filterPatterns(pos, neg, '', false, options) || [];\n  let intersected = filterPatterns(neg, pos, '-?', true, options) || [];\n  let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);\n  return subpatterns.join('|');\n}\n\nfunction splitToRanges(min, max) {\n  let nines = 1;\n  let zeros = 1;\n\n  let stop = countNines(min, nines);\n  let stops = new Set([max]);\n\n  while (min <= stop && stop <= max) {\n    stops.add(stop);\n    nines += 1;\n    stop = countNines(min, nines);\n  }\n\n  stop = countZeros(max + 1, zeros) - 1;\n\n  while (min < stop && stop <= max) {\n    stops.add(stop);\n    zeros += 1;\n    stop = countZeros(max + 1, zeros) - 1;\n  }\n\n  stops = [...stops];\n  stops.sort(compare);\n  return stops;\n}\n\n/**\n * Convert a range to a regex pattern\n * @param {Number} `start`\n * @param {Number} `stop`\n * @return {String}\n */\n\nfunction rangeToPattern(start, stop, options) {\n  if (start === stop) {\n    return { pattern: start, count: [], digits: 0 };\n  }\n\n  let zipped = zip(start, stop);\n  let digits = zipped.length;\n  let pattern = '';\n  let count = 0;\n\n  for (let i = 0; i < digits; i++) {\n    let [startDigit, stopDigit] = zipped[i];\n\n    if (startDigit === stopDigit) {\n      pattern += startDigit;\n\n    } else if (startDigit !== '0' || stopDigit !== '9') {\n      pattern += toCharacterClass(startDigit, stopDigit, options);\n\n    } else {\n      count++;\n    }\n  }\n\n  if (count) {\n    pattern += options.shorthand === true ? '\\\\d' : '[0-9]';\n  }\n\n  return { pattern, count: [count], digits };\n}\n\nfunction splitToPatterns(min, max, tok, options) {\n  let ranges = splitToRanges(min, max);\n  let tokens = [];\n  let start = min;\n  let prev;\n\n  for (let i = 0; i < ranges.length; i++) {\n    let max = ranges[i];\n    let obj = rangeToPattern(String(start), String(max), options);\n    let zeros = '';\n\n    if (!tok.isPadded && prev && prev.pattern === obj.pattern) {\n      if (prev.count.length > 1) {\n        prev.count.pop();\n      }\n\n      prev.count.push(obj.count[0]);\n      prev.string = prev.pattern + toQuantifier(prev.count);\n      start = max + 1;\n      continue;\n    }\n\n    if (tok.isPadded) {\n      zeros = padZeros(max, tok, options);\n    }\n\n    obj.string = zeros + obj.pattern + toQuantifier(obj.count);\n    tokens.push(obj);\n    start = max + 1;\n    prev = obj;\n  }\n\n  return tokens;\n}\n\nfunction filterPatterns(arr, comparison, prefix, intersection, options) {\n  let result = [];\n\n  for (let ele of arr) {\n    let { string } = ele;\n\n    // only push if _both_ are negative...\n    if (!intersection && !contains(comparison, 'string', string)) {\n      result.push(prefix + string);\n    }\n\n    // or _both_ are positive\n    if (intersection && contains(comparison, 'string', string)) {\n      result.push(prefix + string);\n    }\n  }\n  return result;\n}\n\n/**\n * Zip strings\n */\n\nfunction zip(a, b) {\n  let arr = [];\n  for (let i = 0; i < a.length; i++) arr.push([a[i], b[i]]);\n  return arr;\n}\n\nfunction compare(a, b) {\n  return a > b ? 1 : b > a ? -1 : 0;\n}\n\nfunction contains(arr, key, val) {\n  return arr.some(ele => ele[key] === val);\n}\n\nfunction countNines(min, len) {\n  return Number(String(min).slice(0, -len) + '9'.repeat(len));\n}\n\nfunction countZeros(integer, zeros) {\n  return integer - (integer % Math.pow(10, zeros));\n}\n\nfunction toQuantifier(digits) {\n  let [start = 0, stop = ''] = digits;\n  if (stop || start > 1) {\n    return `{${start + (stop ? ',' + stop : '')}}`;\n  }\n  return '';\n}\n\nfunction toCharacterClass(a, b, options) {\n  return `[${a}${(b - a === 1) ? '' : '-'}${b}]`;\n}\n\nfunction hasPadding(str) {\n  return /^-?(0+)\\d/.test(str);\n}\n\nfunction padZeros(value, tok, options) {\n  if (!tok.isPadded) {\n    return value;\n  }\n\n  let diff = Math.abs(tok.maxLen - String(value).length);\n  let relax = options.relaxZeros !== false;\n\n  switch (diff) {\n    case 0:\n      return '';\n    case 1:\n      return relax ? '0?' : '0';\n    case 2:\n      return relax ? '0{0,2}' : '00';\n    default: {\n      return relax ? `0{0,${diff}}` : `0{${diff}}`;\n    }\n  }\n}\n\n/**\n * Cache\n */\n\ntoRegexRange.cache = {};\ntoRegexRange.clearCache = () => (toRegexRange.cache = {});\n\n/**\n * Expose `toRegexRange`\n */\n\nmodule.exports = toRegexRange;\n", "/*!\n * fill-range <https://github.com/jonschlinkert/fill-range>\n *\n * Copyright (c) 2014-present, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nconst util = require('util');\nconst toRegexRange = require('to-regex-range');\n\nconst isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);\n\nconst transform = toNumber => {\n  return value => toNumber === true ? Number(value) : String(value);\n};\n\nconst isValidValue = value => {\n  return typeof value === 'number' || (typeof value === 'string' && value !== '');\n};\n\nconst isNumber = num => Number.isInteger(+num);\n\nconst zeros = input => {\n  let value = `${input}`;\n  let index = -1;\n  if (value[0] === '-') value = value.slice(1);\n  if (value === '0') return false;\n  while (value[++index] === '0');\n  return index > 0;\n};\n\nconst stringify = (start, end, options) => {\n  if (typeof start === 'string' || typeof end === 'string') {\n    return true;\n  }\n  return options.stringify === true;\n};\n\nconst pad = (input, maxLength, toNumber) => {\n  if (maxLength > 0) {\n    let dash = input[0] === '-' ? '-' : '';\n    if (dash) input = input.slice(1);\n    input = (dash + input.padStart(dash ? maxLength - 1 : maxLength, '0'));\n  }\n  if (toNumber === false) {\n    return String(input);\n  }\n  return input;\n};\n\nconst toMaxLen = (input, maxLength) => {\n  let negative = input[0] === '-' ? '-' : '';\n  if (negative) {\n    input = input.slice(1);\n    maxLength--;\n  }\n  while (input.length < maxLength) input = '0' + input;\n  return negative ? ('-' + input) : input;\n};\n\nconst toSequence = (parts, options) => {\n  parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);\n  parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);\n\n  let prefix = options.capture ? '' : '?:';\n  let positives = '';\n  let negatives = '';\n  let result;\n\n  if (parts.positives.length) {\n    positives = parts.positives.join('|');\n  }\n\n  if (parts.negatives.length) {\n    negatives = `-(${prefix}${parts.negatives.join('|')})`;\n  }\n\n  if (positives && negatives) {\n    result = `${positives}|${negatives}`;\n  } else {\n    result = positives || negatives;\n  }\n\n  if (options.wrap) {\n    return `(${prefix}${result})`;\n  }\n\n  return result;\n};\n\nconst toRange = (a, b, isNumbers, options) => {\n  if (isNumbers) {\n    return toRegexRange(a, b, { wrap: false, ...options });\n  }\n\n  let start = String.fromCharCode(a);\n  if (a === b) return start;\n\n  let stop = String.fromCharCode(b);\n  return `[${start}-${stop}]`;\n};\n\nconst toRegex = (start, end, options) => {\n  if (Array.isArray(start)) {\n    let wrap = options.wrap === true;\n    let prefix = options.capture ? '' : '?:';\n    return wrap ? `(${prefix}${start.join('|')})` : start.join('|');\n  }\n  return toRegexRange(start, end, options);\n};\n\nconst rangeError = (...args) => {\n  return new RangeError('Invalid range arguments: ' + util.inspect(...args));\n};\n\nconst invalidRange = (start, end, options) => {\n  if (options.strictRanges === true) throw rangeError([start, end]);\n  return [];\n};\n\nconst invalidStep = (step, options) => {\n  if (options.strictRanges === true) {\n    throw new TypeError(`Expected step \"${step}\" to be a number`);\n  }\n  return [];\n};\n\nconst fillNumbers = (start, end, step = 1, options = {}) => {\n  let a = Number(start);\n  let b = Number(end);\n\n  if (!Number.isInteger(a) || !Number.isInteger(b)) {\n    if (options.strictRanges === true) throw rangeError([start, end]);\n    return [];\n  }\n\n  // fix negative zero\n  if (a === 0) a = 0;\n  if (b === 0) b = 0;\n\n  let descending = a > b;\n  let startString = String(start);\n  let endString = String(end);\n  let stepString = String(step);\n  step = Math.max(Math.abs(step), 1);\n\n  let padded = zeros(startString) || zeros(endString) || zeros(stepString);\n  let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;\n  let toNumber = padded === false && stringify(start, end, options) === false;\n  let format = options.transform || transform(toNumber);\n\n  if (options.toRegex && step === 1) {\n    return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);\n  }\n\n  let parts = { negatives: [], positives: [] };\n  let push = num => parts[num < 0 ? 'negatives' : 'positives'].push(Math.abs(num));\n  let range = [];\n  let index = 0;\n\n  while (descending ? a >= b : a <= b) {\n    if (options.toRegex === true && step > 1) {\n      push(a);\n    } else {\n      range.push(pad(format(a, index), maxLen, toNumber));\n    }\n    a = descending ? a - step : a + step;\n    index++;\n  }\n\n  if (options.toRegex === true) {\n    return step > 1\n      ? toSequence(parts, options)\n      : toRegex(range, null, { wrap: false, ...options });\n  }\n\n  return range;\n};\n\nconst fillLetters = (start, end, step = 1, options = {}) => {\n  if ((!isNumber(start) && start.length > 1) || (!isNumber(end) && end.length > 1)) {\n    return invalidRange(start, end, options);\n  }\n\n\n  let format = options.transform || (val => String.fromCharCode(val));\n  let a = `${start}`.charCodeAt(0);\n  let b = `${end}`.charCodeAt(0);\n\n  let descending = a > b;\n  let min = Math.min(a, b);\n  let max = Math.max(a, b);\n\n  if (options.toRegex && step === 1) {\n    return toRange(min, max, false, options);\n  }\n\n  let range = [];\n  let index = 0;\n\n  while (descending ? a >= b : a <= b) {\n    range.push(format(a, index));\n    a = descending ? a - step : a + step;\n    index++;\n  }\n\n  if (options.toRegex === true) {\n    return toRegex(range, null, { wrap: false, options });\n  }\n\n  return range;\n};\n\nconst fill = (start, end, step, options = {}) => {\n  if (end == null && isValidValue(start)) {\n    return [start];\n  }\n\n  if (!isValidValue(start) || !isValidValue(end)) {\n    return invalidRange(start, end, options);\n  }\n\n  if (typeof step === 'function') {\n    return fill(start, end, 1, { transform: step });\n  }\n\n  if (isObject(step)) {\n    return fill(start, end, 0, step);\n  }\n\n  let opts = { ...options };\n  if (opts.capture === true) opts.wrap = true;\n  step = step || opts.step || 1;\n\n  if (!isNumber(step)) {\n    if (step != null && !isObject(step)) return invalidStep(step, opts);\n    return fill(start, end, 1, step);\n  }\n\n  if (isNumber(start) && isNumber(end)) {\n    return fillNumbers(start, end, step, opts);\n  }\n\n  return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);\n};\n\nmodule.exports = fill;\n", "'use strict';\n\nconst fill = require('fill-range');\nconst utils = require('./utils');\n\nconst compile = (ast, options = {}) => {\n  let walk = (node, parent = {}) => {\n    let invalidBlock = utils.isInvalidBrace(parent);\n    let invalidNode = node.invalid === true && options.escapeInvalid === true;\n    let invalid = invalidBlock === true || invalidNode === true;\n    let prefix = options.escapeInvalid === true ? '\\\\' : '';\n    let output = '';\n\n    if (node.isOpen === true) {\n      return prefix + node.value;\n    }\n    if (node.isClose === true) {\n      return prefix + node.value;\n    }\n\n    if (node.type === 'open') {\n      return invalid ? (prefix + node.value) : '(';\n    }\n\n    if (node.type === 'close') {\n      return invalid ? (prefix + node.value) : ')';\n    }\n\n    if (node.type === 'comma') {\n      return node.prev.type === 'comma' ? '' : (invalid ? node.value : '|');\n    }\n\n    if (node.value) {\n      return node.value;\n    }\n\n    if (node.nodes && node.ranges > 0) {\n      let args = utils.reduce(node.nodes);\n      let range = fill(...args, { ...options, wrap: false, toRegex: true });\n\n      if (range.length !== 0) {\n        return args.length > 1 && range.length > 1 ? `(${range})` : range;\n      }\n    }\n\n    if (node.nodes) {\n      for (let child of node.nodes) {\n        output += walk(child, node);\n      }\n    }\n    return output;\n  };\n\n  return walk(ast);\n};\n\nmodule.exports = compile;\n", "'use strict';\n\nconst fill = require('fill-range');\nconst stringify = require('./stringify');\nconst utils = require('./utils');\n\nconst append = (queue = '', stash = '', enclose = false) => {\n  let result = [];\n\n  queue = [].concat(queue);\n  stash = [].concat(stash);\n\n  if (!stash.length) return queue;\n  if (!queue.length) {\n    return enclose ? utils.flatten(stash).map(ele => `{${ele}}`) : stash;\n  }\n\n  for (let item of queue) {\n    if (Array.isArray(item)) {\n      for (let value of item) {\n        result.push(append(value, stash, enclose));\n      }\n    } else {\n      for (let ele of stash) {\n        if (enclose === true && typeof ele === 'string') ele = `{${ele}}`;\n        result.push(Array.isArray(ele) ? append(item, ele, enclose) : (item + ele));\n      }\n    }\n  }\n  return utils.flatten(result);\n};\n\nconst expand = (ast, options = {}) => {\n  let rangeLimit = options.rangeLimit === void 0 ? 1000 : options.rangeLimit;\n\n  let walk = (node, parent = {}) => {\n    node.queue = [];\n\n    let p = parent;\n    let q = parent.queue;\n\n    while (p.type !== 'brace' && p.type !== 'root' && p.parent) {\n      p = p.parent;\n      q = p.queue;\n    }\n\n    if (node.invalid || node.dollar) {\n      q.push(append(q.pop(), stringify(node, options)));\n      return;\n    }\n\n    if (node.type === 'brace' && node.invalid !== true && node.nodes.length === 2) {\n      q.push(append(q.pop(), ['{}']));\n      return;\n    }\n\n    if (node.nodes && node.ranges > 0) {\n      let args = utils.reduce(node.nodes);\n\n      if (utils.exceedsLimit(...args, options.step, rangeLimit)) {\n        throw new RangeError('expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.');\n      }\n\n      let range = fill(...args, options);\n      if (range.length === 0) {\n        range = stringify(node, options);\n      }\n\n      q.push(append(q.pop(), range));\n      node.nodes = [];\n      return;\n    }\n\n    let enclose = utils.encloseBrace(node);\n    let queue = node.queue;\n    let block = node;\n\n    while (block.type !== 'brace' && block.type !== 'root' && block.parent) {\n      block = block.parent;\n      queue = block.queue;\n    }\n\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i];\n\n      if (child.type === 'comma' && node.type === 'brace') {\n        if (i === 1) queue.push('');\n        queue.push('');\n        continue;\n      }\n\n      if (child.type === 'close') {\n        q.push(append(q.pop(), queue, enclose));\n        continue;\n      }\n\n      if (child.value && child.type !== 'open') {\n        queue.push(append(queue.pop(), child.value));\n        continue;\n      }\n\n      if (child.nodes) {\n        walk(child, node);\n      }\n    }\n\n    return queue;\n  };\n\n  return utils.flatten(walk(ast));\n};\n\nmodule.exports = expand;\n", "'use strict';\n\nmodule.exports = {\n  MAX_LENGTH: 1024 * 64,\n\n  // Digits\n  CHAR_0: '0', /* 0 */\n  CHAR_9: '9', /* 9 */\n\n  // Alphabet chars.\n  CHAR_UPPERCASE_A: 'A', /* A */\n  CHAR_LOWERCASE_A: 'a', /* a */\n  CHAR_UPPERCASE_Z: 'Z', /* Z */\n  CHAR_LOWERCASE_Z: 'z', /* z */\n\n  CHAR_LEFT_PARENTHESES: '(', /* ( */\n  CHAR_RIGHT_PARENTHESES: ')', /* ) */\n\n  CHAR_ASTERISK: '*', /* * */\n\n  // Non-alphabetic chars.\n  CHAR_AMPERSAND: '&', /* & */\n  CHAR_AT: '@', /* @ */\n  CHAR_BACKSLASH: '\\\\', /* \\ */\n  CHAR_BACKTICK: '`', /* ` */\n  CHAR_CARRIAGE_RETURN: '\\r', /* \\r */\n  CHAR_CIRCUMFLEX_ACCENT: '^', /* ^ */\n  CHAR_COLON: ':', /* : */\n  CHAR_COMMA: ',', /* , */\n  CHAR_DOLLAR: '$', /* . */\n  CHAR_DOT: '.', /* . */\n  CHAR_DOUBLE_QUOTE: '\"', /* \" */\n  CHAR_EQUAL: '=', /* = */\n  CHAR_EXCLAMATION_MARK: '!', /* ! */\n  CHAR_FORM_FEED: '\\f', /* \\f */\n  CHAR_FORWARD_SLASH: '/', /* / */\n  CHAR_HASH: '#', /* # */\n  CHAR_HYPHEN_MINUS: '-', /* - */\n  CHAR_LEFT_ANGLE_BRACKET: '<', /* < */\n  CHAR_LEFT_CURLY_BRACE: '{', /* { */\n  CHAR_LEFT_SQUARE_BRACKET: '[', /* [ */\n  CHAR_LINE_FEED: '\\n', /* \\n */\n  CHAR_NO_BREAK_SPACE: '\\u00A0', /* \\u00A0 */\n  CHAR_PERCENT: '%', /* % */\n  CHAR_PLUS: '+', /* + */\n  CHAR_QUESTION_MARK: '?', /* ? */\n  CHAR_RIGHT_ANGLE_BRACKET: '>', /* > */\n  CHAR_RIGHT_CURLY_BRACE: '}', /* } */\n  CHAR_RIGHT_SQUARE_BRACKET: ']', /* ] */\n  CHAR_SEMICOLON: ';', /* ; */\n  CHAR_SINGLE_QUOTE: '\\'', /* ' */\n  CHAR_SPACE: ' ', /*   */\n  CHAR_TAB: '\\t', /* \\t */\n  CHAR_UNDERSCORE: '_', /* _ */\n  CHAR_VERTICAL_LINE: '|', /* | */\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE: '\\uFEFF' /* \\uFEFF */\n};\n", "'use strict';\n\nconst stringify = require('./stringify');\n\n/**\n * Constants\n */\n\nconst {\n  MAX_LENGTH,\n  CHAR_BACKSLASH, /* \\ */\n  CHAR_BACKTICK, /* ` */\n  CHAR_COMMA, /* , */\n  CHAR_DOT, /* . */\n  CHAR_LEFT_PARENTHESES, /* ( */\n  CHAR_RIGHT_PARENTHESES, /* ) */\n  CHAR_LEFT_CURLY_BRACE, /* { */\n  CHAR_RIGHT_CURLY_BRACE, /* } */\n  CHAR_LEFT_SQUARE_BRACKET, /* [ */\n  CHAR_RIGHT_SQUARE_BRACKET, /* ] */\n  CHAR_DOUBLE_QUOTE, /* \" */\n  CHAR_SINGLE_QUOTE, /* ' */\n  CHAR_NO_BREAK_SPACE,\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE\n} = require('./constants');\n\n/**\n * parse\n */\n\nconst parse = (input, options = {}) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  let opts = options || {};\n  let max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n  if (input.length > max) {\n    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);\n  }\n\n  let ast = { type: 'root', input, nodes: [] };\n  let stack = [ast];\n  let block = ast;\n  let prev = ast;\n  let brackets = 0;\n  let length = input.length;\n  let index = 0;\n  let depth = 0;\n  let value;\n  let memo = {};\n\n  /**\n   * Helpers\n   */\n\n  const advance = () => input[index++];\n  const push = node => {\n    if (node.type === 'text' && prev.type === 'dot') {\n      prev.type = 'text';\n    }\n\n    if (prev && prev.type === 'text' && node.type === 'text') {\n      prev.value += node.value;\n      return;\n    }\n\n    block.nodes.push(node);\n    node.parent = block;\n    node.prev = prev;\n    prev = node;\n    return node;\n  };\n\n  push({ type: 'bos' });\n\n  while (index < length) {\n    block = stack[stack.length - 1];\n    value = advance();\n\n    /**\n     * Invalid chars\n     */\n\n    if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {\n      continue;\n    }\n\n    /**\n     * Escaped chars\n     */\n\n    if (value === CHAR_BACKSLASH) {\n      push({ type: 'text', value: (options.keepEscaping ? value : '') + advance() });\n      continue;\n    }\n\n    /**\n     * Right square bracket (literal): ']'\n     */\n\n    if (value === CHAR_RIGHT_SQUARE_BRACKET) {\n      push({ type: 'text', value: '\\\\' + value });\n      continue;\n    }\n\n    /**\n     * Left square bracket: '['\n     */\n\n    if (value === CHAR_LEFT_SQUARE_BRACKET) {\n      brackets++;\n\n      let closed = true;\n      let next;\n\n      while (index < length && (next = advance())) {\n        value += next;\n\n        if (next === CHAR_LEFT_SQUARE_BRACKET) {\n          brackets++;\n          continue;\n        }\n\n        if (next === CHAR_BACKSLASH) {\n          value += advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          brackets--;\n\n          if (brackets === 0) {\n            break;\n          }\n        }\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Parentheses\n     */\n\n    if (value === CHAR_LEFT_PARENTHESES) {\n      block = push({ type: 'paren', nodes: [] });\n      stack.push(block);\n      push({ type: 'text', value });\n      continue;\n    }\n\n    if (value === CHAR_RIGHT_PARENTHESES) {\n      if (block.type !== 'paren') {\n        push({ type: 'text', value });\n        continue;\n      }\n      block = stack.pop();\n      push({ type: 'text', value });\n      block = stack[stack.length - 1];\n      continue;\n    }\n\n    /**\n     * Quotes: '|\"|`\n     */\n\n    if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {\n      let open = value;\n      let next;\n\n      if (options.keepQuotes !== true) {\n        value = '';\n      }\n\n      while (index < length && (next = advance())) {\n        if (next === CHAR_BACKSLASH) {\n          value += next + advance();\n          continue;\n        }\n\n        if (next === open) {\n          if (options.keepQuotes === true) value += next;\n          break;\n        }\n\n        value += next;\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Left curly brace: '{'\n     */\n\n    if (value === CHAR_LEFT_CURLY_BRACE) {\n      depth++;\n\n      let dollar = prev.value && prev.value.slice(-1) === '$' || block.dollar === true;\n      let brace = {\n        type: 'brace',\n        open: true,\n        close: false,\n        dollar,\n        depth,\n        commas: 0,\n        ranges: 0,\n        nodes: []\n      };\n\n      block = push(brace);\n      stack.push(block);\n      push({ type: 'open', value });\n      continue;\n    }\n\n    /**\n     * Right curly brace: '}'\n     */\n\n    if (value === CHAR_RIGHT_CURLY_BRACE) {\n      if (block.type !== 'brace') {\n        push({ type: 'text', value });\n        continue;\n      }\n\n      let type = 'close';\n      block = stack.pop();\n      block.close = true;\n\n      push({ type, value });\n      depth--;\n\n      block = stack[stack.length - 1];\n      continue;\n    }\n\n    /**\n     * Comma: ','\n     */\n\n    if (value === CHAR_COMMA && depth > 0) {\n      if (block.ranges > 0) {\n        block.ranges = 0;\n        let open = block.nodes.shift();\n        block.nodes = [open, { type: 'text', value: stringify(block) }];\n      }\n\n      push({ type: 'comma', value });\n      block.commas++;\n      continue;\n    }\n\n    /**\n     * Dot: '.'\n     */\n\n    if (value === CHAR_DOT && depth > 0 && block.commas === 0) {\n      let siblings = block.nodes;\n\n      if (depth === 0 || siblings.length === 0) {\n        push({ type: 'text', value });\n        continue;\n      }\n\n      if (prev.type === 'dot') {\n        block.range = [];\n        prev.value += value;\n        prev.type = 'range';\n\n        if (block.nodes.length !== 3 && block.nodes.length !== 5) {\n          block.invalid = true;\n          block.ranges = 0;\n          prev.type = 'text';\n          continue;\n        }\n\n        block.ranges++;\n        block.args = [];\n        continue;\n      }\n\n      if (prev.type === 'range') {\n        siblings.pop();\n\n        let before = siblings[siblings.length - 1];\n        before.value += prev.value + value;\n        prev = before;\n        block.ranges--;\n        continue;\n      }\n\n      push({ type: 'dot', value });\n      continue;\n    }\n\n    /**\n     * Text\n     */\n\n    push({ type: 'text', value });\n  }\n\n  // Mark imbalanced braces and brackets as invalid\n  do {\n    block = stack.pop();\n\n    if (block.type !== 'root') {\n      block.nodes.forEach(node => {\n        if (!node.nodes) {\n          if (node.type === 'open') node.isOpen = true;\n          if (node.type === 'close') node.isClose = true;\n          if (!node.nodes) node.type = 'text';\n          node.invalid = true;\n        }\n      });\n\n      // get the location of the block on parent.nodes (block's siblings)\n      let parent = stack[stack.length - 1];\n      let index = parent.nodes.indexOf(block);\n      // replace the (invalid) block with it's nodes\n      parent.nodes.splice(index, 1, ...block.nodes);\n    }\n  } while (stack.length > 0);\n\n  push({ type: 'eos' });\n  return ast;\n};\n\nmodule.exports = parse;\n", "'use strict';\n\nconst stringify = require('./lib/stringify');\nconst compile = require('./lib/compile');\nconst expand = require('./lib/expand');\nconst parse = require('./lib/parse');\n\n/**\n * Expand the given pattern or create a regex-compatible string.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']\n * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {String}\n * @api public\n */\n\nconst braces = (input, options = {}) => {\n  let output = [];\n\n  if (Array.isArray(input)) {\n    for (let pattern of input) {\n      let result = braces.create(pattern, options);\n      if (Array.isArray(result)) {\n        output.push(...result);\n      } else {\n        output.push(result);\n      }\n    }\n  } else {\n    output = [].concat(braces.create(input, options));\n  }\n\n  if (options && options.expand === true && options.nodupes === true) {\n    output = [...new Set(output)];\n  }\n  return output;\n};\n\n/**\n * Parse the given `str` with the given `options`.\n *\n * ```js\n * // braces.parse(pattern, [, options]);\n * const ast = braces.parse('a/{b,c}/d');\n * console.log(ast);\n * ```\n * @param {String} pattern Brace pattern to parse\n * @param {Object} options\n * @return {Object} Returns an AST\n * @api public\n */\n\nbraces.parse = (input, options = {}) => parse(input, options);\n\n/**\n * Creates a braces string from an AST, or an AST node.\n *\n * ```js\n * const braces = require('braces');\n * let ast = braces.parse('foo/{a,b}/bar');\n * console.log(stringify(ast.nodes[2])); //=> '{a,b}'\n * ```\n * @param {String} `input` Brace pattern or AST.\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.stringify = (input, options = {}) => {\n  if (typeof input === 'string') {\n    return stringify(braces.parse(input, options), options);\n  }\n  return stringify(input, options);\n};\n\n/**\n * Compiles a brace pattern into a regex-compatible, optimized string.\n * This method is called by the main [braces](#braces) function by default.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.compile('a/{b,c}/d'));\n * //=> ['a/(b|c)/d']\n * ```\n * @param {String} `input` Brace pattern or AST.\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.compile = (input, options = {}) => {\n  if (typeof input === 'string') {\n    input = braces.parse(input, options);\n  }\n  return compile(input, options);\n};\n\n/**\n * Expands a brace pattern into an array. This method is called by the\n * main [braces](#braces) function when `options.expand` is true. Before\n * using this method it's recommended that you read the [performance notes](#performance))\n * and advantages of using [.compile](#compile) instead.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.expand('a/{b,c}/d'));\n * //=> ['a/b/d', 'a/c/d'];\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.expand = (input, options = {}) => {\n  if (typeof input === 'string') {\n    input = braces.parse(input, options);\n  }\n\n  let result = expand(input, options);\n\n  // filter out empty strings if specified\n  if (options.noempty === true) {\n    result = result.filter(Boolean);\n  }\n\n  // filter out duplicates if specified\n  if (options.nodupes === true) {\n    result = [...new Set(result)];\n  }\n\n  return result;\n};\n\n/**\n * Processes a brace pattern and returns either an expanded array\n * (if `options.expand` is true), a highly optimized regex-compatible string.\n * This method is called by the main [braces](#braces) function.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))\n * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.create = (input, options = {}) => {\n  if (input === '' || input.length < 3) {\n    return [input];\n  }\n\n return options.expand !== true\n    ? braces.compile(input, options)\n    : braces.expand(input, options);\n};\n\n/**\n * Expose \"braces\"\n */\n\nmodule.exports = braces;\n", "'use strict';\n\nconst path = require('path');\nconst WIN_SLASH = '\\\\\\\\/';\nconst WIN_NO_SLASH = `[^${WIN_SLASH}]`;\n\n/**\n * Posix glob regex\n */\n\nconst DOT_LITERAL = '\\\\.';\nconst PLUS_LITERAL = '\\\\+';\nconst QMARK_LITERAL = '\\\\?';\nconst SLASH_LITERAL = '\\\\/';\nconst ONE_CHAR = '(?=.)';\nconst QMARK = '[^/]';\nconst END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;\nconst START_ANCHOR = `(?:^|${SLASH_LITERAL})`;\nconst DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;\nconst NO_DOT = `(?!${DOT_LITERAL})`;\nconst NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;\nconst NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;\nconst NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;\nconst QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;\nconst STAR = `${QMARK}*?`;\n\nconst POSIX_CHARS = {\n  DOT_LITERAL,\n  PLUS_LITERAL,\n  QMARK_LITERAL,\n  SLASH_LITERAL,\n  ONE_CHAR,\n  QMARK,\n  END_ANCHOR,\n  DOTS_SLASH,\n  NO_DOT,\n  NO_DOTS,\n  NO_DOT_SLASH,\n  NO_DOTS_SLASH,\n  QMARK_NO_DOT,\n  STAR,\n  START_ANCHOR\n};\n\n/**\n * Windows glob regex\n */\n\nconst WINDOWS_CHARS = {\n  ...POSIX_CHARS,\n\n  SLASH_LITERAL: `[${WIN_SLASH}]`,\n  QMARK: WIN_NO_SLASH,\n  STAR: `${WIN_NO_SLASH}*?`,\n  DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,\n  NO_DOT: `(?!${DOT_LITERAL})`,\n  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,\n  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,\n  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,\n  QMARK_NO_DOT: `[^.${WIN_SLASH}]`,\n  START_ANCHOR: `(?:^|[${WIN_SLASH}])`,\n  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`\n};\n\n/**\n * POSIX Bracket Regex\n */\n\nconst POSIX_REGEX_SOURCE = {\n  alnum: 'a-zA-Z0-9',\n  alpha: 'a-zA-Z',\n  ascii: '\\\\x00-\\\\x7F',\n  blank: ' \\\\t',\n  cntrl: '\\\\x00-\\\\x1F\\\\x7F',\n  digit: '0-9',\n  graph: '\\\\x21-\\\\x7E',\n  lower: 'a-z',\n  print: '\\\\x20-\\\\x7E ',\n  punct: '\\\\-!\"#$%&\\'()\\\\*+,./:;<=>?@[\\\\]^_`{|}~',\n  space: ' \\\\t\\\\r\\\\n\\\\v\\\\f',\n  upper: 'A-Z',\n  word: 'A-Za-z0-9_',\n  xdigit: 'A-Fa-f0-9'\n};\n\nmodule.exports = {\n  MAX_LENGTH: 1024 * 64,\n  POSIX_REGEX_SOURCE,\n\n  // regular expressions\n  REGEX_BACKSLASH: /\\\\(?![*+?^${}(|)[\\]])/g,\n  REGEX_NON_SPECIAL_CHARS: /^[^@![\\].,$*+?^{}()|\\\\/]+/,\n  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\\]]/,\n  REGEX_SPECIAL_CHARS_BACKREF: /(\\\\?)((\\W)(\\3*))/g,\n  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\\]])/g,\n  REGEX_REMOVE_BACKSLASH: /(?:\\[.*?[^\\\\]\\]|\\\\(?=.))/g,\n\n  // Replace globs with equivalent patterns to reduce parsing time.\n  REPLACEMENTS: {\n    '***': '*',\n    '**/**': '**',\n    '**/**/**': '**'\n  },\n\n  // Digits\n  CHAR_0: 48, /* 0 */\n  CHAR_9: 57, /* 9 */\n\n  // Alphabet chars.\n  CHAR_UPPERCASE_A: 65, /* A */\n  CHAR_LOWERCASE_A: 97, /* a */\n  CHAR_UPPERCASE_Z: 90, /* Z */\n  CHAR_LOWERCASE_Z: 122, /* z */\n\n  CHAR_LEFT_PARENTHESES: 40, /* ( */\n  CHAR_RIGHT_PARENTHESES: 41, /* ) */\n\n  CHAR_ASTERISK: 42, /* * */\n\n  // Non-alphabetic chars.\n  CHAR_AMPERSAND: 38, /* & */\n  CHAR_AT: 64, /* @ */\n  CHAR_BACKWARD_SLASH: 92, /* \\ */\n  CHAR_CARRIAGE_RETURN: 13, /* \\r */\n  CHAR_CIRCUMFLEX_ACCENT: 94, /* ^ */\n  CHAR_COLON: 58, /* : */\n  CHAR_COMMA: 44, /* , */\n  CHAR_DOT: 46, /* . */\n  CHAR_DOUBLE_QUOTE: 34, /* \" */\n  CHAR_EQUAL: 61, /* = */\n  CHAR_EXCLAMATION_MARK: 33, /* ! */\n  CHAR_FORM_FEED: 12, /* \\f */\n  CHAR_FORWARD_SLASH: 47, /* / */\n  CHAR_GRAVE_ACCENT: 96, /* ` */\n  CHAR_HASH: 35, /* # */\n  CHAR_HYPHEN_MINUS: 45, /* - */\n  CHAR_LEFT_ANGLE_BRACKET: 60, /* < */\n  CHAR_LEFT_CURLY_BRACE: 123, /* { */\n  CHAR_LEFT_SQUARE_BRACKET: 91, /* [ */\n  CHAR_LINE_FEED: 10, /* \\n */\n  CHAR_NO_BREAK_SPACE: 160, /* \\u00A0 */\n  CHAR_PERCENT: 37, /* % */\n  CHAR_PLUS: 43, /* + */\n  CHAR_QUESTION_MARK: 63, /* ? */\n  CHAR_RIGHT_ANGLE_BRACKET: 62, /* > */\n  CHAR_RIGHT_CURLY_BRACE: 125, /* } */\n  CHAR_RIGHT_SQUARE_BRACKET: 93, /* ] */\n  CHAR_SEMICOLON: 59, /* ; */\n  CHAR_SINGLE_QUOTE: 39, /* ' */\n  CHAR_SPACE: 32, /*   */\n  CHAR_TAB: 9, /* \\t */\n  CHAR_UNDERSCORE: 95, /* _ */\n  CHAR_VERTICAL_LINE: 124, /* | */\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279, /* \\uFEFF */\n\n  SEP: path.sep,\n\n  /**\n   * Create EXTGLOB_CHARS\n   */\n\n  extglobChars(chars) {\n    return {\n      '!': { type: 'negate', open: '(?:(?!(?:', close: `))${chars.STAR})` },\n      '?': { type: 'qmark', open: '(?:', close: ')?' },\n      '+': { type: 'plus', open: '(?:', close: ')+' },\n      '*': { type: 'star', open: '(?:', close: ')*' },\n      '@': { type: 'at', open: '(?:', close: ')' }\n    };\n  },\n\n  /**\n   * Create GLOB_CHARS\n   */\n\n  globChars(win32) {\n    return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;\n  }\n};\n", "'use strict';\n\nconst path = require('path');\nconst win32 = process.platform === 'win32';\nconst {\n  REGEX_BACKSLASH,\n  REGEX_REMOVE_BACKSLASH,\n  REGEX_SPECIAL_CHARS,\n  REGEX_SPECIAL_CHARS_GLOBAL\n} = require('./constants');\n\nexports.isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);\nexports.hasRegexChars = str => REGEX_SPECIAL_CHARS.test(str);\nexports.isRegexChar = str => str.length === 1 && exports.hasRegexChars(str);\nexports.escapeRegex = str => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\\\$1');\nexports.toPosixSlashes = str => str.replace(REGEX_BACKSLASH, '/');\n\nexports.removeBackslashes = str => {\n  return str.replace(REGEX_REMOVE_BACKSLASH, match => {\n    return match === '\\\\' ? '' : match;\n  });\n};\n\nexports.supportsLookbehinds = () => {\n  const segs = process.version.slice(1).split('.').map(Number);\n  if (segs.length === 3 && segs[0] >= 9 || (segs[0] === 8 && segs[1] >= 10)) {\n    return true;\n  }\n  return false;\n};\n\nexports.isWindows = options => {\n  if (options && typeof options.windows === 'boolean') {\n    return options.windows;\n  }\n  return win32 === true || path.sep === '\\\\';\n};\n\nexports.escapeLast = (input, char, lastIdx) => {\n  const idx = input.lastIndexOf(char, lastIdx);\n  if (idx === -1) return input;\n  if (input[idx - 1] === '\\\\') return exports.escapeLast(input, char, idx - 1);\n  return `${input.slice(0, idx)}\\\\${input.slice(idx)}`;\n};\n\nexports.removePrefix = (input, state = {}) => {\n  let output = input;\n  if (output.startsWith('./')) {\n    output = output.slice(2);\n    state.prefix = './';\n  }\n  return output;\n};\n\nexports.wrapOutput = (input, state = {}, options = {}) => {\n  const prepend = options.contains ? '' : '^';\n  const append = options.contains ? '' : '$';\n\n  let output = `${prepend}(?:${input})${append}`;\n  if (state.negated === true) {\n    output = `(?:^(?!${output}).*$)`;\n  }\n  return output;\n};\n", "'use strict';\n\nconst utils = require('./utils');\nconst {\n  CHAR_ASTERISK,             /* * */\n  CHAR_AT,                   /* @ */\n  CHAR_BACKWARD_SLASH,       /* \\ */\n  CHAR_COMMA,                /* , */\n  CHAR_DOT,                  /* . */\n  CHAR_EXCLAMATION_MARK,     /* ! */\n  CHAR_FORWARD_SLASH,        /* / */\n  CHAR_LEFT_CURLY_BRACE,     /* { */\n  CHAR_LEFT_PARENTHESES,     /* ( */\n  CHAR_LEFT_SQUARE_BRACKET,  /* [ */\n  CHAR_PLUS,                 /* + */\n  CHAR_QUESTION_MARK,        /* ? */\n  CHAR_RIGHT_CURLY_BRACE,    /* } */\n  CHAR_RIGHT_PARENTHESES,    /* ) */\n  CHAR_RIGHT_SQUARE_BRACKET  /* ] */\n} = require('./constants');\n\nconst isPathSeparator = code => {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n};\n\nconst depth = token => {\n  if (token.isPrefix !== true) {\n    token.depth = token.isGlobstar ? Infinity : 1;\n  }\n};\n\n/**\n * Quickly scans a glob pattern and returns an object with a handful of\n * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),\n * `glob` (the actual pattern), `negated` (true if the path starts with `!` but not\n * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).\n *\n * ```js\n * const pm = require('picomatch');\n * console.log(pm.scan('foo/bar/*.js'));\n * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {Object} Returns an object with tokens and regex source string.\n * @api public\n */\n\nconst scan = (input, options) => {\n  const opts = options || {};\n\n  const length = input.length - 1;\n  const scanToEnd = opts.parts === true || opts.scanToEnd === true;\n  const slashes = [];\n  const tokens = [];\n  const parts = [];\n\n  let str = input;\n  let index = -1;\n  let start = 0;\n  let lastIndex = 0;\n  let isBrace = false;\n  let isBracket = false;\n  let isGlob = false;\n  let isExtglob = false;\n  let isGlobstar = false;\n  let braceEscaped = false;\n  let backslashes = false;\n  let negated = false;\n  let negatedExtglob = false;\n  let finished = false;\n  let braces = 0;\n  let prev;\n  let code;\n  let token = { value: '', depth: 0, isGlob: false };\n\n  const eos = () => index >= length;\n  const peek = () => str.charCodeAt(index + 1);\n  const advance = () => {\n    prev = code;\n    return str.charCodeAt(++index);\n  };\n\n  while (index < length) {\n    code = advance();\n    let next;\n\n    if (code === CHAR_BACKWARD_SLASH) {\n      backslashes = token.backslashes = true;\n      code = advance();\n\n      if (code === CHAR_LEFT_CURLY_BRACE) {\n        braceEscaped = true;\n      }\n      continue;\n    }\n\n    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {\n      braces++;\n\n      while (eos() !== true && (code = advance())) {\n        if (code === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (code === CHAR_LEFT_CURLY_BRACE) {\n          braces++;\n          continue;\n        }\n\n        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (braceEscaped !== true && code === CHAR_COMMA) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (code === CHAR_RIGHT_CURLY_BRACE) {\n          braces--;\n\n          if (braces === 0) {\n            braceEscaped = false;\n            isBrace = token.isBrace = true;\n            finished = true;\n            break;\n          }\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_FORWARD_SLASH) {\n      slashes.push(index);\n      tokens.push(token);\n      token = { value: '', depth: 0, isGlob: false };\n\n      if (finished === true) continue;\n      if (prev === CHAR_DOT && index === (start + 1)) {\n        start += 2;\n        continue;\n      }\n\n      lastIndex = index + 1;\n      continue;\n    }\n\n    if (opts.noext !== true) {\n      const isExtglobChar = code === CHAR_PLUS\n        || code === CHAR_AT\n        || code === CHAR_ASTERISK\n        || code === CHAR_QUESTION_MARK\n        || code === CHAR_EXCLAMATION_MARK;\n\n      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {\n        isGlob = token.isGlob = true;\n        isExtglob = token.isExtglob = true;\n        finished = true;\n        if (code === CHAR_EXCLAMATION_MARK && index === start) {\n          negatedExtglob = true;\n        }\n\n        if (scanToEnd === true) {\n          while (eos() !== true && (code = advance())) {\n            if (code === CHAR_BACKWARD_SLASH) {\n              backslashes = token.backslashes = true;\n              code = advance();\n              continue;\n            }\n\n            if (code === CHAR_RIGHT_PARENTHESES) {\n              isGlob = token.isGlob = true;\n              finished = true;\n              break;\n            }\n          }\n          continue;\n        }\n        break;\n      }\n    }\n\n    if (code === CHAR_ASTERISK) {\n      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n      break;\n    }\n\n    if (code === CHAR_QUESTION_MARK) {\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n      break;\n    }\n\n    if (code === CHAR_LEFT_SQUARE_BRACKET) {\n      while (eos() !== true && (next = advance())) {\n        if (next === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          isBracket = token.isBracket = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n          break;\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {\n      negated = token.negated = true;\n      start++;\n      continue;\n    }\n\n    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {\n      isGlob = token.isGlob = true;\n\n      if (scanToEnd === true) {\n        while (eos() !== true && (code = advance())) {\n          if (code === CHAR_LEFT_PARENTHESES) {\n            backslashes = token.backslashes = true;\n            code = advance();\n            continue;\n          }\n\n          if (code === CHAR_RIGHT_PARENTHESES) {\n            finished = true;\n            break;\n          }\n        }\n        continue;\n      }\n      break;\n    }\n\n    if (isGlob === true) {\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n  }\n\n  if (opts.noext === true) {\n    isExtglob = false;\n    isGlob = false;\n  }\n\n  let base = str;\n  let prefix = '';\n  let glob = '';\n\n  if (start > 0) {\n    prefix = str.slice(0, start);\n    str = str.slice(start);\n    lastIndex -= start;\n  }\n\n  if (base && isGlob === true && lastIndex > 0) {\n    base = str.slice(0, lastIndex);\n    glob = str.slice(lastIndex);\n  } else if (isGlob === true) {\n    base = '';\n    glob = str;\n  } else {\n    base = str;\n  }\n\n  if (base && base !== '' && base !== '/' && base !== str) {\n    if (isPathSeparator(base.charCodeAt(base.length - 1))) {\n      base = base.slice(0, -1);\n    }\n  }\n\n  if (opts.unescape === true) {\n    if (glob) glob = utils.removeBackslashes(glob);\n\n    if (base && backslashes === true) {\n      base = utils.removeBackslashes(base);\n    }\n  }\n\n  const state = {\n    prefix,\n    input,\n    start,\n    base,\n    glob,\n    isBrace,\n    isBracket,\n    isGlob,\n    isExtglob,\n    isGlobstar,\n    negated,\n    negatedExtglob\n  };\n\n  if (opts.tokens === true) {\n    state.maxDepth = 0;\n    if (!isPathSeparator(code)) {\n      tokens.push(token);\n    }\n    state.tokens = tokens;\n  }\n\n  if (opts.parts === true || opts.tokens === true) {\n    let prevIndex;\n\n    for (let idx = 0; idx < slashes.length; idx++) {\n      const n = prevIndex ? prevIndex + 1 : start;\n      const i = slashes[idx];\n      const value = input.slice(n, i);\n      if (opts.tokens) {\n        if (idx === 0 && start !== 0) {\n          tokens[idx].isPrefix = true;\n          tokens[idx].value = prefix;\n        } else {\n          tokens[idx].value = value;\n        }\n        depth(tokens[idx]);\n        state.maxDepth += tokens[idx].depth;\n      }\n      if (idx !== 0 || value !== '') {\n        parts.push(value);\n      }\n      prevIndex = i;\n    }\n\n    if (prevIndex && prevIndex + 1 < input.length) {\n      const value = input.slice(prevIndex + 1);\n      parts.push(value);\n\n      if (opts.tokens) {\n        tokens[tokens.length - 1].value = value;\n        depth(tokens[tokens.length - 1]);\n        state.maxDepth += tokens[tokens.length - 1].depth;\n      }\n    }\n\n    state.slashes = slashes;\n    state.parts = parts;\n  }\n\n  return state;\n};\n\nmodule.exports = scan;\n", "'use strict';\n\nconst constants = require('./constants');\nconst utils = require('./utils');\n\n/**\n * Constants\n */\n\nconst {\n  MAX_LENGTH,\n  POSIX_REGEX_SOURCE,\n  REGEX_NON_SPECIAL_CHARS,\n  REGEX_SPECIAL_CHARS_BACKREF,\n  REPLACEMENTS\n} = constants;\n\n/**\n * Helpers\n */\n\nconst expandRange = (args, options) => {\n  if (typeof options.expandRange === 'function') {\n    return options.expandRange(...args, options);\n  }\n\n  args.sort();\n  const value = `[${args.join('-')}]`;\n\n  try {\n    /* eslint-disable-next-line no-new */\n    new RegExp(value);\n  } catch (ex) {\n    return args.map(v => utils.escapeRegex(v)).join('..');\n  }\n\n  return value;\n};\n\n/**\n * Create the message for a syntax error\n */\n\nconst syntaxError = (type, char) => {\n  return `Missing ${type}: \"${char}\" - use \"\\\\\\\\${char}\" to match literal characters`;\n};\n\n/**\n * Parse the given input string.\n * @param {String} input\n * @param {Object} options\n * @return {Object}\n */\n\nconst parse = (input, options) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  input = REPLACEMENTS[input] || input;\n\n  const opts = { ...options };\n  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n\n  let len = input.length;\n  if (len > max) {\n    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);\n  }\n\n  const bos = { type: 'bos', value: '', output: opts.prepend || '' };\n  const tokens = [bos];\n\n  const capture = opts.capture ? '' : '?:';\n  const win32 = utils.isWindows(options);\n\n  // create constants based on platform, for windows or posix\n  const PLATFORM_CHARS = constants.globChars(win32);\n  const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);\n\n  const {\n    DOT_LITERAL,\n    PLUS_LITERAL,\n    SLASH_LITERAL,\n    ONE_CHAR,\n    DOTS_SLASH,\n    NO_DOT,\n    NO_DOT_SLASH,\n    NO_DOTS_SLASH,\n    QMARK,\n    QMARK_NO_DOT,\n    STAR,\n    START_ANCHOR\n  } = PLATFORM_CHARS;\n\n  const globstar = opts => {\n    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;\n  };\n\n  const nodot = opts.dot ? '' : NO_DOT;\n  const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;\n  let star = opts.bash === true ? globstar(opts) : STAR;\n\n  if (opts.capture) {\n    star = `(${star})`;\n  }\n\n  // minimatch options support\n  if (typeof opts.noext === 'boolean') {\n    opts.noextglob = opts.noext;\n  }\n\n  const state = {\n    input,\n    index: -1,\n    start: 0,\n    dot: opts.dot === true,\n    consumed: '',\n    output: '',\n    prefix: '',\n    backtrack: false,\n    negated: false,\n    brackets: 0,\n    braces: 0,\n    parens: 0,\n    quotes: 0,\n    globstar: false,\n    tokens\n  };\n\n  input = utils.removePrefix(input, state);\n  len = input.length;\n\n  const extglobs = [];\n  const braces = [];\n  const stack = [];\n  let prev = bos;\n  let value;\n\n  /**\n   * Tokenizing helpers\n   */\n\n  const eos = () => state.index === len - 1;\n  const peek = state.peek = (n = 1) => input[state.index + n];\n  const advance = state.advance = () => input[++state.index] || '';\n  const remaining = () => input.slice(state.index + 1);\n  const consume = (value = '', num = 0) => {\n    state.consumed += value;\n    state.index += num;\n  };\n\n  const append = token => {\n    state.output += token.output != null ? token.output : token.value;\n    consume(token.value);\n  };\n\n  const negate = () => {\n    let count = 1;\n\n    while (peek() === '!' && (peek(2) !== '(' || peek(3) === '?')) {\n      advance();\n      state.start++;\n      count++;\n    }\n\n    if (count % 2 === 0) {\n      return false;\n    }\n\n    state.negated = true;\n    state.start++;\n    return true;\n  };\n\n  const increment = type => {\n    state[type]++;\n    stack.push(type);\n  };\n\n  const decrement = type => {\n    state[type]--;\n    stack.pop();\n  };\n\n  /**\n   * Push tokens onto the tokens array. This helper speeds up\n   * tokenizing by 1) helping us avoid backtracking as much as possible,\n   * and 2) helping us avoid creating extra tokens when consecutive\n   * characters are plain text. This improves performance and simplifies\n   * lookbehinds.\n   */\n\n  const push = tok => {\n    if (prev.type === 'globstar') {\n      const isBrace = state.braces > 0 && (tok.type === 'comma' || tok.type === 'brace');\n      const isExtglob = tok.extglob === true || (extglobs.length && (tok.type === 'pipe' || tok.type === 'paren'));\n\n      if (tok.type !== 'slash' && tok.type !== 'paren' && !isBrace && !isExtglob) {\n        state.output = state.output.slice(0, -prev.output.length);\n        prev.type = 'star';\n        prev.value = '*';\n        prev.output = star;\n        state.output += prev.output;\n      }\n    }\n\n    if (extglobs.length && tok.type !== 'paren') {\n      extglobs[extglobs.length - 1].inner += tok.value;\n    }\n\n    if (tok.value || tok.output) append(tok);\n    if (prev && prev.type === 'text' && tok.type === 'text') {\n      prev.value += tok.value;\n      prev.output = (prev.output || '') + tok.value;\n      return;\n    }\n\n    tok.prev = prev;\n    tokens.push(tok);\n    prev = tok;\n  };\n\n  const extglobOpen = (type, value) => {\n    const token = { ...EXTGLOB_CHARS[value], conditions: 1, inner: '' };\n\n    token.prev = prev;\n    token.parens = state.parens;\n    token.output = state.output;\n    const output = (opts.capture ? '(' : '') + token.open;\n\n    increment('parens');\n    push({ type, value, output: state.output ? '' : ONE_CHAR });\n    push({ type: 'paren', extglob: true, value: advance(), output });\n    extglobs.push(token);\n  };\n\n  const extglobClose = token => {\n    let output = token.close + (opts.capture ? ')' : '');\n    let rest;\n\n    if (token.type === 'negate') {\n      let extglobStar = star;\n\n      if (token.inner && token.inner.length > 1 && token.inner.includes('/')) {\n        extglobStar = globstar(opts);\n      }\n\n      if (extglobStar !== star || eos() || /^\\)+$/.test(remaining())) {\n        output = token.close = `)$))${extglobStar}`;\n      }\n\n      if (token.inner.includes('*') && (rest = remaining()) && /^\\.[^\\\\/.]+$/.test(rest)) {\n        output = token.close = `)${rest})${extglobStar})`;\n      }\n\n      if (token.prev.type === 'bos') {\n        state.negatedExtglob = true;\n      }\n    }\n\n    push({ type: 'paren', extglob: true, value, output });\n    decrement('parens');\n  };\n\n  /**\n   * Fast paths\n   */\n\n  if (opts.fastpaths !== false && !/(^[*!]|[/()[\\]{}\"])/.test(input)) {\n    let backslashes = false;\n\n    let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {\n      if (first === '\\\\') {\n        backslashes = true;\n        return m;\n      }\n\n      if (first === '?') {\n        if (esc) {\n          return esc + first + (rest ? QMARK.repeat(rest.length) : '');\n        }\n        if (index === 0) {\n          return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : '');\n        }\n        return QMARK.repeat(chars.length);\n      }\n\n      if (first === '.') {\n        return DOT_LITERAL.repeat(chars.length);\n      }\n\n      if (first === '*') {\n        if (esc) {\n          return esc + first + (rest ? star : '');\n        }\n        return star;\n      }\n      return esc ? m : `\\\\${m}`;\n    });\n\n    if (backslashes === true) {\n      if (opts.unescape === true) {\n        output = output.replace(/\\\\/g, '');\n      } else {\n        output = output.replace(/\\\\+/g, m => {\n          return m.length % 2 === 0 ? '\\\\\\\\' : (m ? '\\\\' : '');\n        });\n      }\n    }\n\n    if (output === input && opts.contains === true) {\n      state.output = input;\n      return state;\n    }\n\n    state.output = utils.wrapOutput(output, state, options);\n    return state;\n  }\n\n  /**\n   * Tokenize input until we reach end-of-string\n   */\n\n  while (!eos()) {\n    value = advance();\n\n    if (value === '\\u0000') {\n      continue;\n    }\n\n    /**\n     * Escaped characters\n     */\n\n    if (value === '\\\\') {\n      const next = peek();\n\n      if (next === '/' && opts.bash !== true) {\n        continue;\n      }\n\n      if (next === '.' || next === ';') {\n        continue;\n      }\n\n      if (!next) {\n        value += '\\\\';\n        push({ type: 'text', value });\n        continue;\n      }\n\n      // collapse slashes to reduce potential for exploits\n      const match = /^\\\\+/.exec(remaining());\n      let slashes = 0;\n\n      if (match && match[0].length > 2) {\n        slashes = match[0].length;\n        state.index += slashes;\n        if (slashes % 2 !== 0) {\n          value += '\\\\';\n        }\n      }\n\n      if (opts.unescape === true) {\n        value = advance();\n      } else {\n        value += advance();\n      }\n\n      if (state.brackets === 0) {\n        push({ type: 'text', value });\n        continue;\n      }\n    }\n\n    /**\n     * If we're inside a regex character class, continue\n     * until we reach the closing bracket.\n     */\n\n    if (state.brackets > 0 && (value !== ']' || prev.value === '[' || prev.value === '[^')) {\n      if (opts.posix !== false && value === ':') {\n        const inner = prev.value.slice(1);\n        if (inner.includes('[')) {\n          prev.posix = true;\n\n          if (inner.includes(':')) {\n            const idx = prev.value.lastIndexOf('[');\n            const pre = prev.value.slice(0, idx);\n            const rest = prev.value.slice(idx + 2);\n            const posix = POSIX_REGEX_SOURCE[rest];\n            if (posix) {\n              prev.value = pre + posix;\n              state.backtrack = true;\n              advance();\n\n              if (!bos.output && tokens.indexOf(prev) === 1) {\n                bos.output = ONE_CHAR;\n              }\n              continue;\n            }\n          }\n        }\n      }\n\n      if ((value === '[' && peek() !== ':') || (value === '-' && peek() === ']')) {\n        value = `\\\\${value}`;\n      }\n\n      if (value === ']' && (prev.value === '[' || prev.value === '[^')) {\n        value = `\\\\${value}`;\n      }\n\n      if (opts.posix === true && value === '!' && prev.value === '[') {\n        value = '^';\n      }\n\n      prev.value += value;\n      append({ value });\n      continue;\n    }\n\n    /**\n     * If we're inside a quoted string, continue\n     * until we reach the closing double quote.\n     */\n\n    if (state.quotes === 1 && value !== '\"') {\n      value = utils.escapeRegex(value);\n      prev.value += value;\n      append({ value });\n      continue;\n    }\n\n    /**\n     * Double quotes\n     */\n\n    if (value === '\"') {\n      state.quotes = state.quotes === 1 ? 0 : 1;\n      if (opts.keepQuotes === true) {\n        push({ type: 'text', value });\n      }\n      continue;\n    }\n\n    /**\n     * Parentheses\n     */\n\n    if (value === '(') {\n      increment('parens');\n      push({ type: 'paren', value });\n      continue;\n    }\n\n    if (value === ')') {\n      if (state.parens === 0 && opts.strictBrackets === true) {\n        throw new SyntaxError(syntaxError('opening', '('));\n      }\n\n      const extglob = extglobs[extglobs.length - 1];\n      if (extglob && state.parens === extglob.parens + 1) {\n        extglobClose(extglobs.pop());\n        continue;\n      }\n\n      push({ type: 'paren', value, output: state.parens ? ')' : '\\\\)' });\n      decrement('parens');\n      continue;\n    }\n\n    /**\n     * Square brackets\n     */\n\n    if (value === '[') {\n      if (opts.nobracket === true || !remaining().includes(']')) {\n        if (opts.nobracket !== true && opts.strictBrackets === true) {\n          throw new SyntaxError(syntaxError('closing', ']'));\n        }\n\n        value = `\\\\${value}`;\n      } else {\n        increment('brackets');\n      }\n\n      push({ type: 'bracket', value });\n      continue;\n    }\n\n    if (value === ']') {\n      if (opts.nobracket === true || (prev && prev.type === 'bracket' && prev.value.length === 1)) {\n        push({ type: 'text', value, output: `\\\\${value}` });\n        continue;\n      }\n\n      if (state.brackets === 0) {\n        if (opts.strictBrackets === true) {\n          throw new SyntaxError(syntaxError('opening', '['));\n        }\n\n        push({ type: 'text', value, output: `\\\\${value}` });\n        continue;\n      }\n\n      decrement('brackets');\n\n      const prevValue = prev.value.slice(1);\n      if (prev.posix !== true && prevValue[0] === '^' && !prevValue.includes('/')) {\n        value = `/${value}`;\n      }\n\n      prev.value += value;\n      append({ value });\n\n      // when literal brackets are explicitly disabled\n      // assume we should match with a regex character class\n      if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {\n        continue;\n      }\n\n      const escaped = utils.escapeRegex(prev.value);\n      state.output = state.output.slice(0, -prev.value.length);\n\n      // when literal brackets are explicitly enabled\n      // assume we should escape the brackets to match literal characters\n      if (opts.literalBrackets === true) {\n        state.output += escaped;\n        prev.value = escaped;\n        continue;\n      }\n\n      // when the user specifies nothing, try to match both\n      prev.value = `(${capture}${escaped}|${prev.value})`;\n      state.output += prev.value;\n      continue;\n    }\n\n    /**\n     * Braces\n     */\n\n    if (value === '{' && opts.nobrace !== true) {\n      increment('braces');\n\n      const open = {\n        type: 'brace',\n        value,\n        output: '(',\n        outputIndex: state.output.length,\n        tokensIndex: state.tokens.length\n      };\n\n      braces.push(open);\n      push(open);\n      continue;\n    }\n\n    if (value === '}') {\n      const brace = braces[braces.length - 1];\n\n      if (opts.nobrace === true || !brace) {\n        push({ type: 'text', value, output: value });\n        continue;\n      }\n\n      let output = ')';\n\n      if (brace.dots === true) {\n        const arr = tokens.slice();\n        const range = [];\n\n        for (let i = arr.length - 1; i >= 0; i--) {\n          tokens.pop();\n          if (arr[i].type === 'brace') {\n            break;\n          }\n          if (arr[i].type !== 'dots') {\n            range.unshift(arr[i].value);\n          }\n        }\n\n        output = expandRange(range, opts);\n        state.backtrack = true;\n      }\n\n      if (brace.comma !== true && brace.dots !== true) {\n        const out = state.output.slice(0, brace.outputIndex);\n        const toks = state.tokens.slice(brace.tokensIndex);\n        brace.value = brace.output = '\\\\{';\n        value = output = '\\\\}';\n        state.output = out;\n        for (const t of toks) {\n          state.output += (t.output || t.value);\n        }\n      }\n\n      push({ type: 'brace', value, output });\n      decrement('braces');\n      braces.pop();\n      continue;\n    }\n\n    /**\n     * Pipes\n     */\n\n    if (value === '|') {\n      if (extglobs.length > 0) {\n        extglobs[extglobs.length - 1].conditions++;\n      }\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Commas\n     */\n\n    if (value === ',') {\n      let output = value;\n\n      const brace = braces[braces.length - 1];\n      if (brace && stack[stack.length - 1] === 'braces') {\n        brace.comma = true;\n        output = '|';\n      }\n\n      push({ type: 'comma', value, output });\n      continue;\n    }\n\n    /**\n     * Slashes\n     */\n\n    if (value === '/') {\n      // if the beginning of the glob is \"./\", advance the start\n      // to the current index, and don't add the \"./\" characters\n      // to the state. This greatly simplifies lookbehinds when\n      // checking for BOS characters like \"!\" and \".\" (not \"./\")\n      if (prev.type === 'dot' && state.index === state.start + 1) {\n        state.start = state.index + 1;\n        state.consumed = '';\n        state.output = '';\n        tokens.pop();\n        prev = bos; // reset \"prev\" to the first token\n        continue;\n      }\n\n      push({ type: 'slash', value, output: SLASH_LITERAL });\n      continue;\n    }\n\n    /**\n     * Dots\n     */\n\n    if (value === '.') {\n      if (state.braces > 0 && prev.type === 'dot') {\n        if (prev.value === '.') prev.output = DOT_LITERAL;\n        const brace = braces[braces.length - 1];\n        prev.type = 'dots';\n        prev.output += value;\n        prev.value += value;\n        brace.dots = true;\n        continue;\n      }\n\n      if ((state.braces + state.parens) === 0 && prev.type !== 'bos' && prev.type !== 'slash') {\n        push({ type: 'text', value, output: DOT_LITERAL });\n        continue;\n      }\n\n      push({ type: 'dot', value, output: DOT_LITERAL });\n      continue;\n    }\n\n    /**\n     * Question marks\n     */\n\n    if (value === '?') {\n      const isGroup = prev && prev.value === '(';\n      if (!isGroup && opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        extglobOpen('qmark', value);\n        continue;\n      }\n\n      if (prev && prev.type === 'paren') {\n        const next = peek();\n        let output = value;\n\n        if (next === '<' && !utils.supportsLookbehinds()) {\n          throw new Error('Node.js v10 or higher is required for regex lookbehinds');\n        }\n\n        if ((prev.value === '(' && !/[!=<:]/.test(next)) || (next === '<' && !/<([!=]|\\w+>)/.test(remaining()))) {\n          output = `\\\\${value}`;\n        }\n\n        push({ type: 'text', value, output });\n        continue;\n      }\n\n      if (opts.dot !== true && (prev.type === 'slash' || prev.type === 'bos')) {\n        push({ type: 'qmark', value, output: QMARK_NO_DOT });\n        continue;\n      }\n\n      push({ type: 'qmark', value, output: QMARK });\n      continue;\n    }\n\n    /**\n     * Exclamation\n     */\n\n    if (value === '!') {\n      if (opts.noextglob !== true && peek() === '(') {\n        if (peek(2) !== '?' || !/[!=<:]/.test(peek(3))) {\n          extglobOpen('negate', value);\n          continue;\n        }\n      }\n\n      if (opts.nonegate !== true && state.index === 0) {\n        negate();\n        continue;\n      }\n    }\n\n    /**\n     * Plus\n     */\n\n    if (value === '+') {\n      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        extglobOpen('plus', value);\n        continue;\n      }\n\n      if ((prev && prev.value === '(') || opts.regex === false) {\n        push({ type: 'plus', value, output: PLUS_LITERAL });\n        continue;\n      }\n\n      if ((prev && (prev.type === 'bracket' || prev.type === 'paren' || prev.type === 'brace')) || state.parens > 0) {\n        push({ type: 'plus', value });\n        continue;\n      }\n\n      push({ type: 'plus', value: PLUS_LITERAL });\n      continue;\n    }\n\n    /**\n     * Plain text\n     */\n\n    if (value === '@') {\n      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        push({ type: 'at', extglob: true, value, output: '' });\n        continue;\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Plain text\n     */\n\n    if (value !== '*') {\n      if (value === '$' || value === '^') {\n        value = `\\\\${value}`;\n      }\n\n      const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());\n      if (match) {\n        value += match[0];\n        state.index += match[0].length;\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Stars\n     */\n\n    if (prev && (prev.type === 'globstar' || prev.star === true)) {\n      prev.type = 'star';\n      prev.star = true;\n      prev.value += value;\n      prev.output = star;\n      state.backtrack = true;\n      state.globstar = true;\n      consume(value);\n      continue;\n    }\n\n    let rest = remaining();\n    if (opts.noextglob !== true && /^\\([^?]/.test(rest)) {\n      extglobOpen('star', value);\n      continue;\n    }\n\n    if (prev.type === 'star') {\n      if (opts.noglobstar === true) {\n        consume(value);\n        continue;\n      }\n\n      const prior = prev.prev;\n      const before = prior.prev;\n      const isStart = prior.type === 'slash' || prior.type === 'bos';\n      const afterStar = before && (before.type === 'star' || before.type === 'globstar');\n\n      if (opts.bash === true && (!isStart || (rest[0] && rest[0] !== '/'))) {\n        push({ type: 'star', value, output: '' });\n        continue;\n      }\n\n      const isBrace = state.braces > 0 && (prior.type === 'comma' || prior.type === 'brace');\n      const isExtglob = extglobs.length && (prior.type === 'pipe' || prior.type === 'paren');\n      if (!isStart && prior.type !== 'paren' && !isBrace && !isExtglob) {\n        push({ type: 'star', value, output: '' });\n        continue;\n      }\n\n      // strip consecutive `/**/`\n      while (rest.slice(0, 3) === '/**') {\n        const after = input[state.index + 4];\n        if (after && after !== '/') {\n          break;\n        }\n        rest = rest.slice(3);\n        consume('/**', 3);\n      }\n\n      if (prior.type === 'bos' && eos()) {\n        prev.type = 'globstar';\n        prev.value += value;\n        prev.output = globstar(opts);\n        state.output = prev.output;\n        state.globstar = true;\n        consume(value);\n        continue;\n      }\n\n      if (prior.type === 'slash' && prior.prev.type !== 'bos' && !afterStar && eos()) {\n        state.output = state.output.slice(0, -(prior.output + prev.output).length);\n        prior.output = `(?:${prior.output}`;\n\n        prev.type = 'globstar';\n        prev.output = globstar(opts) + (opts.strictSlashes ? ')' : '|$)');\n        prev.value += value;\n        state.globstar = true;\n        state.output += prior.output + prev.output;\n        consume(value);\n        continue;\n      }\n\n      if (prior.type === 'slash' && prior.prev.type !== 'bos' && rest[0] === '/') {\n        const end = rest[1] !== void 0 ? '|$' : '';\n\n        state.output = state.output.slice(0, -(prior.output + prev.output).length);\n        prior.output = `(?:${prior.output}`;\n\n        prev.type = 'globstar';\n        prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;\n        prev.value += value;\n\n        state.output += prior.output + prev.output;\n        state.globstar = true;\n\n        consume(value + advance());\n\n        push({ type: 'slash', value: '/', output: '' });\n        continue;\n      }\n\n      if (prior.type === 'bos' && rest[0] === '/') {\n        prev.type = 'globstar';\n        prev.value += value;\n        prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;\n        state.output = prev.output;\n        state.globstar = true;\n        consume(value + advance());\n        push({ type: 'slash', value: '/', output: '' });\n        continue;\n      }\n\n      // remove single star from output\n      state.output = state.output.slice(0, -prev.output.length);\n\n      // reset previous token to globstar\n      prev.type = 'globstar';\n      prev.output = globstar(opts);\n      prev.value += value;\n\n      // reset output with globstar\n      state.output += prev.output;\n      state.globstar = true;\n      consume(value);\n      continue;\n    }\n\n    const token = { type: 'star', value, output: star };\n\n    if (opts.bash === true) {\n      token.output = '.*?';\n      if (prev.type === 'bos' || prev.type === 'slash') {\n        token.output = nodot + token.output;\n      }\n      push(token);\n      continue;\n    }\n\n    if (prev && (prev.type === 'bracket' || prev.type === 'paren') && opts.regex === true) {\n      token.output = value;\n      push(token);\n      continue;\n    }\n\n    if (state.index === state.start || prev.type === 'slash' || prev.type === 'dot') {\n      if (prev.type === 'dot') {\n        state.output += NO_DOT_SLASH;\n        prev.output += NO_DOT_SLASH;\n\n      } else if (opts.dot === true) {\n        state.output += NO_DOTS_SLASH;\n        prev.output += NO_DOTS_SLASH;\n\n      } else {\n        state.output += nodot;\n        prev.output += nodot;\n      }\n\n      if (peek() !== '*') {\n        state.output += ONE_CHAR;\n        prev.output += ONE_CHAR;\n      }\n    }\n\n    push(token);\n  }\n\n  while (state.brackets > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ']'));\n    state.output = utils.escapeLast(state.output, '[');\n    decrement('brackets');\n  }\n\n  while (state.parens > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ')'));\n    state.output = utils.escapeLast(state.output, '(');\n    decrement('parens');\n  }\n\n  while (state.braces > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', '}'));\n    state.output = utils.escapeLast(state.output, '{');\n    decrement('braces');\n  }\n\n  if (opts.strictSlashes !== true && (prev.type === 'star' || prev.type === 'bracket')) {\n    push({ type: 'maybe_slash', value: '', output: `${SLASH_LITERAL}?` });\n  }\n\n  // rebuild the output if we had to backtrack at any point\n  if (state.backtrack === true) {\n    state.output = '';\n\n    for (const token of state.tokens) {\n      state.output += token.output != null ? token.output : token.value;\n\n      if (token.suffix) {\n        state.output += token.suffix;\n      }\n    }\n  }\n\n  return state;\n};\n\n/**\n * Fast paths for creating regular expressions for common glob patterns.\n * This can significantly speed up processing and has very little downside\n * impact when none of the fast paths match.\n */\n\nparse.fastpaths = (input, options) => {\n  const opts = { ...options };\n  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n  const len = input.length;\n  if (len > max) {\n    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);\n  }\n\n  input = REPLACEMENTS[input] || input;\n  const win32 = utils.isWindows(options);\n\n  // create constants based on platform, for windows or posix\n  const {\n    DOT_LITERAL,\n    SLASH_LITERAL,\n    ONE_CHAR,\n    DOTS_SLASH,\n    NO_DOT,\n    NO_DOTS,\n    NO_DOTS_SLASH,\n    STAR,\n    START_ANCHOR\n  } = constants.globChars(win32);\n\n  const nodot = opts.dot ? NO_DOTS : NO_DOT;\n  const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;\n  const capture = opts.capture ? '' : '?:';\n  const state = { negated: false, prefix: '' };\n  let star = opts.bash === true ? '.*?' : STAR;\n\n  if (opts.capture) {\n    star = `(${star})`;\n  }\n\n  const globstar = opts => {\n    if (opts.noglobstar === true) return star;\n    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;\n  };\n\n  const create = str => {\n    switch (str) {\n      case '*':\n        return `${nodot}${ONE_CHAR}${star}`;\n\n      case '.*':\n        return `${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '*.*':\n        return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '*/*':\n        return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;\n\n      case '**':\n        return nodot + globstar(opts);\n\n      case '**/*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;\n\n      case '**/*.*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '**/.*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      default: {\n        const match = /^(.*?)\\.(\\w+)$/.exec(str);\n        if (!match) return;\n\n        const source = create(match[1]);\n        if (!source) return;\n\n        return source + DOT_LITERAL + match[2];\n      }\n    }\n  };\n\n  const output = utils.removePrefix(input, state);\n  let source = create(output);\n\n  if (source && opts.strictSlashes !== true) {\n    source += `${SLASH_LITERAL}?`;\n  }\n\n  return source;\n};\n\nmodule.exports = parse;\n", "'use strict';\n\nconst path = require('path');\nconst scan = require('./scan');\nconst parse = require('./parse');\nconst utils = require('./utils');\nconst constants = require('./constants');\nconst isObject = val => val && typeof val === 'object' && !Array.isArray(val);\n\n/**\n * Creates a matcher function from one or more glob patterns. The\n * returned function takes a string to match as its first argument,\n * and returns true if the string is a match. The returned matcher\n * function also takes a boolean as the second argument that, when true,\n * returns an object with additional information.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch(glob[, options]);\n *\n * const isMatch = picomatch('*.!(*a)');\n * console.log(isMatch('a.a')); //=> false\n * console.log(isMatch('a.b')); //=> true\n * ```\n * @name picomatch\n * @param {String|Array} `globs` One or more glob patterns.\n * @param {Object=} `options`\n * @return {Function=} Returns a matcher function.\n * @api public\n */\n\nconst picomatch = (glob, options, returnState = false) => {\n  if (Array.isArray(glob)) {\n    const fns = glob.map(input => picomatch(input, options, returnState));\n    const arrayMatcher = str => {\n      for (const isMatch of fns) {\n        const state = isMatch(str);\n        if (state) return state;\n      }\n      return false;\n    };\n    return arrayMatcher;\n  }\n\n  const isState = isObject(glob) && glob.tokens && glob.input;\n\n  if (glob === '' || (typeof glob !== 'string' && !isState)) {\n    throw new TypeError('Expected pattern to be a non-empty string');\n  }\n\n  const opts = options || {};\n  const posix = utils.isWindows(options);\n  const regex = isState\n    ? picomatch.compileRe(glob, options)\n    : picomatch.makeRe(glob, options, false, true);\n\n  const state = regex.state;\n  delete regex.state;\n\n  let isIgnored = () => false;\n  if (opts.ignore) {\n    const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };\n    isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);\n  }\n\n  const matcher = (input, returnObject = false) => {\n    const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });\n    const result = { glob, state, regex, posix, input, output, match, isMatch };\n\n    if (typeof opts.onResult === 'function') {\n      opts.onResult(result);\n    }\n\n    if (isMatch === false) {\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (isIgnored(input)) {\n      if (typeof opts.onIgnore === 'function') {\n        opts.onIgnore(result);\n      }\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (typeof opts.onMatch === 'function') {\n      opts.onMatch(result);\n    }\n    return returnObject ? result : true;\n  };\n\n  if (returnState) {\n    matcher.state = state;\n  }\n\n  return matcher;\n};\n\n/**\n * Test `input` with the given `regex`. This is used by the main\n * `picomatch()` function to test the input string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.test(input, regex[, options]);\n *\n * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\\/([^/]*?))$/));\n * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp} `regex`\n * @return {Object} Returns an object with matching info.\n * @api public\n */\n\npicomatch.test = (input, regex, options, { glob, posix } = {}) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected input to be a string');\n  }\n\n  if (input === '') {\n    return { isMatch: false, output: '' };\n  }\n\n  const opts = options || {};\n  const format = opts.format || (posix ? utils.toPosixSlashes : null);\n  let match = input === glob;\n  let output = (match && format) ? format(input) : input;\n\n  if (match === false) {\n    output = format ? format(input) : input;\n    match = output === glob;\n  }\n\n  if (match === false || opts.capture === true) {\n    if (opts.matchBase === true || opts.basename === true) {\n      match = picomatch.matchBase(input, regex, options, posix);\n    } else {\n      match = regex.exec(output);\n    }\n  }\n\n  return { isMatch: Boolean(match), match, output };\n};\n\n/**\n * Match the basename of a filepath.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.matchBase(input, glob[, options]);\n * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).\n * @return {Boolean}\n * @api public\n */\n\npicomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {\n  const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);\n  return regex.test(path.basename(input));\n};\n\n/**\n * Returns true if **any** of the given glob `patterns` match the specified `string`.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.isMatch(string, patterns[, options]);\n *\n * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true\n * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false\n * ```\n * @param {String|Array} str The string to test.\n * @param {String|Array} patterns One or more glob patterns to use for matching.\n * @param {Object} [options] See available [options](#options).\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\npicomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);\n\n/**\n * Parse a glob pattern to create the source string for a regular\n * expression.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const result = picomatch.parse(pattern[, options]);\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object} Returns an object with useful properties and output to be used as a regex source string.\n * @api public\n */\n\npicomatch.parse = (pattern, options) => {\n  if (Array.isArray(pattern)) return pattern.map(p => picomatch.parse(p, options));\n  return parse(pattern, { ...options, fastpaths: false });\n};\n\n/**\n * Scan a glob pattern to separate the pattern into segments.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.scan(input[, options]);\n *\n * const result = picomatch.scan('!./foo/*.js');\n * console.log(result);\n * { prefix: '!./',\n *   input: '!./foo/*.js',\n *   start: 3,\n *   base: 'foo',\n *   glob: '*.js',\n *   isBrace: false,\n *   isBracket: false,\n *   isGlob: true,\n *   isExtglob: false,\n *   isGlobstar: false,\n *   negated: true }\n * ```\n * @param {String} `input` Glob pattern to scan.\n * @param {Object} `options`\n * @return {Object} Returns an object with\n * @api public\n */\n\npicomatch.scan = (input, options) => scan(input, options);\n\n/**\n * Compile a regular expression from the `state` object returned by the\n * [parse()](#parse) method.\n *\n * @param {Object} `state`\n * @param {Object} `options`\n * @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.\n * @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.\n * @return {RegExp}\n * @api public\n */\n\npicomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {\n  if (returnOutput === true) {\n    return state.output;\n  }\n\n  const opts = options || {};\n  const prepend = opts.contains ? '' : '^';\n  const append = opts.contains ? '' : '$';\n\n  let source = `${prepend}(?:${state.output})${append}`;\n  if (state && state.negated === true) {\n    source = `^(?!${source}).*$`;\n  }\n\n  const regex = picomatch.toRegex(source, options);\n  if (returnState === true) {\n    regex.state = state;\n  }\n\n  return regex;\n};\n\n/**\n * Create a regular expression from a parsed glob pattern.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const state = picomatch.parse('*.js');\n * // picomatch.compileRe(state[, options]);\n *\n * console.log(picomatch.compileRe(state));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `state` The object returned from the `.parse` method.\n * @param {Object} `options`\n * @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.\n * @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.\n * @return {RegExp} Returns a regex created from the given pattern.\n * @api public\n */\n\npicomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {\n  if (!input || typeof input !== 'string') {\n    throw new TypeError('Expected a non-empty string');\n  }\n\n  let parsed = { negated: false, fastpaths: true };\n\n  if (options.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {\n    parsed.output = parse.fastpaths(input, options);\n  }\n\n  if (!parsed.output) {\n    parsed = parse(input, options);\n  }\n\n  return picomatch.compileRe(parsed, options, returnOutput, returnState);\n};\n\n/**\n * Create a regular expression from the given regex source string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.toRegex(source[, options]);\n *\n * const { output } = picomatch.parse('*.js');\n * console.log(picomatch.toRegex(output));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `source` Regular expression source string.\n * @param {Object} `options`\n * @return {RegExp}\n * @api public\n */\n\npicomatch.toRegex = (source, options) => {\n  try {\n    const opts = options || {};\n    return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''));\n  } catch (err) {\n    if (options && options.debug === true) throw err;\n    return /$^/;\n  }\n};\n\n/**\n * Picomatch constants.\n * @return {Object}\n */\n\npicomatch.constants = constants;\n\n/**\n * Expose \"picomatch\"\n */\n\nmodule.exports = picomatch;\n", "'use strict';\n\nmodule.exports = require('./lib/picomatch');\n", "'use strict';\n\nconst util = require('util');\nconst braces = require('braces');\nconst picomatch = require('picomatch');\nconst utils = require('picomatch/lib/utils');\nconst isEmptyString = val => val === '' || val === './';\n\n/**\n * Returns an array of strings that match one or more glob patterns.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm(list, patterns[, options]);\n *\n * console.log(mm(['a.js', 'a.txt'], ['*.js']));\n * //=> [ 'a.js' ]\n * ```\n * @param {String|Array<string>} `list` List of strings to match.\n * @param {String|Array<string>} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options)\n * @return {Array} Returns an array of matches\n * @summary false\n * @api public\n */\n\nconst micromatch = (list, patterns, options) => {\n  patterns = [].concat(patterns);\n  list = [].concat(list);\n\n  let omit = new Set();\n  let keep = new Set();\n  let items = new Set();\n  let negatives = 0;\n\n  let onResult = state => {\n    items.add(state.output);\n    if (options && options.onResult) {\n      options.onResult(state);\n    }\n  };\n\n  for (let i = 0; i < patterns.length; i++) {\n    let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true);\n    let negated = isMatch.state.negated || isMatch.state.negatedExtglob;\n    if (negated) negatives++;\n\n    for (let item of list) {\n      let matched = isMatch(item, true);\n\n      let match = negated ? !matched.isMatch : matched.isMatch;\n      if (!match) continue;\n\n      if (negated) {\n        omit.add(matched.output);\n      } else {\n        omit.delete(matched.output);\n        keep.add(matched.output);\n      }\n    }\n  }\n\n  let result = negatives === patterns.length ? [...items] : [...keep];\n  let matches = result.filter(item => !omit.has(item));\n\n  if (options && matches.length === 0) {\n    if (options.failglob === true) {\n      throw new Error(`No matches found for \"${patterns.join(', ')}\"`);\n    }\n\n    if (options.nonull === true || options.nullglob === true) {\n      return options.unescape ? patterns.map(p => p.replace(/\\\\/g, '')) : patterns;\n    }\n  }\n\n  return matches;\n};\n\n/**\n * Backwards compatibility\n */\n\nmicromatch.match = micromatch;\n\n/**\n * Returns a matcher function from the given glob `pattern` and `options`.\n * The returned function takes a string to match as its only argument and returns\n * true if the string is a match.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.matcher(pattern[, options]);\n *\n * const isMatch = mm.matcher('*.!(*a)');\n * console.log(isMatch('a.a')); //=> false\n * console.log(isMatch('a.b')); //=> true\n * ```\n * @param {String} `pattern` Glob pattern\n * @param {Object} `options`\n * @return {Function} Returns a matcher function.\n * @api public\n */\n\nmicromatch.matcher = (pattern, options) => picomatch(pattern, options);\n\n/**\n * Returns true if **any** of the given glob `patterns` match the specified `string`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.isMatch(string, patterns[, options]);\n *\n * console.log(mm.isMatch('a.a', ['b.*', '*.a'])); //=> true\n * console.log(mm.isMatch('a.a', 'b.*')); //=> false\n * ```\n * @param {String} `str` The string to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `[options]` See available [options](#options).\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\nmicromatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);\n\n/**\n * Backwards compatibility\n */\n\nmicromatch.any = micromatch.isMatch;\n\n/**\n * Returns a list of strings that _**do not match any**_ of the given `patterns`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.not(list, patterns[, options]);\n *\n * console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));\n * //=> ['b.b', 'c.c']\n * ```\n * @param {Array} `list` Array of strings to match.\n * @param {String|Array} `patterns` One or more glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Array} Returns an array of strings that **do not match** the given patterns.\n * @api public\n */\n\nmicromatch.not = (list, patterns, options = {}) => {\n  patterns = [].concat(patterns).map(String);\n  let result = new Set();\n  let items = [];\n\n  let onResult = state => {\n    if (options.onResult) options.onResult(state);\n    items.push(state.output);\n  };\n\n  let matches = micromatch(list, patterns, { ...options, onResult });\n\n  for (let item of items) {\n    if (!matches.includes(item)) {\n      result.add(item);\n    }\n  }\n  return [...result];\n};\n\n/**\n * Returns true if the given `string` contains the given pattern. Similar\n * to [.isMatch](#isMatch) but the pattern can match any part of the string.\n *\n * ```js\n * var mm = require('micromatch');\n * // mm.contains(string, pattern[, options]);\n *\n * console.log(mm.contains('aa/bb/cc', '*b'));\n * //=> true\n * console.log(mm.contains('aa/bb/cc', '*d'));\n * //=> false\n * ```\n * @param {String} `str` The string to match.\n * @param {String|Array} `patterns` Glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any of the patterns matches any part of `str`.\n * @api public\n */\n\nmicromatch.contains = (str, pattern, options) => {\n  if (typeof str !== 'string') {\n    throw new TypeError(`Expected a string: \"${util.inspect(str)}\"`);\n  }\n\n  if (Array.isArray(pattern)) {\n    return pattern.some(p => micromatch.contains(str, p, options));\n  }\n\n  if (typeof pattern === 'string') {\n    if (isEmptyString(str) || isEmptyString(pattern)) {\n      return false;\n    }\n\n    if (str.includes(pattern) || (str.startsWith('./') && str.slice(2).includes(pattern))) {\n      return true;\n    }\n  }\n\n  return micromatch.isMatch(str, pattern, { ...options, contains: true });\n};\n\n/**\n * Filter the keys of the given object with the given `glob` pattern\n * and `options`. Does not attempt to match nested keys. If you need this feature,\n * use [glob-object][] instead.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.matchKeys(object, patterns[, options]);\n *\n * const obj = { aa: 'a', ab: 'b', ac: 'c' };\n * console.log(mm.matchKeys(obj, '*b'));\n * //=> { ab: 'b' }\n * ```\n * @param {Object} `object` The object with keys to filter.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Object} Returns an object with only keys that match the given patterns.\n * @api public\n */\n\nmicromatch.matchKeys = (obj, patterns, options) => {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('Expected the first argument to be an object');\n  }\n  let keys = micromatch(Object.keys(obj), patterns, options);\n  let res = {};\n  for (let key of keys) res[key] = obj[key];\n  return res;\n};\n\n/**\n * Returns true if some of the strings in the given `list` match any of the given glob `patterns`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.some(list, patterns[, options]);\n *\n * console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n * // true\n * console.log(mm.some(['foo.js'], ['*.js', '!foo.js']));\n * // false\n * ```\n * @param {String|Array} `list` The string or array of strings to test. Returns as soon as the first match is found.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any `patterns` matches any of the strings in `list`\n * @api public\n */\n\nmicromatch.some = (list, patterns, options) => {\n  let items = [].concat(list);\n\n  for (let pattern of [].concat(patterns)) {\n    let isMatch = picomatch(String(pattern), options);\n    if (items.some(item => isMatch(item))) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if every string in the given `list` matches\n * any of the given glob `patterns`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.every(list, patterns[, options]);\n *\n * console.log(mm.every('foo.js', ['foo.js']));\n * // true\n * console.log(mm.every(['foo.js', 'bar.js'], ['*.js']));\n * // true\n * console.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n * // false\n * console.log(mm.every(['foo.js'], ['*.js', '!foo.js']));\n * // false\n * ```\n * @param {String|Array} `list` The string or array of strings to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if all `patterns` matches all of the strings in `list`\n * @api public\n */\n\nmicromatch.every = (list, patterns, options) => {\n  let items = [].concat(list);\n\n  for (let pattern of [].concat(patterns)) {\n    let isMatch = picomatch(String(pattern), options);\n    if (!items.every(item => isMatch(item))) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if **all** of the given `patterns` match\n * the specified string.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.all(string, patterns[, options]);\n *\n * console.log(mm.all('foo.js', ['foo.js']));\n * // true\n *\n * console.log(mm.all('foo.js', ['*.js', '!foo.js']));\n * // false\n *\n * console.log(mm.all('foo.js', ['*.js', 'foo.js']));\n * // true\n *\n * console.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));\n * // true\n * ```\n * @param {String|Array} `str` The string to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\nmicromatch.all = (str, patterns, options) => {\n  if (typeof str !== 'string') {\n    throw new TypeError(`Expected a string: \"${util.inspect(str)}\"`);\n  }\n\n  return [].concat(patterns).every(p => picomatch(p, options)(str));\n};\n\n/**\n * Returns an array of matches captured by `pattern` in `string, or `null` if the pattern did not match.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.capture(pattern, string[, options]);\n *\n * console.log(mm.capture('test/*.js', 'test/foo.js'));\n * //=> ['foo']\n * console.log(mm.capture('test/*.js', 'foo/bar.css'));\n * //=> null\n * ```\n * @param {String} `glob` Glob pattern to use for matching.\n * @param {String} `input` String to match\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Array|null} Returns an array of captures if the input matches the glob pattern, otherwise `null`.\n * @api public\n */\n\nmicromatch.capture = (glob, input, options) => {\n  let posix = utils.isWindows(options);\n  let regex = picomatch.makeRe(String(glob), { ...options, capture: true });\n  let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);\n\n  if (match) {\n    return match.slice(1).map(v => v === void 0 ? '' : v);\n  }\n};\n\n/**\n * Create a regular expression from the given glob `pattern`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.makeRe(pattern[, options]);\n *\n * console.log(mm.makeRe('*.js'));\n * //=> /^(?:(\\.[\\\\\\/])?(?!\\.)(?=.)[^\\/]*?\\.js)$/\n * ```\n * @param {String} `pattern` A glob pattern to convert to regex.\n * @param {Object} `options`\n * @return {RegExp} Returns a regex created from the given pattern.\n * @api public\n */\n\nmicromatch.makeRe = (...args) => picomatch.makeRe(...args);\n\n/**\n * Scan a glob pattern to separate the pattern into segments. Used\n * by the [split](#split) method.\n *\n * ```js\n * const mm = require('micromatch');\n * const state = mm.scan(pattern[, options]);\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object} Returns an object with\n * @api public\n */\n\nmicromatch.scan = (...args) => picomatch.scan(...args);\n\n/**\n * Parse a glob pattern to create the source string for a regular\n * expression.\n *\n * ```js\n * const mm = require('micromatch');\n * const state = mm(pattern[, options]);\n * ```\n * @param {String} `glob`\n * @param {Object} `options`\n * @return {Object} Returns an object with useful properties and output to be used as regex source string.\n * @api public\n */\n\nmicromatch.parse = (patterns, options) => {\n  let res = [];\n  for (let pattern of [].concat(patterns || [])) {\n    for (let str of braces(String(pattern), options)) {\n      res.push(picomatch.parse(str, options));\n    }\n  }\n  return res;\n};\n\n/**\n * Process the given brace `pattern`.\n *\n * ```js\n * const { braces } = require('micromatch');\n * console.log(braces('foo/{a,b,c}/bar'));\n * //=> [ 'foo/(a|b|c)/bar' ]\n *\n * console.log(braces('foo/{a,b,c}/bar', { expand: true }));\n * //=> [ 'foo/a/bar', 'foo/b/bar', 'foo/c/bar' ]\n * ```\n * @param {String} `pattern` String with brace pattern to process.\n * @param {Object} `options` Any [options](#options) to change how expansion is performed. See the [braces][] library for all available options.\n * @return {Array}\n * @api public\n */\n\nmicromatch.braces = (pattern, options) => {\n  if (typeof pattern !== 'string') throw new TypeError('Expected a string');\n  if ((options && options.nobrace === true) || !/\\{.*\\}/.test(pattern)) {\n    return [pattern];\n  }\n  return braces(pattern, options);\n};\n\n/**\n * Expand braces\n */\n\nmicromatch.braceExpand = (pattern, options) => {\n  if (typeof pattern !== 'string') throw new TypeError('Expected a string');\n  return micromatch.braces(pattern, { ...options, expand: true });\n};\n\n/**\n * Expose micromatch\n */\n\nmodule.exports = micromatch;\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.matchAny = exports.convertPatternsToRe = exports.makeRe = exports.getPatternParts = exports.expandBraceExpansion = exports.expandPatternsWithBraceExpansion = exports.isAffectDepthOfReadingPattern = exports.endsWithSlashGlobStar = exports.hasGlobStar = exports.getBaseDirectory = exports.isPatternRelatedToParentDirectory = exports.getPatternsOutsideCurrentDirectory = exports.getPatternsInsideCurrentDirectory = exports.getPositivePatterns = exports.getNegativePatterns = exports.isPositivePattern = exports.isNegativePattern = exports.convertToNegativePattern = exports.convertToPositivePattern = exports.isDynamicPattern = exports.isStaticPattern = void 0;\r\nconst path = require(\"path\");\r\nconst globParent = require(\"glob-parent\");\r\nconst micromatch = require(\"micromatch\");\r\nconst GLOBSTAR = '**';\r\nconst ESCAPE_SYMBOL = '\\\\';\r\nconst COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;\r\nconst REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\\[[^[]*]/;\r\nconst REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\\([^(]*\\|[^|]*\\)/;\r\nconst GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\\([^(]*\\)/;\r\nconst BRACE_EXPANSION_SEPARATORS_RE = /,|\\.\\./;\r\nfunction isStaticPattern(pattern, options = {}) {\r\n    return !isDynamicPattern(pattern, options);\r\n}\r\nexports.isStaticPattern = isStaticPattern;\r\nfunction isDynamicPattern(pattern, options = {}) {\r\n    /**\r\n     * A special case with an empty string is necessary for matching patterns that start with a forward slash.\r\n     * An empty string cannot be a dynamic pattern.\r\n     * For example, the pattern `/lib/*` will be spread into parts: '', 'lib', '*'.\r\n     */\r\n    if (pattern === '') {\r\n        return false;\r\n    }\r\n    /**\r\n     * When the `caseSensitiveMatch` option is disabled, all patterns must be marked as dynamic, because we cannot check\r\n     * filepath directly (without read directory).\r\n     */\r\n    if (options.caseSensitiveMatch === false || pattern.includes(ESCAPE_SYMBOL)) {\r\n        return true;\r\n    }\r\n    if (COMMON_GLOB_SYMBOLS_RE.test(pattern) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) || REGEX_GROUP_SYMBOLS_RE.test(pattern)) {\r\n        return true;\r\n    }\r\n    if (options.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern)) {\r\n        return true;\r\n    }\r\n    if (options.braceExpansion !== false && hasBraceExpansion(pattern)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexports.isDynamicPattern = isDynamicPattern;\r\nfunction hasBraceExpansion(pattern) {\r\n    const openingBraceIndex = pattern.indexOf('{');\r\n    if (openingBraceIndex === -1) {\r\n        return false;\r\n    }\r\n    const closingBraceIndex = pattern.indexOf('}', openingBraceIndex + 1);\r\n    if (closingBraceIndex === -1) {\r\n        return false;\r\n    }\r\n    const braceContent = pattern.slice(openingBraceIndex, closingBraceIndex);\r\n    return BRACE_EXPANSION_SEPARATORS_RE.test(braceContent);\r\n}\r\nfunction convertToPositivePattern(pattern) {\r\n    return isNegativePattern(pattern) ? pattern.slice(1) : pattern;\r\n}\r\nexports.convertToPositivePattern = convertToPositivePattern;\r\nfunction convertToNegativePattern(pattern) {\r\n    return '!' + pattern;\r\n}\r\nexports.convertToNegativePattern = convertToNegativePattern;\r\nfunction isNegativePattern(pattern) {\r\n    return pattern.startsWith('!') && pattern[1] !== '(';\r\n}\r\nexports.isNegativePattern = isNegativePattern;\r\nfunction isPositivePattern(pattern) {\r\n    return !isNegativePattern(pattern);\r\n}\r\nexports.isPositivePattern = isPositivePattern;\r\nfunction getNegativePatterns(patterns) {\r\n    return patterns.filter(isNegativePattern);\r\n}\r\nexports.getNegativePatterns = getNegativePatterns;\r\nfunction getPositivePatterns(patterns) {\r\n    return patterns.filter(isPositivePattern);\r\n}\r\nexports.getPositivePatterns = getPositivePatterns;\r\n/**\r\n * Returns patterns that can be applied inside the current directory.\r\n *\r\n * @example\r\n * // ['./*', '*', 'a/*']\r\n * getPatternsInsideCurrentDirectory(['./*', '*', 'a/*', '../*', './../*'])\r\n */\r\nfunction getPatternsInsideCurrentDirectory(patterns) {\r\n    return patterns.filter((pattern) => !isPatternRelatedToParentDirectory(pattern));\r\n}\r\nexports.getPatternsInsideCurrentDirectory = getPatternsInsideCurrentDirectory;\r\n/**\r\n * Returns patterns to be expanded relative to (outside) the current directory.\r\n *\r\n * @example\r\n * // ['../*', './../*']\r\n * getPatternsInsideCurrentDirectory(['./*', '*', 'a/*', '../*', './../*'])\r\n */\r\nfunction getPatternsOutsideCurrentDirectory(patterns) {\r\n    return patterns.filter(isPatternRelatedToParentDirectory);\r\n}\r\nexports.getPatternsOutsideCurrentDirectory = getPatternsOutsideCurrentDirectory;\r\nfunction isPatternRelatedToParentDirectory(pattern) {\r\n    return pattern.startsWith('..') || pattern.startsWith('./..');\r\n}\r\nexports.isPatternRelatedToParentDirectory = isPatternRelatedToParentDirectory;\r\nfunction getBaseDirectory(pattern) {\r\n    return globParent(pattern, { flipBackslashes: false });\r\n}\r\nexports.getBaseDirectory = getBaseDirectory;\r\nfunction hasGlobStar(pattern) {\r\n    return pattern.includes(GLOBSTAR);\r\n}\r\nexports.hasGlobStar = hasGlobStar;\r\nfunction endsWithSlashGlobStar(pattern) {\r\n    return pattern.endsWith('/' + GLOBSTAR);\r\n}\r\nexports.endsWithSlashGlobStar = endsWithSlashGlobStar;\r\nfunction isAffectDepthOfReadingPattern(pattern) {\r\n    const basename = path.basename(pattern);\r\n    return endsWithSlashGlobStar(pattern) || isStaticPattern(basename);\r\n}\r\nexports.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;\r\nfunction expandPatternsWithBraceExpansion(patterns) {\r\n    return patterns.reduce((collection, pattern) => {\r\n        return collection.concat(expandBraceExpansion(pattern));\r\n    }, []);\r\n}\r\nexports.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;\r\nfunction expandBraceExpansion(pattern) {\r\n    return micromatch.braces(pattern, {\r\n        expand: true,\r\n        nodupes: true\r\n    });\r\n}\r\nexports.expandBraceExpansion = expandBraceExpansion;\r\nfunction getPatternParts(pattern, options) {\r\n    let { parts } = micromatch.scan(pattern, Object.assign(Object.assign({}, options), { parts: true }));\r\n    /**\r\n     * The scan method returns an empty array in some cases.\r\n     * See micromatch/picomatch#58 for more details.\r\n     */\r\n    if (parts.length === 0) {\r\n        parts = [pattern];\r\n    }\r\n    /**\r\n     * The scan method does not return an empty part for the pattern with a forward slash.\r\n     * This is another part of micromatch/picomatch#58.\r\n     */\r\n    if (parts[0].startsWith('/')) {\r\n        parts[0] = parts[0].slice(1);\r\n        parts.unshift('');\r\n    }\r\n    return parts;\r\n}\r\nexports.getPatternParts = getPatternParts;\r\nfunction makeRe(pattern, options) {\r\n    return micromatch.makeRe(pattern, options);\r\n}\r\nexports.makeRe = makeRe;\r\nfunction convertPatternsToRe(patterns, options) {\r\n    return patterns.map((pattern) => makeRe(pattern, options));\r\n}\r\nexports.convertPatternsToRe = convertPatternsToRe;\r\nfunction matchAny(entry, patternsRe) {\r\n    return patternsRe.some((patternRe) => patternRe.test(entry));\r\n}\r\nexports.matchAny = matchAny;\r\n", "'use strict'\n/*\n * merge2\n * https://github.com/teambition/merge2\n *\n * Copyright (c) 2014-2020 Teambition\n * Licensed under the MIT license.\n */\nconst Stream = require('stream')\nconst PassThrough = Stream.PassThrough\nconst slice = Array.prototype.slice\n\nmodule.exports = merge2\n\nfunction merge2 () {\n  const streamsQueue = []\n  const args = slice.call(arguments)\n  let merging = false\n  let options = args[args.length - 1]\n\n  if (options && !Array.isArray(options) && options.pipe == null) {\n    args.pop()\n  } else {\n    options = {}\n  }\n\n  const doEnd = options.end !== false\n  const doPipeError = options.pipeError === true\n  if (options.objectMode == null) {\n    options.objectMode = true\n  }\n  if (options.highWaterMark == null) {\n    options.highWaterMark = 64 * 1024\n  }\n  const mergedStream = PassThrough(options)\n\n  function addStream () {\n    for (let i = 0, len = arguments.length; i < len; i++) {\n      streamsQueue.push(pauseStreams(arguments[i], options))\n    }\n    mergeStream()\n    return this\n  }\n\n  function mergeStream () {\n    if (merging) {\n      return\n    }\n    merging = true\n\n    let streams = streamsQueue.shift()\n    if (!streams) {\n      process.nextTick(endStream)\n      return\n    }\n    if (!Array.isArray(streams)) {\n      streams = [streams]\n    }\n\n    let pipesCount = streams.length + 1\n\n    function next () {\n      if (--pipesCount > 0) {\n        return\n      }\n      merging = false\n      mergeStream()\n    }\n\n    function pipe (stream) {\n      function onend () {\n        stream.removeListener('merge2UnpipeEnd', onend)\n        stream.removeListener('end', onend)\n        if (doPipeError) {\n          stream.removeListener('error', onerror)\n        }\n        next()\n      }\n      function onerror (err) {\n        mergedStream.emit('error', err)\n      }\n      // skip ended stream\n      if (stream._readableState.endEmitted) {\n        return next()\n      }\n\n      stream.on('merge2UnpipeEnd', onend)\n      stream.on('end', onend)\n\n      if (doPipeError) {\n        stream.on('error', onerror)\n      }\n\n      stream.pipe(mergedStream, { end: false })\n      // compatible for old stream\n      stream.resume()\n    }\n\n    for (let i = 0; i < streams.length; i++) {\n      pipe(streams[i])\n    }\n\n    next()\n  }\n\n  function endStream () {\n    merging = false\n    // emit 'queueDrain' when all streams merged.\n    mergedStream.emit('queueDrain')\n    if (doEnd) {\n      mergedStream.end()\n    }\n  }\n\n  mergedStream.setMaxListeners(0)\n  mergedStream.add = addStream\n  mergedStream.on('unpipe', function (stream) {\n    stream.emit('merge2UnpipeEnd')\n  })\n\n  if (args.length) {\n    addStream.apply(null, args)\n  }\n  return mergedStream\n}\n\n// check and pause streams for pipe.\nfunction pauseStreams (streams, options) {\n  if (!Array.isArray(streams)) {\n    // Backwards-compat with old-style streams\n    if (!streams._readableState && streams.pipe) {\n      streams = streams.pipe(PassThrough(options))\n    }\n    if (!streams._readableState || !streams.pause || !streams.pipe) {\n      throw new Error('Only readable stream can be merged.')\n    }\n    streams.pause()\n  } else {\n    for (let i = 0, len = streams.length; i < len; i++) {\n      streams[i] = pauseStreams(streams[i], options)\n    }\n  }\n  return streams\n}\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.merge = void 0;\r\nconst merge2 = require(\"merge2\");\r\nfunction merge(streams) {\r\n    const mergedStream = merge2(streams);\r\n    streams.forEach((stream) => {\r\n        stream.once('error', (error) => mergedStream.emit('error', error));\r\n    });\r\n    mergedStream.once('close', () => propagateCloseEventToSources(streams));\r\n    mergedStream.once('end', () => propagateCloseEventToSources(streams));\r\n    return mergedStream;\r\n}\r\nexports.merge = merge;\r\nfunction propagateCloseEventToSources(streams) {\r\n    streams.forEach((stream) => stream.emit('close'));\r\n}\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.isEmpty = exports.isString = void 0;\r\nfunction isString(input) {\r\n    return typeof input === 'string';\r\n}\r\nexports.isString = isString;\r\nfunction isEmpty(input) {\r\n    return input === '';\r\n}\r\nexports.isEmpty = isEmpty;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.string = exports.stream = exports.pattern = exports.path = exports.fs = exports.errno = exports.array = void 0;\r\nconst array = require(\"./array\");\r\nexports.array = array;\r\nconst errno = require(\"./errno\");\r\nexports.errno = errno;\r\nconst fs = require(\"./fs\");\r\nexports.fs = fs;\r\nconst path = require(\"./path\");\r\nexports.path = path;\r\nconst pattern = require(\"./pattern\");\r\nexports.pattern = pattern;\r\nconst stream = require(\"./stream\");\r\nexports.stream = stream;\r\nconst string = require(\"./string\");\r\nexports.string = string;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.convertPatternGroupToTask = exports.convertPatternGroupsToTasks = exports.groupPatternsByBaseDirectory = exports.getNegativePatternsAsPositive = exports.getPositivePatterns = exports.convertPatternsToTasks = exports.generate = void 0;\r\nconst utils = require(\"../utils\");\r\nfunction generate(patterns, settings) {\r\n    const positivePatterns = getPositivePatterns(patterns);\r\n    const negativePatterns = getNegativePatternsAsPositive(patterns, settings.ignore);\r\n    const staticPatterns = positivePatterns.filter((pattern) => utils.pattern.isStaticPattern(pattern, settings));\r\n    const dynamicPatterns = positivePatterns.filter((pattern) => utils.pattern.isDynamicPattern(pattern, settings));\r\n    const staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns, /* dynamic */ false);\r\n    const dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns, /* dynamic */ true);\r\n    return staticTasks.concat(dynamicTasks);\r\n}\r\nexports.generate = generate;\r\n/**\r\n * Returns tasks grouped by basic pattern directories.\r\n *\r\n * Patterns that can be found inside (`./`) and outside (`../`) the current directory are handled separately.\r\n * This is necessary because directory traversal starts at the base directory and goes deeper.\r\n */\r\nfunction convertPatternsToTasks(positive, negative, dynamic) {\r\n    const tasks = [];\r\n    const patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);\r\n    const patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);\r\n    const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);\r\n    const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);\r\n    tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));\r\n    /*\r\n     * For the sake of reducing future accesses to the file system, we merge all tasks within the current directory\r\n     * into a global task, if at least one pattern refers to the root (`.`). In this case, the global task covers the rest.\r\n     */\r\n    if ('.' in insideCurrentDirectoryGroup) {\r\n        tasks.push(convertPatternGroupToTask('.', patternsInsideCurrentDirectory, negative, dynamic));\r\n    }\r\n    else {\r\n        tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));\r\n    }\r\n    return tasks;\r\n}\r\nexports.convertPatternsToTasks = convertPatternsToTasks;\r\nfunction getPositivePatterns(patterns) {\r\n    return utils.pattern.getPositivePatterns(patterns);\r\n}\r\nexports.getPositivePatterns = getPositivePatterns;\r\nfunction getNegativePatternsAsPositive(patterns, ignore) {\r\n    const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);\r\n    const positive = negative.map(utils.pattern.convertToPositivePattern);\r\n    return positive;\r\n}\r\nexports.getNegativePatternsAsPositive = getNegativePatternsAsPositive;\r\nfunction groupPatternsByBaseDirectory(patterns) {\r\n    const group = {};\r\n    return patterns.reduce((collection, pattern) => {\r\n        const base = utils.pattern.getBaseDirectory(pattern);\r\n        if (base in collection) {\r\n            collection[base].push(pattern);\r\n        }\r\n        else {\r\n            collection[base] = [pattern];\r\n        }\r\n        return collection;\r\n    }, group);\r\n}\r\nexports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;\r\nfunction convertPatternGroupsToTasks(positive, negative, dynamic) {\r\n    return Object.keys(positive).map((base) => {\r\n        return convertPatternGroupToTask(base, positive[base], negative, dynamic);\r\n    });\r\n}\r\nexports.convertPatternGroupsToTasks = convertPatternGroupsToTasks;\r\nfunction convertPatternGroupToTask(base, positive, negative, dynamic) {\r\n    return {\r\n        dynamic,\r\n        positive,\r\n        negative,\r\n        base,\r\n        patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))\r\n    };\r\n}\r\nexports.convertPatternGroupToTask = convertPatternGroupToTask;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.removeDuplicateSlashes = exports.transform = void 0;\r\n/**\r\n * Matches a sequence of two or more consecutive slashes, excluding the first two slashes at the beginning of the string.\r\n * The latter is due to the presence of the device path at the beginning of the UNC path.\r\n * @todo rewrite to negative lookbehind with the next major release.\r\n */\r\nconst DOUBLE_SLASH_RE = /(?!^)\\/{2,}/g;\r\nfunction transform(patterns) {\r\n    return patterns.map((pattern) => removeDuplicateSlashes(pattern));\r\n}\r\nexports.transform = transform;\r\n/**\r\n * This package only works with forward slashes as a path separator.\r\n * Because of this, we cannot use the standard `path.normalize` method, because on Windows platform it will use of backslashes.\r\n */\r\nfunction removeDuplicateSlashes(pattern) {\r\n    return pattern.replace(DOUBLE_SLASH_RE, '/');\r\n}\r\nexports.removeDuplicateSlashes = removeDuplicateSlashes;\r\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.read = void 0;\nfunction read(path, settings, callback) {\n    settings.fs.lstat(path, (lstatError, lstat) => {\n        if (lstatError !== null) {\n            callFailureCallback(callback, lstatError);\n            return;\n        }\n        if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {\n            callSuccessCallback(callback, lstat);\n            return;\n        }\n        settings.fs.stat(path, (statError, stat) => {\n            if (statError !== null) {\n                if (settings.throwErrorOnBrokenSymbolicLink) {\n                    callFailureCallback(callback, statError);\n                    return;\n                }\n                callSuccessCallback(callback, lstat);\n                return;\n            }\n            if (settings.markSymbolicLink) {\n                stat.isSymbolicLink = () => true;\n            }\n            callSuccessCallback(callback, stat);\n        });\n    });\n}\nexports.read = read;\nfunction callFailureCallback(callback, error) {\n    callback(error);\n}\nfunction callSuccessCallback(callback, result) {\n    callback(null, result);\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.read = void 0;\nfunction read(path, settings) {\n    const lstat = settings.fs.lstatSync(path);\n    if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {\n        return lstat;\n    }\n    try {\n        const stat = settings.fs.statSync(path);\n        if (settings.markSymbolicLink) {\n            stat.isSymbolicLink = () => true;\n        }\n        return stat;\n    }\n    catch (error) {\n        if (!settings.throwErrorOnBrokenSymbolicLink) {\n            return lstat;\n        }\n        throw error;\n    }\n}\nexports.read = read;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;\nconst fs = require(\"fs\");\nexports.FILE_SYSTEM_ADAPTER = {\n    lstat: fs.lstat,\n    stat: fs.stat,\n    lstatSync: fs.lstatSync,\n    statSync: fs.statSync\n};\nfunction createFileSystemAdapter(fsMethods) {\n    if (fsMethods === undefined) {\n        return exports.FILE_SYSTEM_ADAPTER;\n    }\n    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);\n}\nexports.createFileSystemAdapter = createFileSystemAdapter;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"./adapters/fs\");\nclass Settings {\n    constructor(_options = {}) {\n        this._options = _options;\n        this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);\n        this.fs = fs.createFileSystemAdapter(this._options.fs);\n        this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);\n        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);\n    }\n    _getValue(option, value) {\n        return option !== null && option !== void 0 ? option : value;\n    }\n}\nexports.default = Settings;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.statSync = exports.stat = exports.Settings = void 0;\nconst async = require(\"./providers/async\");\nconst sync = require(\"./providers/sync\");\nconst settings_1 = require(\"./settings\");\nexports.Settings = settings_1.default;\nfunction stat(path, optionsOrSettingsOrCallback, callback) {\n    if (typeof optionsOrSettingsOrCallback === 'function') {\n        async.read(path, getSettings(), optionsOrSettingsOrCallback);\n        return;\n    }\n    async.read(path, getSettings(optionsOrSettingsOrCallback), callback);\n}\nexports.stat = stat;\nfunction statSync(path, optionsOrSettings) {\n    const settings = getSettings(optionsOrSettings);\n    return sync.read(path, settings);\n}\nexports.statSync = statSync;\nfunction getSettings(settingsOrOptions = {}) {\n    if (settingsOrOptions instanceof settings_1.default) {\n        return settingsOrOptions;\n    }\n    return new settings_1.default(settingsOrOptions);\n}\n", "/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n", "/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nmodule.exports = runParallel\n\nconst queueMicrotask = require('queue-microtask')\n\nfunction runParallel (tasks, cb) {\n  let results, pending, keys\n  let isSync = true\n\n  if (Array.isArray(tasks)) {\n    results = []\n    pending = tasks.length\n  } else {\n    keys = Object.keys(tasks)\n    results = {}\n    pending = keys.length\n  }\n\n  function done (err) {\n    function end () {\n      if (cb) cb(err, results)\n      cb = null\n    }\n    if (isSync) queueMicrotask(end)\n    else end()\n  }\n\n  function each (i, err, result) {\n    results[i] = result\n    if (--pending === 0 || err) {\n      done(err)\n    }\n  }\n\n  if (!pending) {\n    // empty\n    done(null)\n  } else if (keys) {\n    // object\n    keys.forEach(function (key) {\n      tasks[key](function (err, result) { each(key, err, result) })\n    })\n  } else {\n    // array\n    tasks.forEach(function (task, i) {\n      task(function (err, result) { each(i, err, result) })\n    })\n  }\n\n  isSync = false\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;\nconst NODE_PROCESS_VERSION_PARTS = process.versions.node.split('.');\nif (NODE_PROCESS_VERSION_PARTS[0] === undefined || NODE_PROCESS_VERSION_PARTS[1] === undefined) {\n    throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);\n}\nconst MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);\nconst MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);\nconst SUPPORTED_MAJOR_VERSION = 10;\nconst SUPPORTED_MINOR_VERSION = 10;\nconst IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;\nconst IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;\n/**\n * IS `true` for Node.js 10.10 and greater.\n */\nexports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDirentFromStats = void 0;\nclass DirentFromStats {\n    constructor(name, stats) {\n        this.name = name;\n        this.isBlockDevice = stats.isBlockDevice.bind(stats);\n        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);\n        this.isDirectory = stats.isDirectory.bind(stats);\n        this.isFIFO = stats.isFIFO.bind(stats);\n        this.isFile = stats.isFile.bind(stats);\n        this.isSocket = stats.isSocket.bind(stats);\n        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);\n    }\n}\nfunction createDirentFromStats(name, stats) {\n    return new DirentFromStats(name, stats);\n}\nexports.createDirentFromStats = createDirentFromStats;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fs = void 0;\nconst fs = require(\"./fs\");\nexports.fs = fs;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.joinPathSegments = void 0;\nfunction joinPathSegments(a, b, separator) {\n    /**\n     * The correct handling of cases when the first segment is a root (`/`, `C:/`) or UNC path (`//?/C:/`).\n     */\n    if (a.endsWith(separator)) {\n        return a + b;\n    }\n    return a + separator + b;\n}\nexports.joinPathSegments = joinPathSegments;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst rpl = require(\"run-parallel\");\nconst constants_1 = require(\"../constants\");\nconst utils = require(\"../utils\");\nconst common = require(\"./common\");\nfunction read(directory, settings, callback) {\n    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n        readdirWithFileTypes(directory, settings, callback);\n        return;\n    }\n    readdir(directory, settings, callback);\n}\nexports.read = read;\nfunction readdirWithFileTypes(directory, settings, callback) {\n    settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {\n        if (readdirError !== null) {\n            callFailureCallback(callback, readdirError);\n            return;\n        }\n        const entries = dirents.map((dirent) => ({\n            dirent,\n            name: dirent.name,\n            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\n        }));\n        if (!settings.followSymbolicLinks) {\n            callSuccessCallback(callback, entries);\n            return;\n        }\n        const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));\n        rpl(tasks, (rplError, rplEntries) => {\n            if (rplError !== null) {\n                callFailureCallback(callback, rplError);\n                return;\n            }\n            callSuccessCallback(callback, rplEntries);\n        });\n    });\n}\nexports.readdirWithFileTypes = readdirWithFileTypes;\nfunction makeRplTaskEntry(entry, settings) {\n    return (done) => {\n        if (!entry.dirent.isSymbolicLink()) {\n            done(null, entry);\n            return;\n        }\n        settings.fs.stat(entry.path, (statError, stats) => {\n            if (statError !== null) {\n                if (settings.throwErrorOnBrokenSymbolicLink) {\n                    done(statError);\n                    return;\n                }\n                done(null, entry);\n                return;\n            }\n            entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n            done(null, entry);\n        });\n    };\n}\nfunction readdir(directory, settings, callback) {\n    settings.fs.readdir(directory, (readdirError, names) => {\n        if (readdirError !== null) {\n            callFailureCallback(callback, readdirError);\n            return;\n        }\n        const tasks = names.map((name) => {\n            const path = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\n            return (done) => {\n                fsStat.stat(path, settings.fsStatSettings, (error, stats) => {\n                    if (error !== null) {\n                        done(error);\n                        return;\n                    }\n                    const entry = {\n                        name,\n                        path,\n                        dirent: utils.fs.createDirentFromStats(name, stats)\n                    };\n                    if (settings.stats) {\n                        entry.stats = stats;\n                    }\n                    done(null, entry);\n                });\n            };\n        });\n        rpl(tasks, (rplError, entries) => {\n            if (rplError !== null) {\n                callFailureCallback(callback, rplError);\n                return;\n            }\n            callSuccessCallback(callback, entries);\n        });\n    });\n}\nexports.readdir = readdir;\nfunction callFailureCallback(callback, error) {\n    callback(error);\n}\nfunction callSuccessCallback(callback, result) {\n    callback(null, result);\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst constants_1 = require(\"../constants\");\nconst utils = require(\"../utils\");\nconst common = require(\"./common\");\nfunction read(directory, settings) {\n    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n        return readdirWithFileTypes(directory, settings);\n    }\n    return readdir(directory, settings);\n}\nexports.read = read;\nfunction readdirWithFileTypes(directory, settings) {\n    const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });\n    return dirents.map((dirent) => {\n        const entry = {\n            dirent,\n            name: dirent.name,\n            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\n        };\n        if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {\n            try {\n                const stats = settings.fs.statSync(entry.path);\n                entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n            }\n            catch (error) {\n                if (settings.throwErrorOnBrokenSymbolicLink) {\n                    throw error;\n                }\n            }\n        }\n        return entry;\n    });\n}\nexports.readdirWithFileTypes = readdirWithFileTypes;\nfunction readdir(directory, settings) {\n    const names = settings.fs.readdirSync(directory);\n    return names.map((name) => {\n        const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\n        const stats = fsStat.statSync(entryPath, settings.fsStatSettings);\n        const entry = {\n            name,\n            path: entryPath,\n            dirent: utils.fs.createDirentFromStats(name, stats)\n        };\n        if (settings.stats) {\n            entry.stats = stats;\n        }\n        return entry;\n    });\n}\nexports.readdir = readdir;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;\nconst fs = require(\"fs\");\nexports.FILE_SYSTEM_ADAPTER = {\n    lstat: fs.lstat,\n    stat: fs.stat,\n    lstatSync: fs.lstatSync,\n    statSync: fs.statSync,\n    readdir: fs.readdir,\n    readdirSync: fs.readdirSync\n};\nfunction createFileSystemAdapter(fsMethods) {\n    if (fsMethods === undefined) {\n        return exports.FILE_SYSTEM_ADAPTER;\n    }\n    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);\n}\nexports.createFileSystemAdapter = createFileSystemAdapter;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = require(\"path\");\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst fs = require(\"./adapters/fs\");\nclass Settings {\n    constructor(_options = {}) {\n        this._options = _options;\n        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);\n        this.fs = fs.createFileSystemAdapter(this._options.fs);\n        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);\n        this.stats = this._getValue(this._options.stats, false);\n        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);\n        this.fsStatSettings = new fsStat.Settings({\n            followSymbolicLink: this.followSymbolicLinks,\n            fs: this.fs,\n            throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink\n        });\n    }\n    _getValue(option, value) {\n        return option !== null && option !== void 0 ? option : value;\n    }\n}\nexports.default = Settings;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Settings = exports.scandirSync = exports.scandir = void 0;\nconst async = require(\"./providers/async\");\nconst sync = require(\"./providers/sync\");\nconst settings_1 = require(\"./settings\");\nexports.Settings = settings_1.default;\nfunction scandir(path, optionsOrSettingsOrCallback, callback) {\n    if (typeof optionsOrSettingsOrCallback === 'function') {\n        async.read(path, getSettings(), optionsOrSettingsOrCallback);\n        return;\n    }\n    async.read(path, getSettings(optionsOrSettingsOrCallback), callback);\n}\nexports.scandir = scandir;\nfunction scandirSync(path, optionsOrSettings) {\n    const settings = getSettings(optionsOrSettings);\n    return sync.read(path, settings);\n}\nexports.scandirSync = scandirSync;\nfunction getSettings(settingsOrOptions = {}) {\n    if (settingsOrOptions instanceof settings_1.default) {\n        return settingsOrOptions;\n    }\n    return new settings_1.default(settingsOrOptions);\n}\n", "'use strict'\n\nfunction reusify (Constructor) {\n  var head = new Constructor()\n  var tail = head\n\n  function get () {\n    var current = head\n\n    if (current.next) {\n      head = current.next\n    } else {\n      head = new Constructor()\n      tail = head\n    }\n\n    current.next = null\n\n    return current\n  }\n\n  function release (obj) {\n    tail.next = obj\n    tail = obj\n  }\n\n  return {\n    get: get,\n    release: release\n  }\n}\n\nmodule.exports = reusify\n", "'use strict'\n\n/* eslint-disable no-var */\n\nvar reusify = require('reusify')\n\nfunction fastqueue (context, worker, concurrency) {\n  if (typeof context === 'function') {\n    concurrency = worker\n    worker = context\n    context = null\n  }\n\n  if (concurrency < 1) {\n    throw new Error('fastqueue concurrency must be greater than 1')\n  }\n\n  var cache = reusify(Task)\n  var queueHead = null\n  var queueTail = null\n  var _running = 0\n  var errorHandler = null\n\n  var self = {\n    push: push,\n    drain: noop,\n    saturated: noop,\n    pause: pause,\n    paused: false,\n    concurrency: concurrency,\n    running: running,\n    resume: resume,\n    idle: idle,\n    length: length,\n    getQueue: getQueue,\n    unshift: unshift,\n    empty: noop,\n    kill: kill,\n    killAndDrain: killAndDrain,\n    error: error\n  }\n\n  return self\n\n  function running () {\n    return _running\n  }\n\n  function pause () {\n    self.paused = true\n  }\n\n  function length () {\n    var current = queueHead\n    var counter = 0\n\n    while (current) {\n      current = current.next\n      counter++\n    }\n\n    return counter\n  }\n\n  function getQueue () {\n    var current = queueHead\n    var tasks = []\n\n    while (current) {\n      tasks.push(current.value)\n      current = current.next\n    }\n\n    return tasks\n  }\n\n  function resume () {\n    if (!self.paused) return\n    self.paused = false\n    for (var i = 0; i < self.concurrency; i++) {\n      _running++\n      release()\n    }\n  }\n\n  function idle () {\n    return _running === 0 && self.length() === 0\n  }\n\n  function push (value, done) {\n    var current = cache.get()\n\n    current.context = context\n    current.release = release\n    current.value = value\n    current.callback = done || noop\n    current.errorHandler = errorHandler\n\n    if (_running === self.concurrency || self.paused) {\n      if (queueTail) {\n        queueTail.next = current\n        queueTail = current\n      } else {\n        queueHead = current\n        queueTail = current\n        self.saturated()\n      }\n    } else {\n      _running++\n      worker.call(context, current.value, current.worked)\n    }\n  }\n\n  function unshift (value, done) {\n    var current = cache.get()\n\n    current.context = context\n    current.release = release\n    current.value = value\n    current.callback = done || noop\n\n    if (_running === self.concurrency || self.paused) {\n      if (queueHead) {\n        current.next = queueHead\n        queueHead = current\n      } else {\n        queueHead = current\n        queueTail = current\n        self.saturated()\n      }\n    } else {\n      _running++\n      worker.call(context, current.value, current.worked)\n    }\n  }\n\n  function release (holder) {\n    if (holder) {\n      cache.release(holder)\n    }\n    var next = queueHead\n    if (next) {\n      if (!self.paused) {\n        if (queueTail === queueHead) {\n          queueTail = null\n        }\n        queueHead = next.next\n        next.next = null\n        worker.call(context, next.value, next.worked)\n        if (queueTail === null) {\n          self.empty()\n        }\n      } else {\n        _running--\n      }\n    } else if (--_running === 0) {\n      self.drain()\n    }\n  }\n\n  function kill () {\n    queueHead = null\n    queueTail = null\n    self.drain = noop\n  }\n\n  function killAndDrain () {\n    queueHead = null\n    queueTail = null\n    self.drain()\n    self.drain = noop\n  }\n\n  function error (handler) {\n    errorHandler = handler\n  }\n}\n\nfunction noop () {}\n\nfunction Task () {\n  this.value = null\n  this.callback = noop\n  this.next = null\n  this.release = noop\n  this.context = null\n  this.errorHandler = null\n\n  var self = this\n\n  this.worked = function worked (err, result) {\n    var callback = self.callback\n    var errorHandler = self.errorHandler\n    var val = self.value\n    self.value = null\n    self.callback = noop\n    if (self.errorHandler) {\n      errorHandler(err, val)\n    }\n    callback.call(self.context, err, result)\n    self.release(self)\n  }\n}\n\nfunction queueAsPromised (context, worker, concurrency) {\n  if (typeof context === 'function') {\n    concurrency = worker\n    worker = context\n    context = null\n  }\n\n  function asyncWrapper (arg, cb) {\n    worker.call(this, arg)\n      .then(function (res) {\n        cb(null, res)\n      }, cb)\n  }\n\n  var queue = fastqueue(context, asyncWrapper, concurrency)\n\n  var pushCb = queue.push\n  var unshiftCb = queue.unshift\n\n  queue.push = push\n  queue.unshift = unshift\n  queue.drained = drained\n\n  return queue\n\n  function push (value) {\n    var p = new Promise(function (resolve, reject) {\n      pushCb(value, function (err, result) {\n        if (err) {\n          reject(err)\n          return\n        }\n        resolve(result)\n      })\n    })\n\n    // Let's fork the promise chain to\n    // make the error bubble up to the user but\n    // not lead to a unhandledRejection\n    p.catch(noop)\n\n    return p\n  }\n\n  function unshift (value) {\n    var p = new Promise(function (resolve, reject) {\n      unshiftCb(value, function (err, result) {\n        if (err) {\n          reject(err)\n          return\n        }\n        resolve(result)\n      })\n    })\n\n    // Let's fork the promise chain to\n    // make the error bubble up to the user but\n    // not lead to a unhandledRejection\n    p.catch(noop)\n\n    return p\n  }\n\n  function drained () {\n    var previousDrain = queue.drain\n\n    var p = new Promise(function (resolve) {\n      queue.drain = function () {\n        previousDrain()\n        resolve()\n      }\n    })\n\n    return p\n  }\n}\n\nmodule.exports = fastqueue\nmodule.exports.promise = queueAsPromised\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.joinPathSegments = exports.replacePathSegmentSeparator = exports.isAppliedFilter = exports.isFatalError = void 0;\nfunction isFatalError(settings, error) {\n    if (settings.errorFilter === null) {\n        return true;\n    }\n    return !settings.errorFilter(error);\n}\nexports.isFatalError = isFatalError;\nfunction isAppliedFilter(filter, value) {\n    return filter === null || filter(value);\n}\nexports.isAppliedFilter = isAppliedFilter;\nfunction replacePathSegmentSeparator(filepath, separator) {\n    return filepath.split(/[/\\\\]/).join(separator);\n}\nexports.replacePathSegmentSeparator = replacePathSegmentSeparator;\nfunction joinPathSegments(a, b, separator) {\n    if (a === '') {\n        return b;\n    }\n    /**\n     * The correct handling of cases when the first segment is a root (`/`, `C:/`) or UNC path (`//?/C:/`).\n     */\n    if (a.endsWith(separator)) {\n        return a + b;\n    }\n    return a + separator + b;\n}\nexports.joinPathSegments = joinPathSegments;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common = require(\"./common\");\nclass Reader {\n    constructor(_root, _settings) {\n        this._root = _root;\n        this._settings = _settings;\n        this._root = common.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);\n    }\n}\nexports.default = Reader;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nconst fsScandir = require(\"@nodelib/fs.scandir\");\nconst fastq = require(\"fastq\");\nconst common = require(\"./common\");\nconst reader_1 = require(\"./reader\");\nclass AsyncReader extends reader_1.default {\n    constructor(_root, _settings) {\n        super(_root, _settings);\n        this._settings = _settings;\n        this._scandir = fsScandir.scandir;\n        this._emitter = new events_1.EventEmitter();\n        this._queue = fastq(this._worker.bind(this), this._settings.concurrency);\n        this._isFatalError = false;\n        this._isDestroyed = false;\n        this._queue.drain = () => {\n            if (!this._isFatalError) {\n                this._emitter.emit('end');\n            }\n        };\n    }\n    read() {\n        this._isFatalError = false;\n        this._isDestroyed = false;\n        setImmediate(() => {\n            this._pushToQueue(this._root, this._settings.basePath);\n        });\n        return this._emitter;\n    }\n    get isDestroyed() {\n        return this._isDestroyed;\n    }\n    destroy() {\n        if (this._isDestroyed) {\n            throw new Error('The reader is already destroyed');\n        }\n        this._isDestroyed = true;\n        this._queue.killAndDrain();\n    }\n    onEntry(callback) {\n        this._emitter.on('entry', callback);\n    }\n    onError(callback) {\n        this._emitter.once('error', callback);\n    }\n    onEnd(callback) {\n        this._emitter.once('end', callback);\n    }\n    _pushToQueue(directory, base) {\n        const queueItem = { directory, base };\n        this._queue.push(queueItem, (error) => {\n            if (error !== null) {\n                this._handleError(error);\n            }\n        });\n    }\n    _worker(item, done) {\n        this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {\n            if (error !== null) {\n                done(error, undefined);\n                return;\n            }\n            for (const entry of entries) {\n                this._handleEntry(entry, item.base);\n            }\n            done(null, undefined);\n        });\n    }\n    _handleError(error) {\n        if (this._isDestroyed || !common.isFatalError(this._settings, error)) {\n            return;\n        }\n        this._isFatalError = true;\n        this._isDestroyed = true;\n        this._emitter.emit('error', error);\n    }\n    _handleEntry(entry, base) {\n        if (this._isDestroyed || this._isFatalError) {\n            return;\n        }\n        const fullpath = entry.path;\n        if (base !== undefined) {\n            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);\n        }\n        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {\n            this._emitEntry(entry);\n        }\n        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {\n            this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);\n        }\n    }\n    _emitEntry(entry) {\n        this._emitter.emit('entry', entry);\n    }\n}\nexports.default = AsyncReader;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst async_1 = require(\"../readers/async\");\nclass AsyncProvider {\n    constructor(_root, _settings) {\n        this._root = _root;\n        this._settings = _settings;\n        this._reader = new async_1.default(this._root, this._settings);\n        this._storage = [];\n    }\n    read(callback) {\n        this._reader.onError((error) => {\n            callFailureCallback(callback, error);\n        });\n        this._reader.onEntry((entry) => {\n            this._storage.push(entry);\n        });\n        this._reader.onEnd(() => {\n            callSuccessCallback(callback, this._storage);\n        });\n        this._reader.read();\n    }\n}\nexports.default = AsyncProvider;\nfunction callFailureCallback(callback, error) {\n    callback(error);\n}\nfunction callSuccessCallback(callback, entries) {\n    callback(null, entries);\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stream_1 = require(\"stream\");\nconst async_1 = require(\"../readers/async\");\nclass StreamProvider {\n    constructor(_root, _settings) {\n        this._root = _root;\n        this._settings = _settings;\n        this._reader = new async_1.default(this._root, this._settings);\n        this._stream = new stream_1.Readable({\n            objectMode: true,\n            read: () => { },\n            destroy: () => {\n                if (!this._reader.isDestroyed) {\n                    this._reader.destroy();\n                }\n            }\n        });\n    }\n    read() {\n        this._reader.onError((error) => {\n            this._stream.emit('error', error);\n        });\n        this._reader.onEntry((entry) => {\n            this._stream.push(entry);\n        });\n        this._reader.onEnd(() => {\n            this._stream.push(null);\n        });\n        this._reader.read();\n        return this._stream;\n    }\n}\nexports.default = StreamProvider;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fsScandir = require(\"@nodelib/fs.scandir\");\nconst common = require(\"./common\");\nconst reader_1 = require(\"./reader\");\nclass SyncReader extends reader_1.default {\n    constructor() {\n        super(...arguments);\n        this._scandir = fsScandir.scandirSync;\n        this._storage = [];\n        this._queue = new Set();\n    }\n    read() {\n        this._pushToQueue(this._root, this._settings.basePath);\n        this._handleQueue();\n        return this._storage;\n    }\n    _pushToQueue(directory, base) {\n        this._queue.add({ directory, base });\n    }\n    _handleQueue() {\n        for (const item of this._queue.values()) {\n            this._handleDirectory(item.directory, item.base);\n        }\n    }\n    _handleDirectory(directory, base) {\n        try {\n            const entries = this._scandir(directory, this._settings.fsScandirSettings);\n            for (const entry of entries) {\n                this._handleEntry(entry, base);\n            }\n        }\n        catch (error) {\n            this._handleError(error);\n        }\n    }\n    _handleError(error) {\n        if (!common.isFatalError(this._settings, error)) {\n            return;\n        }\n        throw error;\n    }\n    _handleEntry(entry, base) {\n        const fullpath = entry.path;\n        if (base !== undefined) {\n            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);\n        }\n        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {\n            this._pushToStorage(entry);\n        }\n        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {\n            this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);\n        }\n    }\n    _pushToStorage(entry) {\n        this._storage.push(entry);\n    }\n}\nexports.default = SyncReader;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst sync_1 = require(\"../readers/sync\");\nclass SyncProvider {\n    constructor(_root, _settings) {\n        this._root = _root;\n        this._settings = _settings;\n        this._reader = new sync_1.default(this._root, this._settings);\n    }\n    read() {\n        return this._reader.read();\n    }\n}\nexports.default = SyncProvider;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = require(\"path\");\nconst fsScandir = require(\"@nodelib/fs.scandir\");\nclass Settings {\n    constructor(_options = {}) {\n        this._options = _options;\n        this.basePath = this._getValue(this._options.basePath, undefined);\n        this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);\n        this.deepFilter = this._getValue(this._options.deepFilter, null);\n        this.entryFilter = this._getValue(this._options.entryFilter, null);\n        this.errorFilter = this._getValue(this._options.errorFilter, null);\n        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);\n        this.fsScandirSettings = new fsScandir.Settings({\n            followSymbolicLinks: this._options.followSymbolicLinks,\n            fs: this._options.fs,\n            pathSegmentSeparator: this._options.pathSegmentSeparator,\n            stats: this._options.stats,\n            throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink\n        });\n    }\n    _getValue(option, value) {\n        return option !== null && option !== void 0 ? option : value;\n    }\n}\nexports.default = Settings;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Settings = exports.walkStream = exports.walkSync = exports.walk = void 0;\nconst async_1 = require(\"./providers/async\");\nconst stream_1 = require(\"./providers/stream\");\nconst sync_1 = require(\"./providers/sync\");\nconst settings_1 = require(\"./settings\");\nexports.Settings = settings_1.default;\nfunction walk(directory, optionsOrSettingsOrCallback, callback) {\n    if (typeof optionsOrSettingsOrCallback === 'function') {\n        new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);\n        return;\n    }\n    new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);\n}\nexports.walk = walk;\nfunction walkSync(directory, optionsOrSettings) {\n    const settings = getSettings(optionsOrSettings);\n    const provider = new sync_1.default(directory, settings);\n    return provider.read();\n}\nexports.walkSync = walkSync;\nfunction walkStream(directory, optionsOrSettings) {\n    const settings = getSettings(optionsOrSettings);\n    const provider = new stream_1.default(directory, settings);\n    return provider.read();\n}\nexports.walkStream = walkStream;\nfunction getSettings(settingsOrOptions = {}) {\n    if (settingsOrOptions instanceof settings_1.default) {\n        return settingsOrOptions;\n    }\n    return new settings_1.default(settingsOrOptions);\n}\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst path = require(\"path\");\r\nconst fsStat = require(\"@nodelib/fs.stat\");\r\nconst utils = require(\"../utils\");\r\nclass Reader {\r\n    constructor(_settings) {\r\n        this._settings = _settings;\r\n        this._fsStatSettings = new fsStat.Settings({\r\n            followSymbolicLink: this._settings.followSymbolicLinks,\r\n            fs: this._settings.fs,\r\n            throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks\r\n        });\r\n    }\r\n    _getFullEntryPath(filepath) {\r\n        return path.resolve(this._settings.cwd, filepath);\r\n    }\r\n    _makeEntry(stats, pattern) {\r\n        const entry = {\r\n            name: pattern,\r\n            path: pattern,\r\n            dirent: utils.fs.createDirentFromStats(pattern, stats)\r\n        };\r\n        if (this._settings.stats) {\r\n            entry.stats = stats;\r\n        }\r\n        return entry;\r\n    }\r\n    _isFatalError(error) {\r\n        return !utils.errno.isEnoentCodeError(error) && !this._settings.suppressErrors;\r\n    }\r\n}\r\nexports.default = Reader;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst stream_1 = require(\"stream\");\r\nconst fsStat = require(\"@nodelib/fs.stat\");\r\nconst fsWalk = require(\"@nodelib/fs.walk\");\r\nconst reader_1 = require(\"./reader\");\r\nclass ReaderStream extends reader_1.default {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._walkStream = fsWalk.walkStream;\r\n        this._stat = fsStat.stat;\r\n    }\r\n    dynamic(root, options) {\r\n        return this._walkStream(root, options);\r\n    }\r\n    static(patterns, options) {\r\n        const filepaths = patterns.map(this._getFullEntryPath, this);\r\n        const stream = new stream_1.PassThrough({ objectMode: true });\r\n        stream._write = (index, _enc, done) => {\r\n            return this._getEntry(filepaths[index], patterns[index], options)\r\n                .then((entry) => {\r\n                if (entry !== null && options.entryFilter(entry)) {\r\n                    stream.push(entry);\r\n                }\r\n                if (index === filepaths.length - 1) {\r\n                    stream.end();\r\n                }\r\n                done();\r\n            })\r\n                .catch(done);\r\n        };\r\n        for (let i = 0; i < filepaths.length; i++) {\r\n            stream.write(i);\r\n        }\r\n        return stream;\r\n    }\r\n    _getEntry(filepath, pattern, options) {\r\n        return this._getStat(filepath)\r\n            .then((stats) => this._makeEntry(stats, pattern))\r\n            .catch((error) => {\r\n            if (options.errorFilter(error)) {\r\n                return null;\r\n            }\r\n            throw error;\r\n        });\r\n    }\r\n    _getStat(filepath) {\r\n        return new Promise((resolve, reject) => {\r\n            this._stat(filepath, this._fsStatSettings, (error, stats) => {\r\n                return error === null ? resolve(stats) : reject(error);\r\n            });\r\n        });\r\n    }\r\n}\r\nexports.default = ReaderStream;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst fsWalk = require(\"@nodelib/fs.walk\");\r\nconst reader_1 = require(\"./reader\");\r\nconst stream_1 = require(\"./stream\");\r\nclass ReaderAsync extends reader_1.default {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._walkAsync = fsWalk.walk;\r\n        this._readerStream = new stream_1.default(this._settings);\r\n    }\r\n    dynamic(root, options) {\r\n        return new Promise((resolve, reject) => {\r\n            this._walkAsync(root, options, (error, entries) => {\r\n                if (error === null) {\r\n                    resolve(entries);\r\n                }\r\n                else {\r\n                    reject(error);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    async static(patterns, options) {\r\n        const entries = [];\r\n        const stream = this._readerStream.static(patterns, options);\r\n        // After #235, replace it with an asynchronous iterator.\r\n        return new Promise((resolve, reject) => {\r\n            stream.once('error', reject);\r\n            stream.on('data', (entry) => entries.push(entry));\r\n            stream.once('end', () => resolve(entries));\r\n        });\r\n    }\r\n}\r\nexports.default = ReaderAsync;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils = require(\"../../utils\");\r\nclass Matcher {\r\n    constructor(_patterns, _settings, _micromatchOptions) {\r\n        this._patterns = _patterns;\r\n        this._settings = _settings;\r\n        this._micromatchOptions = _micromatchOptions;\r\n        this._storage = [];\r\n        this._fillStorage();\r\n    }\r\n    _fillStorage() {\r\n        /**\r\n         * The original pattern may include `{,*,**,a/*}`, which will lead to problems with matching (unresolved level).\r\n         * So, before expand patterns with brace expansion into separated patterns.\r\n         */\r\n        const patterns = utils.pattern.expandPatternsWithBraceExpansion(this._patterns);\r\n        for (const pattern of patterns) {\r\n            const segments = this._getPatternSegments(pattern);\r\n            const sections = this._splitSegmentsIntoSections(segments);\r\n            this._storage.push({\r\n                complete: sections.length <= 1,\r\n                pattern,\r\n                segments,\r\n                sections\r\n            });\r\n        }\r\n    }\r\n    _getPatternSegments(pattern) {\r\n        const parts = utils.pattern.getPatternParts(pattern, this._micromatchOptions);\r\n        return parts.map((part) => {\r\n            const dynamic = utils.pattern.isDynamicPattern(part, this._settings);\r\n            if (!dynamic) {\r\n                return {\r\n                    dynamic: false,\r\n                    pattern: part\r\n                };\r\n            }\r\n            return {\r\n                dynamic: true,\r\n                pattern: part,\r\n                patternRe: utils.pattern.makeRe(part, this._micromatchOptions)\r\n            };\r\n        });\r\n    }\r\n    _splitSegmentsIntoSections(segments) {\r\n        return utils.array.splitWhen(segments, (segment) => segment.dynamic && utils.pattern.hasGlobStar(segment.pattern));\r\n    }\r\n}\r\nexports.default = Matcher;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst matcher_1 = require(\"./matcher\");\r\nclass PartialMatcher extends matcher_1.default {\r\n    match(filepath) {\r\n        const parts = filepath.split('/');\r\n        const levels = parts.length;\r\n        const patterns = this._storage.filter((info) => !info.complete || info.segments.length > levels);\r\n        for (const pattern of patterns) {\r\n            const section = pattern.sections[0];\r\n            /**\r\n             * In this case, the pattern has a globstar and we must read all directories unconditionally,\r\n             * but only if the level has reached the end of the first group.\r\n             *\r\n             * fixtures/{a,b}/**\r\n             *  ^ true/false  ^ always true\r\n            */\r\n            if (!pattern.complete && levels > section.length) {\r\n                return true;\r\n            }\r\n            const match = parts.every((part, index) => {\r\n                const segment = pattern.segments[index];\r\n                if (segment.dynamic && segment.patternRe.test(part)) {\r\n                    return true;\r\n                }\r\n                if (!segment.dynamic && segment.pattern === part) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n            if (match) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexports.default = PartialMatcher;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils = require(\"../../utils\");\r\nconst partial_1 = require(\"../matchers/partial\");\r\nclass DeepFilter {\r\n    constructor(_settings, _micromatchOptions) {\r\n        this._settings = _settings;\r\n        this._micromatchOptions = _micromatchOptions;\r\n    }\r\n    getFilter(basePath, positive, negative) {\r\n        const matcher = this._getMatcher(positive);\r\n        const negativeRe = this._getNegativePatternsRe(negative);\r\n        return (entry) => this._filter(basePath, entry, matcher, negativeRe);\r\n    }\r\n    _getMatcher(patterns) {\r\n        return new partial_1.default(patterns, this._settings, this._micromatchOptions);\r\n    }\r\n    _getNegativePatternsRe(patterns) {\r\n        const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);\r\n        return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);\r\n    }\r\n    _filter(basePath, entry, matcher, negativeRe) {\r\n        if (this._isSkippedByDeep(basePath, entry.path)) {\r\n            return false;\r\n        }\r\n        if (this._isSkippedSymbolicLink(entry)) {\r\n            return false;\r\n        }\r\n        const filepath = utils.path.removeLeadingDotSegment(entry.path);\r\n        if (this._isSkippedByPositivePatterns(filepath, matcher)) {\r\n            return false;\r\n        }\r\n        return this._isSkippedByNegativePatterns(filepath, negativeRe);\r\n    }\r\n    _isSkippedByDeep(basePath, entryPath) {\r\n        /**\r\n         * Avoid unnecessary depth calculations when it doesn't matter.\r\n         */\r\n        if (this._settings.deep === Infinity) {\r\n            return false;\r\n        }\r\n        return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;\r\n    }\r\n    _getEntryLevel(basePath, entryPath) {\r\n        const entryPathDepth = entryPath.split('/').length;\r\n        if (basePath === '') {\r\n            return entryPathDepth;\r\n        }\r\n        const basePathDepth = basePath.split('/').length;\r\n        return entryPathDepth - basePathDepth;\r\n    }\r\n    _isSkippedSymbolicLink(entry) {\r\n        return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();\r\n    }\r\n    _isSkippedByPositivePatterns(entryPath, matcher) {\r\n        return !this._settings.baseNameMatch && !matcher.match(entryPath);\r\n    }\r\n    _isSkippedByNegativePatterns(entryPath, patternsRe) {\r\n        return !utils.pattern.matchAny(entryPath, patternsRe);\r\n    }\r\n}\r\nexports.default = DeepFilter;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils = require(\"../../utils\");\r\nclass EntryFilter {\r\n    constructor(_settings, _micromatchOptions) {\r\n        this._settings = _settings;\r\n        this._micromatchOptions = _micromatchOptions;\r\n        this.index = new Map();\r\n    }\r\n    getFilter(positive, negative) {\r\n        const positiveRe = utils.pattern.convertPatternsToRe(positive, this._micromatchOptions);\r\n        const negativeRe = utils.pattern.convertPatternsToRe(negative, this._micromatchOptions);\r\n        return (entry) => this._filter(entry, positiveRe, negativeRe);\r\n    }\r\n    _filter(entry, positiveRe, negativeRe) {\r\n        if (this._settings.unique && this._isDuplicateEntry(entry)) {\r\n            return false;\r\n        }\r\n        if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {\r\n            return false;\r\n        }\r\n        if (this._isSkippedByAbsoluteNegativePatterns(entry.path, negativeRe)) {\r\n            return false;\r\n        }\r\n        const filepath = this._settings.baseNameMatch ? entry.name : entry.path;\r\n        const isDirectory = entry.dirent.isDirectory();\r\n        const isMatched = this._isMatchToPatterns(filepath, positiveRe, isDirectory) && !this._isMatchToPatterns(entry.path, negativeRe, isDirectory);\r\n        if (this._settings.unique && isMatched) {\r\n            this._createIndexRecord(entry);\r\n        }\r\n        return isMatched;\r\n    }\r\n    _isDuplicateEntry(entry) {\r\n        return this.index.has(entry.path);\r\n    }\r\n    _createIndexRecord(entry) {\r\n        this.index.set(entry.path, undefined);\r\n    }\r\n    _onlyFileFilter(entry) {\r\n        return this._settings.onlyFiles && !entry.dirent.isFile();\r\n    }\r\n    _onlyDirectoryFilter(entry) {\r\n        return this._settings.onlyDirectories && !entry.dirent.isDirectory();\r\n    }\r\n    _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {\r\n        if (!this._settings.absolute) {\r\n            return false;\r\n        }\r\n        const fullpath = utils.path.makeAbsolute(this._settings.cwd, entryPath);\r\n        return utils.pattern.matchAny(fullpath, patternsRe);\r\n    }\r\n    _isMatchToPatterns(entryPath, patternsRe, isDirectory) {\r\n        const filepath = utils.path.removeLeadingDotSegment(entryPath);\r\n        // Trying to match files and directories by patterns.\r\n        const isMatched = utils.pattern.matchAny(filepath, patternsRe);\r\n        // A pattern with a trailling slash can be used for directory matching.\r\n        // To apply such pattern, we need to add a tralling slash to the path.\r\n        if (!isMatched && isDirectory) {\r\n            return utils.pattern.matchAny(filepath + '/', patternsRe);\r\n        }\r\n        return isMatched;\r\n    }\r\n}\r\nexports.default = EntryFilter;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils = require(\"../../utils\");\r\nclass ErrorFilter {\r\n    constructor(_settings) {\r\n        this._settings = _settings;\r\n    }\r\n    getFilter() {\r\n        return (error) => this._isNonFatalError(error);\r\n    }\r\n    _isNonFatalError(error) {\r\n        return utils.errno.isEnoentCodeError(error) || this._settings.suppressErrors;\r\n    }\r\n}\r\nexports.default = ErrorFilter;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst utils = require(\"../../utils\");\r\nclass EntryTransformer {\r\n    constructor(_settings) {\r\n        this._settings = _settings;\r\n    }\r\n    getTransformer() {\r\n        return (entry) => this._transform(entry);\r\n    }\r\n    _transform(entry) {\r\n        let filepath = entry.path;\r\n        if (this._settings.absolute) {\r\n            filepath = utils.path.makeAbsolute(this._settings.cwd, filepath);\r\n            filepath = utils.path.unixify(filepath);\r\n        }\r\n        if (this._settings.markDirectories && entry.dirent.isDirectory()) {\r\n            filepath += '/';\r\n        }\r\n        if (!this._settings.objectMode) {\r\n            return filepath;\r\n        }\r\n        return Object.assign(Object.assign({}, entry), { path: filepath });\r\n    }\r\n}\r\nexports.default = EntryTransformer;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst path = require(\"path\");\r\nconst deep_1 = require(\"./filters/deep\");\r\nconst entry_1 = require(\"./filters/entry\");\r\nconst error_1 = require(\"./filters/error\");\r\nconst entry_2 = require(\"./transformers/entry\");\r\nclass Provider {\r\n    constructor(_settings) {\r\n        this._settings = _settings;\r\n        this.errorFilter = new error_1.default(this._settings);\r\n        this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());\r\n        this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());\r\n        this.entryTransformer = new entry_2.default(this._settings);\r\n    }\r\n    _getRootDirectory(task) {\r\n        return path.resolve(this._settings.cwd, task.base);\r\n    }\r\n    _getReaderOptions(task) {\r\n        const basePath = task.base === '.' ? '' : task.base;\r\n        return {\r\n            basePath,\r\n            pathSegmentSeparator: '/',\r\n            concurrency: this._settings.concurrency,\r\n            deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),\r\n            entryFilter: this.entryFilter.getFilter(task.positive, task.negative),\r\n            errorFilter: this.errorFilter.getFilter(),\r\n            followSymbolicLinks: this._settings.followSymbolicLinks,\r\n            fs: this._settings.fs,\r\n            stats: this._settings.stats,\r\n            throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,\r\n            transform: this.entryTransformer.getTransformer()\r\n        };\r\n    }\r\n    _getMicromatchOptions() {\r\n        return {\r\n            dot: this._settings.dot,\r\n            matchBase: this._settings.baseNameMatch,\r\n            nobrace: !this._settings.braceExpansion,\r\n            nocase: !this._settings.caseSensitiveMatch,\r\n            noext: !this._settings.extglob,\r\n            noglobstar: !this._settings.globstar,\r\n            posix: true,\r\n            strictSlashes: false\r\n        };\r\n    }\r\n}\r\nexports.default = Provider;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst async_1 = require(\"../readers/async\");\r\nconst provider_1 = require(\"./provider\");\r\nclass ProviderAsync extends provider_1.default {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._reader = new async_1.default(this._settings);\r\n    }\r\n    async read(task) {\r\n        const root = this._getRootDirectory(task);\r\n        const options = this._getReaderOptions(task);\r\n        const entries = await this.api(root, task, options);\r\n        return entries.map((entry) => options.transform(entry));\r\n    }\r\n    api(root, task, options) {\r\n        if (task.dynamic) {\r\n            return this._reader.dynamic(root, options);\r\n        }\r\n        return this._reader.static(task.patterns, options);\r\n    }\r\n}\r\nexports.default = ProviderAsync;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst stream_1 = require(\"stream\");\r\nconst stream_2 = require(\"../readers/stream\");\r\nconst provider_1 = require(\"./provider\");\r\nclass ProviderStream extends provider_1.default {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._reader = new stream_2.default(this._settings);\r\n    }\r\n    read(task) {\r\n        const root = this._getRootDirectory(task);\r\n        const options = this._getReaderOptions(task);\r\n        const source = this.api(root, task, options);\r\n        const destination = new stream_1.Readable({ objectMode: true, read: () => { } });\r\n        source\r\n            .once('error', (error) => destination.emit('error', error))\r\n            .on('data', (entry) => destination.emit('data', options.transform(entry)))\r\n            .once('end', () => destination.emit('end'));\r\n        destination\r\n            .once('close', () => source.destroy());\r\n        return destination;\r\n    }\r\n    api(root, task, options) {\r\n        if (task.dynamic) {\r\n            return this._reader.dynamic(root, options);\r\n        }\r\n        return this._reader.static(task.patterns, options);\r\n    }\r\n}\r\nexports.default = ProviderStream;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst fsStat = require(\"@nodelib/fs.stat\");\r\nconst fsWalk = require(\"@nodelib/fs.walk\");\r\nconst reader_1 = require(\"./reader\");\r\nclass ReaderSync extends reader_1.default {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._walkSync = fsWalk.walkSync;\r\n        this._statSync = fsStat.statSync;\r\n    }\r\n    dynamic(root, options) {\r\n        return this._walkSync(root, options);\r\n    }\r\n    static(patterns, options) {\r\n        const entries = [];\r\n        for (const pattern of patterns) {\r\n            const filepath = this._getFullEntryPath(pattern);\r\n            const entry = this._getEntry(filepath, pattern, options);\r\n            if (entry === null || !options.entryFilter(entry)) {\r\n                continue;\r\n            }\r\n            entries.push(entry);\r\n        }\r\n        return entries;\r\n    }\r\n    _getEntry(filepath, pattern, options) {\r\n        try {\r\n            const stats = this._getStat(filepath);\r\n            return this._makeEntry(stats, pattern);\r\n        }\r\n        catch (error) {\r\n            if (options.errorFilter(error)) {\r\n                return null;\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    _getStat(filepath) {\r\n        return this._statSync(filepath, this._fsStatSettings);\r\n    }\r\n}\r\nexports.default = ReaderSync;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst sync_1 = require(\"../readers/sync\");\r\nconst provider_1 = require(\"./provider\");\r\nclass ProviderSync extends provider_1.default {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._reader = new sync_1.default(this._settings);\r\n    }\r\n    read(task) {\r\n        const root = this._getRootDirectory(task);\r\n        const options = this._getReaderOptions(task);\r\n        const entries = this.api(root, task, options);\r\n        return entries.map(options.transform);\r\n    }\r\n    api(root, task, options) {\r\n        if (task.dynamic) {\r\n            return this._reader.dynamic(root, options);\r\n        }\r\n        return this._reader.static(task.patterns, options);\r\n    }\r\n}\r\nexports.default = ProviderSync;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;\r\nconst fs = require(\"fs\");\r\nconst os = require(\"os\");\r\n/**\r\n * The `os.cpus` method can return zero. We expect the number of cores to be greater than zero.\r\n * https://github.com/nodejs/node/blob/7faeddf23a98c53896f8b574a6e66589e8fb1eb8/lib/os.js#L106-L107\r\n */\r\nconst CPU_COUNT = Math.max(os.cpus().length, 1);\r\nexports.DEFAULT_FILE_SYSTEM_ADAPTER = {\r\n    lstat: fs.lstat,\r\n    lstatSync: fs.lstatSync,\r\n    stat: fs.stat,\r\n    statSync: fs.statSync,\r\n    readdir: fs.readdir,\r\n    readdirSync: fs.readdirSync\r\n};\r\nclass Settings {\r\n    constructor(_options = {}) {\r\n        this._options = _options;\r\n        this.absolute = this._getValue(this._options.absolute, false);\r\n        this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);\r\n        this.braceExpansion = this._getValue(this._options.braceExpansion, true);\r\n        this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);\r\n        this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);\r\n        this.cwd = this._getValue(this._options.cwd, process.cwd());\r\n        this.deep = this._getValue(this._options.deep, Infinity);\r\n        this.dot = this._getValue(this._options.dot, false);\r\n        this.extglob = this._getValue(this._options.extglob, true);\r\n        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);\r\n        this.fs = this._getFileSystemMethods(this._options.fs);\r\n        this.globstar = this._getValue(this._options.globstar, true);\r\n        this.ignore = this._getValue(this._options.ignore, []);\r\n        this.markDirectories = this._getValue(this._options.markDirectories, false);\r\n        this.objectMode = this._getValue(this._options.objectMode, false);\r\n        this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);\r\n        this.onlyFiles = this._getValue(this._options.onlyFiles, true);\r\n        this.stats = this._getValue(this._options.stats, false);\r\n        this.suppressErrors = this._getValue(this._options.suppressErrors, false);\r\n        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);\r\n        this.unique = this._getValue(this._options.unique, true);\r\n        if (this.onlyDirectories) {\r\n            this.onlyFiles = false;\r\n        }\r\n        if (this.stats) {\r\n            this.objectMode = true;\r\n        }\r\n    }\r\n    _getValue(option, value) {\r\n        return option === undefined ? value : option;\r\n    }\r\n    _getFileSystemMethods(methods = {}) {\r\n        return Object.assign(Object.assign({}, exports.DEFAULT_FILE_SYSTEM_ADAPTER), methods);\r\n    }\r\n}\r\nexports.default = Settings;\r\n", "\"use strict\";\r\nconst taskManager = require(\"./managers/tasks\");\r\nconst patternManager = require(\"./managers/patterns\");\r\nconst async_1 = require(\"./providers/async\");\r\nconst stream_1 = require(\"./providers/stream\");\r\nconst sync_1 = require(\"./providers/sync\");\r\nconst settings_1 = require(\"./settings\");\r\nconst utils = require(\"./utils\");\r\nasync function FastGlob(source, options) {\r\n    assertPatternsInput(source);\r\n    const works = getWorks(source, async_1.default, options);\r\n    const result = await Promise.all(works);\r\n    return utils.array.flatten(result);\r\n}\r\n// https://github.com/typescript-eslint/typescript-eslint/issues/60\r\n// eslint-disable-next-line no-redeclare\r\n(function (FastGlob) {\r\n    function sync(source, options) {\r\n        assertPatternsInput(source);\r\n        const works = getWorks(source, sync_1.default, options);\r\n        return utils.array.flatten(works);\r\n    }\r\n    FastGlob.sync = sync;\r\n    function stream(source, options) {\r\n        assertPatternsInput(source);\r\n        const works = getWorks(source, stream_1.default, options);\r\n        /**\r\n         * The stream returned by the provider cannot work with an asynchronous iterator.\r\n         * To support asynchronous iterators, regardless of the number of tasks, we always multiplex streams.\r\n         * This affects performance (+25%). I don't see best solution right now.\r\n         */\r\n        return utils.stream.merge(works);\r\n    }\r\n    FastGlob.stream = stream;\r\n    function generateTasks(source, options) {\r\n        assertPatternsInput(source);\r\n        const patterns = patternManager.transform([].concat(source));\r\n        const settings = new settings_1.default(options);\r\n        return taskManager.generate(patterns, settings);\r\n    }\r\n    FastGlob.generateTasks = generateTasks;\r\n    function isDynamicPattern(source, options) {\r\n        assertPatternsInput(source);\r\n        const settings = new settings_1.default(options);\r\n        return utils.pattern.isDynamicPattern(source, settings);\r\n    }\r\n    FastGlob.isDynamicPattern = isDynamicPattern;\r\n    function escapePath(source) {\r\n        assertPatternsInput(source);\r\n        return utils.path.escape(source);\r\n    }\r\n    FastGlob.escapePath = escapePath;\r\n})(FastGlob || (FastGlob = {}));\r\nfunction getWorks(source, _Provider, options) {\r\n    const patterns = patternManager.transform([].concat(source));\r\n    const settings = new settings_1.default(options);\r\n    const tasks = taskManager.generate(patterns, settings);\r\n    const provider = new _Provider(settings);\r\n    return tasks.map(provider.read, provider);\r\n}\r\nfunction assertPatternsInput(input) {\r\n    const source = [].concat(input);\r\n    const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));\r\n    if (!isValidSource) {\r\n        throw new TypeError('Patterns must be a string (non empty) or an array of strings');\r\n    }\r\n}\r\nmodule.exports = FastGlob;\r\n", "import * as arrow from 'apache-arrow';\r\nimport { DuckDBBindings } from './bindings_interface';\r\nimport { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from './insert_options';\r\n\r\n/** A thin helper to bind the connection id and talk record batches */\r\nexport class DuckDBConnection {\r\n    /** The bindings */\r\n    protected _bindings: DuckDBBindings;\r\n    /** The connection handle */\r\n    protected _conn: number;\r\n\r\n    /** Constructor */\r\n    constructor(bindings: DuckDBBindings, conn: number) {\r\n        this._bindings = bindings;\r\n        this._conn = conn;\r\n    }\r\n\r\n    /** Close a connection */\r\n    public close(): void {\r\n        this._bindings.disconnect(this._conn);\r\n    }\r\n\r\n    /** Brave souls may use this function to consume the underlying connection id */\r\n    public useUnsafe<R>(callback: (bindings: DuckDBBindings, conn: number) => R) {\r\n        return callback(this._bindings, this._conn);\r\n    }\r\n\r\n    /** Run a query */\r\n    public query<T extends { [key: string]: arrow.DataType } = any>(text: string): arrow.Table<T> {\r\n        const buffer = this._bindings.runQuery(this._conn, text);\r\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\r\n        console.assert(reader.isSync());\r\n        console.assert(reader.isFile());\r\n        return new arrow.Table(reader);\r\n    }\r\n\r\n    /** Send a query */\r\n    public async send<T extends { [key: string]: arrow.DataType } = any>(\r\n        text: string,\r\n    ): Promise<arrow.RecordBatchStreamReader<T>> {\r\n        let header = this._bindings.startPendingQuery(this._conn, text);\r\n        while (header == null) {\r\n            header = await new Promise((resolve, reject) => {\r\n                try {\r\n                    resolve(this._bindings.pollPendingQuery(this._conn));\r\n                } catch (e: any) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        }\r\n        const iter = new ResultStreamIterator(this._bindings, this._conn, header);\r\n        const reader = arrow.RecordBatchReader.from<T>(iter);\r\n        console.assert(reader.isSync());\r\n        console.assert(reader.isStream());\r\n        return reader;\r\n    }\r\n\r\n    /** Cancel a query that was sent earlier */\r\n    public cancelSent(): boolean {\r\n        return this._bindings.cancelPendingQuery(this._conn);\r\n    }\r\n\r\n    /** Get table names */\r\n    public getTableNames(query: string): string[] {\r\n        return this._bindings.getTableNames(this._conn, query);\r\n    }\r\n\r\n    /** Create a prepared statement */\r\n    public prepare<T extends { [key: string]: arrow.DataType } = any>(text: string): PreparedStatement {\r\n        const stmt = this._bindings.createPrepared(this._conn, text);\r\n        return new PreparedStatement<T>(this._bindings, this._conn, stmt);\r\n    }\r\n\r\n    /** Create a scalar function */\r\n    public createScalarFunction(name: string, returns: arrow.DataType, func: (...args: any[]) => void): void {\r\n        this._bindings.createScalarFunction(this._conn, name, returns, func);\r\n    }\r\n\r\n    /** Insert an arrow table */\r\n    public insertArrowTable(table: arrow.Table, options: ArrowInsertOptions): void {\r\n\tconst buffer = arrow.tableToIPC(table, 'stream');\r\n        this.insertArrowFromIPCStream(buffer, options);\r\n    }\r\n    /** Insert an arrow table from an ipc stream */\r\n    public insertArrowFromIPCStream(buffer: Uint8Array, options: ArrowInsertOptions): void {\r\n        this._bindings.insertArrowFromIPCStream(this._conn, buffer, options);\r\n    }\r\n\r\n    /** Inesrt csv file from path */\r\n    public insertCSVFromPath(path: string, options: CSVInsertOptions): void {\r\n        this._bindings.insertCSVFromPath(this._conn, path, options);\r\n    }\r\n    /** Insert json file from path */\r\n    public insertJSONFromPath(path: string, options: JSONInsertOptions): void {\r\n        this._bindings.insertJSONFromPath(this._conn, path, options);\r\n    }\r\n}\r\n\r\n/** A result stream iterator */\r\nexport class ResultStreamIterator implements Iterable<Uint8Array> {\r\n    /** First chunk? */\r\n    _first: boolean;\r\n    /** Reached end of stream? */\r\n    _depleted: boolean;\r\n\r\n    constructor(protected bindings: DuckDBBindings, protected conn: number, protected header: Uint8Array) {\r\n        this._first = true;\r\n        this._depleted = false;\r\n    }\r\n\r\n    next(): IteratorResult<Uint8Array> {\r\n        if (this._first) {\r\n            this._first = false;\r\n            return { done: false, value: this.header };\r\n        }\r\n        if (this._depleted) {\r\n            return { done: true, value: null };\r\n        }\r\n        const bufferI8 = this.bindings.fetchQueryResults(this.conn);\r\n        this._depleted = bufferI8.length == 0;\r\n        return {\r\n            done: this._depleted,\r\n            value: bufferI8,\r\n        };\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        return this;\r\n    }\r\n}\r\n\r\n/** A thin helper to bind the prepared statement id*/\r\nexport class PreparedStatement<T extends { [key: string]: arrow.DataType } = any> {\r\n    /** The bindings */\r\n    protected readonly bindings: DuckDBBindings;\r\n    /** The connection id */\r\n    protected readonly connectionId: number;\r\n    /** The statement id */\r\n    protected readonly statementId: number;\r\n\r\n    /** Constructor */\r\n    constructor(bindings: DuckDBBindings, connectionId: number, statementId: number) {\r\n        this.bindings = bindings;\r\n        this.connectionId = connectionId;\r\n        this.statementId = statementId;\r\n    }\r\n\r\n    /** Close a prepared statement */\r\n    public close() {\r\n        this.bindings.closePrepared(this.connectionId, this.statementId);\r\n    }\r\n\r\n    /** Run a prepared statement */\r\n    public query(...params: any[]): arrow.Table<T> {\r\n        const buffer = this.bindings.runPrepared(this.connectionId, this.statementId, params);\r\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\r\n        console.assert(reader.isSync());\r\n        console.assert(reader.isFile());\r\n        return new arrow.Table(reader as arrow.RecordBatchFileReader);\r\n    }\r\n\r\n    /** Send a prepared statement */\r\n    public send(...params: any[]): arrow.RecordBatchStreamReader<T> {\r\n        const header = this.bindings.sendPrepared(this.connectionId, this.statementId, params);\r\n        const iter = new ResultStreamIterator(this.bindings, this.connectionId, header);\r\n        const reader = arrow.RecordBatchReader.from<T>(iter);\r\n        console.assert(reader.isSync());\r\n        console.assert(reader.isStream());\r\n        return reader as arrow.RecordBatchStreamReader;\r\n    }\r\n}\r\n", "import { DuckDBRuntime } from './runtime';\r\nimport { DuckDBModule } from './duckdb_module';\r\n\r\nconst TEXT_ENCODER = new TextEncoder();\r\nconst TEXT_DECODER = new TextDecoder('utf-8');\r\n\r\nfunction storeError(mod: DuckDBModule, response: number, message: string) {\r\n    const msgBuffer = TEXT_ENCODER.encode(message);\r\n    const heapAddr = mod._malloc(msgBuffer.byteLength);\r\n    const heapArray = mod.HEAPU8.subarray(heapAddr, heapAddr + msgBuffer.byteLength);\r\n    heapArray.set(msgBuffer);\r\n    mod.HEAPF64[(response >> 3) + 0] = 1;\r\n    mod.HEAPF64[(response >> 3) + 1] = heapAddr;\r\n    mod.HEAPF64[(response >> 3) + 2] = heapArray.byteLength;\r\n}\r\n\r\nfunction getTypeSize(ptype: string) {\r\n    switch (ptype) {\r\n        case 'UINT8':\r\n        case 'INT8':\r\n            return 1;\r\n        case 'INT32':\r\n        case 'FLOAT':\r\n            return 4;\r\n        case 'INT64':\r\n        case 'UINT64':\r\n        case 'DOUBLE':\r\n        case 'VARCHAR':\r\n            return 8;\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\nfunction ptrToArray(mod: DuckDBModule, ptr: number, ptype: string, n: number) {\r\n    const heap = mod.HEAPU8.subarray(ptr, ptr + n * getTypeSize(ptype));\r\n    switch (ptype) {\r\n        case 'UINT8':\r\n            return new Uint8Array(heap.buffer, heap.byteOffset, n);\r\n        case 'INT8':\r\n            return new Int8Array(heap.buffer, heap.byteOffset, n);\r\n        case 'INT32':\r\n            return new Int32Array(heap.buffer, heap.byteOffset, n);\r\n        case 'FLOAT':\r\n            return new Float32Array(heap.buffer, heap.byteOffset, n);\r\n        case 'DOUBLE':\r\n            return new Float64Array(heap.buffer, heap.byteOffset, n);\r\n        case 'VARCHAR':\r\n            return new Float64Array(heap.buffer, heap.byteOffset, n);\r\n        default:\r\n            return new Array<string | undefined | null>(0); // cough\r\n    }\r\n}\r\n\r\nfunction ptrToUint8Array(mod: DuckDBModule, ptr: number, n: number) {\r\n    const heap = mod.HEAPU8.subarray(ptr, ptr + n);\r\n    return new Uint8Array(heap.buffer, heap.byteOffset, n);\r\n}\r\nfunction ptrToFloat64Array(mod: DuckDBModule, ptr: number, n: number) {\r\n    const heap = mod.HEAPU8.subarray(ptr, ptr + n * 8);\r\n    return new Float64Array(heap.buffer, heap.byteOffset, n);\r\n}\r\n\r\ninterface ArgumentTypeDescription {\r\n    name?: string;\r\n    sqlType: string;\r\n    physicalType: string;\r\n    validityBuffer?: number;\r\n    dataBuffer?: number;\r\n    lengthBuffer?: number;\r\n    children?: ArgumentTypeDescription[];\r\n}\r\n\r\ninterface ReturnTypeDescription {\r\n    sqlType: string;\r\n    physicalType: string;\r\n}\r\n\r\ninterface SchemaDescription {\r\n    rows: number;\r\n    args: ArgumentTypeDescription[];\r\n    ret: ReturnTypeDescription;\r\n}\r\n\r\ntype ArgumentResolver = (row: number) => any | null;\r\n\r\n// this is called from webdb.cc/CallScalarUDFFunction, changes here need to be matched there\r\nexport function callScalarUDF(\r\n    runtime: DuckDBRuntime,\r\n    mod: DuckDBModule,\r\n    response: number,\r\n    funcId: number,\r\n    descPtr: number,\r\n    descSize: number,\r\n    ptrsPtr: number,\r\n    ptrsSize: number,\r\n) {\r\n    try {\r\n        const udf = runtime._udfFunctions.get(funcId);\r\n        if (!udf) {\r\n            storeError(mod, response, 'Unknown UDF with id: ' + funcId);\r\n            return;\r\n        }\r\n        const rawDesc = TEXT_DECODER.decode(mod.HEAPU8.subarray(descPtr, descPtr + descSize));\r\n        const desc = JSON.parse(rawDesc) as SchemaDescription;\r\n        const ptrs = ptrToFloat64Array(mod, ptrsPtr, ptrsSize / 8);\r\n\r\n        const buildResolver = (arg: ArgumentTypeDescription): ArgumentResolver => {\r\n            let validity: Uint8Array | null = null;\r\n            if (arg.validityBuffer !== undefined) {\r\n                validity = ptrToUint8Array(mod, ptrs[arg.validityBuffer] as number, desc.rows);\r\n            }\r\n            switch (arg.physicalType) {\r\n                case 'VARCHAR': {\r\n                    if (arg.dataBuffer === null || arg.dataBuffer === undefined) {\r\n                        throw new Error('malformed data view, expected data buffer for VARCHAR argument');\r\n                    }\r\n                    if (arg.lengthBuffer === null || arg.lengthBuffer === undefined) {\r\n                        throw new Error('malformed data view, expected data length buffer for VARCHAR argument');\r\n                    }\r\n                    const raw = ptrToArray(mod, ptrs[arg.dataBuffer] as number, arg.physicalType, desc.rows);\r\n                    const strings: (string | null)[] = [];\r\n                    const stringLengths = ptrToFloat64Array(mod, ptrs[arg.lengthBuffer] as number, desc.rows);\r\n                    for (let j = 0; j < desc.rows; ++j) {\r\n                        if (validity != null && !validity[j]) {\r\n                            strings.push(null);\r\n                            continue;\r\n                        }\r\n                        const subarray = mod.HEAPU8.subarray(\r\n                            raw[j] as number,\r\n                            (raw[j] as number) + (stringLengths[j] as number),\r\n                        );\r\n                        const str = TEXT_DECODER.decode(subarray);\r\n                        strings.push(str);\r\n                    }\r\n                    return (row: number) => strings[row];\r\n                }\r\n                case 'STRUCT': {\r\n                    const tmp: any = {};\r\n                    const children: ArgumentResolver[] = [];\r\n                    for (let j = 0; j < (arg.children?.length || 0); ++j) {\r\n                        const attr = arg.children![j];\r\n                        const child = buildResolver(attr);\r\n                        children.push((row: number) => {\r\n                            tmp[attr.name!] = child(row);\r\n                        });\r\n                    }\r\n                    if (validity != null) {\r\n                        return (row: number) => {\r\n                            if (!validity![row]) {\r\n                                return null;\r\n                            }\r\n                            for (const resolver of children) {\r\n                                resolver(row);\r\n                            }\r\n                            return tmp;\r\n                        };\r\n                    } else {\r\n                        return (row: number) => {\r\n                            for (const resolver of children) {\r\n                                resolver(row);\r\n                            }\r\n                            return tmp;\r\n                        };\r\n                    }\r\n                }\r\n                default: {\r\n                    if (arg.dataBuffer === undefined) {\r\n                        throw new Error(\r\n                            'malformed data view, expected data buffer for argument of type: ' + arg.physicalType,\r\n                        );\r\n                    }\r\n                    const data = ptrToArray(mod, ptrs[arg.dataBuffer] as number, arg.physicalType, desc.rows);\r\n                    if (validity != null) {\r\n                        return (row: number) => (!validity![row] ? null : data[row]);\r\n                    } else {\r\n                        return (row: number) => data[row];\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        // Translate argument data\r\n        const argResolvers = [];\r\n        for (let i = 0; i < desc.args.length; ++i) {\r\n            argResolvers.push(buildResolver(desc.args[i]));\r\n        }\r\n\r\n        // Prepare result buffers\r\n        // TODO: we probably do not want to recreate those every time\r\n        const resultDataLen = desc.rows * getTypeSize(desc.ret.physicalType);\r\n        const resultDataPtr = mod._malloc(resultDataLen);\r\n        const resultData = ptrToArray(mod, resultDataPtr, desc.ret.physicalType, desc.rows);\r\n        const resultValidityPtr = mod._malloc(desc.rows);\r\n        const resultValidity = ptrToUint8Array(mod, resultValidityPtr, desc.rows);\r\n        if (resultData.length == 0 || resultValidity.length == 0) {\r\n            storeError(mod, response, \"Can't create physical arrays for result\");\r\n            return;\r\n        }\r\n        let rawResultData = resultData;\r\n        if (desc.ret.physicalType == 'VARCHAR') {\r\n            rawResultData = new Array<string | undefined | null>(desc.rows);\r\n        }\r\n\r\n        // Call the function\r\n        const args = [];\r\n        for (let i = 0; i < desc.args.length; ++i) {\r\n            args.push(null);\r\n        }\r\n        for (let i = 0; i < desc.rows; ++i) {\r\n            for (let j = 0; j < desc.args.length; ++j) {\r\n                args[j] = argResolvers[j](i);\r\n            }\r\n            const res = udf.func(...args);\r\n            rawResultData[i] = res;\r\n            resultValidity[i] = res === undefined || res === null ? 0 : 1;\r\n        }\r\n\r\n        // Encode return values\r\n        let resultLengthsPtr = 0;\r\n        switch (desc.ret.physicalType) {\r\n            case 'VARCHAR': {\r\n                // Allocate result buffers\r\n                const resultDataUTF8 = new Array<Uint8Array>(0); // cough\r\n                resultLengthsPtr = mod._malloc(desc.rows * getTypeSize('DOUBLE'));\r\n                const resultLengths = ptrToFloat64Array(mod, resultLengthsPtr, desc.rows);\r\n\r\n                // TODO: We need two loops to figure out the total length but maybe we can avoid the double allocation\r\n                let totalLength = 0;\r\n                for (let row = 0; row < desc.rows; ++row) {\r\n                    const utf8 = TEXT_ENCODER.encode((rawResultData as (string | null | undefined)[])[row] || '');\r\n                    resultDataUTF8.push(utf8);\r\n                    resultLengths[row] = utf8.length;\r\n                    totalLength += utf8.length;\r\n                }\r\n\r\n                // We malloc a buffer for the strings to live in for now\r\n                const resultStringPtr = mod._malloc(totalLength);\r\n                const resultStringBuf = mod.HEAPU8.subarray(resultStringPtr, resultStringPtr + totalLength);\r\n\r\n                // Now copy all the strings to the new buffer back to back\r\n                let writerOffset = 0;\r\n                for (let row = 0; row < desc.rows; ++row) {\r\n                    resultData[row] = writerOffset;\r\n                    const resultUTF8 = resultDataUTF8[row];\r\n                    const writer = resultStringBuf.subarray(writerOffset, writerOffset + resultUTF8.length);\r\n                    writer.set(resultUTF8);\r\n                    writerOffset += resultUTF8.length;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Need to store three pointers, data, validity and length\r\n        const retLen = 3 * 8;\r\n        const retPtr = mod._malloc(retLen);\r\n        const retBuffer = ptrToFloat64Array(mod, retPtr, 3);\r\n        retBuffer[0] = resultDataPtr;\r\n        retBuffer[1] = resultValidityPtr;\r\n        retBuffer[2] = resultLengthsPtr;\r\n\r\n        // Pack response\r\n        mod.HEAPF64[(response >> 3) + 0] = 0;\r\n        mod.HEAPF64[(response >> 3) + 1] = retPtr;\r\n        mod.HEAPF64[(response >> 3) + 2] = 0;\r\n    } catch (e: any) {\r\n        storeError(mod, response, e.toString());\r\n    }\r\n}\r\n", "import { DuckDBModule } from './duckdb_module';\r\nimport { UDFFunction } from './udf_function';\r\nimport * as udf_rt from './udf_runtime';\r\n\r\n/** Wrapper for TextDecoder to support shared array buffers */\r\nfunction TextDecoderWrapper(): (input?: BufferSource) => string {\r\n    const decoder = new TextDecoder();\r\n    return (data: any) => {\r\n        if (typeof SharedArrayBuffer !== 'undefined' && data.buffer instanceof SharedArrayBuffer) {\r\n            data = new Uint8Array(data);\r\n        }\r\n        return decoder.decode(data);\r\n    };\r\n}\r\n/** Helper to decode text */\r\nexport const decodeText = TextDecoderWrapper();\r\n\r\n/** Copy a buffer */\r\nexport function failWith(mod: DuckDBModule, msg: string): void {\r\n    console.error(`FAIL WITH: ${msg}`);\r\n    mod.ccall('duckdb_web_fail_with', null, ['string'], [msg]);\r\n}\r\n\r\n/** Copy a buffer */\r\nexport function copyBuffer(mod: DuckDBModule, begin: number, length: number): Uint8Array {\r\n    const buffer = mod.HEAPU8.subarray(begin, begin + length);\r\n    const copy = new Uint8Array(new ArrayBuffer(buffer.byteLength));\r\n    copy.set(buffer);\r\n    return copy;\r\n}\r\n\r\n/** Decode a string */\r\nexport function readString(mod: DuckDBModule, begin: number, length: number): string {\r\n    return decodeText(mod.HEAPU8.subarray(begin, begin + length));\r\n}\r\n\r\n/** The data protocol */\r\nexport enum DuckDBDataProtocol {\r\n    BUFFER = 0,\r\n    NODE_FS = 1,\r\n    BROWSER_FILEREADER = 2,\r\n    BROWSER_FSACCESS = 3,\r\n    HTTP = 4,\r\n    S3 = 5,\r\n}\r\n\r\n/** File flags for opening files*/\r\nexport enum FileFlags {\r\n    //! Open file with read access\r\n    FILE_FLAGS_READ = 1 << 0,\r\n    //! Open file with write access\r\n    FILE_FLAGS_WRITE = 1 << 1,\r\n    //! Use direct IO when reading/writing to the file\r\n    FILE_FLAGS_DIRECT_IO = 1 << 2,\r\n    //! Create file if not exists, can only be used together with WRITE\r\n    FILE_FLAGS_FILE_CREATE = 1 << 3,\r\n    //! Always create a new file. If a file exists, the file is truncated. Cannot be used together with CREATE.\r\n    FILE_FLAGS_FILE_CREATE_NEW = 1 << 4,\r\n    //! Open file in append mode\r\n    FILE_FLAGS_APPEND = 1 << 5,\r\n}\r\n\r\n/** Configuration for the AWS S3 Filesystem */\r\nexport interface S3Config {\r\n    region?: string;\r\n    endpoint?: string;\r\n    accessKeyId?: string;\r\n    secretAccessKey?: string;\r\n    sessionToken?: string;\r\n}\r\n\r\n/** An info for a file registered with DuckDB */\r\nexport interface DuckDBFileInfo {\r\n    cacheEpoch: number;\r\n    fileId: number;\r\n    fileName: string;\r\n    dataProtocol: DuckDBDataProtocol;\r\n    dataUrl: string | null;\r\n    allowFullHttpReads?: boolean;\r\n    s3Config?: S3Config;\r\n}\r\n\r\n/** Global info for all files registered with DuckDB */\r\nexport interface DuckDBGlobalFileInfo {\r\n    cacheEpoch: number;\r\n    allowFullHttpReads?: boolean;\r\n    s3Config?: S3Config;\r\n}\r\n\r\n/** Call a function with packed response buffer */\r\nexport function callSRet(\r\n    mod: DuckDBModule,\r\n    funcName: string,\r\n    argTypes: Array<Emscripten.JSType>,\r\n    args: Array<any>,\r\n): [number, number, number] {\r\n    const stackPointer = mod.stackSave();\r\n\r\n    // Allocate the packed response buffer\r\n    const response = mod.stackAlloc(3 * 8);\r\n    argTypes.unshift('number');\r\n    args.unshift(response);\r\n\r\n    // Do the call\r\n    mod.ccall(funcName, null, argTypes, args);\r\n\r\n    // Read the response\r\n    const status = mod.HEAPF64[(response >> 3) + 0];\r\n    const data = mod.HEAPF64[(response >> 3) + 1];\r\n    const dataSize = mod.HEAPF64[(response >> 3) + 2];\r\n\r\n    // Restore the stack\r\n    mod.stackRestore(stackPointer);\r\n    return [status, data, dataSize];\r\n}\r\n\r\n/** Drop response buffers */\r\nexport function dropResponseBuffers(mod: DuckDBModule): void {\r\n    mod.ccall('duckdb_web_clear_response', null, [], []);\r\n}\r\n\r\n/** The duckdb runtime */\r\nexport interface DuckDBRuntime {\r\n    _files?: Map<string, any>;\r\n    _udfFunctions: Map<number, UDFFunction>;\r\n\r\n    // Test a platform feature\r\n    testPlatformFeature(mod: DuckDBModule, feature: number): boolean;\r\n\r\n    // File APIs with dedicated file identifier\r\n    getDefaultDataProtocol(mod: DuckDBModule): number;\r\n    openFile(mod: DuckDBModule, fileId: number, flags: FileFlags): void;\r\n    syncFile(mod: DuckDBModule, fileId: number): void;\r\n    closeFile(mod: DuckDBModule, fileId: number): void;\r\n    getLastFileModificationTime(mod: DuckDBModule, fileId: number): number;\r\n    truncateFile(mod: DuckDBModule, fileId: number, newSize: number): void;\r\n    readFile(mod: DuckDBModule, fileId: number, buffer: number, bytes: number, location: number): number;\r\n    writeFile(mod: DuckDBModule, fileId: number, buffer: number, bytes: number, location: number): number;\r\n\r\n    // File APIs with path parameter\r\n    removeDirectory(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\r\n    checkDirectory(mod: DuckDBModule, pathPtr: number, pathLen: number): boolean;\r\n    createDirectory(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\r\n    listDirectoryEntries(mod: DuckDBModule, pathPtr: number, pathLen: number): boolean;\r\n    glob(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\r\n    moveFile(mod: DuckDBModule, fromPtr: number, fromLen: number, toPtr: number, toLen: number): void;\r\n    checkFile(mod: DuckDBModule, pathPtr: number, pathLen: number): boolean;\r\n    removeFile(mod: DuckDBModule, pathPtr: number, pathLen: number): void;\r\n\r\n    // Call a scalar UDF function\r\n    callScalarUDF(\r\n        mod: DuckDBModule,\r\n        response: number,\r\n        funcId: number,\r\n        descPtr: number,\r\n        descSize: number,\r\n        ptrsPtr: number,\r\n        ptrsSize: number,\r\n    ): void;\r\n}\r\n\r\nexport const DEFAULT_RUNTIME: DuckDBRuntime = {\r\n    _udfFunctions: new Map(),\r\n\r\n    testPlatformFeature: (_mod: DuckDBModule, _feature: number): boolean => false,\r\n    getDefaultDataProtocol: (_mod: DuckDBModule): number => DuckDBDataProtocol.BUFFER,\r\n    openFile: (_mod: DuckDBModule, _fileId: number, flags: FileFlags): void => {},\r\n    syncFile: (_mod: DuckDBModule, _fileId: number): void => {},\r\n    closeFile: (_mod: DuckDBModule, _fileId: number): void => {},\r\n    getLastFileModificationTime: (_mod: DuckDBModule, _fileId: number): number => {\r\n        return 0;\r\n    },\r\n    truncateFile: (_mod: DuckDBModule, _fileId: number, _newSize: number): void => {},\r\n    readFile: (_mod: DuckDBModule, _fileId: number, _buffer: number, _bytes: number, _location: number): number => {\r\n        return 0;\r\n    },\r\n    writeFile: (_mod: DuckDBModule, _fileId: number, _buffer: number, _bytes: number, _location: number): number => {\r\n        return 0;\r\n    },\r\n\r\n    removeDirectory: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\r\n    checkDirectory: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): boolean => {\r\n        return false;\r\n    },\r\n    createDirectory: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\r\n    listDirectoryEntries: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): boolean => {\r\n        return false;\r\n    },\r\n    glob: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\r\n    moveFile: (_mod: DuckDBModule, _fromPtr: number, _fromLen: number, _toPtr: number, _toLen: number): void => {},\r\n    checkFile: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): boolean => {\r\n        return false;\r\n    },\r\n    removeFile: (_mod: DuckDBModule, _pathPtr: number, _pathLen: number): void => {},\r\n    callScalarUDF: (\r\n        mod: DuckDBModule,\r\n        response: number,\r\n        funcId: number,\r\n        descPtr: number,\r\n        descSize: number,\r\n        ptrsPtr: number,\r\n        ptrsSize: number,\r\n    ): void => {\r\n        udf_rt.callScalarUDF(DEFAULT_RUNTIME, mod, response, funcId, descPtr, descSize, ptrsPtr, ptrsSize);\r\n    },\r\n};\r\n", "export interface FileBlockStatistics {\r\n    /** The file reads cold */\r\n    file_reads_cold: number;\r\n    /** The file reads aheads */\r\n    file_reads_ahead: number;\r\n    /** The file reads cached */\r\n    file_reads_cached: number;\r\n    /** The file writes */\r\n    file_writes: number;\r\n    /** The page accesses */\r\n    page_accesses: number;\r\n    /** The page loads */\r\n    page_loads: number;\r\n}\r\n\r\n/** The file block statistics */\r\nexport class FileStatistics {\r\n    /** The cold file reads */\r\n    public totalFileReadsCold: number;\r\n    /** The file readaheads */\r\n    public totalFileReadsAhead: number;\r\n    /** The cached file reads */\r\n    public totalFileReadsCached: number;\r\n    /** The file writes */\r\n    public totalFileWrites: number;\r\n    /** The page accesses */\r\n    public totalPageAccesses: number;\r\n    /** The page loads */\r\n    public totalPageLoads: number;\r\n    /** The blocks */\r\n    public blockSize: number;\r\n    /** The blocks */\r\n    public blockStats: Uint8Array;\r\n\r\n    constructor(u8array: Uint8Array) {\r\n        const f64 = new Float64Array(u8array.buffer, u8array.byteOffset, u8array.byteLength / 8);\r\n        const blocks = new Uint8Array(new ArrayBuffer(u8array.byteLength));\r\n        blocks.set(u8array.subarray(7 * 8));\r\n        this.totalFileReadsCold = f64[0];\r\n        this.totalFileReadsAhead = f64[1];\r\n        this.totalFileReadsCached = f64[2];\r\n        this.totalFileWrites = f64[3];\r\n        this.totalPageAccesses = f64[4];\r\n        this.totalPageLoads = f64[5];\r\n        this.blockSize = f64[6];\r\n        this.blockStats = blocks;\r\n    }\r\n\r\n    /** The block stats */\r\n    public getBlockStats(index: number, out?: FileBlockStatistics): FileBlockStatistics {\r\n        out = out || {\r\n            file_reads_cold: 0,\r\n            file_reads_ahead: 0,\r\n            file_reads_cached: 0,\r\n            file_writes: 0,\r\n            page_accesses: 0,\r\n            page_loads: 0,\r\n        };\r\n        out.file_writes = this.blockStats[index * 3 + 0] & 0b1111;\r\n        out.file_reads_cold = this.blockStats[index * 3 + 0] >> 4;\r\n        out.file_reads_ahead = this.blockStats[index * 3 + 1] & 0b1111;\r\n        out.file_reads_cached = this.blockStats[index * 3 + 1] >> 4;\r\n        out.page_accesses = this.blockStats[index * 3 + 1] & 0b1111;\r\n        out.page_loads = this.blockStats[index * 3 + 1] >> 4;\r\n        return out;\r\n    }\r\n}\r\n", "import * as arrow from 'apache-arrow';\r\n\r\nexport interface SQLType {\r\n    /// The sql type\r\n    sqlType: string;\r\n    /// Is nullable?\r\n    nullable?: boolean;\r\n    /// Decimal precision\r\n    precision?: number;\r\n    /// Decimal scaling\r\n    scale?: number;\r\n    /// Timezone\r\n    timezone?: string;\r\n    /// Byte width (FixedSizeBinary)\r\n    byteWidth?: number;\r\n    /// Key type\r\n    keyType?: SQLType;\r\n    /// Value type\r\n    valueType?: SQLType;\r\n    /// Fields\r\n    fields?: SQLField[];\r\n}\r\n\r\nexport function arrowToSQLType(type: arrow.DataType): SQLType {\r\n    switch (type.typeId) {\r\n        case arrow.Type.Binary:\r\n            return { sqlType: 'binary' };\r\n        case arrow.Type.Bool:\r\n            return { sqlType: 'bool' };\r\n        case arrow.Type.Date:\r\n            return { sqlType: 'date' };\r\n        case arrow.Type.DateDay:\r\n            return { sqlType: 'date32[d]' };\r\n        case arrow.Type.DateMillisecond:\r\n            return { sqlType: 'date64[ms]' };\r\n        case arrow.Type.Decimal: {\r\n            const dec = type as arrow.Decimal;\r\n            return { sqlType: 'decimal', precision: dec.precision, scale: dec.scale };\r\n        }\r\n        case arrow.Type.Float:\r\n            return { sqlType: 'float' };\r\n        case arrow.Type.Float16:\r\n            return { sqlType: 'float16' };\r\n        case arrow.Type.Float32:\r\n            return { sqlType: 'float32' };\r\n        case arrow.Type.Float64:\r\n            return { sqlType: 'float64' };\r\n        case arrow.Type.Int:\r\n            return { sqlType: 'int32' };\r\n        case arrow.Type.Int16:\r\n            return { sqlType: 'int16' };\r\n        case arrow.Type.Int32:\r\n            return { sqlType: 'int32' };\r\n        case arrow.Type.Int64:\r\n            return { sqlType: 'int64' };\r\n        case arrow.Type.Uint16:\r\n            return { sqlType: 'uint16' };\r\n        case arrow.Type.Uint32:\r\n            return { sqlType: 'uint32' };\r\n        case arrow.Type.Uint64:\r\n            return { sqlType: 'uint64' };\r\n        case arrow.Type.Uint8:\r\n            return { sqlType: 'uint8' };\r\n        case arrow.Type.IntervalDayTime:\r\n            return { sqlType: 'interval[dt]' };\r\n        case arrow.Type.IntervalYearMonth:\r\n            return { sqlType: 'interval[m]' };\r\n        case arrow.Type.List: {\r\n            const list = type as arrow.List;\r\n            return {\r\n                sqlType: 'list',\r\n                valueType: arrowToSQLType(list.valueType),\r\n            };\r\n        }\r\n        case arrow.Type.FixedSizeBinary: {\r\n            const bin = type as arrow.FixedSizeBinary;\r\n            return { sqlType: 'fixedsizebinary', byteWidth: bin.byteWidth };\r\n        }\r\n        case arrow.Type.Null:\r\n            return { sqlType: 'null' };\r\n        case arrow.Type.Utf8:\r\n            return { sqlType: 'utf8' };\r\n        case arrow.Type.Struct: {\r\n            const struct_ = type as arrow.Struct;\r\n            return {\r\n                sqlType: 'struct',\r\n                fields: struct_.children.map(c => arrowToSQLField(c.name, c.type)),\r\n            };\r\n        }\r\n        case arrow.Type.Map: {\r\n            const map_ = type as arrow.Map_;\r\n            return {\r\n                sqlType: 'map',\r\n                keyType: arrowToSQLType(map_.keyType),\r\n                valueType: arrowToSQLType(map_.valueType),\r\n            };\r\n        }\r\n        case arrow.Type.Time:\r\n            return { sqlType: 'time[s]' };\r\n        case arrow.Type.TimeMicrosecond:\r\n            return { sqlType: 'time[us]' };\r\n        case arrow.Type.TimeMillisecond:\r\n            return { sqlType: 'time[ms]' };\r\n        case arrow.Type.TimeNanosecond:\r\n            return { sqlType: 'time[ns]' };\r\n        case arrow.Type.TimeSecond:\r\n            return { sqlType: 'time[s]' };\r\n        case arrow.Type.Timestamp: {\r\n            const ts = type as arrow.Timestamp;\r\n            return { sqlType: 'timestamp', timezone: ts.timezone || undefined };\r\n        }\r\n        case arrow.Type.TimestampSecond: {\r\n            const ts = type as arrow.TimestampSecond;\r\n            return { sqlType: 'timestamp[s]', timezone: ts.timezone || undefined };\r\n        }\r\n        case arrow.Type.TimestampMicrosecond: {\r\n            const ts = type as arrow.TimestampMicrosecond;\r\n            return { sqlType: 'timestamp[us]', timezone: ts.timezone || undefined };\r\n        }\r\n        case arrow.Type.TimestampNanosecond: {\r\n            const ts = type as arrow.TimestampNanosecond;\r\n            return { sqlType: 'timestamp[ns]', timezone: ts.timezone || undefined };\r\n        }\r\n        case arrow.Type.TimestampMillisecond: {\r\n            const ts = type as arrow.TimestampMillisecond;\r\n            return { sqlType: 'timestamp[ms]', timezone: ts.timezone || undefined };\r\n        }\r\n    }\r\n    throw new Error(`unsupported arrow type: ${type.toString()}`);\r\n}\r\n\r\nexport type SQLField = SQLType & { name: string };\r\n\r\nexport function arrowToSQLField(name: string, type: arrow.DataType): SQLField {\r\n    const t = arrowToSQLType(type) as SQLField;\r\n    t.name = name;\r\n    return t;\r\n}\r\n", "import { DuckDBModule, PThread } from './duckdb_module';\r\nimport { DuckDBConfig } from './config';\r\nimport { Logger } from '../log';\r\nimport { InstantiationProgress } from './progress';\r\nimport { DuckDBBindings } from './bindings_interface';\r\nimport { DuckDBConnection } from './connection';\r\nimport { StatusCode } from '../status';\r\nimport { dropResponseBuffers, DuckDBRuntime, readString, callSRet, copyBuffer, DuckDBDataProtocol } from './runtime';\r\nimport { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from './insert_options';\r\nimport { ScriptTokens } from './tokens';\r\nimport { FileStatistics } from './file_stats';\r\nimport { arrowToSQLField, arrowToSQLType } from '../json_typedef';\r\nimport { WebFile } from './web_file';\r\nimport { UDFFunction, UDFFunctionDeclaration } from './udf_function';\r\nimport * as arrow from 'apache-arrow';\r\n\r\nconst TEXT_ENCODER = new TextEncoder();\r\n\r\ndeclare global {\r\n    // eslint-disable-next-line no-var\r\n    var DUCKDB_RUNTIME: any;\r\n}\r\n\r\n/** A DuckDB Feature */\r\nexport enum DuckDBFeature {\r\n    WASM_EXCEPTIONS = 1 << 0,\r\n    WASM_THREADS = 1 << 1,\r\n    WASM_SIMD = 1 << 2,\r\n    WASM_BULK_MEMORY = 1 << 3,\r\n    EMIT_BIGINT = 1 << 4,\r\n}\r\n\r\n/** The proxy for either the browser- order node-based DuckDB API */\r\nexport abstract class DuckDBBindingsBase implements DuckDBBindings {\r\n    /** The logger */\r\n    protected readonly _logger: Logger;\r\n    /** Backend-dependent native-glue code for DuckDB */\r\n    protected readonly _runtime: DuckDBRuntime;\r\n    /** The instance */\r\n    protected _instance: DuckDBModule | null = null;\r\n    /** The loading promise */\r\n    protected _initPromise: Promise<void> | null = null;\r\n    /** The resolver for the open promise (called by onRuntimeInitialized) */\r\n    protected _initPromiseResolver: () => void = () => {};\r\n    /** The next UDF id */\r\n    protected _nextUDFId: number;\r\n\r\n    constructor(logger: Logger, runtime: DuckDBRuntime) {\r\n        this._logger = logger;\r\n        this._runtime = runtime;\r\n        this._nextUDFId = 1;\r\n    }\r\n\r\n    /** Get the logger */\r\n    public get logger(): Logger {\r\n        return this._logger;\r\n    }\r\n    /** Get the instance */\r\n    public get mod(): DuckDBModule {\r\n        return this._instance!;\r\n    }\r\n    /** Get the instance */\r\n    public get pthread(): PThread | null {\r\n        return this.mod.PThread || null;\r\n    }\r\n\r\n    /** Instantiate the module */\r\n    protected abstract instantiateImpl(moduleOverrides: Partial<DuckDBModule>): Promise<DuckDBModule>;\r\n    /** Instantiate the module */\r\n    protected onInstantiationProgress: ((p: InstantiationProgress) => void)[] = [];\r\n    /** Instantiate the database */\r\n    public async instantiate(onProgress: (progress: InstantiationProgress) => void = _ => {}): Promise<this> {\r\n        // Already opened?\r\n        if (this._instance != null) {\r\n            return this;\r\n        }\r\n        // Open in progress?\r\n        if (this._initPromise != null) {\r\n            this.onInstantiationProgress.push(onProgress);\r\n            await this._initPromise;\r\n        }\r\n        // Create a promise that we can await\r\n        this._initPromise = new Promise(resolve => {\r\n            this._initPromiseResolver = resolve;\r\n        });\r\n        // Register progress handler\r\n        this.onInstantiationProgress = [onProgress];\r\n        // Initialize duckdb\r\n        this._instance = await this.instantiateImpl({\r\n            print: console.log.bind(console),\r\n            printErr: console.log.bind(console),\r\n            onRuntimeInitialized: this._initPromiseResolver,\r\n        });\r\n        // Wait for onRuntimeInitialized\r\n        await this._initPromise;\r\n        this._initPromise = null;\r\n        // Remove own progress callback\r\n        this.onInstantiationProgress = this.onInstantiationProgress.filter(x => x != onProgress);\r\n        return this;\r\n    }\r\n    /** Open a database with a config */\r\n    public open(config: DuckDBConfig): void {\r\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_open', ['string'], [JSON.stringify(config)]);\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        dropResponseBuffers(this.mod);\r\n    }\r\n\r\n    /** Reset the database */\r\n    public reset(): void {\r\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_reset', [], []);\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        dropResponseBuffers(this.mod);\r\n    }\r\n\r\n    /** Get the version */\r\n    public getVersion(): string {\r\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_get_version', [], []);\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        const version = readString(this.mod, d, n);\r\n        dropResponseBuffers(this.mod);\r\n        return version;\r\n    }\r\n    /** Get the feature flags */\r\n    public getFeatureFlags(): number {\r\n        return this.mod.ccall('duckdb_web_get_feature_flags', 'number', [], []);\r\n    }\r\n\r\n    /** Tokenize a script */\r\n    public tokenize(text: string): ScriptTokens {\r\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_tokenize', ['string'], [text]);\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        const res = readString(this.mod, d, n);\r\n        dropResponseBuffers(this.mod);\r\n        return JSON.parse(res) as ScriptTokens;\r\n    }\r\n\r\n    /** Connect to database */\r\n    public connect(): DuckDBConnection {\r\n        const conn = this.mod.ccall('duckdb_web_connect', 'number', [], []);\r\n        return new DuckDBConnection(this, conn);\r\n    }\r\n    /** Disconnect from database */\r\n    public disconnect(conn: number): void {\r\n        this.mod.ccall('duckdb_web_disconnect', null, ['number'], [conn]);\r\n        if (this.pthread) {\r\n            for (const worker of [...this.pthread.runningWorkers, ...this.pthread.unusedWorkers]) {\r\n                worker.postMessage({\r\n                    cmd: 'dropUDFFunctions',\r\n                    connectionId: conn,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Send a query and return the full result */\r\n    public runQuery(conn: number, text: string): Uint8Array {\r\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_query_run', ['number', 'string'], [conn, text]);\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        const res = copyBuffer(this.mod, d, n);\r\n        dropResponseBuffers(this.mod);\r\n        return res;\r\n    }\r\n    /**\r\n     *  Start a pending query asynchronously.\r\n     *  This method returns either the arrow ipc schema or null.\r\n     *  On null, the query has to be executed using `pollPendingQuery` until that returns != null.\r\n     *  Results can then be fetched using `fetchQueryResults`\r\n     */\r\n    public startPendingQuery(conn: number, text: string): Uint8Array | null {\r\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_pending_query_start', ['number', 'string'], [conn, text]);\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        if (d == 0) {\r\n            return null;\r\n        }\r\n        const res = copyBuffer(this.mod, d, n);\r\n        dropResponseBuffers(this.mod);\r\n        return res;\r\n    }\r\n    /** Poll a pending query */\r\n    public pollPendingQuery(conn: number): Uint8Array | null {\r\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_pending_query_poll', ['number'], [conn]);\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        if (d == 0) {\r\n            return null;\r\n        }\r\n        const res = copyBuffer(this.mod, d, n);\r\n        dropResponseBuffers(this.mod);\r\n        return res;\r\n    }\r\n    /** Cancel a pending query */\r\n    public cancelPendingQuery(conn: number): boolean {\r\n        return this.mod.ccall('duckdb_web_pending_query_cancel', 'boolean', ['number'], [conn]);\r\n    }\r\n    /** Fetch query results */\r\n    public fetchQueryResults(conn: number): Uint8Array {\r\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_query_fetch_results', ['number'], [conn]);\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        const res = copyBuffer(this.mod, d, n);\r\n        dropResponseBuffers(this.mod);\r\n        return res;\r\n    }\r\n    /** Get table names */\r\n    public getTableNames(conn: number, text: string): string[] {\r\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_get_tablenames', ['number', 'string'], [conn, text]);\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        const res = readString(this.mod, d, n);\r\n        dropResponseBuffers(this.mod);\r\n        return JSON.parse(res) as string[];\r\n    }\r\n\r\n    /** Create a scalar function */\r\n    public createScalarFunction(\r\n        conn: number,\r\n        name: string,\r\n        returns: arrow.DataType,\r\n        func: (...args: any[]) => void,\r\n    ): void {\r\n        const decl: UDFFunctionDeclaration = {\r\n            functionId: this._nextUDFId,\r\n            name: name,\r\n            returnType: arrowToSQLType(returns),\r\n        };\r\n        const def: UDFFunction = {\r\n            functionId: decl.functionId,\r\n            connectionId: conn,\r\n            name: name,\r\n            returnType: returns,\r\n            func,\r\n        };\r\n        this._nextUDFId += 1;\r\n        const [s, d, n] = callSRet(\r\n            this.mod,\r\n            'duckdb_web_udf_scalar_create',\r\n            ['number', 'string'],\r\n            [conn, JSON.stringify(decl)],\r\n        );\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        dropResponseBuffers(this.mod);\r\n        globalThis.DUCKDB_RUNTIME._udfFunctions = (globalThis.DUCKDB_RUNTIME._udfFunctions || new Map()).set(\r\n            def.functionId,\r\n            def,\r\n        );\r\n        if (this.pthread) {\r\n            for (const worker of [...this.pthread.runningWorkers, ...this.pthread.unusedWorkers]) {\r\n                worker.postMessage({\r\n                    cmd: 'registerUDFFunction',\r\n                    udf: def,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Prepare a statement and return its identifier */\r\n    public createPrepared(conn: number, text: string): number {\r\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_prepared_create', ['number', 'string'], [conn, text]);\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        dropResponseBuffers(this.mod);\r\n        return d;\r\n    }\r\n\r\n    /** Close a prepared statement */\r\n    public closePrepared(conn: number, statement: number): void {\r\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_prepared_close', ['number', 'number'], [conn, statement]);\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        dropResponseBuffers(this.mod);\r\n    }\r\n\r\n    /** Execute a prepared statement and return the full result */\r\n    public runPrepared(conn: number, statement: number, params: any[]): Uint8Array {\r\n        const [s, d, n] = callSRet(\r\n            this.mod,\r\n            'duckdb_web_prepared_run',\r\n            ['number', 'number', 'string'],\r\n            [conn, statement, JSON.stringify(params)],\r\n        );\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        const res = copyBuffer(this.mod, d, n);\r\n        dropResponseBuffers(this.mod);\r\n        return res;\r\n    }\r\n\r\n    /** Execute a prepared statement and stream the result */\r\n    public sendPrepared(conn: number, statement: number, params: any[]): Uint8Array {\r\n        const [s, d, n] = callSRet(\r\n            this.mod,\r\n            'duckdb_web_prepared_send',\r\n            ['number', 'number', 'string'],\r\n            [conn, statement, JSON.stringify(params)],\r\n        );\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        const res = copyBuffer(this.mod, d, n);\r\n        dropResponseBuffers(this.mod);\r\n        return res;\r\n    }\r\n\r\n    /** Insert record batches from an arrow ipc stream */\r\n    public insertArrowFromIPCStream(conn: number, buffer: Uint8Array, options?: ArrowInsertOptions): void {\r\n        if (buffer.length == 0) return;\r\n        // Store buffer\r\n        const bufferPtr = this.mod._malloc(buffer.length);\r\n        const bufferOfs = this.mod.HEAPU8.subarray(bufferPtr, bufferPtr + buffer.length);\r\n        bufferOfs.set(buffer);\r\n        const optJSON = options ? JSON.stringify(options) : '';\r\n\r\n        // Call wasm function\r\n        const [s, d, n] = callSRet(\r\n            this.mod,\r\n            'duckdb_web_insert_arrow_from_ipc_stream',\r\n            ['number', 'number', 'number', 'string'],\r\n            [conn, bufferPtr, buffer.length, optJSON],\r\n        );\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n    }\r\n\r\n    /** Insert csv from path */\r\n    public insertCSVFromPath(conn: number, path: string, options: CSVInsertOptions): void {\r\n        // Stringify options\r\n        if (options.columns !== undefined) {\r\n            options.columnsFlat = [];\r\n            for (const k in options.columns) {\r\n                options.columnsFlat.push(arrowToSQLField(k, options.columns[k]));\r\n            }\r\n        }\r\n        const opt = { ...options } as any;\r\n        opt.columns = opt.columnsFlat;\r\n        delete opt.columnsFlat;\r\n        const optJSON = JSON.stringify(opt);\r\n\r\n        // Call wasm function\r\n        const [s, d, n] = callSRet(\r\n            this.mod,\r\n            'duckdb_web_insert_csv_from_path',\r\n            ['number', 'string', 'string'],\r\n            [conn, path, optJSON],\r\n        );\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n    }\r\n    /** Insert json from path */\r\n    public insertJSONFromPath(conn: number, path: string, options: JSONInsertOptions): void {\r\n        // Stringify options\r\n        if (options.columns !== undefined) {\r\n            options.columnsFlat = [];\r\n            for (const k in options.columns) {\r\n                options.columnsFlat.push(arrowToSQLField(k, options.columns[k]));\r\n            }\r\n        }\r\n        const opt = { ...options } as any;\r\n        opt.columns = opt.columnsFlat;\r\n        delete opt.columnsFlat;\r\n        const optJSON = JSON.stringify(opt);\r\n\r\n        // Call wasm function\r\n        const [s, d, n] = callSRet(\r\n            this.mod,\r\n            'duckdb_web_insert_json_from_path',\r\n            ['number', 'string', 'string'],\r\n            [conn, path, optJSON],\r\n        );\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n    }\r\n    /** Glob file infos */\r\n    public globFiles(path: string): WebFile[] {\r\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_fs_glob_file_infos', ['string'], [path]);\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        const infoStr = readString(this.mod, d, n);\r\n        dropResponseBuffers(this.mod);\r\n        const info = JSON.parse(infoStr) as WebFile[];\r\n        if (info == null) {\r\n            return [];\r\n        }\r\n        return info;\r\n    }\r\n    /** Register a file object URL */\r\n    public registerFileURL(name: string, url: string, proto: DuckDBDataProtocol, directIO = false): void {\r\n        if (url === undefined) {\r\n            url = name;\r\n        }\r\n        const [s, d, n] = callSRet(\r\n            this.mod,\r\n            'duckdb_web_fs_register_file_url',\r\n            ['string', 'string'],\r\n            [name, url, proto, directIO],\r\n        );\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        dropResponseBuffers(this.mod);\r\n    }\r\n    /** Register file text */\r\n    public registerFileText(name: string, text: string): void {\r\n        const buffer = TEXT_ENCODER.encode(text);\r\n        this.registerFileBuffer(name, buffer);\r\n    }\r\n    /** Register a file buffer */\r\n    public registerFileBuffer(name: string, buffer: Uint8Array): void {\r\n        const ptr = this.mod._malloc(buffer.length);\r\n        const dst = this.mod.HEAPU8.subarray(ptr, ptr + buffer.length);\r\n        dst.set(buffer);\r\n        const [s, d, n] = callSRet(\r\n            this.mod,\r\n            'duckdb_web_fs_register_file_buffer',\r\n            ['string', 'number', 'number'],\r\n            [name, ptr, buffer.length],\r\n        );\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        dropResponseBuffers(this.mod);\r\n    }\r\n    /** Register a file object URL */\r\n    public registerFileHandle<HandleType>(\r\n        name: string,\r\n        handle: HandleType,\r\n        protocol: DuckDBDataProtocol,\r\n        directIO: boolean,\r\n    ): void {\r\n        const [s, d, n] = callSRet(\r\n            this.mod,\r\n            'duckdb_web_fs_register_file_url',\r\n            ['string', 'string', 'number', 'boolean'],\r\n            [name, name, protocol, directIO],\r\n        );\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        dropResponseBuffers(this.mod);\r\n        globalThis.DUCKDB_RUNTIME._files = (globalThis.DUCKDB_RUNTIME._files || new Map()).set(name, handle);\r\n        if (this.pthread) {\r\n            for (const worker of this.pthread.runningWorkers) {\r\n                worker.postMessage({\r\n                    cmd: 'registerFileHandle',\r\n                    fileName: name,\r\n                    fileHandle: handle,\r\n                });\r\n            }\r\n            for (const worker of this.pthread.unusedWorkers) {\r\n                worker.postMessage({\r\n                    cmd: 'dropFileHandle',\r\n                    fileName: name,\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /** Drop file */\r\n    public dropFile(name: string): void {\r\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_fs_drop_file', ['string'], [name]);\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        dropResponseBuffers(this.mod);\r\n    }\r\n    /** Drop files */\r\n    public dropFiles(): void {\r\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_fs_drop_files', [], []);\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        dropResponseBuffers(this.mod);\r\n    }\r\n    /** Flush all files */\r\n    public flushFiles(): void {\r\n        this.mod.ccall('duckdb_web_flush_files', null, [], []);\r\n    }\r\n    /** Write a file to a path */\r\n    public copyFileToPath(name: string, path: string): void {\r\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_copy_file_to_path', ['string', 'string'], [name, path]);\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        dropResponseBuffers(this.mod);\r\n    }\r\n    /** Write a file to a buffer */\r\n    public copyFileToBuffer(name: string): Uint8Array {\r\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_copy_file_to_buffer', ['string'], [name]);\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        const buffer = this.mod.HEAPU8.subarray(d, d + n);\r\n        const copy = new Uint8Array(buffer.length);\r\n        copy.set(buffer);\r\n        dropResponseBuffers(this.mod);\r\n        return copy;\r\n    }\r\n\r\n    /** Enable tracking of file statistics */\r\n    public collectFileStatistics(file: string, enable: boolean): void {\r\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_collect_file_stats', ['string', 'boolean'], [file, enable]);\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n    }\r\n    /** Export file statistics */\r\n    public exportFileStatistics(file: string): FileStatistics {\r\n        const [s, d, n] = callSRet(this.mod, 'duckdb_web_export_file_stats', ['string'], [file]);\r\n        if (s !== StatusCode.SUCCESS) {\r\n            throw new Error(readString(this.mod, d, n));\r\n        }\r\n        return new FileStatistics(this.mod.HEAPU8.subarray(d, d + n));\r\n    }\r\n}\r\n", "export enum LogLevel {\r\n    NONE = 0,\r\n    DEBUG = 1,\r\n    INFO = 2,\r\n    WARNING = 3,\r\n    ERROR = 4,\r\n}\r\n\r\nexport enum LogTopic {\r\n    NONE = 0,\r\n    CONNECT = 1,\r\n    DISCONNECT = 2,\r\n    OPEN = 3,\r\n    QUERY = 4,\r\n    INSTANTIATE = 5,\r\n}\r\n\r\nexport enum LogEvent {\r\n    NONE = 0,\r\n    OK = 1,\r\n    ERROR = 2,\r\n    START = 3,\r\n    RUN = 4,\r\n    CAPTURE = 5,\r\n}\r\n\r\nexport enum LogOrigin {\r\n    NONE = 0,\r\n    WEB_WORKER = 1,\r\n    NODE_WORKER = 2,\r\n    BINDINGS = 3,\r\n    ASYNC_DUCKDB = 4,\r\n}\r\n\r\nexport type LogEntry<O, T, E, V> = {\r\n    readonly timestamp: Date;\r\n    readonly level: LogLevel;\r\n    readonly origin: O;\r\n    readonly topic: T;\r\n    readonly event: E;\r\n    readonly value: V;\r\n};\r\n\r\nexport type LogEntryVariant =\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.INSTANTIATE, LogEvent.ERROR, string>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.START, void>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.OK, void>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.ERROR, void>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.CONNECT, LogEvent.OK, void>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.CONNECT, LogEvent.ERROR, void>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.DISCONNECT, LogEvent.OK, void>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.DISCONNECT, LogEvent.ERROR, void>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.START, void>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.OK, void>\r\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.ERROR, void>\r\n    | LogEntry<LogOrigin.ASYNC_DUCKDB, LogTopic.QUERY, LogEvent.RUN, string>;\r\n\r\nexport interface Logger {\r\n    log(entry: LogEntryVariant): void;\r\n}\r\n\r\nexport class VoidLogger implements Logger {\r\n    public log(_entry: LogEntryVariant): void {}\r\n}\r\n\r\nexport class ConsoleLogger implements Logger {\r\n    constructor(protected level: LogLevel = LogLevel.INFO) {}\r\n    public log(entry: LogEntryVariant): void {\r\n        if (entry.level >= this.level) {\r\n            console.log(entry);\r\n        }\r\n    }\r\n}\r\n\r\nexport function getLogLevelLabel(level: LogLevel): string {\r\n    switch (level) {\r\n        case LogLevel.NONE:\r\n            return 'NONE';\r\n        case LogLevel.DEBUG:\r\n            return 'DEBUG';\r\n        case LogLevel.INFO:\r\n            return 'INFO';\r\n        case LogLevel.WARNING:\r\n            return 'WARNING';\r\n        case LogLevel.ERROR:\r\n            return 'ERROR';\r\n        default:\r\n            return '?';\r\n    }\r\n}\r\n\r\nexport function getLogEventLabel(event: LogEvent): string {\r\n    switch (event) {\r\n        case LogEvent.NONE:\r\n            return 'NONE';\r\n        case LogEvent.OK:\r\n            return 'OK';\r\n        case LogEvent.ERROR:\r\n            return 'ERROR';\r\n        case LogEvent.START:\r\n            return 'START';\r\n        case LogEvent.RUN:\r\n            return 'RUN';\r\n        case LogEvent.CAPTURE:\r\n            return 'CAPTURE';\r\n        default:\r\n            return '?';\r\n    }\r\n}\r\n\r\nexport function getLogTopicLabel(topic: LogTopic): string {\r\n    switch (topic) {\r\n        case LogTopic.CONNECT:\r\n            return 'CONNECT';\r\n        case LogTopic.DISCONNECT:\r\n            return 'DISCONNECT';\r\n        case LogTopic.INSTANTIATE:\r\n            return 'INSTANTIATE';\r\n        case LogTopic.OPEN:\r\n            return 'OPEN';\r\n        case LogTopic.QUERY:\r\n            return 'QUERY';\r\n        default:\r\n            return '?';\r\n    }\r\n}\r\n\r\nexport function getLogOriginLabel(origin: LogOrigin): string {\r\n    switch (origin) {\r\n        case LogOrigin.NONE:\r\n            return 'NONE';\r\n        case LogOrigin.WEB_WORKER:\r\n            return 'WEB WORKER';\r\n        case LogOrigin.NODE_WORKER:\r\n            return 'NODE WORKER';\r\n        case LogOrigin.BINDINGS:\r\n            return 'DUCKDB BINDINGS';\r\n        case LogOrigin.ASYNC_DUCKDB:\r\n            return 'DUCKDB';\r\n        default:\r\n            return '?';\r\n    }\r\n}\r\n", "export const bigInt=()=>(async e=>{try{return(await WebAssembly.instantiate(e)).instance.exports.b(BigInt(0))===BigInt(0)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,126,1,126,3,2,1,0,7,5,1,1,98,0,0,10,6,1,4,0,32,0,11])),bulkMemory=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),exceptions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),extendedConst=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,0,1,11,9,1,0,65,1,65,2,106,11,0])),gc=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,10,2,95,1,125,0,96,0,1,107,0,3,2,1,1,10,12,1,10,0,67,0,0,0,0,251,7,0,11])),memory64=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,4,1])),multiValue=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,0,2,127,127,3,2,1,0,10,8,1,6,0,65,0,65,0,11])),mutableGlobals=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1])),referenceTypes=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,7,1,5,0,208,112,26,11])),relaxedSimd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,15,1,13,0,65,1,253,15,65,2,253,15,253,128,2,11])),saturatedFloatToInt=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,12,1,10,0,67,0,0,0,0,252,0,26,11])),signExtensions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,65,0,192,26,11])),simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),streamingCompilation=()=>(async()=>\"compileStreaming\"in WebAssembly)(),tailCall=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,6,1,4,0,18,0,11])),threads=()=>(async e=>{try{return\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]));\n", "import * as check from 'wasm-feature-detect';\r\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\r\n\r\n// Platform check taken from here:\r\n// https://github.com/xtermjs/xterm.js/blob/master/src/common/Platform.ts#L21\r\n\r\ninterface INavigator {\r\n    userAgent: string;\r\n    language: string;\r\n    platform: string;\r\n}\r\n\r\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\r\n// we want this module to live in common.\r\ndeclare const navigator: INavigator;\r\n\r\nexport const isNode = () => (typeof navigator === 'undefined' ? true : false);\r\nconst userAgent = () => (isNode() ? 'node' : navigator.userAgent);\r\nexport const isFirefox = () => userAgent().includes('Firefox');\r\nexport const isSafari = () => /^((?!chrome|android).)*safari/i.test(userAgent());\r\n\r\nexport interface DuckDBBundles {\r\n    mvp: {\r\n        mainModule: string;\r\n        mainWorker: string;\r\n    };\r\n    eh?: {\r\n        mainModule: string;\r\n        mainWorker: string;\r\n    };\r\n    coi?: {\r\n        mainModule: string;\r\n        mainWorker: string;\r\n        pthreadWorker: string;\r\n    };\r\n}\r\n\r\nexport function getJsDelivrBundles(): DuckDBBundles {\r\n    const jsdelivr_dist_url = `https://cdn.jsdelivr.net/npm/${PACKAGE_NAME}@${PACKAGE_VERSION}/dist/`;\r\n    return {\r\n        mvp: {\r\n            mainModule: `${jsdelivr_dist_url}duckdb-mvp.wasm`,\r\n            mainWorker: `${jsdelivr_dist_url}duckdb-browser-mvp.worker.js`,\r\n        },\r\n        eh: {\r\n            mainModule: `${jsdelivr_dist_url}duckdb-eh.wasm`,\r\n            mainWorker: `${jsdelivr_dist_url}duckdb-browser-eh.worker.js`,\r\n        },\r\n        // COI is still experimental, let the user opt in explicitly\r\n    };\r\n}\r\n\r\nexport interface DuckDBBundle {\r\n    mainModule: string;\r\n    mainWorker: string | null;\r\n    pthreadWorker: string | null;\r\n}\r\n\r\nexport interface PlatformFeatures {\r\n    bigInt64Array: boolean;\r\n    crossOriginIsolated: boolean;\r\n    wasmExceptions: boolean;\r\n    wasmSIMD: boolean;\r\n    wasmBulkMemory: boolean;\r\n    wasmThreads: boolean;\r\n}\r\n\r\nlet bigInt64Array: boolean | null = null;\r\nlet wasmExceptions: boolean | null = null;\r\nlet wasmThreads: boolean | null = null;\r\nlet wasmSIMD: boolean | null = null;\r\nlet wasmBulkMemory: boolean | null = null;\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\ndeclare namespace globalThis {\r\n    let crossOriginIsolated: boolean;\r\n}\r\n\r\nexport async function getPlatformFeatures(): Promise<PlatformFeatures> {\r\n    if (bigInt64Array == null) {\r\n        bigInt64Array = typeof BigInt64Array != 'undefined';\r\n    }\r\n    if (wasmExceptions == null) {\r\n        wasmExceptions = await check.exceptions();\r\n    }\r\n    if (wasmThreads == null) {\r\n        wasmThreads = await check.threads();\r\n    }\r\n    if (wasmSIMD == null) {\r\n        wasmSIMD = await check.simd();\r\n    }\r\n    if (wasmBulkMemory == null) {\r\n        wasmBulkMemory = await check.bulkMemory();\r\n    }\r\n    return {\r\n        bigInt64Array: bigInt64Array!,\r\n        crossOriginIsolated: isNode() || globalThis.crossOriginIsolated || false,\r\n        wasmExceptions: wasmExceptions!,\r\n        wasmSIMD: wasmSIMD!,\r\n        wasmThreads: wasmThreads!,\r\n        wasmBulkMemory: wasmBulkMemory!,\r\n    };\r\n}\r\n\r\nexport async function selectBundle(bundles: DuckDBBundles): Promise<DuckDBBundle> {\r\n    const platform = await getPlatformFeatures();\r\n    if (platform.wasmExceptions) {\r\n        if (platform.wasmSIMD && platform.wasmThreads && platform.crossOriginIsolated && bundles.coi) {\r\n            return {\r\n                mainModule: bundles.coi.mainModule,\r\n                mainWorker: bundles.coi.mainWorker,\r\n                pthreadWorker: bundles.coi.pthreadWorker,\r\n            };\r\n        }\r\n        if (bundles.eh) {\r\n            return {\r\n                mainModule: bundles.eh.mainModule,\r\n                mainWorker: bundles.eh.mainWorker,\r\n                pthreadWorker: null,\r\n            };\r\n        }\r\n    }\r\n    return {\r\n        mainModule: bundles.mvp.mainModule,\r\n        mainWorker: bundles.mvp.mainWorker,\r\n        pthreadWorker: null,\r\n    };\r\n}\r\n", "import fs from 'fs';\r\nimport {\r\n    DuckDBRuntime,\r\n    DuckDBFileInfo,\r\n    callSRet,\r\n    dropResponseBuffers,\r\n    failWith,\r\n    readString,\r\n    decodeText,\r\n    DuckDBDataProtocol,\r\n    FileFlags,\r\n} from './runtime';\r\nimport { StatusCode } from '../status';\r\nimport { DuckDBModule } from './duckdb_module';\r\nimport * as fg from 'fast-glob';\r\nimport * as udf from './udf_runtime';\r\n\r\nexport const NODE_RUNTIME: DuckDBRuntime & {\r\n    _filesById: Map<number, any>;\r\n    _fileInfoCache: Map<number, DuckDBFileInfo>;\r\n\r\n    resolveFileInfo(mod: DuckDBModule, fileId: number): DuckDBFileInfo | null;\r\n} = {\r\n    _files: new Map<string, any>(),\r\n    _filesById: new Map<number, any>(),\r\n    _fileInfoCache: new Map<number, DuckDBFileInfo>(),\r\n    _udfFunctions: new Map(),\r\n\r\n    resolveFileInfo(mod: DuckDBModule, fileId: number): DuckDBFileInfo | null {\r\n        try {\r\n            const cached = NODE_RUNTIME._fileInfoCache.get(fileId);\r\n            const [s, d, n] = callSRet(\r\n                mod,\r\n                'duckdb_web_fs_get_file_info_by_id',\r\n                ['number', 'number'],\r\n                [fileId, cached?.cacheEpoch || 0],\r\n            );\r\n            if (s !== StatusCode.SUCCESS) {\r\n                failWith(mod, readString(mod, d, n));\r\n                return null;\r\n            } else if (n === 0) {\r\n                // Epoch is up to date with WASM\r\n                dropResponseBuffers(mod);\r\n                return cached!;\r\n            }\r\n            const infoStr = readString(mod, d, n);\r\n            dropResponseBuffers(mod);\r\n            const info = JSON.parse(infoStr) as DuckDBFileInfo;\r\n            if (info == null) return null;\r\n            NODE_RUNTIME._fileInfoCache.set(fileId, info);\r\n            return info as DuckDBFileInfo;\r\n        } catch (e: any) {\r\n            failWith(mod, e.toString());\r\n            return null;\r\n        }\r\n    },\r\n    testPlatformFeature: (_mod: DuckDBModule, feature: number): boolean => {\r\n        switch (feature) {\r\n            case 1:\r\n                return typeof BigInt64Array !== 'undefined';\r\n            default:\r\n                console.warn(`test for unknown feature: ${feature}`);\r\n                return false;\r\n        }\r\n    },\r\n    getDefaultDataProtocol(mod: DuckDBModule): number {\r\n        return DuckDBDataProtocol.NODE_FS;\r\n    },\r\n    openFile(mod: DuckDBModule, fileId: number, flags: FileFlags): number {\r\n        try {\r\n            NODE_RUNTIME._fileInfoCache.delete(fileId);\r\n            const file = NODE_RUNTIME.resolveFileInfo(mod, fileId);\r\n            switch (file?.dataProtocol) {\r\n                // Native file\r\n                case DuckDBDataProtocol.NODE_FS: {\r\n                    let fd = NODE_RUNTIME._files?.get(file.dataUrl!);\r\n                    if (fd === null || fd === undefined) {\r\n                        fd = fs.openSync(\r\n                            file.dataUrl!,\r\n                            fs.constants.O_CREAT | fs.constants.O_RDWR,\r\n                            fs.constants.S_IRUSR | fs.constants.S_IWUSR,\r\n                        );\r\n                        NODE_RUNTIME._filesById?.set(file.fileId!, fd);\r\n                    }\r\n                    const fileSize = fs.fstatSync(fd).size;\r\n                    const result = mod._malloc(2 * 8);\r\n                    mod.HEAPF64[(result >> 3) + 0] = +fileSize;\r\n                    mod.HEAPF64[(result >> 3) + 1] = 0;\r\n                    return result;\r\n                }\r\n                case DuckDBDataProtocol.BROWSER_FILEREADER:\r\n                case DuckDBDataProtocol.BROWSER_FSACCESS:\r\n                case DuckDBDataProtocol.HTTP:\r\n                case DuckDBDataProtocol.S3:\r\n                    failWith(mod, 'Unsupported data protocol');\r\n            }\r\n        } catch (e: any) {\r\n            failWith(mod, e.toString());\r\n        }\r\n        return 0;\r\n    },\r\n    syncFile: (_mod: DuckDBModule, _fileId: number) => {},\r\n    closeFile: (mod: DuckDBModule, fileId: number) => {\r\n        try {\r\n            const fileInfo = NODE_RUNTIME._fileInfoCache.get(fileId);\r\n            NODE_RUNTIME._fileInfoCache.delete(fileId);\r\n            switch (fileInfo?.dataProtocol) {\r\n                case DuckDBDataProtocol.NODE_FS: {\r\n                    const fileHandle = NODE_RUNTIME._filesById.get(fileId);\r\n                    NODE_RUNTIME._filesById.delete(fileId);\r\n                    if (fileHandle !== null && fileHandle !== undefined) {\r\n                        fs.closeSync(fileHandle);\r\n                    }\r\n                    break;\r\n                }\r\n                case DuckDBDataProtocol.BROWSER_FILEREADER:\r\n                case DuckDBDataProtocol.BROWSER_FSACCESS:\r\n                case DuckDBDataProtocol.HTTP:\r\n                case DuckDBDataProtocol.S3:\r\n                    break;\r\n            }\r\n        } catch (e: any) {\r\n            failWith(mod, e.toString());\r\n        }\r\n        return 0;\r\n    },\r\n    truncateFile: (mod: DuckDBModule, fileId: number, newSize: number) => {\r\n        try {\r\n            const file = NODE_RUNTIME.resolveFileInfo(mod, fileId);\r\n            switch (file?.dataProtocol) {\r\n                case DuckDBDataProtocol.NODE_FS: {\r\n                    fs.truncateSync(file.dataUrl!, newSize);\r\n                    break;\r\n                }\r\n                case DuckDBDataProtocol.BROWSER_FILEREADER:\r\n                case DuckDBDataProtocol.BROWSER_FSACCESS:\r\n                case DuckDBDataProtocol.HTTP:\r\n                case DuckDBDataProtocol.S3:\r\n                    failWith(mod, 'Unsupported data protocol');\r\n            }\r\n        } catch (e: any) {\r\n            failWith(mod, e.toString());\r\n        }\r\n        return 0;\r\n    },\r\n    readFile: (mod: DuckDBModule, fileId: number, buf: number, bytes: number, location: number) => {\r\n        try {\r\n            const file = NODE_RUNTIME.resolveFileInfo(mod, fileId);\r\n            switch (file?.dataProtocol) {\r\n                case DuckDBDataProtocol.NODE_FS: {\r\n                    const fileHandle = NODE_RUNTIME._filesById.get(fileId);\r\n                    if (fileHandle === null || fileHandle === undefined) {\r\n                        failWith(mod, `File ${fileId} is missing a file descriptor`);\r\n                        return 0;\r\n                    }\r\n                    return fs.readSync(fileHandle, mod.HEAPU8, buf, bytes, location);\r\n                }\r\n                case DuckDBDataProtocol.BROWSER_FILEREADER:\r\n                case DuckDBDataProtocol.BROWSER_FSACCESS:\r\n                case DuckDBDataProtocol.HTTP:\r\n                case DuckDBDataProtocol.S3:\r\n                    failWith(mod, 'Unsupported data protocol');\r\n            }\r\n        } catch (e: any) {\r\n            failWith(mod, e.toString());\r\n        }\r\n        return 0;\r\n    },\r\n    writeFile: (mod: DuckDBModule, fileId: number, buf: number, bytes: number, location: number) => {\r\n        try {\r\n            const file = NODE_RUNTIME.resolveFileInfo(mod, fileId);\r\n            switch (file?.dataProtocol) {\r\n                case DuckDBDataProtocol.NODE_FS: {\r\n                    const fileHandle = NODE_RUNTIME._filesById.get(fileId);\r\n                    if (fileHandle === null || fileHandle === undefined) {\r\n                        failWith(mod, `File ${fileId} is missing a file descriptor`);\r\n                        return 0;\r\n                    }\r\n                    const src = mod.HEAPU8.subarray(buf, buf + bytes);\r\n                    return fs.writeSync(fileHandle, src, 0, src.length, location);\r\n                }\r\n                case DuckDBDataProtocol.BROWSER_FILEREADER:\r\n                case DuckDBDataProtocol.BROWSER_FSACCESS:\r\n                case DuckDBDataProtocol.HTTP:\r\n                case DuckDBDataProtocol.S3:\r\n                    failWith(mod, 'Unsupported data protocol');\r\n            }\r\n        } catch (e: any) {\r\n            failWith(mod, e.toString());\r\n        }\r\n        return 0;\r\n    },\r\n    getLastFileModificationTime: (mod: DuckDBModule, fileId: number) => {\r\n        try {\r\n            const file = NODE_RUNTIME.resolveFileInfo(mod, fileId);\r\n            switch (file?.dataProtocol) {\r\n                case DuckDBDataProtocol.NODE_FS: {\r\n                    const fileHandle = NODE_RUNTIME._filesById.get(fileId);\r\n                    if (fileHandle === null || fileHandle === undefined) {\r\n                        failWith(mod, `File ${fileId} is missing a file descriptor`);\r\n                        return 0;\r\n                    }\r\n                    return fs.fstatSync(fileHandle!).mtime.getTime();\r\n                }\r\n                case DuckDBDataProtocol.BROWSER_FILEREADER:\r\n                case DuckDBDataProtocol.BROWSER_FSACCESS:\r\n                case DuckDBDataProtocol.HTTP:\r\n                case DuckDBDataProtocol.S3:\r\n                    failWith(mod, 'Unsupported data protocol');\r\n            }\r\n        } catch (e: any) {\r\n            failWith(mod, e.toString());\r\n        }\r\n        return 0;\r\n    },\r\n\r\n    checkDirectory: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\r\n        try {\r\n            const path = decodeText(mod.HEAPU8.subarray(pathPtr, pathPtr + pathLen));\r\n            return fs.existsSync(path);\r\n        } catch (e: any) {\r\n            failWith(mod, e.toString());\r\n            return false;\r\n        }\r\n    },\r\n    createDirectory: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\r\n        try {\r\n            const path = decodeText(mod.HEAPU8.subarray(pathPtr, pathPtr + pathLen));\r\n            return fs.mkdirSync(path);\r\n        } catch (e: any) {\r\n            failWith(mod, e.toString());\r\n            return 0;\r\n        }\r\n    },\r\n    removeDirectory: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\r\n        try {\r\n            const path = decodeText(mod.HEAPU8.subarray(pathPtr, pathPtr + pathLen));\r\n            return fs.rmdirSync(path);\r\n        } catch (e: any) {\r\n            failWith(mod, e.toString());\r\n            return 0;\r\n        }\r\n    },\r\n    listDirectoryEntries: (mod: DuckDBModule, _pathPtr: number, _pathLen: number) => {\r\n        failWith(mod, 'Not Implemented');\r\n        return false;\r\n    },\r\n    glob: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\r\n        try {\r\n            const path = readString(mod, pathPtr, pathLen);\r\n            const entries = fg.sync([path], { dot: true });\r\n            for (const entry of entries) {\r\n                mod.ccall('duckdb_web_fs_glob_add_path', null, ['string'], [entry]);\r\n            }\r\n        } catch (e: any) {\r\n            failWith(mod, e.toString());\r\n            return 0;\r\n        }\r\n    },\r\n    moveFile: (mod: DuckDBModule, fromPtr: number, fromLen: number, toPtr: number, toLen: number) => {\r\n        const from = readString(mod, fromPtr, fromLen);\r\n        const to = readString(mod, toPtr, toLen);\r\n        const handle = NODE_RUNTIME._files?.get(from);\r\n        if (handle !== undefined) {\r\n            NODE_RUNTIME._files!.delete(handle);\r\n            NODE_RUNTIME._files!.set(to, handle);\r\n        }\r\n        for (const [key, value] of NODE_RUNTIME._fileInfoCache?.entries() || []) {\r\n            if (value.dataUrl == from) {\r\n                NODE_RUNTIME._fileInfoCache.delete(key);\r\n                break;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n    checkFile: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\r\n        try {\r\n            const path = decodeText(mod.HEAPU8.subarray(pathPtr, pathPtr + pathLen));\r\n            return fs.existsSync(path);\r\n        } catch (e: any) {\r\n            failWith(mod, e.toString());\r\n            return false;\r\n        }\r\n    },\r\n    removeFile: (mod: DuckDBModule, pathPtr: number, pathLen: number) => {\r\n        try {\r\n            const path = decodeText(mod.HEAPU8.subarray(pathPtr, pathPtr + pathLen));\r\n            return fs.rmSync(path);\r\n        } catch (e: any) {\r\n            failWith(mod, e.toString());\r\n            return 0;\r\n        }\r\n    },\r\n    callScalarUDF: (\r\n        mod: DuckDBModule,\r\n        response: number,\r\n        funcId: number,\r\n        descPtr: number,\r\n        descSize: number,\r\n        ptrsPtr: number,\r\n        ptrsSize: number,\r\n    ): void => {\r\n        udf.callScalarUDF(NODE_RUNTIME, mod, response, funcId, descPtr, descSize, ptrsPtr, ptrsSize);\r\n    },\r\n};\r\n\r\nexport default NODE_RUNTIME;\r\n", "\nvar DuckDB = (() => {\n  var _scriptDir = import.meta.url;\n  \n  return (\nasync function(DuckDB = {})  {\n\nvar Module = typeof DuckDB != \"undefined\" ? DuckDB : {};\n\nvar readyPromiseResolve, readyPromiseReject;\n\nModule[\"ready\"] = new Promise((resolve, reject) => {\n readyPromiseResolve = resolve;\n readyPromiseReject = reject;\n});\n\n[ \"_main\", \"_malloc\", \"_free\", \"_duckdb_web_clear_response\", \"_duckdb_web_collect_file_stats\", \"_duckdb_web_connect\", \"_duckdb_web_copy_file_to_buffer\", \"_duckdb_web_copy_file_to_path\", \"_duckdb_web_disconnect\", \"_duckdb_web_export_file_stats\", \"_duckdb_web_fail_with\", \"_duckdb_web_flush_file\", \"_duckdb_web_flush_files\", \"_duckdb_web_fs_drop_file\", \"_duckdb_web_fs_drop_files\", \"_duckdb_web_fs_get_file_info_by_id\", \"_duckdb_web_fs_get_file_info_by_name\", \"_duckdb_web_fs_glob_add_path\", \"_duckdb_web_fs_glob_file_infos\", \"_duckdb_web_fs_register_file_buffer\", \"_duckdb_web_fs_register_file_url\", \"_duckdb_web_get_feature_flags\", \"_duckdb_web_get_global_file_info\", \"_duckdb_web_get_tablenames\", \"_duckdb_web_get_version\", \"_duckdb_web_insert_arrow_from_ipc_stream\", \"_duckdb_web_insert_csv_from_path\", \"_duckdb_web_insert_json_from_path\", \"_duckdb_web_open\", \"_duckdb_web_pending_query_cancel\", \"_duckdb_web_pending_query_poll\", \"_duckdb_web_pending_query_start\", \"_duckdb_web_prepared_close\", \"_duckdb_web_prepared_create\", \"_duckdb_web_prepared_run\", \"_duckdb_web_prepared_send\", \"_duckdb_web_query_fetch_results\", \"_duckdb_web_query_run\", \"_duckdb_web_reset\", \"_duckdb_web_tokenize\", \"_duckdb_web_udf_scalar_create\", \"_fflush\", \"onRuntimeInitialized\" ].forEach(prop => {\n if (!Object.getOwnPropertyDescriptor(Module[\"ready\"], prop)) {\n  Object.defineProperty(Module[\"ready\"], prop, {\n   get: () => abort(\"You are getting \" + prop + \" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\"),\n   set: () => abort(\"You are setting \" + prop + \" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")\n  });\n }\n});\n\nvar moduleOverrides = Object.assign({}, Module);\n\nvar arguments_ = [];\n\nvar thisProgram = \"./this.program\";\n\nvar quit_ = (status, toThrow) => {\n throw toThrow;\n};\n\nvar ENVIRONMENT_IS_WEB = typeof window == \"object\";\n\nvar ENVIRONMENT_IS_WORKER = typeof importScripts == \"function\";\n\nvar ENVIRONMENT_IS_NODE = typeof process == \"object\" && typeof process.versions == \"object\" && typeof process.versions.node == \"string\";\n\nvar ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n\nif (Module[\"ENVIRONMENT\"]) {\n throw new Error(\"Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)\");\n}\n\nvar scriptDirectory = \"\";\n\nfunction locateFile(path) {\n if (Module[\"locateFile\"]) {\n  return Module[\"locateFile\"](path, scriptDirectory);\n }\n return scriptDirectory + path;\n}\n\nvar read_, readAsync, readBinary, setWindowTitle;\n\nif (ENVIRONMENT_IS_NODE) {\n if (typeof process == \"undefined\" || !process.release || process.release.name !== \"node\") throw new Error(\"not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)\");\n var nodeVersion = process.versions.node;\n var numericVersion = nodeVersion.split(\".\").slice(0, 3);\n numericVersion = numericVersion[0] * 1e4 + numericVersion[1] * 100 + numericVersion[2].split(\"-\")[0] * 1;\n var minVersion = 101900;\n if (numericVersion < 101900) {\n  throw new Error(\"This emscripten-generated code requires node v10.19.19.0 (detected v\" + nodeVersion + \")\");\n }\n const {createRequire: createRequire} = await import(\"module\");\n var require = createRequire(import.meta.url);\n var fs = require(\"fs\");\n var nodePath = require(\"path\");\n if (ENVIRONMENT_IS_WORKER) {\n  scriptDirectory = nodePath.dirname(scriptDirectory) + \"/\";\n } else {\n  scriptDirectory = require(\"url\").fileURLToPath(new URL(\"./\", import.meta.url));\n }\n read_ = (filename, binary) => {\n  filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);\n  return fs.readFileSync(filename, binary ? undefined : \"utf8\");\n };\n readBinary = filename => {\n  var ret = read_(filename, true);\n  if (!ret.buffer) {\n   ret = new Uint8Array(ret);\n  }\n  assert(ret.buffer);\n  return ret;\n };\n readAsync = (filename, onload, onerror, binary = true) => {\n  filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);\n  fs.readFile(filename, binary ? undefined : \"utf8\", (err, data) => {\n   if (err) onerror(err); else onload(binary ? data.buffer : data);\n  });\n };\n if (!Module[\"thisProgram\"] && process.argv.length > 1) {\n  thisProgram = process.argv[1].replace(/\\\\/g, \"/\");\n }\n arguments_ = process.argv.slice(2);\n quit_ = (status, toThrow) => {\n  process.exitCode = status;\n  throw toThrow;\n };\n Module[\"inspect\"] = () => \"[Emscripten Module object]\";\n} else if (ENVIRONMENT_IS_SHELL) {\n if (typeof process == \"object\" && typeof require === \"function\" || typeof window == \"object\" || typeof importScripts == \"function\") throw new Error(\"not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)\");\n if (typeof read != \"undefined\") {\n  read_ = f => {\n   return read(f);\n  };\n }\n readBinary = f => {\n  let data;\n  if (typeof readbuffer == \"function\") {\n   return new Uint8Array(readbuffer(f));\n  }\n  data = read(f, \"binary\");\n  assert(typeof data == \"object\");\n  return data;\n };\n readAsync = (f, onload, onerror) => {\n  setTimeout(() => onload(readBinary(f)), 0);\n };\n if (typeof clearTimeout == \"undefined\") {\n  globalThis.clearTimeout = id => {};\n }\n if (typeof scriptArgs != \"undefined\") {\n  arguments_ = scriptArgs;\n } else if (typeof arguments != \"undefined\") {\n  arguments_ = arguments;\n }\n if (typeof quit == \"function\") {\n  quit_ = (status, toThrow) => {\n   setTimeout(() => {\n    if (!(toThrow instanceof ExitStatus)) {\n     let toLog = toThrow;\n     if (toThrow && typeof toThrow == \"object\" && toThrow.stack) {\n      toLog = [ toThrow, toThrow.stack ];\n     }\n     err(`exiting due to exception: ${toLog}`);\n    }\n    quit(status);\n   });\n   throw toThrow;\n  };\n }\n if (typeof print != \"undefined\") {\n  if (typeof console == \"undefined\") console = {};\n  console.log = print;\n  console.warn = console.error = typeof printErr != \"undefined\" ? printErr : print;\n }\n} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n if (ENVIRONMENT_IS_WORKER) {\n  scriptDirectory = self.location.href;\n } else if (typeof document != \"undefined\" && document.currentScript) {\n  scriptDirectory = document.currentScript.src;\n }\n if (_scriptDir) {\n  scriptDirectory = _scriptDir;\n }\n if (scriptDirectory.indexOf(\"blob:\") !== 0) {\n  scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, \"\").lastIndexOf(\"/\") + 1);\n } else {\n  scriptDirectory = \"\";\n }\n if (!(typeof window == \"object\" || typeof importScripts == \"function\")) throw new Error(\"not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)\");\n {\n  read_ = url => {\n   var xhr = new XMLHttpRequest();\n   xhr.open(\"GET\", url, false);\n   xhr.send(null);\n   return xhr.responseText;\n  };\n  if (ENVIRONMENT_IS_WORKER) {\n   readBinary = url => {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url, false);\n    xhr.responseType = \"arraybuffer\";\n    xhr.send(null);\n    return new Uint8Array(xhr.response);\n   };\n  }\n  readAsync = (url, onload, onerror) => {\n   var xhr = new XMLHttpRequest();\n   xhr.open(\"GET\", url, true);\n   xhr.responseType = \"arraybuffer\";\n   xhr.onload = () => {\n    if (xhr.status == 200 || xhr.status == 0 && xhr.response) {\n     onload(xhr.response);\n     return;\n    }\n    onerror();\n   };\n   xhr.onerror = onerror;\n   xhr.send(null);\n  };\n }\n setWindowTitle = title => document.title = title;\n} else {\n throw new Error(\"environment detection error\");\n}\n\nvar out = Module[\"print\"] || console.log.bind(console);\n\nvar err = Module[\"printErr\"] || console.error.bind(console);\n\nObject.assign(Module, moduleOverrides);\n\nmoduleOverrides = null;\n\ncheckIncomingModuleAPI();\n\nif (Module[\"arguments\"]) arguments_ = Module[\"arguments\"];\n\nlegacyModuleProp(\"arguments\", \"arguments_\");\n\nif (Module[\"thisProgram\"]) thisProgram = Module[\"thisProgram\"];\n\nlegacyModuleProp(\"thisProgram\", \"thisProgram\");\n\nif (Module[\"quit\"]) quit_ = Module[\"quit\"];\n\nlegacyModuleProp(\"quit\", \"quit_\");\n\nassert(typeof Module[\"memoryInitializerPrefixURL\"] == \"undefined\", \"Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead\");\n\nassert(typeof Module[\"pthreadMainPrefixURL\"] == \"undefined\", \"Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead\");\n\nassert(typeof Module[\"cdInitializerPrefixURL\"] == \"undefined\", \"Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead\");\n\nassert(typeof Module[\"filePackagePrefixURL\"] == \"undefined\", \"Module.filePackagePrefixURL option was removed, use Module.locateFile instead\");\n\nassert(typeof Module[\"read\"] == \"undefined\", \"Module.read option was removed (modify read_ in JS)\");\n\nassert(typeof Module[\"readAsync\"] == \"undefined\", \"Module.readAsync option was removed (modify readAsync in JS)\");\n\nassert(typeof Module[\"readBinary\"] == \"undefined\", \"Module.readBinary option was removed (modify readBinary in JS)\");\n\nassert(typeof Module[\"setWindowTitle\"] == \"undefined\", \"Module.setWindowTitle option was removed (modify setWindowTitle in JS)\");\n\nassert(typeof Module[\"TOTAL_MEMORY\"] == \"undefined\", \"Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY\");\n\nlegacyModuleProp(\"read\", \"read_\");\n\nlegacyModuleProp(\"readAsync\", \"readAsync\");\n\nlegacyModuleProp(\"readBinary\", \"readBinary\");\n\nlegacyModuleProp(\"setWindowTitle\", \"setWindowTitle\");\n\nvar IDBFS = \"IDBFS is no longer included by default; build with -lidbfs.js\";\n\nvar PROXYFS = \"PROXYFS is no longer included by default; build with -lproxyfs.js\";\n\nvar WORKERFS = \"WORKERFS is no longer included by default; build with -lworkerfs.js\";\n\nvar NODEFS = \"NODEFS is no longer included by default; build with -lnodefs.js\";\n\nassert(!ENVIRONMENT_IS_SHELL, \"shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.\");\n\nvar wasmBinary;\n\nif (Module[\"wasmBinary\"]) wasmBinary = Module[\"wasmBinary\"];\n\nlegacyModuleProp(\"wasmBinary\", \"wasmBinary\");\n\nvar noExitRuntime = Module[\"noExitRuntime\"] || true;\n\nlegacyModuleProp(\"noExitRuntime\", \"noExitRuntime\");\n\nif (typeof WebAssembly != \"object\") {\n abort(\"no native wasm support detected\");\n}\n\nvar wasmMemory;\n\nvar ABORT = false;\n\nvar EXITSTATUS;\n\nfunction assert(condition, text) {\n if (!condition) {\n  abort(\"Assertion failed\" + (text ? \": \" + text : \"\"));\n }\n}\n\nvar HEAP, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;\n\nfunction updateMemoryViews() {\n var b = wasmMemory.buffer;\n Module[\"HEAP8\"] = HEAP8 = new Int8Array(b);\n Module[\"HEAP16\"] = HEAP16 = new Int16Array(b);\n Module[\"HEAP32\"] = HEAP32 = new Int32Array(b);\n Module[\"HEAPU8\"] = HEAPU8 = new Uint8Array(b);\n Module[\"HEAPU16\"] = HEAPU16 = new Uint16Array(b);\n Module[\"HEAPU32\"] = HEAPU32 = new Uint32Array(b);\n Module[\"HEAPF32\"] = HEAPF32 = new Float32Array(b);\n Module[\"HEAPF64\"] = HEAPF64 = new Float64Array(b);\n}\n\nassert(!Module[\"STACK_SIZE\"], \"STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time\");\n\nassert(typeof Int32Array != \"undefined\" && typeof Float64Array !== \"undefined\" && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined, \"JS engine does not provide full typed array support\");\n\nassert(!Module[\"wasmMemory\"], \"Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally\");\n\nassert(!Module[\"INITIAL_MEMORY\"], \"Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically\");\n\nvar wasmTable;\n\nfunction writeStackCookie() {\n var max = _emscripten_stack_get_end();\n assert((max & 3) == 0);\n if (max == 0) {\n  max += 4;\n }\n HEAPU32[max >>> 2] = 34821223;\n HEAPU32[max + 4 >>> 2] = 2310721022;\n HEAPU32[0 >>> 2] = 1668509029;\n}\n\nfunction checkStackCookie() {\n if (ABORT) return;\n var max = _emscripten_stack_get_end();\n if (max == 0) {\n  max += 4;\n }\n var cookie1 = HEAPU32[max >>> 2];\n var cookie2 = HEAPU32[max + 4 >>> 2];\n if (cookie1 != 34821223 || cookie2 != 2310721022) {\n  abort(`Stack overflow! Stack cookie has been overwritten at ${ptrToString(max)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${ptrToString(cookie2)} ${ptrToString(cookie1)}`);\n }\n if (HEAPU32[0 >>> 2] != 1668509029) {\n  abort(\"Runtime error: The application has corrupted its heap memory area (address zero)!\");\n }\n}\n\n(function() {\n var h16 = new Int16Array(1);\n var h8 = new Int8Array(h16.buffer);\n h16[0] = 25459;\n if (h8[0] !== 115 || h8[1] !== 99) throw \"Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)\";\n})();\n\nvar __ATPRERUN__ = [];\n\nvar __ATINIT__ = [];\n\nvar __ATMAIN__ = [];\n\nvar __ATEXIT__ = [];\n\nvar __ATPOSTRUN__ = [];\n\nvar runtimeInitialized = false;\n\nvar runtimeKeepaliveCounter = 0;\n\nfunction keepRuntimeAlive() {\n return noExitRuntime || runtimeKeepaliveCounter > 0;\n}\n\nfunction preRun() {\n if (Module[\"preRun\"]) {\n  if (typeof Module[\"preRun\"] == \"function\") Module[\"preRun\"] = [ Module[\"preRun\"] ];\n  while (Module[\"preRun\"].length) {\n   addOnPreRun(Module[\"preRun\"].shift());\n  }\n }\n callRuntimeCallbacks(__ATPRERUN__);\n}\n\nfunction initRuntime() {\n assert(!runtimeInitialized);\n runtimeInitialized = true;\n checkStackCookie();\n callRuntimeCallbacks(__ATINIT__);\n}\n\nfunction preMain() {\n checkStackCookie();\n callRuntimeCallbacks(__ATMAIN__);\n}\n\nfunction postRun() {\n checkStackCookie();\n if (Module[\"postRun\"]) {\n  if (typeof Module[\"postRun\"] == \"function\") Module[\"postRun\"] = [ Module[\"postRun\"] ];\n  while (Module[\"postRun\"].length) {\n   addOnPostRun(Module[\"postRun\"].shift());\n  }\n }\n callRuntimeCallbacks(__ATPOSTRUN__);\n}\n\nfunction addOnPreRun(cb) {\n __ATPRERUN__.unshift(cb);\n}\n\nfunction addOnInit(cb) {\n __ATINIT__.unshift(cb);\n}\n\nfunction addOnPreMain(cb) {\n __ATMAIN__.unshift(cb);\n}\n\nfunction addOnExit(cb) {}\n\nfunction addOnPostRun(cb) {\n __ATPOSTRUN__.unshift(cb);\n}\n\nassert(Math.imul, \"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill\");\n\nassert(Math.fround, \"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill\");\n\nassert(Math.clz32, \"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill\");\n\nassert(Math.trunc, \"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill\");\n\nvar runDependencies = 0;\n\nvar runDependencyWatcher = null;\n\nvar dependenciesFulfilled = null;\n\nvar runDependencyTracking = {};\n\nfunction getUniqueRunDependency(id) {\n var orig = id;\n while (1) {\n  if (!runDependencyTracking[id]) return id;\n  id = orig + Math.random();\n }\n}\n\nfunction addRunDependency(id) {\n runDependencies++;\n if (Module[\"monitorRunDependencies\"]) {\n  Module[\"monitorRunDependencies\"](runDependencies);\n }\n if (id) {\n  assert(!runDependencyTracking[id]);\n  runDependencyTracking[id] = 1;\n  if (runDependencyWatcher === null && typeof setInterval != \"undefined\") {\n   runDependencyWatcher = setInterval(() => {\n    if (ABORT) {\n     clearInterval(runDependencyWatcher);\n     runDependencyWatcher = null;\n     return;\n    }\n    var shown = false;\n    for (var dep in runDependencyTracking) {\n     if (!shown) {\n      shown = true;\n      err(\"still waiting on run dependencies:\");\n     }\n     err(\"dependency: \" + dep);\n    }\n    if (shown) {\n     err(\"(end of list)\");\n    }\n   }, 1e4);\n  }\n } else {\n  err(\"warning: run dependency added without ID\");\n }\n}\n\nfunction removeRunDependency(id) {\n runDependencies--;\n if (Module[\"monitorRunDependencies\"]) {\n  Module[\"monitorRunDependencies\"](runDependencies);\n }\n if (id) {\n  assert(runDependencyTracking[id]);\n  delete runDependencyTracking[id];\n } else {\n  err(\"warning: run dependency removed without ID\");\n }\n if (runDependencies == 0) {\n  if (runDependencyWatcher !== null) {\n   clearInterval(runDependencyWatcher);\n   runDependencyWatcher = null;\n  }\n  if (dependenciesFulfilled) {\n   var callback = dependenciesFulfilled;\n   dependenciesFulfilled = null;\n   callback();\n  }\n }\n}\n\nfunction abort(what) {\n if (Module[\"onAbort\"]) {\n  Module[\"onAbort\"](what);\n }\n what = \"Aborted(\" + what + \")\";\n err(what);\n ABORT = true;\n EXITSTATUS = 1;\n var e = new WebAssembly.RuntimeError(what);\n readyPromiseReject(e);\n throw e;\n}\n\nvar dataURIPrefix = \"data:application/octet-stream;base64,\";\n\nfunction isDataURI(filename) {\n return filename.startsWith(dataURIPrefix);\n}\n\nfunction isFileURI(filename) {\n return filename.startsWith(\"file://\");\n}\n\nfunction createExportWrapper(name, fixedasm) {\n return function() {\n  var displayName = name;\n  var asm = fixedasm;\n  if (!fixedasm) {\n   asm = Module[\"asm\"];\n  }\n  assert(runtimeInitialized, \"native function `\" + displayName + \"` called before runtime initialization\");\n  if (!asm[name]) {\n   assert(asm[name], \"exported native function `\" + displayName + \"` not found\");\n  }\n  return asm[name].apply(null, arguments);\n };\n}\n\nvar wasmBinaryFile;\n\nif (Module[\"locateFile\"]) {\n wasmBinaryFile = \"./duckdb-mvp.wasm\";\n if (!isDataURI(wasmBinaryFile)) {\n  wasmBinaryFile = locateFile(wasmBinaryFile);\n }\n} else {\n wasmBinaryFile = new URL(\"./duckdb-mvp.wasm\", import.meta.url).href;\n}\n\nfunction getBinary(file) {\n try {\n  if (file == wasmBinaryFile && wasmBinary) {\n   return new Uint8Array(wasmBinary);\n  }\n  if (readBinary) {\n   return readBinary(file);\n  }\n  throw \"both async and sync fetching of the wasm failed\";\n } catch (err) {\n  abort(err);\n }\n}\n\nfunction getBinaryPromise(binaryFile) {\n if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {\n  if (typeof fetch == \"function\") {\n   return fetch(binaryFile, {\n    credentials: \"same-origin\"\n   }).then(response => {\n    if (!response[\"ok\"]) {\n     throw \"failed to load wasm binary file at '\" + binaryFile + \"'\";\n    }\n    return response[\"arrayBuffer\"]();\n   }).catch(() => getBinary(binaryFile));\n  }\n }\n return Promise.resolve().then(() => getBinary(binaryFile));\n}\n\nfunction instantiateArrayBuffer(binaryFile, imports, receiver) {\n return getBinaryPromise(binaryFile).then(binary => {\n  return WebAssembly.instantiate(binary, imports);\n }).then(instance => {\n  return instance;\n }).then(receiver, reason => {\n  err(\"failed to asynchronously prepare wasm: \" + reason);\n  if (isFileURI(wasmBinaryFile)) {\n   err(\"warning: Loading from a file URI (\" + wasmBinaryFile + \") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing\");\n  }\n  abort(reason);\n });\n}\n\nfunction instantiateAsync(binary, binaryFile, imports, callback) {\n if (!binary && typeof WebAssembly.instantiateStreaming == \"function\" && !isDataURI(binaryFile) && !ENVIRONMENT_IS_NODE && typeof fetch == \"function\") {\n  return fetch(binaryFile, {\n   credentials: \"same-origin\"\n  }).then(response => {\n   var result = WebAssembly.instantiateStreaming(response, imports);\n   return result.then(callback, function(reason) {\n    err(\"wasm streaming compile failed: \" + reason);\n    err(\"falling back to ArrayBuffer instantiation\");\n    return instantiateArrayBuffer(binaryFile, imports, callback);\n   });\n  });\n } else {\n  return instantiateArrayBuffer(binaryFile, imports, callback);\n }\n}\n\nfunction createWasm() {\n var info = {\n  \"env\": wasmImports,\n  \"wasi_snapshot_preview1\": wasmImports\n };\n function receiveInstance(instance, module) {\n  var exports = instance.exports;\n  Module[\"asm\"] = exports;\n  wasmMemory = Module[\"asm\"][\"memory\"];\n  assert(wasmMemory, \"memory not found in wasm exports\");\n  updateMemoryViews();\n  wasmTable = Module[\"asm\"][\"__indirect_function_table\"];\n  assert(wasmTable, \"table not found in wasm exports\");\n  addOnInit(Module[\"asm\"][\"__wasm_call_ctors\"]);\n  removeRunDependency(\"wasm-instantiate\");\n  return exports;\n }\n addRunDependency(\"wasm-instantiate\");\n var trueModule = Module;\n function receiveInstantiationResult(result) {\n  assert(Module === trueModule, \"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?\");\n  trueModule = null;\n  receiveInstance(result[\"instance\"]);\n }\n if (Module[\"instantiateWasm\"]) {\n  try {\n   return Module[\"instantiateWasm\"](info, receiveInstance);\n  } catch (e) {\n   err(\"Module.instantiateWasm callback failed with error: \" + e);\n   readyPromiseReject(e);\n  }\n }\n instantiateAsync(wasmBinary, wasmBinaryFile, info, receiveInstantiationResult).catch(readyPromiseReject);\n return {};\n}\n\nvar tempDouble;\n\nvar tempI64;\n\nfunction legacyModuleProp(prop, newName) {\n if (!Object.getOwnPropertyDescriptor(Module, prop)) {\n  Object.defineProperty(Module, prop, {\n   configurable: true,\n   get: function() {\n    abort(\"Module.\" + prop + \" has been replaced with plain \" + newName + \" (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)\");\n   }\n  });\n }\n}\n\nfunction ignoredModuleProp(prop) {\n if (Object.getOwnPropertyDescriptor(Module, prop)) {\n  abort(\"`Module.\" + prop + \"` was supplied but `\" + prop + \"` not included in INCOMING_MODULE_JS_API\");\n }\n}\n\nfunction isExportedByForceFilesystem(name) {\n return name === \"FS_createPath\" || name === \"FS_createDataFile\" || name === \"FS_createPreloadedFile\" || name === \"FS_unlink\" || name === \"addRunDependency\" || name === \"FS_createLazyFile\" || name === \"FS_createDevice\" || name === \"removeRunDependency\";\n}\n\nfunction missingGlobal(sym, msg) {\n if (typeof globalThis !== \"undefined\") {\n  Object.defineProperty(globalThis, sym, {\n   configurable: true,\n   get: function() {\n    warnOnce(\"`\" + sym + \"` is not longer defined by emscripten. \" + msg);\n    return undefined;\n   }\n  });\n }\n}\n\nmissingGlobal(\"buffer\", \"Please use HEAP8.buffer or wasmMemory.buffer\");\n\nfunction missingLibrarySymbol(sym) {\n if (typeof globalThis !== \"undefined\" && !Object.getOwnPropertyDescriptor(globalThis, sym)) {\n  Object.defineProperty(globalThis, sym, {\n   configurable: true,\n   get: function() {\n    var msg = \"`\" + sym + \"` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line\";\n    var librarySymbol = sym;\n    if (!librarySymbol.startsWith(\"_\")) {\n     librarySymbol = \"$\" + sym;\n    }\n    msg += \" (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE=\" + librarySymbol + \")\";\n    if (isExportedByForceFilesystem(sym)) {\n     msg += \". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you\";\n    }\n    warnOnce(msg);\n    return undefined;\n   }\n  });\n }\n unexportedRuntimeSymbol(sym);\n}\n\nfunction unexportedRuntimeSymbol(sym) {\n if (!Object.getOwnPropertyDescriptor(Module, sym)) {\n  Object.defineProperty(Module, sym, {\n   configurable: true,\n   get: function() {\n    var msg = \"'\" + sym + \"' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)\";\n    if (isExportedByForceFilesystem(sym)) {\n     msg += \". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you\";\n    }\n    abort(msg);\n   }\n  });\n }\n}\n\nfunction dbg(text) {\n console.warn.apply(console, arguments);\n}\n\nfunction ExitStatus(status) {\n this.name = \"ExitStatus\";\n this.message = `Program terminated with exit(${status})`;\n this.status = status;\n}\n\nfunction callRuntimeCallbacks(callbacks) {\n while (callbacks.length > 0) {\n  callbacks.shift()(Module);\n }\n}\n\nfunction getValue(ptr, type = \"i8\") {\n if (type.endsWith(\"*\")) type = \"*\";\n switch (type) {\n case \"i1\":\n  return HEAP8[ptr >>> 0];\n\n case \"i8\":\n  return HEAP8[ptr >>> 0];\n\n case \"i16\":\n  return HEAP16[ptr >>> 1];\n\n case \"i32\":\n  return HEAP32[ptr >>> 2];\n\n case \"i64\":\n  abort(\"to do getValue(i64) use WASM_BIGINT\");\n\n case \"float\":\n  return HEAPF32[ptr >>> 2];\n\n case \"double\":\n  return HEAPF64[ptr >>> 3];\n\n case \"*\":\n  return HEAPU32[ptr >>> 2];\n\n default:\n  abort(`invalid type for getValue: ${type}`);\n }\n}\n\nfunction ptrToString(ptr) {\n assert(typeof ptr === \"number\");\n return \"0x\" + ptr.toString(16).padStart(8, \"0\");\n}\n\nfunction setValue(ptr, value, type = \"i8\") {\n if (type.endsWith(\"*\")) type = \"*\";\n switch (type) {\n case \"i1\":\n  HEAP8[ptr >>> 0] = value;\n  break;\n\n case \"i8\":\n  HEAP8[ptr >>> 0] = value;\n  break;\n\n case \"i16\":\n  HEAP16[ptr >>> 1] = value;\n  break;\n\n case \"i32\":\n  HEAP32[ptr >>> 2] = value;\n  break;\n\n case \"i64\":\n  abort(\"to do setValue(i64) use WASM_BIGINT\");\n\n case \"float\":\n  HEAPF32[ptr >>> 2] = value;\n  break;\n\n case \"double\":\n  HEAPF64[ptr >>> 3] = value;\n  break;\n\n case \"*\":\n  HEAPU32[ptr >>> 2] = value;\n  break;\n\n default:\n  abort(`invalid type for setValue: ${type}`);\n }\n}\n\nfunction warnOnce(text) {\n if (!warnOnce.shown) warnOnce.shown = {};\n if (!warnOnce.shown[text]) {\n  warnOnce.shown[text] = 1;\n  if (ENVIRONMENT_IS_NODE) text = \"warning: \" + text;\n  err(text);\n }\n}\n\nfunction _XML_GetBuffer() {\n err(\"missing function: XML_GetBuffer\");\n abort(-1);\n}\n\nfunction _XML_GetErrorCode() {\n err(\"missing function: XML_GetErrorCode\");\n abort(-1);\n}\n\nfunction _XML_Parse() {\n err(\"missing function: XML_Parse\");\n abort(-1);\n}\n\nfunction _XML_ParseBuffer() {\n err(\"missing function: XML_ParseBuffer\");\n abort(-1);\n}\n\nfunction _XML_ParserCreate() {\n err(\"missing function: XML_ParserCreate\");\n abort(-1);\n}\n\nfunction _XML_ParserFree() {\n err(\"missing function: XML_ParserFree\");\n abort(-1);\n}\n\nfunction _XML_ResumeParser() {\n err(\"missing function: XML_ResumeParser\");\n abort(-1);\n}\n\nfunction _XML_SetCharacterDataHandler() {\n err(\"missing function: XML_SetCharacterDataHandler\");\n abort(-1);\n}\n\nfunction _XML_SetElementHandler() {\n err(\"missing function: XML_SetElementHandler\");\n abort(-1);\n}\n\nfunction _XML_SetUserData() {\n err(\"missing function: XML_SetUserData\");\n abort(-1);\n}\n\nfunction _XML_StopParser() {\n err(\"missing function: XML_StopParser\");\n abort(-1);\n}\n\nfunction ExceptionInfo(excPtr) {\n this.excPtr = excPtr;\n this.ptr = excPtr - 24;\n this.set_type = function(type) {\n  HEAPU32[this.ptr + 4 >>> 2] = type;\n };\n this.get_type = function() {\n  return HEAPU32[this.ptr + 4 >>> 2];\n };\n this.set_destructor = function(destructor) {\n  HEAPU32[this.ptr + 8 >>> 2] = destructor;\n };\n this.get_destructor = function() {\n  return HEAPU32[this.ptr + 8 >>> 2];\n };\n this.set_caught = function(caught) {\n  caught = caught ? 1 : 0;\n  HEAP8[this.ptr + 12 >>> 0] = caught;\n };\n this.get_caught = function() {\n  return HEAP8[this.ptr + 12 >>> 0] != 0;\n };\n this.set_rethrown = function(rethrown) {\n  rethrown = rethrown ? 1 : 0;\n  HEAP8[this.ptr + 13 >>> 0] = rethrown;\n };\n this.get_rethrown = function() {\n  return HEAP8[this.ptr + 13 >>> 0] != 0;\n };\n this.init = function(type, destructor) {\n  this.set_adjusted_ptr(0);\n  this.set_type(type);\n  this.set_destructor(destructor);\n };\n this.set_adjusted_ptr = function(adjustedPtr) {\n  HEAPU32[this.ptr + 16 >>> 2] = adjustedPtr;\n };\n this.get_adjusted_ptr = function() {\n  return HEAPU32[this.ptr + 16 >>> 2];\n };\n this.get_exception_ptr = function() {\n  var isPointer = ___cxa_is_pointer_type(this.get_type());\n  if (isPointer) {\n   return HEAPU32[this.excPtr >>> 2];\n  }\n  var adjusted = this.get_adjusted_ptr();\n  if (adjusted !== 0) return adjusted;\n  return this.excPtr;\n };\n}\n\nvar exceptionLast = 0;\n\nvar uncaughtExceptionCount = 0;\n\nfunction ___cxa_throw(ptr, type, destructor) {\n var info = new ExceptionInfo(ptr);\n info.init(type, destructor);\n exceptionLast = ptr;\n uncaughtExceptionCount++;\n assert(false, \"Exception thrown, but exception catching is not enabled. Compile with -sNO_DISABLE_EXCEPTION_CATCHING or -sEXCEPTION_CATCHING_ALLOWED=[..] to catch.\");\n}\n\nvar dlopenMissingError = \"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\";\n\nfunction ___dlsym(handle, symbol, ra) {\n abort(dlopenMissingError);\n}\n\nvar UTF8Decoder = typeof TextDecoder != \"undefined\" ? new TextDecoder(\"utf8\") : undefined;\n\nfunction UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {\n idx >>>= 0;\n var endIdx = idx + maxBytesToRead;\n var endPtr = idx;\n while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n  return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n }\n var str = \"\";\n while (idx < endPtr) {\n  var u0 = heapOrArray[idx++];\n  if (!(u0 & 128)) {\n   str += String.fromCharCode(u0);\n   continue;\n  }\n  var u1 = heapOrArray[idx++] & 63;\n  if ((u0 & 224) == 192) {\n   str += String.fromCharCode((u0 & 31) << 6 | u1);\n   continue;\n  }\n  var u2 = heapOrArray[idx++] & 63;\n  if ((u0 & 240) == 224) {\n   u0 = (u0 & 15) << 12 | u1 << 6 | u2;\n  } else {\n   if ((u0 & 248) != 240) warnOnce(\"Invalid UTF-8 leading byte \" + ptrToString(u0) + \" encountered when deserializing a UTF-8 string in wasm memory to a JS string!\");\n   u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;\n  }\n  if (u0 < 65536) {\n   str += String.fromCharCode(u0);\n  } else {\n   var ch = u0 - 65536;\n   str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n  }\n }\n return str;\n}\n\nfunction UTF8ToString(ptr, maxBytesToRead) {\n assert(typeof ptr == \"number\");\n ptr >>>= 0;\n return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : \"\";\n}\n\nvar SYSCALLS = {\n varargs: undefined,\n get: function() {\n  assert(SYSCALLS.varargs != undefined);\n  SYSCALLS.varargs += 4;\n  var ret = HEAP32[SYSCALLS.varargs - 4 >>> 2];\n  return ret;\n },\n getStr: function(ptr) {\n  var ret = UTF8ToString(ptr);\n  return ret;\n }\n};\n\nfunction ___syscall__newselect(nfds, readfds, writefds, exceptfds, timeout) {\n assert(nfds <= 64, \"nfds must be less than or equal to 64\");\n assert(!exceptfds, \"exceptfds not supported\");\n var total = 0;\n var srcReadLow = readfds ? HEAP32[readfds >>> 2] : 0, srcReadHigh = readfds ? HEAP32[readfds + 4 >>> 2] : 0;\n var srcWriteLow = writefds ? HEAP32[writefds >>> 2] : 0, srcWriteHigh = writefds ? HEAP32[writefds + 4 >>> 2] : 0;\n var srcExceptLow = exceptfds ? HEAP32[exceptfds >>> 2] : 0, srcExceptHigh = exceptfds ? HEAP32[exceptfds + 4 >>> 2] : 0;\n var dstReadLow = 0, dstReadHigh = 0;\n var dstWriteLow = 0, dstWriteHigh = 0;\n var dstExceptLow = 0, dstExceptHigh = 0;\n var allLow = (readfds ? HEAP32[readfds >>> 2] : 0) | (writefds ? HEAP32[writefds >>> 2] : 0) | (exceptfds ? HEAP32[exceptfds >>> 2] : 0);\n var allHigh = (readfds ? HEAP32[readfds + 4 >>> 2] : 0) | (writefds ? HEAP32[writefds + 4 >>> 2] : 0) | (exceptfds ? HEAP32[exceptfds + 4 >>> 2] : 0);\n var check = function(fd, low, high, val) {\n  return fd < 32 ? low & val : high & val;\n };\n for (var fd = 0; fd < nfds; fd++) {\n  var mask = 1 << fd % 32;\n  if (!check(fd, allLow, allHigh, mask)) {\n   continue;\n  }\n  var stream = SYSCALLS.getStreamFromFD(fd);\n  var flags = SYSCALLS.DEFAULT_POLLMASK;\n  if (stream.stream_ops.poll) {\n   flags = stream.stream_ops.poll(stream);\n  }\n  if (flags & 1 && check(fd, srcReadLow, srcReadHigh, mask)) {\n   fd < 32 ? dstReadLow = dstReadLow | mask : dstReadHigh = dstReadHigh | mask;\n   total++;\n  }\n  if (flags & 4 && check(fd, srcWriteLow, srcWriteHigh, mask)) {\n   fd < 32 ? dstWriteLow = dstWriteLow | mask : dstWriteHigh = dstWriteHigh | mask;\n   total++;\n  }\n  if (flags & 2 && check(fd, srcExceptLow, srcExceptHigh, mask)) {\n   fd < 32 ? dstExceptLow = dstExceptLow | mask : dstExceptHigh = dstExceptHigh | mask;\n   total++;\n  }\n }\n if (readfds) {\n  HEAP32[readfds >>> 2] = dstReadLow;\n  HEAP32[readfds + 4 >>> 2] = dstReadHigh;\n }\n if (writefds) {\n  HEAP32[writefds >>> 2] = dstWriteLow;\n  HEAP32[writefds + 4 >>> 2] = dstWriteHigh;\n }\n if (exceptfds) {\n  HEAP32[exceptfds >>> 2] = dstExceptLow;\n  HEAP32[exceptfds + 4 >>> 2] = dstExceptHigh;\n }\n return total;\n}\n\nfunction SOCKFS() {\n err(\"missing function: $SOCKFS\");\n abort(-1);\n}\n\nfunction FS() {\n err(\"missing function: $FS\");\n abort(-1);\n}\n\nfunction getSocketFromFD(fd) {\n var socket = SOCKFS.getSocket(fd);\n if (!socket) throw new FS.ErrnoError(8);\n return socket;\n}\n\nfunction setErrNo(value) {\n HEAP32[___errno_location() >>> 2] = value;\n return value;\n}\n\nvar Sockets = {\n BUFFER_SIZE: 10240,\n MAX_BUFFER_SIZE: 10485760,\n nextFd: 1,\n fds: {},\n nextport: 1,\n maxport: 65535,\n peer: null,\n connections: {},\n portmap: {},\n localAddr: 4261412874,\n addrPool: [ 33554442, 50331658, 67108874, 83886090, 100663306, 117440522, 134217738, 150994954, 167772170, 184549386, 201326602, 218103818, 234881034 ]\n};\n\nfunction inetNtop4(addr) {\n return (addr & 255) + \".\" + (addr >> 8 & 255) + \".\" + (addr >> 16 & 255) + \".\" + (addr >> 24 & 255);\n}\n\nfunction inetNtop6(ints) {\n var str = \"\";\n var word = 0;\n var longest = 0;\n var lastzero = 0;\n var zstart = 0;\n var len = 0;\n var i = 0;\n var parts = [ ints[0] & 65535, ints[0] >> 16, ints[1] & 65535, ints[1] >> 16, ints[2] & 65535, ints[2] >> 16, ints[3] & 65535, ints[3] >> 16 ];\n var hasipv4 = true;\n var v4part = \"\";\n for (i = 0; i < 5; i++) {\n  if (parts[i] !== 0) {\n   hasipv4 = false;\n   break;\n  }\n }\n if (hasipv4) {\n  v4part = inetNtop4(parts[6] | parts[7] << 16);\n  if (parts[5] === -1) {\n   str = \"::ffff:\";\n   str += v4part;\n   return str;\n  }\n  if (parts[5] === 0) {\n   str = \"::\";\n   if (v4part === \"0.0.0.0\") v4part = \"\";\n   if (v4part === \"0.0.0.1\") v4part = \"1\";\n   str += v4part;\n   return str;\n  }\n }\n for (word = 0; word < 8; word++) {\n  if (parts[word] === 0) {\n   if (word - lastzero > 1) {\n    len = 0;\n   }\n   lastzero = word;\n   len++;\n  }\n  if (len > longest) {\n   longest = len;\n   zstart = word - longest + 1;\n  }\n }\n for (word = 0; word < 8; word++) {\n  if (longest > 1) {\n   if (parts[word] === 0 && word >= zstart && word < zstart + longest) {\n    if (word === zstart) {\n     str += \":\";\n     if (zstart === 0) str += \":\";\n    }\n    continue;\n   }\n  }\n  str += Number(_ntohs(parts[word] & 65535)).toString(16);\n  str += word < 7 ? \":\" : \"\";\n }\n return str;\n}\n\nfunction readSockaddr(sa, salen) {\n var family = HEAP16[sa >>> 1];\n var port = _ntohs(HEAPU16[sa + 2 >>> 1]);\n var addr;\n switch (family) {\n case 2:\n  if (salen !== 16) {\n   return {\n    errno: 28\n   };\n  }\n  addr = HEAP32[sa + 4 >>> 2];\n  addr = inetNtop4(addr);\n  break;\n\n case 10:\n  if (salen !== 28) {\n   return {\n    errno: 28\n   };\n  }\n  addr = [ HEAP32[sa + 8 >>> 2], HEAP32[sa + 12 >>> 2], HEAP32[sa + 16 >>> 2], HEAP32[sa + 20 >>> 2] ];\n  addr = inetNtop6(addr);\n  break;\n\n default:\n  return {\n   errno: 5\n  };\n }\n return {\n  family: family,\n  addr: addr,\n  port: port\n };\n}\n\nfunction inetPton4(str) {\n var b = str.split(\".\");\n for (var i = 0; i < 4; i++) {\n  var tmp = Number(b[i]);\n  if (isNaN(tmp)) return null;\n  b[i] = tmp;\n }\n return (b[0] | b[1] << 8 | b[2] << 16 | b[3] << 24) >>> 0;\n}\n\nfunction jstoi_q(str) {\n return parseInt(str);\n}\n\nfunction inetPton6(str) {\n var words;\n var w, offset, z, i;\n var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\\dA-F]{1,4}:(:|\\b)|){5}|([\\dA-F]{1,4}:){6})((([\\dA-F]{1,4}((?!\\3)::|:\\b|$))|(?!\\2\\3)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?\\b){4})$/i;\n var parts = [];\n if (!valid6regx.test(str)) {\n  return null;\n }\n if (str === \"::\") {\n  return [ 0, 0, 0, 0, 0, 0, 0, 0 ];\n }\n if (str.startsWith(\"::\")) {\n  str = str.replace(\"::\", \"Z:\");\n } else {\n  str = str.replace(\"::\", \":Z:\");\n }\n if (str.indexOf(\".\") > 0) {\n  str = str.replace(new RegExp(\"[.]\", \"g\"), \":\");\n  words = str.split(\":\");\n  words[words.length - 4] = jstoi_q(words[words.length - 4]) + jstoi_q(words[words.length - 3]) * 256;\n  words[words.length - 3] = jstoi_q(words[words.length - 2]) + jstoi_q(words[words.length - 1]) * 256;\n  words = words.slice(0, words.length - 2);\n } else {\n  words = str.split(\":\");\n }\n offset = 0;\n z = 0;\n for (w = 0; w < words.length; w++) {\n  if (typeof words[w] == \"string\") {\n   if (words[w] === \"Z\") {\n    for (z = 0; z < 8 - words.length + 1; z++) {\n     parts[w + z] = 0;\n    }\n    offset = z - 1;\n   } else {\n    parts[w + offset] = _htons(parseInt(words[w], 16));\n   }\n  } else {\n   parts[w + offset] = words[w];\n  }\n }\n return [ parts[1] << 16 | parts[0], parts[3] << 16 | parts[2], parts[5] << 16 | parts[4], parts[7] << 16 | parts[6] ];\n}\n\nvar DNS = {\n address_map: {\n  id: 1,\n  addrs: {},\n  names: {}\n },\n lookup_name: function(name) {\n  var res = inetPton4(name);\n  if (res !== null) {\n   return name;\n  }\n  res = inetPton6(name);\n  if (res !== null) {\n   return name;\n  }\n  var addr;\n  if (DNS.address_map.addrs[name]) {\n   addr = DNS.address_map.addrs[name];\n  } else {\n   var id = DNS.address_map.id++;\n   assert(id < 65535, \"exceeded max address mappings of 65535\");\n   addr = \"172.29.\" + (id & 255) + \".\" + (id & 65280);\n   DNS.address_map.names[addr] = name;\n   DNS.address_map.addrs[name] = addr;\n  }\n  return addr;\n },\n lookup_addr: function(addr) {\n  if (DNS.address_map.names[addr]) {\n   return DNS.address_map.names[addr];\n  }\n  return null;\n }\n};\n\nfunction getSocketAddress(addrp, addrlen, allowNull) {\n if (allowNull && addrp === 0) return null;\n var info = readSockaddr(addrp, addrlen);\n if (info.errno) throw new FS.ErrnoError(info.errno);\n info.addr = DNS.lookup_addr(info.addr) || info.addr;\n return info;\n}\n\nfunction ___syscall_bind(fd, addr, addrlen, d1, d2, d3) {\n var sock = getSocketFromFD(fd);\n var info = getSocketAddress(addr, addrlen);\n sock.sock_ops.bind(sock, info.addr, info.port);\n return 0;\n}\n\nfunction ___syscall_connect(fd, addr, addrlen, d1, d2, d3) {\n var sock = getSocketFromFD(fd);\n var info = getSocketAddress(addr, addrlen);\n sock.sock_ops.connect(sock, info.addr, info.port);\n return 0;\n}\n\nfunction ___syscall_faccessat(dirfd, path, amode, flags) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_fcntl64(fd, cmd, varargs) {\n SYSCALLS.varargs = varargs;\n return 0;\n}\n\nfunction ___syscall_fstat64(fd, buf) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction convertI32PairToI53Checked(lo, hi) {\n assert(lo == lo >>> 0 || lo == (lo | 0));\n assert(hi === (hi | 0));\n return hi + 2097152 >>> 0 < 4194305 - !!lo ? (lo >>> 0) + hi * 4294967296 : NaN;\n}\n\nfunction ___syscall_ftruncate64(fd, length_low, length_high) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {\n outIdx >>>= 0;\n assert(typeof str === \"string\");\n if (!(maxBytesToWrite > 0)) return 0;\n var startIdx = outIdx;\n var endIdx = outIdx + maxBytesToWrite - 1;\n for (var i = 0; i < str.length; ++i) {\n  var u = str.charCodeAt(i);\n  if (u >= 55296 && u <= 57343) {\n   var u1 = str.charCodeAt(++i);\n   u = 65536 + ((u & 1023) << 10) | u1 & 1023;\n  }\n  if (u <= 127) {\n   if (outIdx >= endIdx) break;\n   heap[outIdx++ >>> 0] = u;\n  } else if (u <= 2047) {\n   if (outIdx + 1 >= endIdx) break;\n   heap[outIdx++ >>> 0] = 192 | u >> 6;\n   heap[outIdx++ >>> 0] = 128 | u & 63;\n  } else if (u <= 65535) {\n   if (outIdx + 2 >= endIdx) break;\n   heap[outIdx++ >>> 0] = 224 | u >> 12;\n   heap[outIdx++ >>> 0] = 128 | u >> 6 & 63;\n   heap[outIdx++ >>> 0] = 128 | u & 63;\n  } else {\n   if (outIdx + 3 >= endIdx) break;\n   if (u > 1114111) warnOnce(\"Invalid Unicode code point \" + ptrToString(u) + \" encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).\");\n   heap[outIdx++ >>> 0] = 240 | u >> 18;\n   heap[outIdx++ >>> 0] = 128 | u >> 12 & 63;\n   heap[outIdx++ >>> 0] = 128 | u >> 6 & 63;\n   heap[outIdx++ >>> 0] = 128 | u & 63;\n  }\n }\n heap[outIdx >>> 0] = 0;\n return outIdx - startIdx;\n}\n\nfunction stringToUTF8(str, outPtr, maxBytesToWrite) {\n assert(typeof maxBytesToWrite == \"number\", \"stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!\");\n return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);\n}\n\nfunction ___syscall_getdents64(fd, dirp, count) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction zeroMemory(address, size) {\n HEAPU8.fill(0, address, address + size);\n return address;\n}\n\nfunction writeSockaddr(sa, family, addr, port, addrlen) {\n switch (family) {\n case 2:\n  addr = inetPton4(addr);\n  zeroMemory(sa, 16);\n  if (addrlen) {\n   HEAP32[addrlen >>> 2] = 16;\n  }\n  HEAP16[sa >>> 1] = family;\n  HEAP32[sa + 4 >>> 2] = addr;\n  HEAP16[sa + 2 >>> 1] = _htons(port);\n  break;\n\n case 10:\n  addr = inetPton6(addr);\n  zeroMemory(sa, 28);\n  if (addrlen) {\n   HEAP32[addrlen >>> 2] = 28;\n  }\n  HEAP32[sa >>> 2] = family;\n  HEAP32[sa + 8 >>> 2] = addr[0];\n  HEAP32[sa + 12 >>> 2] = addr[1];\n  HEAP32[sa + 16 >>> 2] = addr[2];\n  HEAP32[sa + 20 >>> 2] = addr[3];\n  HEAP16[sa + 2 >>> 1] = _htons(port);\n  break;\n\n default:\n  return 5;\n }\n return 0;\n}\n\nfunction ___syscall_getpeername(fd, addr, addrlen, d1, d2, d3) {\n var sock = getSocketFromFD(fd);\n if (!sock.daddr) {\n  return -53;\n }\n var errno = writeSockaddr(addr, sock.family, DNS.lookup_name(sock.daddr), sock.dport, addrlen);\n assert(!errno);\n return 0;\n}\n\nfunction ___syscall_getsockopt(fd, level, optname, optval, optlen, d1) {\n var sock = getSocketFromFD(fd);\n if (level === 1) {\n  if (optname === 4) {\n   HEAP32[optval >>> 2] = sock.error;\n   HEAP32[optlen >>> 2] = 4;\n   sock.error = null;\n   return 0;\n  }\n }\n return -50;\n}\n\nfunction ___syscall_ioctl(fd, op, varargs) {\n SYSCALLS.varargs = varargs;\n return 0;\n}\n\nfunction ___syscall_lstat64(path, buf) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_mkdirat(dirfd, path, mode) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_newfstatat(dirfd, path, buf, flags) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_openat(dirfd, path, flags, varargs) {\n SYSCALLS.varargs = varargs;\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_recvfrom(fd, buf, len, flags, addr, addrlen) {\n var sock = getSocketFromFD(fd);\n var msg = sock.sock_ops.recvmsg(sock, len);\n if (!msg) return 0;\n if (addr) {\n  var errno = writeSockaddr(addr, sock.family, DNS.lookup_name(msg.addr), msg.port, addrlen);\n  assert(!errno);\n }\n HEAPU8.set(msg.buffer, buf >>> 0);\n return msg.buffer.byteLength;\n}\n\nfunction ___syscall_renameat(olddirfd, oldpath, newdirfd, newpath) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_rmdir(path) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_sendto(fd, message, length, flags, addr, addr_len) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_socket(domain, type, protocol) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_stat64(path, buf) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_unlinkat(dirfd, path, flags) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nvar nowIsMonotonic = true;\n\nfunction __emscripten_get_now_is_monotonic() {\n return nowIsMonotonic;\n}\n\nfunction readI53FromI64(ptr) {\n return HEAPU32[ptr >>> 2] + HEAP32[ptr + 4 >>> 2] * 4294967296;\n}\n\nfunction isLeapYear(year) {\n return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nvar MONTH_DAYS_LEAP_CUMULATIVE = [ 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335 ];\n\nvar MONTH_DAYS_REGULAR_CUMULATIVE = [ 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 ];\n\nfunction ydayFromDate(date) {\n var leap = isLeapYear(date.getFullYear());\n var monthDaysCumulative = leap ? MONTH_DAYS_LEAP_CUMULATIVE : MONTH_DAYS_REGULAR_CUMULATIVE;\n var yday = monthDaysCumulative[date.getMonth()] + date.getDate() - 1;\n return yday;\n}\n\nfunction __localtime_js(time, tmPtr) {\n var date = new Date(readI53FromI64(time) * 1e3);\n HEAP32[tmPtr >>> 2] = date.getSeconds();\n HEAP32[tmPtr + 4 >>> 2] = date.getMinutes();\n HEAP32[tmPtr + 8 >>> 2] = date.getHours();\n HEAP32[tmPtr + 12 >>> 2] = date.getDate();\n HEAP32[tmPtr + 16 >>> 2] = date.getMonth();\n HEAP32[tmPtr + 20 >>> 2] = date.getFullYear() - 1900;\n HEAP32[tmPtr + 24 >>> 2] = date.getDay();\n var yday = ydayFromDate(date) | 0;\n HEAP32[tmPtr + 28 >>> 2] = yday;\n HEAP32[tmPtr + 36 >>> 2] = -(date.getTimezoneOffset() * 60);\n var start = new Date(date.getFullYear(), 0, 1);\n var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();\n var winterOffset = start.getTimezoneOffset();\n var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset)) | 0;\n HEAP32[tmPtr + 32 >>> 2] = dst;\n}\n\nfunction lengthBytesUTF8(str) {\n var len = 0;\n for (var i = 0; i < str.length; ++i) {\n  var c = str.charCodeAt(i);\n  if (c <= 127) {\n   len++;\n  } else if (c <= 2047) {\n   len += 2;\n  } else if (c >= 55296 && c <= 57343) {\n   len += 4;\n   ++i;\n  } else {\n   len += 3;\n  }\n }\n return len;\n}\n\nfunction stringToNewUTF8(str) {\n var size = lengthBytesUTF8(str) + 1;\n var ret = _malloc(size);\n if (ret) stringToUTF8(str, ret, size);\n return ret;\n}\n\nfunction __tzset_js(timezone, daylight, tzname) {\n var currentYear = new Date().getFullYear();\n var winter = new Date(currentYear, 0, 1);\n var summer = new Date(currentYear, 6, 1);\n var winterOffset = winter.getTimezoneOffset();\n var summerOffset = summer.getTimezoneOffset();\n var stdTimezoneOffset = Math.max(winterOffset, summerOffset);\n HEAPU32[timezone >>> 2] = stdTimezoneOffset * 60;\n HEAP32[daylight >>> 2] = Number(winterOffset != summerOffset);\n function extractZone(date) {\n  var match = date.toTimeString().match(/\\(([A-Za-z ]+)\\)$/);\n  return match ? match[1] : \"GMT\";\n }\n var winterName = extractZone(winter);\n var summerName = extractZone(summer);\n var winterNamePtr = stringToNewUTF8(winterName);\n var summerNamePtr = stringToNewUTF8(summerName);\n if (summerOffset < winterOffset) {\n  HEAPU32[tzname >>> 2] = winterNamePtr;\n  HEAPU32[tzname + 4 >>> 2] = summerNamePtr;\n } else {\n  HEAPU32[tzname >>> 2] = summerNamePtr;\n  HEAPU32[tzname + 4 >>> 2] = winterNamePtr;\n }\n}\n\nfunction _abort() {\n abort(\"native code called abort()\");\n}\n\nfunction _dlopen(filename, flags) {\n abort(dlopenMissingError);\n}\n\nfunction _duckdb_web_fs_directory_create(path, pathLen) {\n return globalThis.DUCKDB_RUNTIME.createDirectory(Module, path, pathLen);\n}\n\nfunction _duckdb_web_fs_directory_exists(path, pathLen) {\n return globalThis.DUCKDB_RUNTIME.checkDirectory(Module, path, pathLen);\n}\n\nfunction _duckdb_web_fs_directory_list_files(path, pathLen) {\n return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(Module, path, pathLen);\n}\n\nfunction _duckdb_web_fs_directory_remove(path, pathLen) {\n return globalThis.DUCKDB_RUNTIME.removeDirectory(Module, path, pathLen);\n}\n\nfunction _duckdb_web_fs_file_close(fileId) {\n return globalThis.DUCKDB_RUNTIME.closeFile(Module, fileId);\n}\n\nfunction _duckdb_web_fs_file_exists(path, pathLen) {\n return globalThis.DUCKDB_RUNTIME.checkFile(Module, path, pathLen);\n}\n\nfunction _duckdb_web_fs_file_get_last_modified_time(fileId) {\n return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(Module, fileId);\n}\n\nfunction _duckdb_web_fs_file_move(from, fromLen, to, toLen) {\n return globalThis.DUCKDB_RUNTIME.moveFile(Module, from, fromLen, to, toLen);\n}\n\nfunction _duckdb_web_fs_file_open(fileId, flags) {\n return globalThis.DUCKDB_RUNTIME.openFile(Module, fileId, flags);\n}\n\nfunction _duckdb_web_fs_file_read(fileId, buf, size, location) {\n return globalThis.DUCKDB_RUNTIME.readFile(Module, fileId, buf, size, location);\n}\n\nfunction _duckdb_web_fs_file_truncate(fileId, newSize) {\n return globalThis.DUCKDB_RUNTIME.truncateFile(Module, fileId, newSize);\n}\n\nfunction _duckdb_web_fs_file_write(fileId, buf, size, location) {\n return globalThis.DUCKDB_RUNTIME.writeFile(Module, fileId, buf, size, location);\n}\n\nfunction _duckdb_web_fs_get_default_data_protocol(Module) {\n return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(Module);\n}\n\nfunction _duckdb_web_fs_glob(path, pathLen) {\n return globalThis.DUCKDB_RUNTIME.glob(Module, path, pathLen);\n}\n\nfunction _duckdb_web_test_platform_feature(feature) {\n return globalThis.DUCKDB_RUNTIME.testPlatformFeature(Module, feature);\n}\n\nfunction _duckdb_web_udf_scalar_call(funcId, descPtr, descSize, ptrsPtr, ptrsSize, response) {\n return globalThis.DUCKDB_RUNTIME.callScalarUDF(Module, funcId, descPtr, descSize, ptrsPtr, ptrsSize, response);\n}\n\nfunction _emscripten_console_error(str) {\n assert(typeof str == \"number\");\n console.error(UTF8ToString(str));\n}\n\nfunction _emscripten_date_now() {\n return Date.now();\n}\n\nfunction getHeapMax() {\n return 4294901760;\n}\n\nfunction _emscripten_get_heap_max() {\n return getHeapMax();\n}\n\nvar _emscripten_get_now;\n\nif (ENVIRONMENT_IS_NODE) {\n global.performance = require(\"perf_hooks\").performance;\n}\n\n_emscripten_get_now = () => performance.now();\n\nfunction _emscripten_memcpy_big(dest, src, num) {\n HEAPU8.copyWithin(dest >>> 0, src >>> 0, src + num >>> 0);\n}\n\nfunction emscripten_realloc_buffer(size) {\n var b = wasmMemory.buffer;\n var pages = size - b.byteLength + 65535 >>> 16;\n try {\n  wasmMemory.grow(pages);\n  updateMemoryViews();\n  return 1;\n } catch (e) {\n  err(`emscripten_realloc_buffer: Attempted to grow heap from ${b.byteLength} bytes to ${size} bytes, but got error: ${e}`);\n }\n}\n\nfunction _emscripten_resize_heap(requestedSize) {\n var oldSize = HEAPU8.length;\n requestedSize = requestedSize >>> 0;\n assert(requestedSize > oldSize);\n var maxHeapSize = getHeapMax();\n if (requestedSize > maxHeapSize) {\n  err(`Cannot enlarge memory, asked to go up to ${requestedSize} bytes, but the limit is ${maxHeapSize} bytes!`);\n  return false;\n }\n var alignUp = (x, multiple) => x + (multiple - x % multiple) % multiple;\n for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n  var overGrownHeapSize = oldSize * (1 + .2 / cutDown);\n  overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);\n  var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n  var replacement = emscripten_realloc_buffer(newSize);\n  if (replacement) {\n   return true;\n  }\n }\n err(`Failed to grow the heap from ${oldSize} bytes to ${newSize} bytes, not enough memory!`);\n return false;\n}\n\nvar ENV = {};\n\nfunction getExecutableName() {\n return thisProgram || \"./this.program\";\n}\n\nfunction getEnvStrings() {\n if (!getEnvStrings.strings) {\n  var lang = (typeof navigator == \"object\" && navigator.languages && navigator.languages[0] || \"C\").replace(\"-\", \"_\") + \".UTF-8\";\n  var env = {\n   \"USER\": \"web_user\",\n   \"LOGNAME\": \"web_user\",\n   \"PATH\": \"/\",\n   \"PWD\": \"/\",\n   \"HOME\": \"/home/web_user\",\n   \"LANG\": lang,\n   \"_\": getExecutableName()\n  };\n  for (var x in ENV) {\n   if (ENV[x] === undefined) delete env[x]; else env[x] = ENV[x];\n  }\n  var strings = [];\n  for (var x in env) {\n   strings.push(`${x}=${env[x]}`);\n  }\n  getEnvStrings.strings = strings;\n }\n return getEnvStrings.strings;\n}\n\nfunction stringToAscii(str, buffer) {\n for (var i = 0; i < str.length; ++i) {\n  assert(str.charCodeAt(i) === (str.charCodeAt(i) & 255));\n  HEAP8[buffer++ >>> 0] = str.charCodeAt(i);\n }\n HEAP8[buffer >>> 0] = 0;\n}\n\nfunction _environ_get(__environ, environ_buf) {\n var bufSize = 0;\n getEnvStrings().forEach(function(string, i) {\n  var ptr = environ_buf + bufSize;\n  HEAPU32[__environ + i * 4 >>> 2] = ptr;\n  stringToAscii(string, ptr);\n  bufSize += string.length + 1;\n });\n return 0;\n}\n\nfunction _environ_sizes_get(penviron_count, penviron_buf_size) {\n var strings = getEnvStrings();\n HEAPU32[penviron_count >>> 2] = strings.length;\n var bufSize = 0;\n strings.forEach(function(string) {\n  bufSize += string.length + 1;\n });\n HEAPU32[penviron_buf_size >>> 2] = bufSize;\n return 0;\n}\n\nfunction _fd_close(fd) {\n abort(\"fd_close called without SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction _fd_fdstat_get(fd, pbuf) {\n var rightsBase = 0;\n var rightsInheriting = 0;\n var flags = 0;\n {\n  assert(fd == 0 || fd == 1 || fd == 2);\n  var type = 2;\n  if (fd == 0) {\n   rightsBase = 2;\n  } else if (fd == 1 || fd == 2) {\n   rightsBase = 64;\n  }\n  flags = 1;\n }\n HEAP8[pbuf >>> 0] = type;\n HEAP16[pbuf + 2 >>> 1] = flags;\n tempI64 = [ rightsBase >>> 0, (tempDouble = rightsBase, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], \n HEAP32[pbuf + 8 >>> 2] = tempI64[0], HEAP32[pbuf + 12 >>> 2] = tempI64[1];\n tempI64 = [ rightsInheriting >>> 0, (tempDouble = rightsInheriting, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], \n HEAP32[pbuf + 16 >>> 2] = tempI64[0], HEAP32[pbuf + 20 >>> 2] = tempI64[1];\n return 0;\n}\n\nfunction _fd_pread(fd, iov, iovcnt, offset_low, offset_high, pnum) {\n abort(\"fd_pread called without SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction _fd_pwrite(fd, iov, iovcnt, offset_low, offset_high, pnum) {\n abort(\"fd_pwrite called without SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction _fd_read(fd, iov, iovcnt, pnum) {\n abort(\"fd_read called without SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction _fd_seek(fd, offset_low, offset_high, whence, newOffset) {\n return 70;\n}\n\nfunction _fd_sync(fd) {\n abort(\"fd_sync called without SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nvar printCharBuffers = [ null, [], [] ];\n\nfunction printChar(stream, curr) {\n var buffer = printCharBuffers[stream];\n assert(buffer);\n if (curr === 0 || curr === 10) {\n  (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));\n  buffer.length = 0;\n } else {\n  buffer.push(curr);\n }\n}\n\nfunction flush_NO_FILESYSTEM() {\n _fflush(0);\n if (printCharBuffers[1].length) printChar(1, 10);\n if (printCharBuffers[2].length) printChar(2, 10);\n}\n\nfunction _fd_write(fd, iov, iovcnt, pnum) {\n var num = 0;\n for (var i = 0; i < iovcnt; i++) {\n  var ptr = HEAPU32[iov >>> 2];\n  var len = HEAPU32[iov + 4 >>> 2];\n  iov += 8;\n  for (var j = 0; j < len; j++) {\n   printChar(fd, HEAPU8[ptr + j >>> 0]);\n  }\n  num += len;\n }\n HEAPU32[pnum >>> 2] = num;\n return 0;\n}\n\nfunction _getaddrinfo(node, service, hint, out) {\n var addrs = [];\n var canon = null;\n var addr = 0;\n var port = 0;\n var flags = 0;\n var family = 0;\n var type = 0;\n var proto = 0;\n var ai, last;\n function allocaddrinfo(family, type, proto, canon, addr, port) {\n  var sa, salen, ai;\n  var errno;\n  salen = family === 10 ? 28 : 16;\n  addr = family === 10 ? inetNtop6(addr) : inetNtop4(addr);\n  sa = _malloc(salen);\n  errno = writeSockaddr(sa, family, addr, port);\n  assert(!errno);\n  ai = _malloc(32);\n  HEAP32[ai + 4 >>> 2] = family;\n  HEAP32[ai + 8 >>> 2] = type;\n  HEAP32[ai + 12 >>> 2] = proto;\n  HEAPU32[ai + 24 >>> 2] = canon;\n  HEAPU32[ai + 20 >>> 2] = sa;\n  if (family === 10) {\n   HEAP32[ai + 16 >>> 2] = 28;\n  } else {\n   HEAP32[ai + 16 >>> 2] = 16;\n  }\n  HEAP32[ai + 28 >>> 2] = 0;\n  return ai;\n }\n if (hint) {\n  flags = HEAP32[hint >>> 2];\n  family = HEAP32[hint + 4 >>> 2];\n  type = HEAP32[hint + 8 >>> 2];\n  proto = HEAP32[hint + 12 >>> 2];\n }\n if (type && !proto) {\n  proto = type === 2 ? 17 : 6;\n }\n if (!type && proto) {\n  type = proto === 17 ? 2 : 1;\n }\n if (proto === 0) {\n  proto = 6;\n }\n if (type === 0) {\n  type = 1;\n }\n if (!node && !service) {\n  return -2;\n }\n if (flags & ~(1 | 2 | 4 | 1024 | 8 | 16 | 32)) {\n  return -1;\n }\n if (hint !== 0 && HEAP32[hint >>> 2] & 2 && !node) {\n  return -1;\n }\n if (flags & 32) {\n  return -2;\n }\n if (type !== 0 && type !== 1 && type !== 2) {\n  return -7;\n }\n if (family !== 0 && family !== 2 && family !== 10) {\n  return -6;\n }\n if (service) {\n  service = UTF8ToString(service);\n  port = parseInt(service, 10);\n  if (isNaN(port)) {\n   if (flags & 1024) {\n    return -2;\n   }\n   return -8;\n  }\n }\n if (!node) {\n  if (family === 0) {\n   family = 2;\n  }\n  if ((flags & 1) === 0) {\n   if (family === 2) {\n    addr = _htonl(2130706433);\n   } else {\n    addr = [ 0, 0, 0, 1 ];\n   }\n  }\n  ai = allocaddrinfo(family, type, proto, null, addr, port);\n  HEAPU32[out >>> 2] = ai;\n  return 0;\n }\n node = UTF8ToString(node);\n addr = inetPton4(node);\n if (addr !== null) {\n  if (family === 0 || family === 2) {\n   family = 2;\n  } else if (family === 10 && flags & 8) {\n   addr = [ 0, 0, _htonl(65535), addr ];\n   family = 10;\n  } else {\n   return -2;\n  }\n } else {\n  addr = inetPton6(node);\n  if (addr !== null) {\n   if (family === 0 || family === 10) {\n    family = 10;\n   } else {\n    return -2;\n   }\n  }\n }\n if (addr != null) {\n  ai = allocaddrinfo(family, type, proto, node, addr, port);\n  HEAPU32[out >>> 2] = ai;\n  return 0;\n }\n if (flags & 4) {\n  return -2;\n }\n node = DNS.lookup_name(node);\n addr = inetPton4(node);\n if (family === 0) {\n  family = 2;\n } else if (family === 10) {\n  addr = [ 0, 0, _htonl(65535), addr ];\n }\n ai = allocaddrinfo(family, type, proto, null, addr, port);\n HEAPU32[out >>> 2] = ai;\n return 0;\n}\n\nfunction initRandomFill() {\n if (typeof crypto == \"object\" && typeof crypto[\"getRandomValues\"] == \"function\") {\n  return view => crypto.getRandomValues(view);\n } else if (ENVIRONMENT_IS_NODE) {\n  try {\n   var crypto_module = require(\"crypto\");\n   var randomFillSync = crypto_module[\"randomFillSync\"];\n   if (randomFillSync) {\n    return view => crypto_module[\"randomFillSync\"](view);\n   }\n   var randomBytes = crypto_module[\"randomBytes\"];\n   return view => (view.set(randomBytes(view.byteLength)), view);\n  } catch (e) {}\n }\n abort(\"no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };\");\n}\n\nfunction randomFill(view) {\n return (randomFill = initRandomFill())(view);\n}\n\nfunction _getentropy(buffer, size) {\n randomFill(HEAPU8.subarray(buffer >>> 0, buffer + size >>> 0));\n return 0;\n}\n\nfunction _getnameinfo(sa, salen, node, nodelen, serv, servlen, flags) {\n var info = readSockaddr(sa, salen);\n if (info.errno) {\n  return -6;\n }\n var port = info.port;\n var addr = info.addr;\n var overflowed = false;\n if (node && nodelen) {\n  var lookup;\n  if (flags & 1 || !(lookup = DNS.lookup_addr(addr))) {\n   if (flags & 8) {\n    return -2;\n   }\n  } else {\n   addr = lookup;\n  }\n  var numBytesWrittenExclNull = stringToUTF8(addr, node, nodelen);\n  if (numBytesWrittenExclNull + 1 >= nodelen) {\n   overflowed = true;\n  }\n }\n if (serv && servlen) {\n  port = \"\" + port;\n  var numBytesWrittenExclNull = stringToUTF8(port, serv, servlen);\n  if (numBytesWrittenExclNull + 1 >= servlen) {\n   overflowed = true;\n  }\n }\n if (overflowed) {\n  return -12;\n }\n return 0;\n}\n\nfunction arraySum(array, index) {\n var sum = 0;\n for (var i = 0; i <= index; sum += array[i++]) {}\n return sum;\n}\n\nvar MONTH_DAYS_LEAP = [ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];\n\nvar MONTH_DAYS_REGULAR = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];\n\nfunction addDays(date, days) {\n var newDate = new Date(date.getTime());\n while (days > 0) {\n  var leap = isLeapYear(newDate.getFullYear());\n  var currentMonth = newDate.getMonth();\n  var daysInCurrentMonth = (leap ? MONTH_DAYS_LEAP : MONTH_DAYS_REGULAR)[currentMonth];\n  if (days > daysInCurrentMonth - newDate.getDate()) {\n   days -= daysInCurrentMonth - newDate.getDate() + 1;\n   newDate.setDate(1);\n   if (currentMonth < 11) {\n    newDate.setMonth(currentMonth + 1);\n   } else {\n    newDate.setMonth(0);\n    newDate.setFullYear(newDate.getFullYear() + 1);\n   }\n  } else {\n   newDate.setDate(newDate.getDate() + days);\n   return newDate;\n  }\n }\n return newDate;\n}\n\nfunction intArrayFromString(stringy, dontAddNull, length) {\n var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;\n var u8array = new Array(len);\n var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);\n if (dontAddNull) u8array.length = numBytesWritten;\n return u8array;\n}\n\nfunction writeArrayToMemory(array, buffer) {\n assert(array.length >= 0, \"writeArrayToMemory array must have a length (should be an array or typed array)\");\n HEAP8.set(array, buffer >>> 0);\n}\n\nfunction _strftime(s, maxsize, format, tm) {\n var tm_zone = HEAP32[tm + 40 >>> 2];\n var date = {\n  tm_sec: HEAP32[tm >>> 2],\n  tm_min: HEAP32[tm + 4 >>> 2],\n  tm_hour: HEAP32[tm + 8 >>> 2],\n  tm_mday: HEAP32[tm + 12 >>> 2],\n  tm_mon: HEAP32[tm + 16 >>> 2],\n  tm_year: HEAP32[tm + 20 >>> 2],\n  tm_wday: HEAP32[tm + 24 >>> 2],\n  tm_yday: HEAP32[tm + 28 >>> 2],\n  tm_isdst: HEAP32[tm + 32 >>> 2],\n  tm_gmtoff: HEAP32[tm + 36 >>> 2],\n  tm_zone: tm_zone ? UTF8ToString(tm_zone) : \"\"\n };\n var pattern = UTF8ToString(format);\n var EXPANSION_RULES_1 = {\n  \"%c\": \"%a %b %d %H:%M:%S %Y\",\n  \"%D\": \"%m/%d/%y\",\n  \"%F\": \"%Y-%m-%d\",\n  \"%h\": \"%b\",\n  \"%r\": \"%I:%M:%S %p\",\n  \"%R\": \"%H:%M\",\n  \"%T\": \"%H:%M:%S\",\n  \"%x\": \"%m/%d/%y\",\n  \"%X\": \"%H:%M:%S\",\n  \"%Ec\": \"%c\",\n  \"%EC\": \"%C\",\n  \"%Ex\": \"%m/%d/%y\",\n  \"%EX\": \"%H:%M:%S\",\n  \"%Ey\": \"%y\",\n  \"%EY\": \"%Y\",\n  \"%Od\": \"%d\",\n  \"%Oe\": \"%e\",\n  \"%OH\": \"%H\",\n  \"%OI\": \"%I\",\n  \"%Om\": \"%m\",\n  \"%OM\": \"%M\",\n  \"%OS\": \"%S\",\n  \"%Ou\": \"%u\",\n  \"%OU\": \"%U\",\n  \"%OV\": \"%V\",\n  \"%Ow\": \"%w\",\n  \"%OW\": \"%W\",\n  \"%Oy\": \"%y\"\n };\n for (var rule in EXPANSION_RULES_1) {\n  pattern = pattern.replace(new RegExp(rule, \"g\"), EXPANSION_RULES_1[rule]);\n }\n var WEEKDAYS = [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ];\n var MONTHS = [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ];\n function leadingSomething(value, digits, character) {\n  var str = typeof value == \"number\" ? value.toString() : value || \"\";\n  while (str.length < digits) {\n   str = character[0] + str;\n  }\n  return str;\n }\n function leadingNulls(value, digits) {\n  return leadingSomething(value, digits, \"0\");\n }\n function compareByDay(date1, date2) {\n  function sgn(value) {\n   return value < 0 ? -1 : value > 0 ? 1 : 0;\n  }\n  var compare;\n  if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {\n   if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {\n    compare = sgn(date1.getDate() - date2.getDate());\n   }\n  }\n  return compare;\n }\n function getFirstWeekStartDate(janFourth) {\n  switch (janFourth.getDay()) {\n  case 0:\n   return new Date(janFourth.getFullYear() - 1, 11, 29);\n\n  case 1:\n   return janFourth;\n\n  case 2:\n   return new Date(janFourth.getFullYear(), 0, 3);\n\n  case 3:\n   return new Date(janFourth.getFullYear(), 0, 2);\n\n  case 4:\n   return new Date(janFourth.getFullYear(), 0, 1);\n\n  case 5:\n   return new Date(janFourth.getFullYear() - 1, 11, 31);\n\n  case 6:\n   return new Date(janFourth.getFullYear() - 1, 11, 30);\n  }\n }\n function getWeekBasedYear(date) {\n  var thisDate = addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);\n  var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);\n  var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);\n  var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);\n  var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);\n  if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {\n   if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {\n    return thisDate.getFullYear() + 1;\n   }\n   return thisDate.getFullYear();\n  }\n  return thisDate.getFullYear() - 1;\n }\n var EXPANSION_RULES_2 = {\n  \"%a\": function(date) {\n   return WEEKDAYS[date.tm_wday].substring(0, 3);\n  },\n  \"%A\": function(date) {\n   return WEEKDAYS[date.tm_wday];\n  },\n  \"%b\": function(date) {\n   return MONTHS[date.tm_mon].substring(0, 3);\n  },\n  \"%B\": function(date) {\n   return MONTHS[date.tm_mon];\n  },\n  \"%C\": function(date) {\n   var year = date.tm_year + 1900;\n   return leadingNulls(year / 100 | 0, 2);\n  },\n  \"%d\": function(date) {\n   return leadingNulls(date.tm_mday, 2);\n  },\n  \"%e\": function(date) {\n   return leadingSomething(date.tm_mday, 2, \" \");\n  },\n  \"%g\": function(date) {\n   return getWeekBasedYear(date).toString().substring(2);\n  },\n  \"%G\": function(date) {\n   return getWeekBasedYear(date);\n  },\n  \"%H\": function(date) {\n   return leadingNulls(date.tm_hour, 2);\n  },\n  \"%I\": function(date) {\n   var twelveHour = date.tm_hour;\n   if (twelveHour == 0) twelveHour = 12; else if (twelveHour > 12) twelveHour -= 12;\n   return leadingNulls(twelveHour, 2);\n  },\n  \"%j\": function(date) {\n   return leadingNulls(date.tm_mday + arraySum(isLeapYear(date.tm_year + 1900) ? MONTH_DAYS_LEAP : MONTH_DAYS_REGULAR, date.tm_mon - 1), 3);\n  },\n  \"%m\": function(date) {\n   return leadingNulls(date.tm_mon + 1, 2);\n  },\n  \"%M\": function(date) {\n   return leadingNulls(date.tm_min, 2);\n  },\n  \"%n\": function() {\n   return \"\\n\";\n  },\n  \"%p\": function(date) {\n   if (date.tm_hour >= 0 && date.tm_hour < 12) {\n    return \"AM\";\n   }\n   return \"PM\";\n  },\n  \"%S\": function(date) {\n   return leadingNulls(date.tm_sec, 2);\n  },\n  \"%t\": function() {\n   return \"\\t\";\n  },\n  \"%u\": function(date) {\n   return date.tm_wday || 7;\n  },\n  \"%U\": function(date) {\n   var days = date.tm_yday + 7 - date.tm_wday;\n   return leadingNulls(Math.floor(days / 7), 2);\n  },\n  \"%V\": function(date) {\n   var val = Math.floor((date.tm_yday + 7 - (date.tm_wday + 6) % 7) / 7);\n   if ((date.tm_wday + 371 - date.tm_yday - 2) % 7 <= 2) {\n    val++;\n   }\n   if (!val) {\n    val = 52;\n    var dec31 = (date.tm_wday + 7 - date.tm_yday - 1) % 7;\n    if (dec31 == 4 || dec31 == 5 && isLeapYear(date.tm_year % 400 - 1)) {\n     val++;\n    }\n   } else if (val == 53) {\n    var jan1 = (date.tm_wday + 371 - date.tm_yday) % 7;\n    if (jan1 != 4 && (jan1 != 3 || !isLeapYear(date.tm_year))) val = 1;\n   }\n   return leadingNulls(val, 2);\n  },\n  \"%w\": function(date) {\n   return date.tm_wday;\n  },\n  \"%W\": function(date) {\n   var days = date.tm_yday + 7 - (date.tm_wday + 6) % 7;\n   return leadingNulls(Math.floor(days / 7), 2);\n  },\n  \"%y\": function(date) {\n   return (date.tm_year + 1900).toString().substring(2);\n  },\n  \"%Y\": function(date) {\n   return date.tm_year + 1900;\n  },\n  \"%z\": function(date) {\n   var off = date.tm_gmtoff;\n   var ahead = off >= 0;\n   off = Math.abs(off) / 60;\n   off = off / 60 * 100 + off % 60;\n   return (ahead ? \"+\" : \"-\") + String(\"0000\" + off).slice(-4);\n  },\n  \"%Z\": function(date) {\n   return date.tm_zone;\n  },\n  \"%%\": function() {\n   return \"%\";\n  }\n };\n pattern = pattern.replace(/%%/g, \"\\0\\0\");\n for (var rule in EXPANSION_RULES_2) {\n  if (pattern.includes(rule)) {\n   pattern = pattern.replace(new RegExp(rule, \"g\"), EXPANSION_RULES_2[rule](date));\n  }\n }\n pattern = pattern.replace(/\\0\\0/g, \"%\");\n var bytes = intArrayFromString(pattern, false);\n if (bytes.length > maxsize) {\n  return 0;\n }\n writeArrayToMemory(bytes, s);\n return bytes.length - 1;\n}\n\nfunction _strftime_l(s, maxsize, format, tm, loc) {\n return _strftime(s, maxsize, format, tm);\n}\n\nfunction _ucnv_close_64() {\n err(\"missing function: ucnv_close_64\");\n abort(-1);\n}\n\nfunction _ucnv_convertEx_64() {\n err(\"missing function: ucnv_convertEx_64\");\n abort(-1);\n}\n\nfunction _ucnv_open_64() {\n err(\"missing function: ucnv_open_64\");\n abort(-1);\n}\n\nfunction _ucnv_toAlgorithmic_64() {\n err(\"missing function: ucnv_toAlgorithmic_64\");\n abort(-1);\n}\n\nfunction _ucsdet_close_64() {\n err(\"missing function: ucsdet_close_64\");\n abort(-1);\n}\n\nfunction _ucsdet_detect_64() {\n err(\"missing function: ucsdet_detect_64\");\n abort(-1);\n}\n\nfunction _ucsdet_getConfidence_64() {\n err(\"missing function: ucsdet_getConfidence_64\");\n abort(-1);\n}\n\nfunction _ucsdet_getName_64() {\n err(\"missing function: ucsdet_getName_64\");\n abort(-1);\n}\n\nfunction _ucsdet_open_64() {\n err(\"missing function: ucsdet_open_64\");\n abort(-1);\n}\n\nfunction _ucsdet_setText_64() {\n err(\"missing function: ucsdet_setText_64\");\n abort(-1);\n}\n\nfunction _unzClose() {\n err(\"missing function: unzClose\");\n abort(-1);\n}\n\nfunction _unzCloseCurrentFile() {\n err(\"missing function: unzCloseCurrentFile\");\n abort(-1);\n}\n\nfunction _unzGetCurrentFileInfo() {\n err(\"missing function: unzGetCurrentFileInfo\");\n abort(-1);\n}\n\nfunction _unzGetCurrentFileInfo64() {\n err(\"missing function: unzGetCurrentFileInfo64\");\n abort(-1);\n}\n\nfunction _unzGetGlobalInfo() {\n err(\"missing function: unzGetGlobalInfo\");\n abort(-1);\n}\n\nfunction _unzGoToFirstFile() {\n err(\"missing function: unzGoToFirstFile\");\n abort(-1);\n}\n\nfunction _unzGoToNextFile() {\n err(\"missing function: unzGoToNextFile\");\n abort(-1);\n}\n\nfunction _unzLocateFile() {\n err(\"missing function: unzLocateFile\");\n abort(-1);\n}\n\nfunction _unzOpen() {\n err(\"missing function: unzOpen\");\n abort(-1);\n}\n\nfunction _unzOpen2() {\n err(\"missing function: unzOpen2\");\n abort(-1);\n}\n\nfunction _unzOpenCurrentFile() {\n err(\"missing function: unzOpenCurrentFile\");\n abort(-1);\n}\n\nfunction _unzReadCurrentFile() {\n err(\"missing function: unzReadCurrentFile\");\n abort(-1);\n}\n\nfunction _proc_exit(code) {\n EXITSTATUS = code;\n if (!keepRuntimeAlive()) {\n  if (Module[\"onExit\"]) Module[\"onExit\"](code);\n  ABORT = true;\n }\n quit_(code, new ExitStatus(code));\n}\n\nfunction exitJS(status, implicit) {\n EXITSTATUS = status;\n checkUnflushedContent();\n if (keepRuntimeAlive() && !implicit) {\n  var msg = `program exited (with status: ${status}), but keepRuntimeAlive() is set (counter=${runtimeKeepaliveCounter}) due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)`;\n  readyPromiseReject(msg);\n  err(msg);\n }\n _proc_exit(status);\n}\n\nfunction handleException(e) {\n if (e instanceof ExitStatus || e == \"unwind\") {\n  return EXITSTATUS;\n }\n checkStackCookie();\n if (e instanceof WebAssembly.RuntimeError) {\n  if (_emscripten_stack_get_current() <= 0) {\n   err(\"Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to 65536)\");\n  }\n }\n quit_(1, e);\n}\n\nfunction getCFunc(ident) {\n var func = Module[\"_\" + ident];\n assert(func, \"Cannot call unknown function \" + ident + \", make sure it is exported\");\n return func;\n}\n\nfunction stringToUTF8OnStack(str) {\n var size = lengthBytesUTF8(str) + 1;\n var ret = stackAlloc(size);\n stringToUTF8(str, ret, size);\n return ret;\n}\n\nfunction ccall(ident, returnType, argTypes, args, opts) {\n var toC = {\n  \"string\": str => {\n   var ret = 0;\n   if (str !== null && str !== undefined && str !== 0) {\n    ret = stringToUTF8OnStack(str);\n   }\n   return ret;\n  },\n  \"array\": arr => {\n   var ret = stackAlloc(arr.length);\n   writeArrayToMemory(arr, ret);\n   return ret;\n  }\n };\n function convertReturnValue(ret) {\n  if (returnType === \"string\") {\n   return UTF8ToString(ret);\n  }\n  if (returnType === \"boolean\") return Boolean(ret);\n  return ret;\n }\n var func = getCFunc(ident);\n var cArgs = [];\n var stack = 0;\n assert(returnType !== \"array\", 'Return type should not be \"array\".');\n if (args) {\n  for (var i = 0; i < args.length; i++) {\n   var converter = toC[argTypes[i]];\n   if (converter) {\n    if (stack === 0) stack = stackSave();\n    cArgs[i] = converter(args[i]);\n   } else {\n    cArgs[i] = args[i];\n   }\n  }\n }\n var ret = func.apply(null, cArgs);\n function onDone(ret) {\n  if (stack !== 0) stackRestore(stack);\n  return convertReturnValue(ret);\n }\n ret = onDone(ret);\n return ret;\n}\n\nfunction checkIncomingModuleAPI() {\n ignoredModuleProp(\"fetchSettings\");\n}\n\nvar wasmImports = {\n \"XML_GetBuffer\": _XML_GetBuffer,\n \"XML_GetErrorCode\": _XML_GetErrorCode,\n \"XML_Parse\": _XML_Parse,\n \"XML_ParseBuffer\": _XML_ParseBuffer,\n \"XML_ParserCreate\": _XML_ParserCreate,\n \"XML_ParserFree\": _XML_ParserFree,\n \"XML_ResumeParser\": _XML_ResumeParser,\n \"XML_SetCharacterDataHandler\": _XML_SetCharacterDataHandler,\n \"XML_SetElementHandler\": _XML_SetElementHandler,\n \"XML_SetUserData\": _XML_SetUserData,\n \"XML_StopParser\": _XML_StopParser,\n \"__cxa_throw\": ___cxa_throw,\n \"__dlsym\": ___dlsym,\n \"__syscall__newselect\": ___syscall__newselect,\n \"__syscall_bind\": ___syscall_bind,\n \"__syscall_connect\": ___syscall_connect,\n \"__syscall_faccessat\": ___syscall_faccessat,\n \"__syscall_fcntl64\": ___syscall_fcntl64,\n \"__syscall_fstat64\": ___syscall_fstat64,\n \"__syscall_ftruncate64\": ___syscall_ftruncate64,\n \"__syscall_getdents64\": ___syscall_getdents64,\n \"__syscall_getpeername\": ___syscall_getpeername,\n \"__syscall_getsockopt\": ___syscall_getsockopt,\n \"__syscall_ioctl\": ___syscall_ioctl,\n \"__syscall_lstat64\": ___syscall_lstat64,\n \"__syscall_mkdirat\": ___syscall_mkdirat,\n \"__syscall_newfstatat\": ___syscall_newfstatat,\n \"__syscall_openat\": ___syscall_openat,\n \"__syscall_recvfrom\": ___syscall_recvfrom,\n \"__syscall_renameat\": ___syscall_renameat,\n \"__syscall_rmdir\": ___syscall_rmdir,\n \"__syscall_sendto\": ___syscall_sendto,\n \"__syscall_socket\": ___syscall_socket,\n \"__syscall_stat64\": ___syscall_stat64,\n \"__syscall_unlinkat\": ___syscall_unlinkat,\n \"_emscripten_get_now_is_monotonic\": __emscripten_get_now_is_monotonic,\n \"_localtime_js\": __localtime_js,\n \"_tzset_js\": __tzset_js,\n \"abort\": _abort,\n \"dlopen\": _dlopen,\n \"duckdb_web_fs_directory_create\": _duckdb_web_fs_directory_create,\n \"duckdb_web_fs_directory_exists\": _duckdb_web_fs_directory_exists,\n \"duckdb_web_fs_directory_list_files\": _duckdb_web_fs_directory_list_files,\n \"duckdb_web_fs_directory_remove\": _duckdb_web_fs_directory_remove,\n \"duckdb_web_fs_file_close\": _duckdb_web_fs_file_close,\n \"duckdb_web_fs_file_exists\": _duckdb_web_fs_file_exists,\n \"duckdb_web_fs_file_get_last_modified_time\": _duckdb_web_fs_file_get_last_modified_time,\n \"duckdb_web_fs_file_move\": _duckdb_web_fs_file_move,\n \"duckdb_web_fs_file_open\": _duckdb_web_fs_file_open,\n \"duckdb_web_fs_file_read\": _duckdb_web_fs_file_read,\n \"duckdb_web_fs_file_truncate\": _duckdb_web_fs_file_truncate,\n \"duckdb_web_fs_file_write\": _duckdb_web_fs_file_write,\n \"duckdb_web_fs_get_default_data_protocol\": _duckdb_web_fs_get_default_data_protocol,\n \"duckdb_web_fs_glob\": _duckdb_web_fs_glob,\n \"duckdb_web_test_platform_feature\": _duckdb_web_test_platform_feature,\n \"duckdb_web_udf_scalar_call\": _duckdb_web_udf_scalar_call,\n \"emscripten_console_error\": _emscripten_console_error,\n \"emscripten_date_now\": _emscripten_date_now,\n \"emscripten_get_heap_max\": _emscripten_get_heap_max,\n \"emscripten_get_now\": _emscripten_get_now,\n \"emscripten_memcpy_big\": _emscripten_memcpy_big,\n \"emscripten_resize_heap\": _emscripten_resize_heap,\n \"environ_get\": _environ_get,\n \"environ_sizes_get\": _environ_sizes_get,\n \"fd_close\": _fd_close,\n \"fd_fdstat_get\": _fd_fdstat_get,\n \"fd_pread\": _fd_pread,\n \"fd_pwrite\": _fd_pwrite,\n \"fd_read\": _fd_read,\n \"fd_seek\": _fd_seek,\n \"fd_sync\": _fd_sync,\n \"fd_write\": _fd_write,\n \"getaddrinfo\": _getaddrinfo,\n \"getentropy\": _getentropy,\n \"getnameinfo\": _getnameinfo,\n \"strftime_l\": _strftime_l,\n \"ucnv_close_64\": _ucnv_close_64,\n \"ucnv_convertEx_64\": _ucnv_convertEx_64,\n \"ucnv_open_64\": _ucnv_open_64,\n \"ucnv_toAlgorithmic_64\": _ucnv_toAlgorithmic_64,\n \"ucsdet_close_64\": _ucsdet_close_64,\n \"ucsdet_detect_64\": _ucsdet_detect_64,\n \"ucsdet_getConfidence_64\": _ucsdet_getConfidence_64,\n \"ucsdet_getName_64\": _ucsdet_getName_64,\n \"ucsdet_open_64\": _ucsdet_open_64,\n \"ucsdet_setText_64\": _ucsdet_setText_64,\n \"unzClose\": _unzClose,\n \"unzCloseCurrentFile\": _unzCloseCurrentFile,\n \"unzGetCurrentFileInfo\": _unzGetCurrentFileInfo,\n \"unzGetCurrentFileInfo64\": _unzGetCurrentFileInfo64,\n \"unzGetGlobalInfo\": _unzGetGlobalInfo,\n \"unzGoToFirstFile\": _unzGoToFirstFile,\n \"unzGoToNextFile\": _unzGoToNextFile,\n \"unzLocateFile\": _unzLocateFile,\n \"unzOpen\": _unzOpen,\n \"unzOpen2\": _unzOpen2,\n \"unzOpenCurrentFile\": _unzOpenCurrentFile,\n \"unzReadCurrentFile\": _unzReadCurrentFile\n};\n\nvar asm = createWasm();\n\nvar ___wasm_call_ctors = createExportWrapper(\"__wasm_call_ctors\");\n\nvar _main = Module[\"_main\"] = createExportWrapper(\"main\");\n\nvar _duckdb_web_fs_glob_add_path = Module[\"_duckdb_web_fs_glob_add_path\"] = createExportWrapper(\"duckdb_web_fs_glob_add_path\");\n\nvar _duckdb_web_clear_response = Module[\"_duckdb_web_clear_response\"] = createExportWrapper(\"duckdb_web_clear_response\");\n\nvar _duckdb_web_fail_with = Module[\"_duckdb_web_fail_with\"] = createExportWrapper(\"duckdb_web_fail_with\");\n\nvar _duckdb_web_reset = Module[\"_duckdb_web_reset\"] = createExportWrapper(\"duckdb_web_reset\");\n\nvar _duckdb_web_connect = Module[\"_duckdb_web_connect\"] = createExportWrapper(\"duckdb_web_connect\");\n\nvar _duckdb_web_disconnect = Module[\"_duckdb_web_disconnect\"] = createExportWrapper(\"duckdb_web_disconnect\");\n\nvar _duckdb_web_flush_files = Module[\"_duckdb_web_flush_files\"] = createExportWrapper(\"duckdb_web_flush_files\");\n\nvar _duckdb_web_flush_file = Module[\"_duckdb_web_flush_file\"] = createExportWrapper(\"duckdb_web_flush_file\");\n\nvar _duckdb_web_open = Module[\"_duckdb_web_open\"] = createExportWrapper(\"duckdb_web_open\");\n\nvar _duckdb_web_get_global_file_info = Module[\"_duckdb_web_get_global_file_info\"] = createExportWrapper(\"duckdb_web_get_global_file_info\");\n\nvar _duckdb_web_collect_file_stats = Module[\"_duckdb_web_collect_file_stats\"] = createExportWrapper(\"duckdb_web_collect_file_stats\");\n\nvar _duckdb_web_export_file_stats = Module[\"_duckdb_web_export_file_stats\"] = createExportWrapper(\"duckdb_web_export_file_stats\");\n\nvar _duckdb_web_fs_drop_file = Module[\"_duckdb_web_fs_drop_file\"] = createExportWrapper(\"duckdb_web_fs_drop_file\");\n\nvar _duckdb_web_fs_drop_files = Module[\"_duckdb_web_fs_drop_files\"] = createExportWrapper(\"duckdb_web_fs_drop_files\");\n\nvar _duckdb_web_fs_glob_file_infos = Module[\"_duckdb_web_fs_glob_file_infos\"] = createExportWrapper(\"duckdb_web_fs_glob_file_infos\");\n\nvar _duckdb_web_fs_get_file_info_by_id = Module[\"_duckdb_web_fs_get_file_info_by_id\"] = createExportWrapper(\"duckdb_web_fs_get_file_info_by_id\");\n\nvar _duckdb_web_fs_get_file_info_by_name = Module[\"_duckdb_web_fs_get_file_info_by_name\"] = createExportWrapper(\"duckdb_web_fs_get_file_info_by_name\");\n\nvar _duckdb_web_fs_register_file_url = Module[\"_duckdb_web_fs_register_file_url\"] = createExportWrapper(\"duckdb_web_fs_register_file_url\");\n\nvar _duckdb_web_fs_register_file_buffer = Module[\"_duckdb_web_fs_register_file_buffer\"] = createExportWrapper(\"duckdb_web_fs_register_file_buffer\");\n\nvar _duckdb_web_copy_file_to_buffer = Module[\"_duckdb_web_copy_file_to_buffer\"] = createExportWrapper(\"duckdb_web_copy_file_to_buffer\");\n\nvar _duckdb_web_copy_file_to_path = Module[\"_duckdb_web_copy_file_to_path\"] = createExportWrapper(\"duckdb_web_copy_file_to_path\");\n\nvar _duckdb_web_get_version = Module[\"_duckdb_web_get_version\"] = createExportWrapper(\"duckdb_web_get_version\");\n\nvar _duckdb_web_get_feature_flags = Module[\"_duckdb_web_get_feature_flags\"] = createExportWrapper(\"duckdb_web_get_feature_flags\");\n\nvar _duckdb_web_tokenize = Module[\"_duckdb_web_tokenize\"] = createExportWrapper(\"duckdb_web_tokenize\");\n\nvar _duckdb_web_udf_scalar_create = Module[\"_duckdb_web_udf_scalar_create\"] = createExportWrapper(\"duckdb_web_udf_scalar_create\");\n\nvar _duckdb_web_prepared_create = Module[\"_duckdb_web_prepared_create\"] = createExportWrapper(\"duckdb_web_prepared_create\");\n\nvar _duckdb_web_prepared_close = Module[\"_duckdb_web_prepared_close\"] = createExportWrapper(\"duckdb_web_prepared_close\");\n\nvar _duckdb_web_prepared_run = Module[\"_duckdb_web_prepared_run\"] = createExportWrapper(\"duckdb_web_prepared_run\");\n\nvar _duckdb_web_prepared_send = Module[\"_duckdb_web_prepared_send\"] = createExportWrapper(\"duckdb_web_prepared_send\");\n\nvar _duckdb_web_query_run = Module[\"_duckdb_web_query_run\"] = createExportWrapper(\"duckdb_web_query_run\");\n\nvar _duckdb_web_pending_query_start = Module[\"_duckdb_web_pending_query_start\"] = createExportWrapper(\"duckdb_web_pending_query_start\");\n\nvar _duckdb_web_pending_query_poll = Module[\"_duckdb_web_pending_query_poll\"] = createExportWrapper(\"duckdb_web_pending_query_poll\");\n\nvar _duckdb_web_pending_query_cancel = Module[\"_duckdb_web_pending_query_cancel\"] = createExportWrapper(\"duckdb_web_pending_query_cancel\");\n\nvar _duckdb_web_query_fetch_results = Module[\"_duckdb_web_query_fetch_results\"] = createExportWrapper(\"duckdb_web_query_fetch_results\");\n\nvar _duckdb_web_get_tablenames = Module[\"_duckdb_web_get_tablenames\"] = createExportWrapper(\"duckdb_web_get_tablenames\");\n\nvar _duckdb_web_insert_arrow_from_ipc_stream = Module[\"_duckdb_web_insert_arrow_from_ipc_stream\"] = createExportWrapper(\"duckdb_web_insert_arrow_from_ipc_stream\");\n\nvar _duckdb_web_insert_csv_from_path = Module[\"_duckdb_web_insert_csv_from_path\"] = createExportWrapper(\"duckdb_web_insert_csv_from_path\");\n\nvar _duckdb_web_insert_json_from_path = Module[\"_duckdb_web_insert_json_from_path\"] = createExportWrapper(\"duckdb_web_insert_json_from_path\");\n\nvar ___errno_location = createExportWrapper(\"__errno_location\");\n\nvar _fflush = Module[\"_fflush\"] = createExportWrapper(\"fflush\");\n\nvar _htonl = createExportWrapper(\"htonl\");\n\nvar _htons = createExportWrapper(\"htons\");\n\nvar _ntohs = createExportWrapper(\"ntohs\");\n\nvar _malloc = Module[\"_malloc\"] = createExportWrapper(\"malloc\");\n\nvar _free = Module[\"_free\"] = createExportWrapper(\"free\");\n\nvar _emscripten_stack_init = function() {\n return (_emscripten_stack_init = Module[\"asm\"][\"emscripten_stack_init\"]).apply(null, arguments);\n};\n\nvar _emscripten_stack_get_free = function() {\n return (_emscripten_stack_get_free = Module[\"asm\"][\"emscripten_stack_get_free\"]).apply(null, arguments);\n};\n\nvar _emscripten_stack_get_base = function() {\n return (_emscripten_stack_get_base = Module[\"asm\"][\"emscripten_stack_get_base\"]).apply(null, arguments);\n};\n\nvar _emscripten_stack_get_end = function() {\n return (_emscripten_stack_get_end = Module[\"asm\"][\"emscripten_stack_get_end\"]).apply(null, arguments);\n};\n\nvar stackSave = createExportWrapper(\"stackSave\");\n\nvar stackRestore = createExportWrapper(\"stackRestore\");\n\nvar stackAlloc = createExportWrapper(\"stackAlloc\");\n\nvar _emscripten_stack_get_current = function() {\n return (_emscripten_stack_get_current = Module[\"asm\"][\"emscripten_stack_get_current\"]).apply(null, arguments);\n};\n\nvar ___cxa_is_pointer_type = createExportWrapper(\"__cxa_is_pointer_type\");\n\nvar dynCall_jiji = Module[\"dynCall_jiji\"] = createExportWrapper(\"dynCall_jiji\");\n\nvar dynCall_iiiiij = Module[\"dynCall_iiiiij\"] = createExportWrapper(\"dynCall_iiiiij\");\n\nvar dynCall_iiiiijj = Module[\"dynCall_iiiiijj\"] = createExportWrapper(\"dynCall_iiiiijj\");\n\nvar dynCall_iiiiiijj = Module[\"dynCall_iiiiiijj\"] = createExportWrapper(\"dynCall_iiiiiijj\");\n\nvar dynCall_viijii = Module[\"dynCall_viijii\"] = createExportWrapper(\"dynCall_viijii\");\n\nvar dynCall_viijji = Module[\"dynCall_viijji\"] = createExportWrapper(\"dynCall_viijji\");\n\nvar dynCall_iiiji = Module[\"dynCall_iiiji\"] = createExportWrapper(\"dynCall_iiiji\");\n\nvar dynCall_ji = Module[\"dynCall_ji\"] = createExportWrapper(\"dynCall_ji\");\n\nvar dynCall_viij = Module[\"dynCall_viij\"] = createExportWrapper(\"dynCall_viij\");\n\nvar dynCall_vij = Module[\"dynCall_vij\"] = createExportWrapper(\"dynCall_vij\");\n\nvar dynCall_vjjijij = Module[\"dynCall_vjjijij\"] = createExportWrapper(\"dynCall_vjjijij\");\n\nvar dynCall_vijjji = Module[\"dynCall_vijjji\"] = createExportWrapper(\"dynCall_vijjji\");\n\nvar dynCall_vjjii = Module[\"dynCall_vjjii\"] = createExportWrapper(\"dynCall_vjjii\");\n\nvar dynCall_viiiiiji = Module[\"dynCall_viiiiiji\"] = createExportWrapper(\"dynCall_viiiiiji\");\n\nvar dynCall_jiiiji = Module[\"dynCall_jiiiji\"] = createExportWrapper(\"dynCall_jiiiji\");\n\nvar dynCall_jiiij = Module[\"dynCall_jiiij\"] = createExportWrapper(\"dynCall_jiiij\");\n\nvar dynCall_jijjij = Module[\"dynCall_jijjij\"] = createExportWrapper(\"dynCall_jijjij\");\n\nvar dynCall_iiij = Module[\"dynCall_iiij\"] = createExportWrapper(\"dynCall_iiij\");\n\nvar dynCall_vijjj = Module[\"dynCall_vijjj\"] = createExportWrapper(\"dynCall_vijjj\");\n\nvar dynCall_vijj = Module[\"dynCall_vijj\"] = createExportWrapper(\"dynCall_vijj\");\n\nvar dynCall_viijj = Module[\"dynCall_viijj\"] = createExportWrapper(\"dynCall_viijj\");\n\nvar dynCall_jiijii = Module[\"dynCall_jiijii\"] = createExportWrapper(\"dynCall_jiijii\");\n\nvar dynCall_jijiii = Module[\"dynCall_jijiii\"] = createExportWrapper(\"dynCall_jijiii\");\n\nvar dynCall_viijiiiii = Module[\"dynCall_viijiiiii\"] = createExportWrapper(\"dynCall_viijiiiii\");\n\nvar dynCall_viijiiij = Module[\"dynCall_viijiiij\"] = createExportWrapper(\"dynCall_viijiiij\");\n\nvar dynCall_vijiiiji = Module[\"dynCall_vijiiiji\"] = createExportWrapper(\"dynCall_vijiiiji\");\n\nvar dynCall_viiiij = Module[\"dynCall_viiiij\"] = createExportWrapper(\"dynCall_viiiij\");\n\nvar dynCall_jiiji = Module[\"dynCall_jiiji\"] = createExportWrapper(\"dynCall_jiiji\");\n\nvar dynCall_viiijij = Module[\"dynCall_viiijij\"] = createExportWrapper(\"dynCall_viiijij\");\n\nvar dynCall_viijiij = Module[\"dynCall_viijiij\"] = createExportWrapper(\"dynCall_viijiij\");\n\nvar dynCall_viiiiijj = Module[\"dynCall_viiiiijj\"] = createExportWrapper(\"dynCall_viiiiijj\");\n\nvar dynCall_viiijji = Module[\"dynCall_viiijji\"] = createExportWrapper(\"dynCall_viiijji\");\n\nvar dynCall_vijii = Module[\"dynCall_vijii\"] = createExportWrapper(\"dynCall_vijii\");\n\nvar dynCall_iiiiiji = Module[\"dynCall_iiiiiji\"] = createExportWrapper(\"dynCall_iiiiiji\");\n\nvar dynCall_iij = Module[\"dynCall_iij\"] = createExportWrapper(\"dynCall_iij\");\n\nvar dynCall_iiijj = Module[\"dynCall_iiijj\"] = createExportWrapper(\"dynCall_iiijj\");\n\nvar dynCall_iijii = Module[\"dynCall_iijii\"] = createExportWrapper(\"dynCall_iijii\");\n\nvar dynCall_viji = Module[\"dynCall_viji\"] = createExportWrapper(\"dynCall_viji\");\n\nvar dynCall_iiji = Module[\"dynCall_iiji\"] = createExportWrapper(\"dynCall_iiji\");\n\nvar dynCall_viijjj = Module[\"dynCall_viijjj\"] = createExportWrapper(\"dynCall_viijjj\");\n\nvar dynCall_viiijj = Module[\"dynCall_viiijj\"] = createExportWrapper(\"dynCall_viiijj\");\n\nvar dynCall_jijj = Module[\"dynCall_jijj\"] = createExportWrapper(\"dynCall_jijj\");\n\nvar dynCall_jiiiii = Module[\"dynCall_jiiiii\"] = createExportWrapper(\"dynCall_jiiiii\");\n\nvar dynCall_jiiii = Module[\"dynCall_jiiii\"] = createExportWrapper(\"dynCall_jiiii\");\n\nvar dynCall_jii = Module[\"dynCall_jii\"] = createExportWrapper(\"dynCall_jii\");\n\nvar dynCall_viijij = Module[\"dynCall_viijij\"] = createExportWrapper(\"dynCall_viijij\");\n\nvar dynCall_viiij = Module[\"dynCall_viiij\"] = createExportWrapper(\"dynCall_viiij\");\n\nvar dynCall_j = Module[\"dynCall_j\"] = createExportWrapper(\"dynCall_j\");\n\nvar dynCall_viiijiiiijj = Module[\"dynCall_viiijiiiijj\"] = createExportWrapper(\"dynCall_viiijiiiijj\");\n\nvar dynCall_jiiiij = Module[\"dynCall_jiiiij\"] = createExportWrapper(\"dynCall_jiiiij\");\n\nvar dynCall_jj = Module[\"dynCall_jj\"] = createExportWrapper(\"dynCall_jj\");\n\nvar dynCall_ij = Module[\"dynCall_ij\"] = createExportWrapper(\"dynCall_ij\");\n\nvar dynCall_ijjj = Module[\"dynCall_ijjj\"] = createExportWrapper(\"dynCall_ijjj\");\n\nvar dynCall_jjjd = Module[\"dynCall_jjjd\"] = createExportWrapper(\"dynCall_jjjd\");\n\nvar dynCall_jjjjjjd = Module[\"dynCall_jjjjjjd\"] = createExportWrapper(\"dynCall_jjjjjjd\");\n\nvar dynCall_jij = Module[\"dynCall_jij\"] = createExportWrapper(\"dynCall_jij\");\n\nvar dynCall_viiijiiijii = Module[\"dynCall_viiijiiijii\"] = createExportWrapper(\"dynCall_viiijiiijii\");\n\nvar dynCall_viijijiiii = Module[\"dynCall_viijijiiii\"] = createExportWrapper(\"dynCall_viijijiiii\");\n\nvar dynCall_viiji = Module[\"dynCall_viiji\"] = createExportWrapper(\"dynCall_viiji\");\n\nvar dynCall_jiiiijj = Module[\"dynCall_jiiiijj\"] = createExportWrapper(\"dynCall_jiiiijj\");\n\nvar dynCall_viiiji = Module[\"dynCall_viiiji\"] = createExportWrapper(\"dynCall_viiiji\");\n\nvar dynCall_viiiiji = Module[\"dynCall_viiiiji\"] = createExportWrapper(\"dynCall_viiiiji\");\n\nvar dynCall_jijiiii = Module[\"dynCall_jijiiii\"] = createExportWrapper(\"dynCall_jijiiii\");\n\nvar dynCall_viiijiji = Module[\"dynCall_viiijiji\"] = createExportWrapper(\"dynCall_viiijiji\");\n\nvar dynCall_viijiji = Module[\"dynCall_viijiji\"] = createExportWrapper(\"dynCall_viijiji\");\n\nvar dynCall_jiii = Module[\"dynCall_jiii\"] = createExportWrapper(\"dynCall_jiii\");\n\nModule[\"stackAlloc\"] = stackAlloc;\n\nModule[\"stackSave\"] = stackSave;\n\nModule[\"stackRestore\"] = stackRestore;\n\nModule[\"ccall\"] = ccall;\n\nvar missingLibrarySymbols = [ \"getHostByName\", \"traverseStack\", \"getCallstack\", \"emscriptenLog\", \"convertPCtoSourceLocation\", \"readEmAsmArgs\", \"jstoi_s\", \"listenOnce\", \"autoResumeAudioContext\", \"dynCallLegacy\", \"getDynCaller\", \"dynCall\", \"runtimeKeepalivePush\", \"runtimeKeepalivePop\", \"callUserCallback\", \"maybeExit\", \"safeSetTimeout\", \"asmjsMangle\", \"asyncLoad\", \"alignMemory\", \"mmapAlloc\", \"HandleAllocator\", \"getNativeTypeSize\", \"STACK_SIZE\", \"STACK_ALIGN\", \"POINTER_SIZE\", \"ASSERTIONS\", \"writeI53ToI64\", \"writeI53ToI64Clamped\", \"writeI53ToI64Signaling\", \"writeI53ToU64Clamped\", \"writeI53ToU64Signaling\", \"readI53FromU64\", \"convertI32PairToI53\", \"convertU32PairToI53\", \"cwrap\", \"uleb128Encode\", \"sigToWasmTypes\", \"generateFuncType\", \"convertJsFunctionToWasm\", \"getEmptyTableSlot\", \"updateTableMap\", \"getFunctionAddress\", \"addFunction\", \"removeFunction\", \"reallyNegative\", \"unSign\", \"strLen\", \"reSign\", \"formatString\", \"intArrayToString\", \"AsciiToString\", \"UTF16ToString\", \"stringToUTF16\", \"lengthBytesUTF16\", \"UTF32ToString\", \"stringToUTF32\", \"lengthBytesUTF32\", \"registerKeyEventCallback\", \"maybeCStringToJsString\", \"findEventTarget\", \"findCanvasEventTarget\", \"getBoundingClientRect\", \"fillMouseEventData\", \"registerMouseEventCallback\", \"registerWheelEventCallback\", \"registerUiEventCallback\", \"registerFocusEventCallback\", \"fillDeviceOrientationEventData\", \"registerDeviceOrientationEventCallback\", \"fillDeviceMotionEventData\", \"registerDeviceMotionEventCallback\", \"screenOrientation\", \"fillOrientationChangeEventData\", \"registerOrientationChangeEventCallback\", \"fillFullscreenChangeEventData\", \"registerFullscreenChangeEventCallback\", \"JSEvents_requestFullscreen\", \"JSEvents_resizeCanvasForFullscreen\", \"registerRestoreOldStyle\", \"hideEverythingExceptGivenElement\", \"restoreHiddenElements\", \"setLetterbox\", \"softFullscreenResizeWebGLRenderTarget\", \"doRequestFullscreen\", \"fillPointerlockChangeEventData\", \"registerPointerlockChangeEventCallback\", \"registerPointerlockErrorEventCallback\", \"requestPointerLock\", \"fillVisibilityChangeEventData\", \"registerVisibilityChangeEventCallback\", \"registerTouchEventCallback\", \"fillGamepadEventData\", \"registerGamepadEventCallback\", \"registerBeforeUnloadEventCallback\", \"fillBatteryEventData\", \"battery\", \"registerBatteryEventCallback\", \"setCanvasElementSize\", \"getCanvasElementSize\", \"demangle\", \"demangleAll\", \"jsStackTrace\", \"stackTrace\", \"checkWasiClock\", \"wasiRightsToMuslOFlags\", \"wasiOFlagsToMuslOFlags\", \"createDyncallWrapper\", \"setImmediateWrapped\", \"clearImmediateWrapped\", \"polyfillSetImmediate\", \"getPromise\", \"makePromise\", \"idsToPromises\", \"makePromiseCallback\", \"setMainLoop\", \"heapObjectForWebGLType\", \"heapAccessShiftForWebGLHeap\", \"webgl_enable_ANGLE_instanced_arrays\", \"webgl_enable_OES_vertex_array_object\", \"webgl_enable_WEBGL_draw_buffers\", \"webgl_enable_WEBGL_multi_draw\", \"emscriptenWebGLGet\", \"computeUnpackAlignedImageSize\", \"colorChannelsInGlTextureFormat\", \"emscriptenWebGLGetTexPixelData\", \"__glGenObject\", \"emscriptenWebGLGetUniform\", \"webglGetUniformLocation\", \"webglPrepareUniformLocationsBeforeFirstUse\", \"webglGetLeftBracePos\", \"emscriptenWebGLGetVertexAttrib\", \"__glGetActiveAttribOrUniform\", \"writeGLArray\", \"registerWebGlEventCallback\", \"runAndAbortIfError\", \"SDL_unicode\", \"SDL_ttfContext\", \"SDL_audio\", \"GLFW_Window\", \"ALLOC_NORMAL\", \"ALLOC_STACK\", \"allocate\", \"writeStringToMemory\", \"writeAsciiToMemory\" ];\n\nmissingLibrarySymbols.forEach(missingLibrarySymbol);\n\nvar unexportedSymbols = [ \"run\", \"addOnPreRun\", \"addOnInit\", \"addOnPreMain\", \"addOnExit\", \"addOnPostRun\", \"addRunDependency\", \"removeRunDependency\", \"FS_createFolder\", \"FS_createPath\", \"FS_createDataFile\", \"FS_createLazyFile\", \"FS_createLink\", \"FS_createDevice\", \"FS_unlink\", \"out\", \"err\", \"callMain\", \"abort\", \"keepRuntimeAlive\", \"wasmMemory\", \"getTempRet0\", \"setTempRet0\", \"writeStackCookie\", \"checkStackCookie\", \"ptrToString\", \"zeroMemory\", \"exitJS\", \"getHeapMax\", \"emscripten_realloc_buffer\", \"ENV\", \"MONTH_DAYS_REGULAR\", \"MONTH_DAYS_LEAP\", \"MONTH_DAYS_REGULAR_CUMULATIVE\", \"MONTH_DAYS_LEAP_CUMULATIVE\", \"isLeapYear\", \"ydayFromDate\", \"arraySum\", \"addDays\", \"ERRNO_CODES\", \"ERRNO_MESSAGES\", \"setErrNo\", \"inetPton4\", \"inetNtop4\", \"inetPton6\", \"inetNtop6\", \"readSockaddr\", \"writeSockaddr\", \"DNS\", \"Protocols\", \"Sockets\", \"initRandomFill\", \"randomFill\", \"timers\", \"warnOnce\", \"UNWIND_CACHE\", \"readEmAsmArgsArray\", \"jstoi_q\", \"getExecutableName\", \"handleException\", \"readI53FromI64\", \"convertI32PairToI53Checked\", \"getCFunc\", \"freeTableIndexes\", \"functionsInTableMap\", \"setValue\", \"getValue\", \"PATH\", \"PATH_FS\", \"UTF8Decoder\", \"UTF8ArrayToString\", \"UTF8ToString\", \"stringToUTF8Array\", \"stringToUTF8\", \"lengthBytesUTF8\", \"intArrayFromString\", \"stringToAscii\", \"UTF16Decoder\", \"stringToNewUTF8\", \"stringToUTF8OnStack\", \"writeArrayToMemory\", \"JSEvents\", \"specialHTMLTargets\", \"currentFullscreenStrategy\", \"restoreOldWindowedStyle\", \"ExitStatus\", \"getEnvStrings\", \"flush_NO_FILESYSTEM\", \"dlopenMissingError\", \"promiseMap\", \"uncaughtExceptionCount\", \"exceptionLast\", \"exceptionCaught\", \"ExceptionInfo\", \"Browser\", \"wget\", \"SYSCALLS\", \"getSocketFromFD\", \"getSocketAddress\", \"tempFixedLengthArray\", \"miniTempWebGLFloatBuffers\", \"miniTempWebGLIntBuffers\", \"GL\", \"emscripten_webgl_power_preferences\", \"AL\", \"GLUT\", \"EGL\", \"GLEW\", \"IDBStore\", \"SDL\", \"SDL_gfx\", \"GLFW\", \"allocateUTF8\", \"allocateUTF8OnStack\", \"SOCKFS\", \"FS\" ];\n\nunexportedSymbols.forEach(unexportedRuntimeSymbol);\n\nvar calledRun;\n\ndependenciesFulfilled = function runCaller() {\n if (!calledRun) run();\n if (!calledRun) dependenciesFulfilled = runCaller;\n};\n\nfunction callMain() {\n assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module[\"onRuntimeInitialized\"])');\n assert(__ATPRERUN__.length == 0, \"cannot call main when preRun functions remain to be called\");\n var entryFunction = _main;\n var argc = 0;\n var argv = 0;\n try {\n  var ret = entryFunction(argc, argv);\n  exitJS(ret, true);\n  return ret;\n } catch (e) {\n  return handleException(e);\n }\n}\n\nfunction stackCheckInit() {\n _emscripten_stack_init();\n writeStackCookie();\n}\n\nfunction run() {\n if (runDependencies > 0) {\n  return;\n }\n stackCheckInit();\n preRun();\n if (runDependencies > 0) {\n  return;\n }\n function doRun() {\n  if (calledRun) return;\n  calledRun = true;\n  Module[\"calledRun\"] = true;\n  if (ABORT) return;\n  initRuntime();\n  preMain();\n  readyPromiseResolve(Module);\n  if (Module[\"onRuntimeInitialized\"]) Module[\"onRuntimeInitialized\"]();\n  if (shouldRunNow) callMain();\n  postRun();\n }\n if (Module[\"setStatus\"]) {\n  Module[\"setStatus\"](\"Running...\");\n  setTimeout(function() {\n   setTimeout(function() {\n    Module[\"setStatus\"](\"\");\n   }, 1);\n   doRun();\n  }, 1);\n } else {\n  doRun();\n }\n checkStackCookie();\n}\n\nfunction checkUnflushedContent() {\n var oldOut = out;\n var oldErr = err;\n var has = false;\n out = err = x => {\n  has = true;\n };\n try {\n  flush_NO_FILESYSTEM();\n } catch (e) {}\n out = oldOut;\n err = oldErr;\n if (has) {\n  warnOnce(\"stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.\");\n  warnOnce(\"(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)\");\n }\n}\n\nif (Module[\"preInit\"]) {\n if (typeof Module[\"preInit\"] == \"function\") Module[\"preInit\"] = [ Module[\"preInit\"] ];\n while (Module[\"preInit\"].length > 0) {\n  Module[\"preInit\"].pop()();\n }\n}\n\nvar shouldRunNow = true;\n\nif (Module[\"noInitialRun\"]) shouldRunNow = false;\n\nrun();\n\n\n  return DuckDB.ready\n}\n\n);\n})();\nexport default DuckDB;", "import DuckDBWasm from './duckdb-mvp.js';\r\nimport { DuckDBModule } from './duckdb_module';\r\nimport { DuckDBBindingsBase } from './bindings_base';\r\nimport { DuckDBRuntime } from './runtime';\r\nimport { Logger } from '../log';\r\nimport fs from 'fs';\r\n\r\ndeclare global {\r\n    // eslint-disable-next-line no-var\r\n    var DUCKDB_RUNTIME: any;\r\n}\r\n\r\n/** DuckDB bindings for node.js */\r\nexport class DuckDBNodeBindings extends DuckDBBindingsBase {\r\n    /** The path of the wasm module */\r\n    protected readonly mainModulePath: string;\r\n    /** The path of the pthread worker script */\r\n    protected readonly pthreadWorkerPath: string | null;\r\n\r\n    /** Constructor */\r\n    public constructor(\r\n        logger: Logger,\r\n        runtime: DuckDBRuntime,\r\n        mainModulePath: string,\r\n        pthreadWorkerPath: string | null,\r\n    ) {\r\n        super(logger, runtime);\r\n        this.mainModulePath = mainModulePath;\r\n        this.pthreadWorkerPath = pthreadWorkerPath;\r\n    }\r\n\r\n    /** Locate a file */\r\n    protected locateFile(path: string, prefix: string): string {\r\n        if (path.endsWith('.wasm')) {\r\n            return this.mainModulePath;\r\n        }\r\n        if (path.endsWith('.worker.js')) {\r\n            if (!this.pthreadWorkerPath) {\r\n                throw new Error('Missing DuckDB worker path!');\r\n            }\r\n            return this.pthreadWorkerPath!;\r\n        }\r\n        throw new Error(`WASM instantiation requested unexpected file: prefix=${prefix} path=${path}`);\r\n    }\r\n\r\n    /** Instantiate the wasm module */\r\n    protected instantiateWasm(\r\n        // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\n        imports: any,\r\n        success: (instance: WebAssembly.Instance, module: WebAssembly.Module) => void,\r\n    ): Emscripten.WebAssemblyExports {\r\n        globalThis.DUCKDB_RUNTIME = {};\r\n        for (const func of Object.getOwnPropertyNames(this._runtime)) {\r\n            if (func == 'constructor') continue;\r\n            globalThis.DUCKDB_RUNTIME[func] = Object.getOwnPropertyDescriptor(this._runtime, func)!.value;\r\n        }\r\n        const buf = fs.readFileSync(this.mainModulePath);\r\n        WebAssembly.instantiate(buf, imports).then(output => {\r\n            success(output.instance, output.module);\r\n        });\r\n        return [];\r\n    }\r\n\r\n    /** Instantiate the bindings */\r\n    protected instantiateImpl(moduleOverrides: Partial<DuckDBModule>): Promise<DuckDBModule> {\r\n        return DuckDBWasm({\r\n            ...moduleOverrides,\r\n            instantiateWasm: this.instantiateWasm.bind(this),\r\n        });\r\n    }\r\n}\r\n", "import DuckDBWasm from './duckdb-mvp.js';\r\nimport { DuckDBNodeBindings } from './bindings_node_base.js';\r\nimport { Logger } from '../log.js';\r\nimport { DuckDBModule } from './duckdb_module';\r\nimport { DuckDBRuntime } from './runtime';\r\n\r\n/** DuckDB bindings for node.js */\r\nexport class DuckDB extends DuckDBNodeBindings {\r\n    /** Constructor */\r\n    public constructor(\r\n        logger: Logger,\r\n        runtime: DuckDBRuntime,\r\n        mainModulePath: string,\r\n        pthreadWorkerPath: string | null = null,\r\n    ) {\r\n        super(logger, runtime, mainModulePath, pthreadWorkerPath);\r\n    }\r\n\r\n    /** Instantiate the bindings */\r\n    protected instantiateImpl(moduleOverrides: Partial<DuckDBModule>): Promise<DuckDBModule> {\r\n        return DuckDBWasm({\r\n            ...moduleOverrides,\r\n            instantiateWasm: this.instantiateWasm.bind(this),\r\n            locateFile: this.locateFile.bind(this),\r\n        });\r\n    }\r\n}\r\n\r\nexport default DuckDB;\r\n", "\nvar DuckDB = (() => {\n  var _scriptDir = import.meta.url;\n  \n  return (\nasync function(DuckDB = {})  {\n\nvar Module = typeof DuckDB != \"undefined\" ? DuckDB : {};\n\nvar readyPromiseResolve, readyPromiseReject;\n\nModule[\"ready\"] = new Promise((resolve, reject) => {\n readyPromiseResolve = resolve;\n readyPromiseReject = reject;\n});\n\n[ \"_main\", \"_malloc\", \"_free\", \"_duckdb_web_clear_response\", \"_duckdb_web_collect_file_stats\", \"_duckdb_web_connect\", \"_duckdb_web_copy_file_to_buffer\", \"_duckdb_web_copy_file_to_path\", \"_duckdb_web_disconnect\", \"_duckdb_web_export_file_stats\", \"_duckdb_web_fail_with\", \"_duckdb_web_flush_file\", \"_duckdb_web_flush_files\", \"_duckdb_web_fs_drop_file\", \"_duckdb_web_fs_drop_files\", \"_duckdb_web_fs_get_file_info_by_id\", \"_duckdb_web_fs_get_file_info_by_name\", \"_duckdb_web_fs_glob_add_path\", \"_duckdb_web_fs_glob_file_infos\", \"_duckdb_web_fs_register_file_buffer\", \"_duckdb_web_fs_register_file_url\", \"_duckdb_web_get_feature_flags\", \"_duckdb_web_get_global_file_info\", \"_duckdb_web_get_tablenames\", \"_duckdb_web_get_version\", \"_duckdb_web_insert_arrow_from_ipc_stream\", \"_duckdb_web_insert_csv_from_path\", \"_duckdb_web_insert_json_from_path\", \"_duckdb_web_open\", \"_duckdb_web_pending_query_cancel\", \"_duckdb_web_pending_query_poll\", \"_duckdb_web_pending_query_start\", \"_duckdb_web_prepared_close\", \"_duckdb_web_prepared_create\", \"_duckdb_web_prepared_run\", \"_duckdb_web_prepared_send\", \"_duckdb_web_query_fetch_results\", \"_duckdb_web_query_run\", \"_duckdb_web_reset\", \"_duckdb_web_tokenize\", \"_duckdb_web_udf_scalar_create\", \"getExceptionMessage\", \"___get_exception_message\", \"___cpp_exception\", \"___cxa_increment_exception_refcount\", \"___cxa_decrement_exception_refcount\", \"___thrown_object_from_unwind_exception\", \"_fflush\", \"onRuntimeInitialized\" ].forEach(prop => {\n if (!Object.getOwnPropertyDescriptor(Module[\"ready\"], prop)) {\n  Object.defineProperty(Module[\"ready\"], prop, {\n   get: () => abort(\"You are getting \" + prop + \" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\"),\n   set: () => abort(\"You are setting \" + prop + \" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js\")\n  });\n }\n});\n\nvar moduleOverrides = Object.assign({}, Module);\n\nvar arguments_ = [];\n\nvar thisProgram = \"./this.program\";\n\nvar quit_ = (status, toThrow) => {\n throw toThrow;\n};\n\nvar ENVIRONMENT_IS_WEB = typeof window == \"object\";\n\nvar ENVIRONMENT_IS_WORKER = typeof importScripts == \"function\";\n\nvar ENVIRONMENT_IS_NODE = typeof process == \"object\" && typeof process.versions == \"object\" && typeof process.versions.node == \"string\";\n\nvar ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n\nif (Module[\"ENVIRONMENT\"]) {\n throw new Error(\"Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)\");\n}\n\nvar scriptDirectory = \"\";\n\nfunction locateFile(path) {\n if (Module[\"locateFile\"]) {\n  return Module[\"locateFile\"](path, scriptDirectory);\n }\n return scriptDirectory + path;\n}\n\nvar read_, readAsync, readBinary, setWindowTitle;\n\nif (ENVIRONMENT_IS_NODE) {\n if (typeof process == \"undefined\" || !process.release || process.release.name !== \"node\") throw new Error(\"not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)\");\n var nodeVersion = process.versions.node;\n var numericVersion = nodeVersion.split(\".\").slice(0, 3);\n numericVersion = numericVersion[0] * 1e4 + numericVersion[1] * 100 + numericVersion[2].split(\"-\")[0] * 1;\n var minVersion = 101900;\n if (numericVersion < 101900) {\n  throw new Error(\"This emscripten-generated code requires node v10.19.19.0 (detected v\" + nodeVersion + \")\");\n }\n const {createRequire: createRequire} = await import(\"module\");\n var require = createRequire(import.meta.url);\n var fs = require(\"fs\");\n var nodePath = require(\"path\");\n if (ENVIRONMENT_IS_WORKER) {\n  scriptDirectory = nodePath.dirname(scriptDirectory) + \"/\";\n } else {\n  scriptDirectory = require(\"url\").fileURLToPath(new URL(\"./\", import.meta.url));\n }\n read_ = (filename, binary) => {\n  filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);\n  return fs.readFileSync(filename, binary ? undefined : \"utf8\");\n };\n readBinary = filename => {\n  var ret = read_(filename, true);\n  if (!ret.buffer) {\n   ret = new Uint8Array(ret);\n  }\n  assert(ret.buffer);\n  return ret;\n };\n readAsync = (filename, onload, onerror, binary = true) => {\n  filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);\n  fs.readFile(filename, binary ? undefined : \"utf8\", (err, data) => {\n   if (err) onerror(err); else onload(binary ? data.buffer : data);\n  });\n };\n if (!Module[\"thisProgram\"] && process.argv.length > 1) {\n  thisProgram = process.argv[1].replace(/\\\\/g, \"/\");\n }\n arguments_ = process.argv.slice(2);\n quit_ = (status, toThrow) => {\n  process.exitCode = status;\n  throw toThrow;\n };\n Module[\"inspect\"] = () => \"[Emscripten Module object]\";\n} else if (ENVIRONMENT_IS_SHELL) {\n if (typeof process == \"object\" && typeof require === \"function\" || typeof window == \"object\" || typeof importScripts == \"function\") throw new Error(\"not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)\");\n if (typeof read != \"undefined\") {\n  read_ = f => {\n   return read(f);\n  };\n }\n readBinary = f => {\n  let data;\n  if (typeof readbuffer == \"function\") {\n   return new Uint8Array(readbuffer(f));\n  }\n  data = read(f, \"binary\");\n  assert(typeof data == \"object\");\n  return data;\n };\n readAsync = (f, onload, onerror) => {\n  setTimeout(() => onload(readBinary(f)), 0);\n };\n if (typeof clearTimeout == \"undefined\") {\n  globalThis.clearTimeout = id => {};\n }\n if (typeof scriptArgs != \"undefined\") {\n  arguments_ = scriptArgs;\n } else if (typeof arguments != \"undefined\") {\n  arguments_ = arguments;\n }\n if (typeof quit == \"function\") {\n  quit_ = (status, toThrow) => {\n   setTimeout(() => {\n    if (!(toThrow instanceof ExitStatus)) {\n     let toLog = toThrow;\n     if (toThrow && typeof toThrow == \"object\" && toThrow.stack) {\n      toLog = [ toThrow, toThrow.stack ];\n     }\n     err(`exiting due to exception: ${toLog}`);\n    }\n    quit(status);\n   });\n   throw toThrow;\n  };\n }\n if (typeof print != \"undefined\") {\n  if (typeof console == \"undefined\") console = {};\n  console.log = print;\n  console.warn = console.error = typeof printErr != \"undefined\" ? printErr : print;\n }\n} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n if (ENVIRONMENT_IS_WORKER) {\n  scriptDirectory = self.location.href;\n } else if (typeof document != \"undefined\" && document.currentScript) {\n  scriptDirectory = document.currentScript.src;\n }\n if (_scriptDir) {\n  scriptDirectory = _scriptDir;\n }\n if (scriptDirectory.indexOf(\"blob:\") !== 0) {\n  scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, \"\").lastIndexOf(\"/\") + 1);\n } else {\n  scriptDirectory = \"\";\n }\n if (!(typeof window == \"object\" || typeof importScripts == \"function\")) throw new Error(\"not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)\");\n {\n  read_ = url => {\n   var xhr = new XMLHttpRequest();\n   xhr.open(\"GET\", url, false);\n   xhr.send(null);\n   return xhr.responseText;\n  };\n  if (ENVIRONMENT_IS_WORKER) {\n   readBinary = url => {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url, false);\n    xhr.responseType = \"arraybuffer\";\n    xhr.send(null);\n    return new Uint8Array(xhr.response);\n   };\n  }\n  readAsync = (url, onload, onerror) => {\n   var xhr = new XMLHttpRequest();\n   xhr.open(\"GET\", url, true);\n   xhr.responseType = \"arraybuffer\";\n   xhr.onload = () => {\n    if (xhr.status == 200 || xhr.status == 0 && xhr.response) {\n     onload(xhr.response);\n     return;\n    }\n    onerror();\n   };\n   xhr.onerror = onerror;\n   xhr.send(null);\n  };\n }\n setWindowTitle = title => document.title = title;\n} else {\n throw new Error(\"environment detection error\");\n}\n\nvar out = Module[\"print\"] || console.log.bind(console);\n\nvar err = Module[\"printErr\"] || console.error.bind(console);\n\nObject.assign(Module, moduleOverrides);\n\nmoduleOverrides = null;\n\ncheckIncomingModuleAPI();\n\nif (Module[\"arguments\"]) arguments_ = Module[\"arguments\"];\n\nlegacyModuleProp(\"arguments\", \"arguments_\");\n\nif (Module[\"thisProgram\"]) thisProgram = Module[\"thisProgram\"];\n\nlegacyModuleProp(\"thisProgram\", \"thisProgram\");\n\nif (Module[\"quit\"]) quit_ = Module[\"quit\"];\n\nlegacyModuleProp(\"quit\", \"quit_\");\n\nassert(typeof Module[\"memoryInitializerPrefixURL\"] == \"undefined\", \"Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead\");\n\nassert(typeof Module[\"pthreadMainPrefixURL\"] == \"undefined\", \"Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead\");\n\nassert(typeof Module[\"cdInitializerPrefixURL\"] == \"undefined\", \"Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead\");\n\nassert(typeof Module[\"filePackagePrefixURL\"] == \"undefined\", \"Module.filePackagePrefixURL option was removed, use Module.locateFile instead\");\n\nassert(typeof Module[\"read\"] == \"undefined\", \"Module.read option was removed (modify read_ in JS)\");\n\nassert(typeof Module[\"readAsync\"] == \"undefined\", \"Module.readAsync option was removed (modify readAsync in JS)\");\n\nassert(typeof Module[\"readBinary\"] == \"undefined\", \"Module.readBinary option was removed (modify readBinary in JS)\");\n\nassert(typeof Module[\"setWindowTitle\"] == \"undefined\", \"Module.setWindowTitle option was removed (modify setWindowTitle in JS)\");\n\nassert(typeof Module[\"TOTAL_MEMORY\"] == \"undefined\", \"Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY\");\n\nlegacyModuleProp(\"read\", \"read_\");\n\nlegacyModuleProp(\"readAsync\", \"readAsync\");\n\nlegacyModuleProp(\"readBinary\", \"readBinary\");\n\nlegacyModuleProp(\"setWindowTitle\", \"setWindowTitle\");\n\nvar IDBFS = \"IDBFS is no longer included by default; build with -lidbfs.js\";\n\nvar PROXYFS = \"PROXYFS is no longer included by default; build with -lproxyfs.js\";\n\nvar WORKERFS = \"WORKERFS is no longer included by default; build with -lworkerfs.js\";\n\nvar NODEFS = \"NODEFS is no longer included by default; build with -lnodefs.js\";\n\nassert(!ENVIRONMENT_IS_SHELL, \"shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.\");\n\nvar wasmBinary;\n\nif (Module[\"wasmBinary\"]) wasmBinary = Module[\"wasmBinary\"];\n\nlegacyModuleProp(\"wasmBinary\", \"wasmBinary\");\n\nvar noExitRuntime = Module[\"noExitRuntime\"] || true;\n\nlegacyModuleProp(\"noExitRuntime\", \"noExitRuntime\");\n\nif (typeof WebAssembly != \"object\") {\n abort(\"no native wasm support detected\");\n}\n\nvar wasmMemory;\n\nvar ABORT = false;\n\nvar EXITSTATUS;\n\nfunction assert(condition, text) {\n if (!condition) {\n  abort(\"Assertion failed\" + (text ? \": \" + text : \"\"));\n }\n}\n\nvar HEAP, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;\n\nfunction updateMemoryViews() {\n var b = wasmMemory.buffer;\n Module[\"HEAP8\"] = HEAP8 = new Int8Array(b);\n Module[\"HEAP16\"] = HEAP16 = new Int16Array(b);\n Module[\"HEAP32\"] = HEAP32 = new Int32Array(b);\n Module[\"HEAPU8\"] = HEAPU8 = new Uint8Array(b);\n Module[\"HEAPU16\"] = HEAPU16 = new Uint16Array(b);\n Module[\"HEAPU32\"] = HEAPU32 = new Uint32Array(b);\n Module[\"HEAPF32\"] = HEAPF32 = new Float32Array(b);\n Module[\"HEAPF64\"] = HEAPF64 = new Float64Array(b);\n}\n\nassert(!Module[\"STACK_SIZE\"], \"STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time\");\n\nassert(typeof Int32Array != \"undefined\" && typeof Float64Array !== \"undefined\" && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined, \"JS engine does not provide full typed array support\");\n\nassert(!Module[\"wasmMemory\"], \"Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally\");\n\nassert(!Module[\"INITIAL_MEMORY\"], \"Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically\");\n\nvar wasmTable;\n\nfunction writeStackCookie() {\n var max = _emscripten_stack_get_end();\n assert((max & 3) == 0);\n if (max == 0) {\n  max += 4;\n }\n HEAPU32[max >>> 2] = 34821223;\n HEAPU32[max + 4 >>> 2] = 2310721022;\n HEAPU32[0 >>> 2] = 1668509029;\n}\n\nfunction checkStackCookie() {\n if (ABORT) return;\n var max = _emscripten_stack_get_end();\n if (max == 0) {\n  max += 4;\n }\n var cookie1 = HEAPU32[max >>> 2];\n var cookie2 = HEAPU32[max + 4 >>> 2];\n if (cookie1 != 34821223 || cookie2 != 2310721022) {\n  abort(`Stack overflow! Stack cookie has been overwritten at ${ptrToString(max)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${ptrToString(cookie2)} ${ptrToString(cookie1)}`);\n }\n if (HEAPU32[0 >>> 2] != 1668509029) {\n  abort(\"Runtime error: The application has corrupted its heap memory area (address zero)!\");\n }\n}\n\n(function() {\n var h16 = new Int16Array(1);\n var h8 = new Int8Array(h16.buffer);\n h16[0] = 25459;\n if (h8[0] !== 115 || h8[1] !== 99) throw \"Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)\";\n})();\n\nvar __ATPRERUN__ = [];\n\nvar __ATINIT__ = [];\n\nvar __ATMAIN__ = [];\n\nvar __ATEXIT__ = [];\n\nvar __ATPOSTRUN__ = [];\n\nvar runtimeInitialized = false;\n\nvar runtimeKeepaliveCounter = 0;\n\nfunction keepRuntimeAlive() {\n return noExitRuntime || runtimeKeepaliveCounter > 0;\n}\n\nfunction preRun() {\n if (Module[\"preRun\"]) {\n  if (typeof Module[\"preRun\"] == \"function\") Module[\"preRun\"] = [ Module[\"preRun\"] ];\n  while (Module[\"preRun\"].length) {\n   addOnPreRun(Module[\"preRun\"].shift());\n  }\n }\n callRuntimeCallbacks(__ATPRERUN__);\n}\n\nfunction initRuntime() {\n assert(!runtimeInitialized);\n runtimeInitialized = true;\n checkStackCookie();\n callRuntimeCallbacks(__ATINIT__);\n}\n\nfunction preMain() {\n checkStackCookie();\n callRuntimeCallbacks(__ATMAIN__);\n}\n\nfunction postRun() {\n checkStackCookie();\n if (Module[\"postRun\"]) {\n  if (typeof Module[\"postRun\"] == \"function\") Module[\"postRun\"] = [ Module[\"postRun\"] ];\n  while (Module[\"postRun\"].length) {\n   addOnPostRun(Module[\"postRun\"].shift());\n  }\n }\n callRuntimeCallbacks(__ATPOSTRUN__);\n}\n\nfunction addOnPreRun(cb) {\n __ATPRERUN__.unshift(cb);\n}\n\nfunction addOnInit(cb) {\n __ATINIT__.unshift(cb);\n}\n\nfunction addOnPreMain(cb) {\n __ATMAIN__.unshift(cb);\n}\n\nfunction addOnExit(cb) {}\n\nfunction addOnPostRun(cb) {\n __ATPOSTRUN__.unshift(cb);\n}\n\nassert(Math.imul, \"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill\");\n\nassert(Math.fround, \"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill\");\n\nassert(Math.clz32, \"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill\");\n\nassert(Math.trunc, \"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill\");\n\nvar runDependencies = 0;\n\nvar runDependencyWatcher = null;\n\nvar dependenciesFulfilled = null;\n\nvar runDependencyTracking = {};\n\nfunction getUniqueRunDependency(id) {\n var orig = id;\n while (1) {\n  if (!runDependencyTracking[id]) return id;\n  id = orig + Math.random();\n }\n}\n\nfunction addRunDependency(id) {\n runDependencies++;\n if (Module[\"monitorRunDependencies\"]) {\n  Module[\"monitorRunDependencies\"](runDependencies);\n }\n if (id) {\n  assert(!runDependencyTracking[id]);\n  runDependencyTracking[id] = 1;\n  if (runDependencyWatcher === null && typeof setInterval != \"undefined\") {\n   runDependencyWatcher = setInterval(() => {\n    if (ABORT) {\n     clearInterval(runDependencyWatcher);\n     runDependencyWatcher = null;\n     return;\n    }\n    var shown = false;\n    for (var dep in runDependencyTracking) {\n     if (!shown) {\n      shown = true;\n      err(\"still waiting on run dependencies:\");\n     }\n     err(\"dependency: \" + dep);\n    }\n    if (shown) {\n     err(\"(end of list)\");\n    }\n   }, 1e4);\n  }\n } else {\n  err(\"warning: run dependency added without ID\");\n }\n}\n\nfunction removeRunDependency(id) {\n runDependencies--;\n if (Module[\"monitorRunDependencies\"]) {\n  Module[\"monitorRunDependencies\"](runDependencies);\n }\n if (id) {\n  assert(runDependencyTracking[id]);\n  delete runDependencyTracking[id];\n } else {\n  err(\"warning: run dependency removed without ID\");\n }\n if (runDependencies == 0) {\n  if (runDependencyWatcher !== null) {\n   clearInterval(runDependencyWatcher);\n   runDependencyWatcher = null;\n  }\n  if (dependenciesFulfilled) {\n   var callback = dependenciesFulfilled;\n   dependenciesFulfilled = null;\n   callback();\n  }\n }\n}\n\nfunction abort(what) {\n if (Module[\"onAbort\"]) {\n  Module[\"onAbort\"](what);\n }\n what = \"Aborted(\" + what + \")\";\n err(what);\n ABORT = true;\n EXITSTATUS = 1;\n if (runtimeInitialized) {\n  ___trap();\n }\n var e = new WebAssembly.RuntimeError(what);\n readyPromiseReject(e);\n throw e;\n}\n\nvar dataURIPrefix = \"data:application/octet-stream;base64,\";\n\nfunction isDataURI(filename) {\n return filename.startsWith(dataURIPrefix);\n}\n\nfunction isFileURI(filename) {\n return filename.startsWith(\"file://\");\n}\n\nfunction createExportWrapper(name, fixedasm) {\n return function() {\n  var displayName = name;\n  var asm = fixedasm;\n  if (!fixedasm) {\n   asm = Module[\"asm\"];\n  }\n  assert(runtimeInitialized, \"native function `\" + displayName + \"` called before runtime initialization\");\n  if (!asm[name]) {\n   assert(asm[name], \"exported native function `\" + displayName + \"` not found\");\n  }\n  return asm[name].apply(null, arguments);\n };\n}\n\nvar wasmBinaryFile;\n\nif (Module[\"locateFile\"]) {\n wasmBinaryFile = \"./duckdb-eh.wasm\";\n if (!isDataURI(wasmBinaryFile)) {\n  wasmBinaryFile = locateFile(wasmBinaryFile);\n }\n} else {\n wasmBinaryFile = new URL(\"./duckdb-eh.wasm\", import.meta.url).href;\n}\n\nfunction getBinary(file) {\n try {\n  if (file == wasmBinaryFile && wasmBinary) {\n   return new Uint8Array(wasmBinary);\n  }\n  if (readBinary) {\n   return readBinary(file);\n  }\n  throw \"both async and sync fetching of the wasm failed\";\n } catch (err) {\n  abort(err);\n }\n}\n\nfunction getBinaryPromise(binaryFile) {\n if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {\n  if (typeof fetch == \"function\") {\n   return fetch(binaryFile, {\n    credentials: \"same-origin\"\n   }).then(response => {\n    if (!response[\"ok\"]) {\n     throw \"failed to load wasm binary file at '\" + binaryFile + \"'\";\n    }\n    return response[\"arrayBuffer\"]();\n   }).catch(() => getBinary(binaryFile));\n  }\n }\n return Promise.resolve().then(() => getBinary(binaryFile));\n}\n\nfunction instantiateArrayBuffer(binaryFile, imports, receiver) {\n return getBinaryPromise(binaryFile).then(binary => {\n  return WebAssembly.instantiate(binary, imports);\n }).then(instance => {\n  return instance;\n }).then(receiver, reason => {\n  err(\"failed to asynchronously prepare wasm: \" + reason);\n  if (isFileURI(wasmBinaryFile)) {\n   err(\"warning: Loading from a file URI (\" + wasmBinaryFile + \") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing\");\n  }\n  abort(reason);\n });\n}\n\nfunction instantiateAsync(binary, binaryFile, imports, callback) {\n if (!binary && typeof WebAssembly.instantiateStreaming == \"function\" && !isDataURI(binaryFile) && !ENVIRONMENT_IS_NODE && typeof fetch == \"function\") {\n  return fetch(binaryFile, {\n   credentials: \"same-origin\"\n  }).then(response => {\n   var result = WebAssembly.instantiateStreaming(response, imports);\n   return result.then(callback, function(reason) {\n    err(\"wasm streaming compile failed: \" + reason);\n    err(\"falling back to ArrayBuffer instantiation\");\n    return instantiateArrayBuffer(binaryFile, imports, callback);\n   });\n  });\n } else {\n  return instantiateArrayBuffer(binaryFile, imports, callback);\n }\n}\n\nfunction createWasm() {\n var info = {\n  \"env\": wasmImports,\n  \"wasi_snapshot_preview1\": wasmImports\n };\n function receiveInstance(instance, module) {\n  var exports = instance.exports;\n  Module[\"asm\"] = exports;\n  wasmMemory = Module[\"asm\"][\"memory\"];\n  assert(wasmMemory, \"memory not found in wasm exports\");\n  updateMemoryViews();\n  wasmTable = Module[\"asm\"][\"__indirect_function_table\"];\n  assert(wasmTable, \"table not found in wasm exports\");\n  addOnInit(Module[\"asm\"][\"__wasm_call_ctors\"]);\n  removeRunDependency(\"wasm-instantiate\");\n  return exports;\n }\n addRunDependency(\"wasm-instantiate\");\n var trueModule = Module;\n function receiveInstantiationResult(result) {\n  assert(Module === trueModule, \"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?\");\n  trueModule = null;\n  receiveInstance(result[\"instance\"]);\n }\n if (Module[\"instantiateWasm\"]) {\n  try {\n   return Module[\"instantiateWasm\"](info, receiveInstance);\n  } catch (e) {\n   err(\"Module.instantiateWasm callback failed with error: \" + e);\n   readyPromiseReject(e);\n  }\n }\n instantiateAsync(wasmBinary, wasmBinaryFile, info, receiveInstantiationResult).catch(readyPromiseReject);\n return {};\n}\n\nvar tempDouble;\n\nvar tempI64;\n\nfunction legacyModuleProp(prop, newName) {\n if (!Object.getOwnPropertyDescriptor(Module, prop)) {\n  Object.defineProperty(Module, prop, {\n   configurable: true,\n   get: function() {\n    abort(\"Module.\" + prop + \" has been replaced with plain \" + newName + \" (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)\");\n   }\n  });\n }\n}\n\nfunction ignoredModuleProp(prop) {\n if (Object.getOwnPropertyDescriptor(Module, prop)) {\n  abort(\"`Module.\" + prop + \"` was supplied but `\" + prop + \"` not included in INCOMING_MODULE_JS_API\");\n }\n}\n\nfunction isExportedByForceFilesystem(name) {\n return name === \"FS_createPath\" || name === \"FS_createDataFile\" || name === \"FS_createPreloadedFile\" || name === \"FS_unlink\" || name === \"addRunDependency\" || name === \"FS_createLazyFile\" || name === \"FS_createDevice\" || name === \"removeRunDependency\";\n}\n\nfunction missingGlobal(sym, msg) {\n if (typeof globalThis !== \"undefined\") {\n  Object.defineProperty(globalThis, sym, {\n   configurable: true,\n   get: function() {\n    warnOnce(\"`\" + sym + \"` is not longer defined by emscripten. \" + msg);\n    return undefined;\n   }\n  });\n }\n}\n\nmissingGlobal(\"buffer\", \"Please use HEAP8.buffer or wasmMemory.buffer\");\n\nfunction missingLibrarySymbol(sym) {\n if (typeof globalThis !== \"undefined\" && !Object.getOwnPropertyDescriptor(globalThis, sym)) {\n  Object.defineProperty(globalThis, sym, {\n   configurable: true,\n   get: function() {\n    var msg = \"`\" + sym + \"` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line\";\n    var librarySymbol = sym;\n    if (!librarySymbol.startsWith(\"_\")) {\n     librarySymbol = \"$\" + sym;\n    }\n    msg += \" (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE=\" + librarySymbol + \")\";\n    if (isExportedByForceFilesystem(sym)) {\n     msg += \". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you\";\n    }\n    warnOnce(msg);\n    return undefined;\n   }\n  });\n }\n unexportedRuntimeSymbol(sym);\n}\n\nfunction unexportedRuntimeSymbol(sym) {\n if (!Object.getOwnPropertyDescriptor(Module, sym)) {\n  Object.defineProperty(Module, sym, {\n   configurable: true,\n   get: function() {\n    var msg = \"'\" + sym + \"' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)\";\n    if (isExportedByForceFilesystem(sym)) {\n     msg += \". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you\";\n    }\n    abort(msg);\n   }\n  });\n }\n}\n\nfunction dbg(text) {\n console.warn.apply(console, arguments);\n}\n\nfunction ExitStatus(status) {\n this.name = \"ExitStatus\";\n this.message = `Program terminated with exit(${status})`;\n this.status = status;\n}\n\nfunction callRuntimeCallbacks(callbacks) {\n while (callbacks.length > 0) {\n  callbacks.shift()(Module);\n }\n}\n\nfunction getCppExceptionTag() {\n return Module[\"asm\"][\"__cpp_exception\"];\n}\n\nfunction getCppExceptionThrownObjectFromWebAssemblyException(ex) {\n var unwind_header = ex.getArg(getCppExceptionTag(), 0);\n return ___thrown_object_from_unwind_exception(unwind_header);\n}\n\nfunction decrementExceptionRefcount(ex) {\n var ptr = getCppExceptionThrownObjectFromWebAssemblyException(ex);\n ___cxa_decrement_exception_refcount(ptr);\n}\n\nfunction withStackSave(f) {\n var stack = stackSave();\n var ret = f();\n stackRestore(stack);\n return ret;\n}\n\nvar UTF8Decoder = typeof TextDecoder != \"undefined\" ? new TextDecoder(\"utf8\") : undefined;\n\nfunction UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {\n idx >>>= 0;\n var endIdx = idx + maxBytesToRead;\n var endPtr = idx;\n while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n  return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n }\n var str = \"\";\n while (idx < endPtr) {\n  var u0 = heapOrArray[idx++];\n  if (!(u0 & 128)) {\n   str += String.fromCharCode(u0);\n   continue;\n  }\n  var u1 = heapOrArray[idx++] & 63;\n  if ((u0 & 224) == 192) {\n   str += String.fromCharCode((u0 & 31) << 6 | u1);\n   continue;\n  }\n  var u2 = heapOrArray[idx++] & 63;\n  if ((u0 & 240) == 224) {\n   u0 = (u0 & 15) << 12 | u1 << 6 | u2;\n  } else {\n   if ((u0 & 248) != 240) warnOnce(\"Invalid UTF-8 leading byte \" + ptrToString(u0) + \" encountered when deserializing a UTF-8 string in wasm memory to a JS string!\");\n   u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;\n  }\n  if (u0 < 65536) {\n   str += String.fromCharCode(u0);\n  } else {\n   var ch = u0 - 65536;\n   str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n  }\n }\n return str;\n}\n\nfunction UTF8ToString(ptr, maxBytesToRead) {\n assert(typeof ptr == \"number\");\n ptr >>>= 0;\n return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : \"\";\n}\n\nfunction getExceptionMessageCommon(ptr) {\n return withStackSave(function() {\n  var type_addr_addr = stackAlloc(4);\n  var message_addr_addr = stackAlloc(4);\n  ___get_exception_message(ptr, type_addr_addr, message_addr_addr);\n  var type_addr = HEAPU32[type_addr_addr >>> 2];\n  var message_addr = HEAPU32[message_addr_addr >>> 2];\n  var type = UTF8ToString(type_addr);\n  _free(type_addr);\n  var message;\n  if (message_addr) {\n   message = UTF8ToString(message_addr);\n   _free(message_addr);\n  }\n  return [ type, message ];\n });\n}\n\nfunction getExceptionMessage(ex) {\n var ptr = getCppExceptionThrownObjectFromWebAssemblyException(ex);\n return getExceptionMessageCommon(ptr);\n}\n\nModule[\"getExceptionMessage\"] = getExceptionMessage;\n\nfunction getValue(ptr, type = \"i8\") {\n if (type.endsWith(\"*\")) type = \"*\";\n switch (type) {\n case \"i1\":\n  return HEAP8[ptr >>> 0];\n\n case \"i8\":\n  return HEAP8[ptr >>> 0];\n\n case \"i16\":\n  return HEAP16[ptr >>> 1];\n\n case \"i32\":\n  return HEAP32[ptr >>> 2];\n\n case \"i64\":\n  abort(\"to do getValue(i64) use WASM_BIGINT\");\n\n case \"float\":\n  return HEAPF32[ptr >>> 2];\n\n case \"double\":\n  return HEAPF64[ptr >>> 3];\n\n case \"*\":\n  return HEAPU32[ptr >>> 2];\n\n default:\n  abort(`invalid type for getValue: ${type}`);\n }\n}\n\nfunction incrementExceptionRefcount(ex) {\n var ptr = getCppExceptionThrownObjectFromWebAssemblyException(ex);\n ___cxa_increment_exception_refcount(ptr);\n}\n\nfunction ptrToString(ptr) {\n assert(typeof ptr === \"number\");\n return \"0x\" + ptr.toString(16).padStart(8, \"0\");\n}\n\nfunction setValue(ptr, value, type = \"i8\") {\n if (type.endsWith(\"*\")) type = \"*\";\n switch (type) {\n case \"i1\":\n  HEAP8[ptr >>> 0] = value;\n  break;\n\n case \"i8\":\n  HEAP8[ptr >>> 0] = value;\n  break;\n\n case \"i16\":\n  HEAP16[ptr >>> 1] = value;\n  break;\n\n case \"i32\":\n  HEAP32[ptr >>> 2] = value;\n  break;\n\n case \"i64\":\n  abort(\"to do setValue(i64) use WASM_BIGINT\");\n\n case \"float\":\n  HEAPF32[ptr >>> 2] = value;\n  break;\n\n case \"double\":\n  HEAPF64[ptr >>> 3] = value;\n  break;\n\n case \"*\":\n  HEAPU32[ptr >>> 2] = value;\n  break;\n\n default:\n  abort(`invalid type for setValue: ${type}`);\n }\n}\n\nfunction warnOnce(text) {\n if (!warnOnce.shown) warnOnce.shown = {};\n if (!warnOnce.shown[text]) {\n  warnOnce.shown[text] = 1;\n  if (ENVIRONMENT_IS_NODE) text = \"warning: \" + text;\n  err(text);\n }\n}\n\nfunction _XML_GetBuffer() {\n err(\"missing function: XML_GetBuffer\");\n abort(-1);\n}\n\nfunction _XML_GetErrorCode() {\n err(\"missing function: XML_GetErrorCode\");\n abort(-1);\n}\n\nfunction _XML_Parse() {\n err(\"missing function: XML_Parse\");\n abort(-1);\n}\n\nfunction _XML_ParseBuffer() {\n err(\"missing function: XML_ParseBuffer\");\n abort(-1);\n}\n\nfunction _XML_ParserCreate() {\n err(\"missing function: XML_ParserCreate\");\n abort(-1);\n}\n\nfunction _XML_ParserFree() {\n err(\"missing function: XML_ParserFree\");\n abort(-1);\n}\n\nfunction _XML_ResumeParser() {\n err(\"missing function: XML_ResumeParser\");\n abort(-1);\n}\n\nfunction _XML_SetCharacterDataHandler() {\n err(\"missing function: XML_SetCharacterDataHandler\");\n abort(-1);\n}\n\nfunction _XML_SetElementHandler() {\n err(\"missing function: XML_SetElementHandler\");\n abort(-1);\n}\n\nfunction _XML_SetUserData() {\n err(\"missing function: XML_SetUserData\");\n abort(-1);\n}\n\nfunction _XML_StopParser() {\n err(\"missing function: XML_StopParser\");\n abort(-1);\n}\n\nfunction ___assert_fail(condition, filename, line, func) {\n abort(`Assertion failed: ${UTF8ToString(condition)}, at: ` + [ filename ? UTF8ToString(filename) : \"unknown filename\", line, func ? UTF8ToString(func) : \"unknown function\" ]);\n}\n\nvar dlopenMissingError = \"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\";\n\nfunction ___dlsym(handle, symbol, ra) {\n abort(dlopenMissingError);\n}\n\nvar SYSCALLS = {\n varargs: undefined,\n get: function() {\n  assert(SYSCALLS.varargs != undefined);\n  SYSCALLS.varargs += 4;\n  var ret = HEAP32[SYSCALLS.varargs - 4 >>> 2];\n  return ret;\n },\n getStr: function(ptr) {\n  var ret = UTF8ToString(ptr);\n  return ret;\n }\n};\n\nfunction ___syscall__newselect(nfds, readfds, writefds, exceptfds, timeout) {\n assert(nfds <= 64, \"nfds must be less than or equal to 64\");\n assert(!exceptfds, \"exceptfds not supported\");\n var total = 0;\n var srcReadLow = readfds ? HEAP32[readfds >>> 2] : 0, srcReadHigh = readfds ? HEAP32[readfds + 4 >>> 2] : 0;\n var srcWriteLow = writefds ? HEAP32[writefds >>> 2] : 0, srcWriteHigh = writefds ? HEAP32[writefds + 4 >>> 2] : 0;\n var srcExceptLow = exceptfds ? HEAP32[exceptfds >>> 2] : 0, srcExceptHigh = exceptfds ? HEAP32[exceptfds + 4 >>> 2] : 0;\n var dstReadLow = 0, dstReadHigh = 0;\n var dstWriteLow = 0, dstWriteHigh = 0;\n var dstExceptLow = 0, dstExceptHigh = 0;\n var allLow = (readfds ? HEAP32[readfds >>> 2] : 0) | (writefds ? HEAP32[writefds >>> 2] : 0) | (exceptfds ? HEAP32[exceptfds >>> 2] : 0);\n var allHigh = (readfds ? HEAP32[readfds + 4 >>> 2] : 0) | (writefds ? HEAP32[writefds + 4 >>> 2] : 0) | (exceptfds ? HEAP32[exceptfds + 4 >>> 2] : 0);\n var check = function(fd, low, high, val) {\n  return fd < 32 ? low & val : high & val;\n };\n for (var fd = 0; fd < nfds; fd++) {\n  var mask = 1 << fd % 32;\n  if (!check(fd, allLow, allHigh, mask)) {\n   continue;\n  }\n  var stream = SYSCALLS.getStreamFromFD(fd);\n  var flags = SYSCALLS.DEFAULT_POLLMASK;\n  if (stream.stream_ops.poll) {\n   flags = stream.stream_ops.poll(stream);\n  }\n  if (flags & 1 && check(fd, srcReadLow, srcReadHigh, mask)) {\n   fd < 32 ? dstReadLow = dstReadLow | mask : dstReadHigh = dstReadHigh | mask;\n   total++;\n  }\n  if (flags & 4 && check(fd, srcWriteLow, srcWriteHigh, mask)) {\n   fd < 32 ? dstWriteLow = dstWriteLow | mask : dstWriteHigh = dstWriteHigh | mask;\n   total++;\n  }\n  if (flags & 2 && check(fd, srcExceptLow, srcExceptHigh, mask)) {\n   fd < 32 ? dstExceptLow = dstExceptLow | mask : dstExceptHigh = dstExceptHigh | mask;\n   total++;\n  }\n }\n if (readfds) {\n  HEAP32[readfds >>> 2] = dstReadLow;\n  HEAP32[readfds + 4 >>> 2] = dstReadHigh;\n }\n if (writefds) {\n  HEAP32[writefds >>> 2] = dstWriteLow;\n  HEAP32[writefds + 4 >>> 2] = dstWriteHigh;\n }\n if (exceptfds) {\n  HEAP32[exceptfds >>> 2] = dstExceptLow;\n  HEAP32[exceptfds + 4 >>> 2] = dstExceptHigh;\n }\n return total;\n}\n\nfunction SOCKFS() {\n err(\"missing function: $SOCKFS\");\n abort(-1);\n}\n\nfunction FS() {\n err(\"missing function: $FS\");\n abort(-1);\n}\n\nfunction getSocketFromFD(fd) {\n var socket = SOCKFS.getSocket(fd);\n if (!socket) throw new FS.ErrnoError(8);\n return socket;\n}\n\nfunction setErrNo(value) {\n HEAP32[___errno_location() >>> 2] = value;\n return value;\n}\n\nvar Sockets = {\n BUFFER_SIZE: 10240,\n MAX_BUFFER_SIZE: 10485760,\n nextFd: 1,\n fds: {},\n nextport: 1,\n maxport: 65535,\n peer: null,\n connections: {},\n portmap: {},\n localAddr: 4261412874,\n addrPool: [ 33554442, 50331658, 67108874, 83886090, 100663306, 117440522, 134217738, 150994954, 167772170, 184549386, 201326602, 218103818, 234881034 ]\n};\n\nfunction inetNtop4(addr) {\n return (addr & 255) + \".\" + (addr >> 8 & 255) + \".\" + (addr >> 16 & 255) + \".\" + (addr >> 24 & 255);\n}\n\nfunction inetNtop6(ints) {\n var str = \"\";\n var word = 0;\n var longest = 0;\n var lastzero = 0;\n var zstart = 0;\n var len = 0;\n var i = 0;\n var parts = [ ints[0] & 65535, ints[0] >> 16, ints[1] & 65535, ints[1] >> 16, ints[2] & 65535, ints[2] >> 16, ints[3] & 65535, ints[3] >> 16 ];\n var hasipv4 = true;\n var v4part = \"\";\n for (i = 0; i < 5; i++) {\n  if (parts[i] !== 0) {\n   hasipv4 = false;\n   break;\n  }\n }\n if (hasipv4) {\n  v4part = inetNtop4(parts[6] | parts[7] << 16);\n  if (parts[5] === -1) {\n   str = \"::ffff:\";\n   str += v4part;\n   return str;\n  }\n  if (parts[5] === 0) {\n   str = \"::\";\n   if (v4part === \"0.0.0.0\") v4part = \"\";\n   if (v4part === \"0.0.0.1\") v4part = \"1\";\n   str += v4part;\n   return str;\n  }\n }\n for (word = 0; word < 8; word++) {\n  if (parts[word] === 0) {\n   if (word - lastzero > 1) {\n    len = 0;\n   }\n   lastzero = word;\n   len++;\n  }\n  if (len > longest) {\n   longest = len;\n   zstart = word - longest + 1;\n  }\n }\n for (word = 0; word < 8; word++) {\n  if (longest > 1) {\n   if (parts[word] === 0 && word >= zstart && word < zstart + longest) {\n    if (word === zstart) {\n     str += \":\";\n     if (zstart === 0) str += \":\";\n    }\n    continue;\n   }\n  }\n  str += Number(_ntohs(parts[word] & 65535)).toString(16);\n  str += word < 7 ? \":\" : \"\";\n }\n return str;\n}\n\nfunction readSockaddr(sa, salen) {\n var family = HEAP16[sa >>> 1];\n var port = _ntohs(HEAPU16[sa + 2 >>> 1]);\n var addr;\n switch (family) {\n case 2:\n  if (salen !== 16) {\n   return {\n    errno: 28\n   };\n  }\n  addr = HEAP32[sa + 4 >>> 2];\n  addr = inetNtop4(addr);\n  break;\n\n case 10:\n  if (salen !== 28) {\n   return {\n    errno: 28\n   };\n  }\n  addr = [ HEAP32[sa + 8 >>> 2], HEAP32[sa + 12 >>> 2], HEAP32[sa + 16 >>> 2], HEAP32[sa + 20 >>> 2] ];\n  addr = inetNtop6(addr);\n  break;\n\n default:\n  return {\n   errno: 5\n  };\n }\n return {\n  family: family,\n  addr: addr,\n  port: port\n };\n}\n\nfunction inetPton4(str) {\n var b = str.split(\".\");\n for (var i = 0; i < 4; i++) {\n  var tmp = Number(b[i]);\n  if (isNaN(tmp)) return null;\n  b[i] = tmp;\n }\n return (b[0] | b[1] << 8 | b[2] << 16 | b[3] << 24) >>> 0;\n}\n\nfunction jstoi_q(str) {\n return parseInt(str);\n}\n\nfunction inetPton6(str) {\n var words;\n var w, offset, z, i;\n var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\\dA-F]{1,4}:(:|\\b)|){5}|([\\dA-F]{1,4}:){6})((([\\dA-F]{1,4}((?!\\3)::|:\\b|$))|(?!\\2\\3)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?\\b){4})$/i;\n var parts = [];\n if (!valid6regx.test(str)) {\n  return null;\n }\n if (str === \"::\") {\n  return [ 0, 0, 0, 0, 0, 0, 0, 0 ];\n }\n if (str.startsWith(\"::\")) {\n  str = str.replace(\"::\", \"Z:\");\n } else {\n  str = str.replace(\"::\", \":Z:\");\n }\n if (str.indexOf(\".\") > 0) {\n  str = str.replace(new RegExp(\"[.]\", \"g\"), \":\");\n  words = str.split(\":\");\n  words[words.length - 4] = jstoi_q(words[words.length - 4]) + jstoi_q(words[words.length - 3]) * 256;\n  words[words.length - 3] = jstoi_q(words[words.length - 2]) + jstoi_q(words[words.length - 1]) * 256;\n  words = words.slice(0, words.length - 2);\n } else {\n  words = str.split(\":\");\n }\n offset = 0;\n z = 0;\n for (w = 0; w < words.length; w++) {\n  if (typeof words[w] == \"string\") {\n   if (words[w] === \"Z\") {\n    for (z = 0; z < 8 - words.length + 1; z++) {\n     parts[w + z] = 0;\n    }\n    offset = z - 1;\n   } else {\n    parts[w + offset] = _htons(parseInt(words[w], 16));\n   }\n  } else {\n   parts[w + offset] = words[w];\n  }\n }\n return [ parts[1] << 16 | parts[0], parts[3] << 16 | parts[2], parts[5] << 16 | parts[4], parts[7] << 16 | parts[6] ];\n}\n\nvar DNS = {\n address_map: {\n  id: 1,\n  addrs: {},\n  names: {}\n },\n lookup_name: function(name) {\n  var res = inetPton4(name);\n  if (res !== null) {\n   return name;\n  }\n  res = inetPton6(name);\n  if (res !== null) {\n   return name;\n  }\n  var addr;\n  if (DNS.address_map.addrs[name]) {\n   addr = DNS.address_map.addrs[name];\n  } else {\n   var id = DNS.address_map.id++;\n   assert(id < 65535, \"exceeded max address mappings of 65535\");\n   addr = \"172.29.\" + (id & 255) + \".\" + (id & 65280);\n   DNS.address_map.names[addr] = name;\n   DNS.address_map.addrs[name] = addr;\n  }\n  return addr;\n },\n lookup_addr: function(addr) {\n  if (DNS.address_map.names[addr]) {\n   return DNS.address_map.names[addr];\n  }\n  return null;\n }\n};\n\nfunction getSocketAddress(addrp, addrlen, allowNull) {\n if (allowNull && addrp === 0) return null;\n var info = readSockaddr(addrp, addrlen);\n if (info.errno) throw new FS.ErrnoError(info.errno);\n info.addr = DNS.lookup_addr(info.addr) || info.addr;\n return info;\n}\n\nfunction ___syscall_bind(fd, addr, addrlen, d1, d2, d3) {\n var sock = getSocketFromFD(fd);\n var info = getSocketAddress(addr, addrlen);\n sock.sock_ops.bind(sock, info.addr, info.port);\n return 0;\n}\n\nfunction ___syscall_connect(fd, addr, addrlen, d1, d2, d3) {\n var sock = getSocketFromFD(fd);\n var info = getSocketAddress(addr, addrlen);\n sock.sock_ops.connect(sock, info.addr, info.port);\n return 0;\n}\n\nfunction ___syscall_faccessat(dirfd, path, amode, flags) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_fcntl64(fd, cmd, varargs) {\n SYSCALLS.varargs = varargs;\n return 0;\n}\n\nfunction ___syscall_fstat64(fd, buf) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction convertI32PairToI53Checked(lo, hi) {\n assert(lo == lo >>> 0 || lo == (lo | 0));\n assert(hi === (hi | 0));\n return hi + 2097152 >>> 0 < 4194305 - !!lo ? (lo >>> 0) + hi * 4294967296 : NaN;\n}\n\nfunction ___syscall_ftruncate64(fd, length_low, length_high) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {\n outIdx >>>= 0;\n assert(typeof str === \"string\");\n if (!(maxBytesToWrite > 0)) return 0;\n var startIdx = outIdx;\n var endIdx = outIdx + maxBytesToWrite - 1;\n for (var i = 0; i < str.length; ++i) {\n  var u = str.charCodeAt(i);\n  if (u >= 55296 && u <= 57343) {\n   var u1 = str.charCodeAt(++i);\n   u = 65536 + ((u & 1023) << 10) | u1 & 1023;\n  }\n  if (u <= 127) {\n   if (outIdx >= endIdx) break;\n   heap[outIdx++ >>> 0] = u;\n  } else if (u <= 2047) {\n   if (outIdx + 1 >= endIdx) break;\n   heap[outIdx++ >>> 0] = 192 | u >> 6;\n   heap[outIdx++ >>> 0] = 128 | u & 63;\n  } else if (u <= 65535) {\n   if (outIdx + 2 >= endIdx) break;\n   heap[outIdx++ >>> 0] = 224 | u >> 12;\n   heap[outIdx++ >>> 0] = 128 | u >> 6 & 63;\n   heap[outIdx++ >>> 0] = 128 | u & 63;\n  } else {\n   if (outIdx + 3 >= endIdx) break;\n   if (u > 1114111) warnOnce(\"Invalid Unicode code point \" + ptrToString(u) + \" encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).\");\n   heap[outIdx++ >>> 0] = 240 | u >> 18;\n   heap[outIdx++ >>> 0] = 128 | u >> 12 & 63;\n   heap[outIdx++ >>> 0] = 128 | u >> 6 & 63;\n   heap[outIdx++ >>> 0] = 128 | u & 63;\n  }\n }\n heap[outIdx >>> 0] = 0;\n return outIdx - startIdx;\n}\n\nfunction stringToUTF8(str, outPtr, maxBytesToWrite) {\n assert(typeof maxBytesToWrite == \"number\", \"stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!\");\n return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);\n}\n\nfunction ___syscall_getdents64(fd, dirp, count) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction zeroMemory(address, size) {\n HEAPU8.fill(0, address, address + size);\n return address;\n}\n\nfunction writeSockaddr(sa, family, addr, port, addrlen) {\n switch (family) {\n case 2:\n  addr = inetPton4(addr);\n  zeroMemory(sa, 16);\n  if (addrlen) {\n   HEAP32[addrlen >>> 2] = 16;\n  }\n  HEAP16[sa >>> 1] = family;\n  HEAP32[sa + 4 >>> 2] = addr;\n  HEAP16[sa + 2 >>> 1] = _htons(port);\n  break;\n\n case 10:\n  addr = inetPton6(addr);\n  zeroMemory(sa, 28);\n  if (addrlen) {\n   HEAP32[addrlen >>> 2] = 28;\n  }\n  HEAP32[sa >>> 2] = family;\n  HEAP32[sa + 8 >>> 2] = addr[0];\n  HEAP32[sa + 12 >>> 2] = addr[1];\n  HEAP32[sa + 16 >>> 2] = addr[2];\n  HEAP32[sa + 20 >>> 2] = addr[3];\n  HEAP16[sa + 2 >>> 1] = _htons(port);\n  break;\n\n default:\n  return 5;\n }\n return 0;\n}\n\nfunction ___syscall_getpeername(fd, addr, addrlen, d1, d2, d3) {\n var sock = getSocketFromFD(fd);\n if (!sock.daddr) {\n  return -53;\n }\n var errno = writeSockaddr(addr, sock.family, DNS.lookup_name(sock.daddr), sock.dport, addrlen);\n assert(!errno);\n return 0;\n}\n\nfunction ___syscall_getsockopt(fd, level, optname, optval, optlen, d1) {\n var sock = getSocketFromFD(fd);\n if (level === 1) {\n  if (optname === 4) {\n   HEAP32[optval >>> 2] = sock.error;\n   HEAP32[optlen >>> 2] = 4;\n   sock.error = null;\n   return 0;\n  }\n }\n return -50;\n}\n\nfunction ___syscall_ioctl(fd, op, varargs) {\n SYSCALLS.varargs = varargs;\n return 0;\n}\n\nfunction ___syscall_lstat64(path, buf) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_mkdirat(dirfd, path, mode) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_newfstatat(dirfd, path, buf, flags) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_openat(dirfd, path, flags, varargs) {\n SYSCALLS.varargs = varargs;\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_recvfrom(fd, buf, len, flags, addr, addrlen) {\n var sock = getSocketFromFD(fd);\n var msg = sock.sock_ops.recvmsg(sock, len);\n if (!msg) return 0;\n if (addr) {\n  var errno = writeSockaddr(addr, sock.family, DNS.lookup_name(msg.addr), msg.port, addrlen);\n  assert(!errno);\n }\n HEAPU8.set(msg.buffer, buf >>> 0);\n return msg.buffer.byteLength;\n}\n\nfunction ___syscall_renameat(olddirfd, oldpath, newdirfd, newpath) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_rmdir(path) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_sendto(fd, message, length, flags, addr, addr_len) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_socket(domain, type, protocol) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_stat64(path, buf) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___syscall_unlinkat(dirfd, path, flags) {\n abort(\"it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction ___throw_exception_with_stack_trace(ex) {\n var e = new WebAssembly.Exception(getCppExceptionTag(), [ ex ], {\n  traceStack: true\n });\n e.message = getExceptionMessage(e);\n if (e.stack) {\n  var arr = e.stack.split(\"\\n\");\n  arr.splice(1, 1);\n  e.stack = arr.join(\"\\n\");\n }\n throw e;\n}\n\nvar nowIsMonotonic = true;\n\nfunction __emscripten_get_now_is_monotonic() {\n return nowIsMonotonic;\n}\n\nfunction readI53FromI64(ptr) {\n return HEAPU32[ptr >>> 2] + HEAP32[ptr + 4 >>> 2] * 4294967296;\n}\n\nfunction isLeapYear(year) {\n return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nvar MONTH_DAYS_LEAP_CUMULATIVE = [ 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335 ];\n\nvar MONTH_DAYS_REGULAR_CUMULATIVE = [ 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 ];\n\nfunction ydayFromDate(date) {\n var leap = isLeapYear(date.getFullYear());\n var monthDaysCumulative = leap ? MONTH_DAYS_LEAP_CUMULATIVE : MONTH_DAYS_REGULAR_CUMULATIVE;\n var yday = monthDaysCumulative[date.getMonth()] + date.getDate() - 1;\n return yday;\n}\n\nfunction __localtime_js(time, tmPtr) {\n var date = new Date(readI53FromI64(time) * 1e3);\n HEAP32[tmPtr >>> 2] = date.getSeconds();\n HEAP32[tmPtr + 4 >>> 2] = date.getMinutes();\n HEAP32[tmPtr + 8 >>> 2] = date.getHours();\n HEAP32[tmPtr + 12 >>> 2] = date.getDate();\n HEAP32[tmPtr + 16 >>> 2] = date.getMonth();\n HEAP32[tmPtr + 20 >>> 2] = date.getFullYear() - 1900;\n HEAP32[tmPtr + 24 >>> 2] = date.getDay();\n var yday = ydayFromDate(date) | 0;\n HEAP32[tmPtr + 28 >>> 2] = yday;\n HEAP32[tmPtr + 36 >>> 2] = -(date.getTimezoneOffset() * 60);\n var start = new Date(date.getFullYear(), 0, 1);\n var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();\n var winterOffset = start.getTimezoneOffset();\n var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset)) | 0;\n HEAP32[tmPtr + 32 >>> 2] = dst;\n}\n\nfunction lengthBytesUTF8(str) {\n var len = 0;\n for (var i = 0; i < str.length; ++i) {\n  var c = str.charCodeAt(i);\n  if (c <= 127) {\n   len++;\n  } else if (c <= 2047) {\n   len += 2;\n  } else if (c >= 55296 && c <= 57343) {\n   len += 4;\n   ++i;\n  } else {\n   len += 3;\n  }\n }\n return len;\n}\n\nfunction stringToNewUTF8(str) {\n var size = lengthBytesUTF8(str) + 1;\n var ret = _malloc(size);\n if (ret) stringToUTF8(str, ret, size);\n return ret;\n}\n\nfunction __tzset_js(timezone, daylight, tzname) {\n var currentYear = new Date().getFullYear();\n var winter = new Date(currentYear, 0, 1);\n var summer = new Date(currentYear, 6, 1);\n var winterOffset = winter.getTimezoneOffset();\n var summerOffset = summer.getTimezoneOffset();\n var stdTimezoneOffset = Math.max(winterOffset, summerOffset);\n HEAPU32[timezone >>> 2] = stdTimezoneOffset * 60;\n HEAP32[daylight >>> 2] = Number(winterOffset != summerOffset);\n function extractZone(date) {\n  var match = date.toTimeString().match(/\\(([A-Za-z ]+)\\)$/);\n  return match ? match[1] : \"GMT\";\n }\n var winterName = extractZone(winter);\n var summerName = extractZone(summer);\n var winterNamePtr = stringToNewUTF8(winterName);\n var summerNamePtr = stringToNewUTF8(summerName);\n if (summerOffset < winterOffset) {\n  HEAPU32[tzname >>> 2] = winterNamePtr;\n  HEAPU32[tzname + 4 >>> 2] = summerNamePtr;\n } else {\n  HEAPU32[tzname >>> 2] = summerNamePtr;\n  HEAPU32[tzname + 4 >>> 2] = winterNamePtr;\n }\n}\n\nfunction _abort() {\n abort(\"native code called abort()\");\n}\n\nfunction _dlopen(filename, flags) {\n abort(dlopenMissingError);\n}\n\nfunction _duckdb_web_fs_directory_create(path, pathLen) {\n return globalThis.DUCKDB_RUNTIME.createDirectory(Module, path, pathLen);\n}\n\nfunction _duckdb_web_fs_directory_exists(path, pathLen) {\n return globalThis.DUCKDB_RUNTIME.checkDirectory(Module, path, pathLen);\n}\n\nfunction _duckdb_web_fs_directory_list_files(path, pathLen) {\n return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(Module, path, pathLen);\n}\n\nfunction _duckdb_web_fs_directory_remove(path, pathLen) {\n return globalThis.DUCKDB_RUNTIME.removeDirectory(Module, path, pathLen);\n}\n\nfunction _duckdb_web_fs_file_close(fileId) {\n return globalThis.DUCKDB_RUNTIME.closeFile(Module, fileId);\n}\n\nfunction _duckdb_web_fs_file_exists(path, pathLen) {\n return globalThis.DUCKDB_RUNTIME.checkFile(Module, path, pathLen);\n}\n\nfunction _duckdb_web_fs_file_get_last_modified_time(fileId) {\n return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(Module, fileId);\n}\n\nfunction _duckdb_web_fs_file_move(from, fromLen, to, toLen) {\n return globalThis.DUCKDB_RUNTIME.moveFile(Module, from, fromLen, to, toLen);\n}\n\nfunction _duckdb_web_fs_file_open(fileId, flags) {\n return globalThis.DUCKDB_RUNTIME.openFile(Module, fileId, flags);\n}\n\nfunction _duckdb_web_fs_file_read(fileId, buf, size, location) {\n return globalThis.DUCKDB_RUNTIME.readFile(Module, fileId, buf, size, location);\n}\n\nfunction _duckdb_web_fs_file_truncate(fileId, newSize) {\n return globalThis.DUCKDB_RUNTIME.truncateFile(Module, fileId, newSize);\n}\n\nfunction _duckdb_web_fs_file_write(fileId, buf, size, location) {\n return globalThis.DUCKDB_RUNTIME.writeFile(Module, fileId, buf, size, location);\n}\n\nfunction _duckdb_web_fs_get_default_data_protocol(Module) {\n return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(Module);\n}\n\nfunction _duckdb_web_fs_glob(path, pathLen) {\n return globalThis.DUCKDB_RUNTIME.glob(Module, path, pathLen);\n}\n\nfunction _duckdb_web_test_platform_feature(feature) {\n return globalThis.DUCKDB_RUNTIME.testPlatformFeature(Module, feature);\n}\n\nfunction _duckdb_web_udf_scalar_call(funcId, descPtr, descSize, ptrsPtr, ptrsSize, response) {\n return globalThis.DUCKDB_RUNTIME.callScalarUDF(Module, funcId, descPtr, descSize, ptrsPtr, ptrsSize, response);\n}\n\nfunction _emscripten_console_error(str) {\n assert(typeof str == \"number\");\n console.error(UTF8ToString(str));\n}\n\nfunction _emscripten_date_now() {\n return Date.now();\n}\n\nfunction getHeapMax() {\n return 4294901760;\n}\n\nfunction _emscripten_get_heap_max() {\n return getHeapMax();\n}\n\nvar _emscripten_get_now;\n\nif (ENVIRONMENT_IS_NODE) {\n global.performance = require(\"perf_hooks\").performance;\n}\n\n_emscripten_get_now = () => performance.now();\n\nfunction _emscripten_memcpy_big(dest, src, num) {\n HEAPU8.copyWithin(dest >>> 0, src >>> 0, src + num >>> 0);\n}\n\nfunction emscripten_realloc_buffer(size) {\n var b = wasmMemory.buffer;\n var pages = size - b.byteLength + 65535 >>> 16;\n try {\n  wasmMemory.grow(pages);\n  updateMemoryViews();\n  return 1;\n } catch (e) {\n  err(`emscripten_realloc_buffer: Attempted to grow heap from ${b.byteLength} bytes to ${size} bytes, but got error: ${e}`);\n }\n}\n\nfunction _emscripten_resize_heap(requestedSize) {\n var oldSize = HEAPU8.length;\n requestedSize = requestedSize >>> 0;\n assert(requestedSize > oldSize);\n var maxHeapSize = getHeapMax();\n if (requestedSize > maxHeapSize) {\n  err(`Cannot enlarge memory, asked to go up to ${requestedSize} bytes, but the limit is ${maxHeapSize} bytes!`);\n  return false;\n }\n var alignUp = (x, multiple) => x + (multiple - x % multiple) % multiple;\n for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n  var overGrownHeapSize = oldSize * (1 + .2 / cutDown);\n  overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);\n  var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n  var replacement = emscripten_realloc_buffer(newSize);\n  if (replacement) {\n   return true;\n  }\n }\n err(`Failed to grow the heap from ${oldSize} bytes to ${newSize} bytes, not enough memory!`);\n return false;\n}\n\nvar ENV = {};\n\nfunction getExecutableName() {\n return thisProgram || \"./this.program\";\n}\n\nfunction getEnvStrings() {\n if (!getEnvStrings.strings) {\n  var lang = (typeof navigator == \"object\" && navigator.languages && navigator.languages[0] || \"C\").replace(\"-\", \"_\") + \".UTF-8\";\n  var env = {\n   \"USER\": \"web_user\",\n   \"LOGNAME\": \"web_user\",\n   \"PATH\": \"/\",\n   \"PWD\": \"/\",\n   \"HOME\": \"/home/web_user\",\n   \"LANG\": lang,\n   \"_\": getExecutableName()\n  };\n  for (var x in ENV) {\n   if (ENV[x] === undefined) delete env[x]; else env[x] = ENV[x];\n  }\n  var strings = [];\n  for (var x in env) {\n   strings.push(`${x}=${env[x]}`);\n  }\n  getEnvStrings.strings = strings;\n }\n return getEnvStrings.strings;\n}\n\nfunction stringToAscii(str, buffer) {\n for (var i = 0; i < str.length; ++i) {\n  assert(str.charCodeAt(i) === (str.charCodeAt(i) & 255));\n  HEAP8[buffer++ >>> 0] = str.charCodeAt(i);\n }\n HEAP8[buffer >>> 0] = 0;\n}\n\nfunction _environ_get(__environ, environ_buf) {\n var bufSize = 0;\n getEnvStrings().forEach(function(string, i) {\n  var ptr = environ_buf + bufSize;\n  HEAPU32[__environ + i * 4 >>> 2] = ptr;\n  stringToAscii(string, ptr);\n  bufSize += string.length + 1;\n });\n return 0;\n}\n\nfunction _environ_sizes_get(penviron_count, penviron_buf_size) {\n var strings = getEnvStrings();\n HEAPU32[penviron_count >>> 2] = strings.length;\n var bufSize = 0;\n strings.forEach(function(string) {\n  bufSize += string.length + 1;\n });\n HEAPU32[penviron_buf_size >>> 2] = bufSize;\n return 0;\n}\n\nfunction _fd_close(fd) {\n abort(\"fd_close called without SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction _fd_fdstat_get(fd, pbuf) {\n var rightsBase = 0;\n var rightsInheriting = 0;\n var flags = 0;\n {\n  assert(fd == 0 || fd == 1 || fd == 2);\n  var type = 2;\n  if (fd == 0) {\n   rightsBase = 2;\n  } else if (fd == 1 || fd == 2) {\n   rightsBase = 64;\n  }\n  flags = 1;\n }\n HEAP8[pbuf >>> 0] = type;\n HEAP16[pbuf + 2 >>> 1] = flags;\n tempI64 = [ rightsBase >>> 0, (tempDouble = rightsBase, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], \n HEAP32[pbuf + 8 >>> 2] = tempI64[0], HEAP32[pbuf + 12 >>> 2] = tempI64[1];\n tempI64 = [ rightsInheriting >>> 0, (tempDouble = rightsInheriting, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], \n HEAP32[pbuf + 16 >>> 2] = tempI64[0], HEAP32[pbuf + 20 >>> 2] = tempI64[1];\n return 0;\n}\n\nfunction _fd_pread(fd, iov, iovcnt, offset_low, offset_high, pnum) {\n abort(\"fd_pread called without SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction _fd_pwrite(fd, iov, iovcnt, offset_low, offset_high, pnum) {\n abort(\"fd_pwrite called without SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction _fd_read(fd, iov, iovcnt, pnum) {\n abort(\"fd_read called without SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nfunction _fd_seek(fd, offset_low, offset_high, whence, newOffset) {\n return 70;\n}\n\nfunction _fd_sync(fd) {\n abort(\"fd_sync called without SYSCALLS_REQUIRE_FILESYSTEM\");\n}\n\nvar printCharBuffers = [ null, [], [] ];\n\nfunction printChar(stream, curr) {\n var buffer = printCharBuffers[stream];\n assert(buffer);\n if (curr === 0 || curr === 10) {\n  (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));\n  buffer.length = 0;\n } else {\n  buffer.push(curr);\n }\n}\n\nfunction flush_NO_FILESYSTEM() {\n _fflush(0);\n if (printCharBuffers[1].length) printChar(1, 10);\n if (printCharBuffers[2].length) printChar(2, 10);\n}\n\nfunction _fd_write(fd, iov, iovcnt, pnum) {\n var num = 0;\n for (var i = 0; i < iovcnt; i++) {\n  var ptr = HEAPU32[iov >>> 2];\n  var len = HEAPU32[iov + 4 >>> 2];\n  iov += 8;\n  for (var j = 0; j < len; j++) {\n   printChar(fd, HEAPU8[ptr + j >>> 0]);\n  }\n  num += len;\n }\n HEAPU32[pnum >>> 2] = num;\n return 0;\n}\n\nfunction _getaddrinfo(node, service, hint, out) {\n var addrs = [];\n var canon = null;\n var addr = 0;\n var port = 0;\n var flags = 0;\n var family = 0;\n var type = 0;\n var proto = 0;\n var ai, last;\n function allocaddrinfo(family, type, proto, canon, addr, port) {\n  var sa, salen, ai;\n  var errno;\n  salen = family === 10 ? 28 : 16;\n  addr = family === 10 ? inetNtop6(addr) : inetNtop4(addr);\n  sa = _malloc(salen);\n  errno = writeSockaddr(sa, family, addr, port);\n  assert(!errno);\n  ai = _malloc(32);\n  HEAP32[ai + 4 >>> 2] = family;\n  HEAP32[ai + 8 >>> 2] = type;\n  HEAP32[ai + 12 >>> 2] = proto;\n  HEAPU32[ai + 24 >>> 2] = canon;\n  HEAPU32[ai + 20 >>> 2] = sa;\n  if (family === 10) {\n   HEAP32[ai + 16 >>> 2] = 28;\n  } else {\n   HEAP32[ai + 16 >>> 2] = 16;\n  }\n  HEAP32[ai + 28 >>> 2] = 0;\n  return ai;\n }\n if (hint) {\n  flags = HEAP32[hint >>> 2];\n  family = HEAP32[hint + 4 >>> 2];\n  type = HEAP32[hint + 8 >>> 2];\n  proto = HEAP32[hint + 12 >>> 2];\n }\n if (type && !proto) {\n  proto = type === 2 ? 17 : 6;\n }\n if (!type && proto) {\n  type = proto === 17 ? 2 : 1;\n }\n if (proto === 0) {\n  proto = 6;\n }\n if (type === 0) {\n  type = 1;\n }\n if (!node && !service) {\n  return -2;\n }\n if (flags & ~(1 | 2 | 4 | 1024 | 8 | 16 | 32)) {\n  return -1;\n }\n if (hint !== 0 && HEAP32[hint >>> 2] & 2 && !node) {\n  return -1;\n }\n if (flags & 32) {\n  return -2;\n }\n if (type !== 0 && type !== 1 && type !== 2) {\n  return -7;\n }\n if (family !== 0 && family !== 2 && family !== 10) {\n  return -6;\n }\n if (service) {\n  service = UTF8ToString(service);\n  port = parseInt(service, 10);\n  if (isNaN(port)) {\n   if (flags & 1024) {\n    return -2;\n   }\n   return -8;\n  }\n }\n if (!node) {\n  if (family === 0) {\n   family = 2;\n  }\n  if ((flags & 1) === 0) {\n   if (family === 2) {\n    addr = _htonl(2130706433);\n   } else {\n    addr = [ 0, 0, 0, 1 ];\n   }\n  }\n  ai = allocaddrinfo(family, type, proto, null, addr, port);\n  HEAPU32[out >>> 2] = ai;\n  return 0;\n }\n node = UTF8ToString(node);\n addr = inetPton4(node);\n if (addr !== null) {\n  if (family === 0 || family === 2) {\n   family = 2;\n  } else if (family === 10 && flags & 8) {\n   addr = [ 0, 0, _htonl(65535), addr ];\n   family = 10;\n  } else {\n   return -2;\n  }\n } else {\n  addr = inetPton6(node);\n  if (addr !== null) {\n   if (family === 0 || family === 10) {\n    family = 10;\n   } else {\n    return -2;\n   }\n  }\n }\n if (addr != null) {\n  ai = allocaddrinfo(family, type, proto, node, addr, port);\n  HEAPU32[out >>> 2] = ai;\n  return 0;\n }\n if (flags & 4) {\n  return -2;\n }\n node = DNS.lookup_name(node);\n addr = inetPton4(node);\n if (family === 0) {\n  family = 2;\n } else if (family === 10) {\n  addr = [ 0, 0, _htonl(65535), addr ];\n }\n ai = allocaddrinfo(family, type, proto, null, addr, port);\n HEAPU32[out >>> 2] = ai;\n return 0;\n}\n\nfunction initRandomFill() {\n if (typeof crypto == \"object\" && typeof crypto[\"getRandomValues\"] == \"function\") {\n  return view => crypto.getRandomValues(view);\n } else if (ENVIRONMENT_IS_NODE) {\n  try {\n   var crypto_module = require(\"crypto\");\n   var randomFillSync = crypto_module[\"randomFillSync\"];\n   if (randomFillSync) {\n    return view => crypto_module[\"randomFillSync\"](view);\n   }\n   var randomBytes = crypto_module[\"randomBytes\"];\n   return view => (view.set(randomBytes(view.byteLength)), view);\n  } catch (e) {}\n }\n abort(\"no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };\");\n}\n\nfunction randomFill(view) {\n return (randomFill = initRandomFill())(view);\n}\n\nfunction _getentropy(buffer, size) {\n randomFill(HEAPU8.subarray(buffer >>> 0, buffer + size >>> 0));\n return 0;\n}\n\nfunction _getnameinfo(sa, salen, node, nodelen, serv, servlen, flags) {\n var info = readSockaddr(sa, salen);\n if (info.errno) {\n  return -6;\n }\n var port = info.port;\n var addr = info.addr;\n var overflowed = false;\n if (node && nodelen) {\n  var lookup;\n  if (flags & 1 || !(lookup = DNS.lookup_addr(addr))) {\n   if (flags & 8) {\n    return -2;\n   }\n  } else {\n   addr = lookup;\n  }\n  var numBytesWrittenExclNull = stringToUTF8(addr, node, nodelen);\n  if (numBytesWrittenExclNull + 1 >= nodelen) {\n   overflowed = true;\n  }\n }\n if (serv && servlen) {\n  port = \"\" + port;\n  var numBytesWrittenExclNull = stringToUTF8(port, serv, servlen);\n  if (numBytesWrittenExclNull + 1 >= servlen) {\n   overflowed = true;\n  }\n }\n if (overflowed) {\n  return -12;\n }\n return 0;\n}\n\nfunction arraySum(array, index) {\n var sum = 0;\n for (var i = 0; i <= index; sum += array[i++]) {}\n return sum;\n}\n\nvar MONTH_DAYS_LEAP = [ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];\n\nvar MONTH_DAYS_REGULAR = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];\n\nfunction addDays(date, days) {\n var newDate = new Date(date.getTime());\n while (days > 0) {\n  var leap = isLeapYear(newDate.getFullYear());\n  var currentMonth = newDate.getMonth();\n  var daysInCurrentMonth = (leap ? MONTH_DAYS_LEAP : MONTH_DAYS_REGULAR)[currentMonth];\n  if (days > daysInCurrentMonth - newDate.getDate()) {\n   days -= daysInCurrentMonth - newDate.getDate() + 1;\n   newDate.setDate(1);\n   if (currentMonth < 11) {\n    newDate.setMonth(currentMonth + 1);\n   } else {\n    newDate.setMonth(0);\n    newDate.setFullYear(newDate.getFullYear() + 1);\n   }\n  } else {\n   newDate.setDate(newDate.getDate() + days);\n   return newDate;\n  }\n }\n return newDate;\n}\n\nfunction intArrayFromString(stringy, dontAddNull, length) {\n var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;\n var u8array = new Array(len);\n var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);\n if (dontAddNull) u8array.length = numBytesWritten;\n return u8array;\n}\n\nfunction writeArrayToMemory(array, buffer) {\n assert(array.length >= 0, \"writeArrayToMemory array must have a length (should be an array or typed array)\");\n HEAP8.set(array, buffer >>> 0);\n}\n\nfunction _strftime(s, maxsize, format, tm) {\n var tm_zone = HEAP32[tm + 40 >>> 2];\n var date = {\n  tm_sec: HEAP32[tm >>> 2],\n  tm_min: HEAP32[tm + 4 >>> 2],\n  tm_hour: HEAP32[tm + 8 >>> 2],\n  tm_mday: HEAP32[tm + 12 >>> 2],\n  tm_mon: HEAP32[tm + 16 >>> 2],\n  tm_year: HEAP32[tm + 20 >>> 2],\n  tm_wday: HEAP32[tm + 24 >>> 2],\n  tm_yday: HEAP32[tm + 28 >>> 2],\n  tm_isdst: HEAP32[tm + 32 >>> 2],\n  tm_gmtoff: HEAP32[tm + 36 >>> 2],\n  tm_zone: tm_zone ? UTF8ToString(tm_zone) : \"\"\n };\n var pattern = UTF8ToString(format);\n var EXPANSION_RULES_1 = {\n  \"%c\": \"%a %b %d %H:%M:%S %Y\",\n  \"%D\": \"%m/%d/%y\",\n  \"%F\": \"%Y-%m-%d\",\n  \"%h\": \"%b\",\n  \"%r\": \"%I:%M:%S %p\",\n  \"%R\": \"%H:%M\",\n  \"%T\": \"%H:%M:%S\",\n  \"%x\": \"%m/%d/%y\",\n  \"%X\": \"%H:%M:%S\",\n  \"%Ec\": \"%c\",\n  \"%EC\": \"%C\",\n  \"%Ex\": \"%m/%d/%y\",\n  \"%EX\": \"%H:%M:%S\",\n  \"%Ey\": \"%y\",\n  \"%EY\": \"%Y\",\n  \"%Od\": \"%d\",\n  \"%Oe\": \"%e\",\n  \"%OH\": \"%H\",\n  \"%OI\": \"%I\",\n  \"%Om\": \"%m\",\n  \"%OM\": \"%M\",\n  \"%OS\": \"%S\",\n  \"%Ou\": \"%u\",\n  \"%OU\": \"%U\",\n  \"%OV\": \"%V\",\n  \"%Ow\": \"%w\",\n  \"%OW\": \"%W\",\n  \"%Oy\": \"%y\"\n };\n for (var rule in EXPANSION_RULES_1) {\n  pattern = pattern.replace(new RegExp(rule, \"g\"), EXPANSION_RULES_1[rule]);\n }\n var WEEKDAYS = [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ];\n var MONTHS = [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ];\n function leadingSomething(value, digits, character) {\n  var str = typeof value == \"number\" ? value.toString() : value || \"\";\n  while (str.length < digits) {\n   str = character[0] + str;\n  }\n  return str;\n }\n function leadingNulls(value, digits) {\n  return leadingSomething(value, digits, \"0\");\n }\n function compareByDay(date1, date2) {\n  function sgn(value) {\n   return value < 0 ? -1 : value > 0 ? 1 : 0;\n  }\n  var compare;\n  if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {\n   if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {\n    compare = sgn(date1.getDate() - date2.getDate());\n   }\n  }\n  return compare;\n }\n function getFirstWeekStartDate(janFourth) {\n  switch (janFourth.getDay()) {\n  case 0:\n   return new Date(janFourth.getFullYear() - 1, 11, 29);\n\n  case 1:\n   return janFourth;\n\n  case 2:\n   return new Date(janFourth.getFullYear(), 0, 3);\n\n  case 3:\n   return new Date(janFourth.getFullYear(), 0, 2);\n\n  case 4:\n   return new Date(janFourth.getFullYear(), 0, 1);\n\n  case 5:\n   return new Date(janFourth.getFullYear() - 1, 11, 31);\n\n  case 6:\n   return new Date(janFourth.getFullYear() - 1, 11, 30);\n  }\n }\n function getWeekBasedYear(date) {\n  var thisDate = addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);\n  var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);\n  var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);\n  var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);\n  var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);\n  if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {\n   if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {\n    return thisDate.getFullYear() + 1;\n   }\n   return thisDate.getFullYear();\n  }\n  return thisDate.getFullYear() - 1;\n }\n var EXPANSION_RULES_2 = {\n  \"%a\": function(date) {\n   return WEEKDAYS[date.tm_wday].substring(0, 3);\n  },\n  \"%A\": function(date) {\n   return WEEKDAYS[date.tm_wday];\n  },\n  \"%b\": function(date) {\n   return MONTHS[date.tm_mon].substring(0, 3);\n  },\n  \"%B\": function(date) {\n   return MONTHS[date.tm_mon];\n  },\n  \"%C\": function(date) {\n   var year = date.tm_year + 1900;\n   return leadingNulls(year / 100 | 0, 2);\n  },\n  \"%d\": function(date) {\n   return leadingNulls(date.tm_mday, 2);\n  },\n  \"%e\": function(date) {\n   return leadingSomething(date.tm_mday, 2, \" \");\n  },\n  \"%g\": function(date) {\n   return getWeekBasedYear(date).toString().substring(2);\n  },\n  \"%G\": function(date) {\n   return getWeekBasedYear(date);\n  },\n  \"%H\": function(date) {\n   return leadingNulls(date.tm_hour, 2);\n  },\n  \"%I\": function(date) {\n   var twelveHour = date.tm_hour;\n   if (twelveHour == 0) twelveHour = 12; else if (twelveHour > 12) twelveHour -= 12;\n   return leadingNulls(twelveHour, 2);\n  },\n  \"%j\": function(date) {\n   return leadingNulls(date.tm_mday + arraySum(isLeapYear(date.tm_year + 1900) ? MONTH_DAYS_LEAP : MONTH_DAYS_REGULAR, date.tm_mon - 1), 3);\n  },\n  \"%m\": function(date) {\n   return leadingNulls(date.tm_mon + 1, 2);\n  },\n  \"%M\": function(date) {\n   return leadingNulls(date.tm_min, 2);\n  },\n  \"%n\": function() {\n   return \"\\n\";\n  },\n  \"%p\": function(date) {\n   if (date.tm_hour >= 0 && date.tm_hour < 12) {\n    return \"AM\";\n   }\n   return \"PM\";\n  },\n  \"%S\": function(date) {\n   return leadingNulls(date.tm_sec, 2);\n  },\n  \"%t\": function() {\n   return \"\\t\";\n  },\n  \"%u\": function(date) {\n   return date.tm_wday || 7;\n  },\n  \"%U\": function(date) {\n   var days = date.tm_yday + 7 - date.tm_wday;\n   return leadingNulls(Math.floor(days / 7), 2);\n  },\n  \"%V\": function(date) {\n   var val = Math.floor((date.tm_yday + 7 - (date.tm_wday + 6) % 7) / 7);\n   if ((date.tm_wday + 371 - date.tm_yday - 2) % 7 <= 2) {\n    val++;\n   }\n   if (!val) {\n    val = 52;\n    var dec31 = (date.tm_wday + 7 - date.tm_yday - 1) % 7;\n    if (dec31 == 4 || dec31 == 5 && isLeapYear(date.tm_year % 400 - 1)) {\n     val++;\n    }\n   } else if (val == 53) {\n    var jan1 = (date.tm_wday + 371 - date.tm_yday) % 7;\n    if (jan1 != 4 && (jan1 != 3 || !isLeapYear(date.tm_year))) val = 1;\n   }\n   return leadingNulls(val, 2);\n  },\n  \"%w\": function(date) {\n   return date.tm_wday;\n  },\n  \"%W\": function(date) {\n   var days = date.tm_yday + 7 - (date.tm_wday + 6) % 7;\n   return leadingNulls(Math.floor(days / 7), 2);\n  },\n  \"%y\": function(date) {\n   return (date.tm_year + 1900).toString().substring(2);\n  },\n  \"%Y\": function(date) {\n   return date.tm_year + 1900;\n  },\n  \"%z\": function(date) {\n   var off = date.tm_gmtoff;\n   var ahead = off >= 0;\n   off = Math.abs(off) / 60;\n   off = off / 60 * 100 + off % 60;\n   return (ahead ? \"+\" : \"-\") + String(\"0000\" + off).slice(-4);\n  },\n  \"%Z\": function(date) {\n   return date.tm_zone;\n  },\n  \"%%\": function() {\n   return \"%\";\n  }\n };\n pattern = pattern.replace(/%%/g, \"\\0\\0\");\n for (var rule in EXPANSION_RULES_2) {\n  if (pattern.includes(rule)) {\n   pattern = pattern.replace(new RegExp(rule, \"g\"), EXPANSION_RULES_2[rule](date));\n  }\n }\n pattern = pattern.replace(/\\0\\0/g, \"%\");\n var bytes = intArrayFromString(pattern, false);\n if (bytes.length > maxsize) {\n  return 0;\n }\n writeArrayToMemory(bytes, s);\n return bytes.length - 1;\n}\n\nfunction _strftime_l(s, maxsize, format, tm, loc) {\n return _strftime(s, maxsize, format, tm);\n}\n\nfunction _ucnv_close_64() {\n err(\"missing function: ucnv_close_64\");\n abort(-1);\n}\n\nfunction _ucnv_convertEx_64() {\n err(\"missing function: ucnv_convertEx_64\");\n abort(-1);\n}\n\nfunction _ucnv_open_64() {\n err(\"missing function: ucnv_open_64\");\n abort(-1);\n}\n\nfunction _ucnv_toAlgorithmic_64() {\n err(\"missing function: ucnv_toAlgorithmic_64\");\n abort(-1);\n}\n\nfunction _ucsdet_close_64() {\n err(\"missing function: ucsdet_close_64\");\n abort(-1);\n}\n\nfunction _ucsdet_detect_64() {\n err(\"missing function: ucsdet_detect_64\");\n abort(-1);\n}\n\nfunction _ucsdet_getConfidence_64() {\n err(\"missing function: ucsdet_getConfidence_64\");\n abort(-1);\n}\n\nfunction _ucsdet_getName_64() {\n err(\"missing function: ucsdet_getName_64\");\n abort(-1);\n}\n\nfunction _ucsdet_open_64() {\n err(\"missing function: ucsdet_open_64\");\n abort(-1);\n}\n\nfunction _ucsdet_setText_64() {\n err(\"missing function: ucsdet_setText_64\");\n abort(-1);\n}\n\nfunction _unzClose() {\n err(\"missing function: unzClose\");\n abort(-1);\n}\n\nfunction _unzCloseCurrentFile() {\n err(\"missing function: unzCloseCurrentFile\");\n abort(-1);\n}\n\nfunction _unzGetCurrentFileInfo() {\n err(\"missing function: unzGetCurrentFileInfo\");\n abort(-1);\n}\n\nfunction _unzGetCurrentFileInfo64() {\n err(\"missing function: unzGetCurrentFileInfo64\");\n abort(-1);\n}\n\nfunction _unzGetGlobalInfo() {\n err(\"missing function: unzGetGlobalInfo\");\n abort(-1);\n}\n\nfunction _unzGoToFirstFile() {\n err(\"missing function: unzGoToFirstFile\");\n abort(-1);\n}\n\nfunction _unzGoToNextFile() {\n err(\"missing function: unzGoToNextFile\");\n abort(-1);\n}\n\nfunction _unzLocateFile() {\n err(\"missing function: unzLocateFile\");\n abort(-1);\n}\n\nfunction _unzOpen() {\n err(\"missing function: unzOpen\");\n abort(-1);\n}\n\nfunction _unzOpen2() {\n err(\"missing function: unzOpen2\");\n abort(-1);\n}\n\nfunction _unzOpenCurrentFile() {\n err(\"missing function: unzOpenCurrentFile\");\n abort(-1);\n}\n\nfunction _unzReadCurrentFile() {\n err(\"missing function: unzReadCurrentFile\");\n abort(-1);\n}\n\nfunction _proc_exit(code) {\n EXITSTATUS = code;\n if (!keepRuntimeAlive()) {\n  if (Module[\"onExit\"]) Module[\"onExit\"](code);\n  ABORT = true;\n }\n quit_(code, new ExitStatus(code));\n}\n\nfunction exitJS(status, implicit) {\n EXITSTATUS = status;\n checkUnflushedContent();\n if (keepRuntimeAlive() && !implicit) {\n  var msg = `program exited (with status: ${status}), but keepRuntimeAlive() is set (counter=${runtimeKeepaliveCounter}) due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)`;\n  readyPromiseReject(msg);\n  err(msg);\n }\n _proc_exit(status);\n}\n\nfunction handleException(e) {\n if (e instanceof ExitStatus || e == \"unwind\") {\n  return EXITSTATUS;\n }\n checkStackCookie();\n if (e instanceof WebAssembly.RuntimeError) {\n  if (_emscripten_stack_get_current() <= 0) {\n   err(\"Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to 65536)\");\n  }\n }\n quit_(1, e);\n}\n\nfunction getCFunc(ident) {\n var func = Module[\"_\" + ident];\n assert(func, \"Cannot call unknown function \" + ident + \", make sure it is exported\");\n return func;\n}\n\nfunction stringToUTF8OnStack(str) {\n var size = lengthBytesUTF8(str) + 1;\n var ret = stackAlloc(size);\n stringToUTF8(str, ret, size);\n return ret;\n}\n\nfunction ccall(ident, returnType, argTypes, args, opts) {\n var toC = {\n  \"string\": str => {\n   var ret = 0;\n   if (str !== null && str !== undefined && str !== 0) {\n    ret = stringToUTF8OnStack(str);\n   }\n   return ret;\n  },\n  \"array\": arr => {\n   var ret = stackAlloc(arr.length);\n   writeArrayToMemory(arr, ret);\n   return ret;\n  }\n };\n function convertReturnValue(ret) {\n  if (returnType === \"string\") {\n   return UTF8ToString(ret);\n  }\n  if (returnType === \"boolean\") return Boolean(ret);\n  return ret;\n }\n var func = getCFunc(ident);\n var cArgs = [];\n var stack = 0;\n assert(returnType !== \"array\", 'Return type should not be \"array\".');\n if (args) {\n  for (var i = 0; i < args.length; i++) {\n   var converter = toC[argTypes[i]];\n   if (converter) {\n    if (stack === 0) stack = stackSave();\n    cArgs[i] = converter(args[i]);\n   } else {\n    cArgs[i] = args[i];\n   }\n  }\n }\n var ret = func.apply(null, cArgs);\n function onDone(ret) {\n  if (stack !== 0) stackRestore(stack);\n  return convertReturnValue(ret);\n }\n ret = onDone(ret);\n return ret;\n}\n\nfunction checkIncomingModuleAPI() {\n ignoredModuleProp(\"fetchSettings\");\n}\n\nvar wasmImports = {\n \"XML_GetBuffer\": _XML_GetBuffer,\n \"XML_GetErrorCode\": _XML_GetErrorCode,\n \"XML_Parse\": _XML_Parse,\n \"XML_ParseBuffer\": _XML_ParseBuffer,\n \"XML_ParserCreate\": _XML_ParserCreate,\n \"XML_ParserFree\": _XML_ParserFree,\n \"XML_ResumeParser\": _XML_ResumeParser,\n \"XML_SetCharacterDataHandler\": _XML_SetCharacterDataHandler,\n \"XML_SetElementHandler\": _XML_SetElementHandler,\n \"XML_SetUserData\": _XML_SetUserData,\n \"XML_StopParser\": _XML_StopParser,\n \"__assert_fail\": ___assert_fail,\n \"__dlsym\": ___dlsym,\n \"__syscall__newselect\": ___syscall__newselect,\n \"__syscall_bind\": ___syscall_bind,\n \"__syscall_connect\": ___syscall_connect,\n \"__syscall_faccessat\": ___syscall_faccessat,\n \"__syscall_fcntl64\": ___syscall_fcntl64,\n \"__syscall_fstat64\": ___syscall_fstat64,\n \"__syscall_ftruncate64\": ___syscall_ftruncate64,\n \"__syscall_getdents64\": ___syscall_getdents64,\n \"__syscall_getpeername\": ___syscall_getpeername,\n \"__syscall_getsockopt\": ___syscall_getsockopt,\n \"__syscall_ioctl\": ___syscall_ioctl,\n \"__syscall_lstat64\": ___syscall_lstat64,\n \"__syscall_mkdirat\": ___syscall_mkdirat,\n \"__syscall_newfstatat\": ___syscall_newfstatat,\n \"__syscall_openat\": ___syscall_openat,\n \"__syscall_recvfrom\": ___syscall_recvfrom,\n \"__syscall_renameat\": ___syscall_renameat,\n \"__syscall_rmdir\": ___syscall_rmdir,\n \"__syscall_sendto\": ___syscall_sendto,\n \"__syscall_socket\": ___syscall_socket,\n \"__syscall_stat64\": ___syscall_stat64,\n \"__syscall_unlinkat\": ___syscall_unlinkat,\n \"__throw_exception_with_stack_trace\": ___throw_exception_with_stack_trace,\n \"_emscripten_get_now_is_monotonic\": __emscripten_get_now_is_monotonic,\n \"_localtime_js\": __localtime_js,\n \"_tzset_js\": __tzset_js,\n \"abort\": _abort,\n \"dlopen\": _dlopen,\n \"duckdb_web_fs_directory_create\": _duckdb_web_fs_directory_create,\n \"duckdb_web_fs_directory_exists\": _duckdb_web_fs_directory_exists,\n \"duckdb_web_fs_directory_list_files\": _duckdb_web_fs_directory_list_files,\n \"duckdb_web_fs_directory_remove\": _duckdb_web_fs_directory_remove,\n \"duckdb_web_fs_file_close\": _duckdb_web_fs_file_close,\n \"duckdb_web_fs_file_exists\": _duckdb_web_fs_file_exists,\n \"duckdb_web_fs_file_get_last_modified_time\": _duckdb_web_fs_file_get_last_modified_time,\n \"duckdb_web_fs_file_move\": _duckdb_web_fs_file_move,\n \"duckdb_web_fs_file_open\": _duckdb_web_fs_file_open,\n \"duckdb_web_fs_file_read\": _duckdb_web_fs_file_read,\n \"duckdb_web_fs_file_truncate\": _duckdb_web_fs_file_truncate,\n \"duckdb_web_fs_file_write\": _duckdb_web_fs_file_write,\n \"duckdb_web_fs_get_default_data_protocol\": _duckdb_web_fs_get_default_data_protocol,\n \"duckdb_web_fs_glob\": _duckdb_web_fs_glob,\n \"duckdb_web_test_platform_feature\": _duckdb_web_test_platform_feature,\n \"duckdb_web_udf_scalar_call\": _duckdb_web_udf_scalar_call,\n \"emscripten_console_error\": _emscripten_console_error,\n \"emscripten_date_now\": _emscripten_date_now,\n \"emscripten_get_heap_max\": _emscripten_get_heap_max,\n \"emscripten_get_now\": _emscripten_get_now,\n \"emscripten_memcpy_big\": _emscripten_memcpy_big,\n \"emscripten_resize_heap\": _emscripten_resize_heap,\n \"environ_get\": _environ_get,\n \"environ_sizes_get\": _environ_sizes_get,\n \"fd_close\": _fd_close,\n \"fd_fdstat_get\": _fd_fdstat_get,\n \"fd_pread\": _fd_pread,\n \"fd_pwrite\": _fd_pwrite,\n \"fd_read\": _fd_read,\n \"fd_seek\": _fd_seek,\n \"fd_sync\": _fd_sync,\n \"fd_write\": _fd_write,\n \"getaddrinfo\": _getaddrinfo,\n \"getentropy\": _getentropy,\n \"getnameinfo\": _getnameinfo,\n \"strftime_l\": _strftime_l,\n \"ucnv_close_64\": _ucnv_close_64,\n \"ucnv_convertEx_64\": _ucnv_convertEx_64,\n \"ucnv_open_64\": _ucnv_open_64,\n \"ucnv_toAlgorithmic_64\": _ucnv_toAlgorithmic_64,\n \"ucsdet_close_64\": _ucsdet_close_64,\n \"ucsdet_detect_64\": _ucsdet_detect_64,\n \"ucsdet_getConfidence_64\": _ucsdet_getConfidence_64,\n \"ucsdet_getName_64\": _ucsdet_getName_64,\n \"ucsdet_open_64\": _ucsdet_open_64,\n \"ucsdet_setText_64\": _ucsdet_setText_64,\n \"unzClose\": _unzClose,\n \"unzCloseCurrentFile\": _unzCloseCurrentFile,\n \"unzGetCurrentFileInfo\": _unzGetCurrentFileInfo,\n \"unzGetCurrentFileInfo64\": _unzGetCurrentFileInfo64,\n \"unzGetGlobalInfo\": _unzGetGlobalInfo,\n \"unzGoToFirstFile\": _unzGoToFirstFile,\n \"unzGoToNextFile\": _unzGoToNextFile,\n \"unzLocateFile\": _unzLocateFile,\n \"unzOpen\": _unzOpen,\n \"unzOpen2\": _unzOpen2,\n \"unzOpenCurrentFile\": _unzOpenCurrentFile,\n \"unzReadCurrentFile\": _unzReadCurrentFile\n};\n\nvar asm = createWasm();\n\nvar ___wasm_call_ctors = createExportWrapper(\"__wasm_call_ctors\");\n\nvar _main = Module[\"_main\"] = createExportWrapper(\"main\");\n\nvar _duckdb_web_fs_glob_add_path = Module[\"_duckdb_web_fs_glob_add_path\"] = createExportWrapper(\"duckdb_web_fs_glob_add_path\");\n\nvar _duckdb_web_clear_response = Module[\"_duckdb_web_clear_response\"] = createExportWrapper(\"duckdb_web_clear_response\");\n\nvar _duckdb_web_fail_with = Module[\"_duckdb_web_fail_with\"] = createExportWrapper(\"duckdb_web_fail_with\");\n\nvar _duckdb_web_reset = Module[\"_duckdb_web_reset\"] = createExportWrapper(\"duckdb_web_reset\");\n\nvar _duckdb_web_connect = Module[\"_duckdb_web_connect\"] = createExportWrapper(\"duckdb_web_connect\");\n\nvar _duckdb_web_disconnect = Module[\"_duckdb_web_disconnect\"] = createExportWrapper(\"duckdb_web_disconnect\");\n\nvar _duckdb_web_flush_files = Module[\"_duckdb_web_flush_files\"] = createExportWrapper(\"duckdb_web_flush_files\");\n\nvar _duckdb_web_flush_file = Module[\"_duckdb_web_flush_file\"] = createExportWrapper(\"duckdb_web_flush_file\");\n\nvar _duckdb_web_open = Module[\"_duckdb_web_open\"] = createExportWrapper(\"duckdb_web_open\");\n\nvar _duckdb_web_get_global_file_info = Module[\"_duckdb_web_get_global_file_info\"] = createExportWrapper(\"duckdb_web_get_global_file_info\");\n\nvar _duckdb_web_collect_file_stats = Module[\"_duckdb_web_collect_file_stats\"] = createExportWrapper(\"duckdb_web_collect_file_stats\");\n\nvar _duckdb_web_export_file_stats = Module[\"_duckdb_web_export_file_stats\"] = createExportWrapper(\"duckdb_web_export_file_stats\");\n\nvar _duckdb_web_fs_drop_file = Module[\"_duckdb_web_fs_drop_file\"] = createExportWrapper(\"duckdb_web_fs_drop_file\");\n\nvar _duckdb_web_fs_drop_files = Module[\"_duckdb_web_fs_drop_files\"] = createExportWrapper(\"duckdb_web_fs_drop_files\");\n\nvar _duckdb_web_fs_glob_file_infos = Module[\"_duckdb_web_fs_glob_file_infos\"] = createExportWrapper(\"duckdb_web_fs_glob_file_infos\");\n\nvar _duckdb_web_fs_get_file_info_by_id = Module[\"_duckdb_web_fs_get_file_info_by_id\"] = createExportWrapper(\"duckdb_web_fs_get_file_info_by_id\");\n\nvar _duckdb_web_fs_get_file_info_by_name = Module[\"_duckdb_web_fs_get_file_info_by_name\"] = createExportWrapper(\"duckdb_web_fs_get_file_info_by_name\");\n\nvar _duckdb_web_fs_register_file_url = Module[\"_duckdb_web_fs_register_file_url\"] = createExportWrapper(\"duckdb_web_fs_register_file_url\");\n\nvar _duckdb_web_fs_register_file_buffer = Module[\"_duckdb_web_fs_register_file_buffer\"] = createExportWrapper(\"duckdb_web_fs_register_file_buffer\");\n\nvar _duckdb_web_copy_file_to_buffer = Module[\"_duckdb_web_copy_file_to_buffer\"] = createExportWrapper(\"duckdb_web_copy_file_to_buffer\");\n\nvar _duckdb_web_copy_file_to_path = Module[\"_duckdb_web_copy_file_to_path\"] = createExportWrapper(\"duckdb_web_copy_file_to_path\");\n\nvar _duckdb_web_get_version = Module[\"_duckdb_web_get_version\"] = createExportWrapper(\"duckdb_web_get_version\");\n\nvar _duckdb_web_get_feature_flags = Module[\"_duckdb_web_get_feature_flags\"] = createExportWrapper(\"duckdb_web_get_feature_flags\");\n\nvar _duckdb_web_tokenize = Module[\"_duckdb_web_tokenize\"] = createExportWrapper(\"duckdb_web_tokenize\");\n\nvar _duckdb_web_udf_scalar_create = Module[\"_duckdb_web_udf_scalar_create\"] = createExportWrapper(\"duckdb_web_udf_scalar_create\");\n\nvar _duckdb_web_prepared_create = Module[\"_duckdb_web_prepared_create\"] = createExportWrapper(\"duckdb_web_prepared_create\");\n\nvar _duckdb_web_prepared_close = Module[\"_duckdb_web_prepared_close\"] = createExportWrapper(\"duckdb_web_prepared_close\");\n\nvar _duckdb_web_prepared_run = Module[\"_duckdb_web_prepared_run\"] = createExportWrapper(\"duckdb_web_prepared_run\");\n\nvar _duckdb_web_prepared_send = Module[\"_duckdb_web_prepared_send\"] = createExportWrapper(\"duckdb_web_prepared_send\");\n\nvar _duckdb_web_query_run = Module[\"_duckdb_web_query_run\"] = createExportWrapper(\"duckdb_web_query_run\");\n\nvar _duckdb_web_pending_query_start = Module[\"_duckdb_web_pending_query_start\"] = createExportWrapper(\"duckdb_web_pending_query_start\");\n\nvar _duckdb_web_pending_query_poll = Module[\"_duckdb_web_pending_query_poll\"] = createExportWrapper(\"duckdb_web_pending_query_poll\");\n\nvar _duckdb_web_pending_query_cancel = Module[\"_duckdb_web_pending_query_cancel\"] = createExportWrapper(\"duckdb_web_pending_query_cancel\");\n\nvar _duckdb_web_query_fetch_results = Module[\"_duckdb_web_query_fetch_results\"] = createExportWrapper(\"duckdb_web_query_fetch_results\");\n\nvar _duckdb_web_get_tablenames = Module[\"_duckdb_web_get_tablenames\"] = createExportWrapper(\"duckdb_web_get_tablenames\");\n\nvar _duckdb_web_insert_arrow_from_ipc_stream = Module[\"_duckdb_web_insert_arrow_from_ipc_stream\"] = createExportWrapper(\"duckdb_web_insert_arrow_from_ipc_stream\");\n\nvar _duckdb_web_insert_csv_from_path = Module[\"_duckdb_web_insert_csv_from_path\"] = createExportWrapper(\"duckdb_web_insert_csv_from_path\");\n\nvar _duckdb_web_insert_json_from_path = Module[\"_duckdb_web_insert_json_from_path\"] = createExportWrapper(\"duckdb_web_insert_json_from_path\");\n\nvar ___errno_location = createExportWrapper(\"__errno_location\");\n\nvar _fflush = Module[\"_fflush\"] = createExportWrapper(\"fflush\");\n\nvar _htonl = createExportWrapper(\"htonl\");\n\nvar _htons = createExportWrapper(\"htons\");\n\nvar _ntohs = createExportWrapper(\"ntohs\");\n\nvar _malloc = Module[\"_malloc\"] = createExportWrapper(\"malloc\");\n\nvar _free = Module[\"_free\"] = createExportWrapper(\"free\");\n\nvar ___trap = function() {\n return (___trap = Module[\"asm\"][\"__trap\"]).apply(null, arguments);\n};\n\nvar _emscripten_stack_init = function() {\n return (_emscripten_stack_init = Module[\"asm\"][\"emscripten_stack_init\"]).apply(null, arguments);\n};\n\nvar _emscripten_stack_get_free = function() {\n return (_emscripten_stack_get_free = Module[\"asm\"][\"emscripten_stack_get_free\"]).apply(null, arguments);\n};\n\nvar _emscripten_stack_get_base = function() {\n return (_emscripten_stack_get_base = Module[\"asm\"][\"emscripten_stack_get_base\"]).apply(null, arguments);\n};\n\nvar _emscripten_stack_get_end = function() {\n return (_emscripten_stack_get_end = Module[\"asm\"][\"emscripten_stack_get_end\"]).apply(null, arguments);\n};\n\nvar stackSave = createExportWrapper(\"stackSave\");\n\nvar stackRestore = createExportWrapper(\"stackRestore\");\n\nvar stackAlloc = createExportWrapper(\"stackAlloc\");\n\nvar _emscripten_stack_get_current = function() {\n return (_emscripten_stack_get_current = Module[\"asm\"][\"emscripten_stack_get_current\"]).apply(null, arguments);\n};\n\nvar ___cxa_decrement_exception_refcount = Module[\"___cxa_decrement_exception_refcount\"] = createExportWrapper(\"__cxa_decrement_exception_refcount\");\n\nvar ___cxa_increment_exception_refcount = Module[\"___cxa_increment_exception_refcount\"] = createExportWrapper(\"__cxa_increment_exception_refcount\");\n\nvar ___thrown_object_from_unwind_exception = Module[\"___thrown_object_from_unwind_exception\"] = createExportWrapper(\"__thrown_object_from_unwind_exception\");\n\nvar ___get_exception_message = Module[\"___get_exception_message\"] = createExportWrapper(\"__get_exception_message\");\n\nvar dynCall_jiji = Module[\"dynCall_jiji\"] = createExportWrapper(\"dynCall_jiji\");\n\nvar dynCall_iiiiij = Module[\"dynCall_iiiiij\"] = createExportWrapper(\"dynCall_iiiiij\");\n\nvar dynCall_iiiiijj = Module[\"dynCall_iiiiijj\"] = createExportWrapper(\"dynCall_iiiiijj\");\n\nvar dynCall_iiiiiijj = Module[\"dynCall_iiiiiijj\"] = createExportWrapper(\"dynCall_iiiiiijj\");\n\nvar dynCall_viijii = Module[\"dynCall_viijii\"] = createExportWrapper(\"dynCall_viijii\");\n\nvar dynCall_viijji = Module[\"dynCall_viijji\"] = createExportWrapper(\"dynCall_viijji\");\n\nvar dynCall_iiiji = Module[\"dynCall_iiiji\"] = createExportWrapper(\"dynCall_iiiji\");\n\nvar dynCall_ji = Module[\"dynCall_ji\"] = createExportWrapper(\"dynCall_ji\");\n\nvar dynCall_viij = Module[\"dynCall_viij\"] = createExportWrapper(\"dynCall_viij\");\n\nvar dynCall_vij = Module[\"dynCall_vij\"] = createExportWrapper(\"dynCall_vij\");\n\nvar dynCall_vjjijij = Module[\"dynCall_vjjijij\"] = createExportWrapper(\"dynCall_vjjijij\");\n\nvar dynCall_vijjji = Module[\"dynCall_vijjji\"] = createExportWrapper(\"dynCall_vijjji\");\n\nvar dynCall_vjjii = Module[\"dynCall_vjjii\"] = createExportWrapper(\"dynCall_vjjii\");\n\nvar dynCall_viiiiiji = Module[\"dynCall_viiiiiji\"] = createExportWrapper(\"dynCall_viiiiiji\");\n\nvar dynCall_jiiiji = Module[\"dynCall_jiiiji\"] = createExportWrapper(\"dynCall_jiiiji\");\n\nvar dynCall_jiiij = Module[\"dynCall_jiiij\"] = createExportWrapper(\"dynCall_jiiij\");\n\nvar dynCall_jijjij = Module[\"dynCall_jijjij\"] = createExportWrapper(\"dynCall_jijjij\");\n\nvar dynCall_iiij = Module[\"dynCall_iiij\"] = createExportWrapper(\"dynCall_iiij\");\n\nvar dynCall_vijjj = Module[\"dynCall_vijjj\"] = createExportWrapper(\"dynCall_vijjj\");\n\nvar dynCall_vijj = Module[\"dynCall_vijj\"] = createExportWrapper(\"dynCall_vijj\");\n\nvar dynCall_viijj = Module[\"dynCall_viijj\"] = createExportWrapper(\"dynCall_viijj\");\n\nvar dynCall_jiijii = Module[\"dynCall_jiijii\"] = createExportWrapper(\"dynCall_jiijii\");\n\nvar dynCall_jijiii = Module[\"dynCall_jijiii\"] = createExportWrapper(\"dynCall_jijiii\");\n\nvar dynCall_viijiiiii = Module[\"dynCall_viijiiiii\"] = createExportWrapper(\"dynCall_viijiiiii\");\n\nvar dynCall_viijiiij = Module[\"dynCall_viijiiij\"] = createExportWrapper(\"dynCall_viijiiij\");\n\nvar dynCall_vijiiiji = Module[\"dynCall_vijiiiji\"] = createExportWrapper(\"dynCall_vijiiiji\");\n\nvar dynCall_viiiij = Module[\"dynCall_viiiij\"] = createExportWrapper(\"dynCall_viiiij\");\n\nvar dynCall_jiiji = Module[\"dynCall_jiiji\"] = createExportWrapper(\"dynCall_jiiji\");\n\nvar dynCall_viiijij = Module[\"dynCall_viiijij\"] = createExportWrapper(\"dynCall_viiijij\");\n\nvar dynCall_viijiij = Module[\"dynCall_viijiij\"] = createExportWrapper(\"dynCall_viijiij\");\n\nvar dynCall_viiiiijj = Module[\"dynCall_viiiiijj\"] = createExportWrapper(\"dynCall_viiiiijj\");\n\nvar dynCall_viiijji = Module[\"dynCall_viiijji\"] = createExportWrapper(\"dynCall_viiijji\");\n\nvar dynCall_vijii = Module[\"dynCall_vijii\"] = createExportWrapper(\"dynCall_vijii\");\n\nvar dynCall_iiiiiji = Module[\"dynCall_iiiiiji\"] = createExportWrapper(\"dynCall_iiiiiji\");\n\nvar dynCall_iij = Module[\"dynCall_iij\"] = createExportWrapper(\"dynCall_iij\");\n\nvar dynCall_iiijj = Module[\"dynCall_iiijj\"] = createExportWrapper(\"dynCall_iiijj\");\n\nvar dynCall_iijii = Module[\"dynCall_iijii\"] = createExportWrapper(\"dynCall_iijii\");\n\nvar dynCall_viji = Module[\"dynCall_viji\"] = createExportWrapper(\"dynCall_viji\");\n\nvar dynCall_iiji = Module[\"dynCall_iiji\"] = createExportWrapper(\"dynCall_iiji\");\n\nvar dynCall_viijjj = Module[\"dynCall_viijjj\"] = createExportWrapper(\"dynCall_viijjj\");\n\nvar dynCall_viiijj = Module[\"dynCall_viiijj\"] = createExportWrapper(\"dynCall_viiijj\");\n\nvar dynCall_jijj = Module[\"dynCall_jijj\"] = createExportWrapper(\"dynCall_jijj\");\n\nvar dynCall_jiiiii = Module[\"dynCall_jiiiii\"] = createExportWrapper(\"dynCall_jiiiii\");\n\nvar dynCall_jiiii = Module[\"dynCall_jiiii\"] = createExportWrapper(\"dynCall_jiiii\");\n\nvar dynCall_jii = Module[\"dynCall_jii\"] = createExportWrapper(\"dynCall_jii\");\n\nvar dynCall_viijij = Module[\"dynCall_viijij\"] = createExportWrapper(\"dynCall_viijij\");\n\nvar dynCall_viiij = Module[\"dynCall_viiij\"] = createExportWrapper(\"dynCall_viiij\");\n\nvar dynCall_j = Module[\"dynCall_j\"] = createExportWrapper(\"dynCall_j\");\n\nvar dynCall_viiijiiiijj = Module[\"dynCall_viiijiiiijj\"] = createExportWrapper(\"dynCall_viiijiiiijj\");\n\nvar dynCall_jiiiij = Module[\"dynCall_jiiiij\"] = createExportWrapper(\"dynCall_jiiiij\");\n\nvar dynCall_jj = Module[\"dynCall_jj\"] = createExportWrapper(\"dynCall_jj\");\n\nvar dynCall_ij = Module[\"dynCall_ij\"] = createExportWrapper(\"dynCall_ij\");\n\nvar dynCall_ijjj = Module[\"dynCall_ijjj\"] = createExportWrapper(\"dynCall_ijjj\");\n\nvar dynCall_jjjd = Module[\"dynCall_jjjd\"] = createExportWrapper(\"dynCall_jjjd\");\n\nvar dynCall_jjjjjjd = Module[\"dynCall_jjjjjjd\"] = createExportWrapper(\"dynCall_jjjjjjd\");\n\nvar dynCall_jij = Module[\"dynCall_jij\"] = createExportWrapper(\"dynCall_jij\");\n\nvar dynCall_viiijiiijii = Module[\"dynCall_viiijiiijii\"] = createExportWrapper(\"dynCall_viiijiiijii\");\n\nvar dynCall_viijijiiii = Module[\"dynCall_viijijiiii\"] = createExportWrapper(\"dynCall_viijijiiii\");\n\nvar dynCall_viiji = Module[\"dynCall_viiji\"] = createExportWrapper(\"dynCall_viiji\");\n\nvar dynCall_jiiiijj = Module[\"dynCall_jiiiijj\"] = createExportWrapper(\"dynCall_jiiiijj\");\n\nvar dynCall_viiiji = Module[\"dynCall_viiiji\"] = createExportWrapper(\"dynCall_viiiji\");\n\nvar dynCall_viiiiji = Module[\"dynCall_viiiiji\"] = createExportWrapper(\"dynCall_viiiiji\");\n\nvar dynCall_jijiiii = Module[\"dynCall_jijiiii\"] = createExportWrapper(\"dynCall_jijiiii\");\n\nvar dynCall_viiijiji = Module[\"dynCall_viiijiji\"] = createExportWrapper(\"dynCall_viiijiji\");\n\nvar dynCall_viijiji = Module[\"dynCall_viijiji\"] = createExportWrapper(\"dynCall_viijiji\");\n\nvar dynCall_jiii = Module[\"dynCall_jiii\"] = createExportWrapper(\"dynCall_jiii\");\n\nModule[\"stackAlloc\"] = stackAlloc;\n\nModule[\"stackSave\"] = stackSave;\n\nModule[\"stackRestore\"] = stackRestore;\n\nModule[\"ccall\"] = ccall;\n\nvar missingLibrarySymbols = [ \"getHostByName\", \"traverseStack\", \"getCallstack\", \"emscriptenLog\", \"convertPCtoSourceLocation\", \"readEmAsmArgs\", \"jstoi_s\", \"listenOnce\", \"autoResumeAudioContext\", \"dynCallLegacy\", \"getDynCaller\", \"dynCall\", \"runtimeKeepalivePush\", \"runtimeKeepalivePop\", \"callUserCallback\", \"maybeExit\", \"safeSetTimeout\", \"asmjsMangle\", \"asyncLoad\", \"alignMemory\", \"mmapAlloc\", \"HandleAllocator\", \"getNativeTypeSize\", \"STACK_SIZE\", \"STACK_ALIGN\", \"POINTER_SIZE\", \"ASSERTIONS\", \"writeI53ToI64\", \"writeI53ToI64Clamped\", \"writeI53ToI64Signaling\", \"writeI53ToU64Clamped\", \"writeI53ToU64Signaling\", \"readI53FromU64\", \"convertI32PairToI53\", \"convertU32PairToI53\", \"cwrap\", \"uleb128Encode\", \"sigToWasmTypes\", \"generateFuncType\", \"convertJsFunctionToWasm\", \"getEmptyTableSlot\", \"updateTableMap\", \"getFunctionAddress\", \"addFunction\", \"removeFunction\", \"reallyNegative\", \"unSign\", \"strLen\", \"reSign\", \"formatString\", \"intArrayToString\", \"AsciiToString\", \"UTF16ToString\", \"stringToUTF16\", \"lengthBytesUTF16\", \"UTF32ToString\", \"stringToUTF32\", \"lengthBytesUTF32\", \"registerKeyEventCallback\", \"maybeCStringToJsString\", \"findEventTarget\", \"findCanvasEventTarget\", \"getBoundingClientRect\", \"fillMouseEventData\", \"registerMouseEventCallback\", \"registerWheelEventCallback\", \"registerUiEventCallback\", \"registerFocusEventCallback\", \"fillDeviceOrientationEventData\", \"registerDeviceOrientationEventCallback\", \"fillDeviceMotionEventData\", \"registerDeviceMotionEventCallback\", \"screenOrientation\", \"fillOrientationChangeEventData\", \"registerOrientationChangeEventCallback\", \"fillFullscreenChangeEventData\", \"registerFullscreenChangeEventCallback\", \"JSEvents_requestFullscreen\", \"JSEvents_resizeCanvasForFullscreen\", \"registerRestoreOldStyle\", \"hideEverythingExceptGivenElement\", \"restoreHiddenElements\", \"setLetterbox\", \"softFullscreenResizeWebGLRenderTarget\", \"doRequestFullscreen\", \"fillPointerlockChangeEventData\", \"registerPointerlockChangeEventCallback\", \"registerPointerlockErrorEventCallback\", \"requestPointerLock\", \"fillVisibilityChangeEventData\", \"registerVisibilityChangeEventCallback\", \"registerTouchEventCallback\", \"fillGamepadEventData\", \"registerGamepadEventCallback\", \"registerBeforeUnloadEventCallback\", \"fillBatteryEventData\", \"battery\", \"registerBatteryEventCallback\", \"setCanvasElementSize\", \"getCanvasElementSize\", \"demangle\", \"demangleAll\", \"jsStackTrace\", \"stackTrace\", \"checkWasiClock\", \"wasiRightsToMuslOFlags\", \"wasiOFlagsToMuslOFlags\", \"createDyncallWrapper\", \"setImmediateWrapped\", \"clearImmediateWrapped\", \"polyfillSetImmediate\", \"getPromise\", \"makePromise\", \"idsToPromises\", \"makePromiseCallback\", \"setMainLoop\", \"heapObjectForWebGLType\", \"heapAccessShiftForWebGLHeap\", \"webgl_enable_ANGLE_instanced_arrays\", \"webgl_enable_OES_vertex_array_object\", \"webgl_enable_WEBGL_draw_buffers\", \"webgl_enable_WEBGL_multi_draw\", \"emscriptenWebGLGet\", \"computeUnpackAlignedImageSize\", \"colorChannelsInGlTextureFormat\", \"emscriptenWebGLGetTexPixelData\", \"__glGenObject\", \"emscriptenWebGLGetUniform\", \"webglGetUniformLocation\", \"webglPrepareUniformLocationsBeforeFirstUse\", \"webglGetLeftBracePos\", \"emscriptenWebGLGetVertexAttrib\", \"__glGetActiveAttribOrUniform\", \"writeGLArray\", \"registerWebGlEventCallback\", \"runAndAbortIfError\", \"SDL_unicode\", \"SDL_ttfContext\", \"SDL_audio\", \"GLFW_Window\", \"ALLOC_NORMAL\", \"ALLOC_STACK\", \"allocate\", \"writeStringToMemory\", \"writeAsciiToMemory\" ];\n\nmissingLibrarySymbols.forEach(missingLibrarySymbol);\n\nvar unexportedSymbols = [ \"run\", \"addOnPreRun\", \"addOnInit\", \"addOnPreMain\", \"addOnExit\", \"addOnPostRun\", \"addRunDependency\", \"removeRunDependency\", \"FS_createFolder\", \"FS_createPath\", \"FS_createDataFile\", \"FS_createLazyFile\", \"FS_createLink\", \"FS_createDevice\", \"FS_unlink\", \"out\", \"err\", \"callMain\", \"abort\", \"keepRuntimeAlive\", \"wasmMemory\", \"getTempRet0\", \"setTempRet0\", \"writeStackCookie\", \"checkStackCookie\", \"ptrToString\", \"zeroMemory\", \"exitJS\", \"getHeapMax\", \"emscripten_realloc_buffer\", \"ENV\", \"MONTH_DAYS_REGULAR\", \"MONTH_DAYS_LEAP\", \"MONTH_DAYS_REGULAR_CUMULATIVE\", \"MONTH_DAYS_LEAP_CUMULATIVE\", \"isLeapYear\", \"ydayFromDate\", \"arraySum\", \"addDays\", \"ERRNO_CODES\", \"ERRNO_MESSAGES\", \"setErrNo\", \"inetPton4\", \"inetNtop4\", \"inetPton6\", \"inetNtop6\", \"readSockaddr\", \"writeSockaddr\", \"DNS\", \"Protocols\", \"Sockets\", \"initRandomFill\", \"randomFill\", \"timers\", \"warnOnce\", \"UNWIND_CACHE\", \"readEmAsmArgsArray\", \"jstoi_q\", \"getExecutableName\", \"handleException\", \"readI53FromI64\", \"convertI32PairToI53Checked\", \"getCFunc\", \"freeTableIndexes\", \"functionsInTableMap\", \"setValue\", \"getValue\", \"PATH\", \"PATH_FS\", \"UTF8Decoder\", \"UTF8ArrayToString\", \"UTF8ToString\", \"stringToUTF8Array\", \"stringToUTF8\", \"lengthBytesUTF8\", \"intArrayFromString\", \"stringToAscii\", \"UTF16Decoder\", \"stringToNewUTF8\", \"stringToUTF8OnStack\", \"writeArrayToMemory\", \"JSEvents\", \"specialHTMLTargets\", \"currentFullscreenStrategy\", \"restoreOldWindowedStyle\", \"ExitStatus\", \"getEnvStrings\", \"flush_NO_FILESYSTEM\", \"dlopenMissingError\", \"promiseMap\", \"getExceptionMessageCommon\", \"getCppExceptionTag\", \"getCppExceptionThrownObjectFromWebAssemblyException\", \"incrementExceptionRefcount\", \"decrementExceptionRefcount\", \"getExceptionMessage\", \"Browser\", \"wget\", \"SYSCALLS\", \"getSocketFromFD\", \"getSocketAddress\", \"tempFixedLengthArray\", \"miniTempWebGLFloatBuffers\", \"miniTempWebGLIntBuffers\", \"GL\", \"emscripten_webgl_power_preferences\", \"AL\", \"GLUT\", \"EGL\", \"GLEW\", \"IDBStore\", \"SDL\", \"SDL_gfx\", \"GLFW\", \"allocateUTF8\", \"allocateUTF8OnStack\", \"SOCKFS\", \"FS\" ];\n\nunexportedSymbols.forEach(unexportedRuntimeSymbol);\n\nvar calledRun;\n\ndependenciesFulfilled = function runCaller() {\n if (!calledRun) run();\n if (!calledRun) dependenciesFulfilled = runCaller;\n};\n\nfunction callMain() {\n assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module[\"onRuntimeInitialized\"])');\n assert(__ATPRERUN__.length == 0, \"cannot call main when preRun functions remain to be called\");\n var entryFunction = _main;\n var argc = 0;\n var argv = 0;\n try {\n  var ret = entryFunction(argc, argv);\n  exitJS(ret, true);\n  return ret;\n } catch (e) {\n  return handleException(e);\n }\n}\n\nfunction stackCheckInit() {\n _emscripten_stack_init();\n writeStackCookie();\n}\n\nfunction run() {\n if (runDependencies > 0) {\n  return;\n }\n stackCheckInit();\n preRun();\n if (runDependencies > 0) {\n  return;\n }\n function doRun() {\n  if (calledRun) return;\n  calledRun = true;\n  Module[\"calledRun\"] = true;\n  if (ABORT) return;\n  initRuntime();\n  preMain();\n  readyPromiseResolve(Module);\n  if (Module[\"onRuntimeInitialized\"]) Module[\"onRuntimeInitialized\"]();\n  if (shouldRunNow) callMain();\n  postRun();\n }\n if (Module[\"setStatus\"]) {\n  Module[\"setStatus\"](\"Running...\");\n  setTimeout(function() {\n   setTimeout(function() {\n    Module[\"setStatus\"](\"\");\n   }, 1);\n   doRun();\n  }, 1);\n } else {\n  doRun();\n }\n checkStackCookie();\n}\n\nfunction checkUnflushedContent() {\n var oldOut = out;\n var oldErr = err;\n var has = false;\n out = err = x => {\n  has = true;\n };\n try {\n  flush_NO_FILESYSTEM();\n } catch (e) {}\n out = oldOut;\n err = oldErr;\n if (has) {\n  warnOnce(\"stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.\");\n  warnOnce(\"(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)\");\n }\n}\n\nif (Module[\"preInit\"]) {\n if (typeof Module[\"preInit\"] == \"function\") Module[\"preInit\"] = [ Module[\"preInit\"] ];\n while (Module[\"preInit\"].length > 0) {\n  Module[\"preInit\"].pop()();\n }\n}\n\nvar shouldRunNow = true;\n\nif (Module[\"noInitialRun\"]) shouldRunNow = false;\n\nrun();\n\n\n  return DuckDB.ready\n}\n\n);\n})();\nexport default DuckDB;", "import DuckDBWasm from './duckdb-eh.js';\r\nimport { DuckDBModule } from './duckdb_module';\r\nimport { DuckDBNodeBindings } from './bindings_node_base.js';\r\nimport { DuckDBRuntime } from './runtime';\r\nimport { Logger } from '../log';\r\n\r\n/** DuckDB bindings for node.js */\r\nexport class DuckDB extends DuckDBNodeBindings {\r\n    /** Constructor */\r\n    public constructor(\r\n        logger: Logger,\r\n        runtime: DuckDBRuntime,\r\n        mainModulePath: string,\r\n        pthreadWorkerPath: string | null = null,\r\n    ) {\r\n        super(logger, runtime, mainModulePath, pthreadWorkerPath);\r\n    }\r\n\r\n    /** Instantiate the bindings */\r\n    protected instantiateImpl(moduleOverrides: Partial<DuckDBModule>): Promise<DuckDBModule> {\r\n        return DuckDBWasm({\r\n            ...moduleOverrides,\r\n            instantiateWasm: this.instantiateWasm.bind(this),\r\n            locateFile: this.locateFile.bind(this),\r\n        });\r\n    }\r\n}\r\n\r\nexport default DuckDB;\r\n", "export * from '../bindings';\r\nexport * from '../log';\r\nexport * from '../platform';\r\nexport * from '../status';\r\nexport * from '../version';\r\nexport { DuckDBDataProtocol } from '../bindings/runtime';\r\nexport { DEFAULT_RUNTIME } from '../bindings/runtime';\r\nexport { NODE_RUNTIME } from '../bindings/runtime_node';\r\n\r\nimport { Logger } from '../log';\r\nimport { DuckDBRuntime } from '../bindings';\r\nimport { DuckDBNodeBindings } from '../bindings/bindings_node_base';\r\nimport { DuckDBBundles, getPlatformFeatures } from '../platform';\r\nimport { DuckDB as DuckDBMVP } from '../bindings/bindings_node_mvp';\r\nimport { DuckDB as DuckDBNext } from '../bindings/bindings_node_eh';\r\n\r\nexport async function createDuckDB(\r\n    bundles: DuckDBBundles,\r\n    logger: Logger,\r\n    runtime: DuckDBRuntime,\r\n): Promise<DuckDBNodeBindings> {\r\n    const platform = await getPlatformFeatures();\r\n    if (platform.wasmExceptions) {\r\n        if (bundles.eh) {\r\n            return new DuckDBNext(logger, runtime, bundles.eh!.mainModule);\r\n        }\r\n    }\r\n    return new DuckDBMVP(logger, runtime, bundles.mvp.mainModule);\r\n}\r\n", "import * as arrow from 'apache-arrow';\r\nimport { AsyncDuckDB } from './async_bindings';\r\nimport { LogLevel, LogTopic, LogOrigin, LogEvent } from '../log';\r\nimport { ArrowInsertOptions, CSVInsertOptions, JSONInsertOptions } from '../bindings/insert_options';\r\n\r\n/** A thin helper to memoize the connection id */\r\nexport class AsyncDuckDBConnection {\r\n    /** The async duckdb */\r\n    protected readonly _bindings: AsyncDuckDB;\r\n    /** The conn handle */\r\n    protected readonly _conn: number;\r\n\r\n    constructor(bindings: AsyncDuckDB, conn: number) {\r\n        this._bindings = bindings;\r\n        this._conn = conn;\r\n    }\r\n\r\n    /** Access the database bindings */\r\n    public get bindings(): AsyncDuckDB {\r\n        return this._bindings;\r\n    }\r\n\r\n    /** Disconnect from the database */\r\n    public async close(): Promise<void> {\r\n        return this._bindings.disconnect(this._conn);\r\n    }\r\n\r\n    /** Brave souls may use this function to consume the underlying connection id */\r\n    public useUnsafe<R>(callback: (bindings: AsyncDuckDB, conn: number) => R) {\r\n        return callback(this._bindings, this._conn);\r\n    }\r\n\r\n    /** Run a query */\r\n    public async query<T extends { [key: string]: arrow.DataType } = any>(text: string): Promise<arrow.Table<T>> {\r\n        this._bindings.logger.log({\r\n            timestamp: new Date(),\r\n            level: LogLevel.INFO,\r\n            origin: LogOrigin.ASYNC_DUCKDB,\r\n            topic: LogTopic.QUERY,\r\n            event: LogEvent.RUN,\r\n            value: text,\r\n        });\r\n        const buffer = await this._bindings.runQuery(this._conn, text);\r\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\r\n        console.assert(reader.isSync(), \"Reader is not sync\");\r\n        console.assert(reader.isFile(), \"Reader is not file\");\r\n        return new arrow.Table(reader as arrow.RecordBatchFileReader);\r\n    }\r\n\r\n    /** Send a query */\r\n    public async send<T extends { [key: string]: arrow.DataType } = any>(\r\n        text: string,\r\n    ): Promise<arrow.AsyncRecordBatchStreamReader<T>> {\r\n        this._bindings.logger.log({\r\n            timestamp: new Date(),\r\n            level: LogLevel.INFO,\r\n            origin: LogOrigin.ASYNC_DUCKDB,\r\n            topic: LogTopic.QUERY,\r\n            event: LogEvent.RUN,\r\n            value: text,\r\n        });\r\n        let header = await this._bindings.startPendingQuery(this._conn, text);\r\n        while (header == null) {\r\n            header = await this._bindings.pollPendingQuery(this._conn);\r\n        }\r\n        const iter = new AsyncResultStreamIterator(this._bindings, this._conn, header);\r\n        const reader = await arrow.RecordBatchReader.from<T>(iter);\r\n        console.assert(reader.isAsync());\r\n        console.assert(reader.isStream());\r\n        return reader as unknown as arrow.AsyncRecordBatchStreamReader<T>; // XXX\r\n    }\r\n\r\n    /** Cancel a query that was sent earlier */\r\n    public async cancelSent(): Promise<boolean> {\r\n        return await this._bindings.cancelPendingQuery(this._conn);\r\n    }\r\n\r\n    /** Get table names */\r\n    public async getTableNames(query: string): Promise<string[]> {\r\n        return await this._bindings.getTableNames(this._conn, query);\r\n    }\r\n\r\n    /** Create a prepared statement */\r\n    public async prepare<T extends { [key: string]: arrow.DataType } = any>(\r\n        text: string,\r\n    ): Promise<AsyncPreparedStatement> {\r\n        const stmt = await this._bindings.createPrepared(this._conn, text);\r\n        return new AsyncPreparedStatement<T>(this._bindings, this._conn, stmt);\r\n    }\r\n\r\n    /** Insert an arrow table */\r\n    public async insertArrowTable(table: arrow.Table, options: ArrowInsertOptions): Promise<void> {\r\n        const buffer = arrow.tableToIPC(table, 'stream');\r\n        await this.insertArrowFromIPCStream(buffer, options);\r\n    }\r\n    /** Insert an arrow table from an ipc stream */\r\n    public async insertArrowFromIPCStream(buffer: Uint8Array, options: ArrowInsertOptions): Promise<void> {\r\n        await this._bindings.insertArrowFromIPCStream(this._conn, buffer, options);\r\n    }\r\n    /** Insert csv file from path */\r\n    public async insertCSVFromPath(text: string, options: CSVInsertOptions): Promise<void> {\r\n        await this._bindings.insertCSVFromPath(this._conn, text, options);\r\n    }\r\n    /** Insert json file from path */\r\n    public async insertJSONFromPath(text: string, options: JSONInsertOptions): Promise<void> {\r\n        await this._bindings.insertJSONFromPath(this._conn, text, options);\r\n    }\r\n}\r\n\r\n/** An async result stream iterator */\r\nexport class AsyncResultStreamIterator implements AsyncIterable<Uint8Array> {\r\n    /** First chunk? */\r\n    protected _first: boolean;\r\n    /** Reached end of stream? */\r\n    protected _depleted: boolean;\r\n    /** In-flight */\r\n    protected _inFlight: Promise<Uint8Array> | null;\r\n\r\n    constructor(\r\n        protected readonly db: AsyncDuckDB,\r\n        protected readonly conn: number,\r\n        protected readonly header: Uint8Array,\r\n    ) {\r\n        this._first = true;\r\n        this._depleted = false;\r\n        this._inFlight = null;\r\n    }\r\n\r\n    async next(): Promise<IteratorResult<Uint8Array>> {\r\n        if (this._first) {\r\n            this._first = false;\r\n            return { done: false, value: this.header };\r\n        }\r\n        if (this._depleted) {\r\n            return { done: true, value: null };\r\n        }\r\n        let buffer: Uint8Array;\r\n        if (this._inFlight != null) {\r\n            buffer = await this._inFlight;\r\n            this._inFlight = null;\r\n        } else {\r\n            buffer = await this.db.fetchQueryResults(this.conn);\r\n        }\r\n        this._depleted = buffer.length == 0;\r\n        if (!this._depleted) {\r\n            this._inFlight = this.db.fetchQueryResults(this.conn);\r\n        }\r\n        return {\r\n            done: this._depleted,\r\n            value: buffer,\r\n        };\r\n    }\r\n\r\n    [Symbol.asyncIterator]() {\r\n        return this;\r\n    }\r\n}\r\n\r\n/** A thin helper to bind the prepared statement id */\r\nexport class AsyncPreparedStatement<T extends { [key: string]: arrow.DataType } = any> {\r\n    /** The bindings */\r\n    protected readonly bindings: AsyncDuckDB;\r\n    /** The connection id */\r\n    protected readonly connectionId: number;\r\n    /** The statement id */\r\n    protected readonly statementId: number;\r\n\r\n    /** Constructor */\r\n    constructor(bindings: AsyncDuckDB, connectionId: number, statementId: number) {\r\n        this.bindings = bindings;\r\n        this.connectionId = connectionId;\r\n        this.statementId = statementId;\r\n    }\r\n\r\n    /** Close a prepared statement */\r\n    public async close() {\r\n        await this.bindings.closePrepared(this.connectionId, this.statementId);\r\n    }\r\n\r\n    /** Run a prepared statement */\r\n    public async query(...params: any[]): Promise<arrow.Table<T>> {\r\n        const buffer = await this.bindings.runPrepared(this.connectionId, this.statementId, params);\r\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\r\n        console.assert(reader.isSync());\r\n        console.assert(reader.isFile());\r\n        return new arrow.Table(reader as arrow.RecordBatchFileReader);\r\n    }\r\n\r\n    /** Send a prepared statement */\r\n    public async send(...params: any[]): Promise<arrow.AsyncRecordBatchStreamReader<T>> {\r\n        const header = await this.bindings.sendPrepared(this.connectionId, this.statementId, params);\r\n        const iter = new AsyncResultStreamIterator(this.bindings, this.connectionId, header);\r\n        const reader = await arrow.RecordBatchReader.from<T>(iter);\r\n        console.assert(reader.isAsync());\r\n        console.assert(reader.isStream());\r\n        return reader as unknown as arrow.AsyncRecordBatchStreamReader<T>; // XXX\r\n    }\r\n}\r\n", "import { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from '../bindings/insert_options';\r\nimport { LogEntryVariant } from '../log';\r\nimport { ScriptTokens } from '../bindings/tokens';\r\nimport { FileStatistics } from '../bindings/file_stats';\r\nimport { DuckDBConfig } from '../bindings/config';\r\nimport { WebFile } from '../bindings/web_file';\r\nimport { InstantiationProgress } from '../bindings/progress';\r\nimport { DuckDBDataProtocol } from '../bindings';\r\n\r\nexport type ConnectionID = number;\r\nexport type StatementID = number;\r\n\r\nexport enum WorkerRequestType {\r\n    CANCEL_PENDING_QUERY = 'CANCEL_PENDING_QUERY',\r\n    CLOSE_PREPARED = 'CLOSE_PREPARED',\r\n    COLLECT_FILE_STATISTICS = 'COLLECT_FILE_STATISTICS',\r\n    CONNECT = 'CONNECT',\r\n    COPY_FILE_TO_BUFFER = 'COPY_FILE_TO_BUFFER',\r\n    COPY_FILE_TO_PATH = 'COPY_FILE_TO_PATH',\r\n    CREATE_PREPARED = 'CREATE_PREPARED',\r\n    DISCONNECT = 'DISCONNECT',\r\n    DROP_FILE = 'DROP_FILE',\r\n    DROP_FILES = 'DROP_FILES',\r\n    EXPORT_FILE_STATISTICS = 'EXPORT_FILE_STATISTICS',\r\n    FETCH_QUERY_RESULTS = 'FETCH_QUERY_RESULTS',\r\n    FLUSH_FILES = 'FLUSH_FILES',\r\n    GET_FEATURE_FLAGS = 'GET_FEATURE_FLAGS',\r\n    GET_TABLE_NAMES = 'GET_TABLE_NAMES',\r\n    GET_VERSION = 'GET_VERSION',\r\n    GLOB_FILE_INFOS = 'GLOB_FILE_INFOS',\r\n    INSERT_ARROW_FROM_IPC_STREAM = 'INSERT_ARROW_FROM_IPC_STREAM',\r\n    INSERT_CSV_FROM_PATH = 'IMPORT_CSV_FROM_PATH',\r\n    INSERT_JSON_FROM_PATH = 'IMPORT_JSON_FROM_PATH',\r\n    INSTANTIATE = 'INSTANTIATE',\r\n    OPEN = 'OPEN',\r\n    PING = 'PING',\r\n    POLL_PENDING_QUERY = 'POLL_PENDING_QUERY',\r\n    REGISTER_FILE_BUFFER = 'REGISTER_FILE_BUFFER',\r\n    REGISTER_FILE_HANDLE = 'REGISTER_FILE_HANDLE',\r\n    REGISTER_FILE_URL = 'REGISTER_FILE_URL',\r\n    RESET = 'RESET',\r\n    RUN_PREPARED = 'RUN_PREPARED',\r\n    RUN_QUERY = 'RUN_QUERY',\r\n    SEND_PREPARED = 'SEND_PREPARED',\r\n    START_PENDING_QUERY = 'START_PENDING_QUERY',\r\n    TOKENIZE = 'TOKENIZE',\r\n}\r\n\r\nexport enum WorkerResponseType {\r\n    CONNECTION_INFO = 'CONNECTION_INFO',\r\n    ERROR = 'ERROR',\r\n    FEATURE_FLAGS = 'FEATURE_FLAGS',\r\n    FILE_BUFFER = 'FILE_BUFFER',\r\n    FILE_INFOS = 'FILE_INFOS',\r\n    FILE_SIZE = 'FILE_SIZE',\r\n    FILE_STATISTICS = 'FILE_STATISTICS',\r\n    INSTANTIATE_PROGRESS = 'INSTANTIATE_PROGRESS',\r\n    LOG = 'LOG',\r\n    OK = 'OK',\r\n    PREPARED_STATEMENT_ID = 'PREPARED_STATEMENT_ID',\r\n    QUERY_PLAN = 'QUERY_PLAN',\r\n    QUERY_RESULT = 'QUERY_RESULT',\r\n    QUERY_RESULT_CHUNK = 'QUERY_RESULT_CHUNK',\r\n    QUERY_RESULT_HEADER = 'QUERY_RESULT_HEADER',\r\n    QUERY_RESULT_HEADER_OR_NULL = 'QUERY_RESULT_HEADER_OR_NULL',\r\n    REGISTERED_FILE = 'REGISTERED_FILE',\r\n    SCRIPT_TOKENS = 'SCRIPT_TOKENS',\r\n    SUCCESS = 'SUCCESS',\r\n    TABLE_NAMES = 'TABLE_NAMES',\r\n    VERSION_STRING = 'VERSION_STRING',\r\n}\r\n\r\nexport type WorkerRequest<T, P> = {\r\n    readonly messageId: number;\r\n    readonly type: T;\r\n    readonly data: P;\r\n};\r\n\r\nexport type WorkerResponse<T, P> = {\r\n    readonly messageId: number;\r\n    readonly requestId: number;\r\n    readonly type: T;\r\n    readonly data: P;\r\n};\r\n\r\nexport type WorkerTaskReturnType<T extends WorkerTaskVariant> = T extends WorkerTask<any, any, infer P> ? P : never;\r\n\r\nexport class WorkerTask<T, D, P> {\r\n    readonly type: T;\r\n    readonly data: D;\r\n    promise: Promise<P>;\r\n    promiseResolver: (value: P | PromiseLike<P>) => void = () => {};\r\n    promiseRejecter: (value: any) => void = () => {};\r\n\r\n    constructor(type: T, data: D) {\r\n        this.type = type;\r\n        this.data = data;\r\n        this.promise = new Promise<P>(\r\n            (resolve: (value: P | PromiseLike<P>) => void, reject: (reason?: void) => void) => {\r\n                this.promiseResolver = resolve;\r\n                this.promiseRejecter = reject;\r\n            },\r\n        );\r\n    }\r\n}\r\n\r\nexport type WorkerRequestVariant =\r\n    | WorkerRequest<WorkerRequestType.CLOSE_PREPARED, [ConnectionID, StatementID]>\r\n    | WorkerRequest<WorkerRequestType.CANCEL_PENDING_QUERY, number>\r\n    | WorkerRequest<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean]>\r\n    | WorkerRequest<WorkerRequestType.CONNECT, null>\r\n    | WorkerRequest<WorkerRequestType.COPY_FILE_TO_BUFFER, string>\r\n    | WorkerRequest<WorkerRequestType.COPY_FILE_TO_PATH, [string, string]>\r\n    | WorkerRequest<WorkerRequestType.CREATE_PREPARED, [ConnectionID, string]>\r\n    | WorkerRequest<WorkerRequestType.DISCONNECT, number>\r\n    | WorkerRequest<WorkerRequestType.DROP_FILE, string>\r\n    | WorkerRequest<WorkerRequestType.DROP_FILES, null>\r\n    | WorkerRequest<WorkerRequestType.EXPORT_FILE_STATISTICS, string>\r\n    | WorkerRequest<WorkerRequestType.FETCH_QUERY_RESULTS, number>\r\n    | WorkerRequest<WorkerRequestType.FLUSH_FILES, null>\r\n    | WorkerRequest<WorkerRequestType.GET_FEATURE_FLAGS, null>\r\n    | WorkerRequest<WorkerRequestType.GET_TABLE_NAMES, [number, string]>\r\n    | WorkerRequest<WorkerRequestType.GET_VERSION, null>\r\n    | WorkerRequest<WorkerRequestType.GLOB_FILE_INFOS, string>\r\n    | WorkerRequest<\r\n          WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\r\n          [number, Uint8Array, ArrowInsertOptions | undefined]\r\n      >\r\n    | WorkerRequest<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions]>\r\n    | WorkerRequest<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions]>\r\n    | WorkerRequest<WorkerRequestType.INSTANTIATE, [string, string | null]>\r\n    | WorkerRequest<WorkerRequestType.OPEN, DuckDBConfig>\r\n    | WorkerRequest<WorkerRequestType.PING, null>\r\n    | WorkerRequest<WorkerRequestType.POLL_PENDING_QUERY, number>\r\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array]>\r\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_HANDLE, [string, any, DuckDBDataProtocol, boolean]>\r\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_URL, [string, string, DuckDBDataProtocol, boolean]>\r\n    | WorkerRequest<WorkerRequestType.RESET, null>\r\n    | WorkerRequest<WorkerRequestType.RUN_PREPARED, [number, number, any[]]>\r\n    | WorkerRequest<WorkerRequestType.RUN_QUERY, [number, string]>\r\n    | WorkerRequest<WorkerRequestType.SEND_PREPARED, [number, number, any[]]>\r\n    | WorkerRequest<WorkerRequestType.START_PENDING_QUERY, [number, string]>\r\n    | WorkerRequest<WorkerRequestType.TOKENIZE, string>;\r\n\r\nexport type WorkerResponseVariant =\r\n    | WorkerResponse<WorkerResponseType.CONNECTION_INFO, number>\r\n    | WorkerResponse<WorkerResponseType.ERROR, any>\r\n    | WorkerResponse<WorkerResponseType.FEATURE_FLAGS, number>\r\n    | WorkerResponse<WorkerResponseType.FILE_BUFFER, Uint8Array>\r\n    | WorkerResponse<WorkerResponseType.FILE_INFOS, WebFile[]>\r\n    | WorkerResponse<WorkerResponseType.FILE_SIZE, number>\r\n    | WorkerResponse<WorkerResponseType.FILE_STATISTICS, FileStatistics>\r\n    | WorkerResponse<WorkerResponseType.INSTANTIATE_PROGRESS, InstantiationProgress>\r\n    | WorkerResponse<WorkerResponseType.LOG, LogEntryVariant>\r\n    | WorkerResponse<WorkerResponseType.OK, null>\r\n    | WorkerResponse<WorkerResponseType.PREPARED_STATEMENT_ID, number>\r\n    | WorkerResponse<WorkerResponseType.QUERY_PLAN, Uint8Array>\r\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT, Uint8Array>\r\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT_CHUNK, Uint8Array>\r\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT_HEADER, Uint8Array>\r\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT_HEADER_OR_NULL, Uint8Array | null>\r\n    | WorkerResponse<WorkerResponseType.SCRIPT_TOKENS, ScriptTokens>\r\n    | WorkerResponse<WorkerResponseType.SUCCESS, boolean>\r\n    | WorkerResponse<WorkerResponseType.TABLE_NAMES, string[]>\r\n    | WorkerResponse<WorkerResponseType.VERSION_STRING, string>;\r\n\r\nexport type WorkerTaskVariant =\r\n    | WorkerTask<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean], null>\r\n    | WorkerTask<WorkerRequestType.CLOSE_PREPARED, [number, number], null>\r\n    | WorkerTask<WorkerRequestType.CONNECT, null, ConnectionID>\r\n    | WorkerTask<WorkerRequestType.COPY_FILE_TO_BUFFER, string, Uint8Array>\r\n    | WorkerTask<WorkerRequestType.COPY_FILE_TO_PATH, [string, string], null>\r\n    | WorkerTask<WorkerRequestType.CREATE_PREPARED, [number, string], number>\r\n    | WorkerTask<WorkerRequestType.DISCONNECT, ConnectionID, null>\r\n    | WorkerTask<WorkerRequestType.DROP_FILE, string, null>\r\n    | WorkerTask<WorkerRequestType.DROP_FILES, null, null>\r\n    | WorkerTask<WorkerRequestType.EXPORT_FILE_STATISTICS, string, FileStatistics>\r\n    | WorkerTask<WorkerRequestType.FETCH_QUERY_RESULTS, ConnectionID, Uint8Array>\r\n    | WorkerTask<WorkerRequestType.FLUSH_FILES, null, null>\r\n    | WorkerTask<WorkerRequestType.GET_FEATURE_FLAGS, null, number>\r\n    | WorkerTask<WorkerRequestType.GET_TABLE_NAMES, [number, string], string[]>\r\n    | WorkerTask<WorkerRequestType.GET_VERSION, null, string>\r\n    | WorkerTask<\r\n          WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\r\n          [number, Uint8Array, ArrowInsertOptions | undefined],\r\n          null\r\n      >\r\n    | WorkerTask<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions], null>\r\n    | WorkerTask<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions], null>\r\n    | WorkerTask<WorkerRequestType.INSTANTIATE, [string, string | null], null>\r\n    | WorkerTask<WorkerRequestType.OPEN, DuckDBConfig, null>\r\n    | WorkerTask<WorkerRequestType.PING, null, null>\r\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>\r\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_HANDLE, [string, any, DuckDBDataProtocol, boolean], null>\r\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_URL, [string, string, DuckDBDataProtocol, boolean], null>\r\n    | WorkerTask<WorkerRequestType.GLOB_FILE_INFOS, string, WebFile[]>\r\n    | WorkerTask<WorkerRequestType.RESET, null, null>\r\n    | WorkerTask<WorkerRequestType.RUN_PREPARED, [number, number, any[]], Uint8Array>\r\n    | WorkerTask<WorkerRequestType.RUN_QUERY, [ConnectionID, string], Uint8Array>\r\n    | WorkerTask<WorkerRequestType.SEND_PREPARED, [number, number, any[]], Uint8Array>\r\n    | WorkerTask<WorkerRequestType.START_PENDING_QUERY, [ConnectionID, string], Uint8Array | null>\r\n    | WorkerTask<WorkerRequestType.POLL_PENDING_QUERY, ConnectionID, Uint8Array | null>\r\n    | WorkerTask<WorkerRequestType.CANCEL_PENDING_QUERY, ConnectionID, boolean>\r\n    | WorkerTask<WorkerRequestType.TOKENIZE, string, ScriptTokens>;\r\n", "import {\r\n    WorkerRequestType,\r\n    WorkerResponseType,\r\n    WorkerResponseVariant,\r\n    WorkerTaskVariant,\r\n    WorkerTask,\r\n    ConnectionID,\r\n    WorkerTaskReturnType,\r\n} from './worker_request';\r\nimport { AsyncDuckDBBindings } from './async_bindings_interface';\r\nimport { Logger } from '../log';\r\nimport { AsyncDuckDBConnection } from './async_connection';\r\nimport { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from '../bindings/insert_options';\r\nimport { ScriptTokens } from '../bindings/tokens';\r\nimport { FileStatistics } from '../bindings/file_stats';\r\nimport { DuckDBConfig } from '../bindings/config';\r\nimport { InstantiationProgress } from '../bindings/progress';\r\nimport { arrowToSQLField } from '../json_typedef';\r\nimport { WebFile } from '../bindings/web_file';\r\nimport { DuckDBDataProtocol } from '../bindings';\r\n\r\nconst TEXT_ENCODER = new TextEncoder();\r\n\r\nexport class AsyncDuckDB implements AsyncDuckDBBindings {\r\n    /** The message handler */\r\n    protected readonly _onMessageHandler: (event: MessageEvent) => void;\r\n    /** The error handler */\r\n    protected readonly _onErrorHandler: (event: ErrorEvent) => void;\r\n    /** The close handler */\r\n    protected readonly _onCloseHandler: () => void;\r\n\r\n    /** Instantiate the module */\r\n    protected _onInstantiationProgress: ((p: InstantiationProgress) => void)[] = [];\r\n\r\n    /** The logger */\r\n    protected readonly _logger: Logger;\r\n    /** The worker */\r\n    protected _worker: Worker | null = null;\r\n    /** The promise for the worker shutdown */\r\n    protected _workerShutdownPromise: Promise<null> | null = null;\r\n    /** Make the worker as terminated */\r\n    protected _workerShutdownResolver: (value: PromiseLike<null> | null) => void = () => {};\r\n\r\n    /** The next message id */\r\n    protected _nextMessageId = 0;\r\n    /** The pending requests */\r\n    protected _pendingRequests: Map<number, WorkerTaskVariant> = new Map();\r\n\r\n    constructor(logger: Logger, worker: Worker | null = null) {\r\n        this._logger = logger;\r\n        this._onMessageHandler = this.onMessage.bind(this);\r\n        this._onErrorHandler = this.onError.bind(this);\r\n        this._onCloseHandler = this.onClose.bind(this);\r\n        if (worker != null) this.attach(worker);\r\n    }\r\n\r\n    /** Get the logger */\r\n    public get logger(): Logger {\r\n        return this._logger;\r\n    }\r\n\r\n    /** Attach to worker */\r\n    protected attach(worker: Worker): void {\r\n        this._worker = worker;\r\n        this._worker.addEventListener('message', this._onMessageHandler);\r\n        this._worker.addEventListener('error', this._onErrorHandler);\r\n        this._worker.addEventListener('close', this._onCloseHandler);\r\n        this._workerShutdownPromise = new Promise<null>(\r\n            (resolve: (value: PromiseLike<null> | null) => void, _reject: (reason?: void) => void) => {\r\n                this._workerShutdownResolver = resolve;\r\n            },\r\n        );\r\n    }\r\n\r\n    /** Detach from worker */\r\n    public detach(): void {\r\n        if (!this._worker) return;\r\n        this._worker.removeEventListener('message', this._onMessageHandler);\r\n        this._worker.removeEventListener('error', this._onErrorHandler);\r\n        this._worker.removeEventListener('close', this._onCloseHandler);\r\n        this._worker = null;\r\n        this._workerShutdownResolver(null);\r\n        this._workerShutdownPromise = null;\r\n        this._workerShutdownResolver = () => {};\r\n    }\r\n\r\n    /** Kill the worker */\r\n    public async terminate(): Promise<void> {\r\n        if (!this._worker) return;\r\n        this._worker.terminate();\r\n        //await this._workerShutdownPromise; TODO deadlocking in karma?\r\n        this._worker = null;\r\n        this._workerShutdownPromise = null;\r\n        this._workerShutdownResolver = () => {};\r\n    }\r\n\r\n    /** Post a task */\r\n    protected async postTask<W extends WorkerTaskVariant>(\r\n        task: W,\r\n        transfer: ArrayBuffer[] = [],\r\n    ): Promise<WorkerTaskReturnType<W>> {\r\n        if (!this._worker) {\r\n            console.error('cannot send a message since the worker is not set!');\r\n            return undefined as any;\r\n        }\r\n        const mid = this._nextMessageId++;\r\n        this._pendingRequests.set(mid, task);\r\n        this._worker.postMessage(\r\n            {\r\n                messageId: mid,\r\n                type: task.type,\r\n                data: task.data,\r\n            },\r\n            transfer,\r\n        );\r\n        return (await task.promise) as WorkerTaskReturnType<W>;\r\n    }\r\n\r\n    /** Received a message */\r\n    protected onMessage(event: MessageEvent): void {\r\n        // Unassociated responses?\r\n        const response = event.data as WorkerResponseVariant;\r\n        switch (response.type) {\r\n            // Request failed?\r\n            case WorkerResponseType.LOG: {\r\n                this._logger.log(response.data);\r\n                return;\r\n            }\r\n            // Call progress callback\r\n            case WorkerResponseType.INSTANTIATE_PROGRESS: {\r\n                for (const p of this._onInstantiationProgress) {\r\n                    p(response.data);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Get associated task\r\n        const task = this._pendingRequests.get(response.requestId);\r\n        if (!task) {\r\n            console.warn(`unassociated response: [${response.requestId}, ${response.type.toString()}]`);\r\n            return;\r\n        }\r\n        this._pendingRequests.delete(response.requestId);\r\n\r\n        // Request failed?\r\n        if (response.type == WorkerResponseType.ERROR) {\r\n            // Workaround for Firefox not being able to perform structured-clone on Native Errors\r\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1556604\r\n            const e = new Error(response.data.message);\r\n            e.name = response.data.name;\r\n            e.stack = response.data.stack;\r\n            task.promiseRejecter(e);\r\n            return;\r\n        }\r\n\r\n        // Otherwise differentiate between the tasks first\r\n        switch (task.type) {\r\n            case WorkerRequestType.CLOSE_PREPARED:\r\n            case WorkerRequestType.COLLECT_FILE_STATISTICS:\r\n            case WorkerRequestType.COPY_FILE_TO_PATH:\r\n            case WorkerRequestType.DISCONNECT:\r\n            case WorkerRequestType.DROP_FILE:\r\n            case WorkerRequestType.DROP_FILES:\r\n            case WorkerRequestType.FLUSH_FILES:\r\n            case WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM:\r\n            case WorkerRequestType.INSERT_CSV_FROM_PATH:\r\n            case WorkerRequestType.INSERT_JSON_FROM_PATH:\r\n            case WorkerRequestType.OPEN:\r\n            case WorkerRequestType.PING:\r\n            case WorkerRequestType.REGISTER_FILE_BUFFER:\r\n            case WorkerRequestType.REGISTER_FILE_HANDLE:\r\n            case WorkerRequestType.REGISTER_FILE_URL:\r\n            case WorkerRequestType.RESET:\r\n                if (response.type == WorkerResponseType.OK) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.INSTANTIATE:\r\n                this._onInstantiationProgress = [];\r\n                if (response.type == WorkerResponseType.OK) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.GLOB_FILE_INFOS:\r\n                if (response.type == WorkerResponseType.FILE_INFOS) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.GET_VERSION:\r\n                if (response.type == WorkerResponseType.VERSION_STRING) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.GET_FEATURE_FLAGS:\r\n                if (response.type == WorkerResponseType.FEATURE_FLAGS) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.GET_TABLE_NAMES:\r\n                if (response.type == WorkerResponseType.TABLE_NAMES) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.TOKENIZE:\r\n                if (response.type == WorkerResponseType.SCRIPT_TOKENS) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.COPY_FILE_TO_BUFFER:\r\n                if (response.type == WorkerResponseType.FILE_BUFFER) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.EXPORT_FILE_STATISTICS:\r\n                if (response.type == WorkerResponseType.FILE_STATISTICS) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.CONNECT:\r\n                if (response.type == WorkerResponseType.CONNECTION_INFO) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.RUN_PREPARED:\r\n            case WorkerRequestType.RUN_QUERY:\r\n                if (response.type == WorkerResponseType.QUERY_RESULT) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.SEND_PREPARED:\r\n                if (response.type == WorkerResponseType.QUERY_RESULT_HEADER) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.START_PENDING_QUERY:\r\n                if (response.type == WorkerResponseType.QUERY_RESULT_HEADER_OR_NULL) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.POLL_PENDING_QUERY:\r\n                if (response.type == WorkerResponseType.QUERY_RESULT_HEADER_OR_NULL) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.CANCEL_PENDING_QUERY:\r\n                this._onInstantiationProgress = [];\r\n                if (response.type == WorkerResponseType.SUCCESS) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.FETCH_QUERY_RESULTS:\r\n                if (response.type == WorkerResponseType.QUERY_RESULT_CHUNK) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n            case WorkerRequestType.CREATE_PREPARED:\r\n                if (response.type == WorkerResponseType.PREPARED_STATEMENT_ID) {\r\n                    task.promiseResolver(response.data);\r\n                    return;\r\n                }\r\n                break;\r\n        }\r\n        task.promiseRejecter(new Error(`unexpected response type: ${response.type.toString()}`));\r\n    }\r\n\r\n    /** Received an error */\r\n    protected onError(event: ErrorEvent): void {\r\n        console.error(event);\r\n        console.error(`error in duckdb worker: ${event.message}`);\r\n        this._pendingRequests.clear();\r\n    }\r\n\r\n    /** The worker was closed */\r\n    protected onClose(): void {\r\n        this._workerShutdownResolver(null);\r\n        if (this._pendingRequests.size != 0) {\r\n            console.warn(`worker terminated with ${this._pendingRequests.size} pending requests`);\r\n            return;\r\n        }\r\n        this._pendingRequests.clear();\r\n    }\r\n\r\n    /** Reset the duckdb */\r\n    public async reset(): Promise<null> {\r\n        const task = new WorkerTask<WorkerRequestType.RESET, null, null>(WorkerRequestType.RESET, null);\r\n        return await this.postTask(task);\r\n    }\r\n\r\n    /** Ping the worker thread */\r\n    public async ping(): Promise<any> {\r\n        const task = new WorkerTask<WorkerRequestType.PING, null, null>(WorkerRequestType.PING, null);\r\n        await this.postTask(task);\r\n    }\r\n    /** Try to drop a file */\r\n    public async dropFile(name: string): Promise<null> {\r\n        const task = new WorkerTask<WorkerRequestType.DROP_FILE, string, null>(WorkerRequestType.DROP_FILE, name);\r\n        return await this.postTask(task);\r\n    }\r\n    /** Try to drop files */\r\n    public async dropFiles(): Promise<null> {\r\n        const task = new WorkerTask<WorkerRequestType.DROP_FILES, null, null>(WorkerRequestType.DROP_FILES, null);\r\n        return await this.postTask(task);\r\n    }\r\n    /** Flush all files */\r\n    public async flushFiles(): Promise<null> {\r\n        const task = new WorkerTask<WorkerRequestType.FLUSH_FILES, null, null>(WorkerRequestType.FLUSH_FILES, null);\r\n        return await this.postTask(task);\r\n    }\r\n\r\n    /** Open the database */\r\n    public async instantiate(\r\n        mainModuleURL: string,\r\n        pthreadWorkerURL: string | null = null,\r\n        progress: (progress: InstantiationProgress) => void = _p => {},\r\n    ): Promise<null> {\r\n        this._onInstantiationProgress.push(progress);\r\n        const task = new WorkerTask<WorkerRequestType.INSTANTIATE, [string, string | null], null>(\r\n            WorkerRequestType.INSTANTIATE,\r\n            [mainModuleURL, pthreadWorkerURL],\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n\r\n    /** Get the version */\r\n    public async getVersion(): Promise<string> {\r\n        const task = new WorkerTask<WorkerRequestType.GET_VERSION, null, string>(WorkerRequestType.GET_VERSION, null);\r\n        const version = await this.postTask(task);\r\n        return version;\r\n    }\r\n\r\n    /** Get the feature flags */\r\n    public async getFeatureFlags(): Promise<number> {\r\n        const task = new WorkerTask<WorkerRequestType.GET_FEATURE_FLAGS, null, number>(\r\n            WorkerRequestType.GET_FEATURE_FLAGS,\r\n            null,\r\n        );\r\n        const feature = await this.postTask(task);\r\n        return feature;\r\n    }\r\n\r\n    /** Open a new database */\r\n    public async open(config: DuckDBConfig): Promise<void> {\r\n        const task = new WorkerTask<WorkerRequestType.OPEN, DuckDBConfig, null>(WorkerRequestType.OPEN, config);\r\n        await this.postTask(task);\r\n    }\r\n\r\n    /** Tokenize a script text */\r\n    public async tokenize(text: string): Promise<ScriptTokens> {\r\n        const task = new WorkerTask<WorkerRequestType.TOKENIZE, string, ScriptTokens>(WorkerRequestType.TOKENIZE, text);\r\n        const tokens = await this.postTask(task);\r\n        return tokens;\r\n    }\r\n\r\n    /** Connect to the database */\r\n    public async connectInternal(): Promise<number> {\r\n        const task = new WorkerTask<WorkerRequestType.CONNECT, null, ConnectionID>(WorkerRequestType.CONNECT, null);\r\n        return await this.postTask(task);\r\n    }\r\n\r\n    /** Connect to the database */\r\n    public async connect(): Promise<AsyncDuckDBConnection> {\r\n        const cid = await this.connectInternal();\r\n        return new AsyncDuckDBConnection(this, cid);\r\n    }\r\n\r\n    /** Disconnect from the database */\r\n    public async disconnect(conn: ConnectionID): Promise<void> {\r\n        const task = new WorkerTask<WorkerRequestType.DISCONNECT, ConnectionID, null>(\r\n            WorkerRequestType.DISCONNECT,\r\n            conn,\r\n        );\r\n        await this.postTask(task);\r\n    }\r\n\r\n    /** Run a query */\r\n    public async runQuery(conn: ConnectionID, text: string): Promise<Uint8Array> {\r\n        const task = new WorkerTask<WorkerRequestType.RUN_QUERY, [ConnectionID, string], Uint8Array>(\r\n            WorkerRequestType.RUN_QUERY,\r\n            [conn, text],\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n\r\n    /** Start a pending query */\r\n    public async startPendingQuery(conn: ConnectionID, text: string): Promise<Uint8Array | null> {\r\n        const task = new WorkerTask<WorkerRequestType.START_PENDING_QUERY, [ConnectionID, string], Uint8Array | null>(\r\n            WorkerRequestType.START_PENDING_QUERY,\r\n            [conn, text],\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n    /** Poll a pending query */\r\n    public async pollPendingQuery(conn: ConnectionID): Promise<Uint8Array | null> {\r\n        const task = new WorkerTask<WorkerRequestType.POLL_PENDING_QUERY, ConnectionID, Uint8Array | null>(\r\n            WorkerRequestType.POLL_PENDING_QUERY,\r\n            conn,\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n    /** Cancel a pending query */\r\n    public async cancelPendingQuery(conn: ConnectionID): Promise<boolean> {\r\n        const task = new WorkerTask<WorkerRequestType.CANCEL_PENDING_QUERY, ConnectionID, boolean>(\r\n            WorkerRequestType.CANCEL_PENDING_QUERY,\r\n            conn,\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n\r\n    /** Fetch query results */\r\n    public async fetchQueryResults(conn: ConnectionID): Promise<Uint8Array> {\r\n        const task = new WorkerTask<WorkerRequestType.FETCH_QUERY_RESULTS, ConnectionID, Uint8Array>(\r\n            WorkerRequestType.FETCH_QUERY_RESULTS,\r\n            conn,\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n\r\n    /** Get table names */\r\n    public async getTableNames(conn: number, text: string): Promise<string[]> {\r\n        const task = new WorkerTask<WorkerRequestType.GET_TABLE_NAMES, [number, string], string[]>(\r\n            WorkerRequestType.GET_TABLE_NAMES,\r\n            [conn, text],\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n\r\n    /** Prepare a statement and return its identifier */\r\n    public async createPrepared(conn: number, text: string): Promise<number> {\r\n        const task = new WorkerTask<WorkerRequestType.CREATE_PREPARED, [number, string], number>(\r\n            WorkerRequestType.CREATE_PREPARED,\r\n            [conn, text],\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n    /** Close a prepared statement */\r\n    public async closePrepared(conn: number, statement: number): Promise<void> {\r\n        const task = new WorkerTask<WorkerRequestType.CLOSE_PREPARED, [number, number], null>(\r\n            WorkerRequestType.CLOSE_PREPARED,\r\n            [conn, statement],\r\n        );\r\n        await this.postTask(task);\r\n    }\r\n    /** Execute a prepared statement and return the full result */\r\n    public async runPrepared(conn: number, statement: number, params: any[]): Promise<Uint8Array> {\r\n        const task = new WorkerTask<WorkerRequestType.RUN_PREPARED, [ConnectionID, number, any[]], Uint8Array>(\r\n            WorkerRequestType.RUN_PREPARED,\r\n            [conn, statement, params],\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n    /** Execute a prepared statement and stream the result */\r\n    public async sendPrepared(conn: number, statement: number, params: any[]): Promise<Uint8Array> {\r\n        const task = new WorkerTask<WorkerRequestType.SEND_PREPARED, [ConnectionID, number, any[]], Uint8Array>(\r\n            WorkerRequestType.SEND_PREPARED,\r\n            [conn, statement, params],\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n    /** Glob file infos */\r\n    public async globFiles(path: string): Promise<WebFile[]> {\r\n        const task = new WorkerTask<WorkerRequestType.GLOB_FILE_INFOS, string, WebFile[]>(\r\n            WorkerRequestType.GLOB_FILE_INFOS,\r\n            path,\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n    /** Register file text */\r\n    public async registerFileText(name: string, text: string): Promise<void> {\r\n        const buffer = TEXT_ENCODER.encode(text);\r\n        await this.registerFileBuffer(name, buffer);\r\n    }\r\n    /** Register a file path. */\r\n    public async registerFileURL(\r\n        name: string,\r\n        url: string,\r\n        proto: DuckDBDataProtocol,\r\n        directIO: boolean,\r\n    ): Promise<void> {\r\n        if (url === undefined) {\r\n            url = name;\r\n        }\r\n        const task = new WorkerTask<\r\n            WorkerRequestType.REGISTER_FILE_URL,\r\n            [string, string, DuckDBDataProtocol, boolean],\r\n            null\r\n        >(WorkerRequestType.REGISTER_FILE_URL, [name, url, proto, directIO]);\r\n        await this.postTask(task);\r\n    }\r\n\r\n    /** Register an empty file buffer. */\r\n    public async registerEmptyFileBuffer(name: string): Promise<void> {\r\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>(\r\n            WorkerRequestType.REGISTER_FILE_BUFFER,\r\n            [name, new Uint8Array()],\r\n        );\r\n        await this.postTask(task);\r\n    }\r\n\r\n    /** Register a file buffer. */\r\n    public async registerFileBuffer(name: string, buffer: Uint8Array): Promise<void> {\r\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>(\r\n            WorkerRequestType.REGISTER_FILE_BUFFER,\r\n            [name, buffer],\r\n        );\r\n        await this.postTask(task, [buffer.buffer]);\r\n    }\r\n\r\n    /** Register a file handle. */\r\n    public async registerFileHandle<HandleType>(\r\n        name: string,\r\n        handle: HandleType,\r\n        protocol: DuckDBDataProtocol,\r\n        directIO: boolean,\r\n    ): Promise<void> {\r\n        const task = new WorkerTask<\r\n            WorkerRequestType.REGISTER_FILE_HANDLE,\r\n            [string, any, DuckDBDataProtocol, boolean],\r\n            null\r\n        >(WorkerRequestType.REGISTER_FILE_HANDLE, [name, handle, protocol, directIO]);\r\n        await this.postTask(task, []);\r\n    }\r\n\r\n    /** Enable file statistics */\r\n    public async collectFileStatistics(name: string, enable: boolean): Promise<void> {\r\n        const task = new WorkerTask<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean], null>(\r\n            WorkerRequestType.COLLECT_FILE_STATISTICS,\r\n            [name, enable],\r\n        );\r\n        await this.postTask(task, []);\r\n    }\r\n\r\n    /** Export file statistics */\r\n    public async exportFileStatistics(name: string): Promise<FileStatistics> {\r\n        const task = new WorkerTask<WorkerRequestType.EXPORT_FILE_STATISTICS, string, FileStatistics>(\r\n            WorkerRequestType.EXPORT_FILE_STATISTICS,\r\n            name,\r\n        );\r\n        return await this.postTask(task, []);\r\n    }\r\n\r\n    /** Copy a file to a buffer. */\r\n    public async copyFileToBuffer(name: string): Promise<Uint8Array> {\r\n        const task = new WorkerTask<WorkerRequestType.COPY_FILE_TO_BUFFER, string, Uint8Array>(\r\n            WorkerRequestType.COPY_FILE_TO_BUFFER,\r\n            name,\r\n        );\r\n        return await this.postTask(task);\r\n    }\r\n\r\n    /** Copy a file to a path. */\r\n    public async copyFileToPath(name: string, path: string): Promise<void> {\r\n        const task = new WorkerTask<WorkerRequestType.COPY_FILE_TO_PATH, [string, string], null>(\r\n            WorkerRequestType.COPY_FILE_TO_PATH,\r\n            [name, path],\r\n        );\r\n        await this.postTask(task);\r\n    }\r\n\r\n    /** Insert arrow from an ipc stream */\r\n    public async insertArrowFromIPCStream(\r\n        conn: ConnectionID,\r\n        buffer: Uint8Array,\r\n        options?: ArrowInsertOptions,\r\n    ): Promise<void> {\r\n        if (buffer.length == 0) return;\r\n        // Pass to the worker\r\n        const task = new WorkerTask<\r\n            WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\r\n            [number, Uint8Array, ArrowInsertOptions | undefined],\r\n            null\r\n        >(WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM, [conn, buffer, options]);\r\n        await this.postTask(task, [buffer.buffer]);\r\n    }\r\n    /** Insert a csv file */\r\n    public async insertCSVFromPath(conn: ConnectionID, path: string, options: CSVInsertOptions): Promise<void> {\r\n        // Flatten the table options\r\n        if (options.columns !== undefined) {\r\n            const out = [];\r\n            for (const k in options.columns) {\r\n                const type = options.columns[k];\r\n                out.push(arrowToSQLField(k, type));\r\n            }\r\n            options.columnsFlat = out;\r\n            delete options.columns;\r\n        }\r\n\r\n        // Pass to the worker\r\n        const task = new WorkerTask<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions], null>(\r\n            WorkerRequestType.INSERT_CSV_FROM_PATH,\r\n            [conn, path, options],\r\n        );\r\n        await this.postTask(task);\r\n    }\r\n    /** Insert a json file */\r\n    public async insertJSONFromPath(conn: ConnectionID, path: string, options: JSONInsertOptions): Promise<void> {\r\n        // Flatten the table options\r\n        if (options.columns !== undefined) {\r\n            const out = [];\r\n            for (const k in options.columns) {\r\n                const type = options.columns[k];\r\n                out.push(arrowToSQLField(k, type));\r\n            }\r\n            options.columnsFlat = out;\r\n            delete options.columns;\r\n        }\r\n\r\n        // Pass to the worker\r\n        const task = new WorkerTask<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions], null>(\r\n            WorkerRequestType.INSERT_JSON_FROM_PATH,\r\n            [conn, path, options],\r\n        );\r\n        await this.postTask(task);\r\n    }\r\n}\r\n", "import * as duckdb_blocking from '../src/targets/duckdb-node-blocking';\r\nimport * as duckdb from '../src/targets/duckdb';\r\nimport path from 'path';\r\nimport Worker from 'web-worker';\r\nimport fs from 'fs';\r\n\r\n// Loading debug symbols, especially for WASM take insanely long so we just disable the test timeout\r\njasmine.DEFAULT_TIMEOUT_INTERVAL = 60000;\r\n\r\n// Resolve a buffer by fetching from disk\r\nconst dataDir = path.resolve(__dirname, '../../../data');\r\nconst resolveBuffer = (url: string) => {\r\n    const p = path.join(dataDir, url);\r\n    if (!fs.existsSync(p)) return null;\r\n    return new Uint8Array(fs.readFileSync(p));\r\n};\r\n\r\n// Resolve test data\r\nconst resolveData = async (url: string) => {\r\n    switch (url) {\r\n        case '/uni/all.zip':\r\n            return await resolveBuffer('/uni/all.zip');\r\n        case '/uni/assistenten.parquet':\r\n            return await resolveBuffer('/uni/assistenten.parquet');\r\n        case '/uni/studenten.parquet':\r\n            return await resolveBuffer('/uni/studenten.parquet');\r\n        case '/uni/hoeren.parquet':\r\n            return await resolveBuffer('/uni/hoeren.parquet');\r\n        case '/uni/vorlesungen.parquet':\r\n            return await resolveBuffer('/uni/vorlesungen.parquet');\r\n        default:\r\n            return null;\r\n    }\r\n};\r\n\r\n// Test environment\r\nlet db: duckdb_blocking.DuckDBBindings | null = null;\r\nlet adb: duckdb.AsyncDuckDB | null = null;\r\nlet worker: Worker | null = null;\r\n\r\nbeforeAll(async () => {\r\n    // Configure the worker\r\n    const DUCKDB_BUNDLES = {\r\n        mvp: {\r\n            mainModule: path.resolve(__dirname, './duckdb-mvp.wasm'),\r\n            mainWorker: path.resolve(__dirname, './duckdb-node-mvp.worker.cjs'),\r\n        },\r\n        eh: {\r\n            mainModule: path.resolve(__dirname, './duckdb-eh.wasm'),\r\n            mainWorker: path.resolve(__dirname, './duckdb-node-eh.worker.cjs'),\r\n        },\r\n    };\r\n    const DUCKDB_CONFIG = await duckdb.selectBundle(DUCKDB_BUNDLES);\r\n\r\n    const logger = new duckdb_blocking.VoidLogger();\r\n    db = await duckdb_blocking.createDuckDB(DUCKDB_BUNDLES, logger, duckdb_blocking.NODE_RUNTIME);\r\n    await db.instantiate(_ => {});\r\n\r\n    worker = new Worker(DUCKDB_CONFIG.mainWorker);\r\n    adb = new duckdb.AsyncDuckDB(logger, worker);\r\n    await adb.instantiate(DUCKDB_CONFIG.mainModule, DUCKDB_CONFIG.pthreadWorker);\r\n});\r\n\r\nafterAll(async () => {\r\n    if (worker) worker.terminate();\r\n});\r\n\r\nimport { testAllTypes, testAllTypesAsync } from './all_types.test';\r\nimport { testBindings, testAsyncBindings } from './bindings.test';\r\nimport { testBatchStream } from './batch_stream.test';\r\nimport { testFilesystem } from './filesystem.test';\r\nimport { testAsyncBatchStream } from './batch_stream_async.test';\r\nimport { testArrowInsert, testArrowInsertAsync } from './insert_arrow.test';\r\nimport { testJSONInsert, testJSONInsertAsync } from './insert_json.test';\r\nimport { testCSVInsert, testCSVInsertAsync } from './insert_csv.test';\r\nimport { testTokenization, testTokenizationAsync } from './tokenizer.test';\r\nimport { testTableNames, testTableNamesAsync } from './tablenames.test';\r\nimport { testUDF } from './udf.test';\r\nimport { testRegressionAsync } from './regression';\r\nimport { testFTS } from './fts.test';\r\n\r\ntestUDF(() => db!);\r\ntestTableNames(() => db!);\r\ntestTableNamesAsync(() => adb!);\r\ntestRegressionAsync(() => adb!);\r\ntestAllTypes(() => db!);\r\ntestAllTypesAsync(() => adb!);\r\ntestBindings(() => db!, dataDir);\r\ntestAsyncBindings(() => adb!, dataDir, duckdb.DuckDBDataProtocol.NODE_FS);\r\ntestBatchStream(() => db!);\r\ntestAsyncBatchStream(() => adb!);\r\ntestFilesystem(() => adb!, resolveData, dataDir, duckdb.DuckDBDataProtocol.NODE_FS);\r\ntestArrowInsert(() => db!);\r\ntestArrowInsertAsync(() => adb!);\r\ntestJSONInsert(() => db!);\r\ntestJSONInsertAsync(() => adb!);\r\ntestCSVInsert(() => db!);\r\ntestCSVInsertAsync(() => adb!);\r\ntestTokenization(() => db!);\r\ntestTokenizationAsync(() => adb!);\r\ntestFTS(() => db!);\r\n", "import * as duckdb from '../src/';\r\nimport { Vector } from 'apache-arrow';\r\nimport { DuckDBQueryConfig } from '../src/';\r\n\r\n// The max interval in microsec from DuckDB is 83 years 3 months 999 days 00:16:39.999999, with months as 30 days.\r\n// Note that due to Arrow JS not supporting the duration type, the castDurationToInterval option is used for intervals.\r\n// This has a side-effect that while the value is in microseconds, it only has millisecond accuracy. This is\r\n// because DuckDB emits intervals in milliseconds and the Arrow Time64 type does not support milliseconds as unit.\r\n//const MAX_INTERVAL_US = (((83 * (12 * 30) + 3 * 30 + 999) * 24 * 60 + 16) * 60 + 39) * 1000000 + 999000;\r\n\r\n// JS Date at +/-8640000000000000ms\r\nconst MINIMUM_DATE_STR = '-271821-04-20';\r\nconst MINIMUM_DATE = new Date(Date.UTC(-271821, 3, 20));\r\nconst MAXIMUM_DATE_STR = '275760-09-13';\r\nconst MAXIMUM_DATE = new Date(Date.UTC(275760, 8, 13));\r\n\r\n// All columns contain 3 values: [min_value, max_value, null]\r\ntype AnswerObjectType = {\r\n    [key: string]: any[];\r\n};\r\n\r\ninterface AllTypesTest {\r\n    name: string;\r\n    query: string;\r\n    skip: string[];\r\n    answerMap: AnswerObjectType;\r\n    answerCount: number;\r\n    queryConfig: DuckDBQueryConfig | null;\r\n}\r\n\r\n// These types currently do not work in DuckDB-WASM\r\n// timestamp_xx and date_tz types will soon be fully supported by duckdb and should be added then.\r\n// hugeint, dec_18_3, dec38_10 and uuid require JS BigInts for full support, which is currently not supported by ArrowJS\r\nconst NOT_IMPLEMENTED_TYPES = [\r\n    'timestamp_s',\r\n    'timestamp_ms',\r\n    'timestamp_ns',\r\n    'timestamp_tz',\r\n    'hugeint',\r\n    'dec_18_6',\r\n    'dec38_10',\r\n    'uuid',\r\n    'map',\r\n    'json',\r\n    'date_array',\r\n    'timestamp_array',\r\n    'timestamptz_array',\r\n];\r\n\r\n// These types are supported, but not the full range returned from the test_all_types() table function, here we define\r\n// the limits we do expect to be supported.\r\nconst PARTIALLY_IMPLEMENTED_TYPES = ['date', 'timestamp'];\r\nconst PARTIALLY_IMPLEMENTED_ANSWER_MAP: AnswerObjectType = {\r\n    date: [MINIMUM_DATE.valueOf(), MAXIMUM_DATE.valueOf(), null],\r\n    timestamp: [MINIMUM_DATE.valueOf(), MAXIMUM_DATE.valueOf(), null],\r\n};\r\n\r\n// Subqueries that return the limits of the subset of the full range that is implemented\r\nconst PARTIALLY_IMPLEMENTED_TYPES_SUBSTITUTIONS = [\r\n    `(SELECT array_extract(['${MINIMUM_DATE_STR}'::Date,'${MAXIMUM_DATE_STR}'::Date,null],i + 1)) as date`,\r\n    `(SELECT array_extract(['${MINIMUM_DATE_STR}'::Timestamp,'${MAXIMUM_DATE_STR}'::Timestamp,null],i + 1)) as timestamp`,\r\n];\r\n\r\n// These types do not work with default configuration, but have\r\nconst TYPES_REQUIRING_CUSTOM_CONFIG = ['dec_4_1', 'dec_9_4'];\r\n\r\n// Types that are fully supported.\r\nconst FULLY_IMPLEMENTED_ANSWER_MAP: AnswerObjectType = {\r\n    bool: [false, true, null],\r\n    tinyint: [-128, 127, null],\r\n    smallint: [-32768, 32767, null],\r\n    int: [-2147483648, 2147483647, null],\r\n    utinyint: [0, 255, null],\r\n    usmallint: [0, 65535, null],\r\n    uint: [0, 4294967295, null],\r\n    ubigint: [BigInt(0), BigInt('18446744073709551615'), null],\r\n    bigint: [BigInt('-9223372036854775808'), BigInt('9223372036854775807'), null],\r\n\r\n    // Note that we multiply by thousand (and add 999 for the max) because the value returned by DuckDB is in microseconds,\r\n    // whereas the Date object is in milliseconds.\r\n    time: [BigInt(0), BigInt(new Date('1970-01-01T23:59:59.999+00:00').valueOf()) * BigInt(1000) + BigInt(999), null],\r\n    time_tz: [\r\n        BigInt(0),\r\n        BigInt(new Date('1970-01-01T23:59:59.999+00:00').valueOf()) * BigInt(1000) + BigInt(999),\r\n        null,\r\n    ],\r\n    interval: [new Int32Array([0,0]),  new Int32Array([0,0]), null],\r\n\r\n    float: [-3.4028234663852886e38, 3.4028234663852886e38, null],\r\n    double: [-1.7976931348623157e308, 1.7976931348623157e308, null],\r\n    varchar: ['\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86', 'goo\\x00se', null],\r\n    small_enum: ['DUCK_DUCK_ENUM', 'GOOSE', null],\r\n    medium_enum: ['enum_0', 'enum_299', null],\r\n    large_enum: ['enum_0', 'enum_69999', null],\r\n\r\n    int_array: [[], [42, 999, null, null, -42], null],\r\n    double_array: [[], [42.0, NaN, Infinity, -Infinity, null, -42.0], null],\r\n    varchar_array: [[], ['\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86', 'goose', null, ''], null],\r\n    nested_int_array: [[], [[], [42, 999, null, null, -42], null, [], [42, 999, null, null, -42]], null],\r\n\r\n    struct: ['{\"a\":null,\"b\":null}', '{\"a\":42,\"b\":\"\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\"}', null],\r\n    struct_of_arrays: [\r\n        '{\"a\":null,\"b\":null}',\r\n        '{\"a\":[42,999,null,null,-42],\"b\":[\"\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\",\"goose\",null,\"\"]}',\r\n        null,\r\n    ],\r\n    array_of_structs: [[], ['{\"a\":null,\"b\":null}', '{\"a\":42,\"b\":\"\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\"}', null], null],\r\n\r\n    // XXX sometimes throws\r\n    // map: ['{}', '{\"key1\":\"\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\uD83E\uDD86\",\"key2\":\"goose\"}', null],\r\n    blob: [\r\n        Uint8Array.from([\r\n            116, 104, 105, 115, 105, 115, 97, 108, 111, 110, 103, 98, 108, 111, 98, 0, 119, 105, 116, 104, 110, 117,\r\n            108, 108, 98, 121, 116, 101, 115,\r\n        ]),\r\n        Uint8Array.from([0, 0, 0, 97]),\r\n        null,\r\n    ],\r\n};\r\n\r\n// Replacements for the values we knowingly don't support from the test_all_types query\r\nconst REPLACE_COLUMNS = PARTIALLY_IMPLEMENTED_TYPES.concat(NOT_IMPLEMENTED_TYPES).concat(TYPES_REQUIRING_CUSTOM_CONFIG);\r\n\r\nfunction unpack(v: any): any {\r\n    if (v === null) return null;\r\n\r\n    if (v instanceof Vector) {\r\n        const ret = Array.from(v.toArray());\r\n        for (let i = 0; i < ret.length; i++) {\r\n            if (!v.isValid(i)) {\r\n                ret[i] = null;\r\n            }\r\n        }\r\n        return unpack(ret);\r\n    } else if (v instanceof Array) {\r\n        const ret: any = [];\r\n        for (let i = 0; i < v.length; i++) {\r\n            ret[i] = unpack(v[i]);\r\n        }\r\n        return ret;\r\n    } else if (v instanceof Uint8Array) {\r\n        return v;\r\n    } else if (v.toJSON instanceof Function) {\r\n        return JSON.stringify(v.toJSON());\r\n    }\r\n\r\n    return v;\r\n}\r\n\r\nfunction getValue(x: any): any {\r\n    if (typeof x?.valueOf === 'function') {\r\n        return x.valueOf();\r\n    } else {\r\n        return x;\r\n    }\r\n}\r\n\r\nconst ALL_TYPES_TEST: AllTypesTest[] = [\r\n    {\r\n        name: 'fully supported types',\r\n        query: `SELECT * REPLACE('not_implemented' as map) FROM test_all_types()`,\r\n        skip: REPLACE_COLUMNS,\r\n        answerMap: FULLY_IMPLEMENTED_ANSWER_MAP,\r\n        answerCount: REPLACE_COLUMNS.length + Object.keys(FULLY_IMPLEMENTED_ANSWER_MAP).length,\r\n        queryConfig: null,\r\n    },\r\n    {\r\n        name: 'partially supported types',\r\n        query: `SELECT ${PARTIALLY_IMPLEMENTED_TYPES_SUBSTITUTIONS.join(', ')}\r\n                FROM range(0, 3) tbl(i)`,\r\n        skip: [],\r\n        answerMap: PARTIALLY_IMPLEMENTED_ANSWER_MAP,\r\n        answerCount: PARTIALLY_IMPLEMENTED_TYPES.length,\r\n        queryConfig: null,\r\n    },\r\n    {\r\n        name: 'types with custom config',\r\n        query: `SELECT ${TYPES_REQUIRING_CUSTOM_CONFIG.join(',')} FROM test_all_types()`,\r\n        skip: [],\r\n        answerMap: {\r\n            dec_4_1: [-999.9000000000001, 999.9000000000001, null],\r\n            dec_9_4: [-99999.99990000001, 99999.99990000001, null],\r\n        },\r\n        answerCount: TYPES_REQUIRING_CUSTOM_CONFIG.length,\r\n        queryConfig: {\r\n            castDecimalToDouble: true,\r\n        },\r\n    },\r\n];\r\n\r\nexport function testAllTypes(db: () => duckdb.DuckDBBindings): void {\r\n    let conn: duckdb.DuckDBConnection | null;\r\n\r\n    beforeEach(() => {\r\n        db().flushFiles();\r\n    });\r\n\r\n    afterEach(() => {\r\n        if (conn) {\r\n            conn.close();\r\n            conn = null;\r\n        }\r\n        db().flushFiles();\r\n        db().dropFiles();\r\n    });\r\n    describe('Test All Types', () => {\r\n        for (const test of ALL_TYPES_TEST) {\r\n            it(test.name, () => {\r\n                if (test.queryConfig) db().open({ query: test.queryConfig });\r\n\r\n                conn = db().connect();\r\n\r\n                const results = conn.query(test.query);\r\n                expect(results.numCols).toEqual(test.answerCount);\r\n\r\n                const skip = new Map();\r\n                for (const s of test.skip) {\r\n                    skip.set(s, true);\r\n                }\r\n                for (let i = 0; i < results.numCols; i++) {\r\n                    const name = results.schema.fields[i].name;\r\n                    if (name == \"bit\")\r\n                        continue;\r\n                    const col = results.getChildAt(i);\r\n                    if (skip.get(name)) continue;\r\n                    expect(col).not.toBeNull();\r\n                    expect(col?.length).not.toEqual(0);\r\n\r\n                    expect(unpack(getValue(col!.get(0))))\r\n                       .withContext(name)\r\n                       .toEqual(test.answerMap[name][0]); // Min\r\n                    expect(unpack(getValue(col!.get(1))))\r\n                       .withContext(name)\r\n                       .toEqual(test.answerMap[name][1]); // Max\r\n                    expect(col!.get(2))\r\n                       .withContext(name)\r\n                       .toEqual(test.answerMap[name][2]); // Null\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function testAllTypesAsync(db: () => duckdb.AsyncDuckDB): void {\r\n    let conn: duckdb.AsyncDuckDBConnection | null = null;\r\n\r\n    beforeEach(async () => {\r\n        await db().flushFiles();\r\n    });\r\n    afterEach(async () => {\r\n        if (conn) {\r\n            await conn.close();\r\n            conn = null;\r\n        }\r\n        await db().flushFiles();\r\n        await db().dropFiles();\r\n    });\r\n\r\n    describe('Test All Types Async', () => {\r\n        for (const test of ALL_TYPES_TEST) {\r\n            it(test.name, async () => {\r\n                if (test.queryConfig) db().open({ query: test.queryConfig });\r\n\r\n                conn = await db().connect();\r\n                const results = await conn.query(test.query);\r\n                expect(results.numCols).toEqual(test.answerCount);\r\n\r\n                const skip = new Map();\r\n                for (const s of test.skip) {\r\n                    skip.set(s, true);\r\n                }\r\n                for (let i = 0; i < results.numCols; i++) {\r\n                    const name = results.schema.fields[i].name;\r\n                    if (name == \"bit\")\r\n                        continue;\r\n                    const col = results.getChildAt(i);\r\n                    if (skip.get(name)) continue;\r\n                    expect(col).not.toBeNull();\r\n                    expect(col?.length).not.toEqual(0);\r\n\r\n                    expect(Object.keys(test.answerMap)).toContain(name);\r\n                    expect(unpack(getValue(col!.get(0))))\r\n                        .withContext(name + '|' + col?.toString() + '|[0]')\r\n                        .toEqual(test.answerMap[name][0]); // Min\r\n                    expect(unpack(getValue(col!.get(1))))\r\n                        .withContext(name + '|' + col?.toString() + '|[1]')\r\n                        .toEqual(test.answerMap[name][1]); // Max\r\n                    expect(col!.get(2))\r\n                        .withContext(name + '|' + col?.toString() + '|[2]')\r\n                        .toEqual(test.answerMap[name][2]); // Null\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n", "import * as arrow from 'apache-arrow';\r\nimport * as duckdb from '../src/';\r\nimport { DuckDBAccessMode, DuckDBDataProtocol } from '../src/';\r\n\r\nexport function testBindings(db: () => duckdb.DuckDBBindings, baseURL: string): void {\r\n    let conn: duckdb.DuckDBConnection;\r\n\r\n    beforeEach(() => {\r\n        conn = db().connect();\r\n    });\r\n\r\n    afterEach(() => {\r\n        conn.close();\r\n        db().flushFiles();\r\n        db().dropFiles();\r\n    });\r\n\r\n    describe('DuckDBBindings', () => {\r\n        describe('error handling', () => {\r\n            it('INVALID SQL', async () => {\r\n                let error: Error | null = null;\r\n                try {\r\n                    await conn.send('INVALID');\r\n                } catch (e: any) {\r\n                    error = e;\r\n                }\r\n                expect(error).not.toBe(null);\r\n            });\r\n        });\r\n\r\n        describe('Check version', () => {\r\n            it('Version check', async () => {\r\n                await db().reset();\r\n                conn = db().connect();\r\n                const version = conn.query<{ name: arrow.Utf8 }>(\r\n                    \"select * from (select version()) where version() != 'v0.0.1-dev0';\",\r\n                );\r\n                const rows = version.toArray();\r\n                expect(rows.length).toEqual(1);\r\n                await db().reset();\r\n            });\r\n        });\r\n\r\n        //describe('Open', () => {\r\n        // XXX apparently synchronous XHR on the main thread does not allow for arraybuffer response type?\r\n        // it('Remote TPCH 0_01', async () => {\r\n        //     await db().registerFileURL('tpch_0_01.db', `${baseURL}/tpch/0_01/duckdb/db`);\r\n        //     db().open('tpch_0_01.db');\r\n        // });\r\n        //});\r\n\r\n        describe('Reset', () => {\r\n            it('table must disappear', async () => {\r\n                await db().reset();\r\n                conn = db().connect();\r\n                conn.query('CREATE TABLE foo (a int)');\r\n                let table = conn.query<{ name: arrow.Utf8 }>('PRAGMA show_tables;');\r\n                let rows = table.toArray();\r\n                expect(rows.length).toEqual(1);\r\n                expect(rows[0]?.name).toEqual('foo');\r\n                await db().reset();\r\n                conn = db().connect();\r\n                table = conn.query<{ name: arrow.Utf8 }>('PRAGMA show_tables;');\r\n                rows = table.toArray();\r\n                expect(rows.length).toEqual(0);\r\n            });\r\n        });\r\n\r\n        describe('Prepared Statement', () => {\r\n            it('Materialized', async () => {\r\n                const stmt = conn.prepare('SELECT v::INTEGER + ? AS v FROM generate_series(0, 10000) as t(v);');\r\n                const result = stmt.query(234);\r\n                expect(result.numRows).toBe(10001);\r\n                stmt.close();\r\n            });\r\n\r\n            it('Streaming', async () => {\r\n                const stmt = conn.prepare('SELECT v::INTEGER + ? AS v FROM generate_series(0, 10000) as t(v);');\r\n                const stream = stmt.send(234);\r\n                let size = 0;\r\n                for (const batch of stream) {\r\n                    size += batch.numRows;\r\n                }\r\n                expect(size).toBe(10001);\r\n                conn.close();\r\n            });\r\n            it('Typecheck', async () => {\r\n                conn.query(`CREATE TABLE typecheck (\r\n                    a BOOLEAN DEFAULT NULL,\r\n                    b TINYINT DEFAULT NULL,\r\n                    c SMALLINT DEFAULT NULL,\r\n                    d INTEGER DEFAULT NULL,\r\n                    e BIGINT DEFAULT NULL,\r\n                    f FLOAT DEFAULT NULL,\r\n                    g DOUBLE DEFAULT NULL,\r\n                    h CHAR(11) DEFAULT NULL,\r\n                    i VARCHAR(11) DEFAULT NULL\r\n                )`);\r\n\r\n                const stmt = conn.prepare('INSERT INTO typecheck VALUES(?,?,?,?,?,?,?,?,?)');\r\n                expect(() =>\r\n                    stmt.query(true, 100, 10_000, 1_000_000, 5_000_000_000, 0.5, Math.PI, 'hello world', 'hi'),\r\n                ).not.toThrow();\r\n                expect(() =>\r\n                    stmt.query(\r\n                        'test', // varchar for bool\r\n                        100,\r\n                        10_000,\r\n                        1_000_000,\r\n                        5_000_000_000,\r\n                        0.5,\r\n                        Math.PI,\r\n                        'hello world',\r\n                        'hi',\r\n                    ),\r\n                ).toThrow();\r\n                expect(() =>\r\n                    stmt.query(\r\n                        true,\r\n                        10_000, // smallint for tinyint\r\n                        10_000,\r\n                        1_000_000,\r\n                        5_000_000_000,\r\n                        0.5,\r\n                        Math.PI,\r\n                        'hello world',\r\n                        'hi',\r\n                    ),\r\n                ).toThrow();\r\n                expect(() =>\r\n                    stmt.query(\r\n                        true,\r\n                        100,\r\n                        1_000_000, // int for smallint\r\n                        1_000_000,\r\n                        5_000_000_000,\r\n                        0.5,\r\n                        Math.PI,\r\n                        'hello world',\r\n                        'hi',\r\n                    ),\r\n                ).toThrow();\r\n                expect(() =>\r\n                    stmt.query(\r\n                        true,\r\n                        100,\r\n                        10_000,\r\n                        5_000_000_000, // bigint for int\r\n                        5_000_000_000,\r\n                        0.5,\r\n                        Math.PI,\r\n                        'hello world',\r\n                        'hi',\r\n                    ),\r\n                ).toThrow();\r\n                conn.close();\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\nexport function testAsyncBindings(\r\n    adb: () => duckdb.AsyncDuckDB,\r\n    baseURL: string,\r\n    baseDirProto: DuckDBDataProtocol,\r\n): void {\r\n    beforeEach(async () => {});\r\n\r\n    afterEach(async () => {\r\n        await adb().flushFiles();\r\n        await adb().dropFiles();\r\n        await adb().open({\r\n            path: ':memory:',\r\n        });\r\n    });\r\n\r\n    describe('Bindings', () => {\r\n        describe('Open', () => {\r\n            it('Remote TPCH 0_01', async () => {\r\n                await adb().registerFileURL('tpch_0_01.db', `${baseURL}/tpch/0_01/duckdb/db`, baseDirProto, false);\r\n                await adb().open({\r\n                    path: 'tpch_0_01.db',\r\n                });\r\n                const conn = await adb().connect();\r\n                const table = await conn.query<{\r\n                    a: arrow.Int;\r\n                }>('select count(*)::INTEGER as a from lineitem');\r\n                const rows = table.toArray();\r\n                expect(rows.length).toEqual(1);\r\n                expect(rows[0]?.a).toEqual(60175);\r\n            });\r\n        });\r\n\r\n        describe('Patching', () => {\r\n            it('Count(*) Default', async () => {\r\n                await adb().open({\r\n                    path: ':memory:',\r\n                    query: {\r\n                        castBigIntToDouble: false,\r\n                    },\r\n                });\r\n                const conn = await adb().connect();\r\n                const table = await conn.query('select 1::BIGINT');\r\n                expect(table.schema.fields.length).toEqual(1);\r\n                expect(table.schema.fields[0].typeId).toEqual(arrow.Type.Int);\r\n            });\r\n\r\n            it('Count(*) No BigInt', async () => {\r\n                await adb().open({\r\n                    path: ':memory:',\r\n                    query: {\r\n                        castBigIntToDouble: true,\r\n                    },\r\n                });\r\n                const conn = await adb().connect();\r\n                const table = await conn.query('select 1::BIGINT');\r\n                expect(table.schema.fields.length).toEqual(1);\r\n                expect(table.schema.fields[0].typeId).toEqual(arrow.Type.Float);\r\n            });\r\n        });\r\n\r\n        describe('Prepared Statement', () => {\r\n            it('Materialized', async () => {\r\n                const conn = await adb().connect();\r\n                const stmt = await conn.prepare('SELECT v + ? FROM generate_series(0, 10000) as t(v);');\r\n                const result = await stmt.query(234);\r\n                expect(result.numRows).toBe(10001);\r\n                await stmt.close();\r\n            });\r\n\r\n            it('Streaming', async () => {\r\n                const conn = await adb().connect();\r\n                const stmt = await conn.prepare('SELECT v::INTEGER + ? AS v FROM generate_series(0, 10000) as t(v);');\r\n                const stream = await stmt.send(234);\r\n                let size = 0;\r\n                for await (const batch of stream) {\r\n                    size += batch.numRows;\r\n                }\r\n                expect(size).toBe(10001);\r\n                await conn.close();\r\n            });\r\n            it('Typecheck', async () => {\r\n                const conn = await adb().connect();\r\n                await conn.query(`CREATE TABLE typecheck (\r\n                    a BOOLEAN DEFAULT NULL,\r\n                    b TINYINT DEFAULT NULL,\r\n                    c SMALLINT DEFAULT NULL,\r\n                    d INTEGER DEFAULT NULL,\r\n                    e BIGINT DEFAULT NULL,\r\n                    f FLOAT DEFAULT NULL,\r\n                    g DOUBLE DEFAULT NULL,\r\n                    h CHAR(11) DEFAULT NULL,\r\n                    i VARCHAR(11) DEFAULT NULL\r\n                )`);\r\n\r\n                const stmt = await conn.prepare('INSERT INTO typecheck VALUES(?,?,?,?,?,?,?,?,?)');\r\n\r\n                const expectToThrow = async (fn: () => Promise<void>) => {\r\n                    let throwed = false;\r\n                    try {\r\n                        await fn();\r\n                    } catch (e) {\r\n                        throwed = true;\r\n                    }\r\n                    expect(throwed).toBe(true);\r\n                };\r\n                expectToThrow(async () => {\r\n                    await stmt.query(\r\n                        'test', // varchar for bool\r\n                        100,\r\n                        10_000,\r\n                        1_000_000,\r\n                        5_000_000_000,\r\n                        0.5,\r\n                        Math.PI,\r\n                        'hello world',\r\n                        'hi',\r\n                    );\r\n                });\r\n                expectToThrow(async () => {\r\n                    await stmt.query(\r\n                        true,\r\n                        10_000, // smallint for tinyint\r\n                        10_000,\r\n                        1_000_000,\r\n                        5_000_000_000,\r\n                        0.5,\r\n                        Math.PI,\r\n                        'hello world',\r\n                        'hi',\r\n                    );\r\n                });\r\n                expectToThrow(async () => {\r\n                    await stmt.query(\r\n                        true,\r\n                        100,\r\n                        1_000_000, // int for smallint\r\n                        1_000_000,\r\n                        5_000_000_000,\r\n                        0.5,\r\n                        Math.PI,\r\n                        'hello world',\r\n                        'hi',\r\n                    );\r\n                });\r\n                expectToThrow(async () => {\r\n                    await stmt.query(\r\n                        true,\r\n                        100,\r\n                        10_000,\r\n                        5_000_000_000, // bigint for int\r\n                        5_000_000_000,\r\n                        0.5,\r\n                        Math.PI,\r\n                        'hello world',\r\n                        'hi',\r\n                    );\r\n                });\r\n                await conn.close();\r\n            });\r\n        });\r\n\r\n        describe('AccessMode', () => {\r\n            it('READ_ONLY', async () => {\r\n                await expectAsync(\r\n                    adb().open({\r\n                        accessMode: DuckDBAccessMode.READ_ONLY,\r\n                    }),\r\n                ).toBeRejectedWithError(/Cannot launch in-memory database in read-only mode/);\r\n            });\r\n            it('READ_WRITE', async () => {\r\n                await expectAsync(\r\n                    adb().open({\r\n                        accessMode: DuckDBAccessMode.READ_WRITE,\r\n                    }),\r\n                ).toBeResolved();\r\n            });\r\n        });\r\n\r\n        describe('Cancellation', () => {\r\n            it('hello cancel', async () => {\r\n                // Set query polling interval to 0 to poll 1 task at a time\r\n                await adb().open({\r\n                    path: ':memory:',\r\n                    query: {\r\n                        queryPollingInterval: 0,\r\n                    },\r\n                });\r\n                const conn = await adb().connect();\r\n                const result = await conn.useUnsafe((db, id) =>\r\n                    db.startPendingQuery(id, 'SELECT SUM(i) FROM range(1000000) tbl(i);'),\r\n                );\r\n                expect(result).toBeNull();\r\n                const cancelOK = await conn.useUnsafe((db, id) => db.cancelPendingQuery(id));\r\n                expect(cancelOK).toBeTrue();\r\n                let polledHeader = null;\r\n                let polledError = null;\r\n                try {\r\n                    polledHeader = await conn.useUnsafe((db, id) => db.pollPendingQuery(id));\r\n                } catch (e: any) {\r\n                    polledError = e;\r\n                }\r\n                expect(polledHeader).toBeNull();\r\n                expect(polledError).not.toBeNull();\r\n                expect(polledError.toString()).toEqual('Error: query was canceled');\r\n                const canceledAgain = await conn.useUnsafe((db, id) => db.cancelPendingQuery(id));\r\n                expect(canceledAgain).toBeFalse();\r\n                // Check the connection is destroyed or not when we cancel query\r\n                const table = await conn.query('select 42::integer;');\r\n                expect(table.schema.fields.length).toEqual(1);\r\n            });\r\n\r\n            it('noop cancel', async () => {\r\n                await adb().open({\r\n                    path: ':memory:',\r\n                    query: {\r\n                        queryPollingInterval: 0,\r\n                    },\r\n                });\r\n                const conn = await adb().connect();\r\n                const result = await conn.useUnsafe((db, id) =>\r\n                    db.startPendingQuery(id, 'SELECT SUM(i) FROM range(1000000) tbl(i);'),\r\n                );\r\n                expect(result).toBeNull();\r\n                let polledHeader = null;\r\n                let polledError = null;\r\n                try {\r\n                    // We execute 1 task at a time, so this may take multiple polls\r\n                    while (polledHeader == null) {\r\n                        polledHeader = await conn.useUnsafe((db, id) => db.pollPendingQuery(id));\r\n                    }\r\n                } catch (e: any) {\r\n                    polledError = e;\r\n                }\r\n                expect(polledHeader).not.toBeNull();\r\n                expect(polledError).toBeNull();\r\n                const cancelOK = await conn.useUnsafe((db, id) => db.cancelPendingQuery(id));\r\n                expect(cancelOK).toBeFalse();\r\n                const anotherOne = await conn.useUnsafe((db, id) => db.cancelPendingQuery(id));\r\n                expect(anotherOne).toBeFalse();\r\n            });\r\n        });\r\n    });\r\n}\r\n", "import * as duckdb from '../src/';\r\n\r\nconst testRows = 10000;\r\n\r\nexport function testBatchStream(db: () => duckdb.DuckDBBindings): void {\r\n    let conn: duckdb.DuckDBConnection;\r\n\r\n    beforeEach(() => {\r\n        conn = db().connect();\r\n    });\r\n\r\n    afterEach(() => {\r\n        conn.close();\r\n        db().flushFiles();\r\n        db().dropFiles();\r\n    });\r\n\r\n    describe('Arrow Record-Batches Row-Major', () => {\r\n        describe('single column', () => {\r\n            it('TINYINT', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const row of batch) {\r\n                        expect(row!.v).toBe(i++ & 127);\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('SMALLINT', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const row of batch) {\r\n                        expect(row!.v).toBe(i++ & 32767);\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('INTEGER', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const row of batch) {\r\n                        expect(row!.v).toBe(i++);\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('BIGINT', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const row of batch) {\r\n                        expect(row!.v).toBe(BigInt(i++));\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('STRING', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const row of batch) {\r\n                        expect(row!.v).toBe(String(i++));\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('Arrow Record-Batches Column-Major', () => {\r\n        describe('single column', () => {\r\n            it('TINYINT', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const v of batch.getChildAt(0)!) {\r\n                        expect(v).toBe(i++ & 127);\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('SMALLINT', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const v of batch.getChildAt(0)!) {\r\n                        expect(v).toBe(i++ & 32767);\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('INTEGER', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const v of batch.getChildAt(0)!) {\r\n                        expect(v).toBe(i++);\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('BIGINT', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const v of batch.getChildAt(0)!) {\r\n                        expect(v).toBe(BigInt(i++));\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('STRING', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const v of batch.getChildAt(0)!) {\r\n                        expect(v).toBe(String(i++));\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('Arrow Table Row-Major', () => {\r\n        describe('single column', () => {\r\n            it('TINYINT', () => {\r\n                const table = conn.query(`\r\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const row of table) {\r\n                    expect(row?.v).toBe(i++ & 127);\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('SMALLINT', () => {\r\n                const table = conn.query(`\r\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const row of table) {\r\n                    expect(row?.v).toBe(i++ & 32767);\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('INTEGER', () => {\r\n                const table = conn.query(`\r\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const row of table) {\r\n                    expect(row?.v).toBe(i++);\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('BIGINT', () => {\r\n                const table = conn.query(`\r\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const row of table) {\r\n                    expect(row?.v).toBe(BigInt(i++));\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('STRING', () => {\r\n                const table = conn.query(`\r\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const row of table) {\r\n                    expect(row?.v.valueOf()).toBe(String(i++));\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('Arrow Table Column-Major', () => {\r\n        describe('single column', () => {\r\n            it('TINYINT', () => {\r\n                const table = conn.query(`\r\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const v of table.getChildAt(0)!) {\r\n                    expect(v).toBe(i++ & 127);\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('SMALLINT', () => {\r\n                const table = conn.query(`\r\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const v of table.getChildAt(0)!) {\r\n                    expect(v).toBe(i++ & 32767);\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('INTEGER', () => {\r\n                const table = conn.query(`\r\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const v of table.getChildAt(0)!) {\r\n                    expect(v).toBe(i++);\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('BIGINT', () => {\r\n                const table = conn.query(`\r\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const v of table.getChildAt(0)!) {\r\n                    expect(v).toBe(BigInt(i++));\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('STRING', () => {\r\n                const table = conn.query(`\r\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const v of table.getChildAt(0)!) {\r\n                    expect(v).toBe(String(i++));\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n        });\r\n    });\r\n}\r\n", "import * as duckdb from '../src/';\r\nimport * as arrow from 'apache-arrow';\r\n\r\nconst decoder = new TextDecoder();\r\n\r\nexport function testFilesystem(\r\n    db: () => duckdb.AsyncDuckDB,\r\n    resolveData: (url: string) => Promise<Uint8Array | null>,\r\n    baseDir: string,\r\n    baseDirProto: duckdb.DuckDBDataProtocol,\r\n): void {\r\n    let conn: duckdb.AsyncDuckDBConnection;\r\n\r\n    beforeEach(async () => {\r\n        conn = await db().connect();\r\n    });\r\n\r\n    afterEach(async () => {\r\n        await conn.close();\r\n        await db().flushFiles();\r\n        await db().dropFiles();\r\n    });\r\n\r\n    describe('File buffer registration', () => {\r\n        const test = async () => {\r\n            const result = await conn.send(`SELECT matrnr FROM parquet_scan('studenten.parquet');`);\r\n            const batches = [];\r\n            for await (const batch of result) {\r\n                batches.push(batch);\r\n            }\r\n            const table = await new arrow.Table<{ matrnr: arrow.Int }>(batches);\r\n            expect(table.getChildAt(0)?.toArray()).toEqual(\r\n                new Int32Array([24002, 25403, 26120, 26830, 27550, 28106, 29120, 29555]),\r\n            );\r\n        };\r\n        it('File buffer used once', async () => {\r\n            const students = await resolveData('/uni/studenten.parquet');\r\n            expect(students).not.toBeNull();\r\n            await db().registerFileBuffer('studenten.parquet', students!);\r\n            await test();\r\n        });\r\n        it('File buffer registered twice', async () => {\r\n            const students0 = await resolveData('/uni/studenten.parquet');\r\n            const students1 = await resolveData('/uni/studenten.parquet');\r\n            expect(students0).not.toBeNull();\r\n            expect(students1).not.toBeNull();\r\n            await db().registerFileBuffer('studenten.parquet', students0!);\r\n            await test();\r\n            await db().registerFileBuffer('studenten.parquet', students1!);\r\n            await test();\r\n        });\r\n        it('File buffer used twice', async () => {\r\n            const students = await resolveData('/uni/studenten.parquet');\r\n            expect(students).not.toBeNull();\r\n            await db().registerFileBuffer('studenten.parquet', students!);\r\n            await test();\r\n            await test();\r\n        });\r\n    });\r\n\r\n    describe('Parquet Scans', () => {\r\n        it('single table from buffer', async () => {\r\n            const students = await resolveData('/uni/studenten.parquet');\r\n            expect(students).not.toBeNull();\r\n            await db().registerFileBuffer('studenten.parquet', students!);\r\n            const result = await conn.send(`SELECT matrnr FROM parquet_scan('studenten.parquet');`);\r\n            const batches = [];\r\n            for await (const batch of result) {\r\n                batches.push(batch);\r\n            }\r\n            const table = await new arrow.Table<{ matrnr: arrow.Int }>(batches);\r\n            expect(table.getChildAt(0)?.toArray()).toEqual(\r\n                new Int32Array([24002, 25403, 26120, 26830, 27550, 28106, 29120, 29555]),\r\n            );\r\n        });\r\n\r\n        it('simple join', async () => {\r\n            const students = await resolveData('/uni/studenten.parquet');\r\n            const hoeren = await resolveData('/uni/hoeren.parquet');\r\n            const vorlesungen = await resolveData('/uni/vorlesungen.parquet');\r\n            expect(students).not.toBeNull();\r\n            expect(hoeren).not.toBeNull();\r\n            expect(vorlesungen).not.toBeNull();\r\n            await db().registerFileBuffer('studenten.parquet', students!);\r\n            await db().registerFileBuffer('hoeren.parquet', hoeren!);\r\n            await db().registerFileBuffer('vorlesungen.parquet', vorlesungen!);\r\n\r\n            const result = await conn.send(`\r\n                    SELECT students.matrnr, vorlesungen.titel\r\n                    FROM parquet_scan('studenten.parquet') students\r\n                    INNER JOIN parquet_scan('hoeren.parquet') hoeren ON (students.matrnr = hoeren.matrnr)\r\n                    INNER JOIN parquet_scan('vorlesungen.parquet') vorlesungen ON (vorlesungen.vorlnr = hoeren.vorlnr);\r\n                `);\r\n            const batches = [];\r\n            for await (const batch of result) {\r\n                batches.push(batch);\r\n            }\r\n            const table = await new arrow.Table<{ matrnr: arrow.Int; titel: arrow.Utf8 }>(batches);\r\n            expect(table.numCols).toBe(2);\r\n            const flat = [];\r\n            for (const row of table) {\r\n                flat.push({\r\n                    matrnr: row?.matrnr,\r\n                    titel: row?.titel?.toString(),\r\n                });\r\n            }\r\n            expect(flat).toEqual([\r\n                { matrnr: 26120, titel: 'Grundz\u00FCge' },\r\n                { matrnr: 27550, titel: 'Grundz\u00FCge' },\r\n                { matrnr: 27550, titel: 'Logik' },\r\n                { matrnr: 28106, titel: 'Ethik' },\r\n                { matrnr: 28106, titel: 'Wissenschaftstheorie' },\r\n                { matrnr: 28106, titel: 'Bioethik' },\r\n                { matrnr: 28106, titel: 'Der Wiener Kreis' },\r\n                { matrnr: 29120, titel: 'Grundz\u00FCge' },\r\n                { matrnr: 29120, titel: 'Ethik' },\r\n                { matrnr: 29120, titel: 'M\u00E4eutik' },\r\n                { matrnr: 29555, titel: 'Glaube und Wissen' },\r\n                { matrnr: 25403, titel: 'Glaube und Wissen' },\r\n            ]);\r\n        });\r\n    });\r\n\r\n    describe('Writing', () => {\r\n        it('Copy To CSV Buffer', async () => {\r\n            const students = await resolveData('/uni/studenten.parquet');\r\n            expect(students).not.toBeNull();\r\n            await db().registerFileBuffer('studenten.parquet', students!);\r\n            await db().registerEmptyFileBuffer('students.csv');\r\n            await conn.query(`CREATE TABLE students AS SELECT * FROM parquet_scan('studenten.parquet');`);\r\n            await conn.query(`COPY students TO 'students.csv' WITH (HEADER 1, DELIMITER ';', FORMAT CSV);`);\r\n            await conn.query(`DROP TABLE IF EXISTS students`);\r\n            const outBuffer = await db().copyFileToBuffer('students.csv');\r\n            expect(outBuffer).not.toBeNull();\r\n            const text = decoder.decode(outBuffer!);\r\n            expect(text).toBe(`matrnr;name;semester\r\n24002;Xenokrates;18\r\n25403;Jonas;12\r\n26120;Fichte;10\r\n26830;Aristoxenos;8\r\n27550;Schopenhauer;6\r\n28106;Carnap;3\r\n29120;Theophrastos;2\r\n29555;Feuerbach;2\r\n`);\r\n        });\r\n\r\n        it('Copy To Parquet', async () => {\r\n            const students = await resolveData('/uni/studenten.parquet');\r\n            expect(students).not.toBeNull();\r\n            await db().registerFileBuffer('studenten.parquet', students!);\r\n            await db().registerEmptyFileBuffer('students2.parquet');\r\n            await conn.query(`CREATE TABLE students2 AS SELECT * FROM parquet_scan('studenten.parquet');`);\r\n            await conn.query(`COPY students2 TO 'students2.parquet' (FORMAT PARQUET);`);\r\n            const url = await db().copyFileToBuffer('students2.parquet');\r\n            expect(url).not.toBeNull();\r\n        });\r\n\r\n        it('Copy To Parquet And Load Again', async () => {\r\n            const students = await resolveData('/uni/studenten.parquet');\r\n            expect(students).not.toBeNull();\r\n            await db().registerFileBuffer('studenten.parquet', students!);\r\n            await db().registerEmptyFileBuffer('students3.parquet');\r\n            await conn.query(`CREATE TABLE students3 AS SELECT * FROM parquet_scan('studenten.parquet');`);\r\n            await conn.query(`COPY students3 TO 'students3.parquet' (FORMAT PARQUET);`);\r\n            const url = await db().copyFileToBuffer('students3.parquet');\r\n            expect(url).not.toBeNull();\r\n            await conn.query(`CREATE TABLE students4 AS SELECT * FROM parquet_scan('students3.parquet');`);\r\n            const result = await conn.send(`SELECT matrnr FROM students4;`);\r\n            const batches = [];\r\n            for await (const batch of result) {\r\n                batches.push(batch);\r\n            }\r\n            const table = await new arrow.Table<{ matrnr: arrow.Int }>(batches);\r\n            expect(table.getChildAt(0)?.toArray()).toEqual(\r\n                new Int32Array([24002, 25403, 26120, 26830, 27550, 28106, 29120, 29555]),\r\n            );\r\n        });\r\n    });\r\n\r\n    describe('File access', () => {\r\n        it('Small Parquet file', async () => {\r\n            await db().registerFileURL('studenten.parquet', `${baseDir}/uni/studenten.parquet`, baseDirProto, true);\r\n            const result = await conn.send(`SELECT matrnr FROM parquet_scan('studenten.parquet');`);\r\n            const batches = [];\r\n            for await (const batch of result) {\r\n                batches.push(batch);\r\n            }\r\n            const table = await new arrow.Table<{ matrnr: arrow.Int }>(batches);\r\n            expect(table.getChildAt(0)?.toArray()).toEqual(\r\n                new Int32Array([24002, 25403, 26120, 26830, 27550, 28106, 29120, 29555]),\r\n            );\r\n        });\r\n\r\n        it('Large Parquet file', async () => {\r\n            await db().registerFileURL(\r\n                'lineitem.parquet',\r\n                `${baseDir}/tpch/0_01/parquet/lineitem.parquet`,\r\n                baseDirProto,\r\n                true,\r\n            );\r\n            const result = await conn.send(`SELECT count(*)::INTEGER as cnt FROM parquet_scan('lineitem.parquet');`);\r\n            const batches = [];\r\n            for await (const batch of result) {\r\n                batches.push(batch);\r\n            }\r\n            const table = await new arrow.Table<{ cnt: arrow.Int }>(batches);\r\n            expect(table.getChildAt(0)?.get(0)).toBeGreaterThan(60_000);\r\n        });\r\n    });\r\n\r\n    describe('Export', () => {\r\n        it('Generate Series as CSV', async () => {\r\n            await conn.query('CREATE TABLE foo AS SELECT * FROM generate_series(1, 5) t(v)');\r\n            await conn.query(`EXPORT DATABASE '/tmp/duckdbexportcsv'`);\r\n\r\n            const results = await db().globFiles('/tmp/duckdbexportcsv/*');\r\n            expect(results).not.toEqual([]);\r\n            expect(results.length).toEqual(3);\r\n            const filenames = results.map(file => file.fileName).sort();\r\n            expect(filenames).toEqual([\r\n                '/tmp/duckdbexportcsv/foo.csv',\r\n                '/tmp/duckdbexportcsv/load.sql',\r\n                '/tmp/duckdbexportcsv/schema.sql',\r\n            ]);\r\n\r\n            const csv_buffer_utf8 = await db().copyFileToBuffer('/tmp/duckdbexportcsv/foo.csv');\r\n            const load_script_utf8 = await db().copyFileToBuffer('/tmp/duckdbexportcsv/load.sql');\r\n            const schema_script_utf8 = await db().copyFileToBuffer('/tmp/duckdbexportcsv/schema.sql');\r\n            expect(load_script_utf8.length).not.toEqual(0);\r\n            expect(schema_script_utf8.length).not.toEqual(0);\r\n            expect(csv_buffer_utf8.length).not.toEqual(0);\r\n\r\n            const load_script = decoder.decode(load_script_utf8);\r\n            const schema_script = decoder.decode(schema_script_utf8);\r\n            const csv_buffer = decoder.decode(csv_buffer_utf8);\r\n            expect(load_script.trim()).toEqual(\r\n                `COPY foo FROM '/tmp/duckdbexportcsv/foo.csv' (FORMAT 'csv', quote '\"', delimiter ',', header 0);`,\r\n            );\r\n            expect(schema_script.trim()).toEqual(`CREATE TABLE foo(v BIGINT);`);\r\n            expect(csv_buffer.trim()).toEqual(`1\\n2\\n3\\n4\\n5`);\r\n        });\r\n\r\n        it('Generate Series as Parquet', async () => {\r\n            await conn.query('CREATE TABLE foo AS SELECT * FROM generate_series(1, 5) t(v)');\r\n            await conn.query(`EXPORT DATABASE '/tmp/duckdbexportparquet' (FORMAT PARQUET)`);\r\n\r\n            const results = await db().globFiles('/tmp/duckdbexportparquet/*');\r\n            expect(results).not.toEqual([]);\r\n            expect(results.length).toEqual(3);\r\n            const filenames = results.map(file => file.fileName).sort();\r\n            expect(filenames).toEqual([\r\n                '/tmp/duckdbexportparquet/foo.parquet',\r\n                '/tmp/duckdbexportparquet/load.sql',\r\n                '/tmp/duckdbexportparquet/schema.sql',\r\n            ]);\r\n\r\n            const parquet_buffer = await db().copyFileToBuffer('/tmp/duckdbexportparquet/foo.parquet');\r\n            const load_script_utf8 = await db().copyFileToBuffer('/tmp/duckdbexportparquet/load.sql');\r\n            const schema_script_utf8 = await db().copyFileToBuffer('/tmp/duckdbexportparquet/schema.sql');\r\n            expect(load_script_utf8.length).not.toEqual(0);\r\n            expect(schema_script_utf8.length).not.toEqual(0);\r\n            expect(parquet_buffer.length).not.toEqual(0);\r\n\r\n            const content = await conn.query(\r\n                `SELECT v::integer FROM parquet_scan('/tmp/duckdbexportparquet/foo.parquet')`,\r\n            );\r\n            expect(content.nullCount).toEqual(0);\r\n            expect(content.numRows).toEqual(5);\r\n            expect(content.getChildAt(0)?.toArray()).toEqual(new Int32Array([1, 2, 3, 4, 5]));\r\n        });\r\n    });\r\n\r\n    describe('Copy', () => {\r\n        it('Generate Series as Parquet', async () => {\r\n            await conn.query(\r\n                `COPY (SELECT * FROM generate_series(1, 5) t(v)) TO '/tmp/duckdbcopytest.parquet' (FORMAT 'parquet')`,\r\n            );\r\n            const results = await db().globFiles('/tmp/duckdbcopytest*');\r\n            expect(results).not.toEqual([]);\r\n            expect(results.length).toEqual(1);\r\n            const filenames = results.map(file => file.fileName).sort();\r\n            expect(filenames).toEqual(['/tmp/duckdbcopytest.parquet']);\r\n            const parquet_buffer = await db().copyFileToBuffer('/tmp/duckdbcopytest.parquet');\r\n            expect(parquet_buffer.length).not.toEqual(0);\r\n            const content = await conn.query(`SELECT v::integer FROM parquet_scan('/tmp/duckdbcopytest.parquet')`);\r\n            expect(content.numRows).toEqual(5);\r\n            expect(content.getChildAt(0)?.toArray()).toEqual(new Int32Array([1, 2, 3, 4, 5]));\r\n        });\r\n    });\r\n}\r\n", "import * as duckdb from '../src/';\r\n\r\nconst testRows = 10000;\r\n\r\nexport function testAsyncBatchStream(db: () => duckdb.AsyncDuckDB): void {\r\n    let conn: duckdb.AsyncDuckDBConnection;\r\n\r\n    beforeEach(async () => {\r\n        conn = await db().connect();\r\n    });\r\n\r\n    afterEach(async () => {\r\n        await conn.close();\r\n        await db().flushFiles();\r\n        await db().dropFiles();\r\n    });\r\n\r\n    describe('AsyncDuckDB', () => {\r\n        it('ping', async () => {\r\n            await db().ping();\r\n        });\r\n    });\r\n\r\n    describe('Arrow Record-Batches Row-Major', () => {\r\n        describe('single column', () => {\r\n            it('TINYINT', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for await (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const row of batch) {\r\n                        expect(row!.v).toBe(i++ & 127);\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('SMALLINT', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for await (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const v of batch.getChildAt(0)!) {\r\n                        expect(v).toBe(i++ & 32767);\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('INTEGER', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for await (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const v of batch.getChildAt(0)!) {\r\n                        expect(v).toBe(i++);\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('BIGINT', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for await (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const v of batch.getChildAt(0)!) {\r\n                        expect(v).toBe(BigInt(i++));\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('STRING', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for await (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const v of batch.getChildAt(0)!) {\r\n                        expect(v).toBe(String(i++));\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n        });\r\n\r\n        describe('scripts', () => {\r\n            it('test1', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT v::INTEGER AS x, (sin(v) * 100 + 100)::INTEGER AS y FROM generate_series(0, ${testRows}) as t(v)\r\n                `);\r\n                let i = 0;\r\n                for await (const batch of result) {\r\n                    expect(batch.numCols).toBe(2);\r\n                    for (const row of batch) {\r\n                        expect(row!.x).toBe(i++);\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('Arrow Record-Batches Column-Major', () => {\r\n        describe('single column', () => {\r\n            it('TINYINT', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for await (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const v of batch.getChildAt(0)!) {\r\n                        expect(v).toBe(i++ & 127);\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('SMALLINT', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for await (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const v of batch.getChildAt(0)!) {\r\n                        expect(v).toBe(i++ & 32767);\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('INTEGER', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for await (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const v of batch.getChildAt(0)!) {\r\n                        expect(v).toBe(i++);\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('BIGINT', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for await (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const v of batch.getChildAt(0)!) {\r\n                        expect(v).toBe(BigInt(i++));\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('STRING', async () => {\r\n                const result = await conn.send(`\r\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for await (const batch of result) {\r\n                    expect(batch.numCols).toBe(1);\r\n                    for (const v of batch.getChildAt(0)!) {\r\n                        expect(v).toBe(String(i++));\r\n                    }\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('Arrow Table Row-Major', () => {\r\n        describe('single column', () => {\r\n            it('TINYINT', async () => {\r\n                const table = await conn.query(`\r\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const row of table) {\r\n                    expect(row?.v).toBe(i++ & 127);\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('SMALLINT', async () => {\r\n                const table = await conn.query(`\r\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const row of table) {\r\n                    expect(row?.v).toBe(i++ & 32767);\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('INTEGER', async () => {\r\n                const table = await conn.query(`\r\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const row of table) {\r\n                    expect(row?.v).toBe(i++);\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('BIGINT', async () => {\r\n                const table = await conn.query(`\r\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const row of table) {\r\n                    expect(row?.v).toBe(BigInt(i++));\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('STRING', async () => {\r\n                const table = await conn.query(`\r\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const row of table) {\r\n                    expect(row?.v.valueOf()).toBe(String(i++));\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n        });\r\n    });\r\n\r\n    describe('Arrow Table Column-Major', () => {\r\n        describe('single column', () => {\r\n            it('TINYINT', async () => {\r\n                const table = await conn.query(`\r\n                    SELECT (v & 127)::TINYINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const v of table.getChildAt(0)!) {\r\n                    expect(v).toBe(i++ & 127);\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('SMALLINT', async () => {\r\n                const table = await conn.query(`\r\n                    SELECT (v & 32767)::SMALLINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const v of table.getChildAt(0)!) {\r\n                    expect(v).toBe(i++ & 32767);\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('INTEGER', async () => {\r\n                const table = await conn.query(`\r\n                    SELECT v::INTEGER AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const v of table.getChildAt(0)!) {\r\n                    expect(v).toBe(i++);\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('BIGINT', async () => {\r\n                const table = await conn.query(`\r\n                    SELECT v::BIGINT AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const v of table.getChildAt(0)!) {\r\n                    expect(v).toBe(BigInt(i++));\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n\r\n            it('STRING', async () => {\r\n                const table = await conn.query(`\r\n                    SELECT v::VARCHAR AS v FROM generate_series(0, ${testRows}) as t(v);\r\n                `);\r\n                let i = 0;\r\n                for (const v of table.getChildAt(0)!) {\r\n                    expect(v).toBe(String(i++));\r\n                }\r\n                expect(i).toBe(testRows + 1);\r\n            });\r\n        });\r\n    });\r\n}\r\n", "import * as arrow from 'apache-arrow';\r\nimport * as duckdb from '../src/';\r\nimport { Column, compareTable } from './table_test';\r\n\r\n/// Unfortunately, arrow.Table.from does not build a proper Schema.\r\n/// When it does, we might want to switch back to arrow.Table here instead\r\n/// of arrow Schema + ArrowBatch.\r\ninterface ArrowInsertTest {\r\n    name: string;\r\n    schema: arrow.Schema;\r\n    batches: ArrowBatch[];\r\n    options: duckdb.ArrowInsertOptions;\r\n    query: string;\r\n    expectedColumns: Column[];\r\n}\r\n\r\ninterface ArrowBatch {\r\n    numRows: number;\r\n    columns: arrow.Data[];\r\n}\r\n\r\nconst buildUtf8Array = (values: string[]) => {\r\n    const builder = new arrow.Utf8Builder({\r\n        type: new arrow.Utf8(),\r\n    });\r\n    for (const v of values) {\r\n        builder.append(v);\r\n    }\r\n    builder.finish();\r\n    return builder.flush();\r\n};\r\n\r\nexport function generateXInt32(n: number, cols: number): number[][] {\r\n    const columns = [];\r\n    for (let j = 0; j < cols; ++j) {\r\n        const column = [];\r\n        for (let i = 0; i < n; ++i) {\r\n            column.push(i);\r\n        }\r\n        columns.push(column);\r\n    }\r\n    return columns;\r\n}\r\n\r\nexport function generateArrowXInt32(n: number, cols: number): [arrow.Schema, arrow.RecordBatch[]] {\r\n    const columns = generateXInt32(n, cols);\r\n    const fields = [];\r\n    for (let j = 0; j < cols; ++j) {\r\n        fields.push(new arrow.Field(`v${j}`, new arrow.Int32()));\r\n    }\r\n    const schema = new arrow.Schema(fields);\r\n    const batches = [];\r\n    for (let i = 0; i < n; ) {\r\n        const rows = Math.min(1000, n - i);\r\n        const data = arrow.makeData({\r\n            type: new arrow.Struct(fields),\r\n            children: columns.map(c =>\r\n                arrow.makeData({\r\n                    type: new arrow.Int32(),\r\n                    data: new Int32Array(c.slice(i, i + rows)),\r\n                }),\r\n            ),\r\n        });\r\n        batches.push(new arrow.RecordBatch(schema, data));\r\n        i += rows;\r\n    }\r\n    return [schema, batches];\r\n}\r\n\r\nconst ARROW_INSERT_TESTS: ArrowInsertTest[] = [\r\n    {\r\n        name: 'integers_1',\r\n        schema: new arrow.Schema([\r\n            new arrow.Field('a', new arrow.Int32()),\r\n            new arrow.Field('b', new arrow.Int32()),\r\n            new arrow.Field('c', new arrow.Int32()),\r\n        ]),\r\n        batches: [\r\n            {\r\n                numRows: 3,\r\n                columns: [\r\n                    arrow.makeData({ type: new arrow.Int32(), data: new Int32Array([1, 4, 7]) }),\r\n                    arrow.makeData({ type: new arrow.Int32(), data: new Int32Array([2, 5, 8]) }),\r\n                    arrow.makeData({ type: new arrow.Int32(), data: new Int32Array([3, 6, 9]) }),\r\n                ],\r\n            },\r\n        ],\r\n        options: {\r\n            schema: 'main',\r\n            name: 'foo',\r\n        },\r\n        query: 'SELECT * FROM main.foo',\r\n        expectedColumns: [\r\n            { name: 'a', values: [1, 4, 7] },\r\n            { name: 'b', values: [2, 5, 8] },\r\n            { name: 'c', values: [3, 6, 9] },\r\n        ],\r\n    },\r\n    {\r\n        name: 'combined_1',\r\n        schema: new arrow.Schema([\r\n            new arrow.Field('a', new arrow.Int32()),\r\n            new arrow.Field('b', new arrow.Int16()),\r\n            new arrow.Field('c', new arrow.Utf8()),\r\n        ]),\r\n        batches: [\r\n            {\r\n                numRows: 3,\r\n                columns: [\r\n                    arrow.makeData({ type: new arrow.Int32(), data: new Int32Array([1, 4, 7]) }),\r\n                    arrow.makeData({ type: new arrow.Int16(), data: new Int16Array([2, 5, 8]) }),\r\n                    buildUtf8Array(['3', '6', '9']),\r\n                ],\r\n            },\r\n        ],\r\n        options: {\r\n            schema: 'main',\r\n            name: 'foo',\r\n        },\r\n        query: 'SELECT * FROM main.foo',\r\n        expectedColumns: [\r\n            { name: 'a', values: [1, 4, 7] },\r\n            { name: 'b', values: [2, 5, 8] },\r\n            { name: 'c', values: ['3', '6', '9'] },\r\n        ],\r\n    },\r\n    {\r\n        name: 'combined_2',\r\n        schema: new arrow.Schema([\r\n            new arrow.Field('a', new arrow.Int32()),\r\n            new arrow.Field('b', new arrow.Int16()),\r\n            new arrow.Field('c', new arrow.Utf8()),\r\n        ]),\r\n        batches: [\r\n            {\r\n                numRows: 3,\r\n                columns: [\r\n                    arrow.makeData({ type: new arrow.Int32(), data: new Int32Array([1, 4, 7]) }),\r\n                    arrow.makeData({ type: new arrow.Int16(), data: new Int16Array([2, 5, 8]) }),\r\n                    buildUtf8Array(['3', '6', '9']),\r\n                ],\r\n            },\r\n            {\r\n                numRows: 2,\r\n                columns: [\r\n                    arrow.makeData({ type: new arrow.Int32(), data: new Int32Array([10, 13]) }),\r\n                    arrow.makeData({ type: new arrow.Int16(), data: new Int16Array([11, 14]) }),\r\n                    buildUtf8Array(['12', '15']),\r\n                ],\r\n            },\r\n        ],\r\n        options: {\r\n            schema: 'main',\r\n            name: 'foo',\r\n        },\r\n        query: 'SELECT * FROM main.foo',\r\n        expectedColumns: [\r\n            { name: 'a', values: [1, 4, 7, 10, 13] },\r\n            { name: 'b', values: [2, 5, 8, 11, 14] },\r\n            { name: 'c', values: ['3', '6', '9', '12', '15'] },\r\n        ],\r\n    },\r\n];\r\n\r\nexport function testArrowInsert(db: () => duckdb.DuckDBBindings): void {\r\n    let conn: duckdb.DuckDBConnection;\r\n\r\n    beforeEach(async () => {\r\n        db().flushFiles();\r\n        conn = db().connect();\r\n    });\r\n    afterEach(async () => {\r\n        conn.close();\r\n        await db().flushFiles();\r\n        await db().dropFiles();\r\n    });\r\n    describe('Arrow insert from iterable', () => {\r\n        for (const test of ARROW_INSERT_TESTS) {\r\n            it(test.name, () => {\r\n                conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\r\n                const batches = test.batches.map(b => {\r\n                    const data = arrow.makeData({\r\n                        type: new arrow.Struct(test.schema.fields),\r\n                        children: b.columns,\r\n                    });\r\n                    return new arrow.RecordBatch(test.schema, data);\r\n                });\r\n                const table = new arrow.Table(test.schema, batches);\r\n                conn.insertArrowTable(table, test.options);\r\n                const results = conn.query(test.query);\r\n                compareTable(results, test.expectedColumns);\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function testArrowInsertAsync(db: () => duckdb.AsyncDuckDB): void {\r\n    let conn: duckdb.AsyncDuckDBConnection;\r\n\r\n    beforeEach(async () => {\r\n        await db().flushFiles();\r\n        conn = await db().connect();\r\n    });\r\n    afterEach(async () => {\r\n        await conn.close();\r\n        await db().flushFiles();\r\n        await db().dropFiles();\r\n    });\r\n    describe('Arrow async insert from iterable', () => {\r\n        for (const test of ARROW_INSERT_TESTS) {\r\n            it(test.name, async () => {\r\n                await conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\r\n                const batches = test.batches.map(b => {\r\n                    const data = arrow.makeData({\r\n                        type: new arrow.Struct(test.schema.fields),\r\n                        children: b.columns,\r\n                    });\r\n                    return new arrow.RecordBatch(test.schema, data);\r\n                });\r\n                const table = new arrow.Table(test.schema, batches);\r\n                await conn.insertArrowTable(table, test.options);\r\n                const results = await conn.query(test.query);\r\n                compareTable(results, test.expectedColumns);\r\n            });\r\n        }\r\n    });\r\n    describe('Arrow async insert from table', () => {\r\n        it('simple integers', async () => {\r\n            await conn.query(`DROP TABLE IF EXISTS insert_from_table`);\r\n            const table = new arrow.Table({\r\n                a: arrow.makeVector(new Int32Array([1, 4, 7])),\r\n                b: arrow.makeVector(new Int32Array([2, 5, 8])),\r\n                c: arrow.vectorFromArray<arrow.Utf8>(['3', '6', '9']),\r\n            });\r\n            await conn.insertArrowTable(table, {\r\n                name: 'insert_from_vectors',\r\n            });\r\n            const results = await conn.query('select * from insert_from_vectors');\r\n            compareTable(results, [\r\n                { name: 'a', values: [1, 4, 7] },\r\n                { name: 'b', values: [2, 5, 8] },\r\n                { name: 'c', values: ['3', '6', '9'] },\r\n            ]);\r\n        });\r\n    });\r\n}\r\n", "import * as arrow from 'apache-arrow';\r\n\r\nexport interface Column {\r\n    name: string;\r\n    values: any[];\r\n}\r\n\r\nexport function compareTable(table: arrow.Table, expected: Column[]): void {\r\n    // Check column count\r\n    const colCount = expected.length;\r\n    expect(table.numCols).toEqual(colCount);\r\n    if (colCount == 0) return;\r\n\r\n    // Check columns\r\n    const rowCount = expected[0].values.length;\r\n    for (let i = 0; i < colCount; ++i) {\r\n        expect(expected[i].values.length).toEqual(rowCount);\r\n        expect(table.getChildAt(i)?.length).toEqual(rowCount);\r\n        expect(table.schema.fields[i]?.name).toEqual(expected[i].name);\r\n    }\r\n\r\n    // Compare the actual values\r\n    for (let i = 0; i < colCount; ++i) {\r\n        const col = table.getChildAt(i)!;\r\n        const have = [];\r\n        for (let j = 0; j < rowCount; ++j) {\r\n            have.push(col.get(j));\r\n        }\r\n        expect(Number(have)).toEqual(Number(expected[i].values));\r\n    }\r\n}\r\n", "import * as arrow from 'apache-arrow';\r\nimport * as duckdb from '../src/';\r\nimport { DuckDBDataProtocol } from '../src/';\r\nimport { Column, compareTable } from './table_test';\r\n\r\nfunction describeBrowser(description: string, specDefinitions: () => void): void {\r\n    if (typeof window !== 'undefined') {\r\n        describe(description, specDefinitions);\r\n    }\r\n}\r\n\r\nconst encoder = new TextEncoder();\r\n\r\ninterface JSONInsertTest {\r\n    name: string;\r\n    input: string;\r\n    options: duckdb.JSONInsertOptions;\r\n    query: string;\r\n    expectedColumns: Column[];\r\n}\r\n\r\nconst JSON_INSERT_TESTS: JSONInsertTest[] = [\r\n    {\r\n        name: 'rows_integers',\r\n        input: `[\r\n            {\"a\":1, \"b\":2, \"c\":3},\r\n            {\"a\":4, \"b\":5, \"c\":6},\r\n            {\"a\":7, \"b\":8, \"c\":9},\r\n        ]`,\r\n        options: {\r\n            schema: 'main',\r\n            name: 'foo',\r\n        },\r\n        query: 'SELECT * FROM main.foo',\r\n        expectedColumns: [\r\n            { name: 'a', values: [1, 4, 7] },\r\n            { name: 'b', values: [2, 5, 8] },\r\n            { name: 'c', values: [3, 6, 9] },\r\n        ],\r\n    },\r\n    {\r\n        name: 'cols_integers',\r\n        input: `{\r\n            \"a\": [1, 4, 7],\r\n            \"b\": [2, 5, 8],\r\n            \"c\": [3, 6, 9]\r\n        }`,\r\n        options: {\r\n            schema: 'main',\r\n            name: 'foo',\r\n        },\r\n        query: 'SELECT * FROM main.foo',\r\n        expectedColumns: [\r\n            { name: 'a', values: [1, 4, 7] },\r\n            { name: 'b', values: [2, 5, 8] },\r\n            { name: 'c', values: [3, 6, 9] },\r\n        ],\r\n    },\r\n    {\r\n        name: 'options_1',\r\n        input: `[\r\n            {\"a\":1, \"b\":2, \"c\":3},\r\n            {\"a\":4, \"b\":5, \"c\":6},\r\n            {\"a\":7, \"b\":8, \"c\":9},\r\n        ]`,\r\n        options: {\r\n            schema: 'main',\r\n            name: 'foo',\r\n            shape: duckdb.JSONTableShape.ROW_ARRAY,\r\n            columns: {\r\n                a: new arrow.Int16(),\r\n                b: new arrow.Int32(),\r\n                c: new arrow.Utf8(),\r\n            },\r\n        },\r\n        query: 'SELECT * FROM main.foo',\r\n        expectedColumns: [\r\n            { name: 'a', values: [1, 4, 7] },\r\n            { name: 'b', values: [2, 5, 8] },\r\n            { name: 'c', values: ['3', '6', '9'] },\r\n        ],\r\n    },\r\n];\r\n\r\nconst TEST_FILE = 'TEST';\r\n\r\nexport function testJSONInsert(db: () => duckdb.DuckDBBindings): void {\r\n    let conn: duckdb.DuckDBConnection;\r\n\r\n    beforeEach(async () => {\r\n        db().flushFiles();\r\n        conn = db().connect();\r\n    });\r\n    afterEach(async () => {\r\n        conn.close();\r\n        await db().flushFiles();\r\n        await db().dropFiles();\r\n    });\r\n    describe('JSON Insert Sync', () => {\r\n        for (const test of JSON_INSERT_TESTS) {\r\n            it(test.name, () => {\r\n                conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\r\n                const buffer = encoder.encode(test.input);\r\n                db().registerFileBuffer(TEST_FILE, buffer);\r\n                conn.insertJSONFromPath(TEST_FILE, test.options);\r\n                const results = conn.query(test.query);\r\n                compareTable(results, test.expectedColumns);\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function testJSONInsertAsync(db: () => duckdb.AsyncDuckDB): void {\r\n    let conn: duckdb.AsyncDuckDBConnection;\r\n\r\n    beforeEach(async () => {\r\n        await db().flushFiles();\r\n        conn = await db().connect();\r\n    });\r\n    afterEach(async () => {\r\n        await conn.close();\r\n        await db().flushFiles();\r\n        await db().dropFiles();\r\n    });\r\n    describe('JSON Insert Buffer Async', () => {\r\n        for (const test of JSON_INSERT_TESTS) {\r\n            it(test.name, async () => {\r\n                await conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\r\n                const buffer = encoder.encode(test.input);\r\n                await db().registerFileBuffer(TEST_FILE, buffer);\r\n                await conn.insertJSONFromPath(TEST_FILE, test.options);\r\n                const results = await conn.query(test.query);\r\n                compareTable(results, test.expectedColumns);\r\n            });\r\n        }\r\n    });\r\n\r\n    describeBrowser('JSON Insert Blob Async', () => {\r\n        for (const test of JSON_INSERT_TESTS) {\r\n            it(test.name, async () => {\r\n                await conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\r\n                const buffer = encoder.encode(test.input);\r\n                const blob = new Blob([buffer]);\r\n                await db().registerFileHandle(TEST_FILE, blob, DuckDBDataProtocol.BROWSER_FILEREADER, false);\r\n                await conn.insertJSONFromPath(TEST_FILE, test.options);\r\n                const results = await conn.query(test.query);\r\n                compareTable(results, test.expectedColumns);\r\n            });\r\n        }\r\n    });\r\n}\r\n", "import * as arrow from 'apache-arrow';\r\nimport * as duckdb from '../src/';\r\nimport { DuckDBDataProtocol } from '../src/';\r\nimport { Column, compareTable } from './table_test';\r\n\r\nfunction describeBrowser(description: string, specDefinitions: () => void): void {\r\n    if (typeof window !== 'undefined') {\r\n        describe(description, specDefinitions);\r\n    }\r\n}\r\n\r\nconst encoder = new TextEncoder();\r\n\r\ninterface CSVInsertTest {\r\n    name: string;\r\n    input: string;\r\n    options: duckdb.CSVInsertOptions;\r\n    query: string;\r\n    expectedColumns: Column[];\r\n}\r\n\r\nconst CSV_INSERT_TESTS: CSVInsertTest[] = [\r\n    {\r\n        name: 'integers_auto_1',\r\n        input: `\"a\",\"b\",\"c\"\r\n1,2,3\r\n4,5,6\r\n7,8,9\r\n`,\r\n        options: {\r\n            schema: 'main',\r\n            name: 'foo',\r\n        },\r\n        query: 'SELECT * FROM main.foo',\r\n        expectedColumns: [\r\n            { name: 'a', values: [1, 4, 7] },\r\n            { name: 'b', values: [2, 5, 8] },\r\n            { name: 'c', values: [3, 6, 9] },\r\n        ],\r\n    },\r\n    {\r\n        name: 'integers_auto_2',\r\n        input: `a,b,c\r\n1,2,3\r\n4,5,6\r\n7,8,9\r\n`,\r\n        options: {\r\n            schema: 'main',\r\n            name: 'foo',\r\n        },\r\n        query: 'SELECT * FROM main.foo',\r\n        expectedColumns: [\r\n            { name: 'a', values: [1, 4, 7] },\r\n            { name: 'b', values: [2, 5, 8] },\r\n            { name: 'c', values: [3, 6, 9] },\r\n        ],\r\n    },\r\n    {\r\n        name: 'integers_auto_3',\r\n        input: `a,b,c`,\r\n        options: {\r\n            schema: 'main',\r\n            name: 'foo',\r\n        },\r\n        query: 'SELECT * FROM main.foo',\r\n        expectedColumns: [\r\n            { name: 'column0', values: ['a'] },\r\n            { name: 'column1', values: ['b'] },\r\n            { name: 'column2', values: ['c'] },\r\n        ],\r\n    },\r\n    {\r\n        name: 'integers_auto_2',\r\n        input: `a\r\n1\r\n4\r\n7\r\n`,\r\n        options: {\r\n            schema: 'main',\r\n            name: 'foo',\r\n        },\r\n        query: 'SELECT * FROM main.foo',\r\n        expectedColumns: [{ name: 'a', values: [1, 4, 7] }],\r\n    },\r\n    {\r\n        name: 'options_1',\r\n        input: `1,2,3\r\n4,5,6\r\n7,8,9\r\n`,\r\n        options: {\r\n            schema: 'main',\r\n            name: 'foo2',\r\n            header: false,\r\n            detect: false,\r\n            columns: {\r\n                a: new arrow.Int16(),\r\n                b: new arrow.Int32(),\r\n                c: new arrow.Utf8(),\r\n            },\r\n        },\r\n        query: 'SELECT * FROM main.foo2',\r\n        expectedColumns: [\r\n            { name: 'a', values: [1, 4, 7] },\r\n            { name: 'b', values: [2, 5, 8] },\r\n            { name: 'c', values: ['3', '6', '9'] },\r\n        ],\r\n    },\r\n    {\r\n        name: 'options_2',\r\n        input: `1|2|01/02/2020\r\n4|5|01/03/2020\r\n7|8|01/04/2020\r\n`,\r\n        options: {\r\n            schema: 'main',\r\n            name: 'foo',\r\n            detect: false,\r\n            header: false,\r\n            delimiter: '|',\r\n            dateFormat: '%m/%d/%Y',\r\n            columns: {\r\n                a: new arrow.Int16(),\r\n                b: new arrow.Int32(),\r\n                c: new arrow.DateDay(),\r\n            },\r\n        },\r\n        query: 'SELECT * FROM main.foo',\r\n        expectedColumns: [\r\n            { name: 'a', values: [1, 4, 7] },\r\n            { name: 'b', values: [2, 5, 8] },\r\n            {\r\n                name: 'c',\r\n                values: [\r\n                    new Date(Date.UTC(2020, 0, 2)),\r\n                    new Date(Date.UTC(2020, 0, 3)),\r\n                    new Date(Date.UTC(2020, 0, 4)),\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        name: 'options_3',\r\n        input: `1|2|20:32:45 1992-03-02\r\n4|5|20:32:50 1992-03-02\r\n7|8|20:32:55 1992-03-02\r\n`,\r\n        options: {\r\n            schema: 'main',\r\n            name: 'foo',\r\n            detect: false,\r\n            header: false,\r\n            delimiter: '|',\r\n            quote: \"'\",\r\n            timestampFormat: '%H:%M:%S %Y-%m-%d',\r\n            columns: {\r\n                a: new arrow.Int16(),\r\n                b: new arrow.Int32(),\r\n                c: new arrow.TimestampSecond(),\r\n            },\r\n        },\r\n        query: 'SELECT * FROM main.foo',\r\n        expectedColumns: [\r\n            { name: 'a', values: [1, 4, 7] },\r\n            { name: 'b', values: [2, 5, 8] },\r\n            {\r\n                name: 'c',\r\n                values: [\r\n                    new Date(Date.UTC(1992, 2, 2, 20, 32, 45)).getTime(),\r\n                    new Date(Date.UTC(1992, 2, 2, 20, 32, 50)).getTime(),\r\n                    new Date(Date.UTC(1992, 2, 2, 20, 32, 55)).getTime(),\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\nconst TEST_FILE = 'TEST';\r\n\r\nexport function testCSVInsert(db: () => duckdb.DuckDBBindings): void {\r\n    let conn: duckdb.DuckDBConnection;\r\n\r\n    beforeEach(async () => {\r\n        db().flushFiles();\r\n        conn = db().connect();\r\n    });\r\n    afterEach(async () => {\r\n        conn.close();\r\n        await db().flushFiles();\r\n        await db().dropFiles();\r\n    });\r\n    describe('CSV Insert Sync', () => {\r\n        for (const test of CSV_INSERT_TESTS) {\r\n            it(test.name, () => {\r\n                conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\r\n                const buffer = encoder.encode(test.input);\r\n                db().registerFileBuffer(TEST_FILE, buffer);\r\n                conn.insertCSVFromPath(TEST_FILE, test.options);\r\n                const results = conn.query(test.query);\r\n                compareTable(results, test.expectedColumns);\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function testCSVInsertAsync(db: () => duckdb.AsyncDuckDB): void {\r\n    let conn: duckdb.AsyncDuckDBConnection;\r\n\r\n    beforeEach(async () => {\r\n        await db().flushFiles();\r\n        conn = await db().connect();\r\n    });\r\n    afterEach(async () => {\r\n        await conn.close();\r\n        await db().flushFiles();\r\n        await db().dropFiles();\r\n    });\r\n    describe('CSV Insert Buffer Async', () => {\r\n        for (const test of CSV_INSERT_TESTS) {\r\n            it(test.name, async () => {\r\n                await conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\r\n                const buffer = encoder.encode(test.input);\r\n                await db().registerFileBuffer(TEST_FILE, buffer);\r\n                await conn.insertCSVFromPath(TEST_FILE, test.options);\r\n                const results = await conn.query(test.query);\r\n                compareTable(results, test.expectedColumns);\r\n            });\r\n        }\r\n    });\r\n\r\n    describeBrowser('CSV Insert Blob Async', () => {\r\n        for (const test of CSV_INSERT_TESTS) {\r\n            it(test.name, async () => {\r\n                await conn.query(`DROP TABLE IF EXISTS ${test.options.schema || 'main'}.${test.options.name}`);\r\n                const buffer = encoder.encode(test.input);\r\n                const blob = new Blob([buffer]);\r\n                await db().registerFileHandle(TEST_FILE, blob, DuckDBDataProtocol.BROWSER_FILEREADER, false);\r\n                await conn.insertCSVFromPath(TEST_FILE, test.options);\r\n                const results = await conn.query(test.query);\r\n                compareTable(results, test.expectedColumns);\r\n            });\r\n        }\r\n    });\r\n}\r\n", "import * as duckdb from '../src/';\r\n\r\nexport function testTokenization(db: () => duckdb.DuckDBBindings): void {\r\n    describe('Tokenizer', () => {\r\n        it('SELECT 1', async () => {\r\n            expect(db().tokenize('SELECT 1')).toEqual({\r\n                offsets: [0, 7],\r\n                types: [4, 1],\r\n            });\r\n        });\r\n        it('SELECT * FROM region', async () => {\r\n            expect(db().tokenize('SELECT * FROM region')).toEqual({\r\n                offsets: [0, 7, 9, 14],\r\n                types: [4, 3, 4, 0],\r\n            });\r\n        });\r\n    });\r\n}\r\n\r\nexport function testTokenizationAsync(db: () => duckdb.AsyncDuckDB): void {\r\n    describe('Tokenizer', () => {\r\n        it('SELECT 1', async () => {\r\n            expect(await db().tokenize('SELECT 1')).toEqual({\r\n                offsets: [0, 7],\r\n                types: [4, 1],\r\n            });\r\n        });\r\n        it('SELECT * FROM region', async () => {\r\n            expect(await db().tokenize('SELECT * FROM region')).toEqual({\r\n                offsets: [0, 7, 9, 14],\r\n                types: [4, 3, 4, 0],\r\n            });\r\n        });\r\n    });\r\n}\r\n", "import * as duckdb from '../src/';\r\n\r\ninterface TableNameTest {\r\n    name: string;\r\n    input: string;\r\n    tables: string[];\r\n}\r\n\r\nconst TABLENAME_TESTS: TableNameTest[] = [\r\n    {\r\n        name: 'standard',\r\n        input: 'SELECT * FROM my_table',\r\n        tables: ['my_table'],\r\n    },\r\n    {\r\n        name: 'fetch_specific',\r\n        input: 'SELECT col_a FROM my_table',\r\n        tables: ['my_table'],\r\n    },\r\n    {\r\n        name: 'multiple_tables',\r\n        input: 'SELECT * FROM my_table1, my_table2, my_table3',\r\n        tables: ['my_table1', 'my_table2', 'my_table3'],\r\n    },\r\n    {\r\n        name: 'same_table_multiple_times',\r\n        input: 'SELECT col_a FROM my_table, my_table m2, my_table m3',\r\n        tables: ['my_table'],\r\n    },\r\n    {\r\n        name: 'subqueries',\r\n        input: 'SELECT * FROM (SELECT * FROM (SELECT * FROM my_table) bla) bla3',\r\n        tables: ['my_table'],\r\n    },\r\n    {\r\n        name: 'join',\r\n        input: 'SELECT col_a FROM my_table JOIN my_table2 ON (my_table.col_b=my_table2.col_d)',\r\n        tables: ['my_table', 'my_table2'],\r\n    },\r\n    {\r\n        name: 'scalar_subquery',\r\n        input: 'SELECT (SELECT COUNT(*) FROM my_table)',\r\n        tables: ['my_table'],\r\n    },\r\n    {\r\n        name: 'set_operations',\r\n        input: 'SELECT * FROM my_table UNION ALL SELECT * FROM my_table2 INTERSECT SELECT * FROM my_table3',\r\n        tables: ['my_table', 'my_table2', 'my_table3'],\r\n    },\r\n    {\r\n        name: 'window_functions',\r\n        input: 'SELECT row_number() OVER (ORDER BY (SELECT i+j FROM my_table2)) FROM my_table',\r\n        tables: ['my_table', 'my_table2'],\r\n    },\r\n];\r\n\r\nexport function testTableNames(db: () => duckdb.DuckDBBindings): void {\r\n    let conn: duckdb.DuckDBConnection;\r\n    beforeEach(() => {\r\n        conn = db().connect();\r\n    });\r\n    afterEach(() => {\r\n        conn.close();\r\n    });\r\n    describe('TableNames', () => {\r\n        for (const test of TABLENAME_TESTS) {\r\n            it(test.name, () => {\r\n                const tables = conn.getTableNames(test.input);\r\n                expect(tables).toEqual(test.tables);\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function testTableNamesAsync(db: () => duckdb.AsyncDuckDB): void {\r\n    let conn: duckdb.AsyncDuckDBConnection;\r\n    beforeEach(async () => {\r\n        conn = await db().connect();\r\n    });\r\n    afterEach(async () => {\r\n        await conn.close();\r\n    });\r\n    describe('TableNames Async', () => {\r\n        for (const test of TABLENAME_TESTS) {\r\n            it(test.name, async () => {\r\n                const tables = await conn.getTableNames(test.input);\r\n                expect(tables).toEqual(test.tables);\r\n            });\r\n        }\r\n    });\r\n}\r\n", "import * as duckdb from '../src/';\r\nimport { Float64, Int32, Utf8 } from 'apache-arrow';\r\n\r\nexport function testUDF(db: () => duckdb.DuckDBBindings): void {\r\n    let conn: duckdb.DuckDBConnection;\r\n    beforeEach(() => {\r\n        conn = db().connect();\r\n    });\r\n\r\n    afterEach(() => {\r\n        conn.close();\r\n        db().flushFiles();\r\n        db().dropFiles();\r\n    });\r\n\r\n    describe('UDF', () => {\r\n        it('simple', async () => {\r\n            conn.createScalarFunction('jsudf', new Int32(), a => a);\r\n\r\n            const result = conn.query(\r\n                'SELECT max(jsudf(v::INTEGER))::INTEGER as foo FROM generate_series(1, 10000) as t(v)',\r\n            );\r\n\r\n            expect(result.numRows).toEqual(1);\r\n            expect(result.numCols).toEqual(1);\r\n            expect(result.getChildAt(0)?.length).toEqual(1);\r\n            expect(result.getChildAt(0)?.toArray()).toEqual(new Int32Array([10000]));\r\n        });\r\n\r\n        it('double', async () => {\r\n            conn.createScalarFunction('jsudf2', new Float64(), a => a);\r\n\r\n            const result = conn.query(\r\n                'SELECT max(jsudf2(v::DOUBLE))::DOUBLE as foo FROM generate_series(1, 10000) as t(v)',\r\n            );\r\n\r\n            expect(result.numRows).toEqual(1);\r\n            expect(result.numCols).toEqual(1);\r\n            expect(result.getChildAt(0)?.length).toEqual(1);\r\n            expect(result.getChildAt(0)?.toArray()).toEqual(new Float64Array([10000]));\r\n        });\r\n\r\n        it('2 args', async () => {\r\n            conn.createScalarFunction('jsudf3', new Int32(), (a, b) => a + b);\r\n\r\n            const result = conn.query(\r\n                'SELECT max(jsudf3(v::INTEGER, v::INTEGER))::INTEGER as foo FROM generate_series(1, 10000) as t(v)',\r\n            );\r\n\r\n            expect(result.numRows).toEqual(1);\r\n            expect(result.numCols).toEqual(1);\r\n            expect(result.getChildAt(0)?.length).toEqual(1);\r\n            expect(result.getChildAt(0)?.toArray()).toEqual(new Int32Array([20000]));\r\n        });\r\n\r\n        it('3 args', async () => {\r\n            conn.createScalarFunction('jsudf3args', new Int32(), (a, b, c) => a + b + c);\r\n\r\n            const result = conn.query(\r\n                'SELECT max(jsudf3args(v::INTEGER, v::INTEGER, v::INTEGER))::INTEGER as foo FROM generate_series(1, 10000) as t(v)',\r\n            );\r\n\r\n            expect(result.numRows).toEqual(1);\r\n            expect(result.numCols).toEqual(1);\r\n            expect(result.getChildAt(0)?.length).toEqual(1);\r\n            expect(result.getChildAt(0)?.toArray()).toEqual(new Int32Array([30000]));\r\n        });\r\n\r\n        it('4 args', async () => {\r\n            conn.createScalarFunction('jsudf4args', new Int32(), (a, b, c, d) => a + b + c + d);\r\n\r\n            const result = conn.query(\r\n                'SELECT max(jsudf4args(v::INTEGER, v::INTEGER, v::INTEGER, v::INTEGER))::INTEGER as foo FROM generate_series(1, 10000) as t(v)',\r\n            );\r\n\r\n            expect(result.numRows).toEqual(1);\r\n            expect(result.numCols).toEqual(1);\r\n            expect(result.getChildAt(0)?.length).toEqual(1);\r\n            expect(result.getChildAt(0)?.toArray()).toEqual(new Int32Array([40000]));\r\n        });\r\n\r\n        it('noargs', async () => {\r\n            conn.createScalarFunction('jsudf4', new Int32(), () => 42);\r\n            const result = conn.query('SELECT max(jsudf4())::INTEGER as foo FROM generate_series(1, 10000) as t(v)');\r\n\r\n            expect(result.numRows).toEqual(1);\r\n            expect(result.numCols).toEqual(1);\r\n            expect(result.getChildAt(0)?.length).toEqual(1);\r\n            expect(result.getChildAt(0)?.toArray()).toEqual(new Int32Array([42]));\r\n        });\r\n        it('withnulls', async () => {\r\n            conn.createScalarFunction('jsudf5', new Int32(), a => (a == null ? -100 : a));\r\n            const result = conn.query(\r\n                'SELECT min(jsudf5((case when v % 2 = 0 then v else null end)::INTEGER))::INTEGER as foo FROM generate_series(1, 10000) as t(v)',\r\n            );\r\n\r\n            expect(result.numRows).toEqual(1);\r\n            expect(result.numCols).toEqual(1);\r\n            expect(result.getChildAt(0)?.length).toEqual(1);\r\n            expect(result.getChildAt(0)?.toArray()).toEqual(new Int32Array([-100]));\r\n        });\r\n\r\n        it('stringparam', async () => {\r\n            function jsudf6(s: string) {\r\n                return s.length;\r\n            }\r\n            conn.createScalarFunction('jsudf6', new Int32(), jsudf6);\r\n            const result = conn.query(\r\n                \"SELECT max(jsudf6('str_' || v))::INTEGER as foo FROM generate_series(1, 10000) as t(v)\",\r\n            );\r\n\r\n            expect(result.numRows).toEqual(1);\r\n            expect(result.numCols).toEqual(1);\r\n            expect(result.getChildAt(0)?.length).toEqual(1);\r\n            expect(result.getChildAt(0)?.toArray()).toEqual(new Int32Array([9]));\r\n        });\r\n\r\n        it('stringparamnulls', async () => {\r\n            function jsudf7(s: string) {\r\n                if (s == undefined) {\r\n                    return 0;\r\n                } else {\r\n                    return s.length;\r\n                }\r\n            }\r\n            conn.createScalarFunction('jsudf7', new Int32(), jsudf7);\r\n            const result = conn.query(\r\n                \"SELECT max(jsudf7((case when v % 2 = 0 then 'str_' || v else null end)::VARCHAR))::INTEGER as foo FROM generate_series(1, 10000) as t(v)\",\r\n            );\r\n\r\n            expect(result.numRows).toEqual(1);\r\n            expect(result.numCols).toEqual(1);\r\n            expect(result.getChildAt(0)?.length).toEqual(1);\r\n            expect(result.getChildAt(0)?.toArray()).toEqual(new Int32Array([9]));\r\n        });\r\n\r\n        it('nullintreturn', async () => {\r\n            conn.createScalarFunction('jsudf8', new Int32(), a => undefined);\r\n\r\n            const result = conn.query(\r\n                'SELECT max(COALESCE(jsudf8(v::INTEGER), 42))::INTEGER as foo FROM generate_series(1, 10000) as t(v)',\r\n            );\r\n\r\n            expect(result.numRows).toEqual(1);\r\n            expect(result.numCols).toEqual(1);\r\n            expect(result.getChildAt(0)?.length).toEqual(1);\r\n            expect(result.getChildAt(0)?.toArray()).toEqual(new Int32Array([42]));\r\n        });\r\n\r\n        it('stringreturn', async () => {\r\n            conn.createScalarFunction('jsudf9', new Utf8(), a => 'Hello ' + a);\r\n\r\n            const result = conn.query(\r\n                'SELECT max(LENGTH(jsudf9(v::INTEGER)))::INTEGER as foo FROM generate_series(1, 10000) as t(v)',\r\n            );\r\n\r\n            expect(result.numRows).toEqual(1);\r\n            expect(result.numCols).toEqual(1);\r\n            expect(result.getChildAt(0)?.length).toEqual(1);\r\n            expect(result.getChildAt(0)?.toArray()).toEqual(new Int32Array([11]));\r\n        });\r\n\r\n        it('nullstringreturn', async () => {\r\n            conn.createScalarFunction('jsudf10', new Utf8(), a => (a % 2 == 0 ? 'Hello' : undefined));\r\n\r\n            const result = conn.query(\r\n                'SELECT COUNT(jsudf10(v::INTEGER))::INTEGER as foo FROM generate_series(1, 10000) as t(v)',\r\n            );\r\n\r\n            expect(result.numRows).toEqual(1);\r\n            expect(result.numCols).toEqual(1);\r\n            expect(result.getChildAt(0)?.length).toEqual(1);\r\n            expect(result.getChildAt(0)?.toArray()).toEqual(new Int32Array([5000]));\r\n        });\r\n\r\n        it('struct', async () => {\r\n            conn.createScalarFunction('jsudf11', new Int32(), a => (a.x == null ? -100 : a.x));\r\n            const result = conn.query(\r\n                `SELECT min(jsudf11({'x': (case when v % 2 = 0 then v else null end)::INTEGER, 'y': 42}))::INTEGER as foo FROM generate_series(1, 10000) as t(v)`,\r\n            );\r\n\r\n            expect(result.numRows).toEqual(1);\r\n            expect(result.numCols).toEqual(1);\r\n            expect(result.getChildAt(0)?.length).toEqual(1);\r\n            expect(result.getChildAt(0)?.toArray()).toEqual(new Int32Array([-100]));\r\n        });\r\n\r\n        it('structnested', async () => {\r\n            conn.createScalarFunction('jsudf12', new Int32(), a => (a.x.y == null ? -100 : a.x.y));\r\n            const result = conn.query(\r\n                `SELECT min(jsudf12({'x': {'y': (case when v % 2 = 0 then v else null end)::INTEGER }, 'z': 42}))::INTEGER as foo FROM generate_series(1, 10000) as t(v)`,\r\n            );\r\n\r\n            expect(result.numRows).toEqual(1);\r\n            expect(result.numCols).toEqual(1);\r\n            expect(result.getChildAt(0)?.length).toEqual(1);\r\n            expect(result.getChildAt(0)?.toArray()).toEqual(new Int32Array([-100]));\r\n        });\r\n\r\n        it('structnestednull', async () => {\r\n            conn.createScalarFunction('jsudf13', new Int32(), a => (a.x?.y == null ? -100 : a.x!.y));\r\n            const result = conn.query(\r\n                `SELECT min(jsudf13({'x': (case when v % 2 = 0 then {'y': v::INTEGER } else null end), 'z': 42}))::INTEGER as foo FROM generate_series(1, 10000) as t(v)`,\r\n            );\r\n\r\n            expect(result.numRows).toEqual(1);\r\n            expect(result.numCols).toEqual(1);\r\n            expect(result.getChildAt(0)?.length).toEqual(1);\r\n            expect(result.getChildAt(0)?.toArray()).toEqual(new Int32Array([-100]));\r\n        });\r\n    });\r\n}\r\n", "import * as duckdb from '../../src';\r\nimport * as arrow from 'apache-arrow';\r\n\r\n// https://github.com/duckdb/duckdb-wasm/issues/332\r\nexport function test332(db: () => duckdb.AsyncDuckDB): void {\r\n    let conn: duckdb.AsyncDuckDBConnection;\r\n    beforeEach(async () => {\r\n        await db().flushFiles();\r\n        conn = await db().connect();\r\n    });\r\n    afterEach(async () => {\r\n        await conn.close();\r\n        await db().flushFiles();\r\n        await db().dropFiles();\r\n    });\r\n    describe('GitHub issues', () => {\r\n        it('332', async () => {\r\n            await db().registerFileText(\r\n                'Products.csv',\r\n                `ProductGroup,Product,Year,Quarter,Revenue,Units,Count,Product Key,Reseller,Product Info,QuarterAsNumber\r\nElectronics,Phone,2018,Q1,103,7,1,2018-Q1,Sony,Format=XML; <Properties>\u2026,1\r\nElectronics,Phone,2018,Q1,102,4,1,2018-Q1,Sony,Format=XML; <Properties>\u2026,1\r\nElectronics,Phone,2019,Q1,98,12,1,2019-Q1,Sony,Format=XML; <Properties>\u2026,1\r\nElectronics,Computer,2018,Q1,104,3,1,2018-Q1,Samsung,Format=XML; <Properties>\u2026,1\r\nElectronics,Computer,2019,Q1,83,7,1,2019-Q1,Google,Format=XML; <Properties>\u2026,1\r\nMedia,Theater,2018,Q1,17,4,1,2018-Q1,Sony,Format=XML; <Properties>\u2026,1\r\nMedia,Theater,2019,Q1,20,7,1,2019-Q1,Sony,Format=XML; <Properties>\u2026,1\r\nMedia,Movies,2018,Q1,25,12,1,2018-Q1,Microsoft,Format=XML; <Properties>\u2026,1\r\nMedia,Movies,2019,Q1,26,13,1,2019-Q1,Sony,Format=XML; <Properties>\u2026,1\r\nElectronics,Phone,2018,Q2,105,5,1,2018-Q2,Samsung,Format=XML; <Properties>\u2026,2\r\nElectronics,Phone,2019,Q2,82,15,1,2019-Q2,LG,Format=XML; <Properties>\u2026,2\r\nElectronics,Computer,2018,Q2,99,4,1,2018-Q2,LG,Format=XML; <Properties>\u2026,2\r\nElectronics,Computer,2019,Q2,84,20,1,2019-Q2,Sony,Format=XML; <Properties>\u2026,2\r\nMedia,Theater,2018,Q2,17,4,1,2018-Q2,Microsoft,Format=XML; <Properties>\u2026,2\r\nMedia,Theater,2019,Q2,22,5,1,2019-Q2,Sony,Format=XML; <Properties>\u2026,2\r\nMedia,Movies,2018,Q2,25,12,1,2018-Q2,Samsung,Format=XML; <Properties>\u2026,2\r\nMedia,Movies,2019,Q2,26,14,1,2019-Q2,Google,Format=XML; <Properties>\u2026,2\r\nElectronics,Phone,2000,Q1,103,7,1,2000-Q1,Sony,Format=XML; <Properties>\u2026,1\r\nElectronics,Phone,2001,Q1,102,4,1,2001-Q1,Sony,Format=XML; <Properties>\u2026,1\r\nElectronics,Phone,2002,Q1,98,12,1,2002-Q1,Microsoft,Format=XML; <Properties>\u2026,1\r\nElectronics,Computer,2003,Q1,104,3,1,2003-Q1,Sony,Format=XML; <Properties>\u2026,1\r\nElectronics,Computer,2004,Q1,83,7,1,2004-Q1,Samsung,Format=XML; <Properties>\u2026,1\r\nMedia,Theater,2005,Q1,17,4,1,2005-Q1,Google,Format=XML; <Properties>\u2026,1\r\nMedia,Theater,2006,Q1,20,7,1,2006-Q1,Sony,Format=XML; <Properties>\u2026,1\r\nMedia,Movies,2007,Q1,25,12,1,2007-Q1,Sony,Format=XML; <Properties>\u2026,1\r\nMedia,Movies,2008,Q1,26,13,1,2008-Q1,Microsoft,Format=XML; <Properties>\u2026,1\r\nElectronics,Phone,2009,Q2,105,5,1,2009-Q2,Sony,Format=XML; <Properties>\u2026,2\r\nElectronics,Phone,2010,Q2,82,15,1,2010-Q2,Sony,Format=XML; <Properties>\u2026,2\r\nElectronics,Computer,2011,Q2,99,4,1,2011-Q2,Sony,Format=XML; <Properties>\u2026,2\r\nElectronics,Computer,2012,Q2,84,20,1,2012-Q2,Sony,Format=XML; <Properties>\u2026,2\r\nMedia,Theater,2013,Q2,17,4,1,2013-Q2,Sony,Format=XML; <Properties>\u2026,2\r\nMedia,Theater,2014,Q2,22,5,1,2014-Q2,Sony,Format=XML; <Properties>\u2026,2\r\nMedia,Movies,2015,Q2,25,12,1,2015-Q2,Sony,Format=XML; <Properties>\u2026,2\r\nMedia,Movies,2016,Q2,26,14,1,2016-Q2,Samsung,Format=XML; <Properties>\u2026,2\r\nMedia,Movies,2017,Q1,26,13,1,2017-Q1,Google,Format=XML; <Properties>\u2026,1\r\nElectronics,Phone,2018,Q2,105,5,1,2018-Q2,Sony,Format=XML; <Properties>\u2026,2\r\nElectronics,Phone,2019,Q2,82,15,1,2019-Q2,Sony,Format=XML; <Properties>\u2026,2\r\nElectronics,Computer,2020,Q2,99,4,1,2020-Q2,Microsoft,Format=XML; <Properties>\u2026,2\r\nElectronics,Phone,2020,Q1,103,7,1,2020-Q1,Sony,Format=XML; <Properties>\u2026,1\r\nElectronics,Phone,2020,Q2,102,4,1,2020-Q2,Samsung,Format=XML; <Properties>\u2026,2\r\nElectronics,Phone,2020,Q3,98,12,1,2020-Q3,LG,Format=XML; <Properties>\u2026,3\r\nElectronics,Computer,2020,Q4,104,3,1,2020-Q4,LG,Format=XML; <Properties>\u2026,4\r\nElectronics,Computer,2020,Q1,83,7,1,2020-Q1,Sony,Format=XML; <Properties>\u2026,1\r\nMedia,Theater,2020,Q1,17,4,1,2020-Q1,Microsoft,Format=XML; <Properties>\u2026,1\r\nMedia,Theater,2020,Q1,20,7,1,2020-Q1,Sony,Format=XML; <Properties>\u2026,1\r\n`,\r\n            );\r\n            await conn.query(\"CREATE TABLE products AS SELECT * FROM 'Products.csv'\");\r\n            const all = await conn.query('SELECT * FROM products');\r\n            expect(all.schema.fields.length).toBe(11);\r\n            expect(all.schema.fields[0].name).toBe('ProductGroup');\r\n            const insensitive = await conn.query<{\r\n                ProductGroup: arrow.Utf8;\r\n            }>('SELECT productgroup FROM products GROUP BY productgroup');\r\n            expect(insensitive.schema.fields.length).toBe(1);\r\n            expect(insensitive.schema.fields[0].name).toBe('ProductGroup');\r\n            expect(insensitive.toArray().length).toEqual(2);\r\n            await conn.query('DROP TABLE products');\r\n        });\r\n    });\r\n}\r\n", "import * as duckdb from '../../src';\r\nimport * as arrow from 'apache-arrow';\r\n\r\n// https://github.com/duckdb/duckdb-wasm/issues/334\r\nexport function test334(adb: () => duckdb.AsyncDuckDB): void {\r\n    describe('GitHub issues', () => {\r\n        describe('334', () => {\r\n            it('CSV insert', async () => {\r\n                await adb().registerFileText(`data.csv`, '1|foo\\n2|bar\\n');\r\n                const conn = await adb().connect();\r\n                await conn.insertCSVFromPath('data.csv', {\r\n                    schema: 'main',\r\n                    name: 'foo',\r\n                    detect: false,\r\n                    header: false,\r\n                    delimiter: '|',\r\n                    columns: {\r\n                        col1: new arrow.Int32(),\r\n                        col2: new arrow.Utf8(),\r\n                    },\r\n                });\r\n                await conn.query('DROP TABLE IF EXISTS foo');\r\n                await conn.close();\r\n                await adb().dropFile('data.csv');\r\n            });\r\n            it('JSON row insert', async () => {\r\n                await adb().registerFileText(\r\n                    'rows.json',\r\n                    `[\r\n                    { \"col1\": 1, \"col2\": \"foo\" },\r\n                    { \"col1\": 2, \"col2\": \"bar\" },\r\n                ]`,\r\n                );\r\n                const conn = await adb().connect();\r\n                await conn.insertJSONFromPath('rows.json', { name: 'rows' });\r\n                await conn.query('DROP TABLE IF EXISTS rows');\r\n                await conn.close();\r\n                await adb().dropFile('rows.json');\r\n            });\r\n            it('JSON column insert', async () => {\r\n                await adb().registerFileText(\r\n                    'columns.json',\r\n                    `{\r\n                    \"col1\": [1, 2],\r\n                    \"col2\": [\"foo\", \"bar\"]\r\n                }`,\r\n                );\r\n                const conn = await adb().connect();\r\n                await conn.insertJSONFromPath('columns.json', { name: 'columns' });\r\n                await conn.query('DROP TABLE IF EXISTS columns');\r\n                await conn.close();\r\n                await adb().dropFile('columns.json');\r\n            });\r\n            it('Query result materialized', async () => {\r\n                const conn = await adb().connect();\r\n                await conn.query<{ v: arrow.Int }>(`\r\n                SELECT * FROM generate_series(1, 100) t(v)\r\n            `);\r\n                await conn.close();\r\n            });\r\n            it('Query result streamed', async () => {\r\n                const conn = await adb().connect();\r\n                for await (const batch of await conn.send<{ v: arrow.Int }>(`\r\n                SELECT * FROM generate_series(1, 100) t(v)\r\n            `)) {\r\n                    expect(batch.numRows).toBeGreaterThan(0);\r\n                }\r\n                await conn.close();\r\n            });\r\n            it('Prepared statement materialized', async () => {\r\n                const conn = await adb().connect();\r\n                const stmt = await conn.prepare(`SELECT v + ? FROM generate_series(0, 10000) as t(v);`);\r\n                await stmt.query(234);\r\n                await stmt.close();\r\n                await conn.close();\r\n            });\r\n            it('Prepared statement streamed', async () => {\r\n                const conn = await adb().connect();\r\n                const stmt = await conn.prepare(`SELECT v + ? FROM generate_series(0, 10000) as t(v);`);\r\n                for await (const batch of await stmt.send(234)) {\r\n                    expect(batch.numRows).toBeGreaterThan(0);\r\n                }\r\n                await stmt.close();\r\n                await conn.close();\r\n            });\r\n        });\r\n    });\r\n}\r\n", "import * as duckdb from '../../src';\r\nimport * as arrow from 'apache-arrow';\r\n\r\n// https://github.com/duckdb/duckdb-wasm/issues/393\r\nexport function test393(db: () => duckdb.AsyncDuckDB): void {\r\n    let conn: duckdb.AsyncDuckDBConnection | null = null;\r\n    beforeEach(async () => {\r\n        await db().flushFiles();\r\n    });\r\n    afterEach(async () => {\r\n        if (conn) {\r\n            await conn.close();\r\n            conn = null;\r\n        }\r\n        await db().flushFiles();\r\n        await db().dropFiles();\r\n    });\r\n    describe('GitHub issues', () => {\r\n        it('393', async () => {\r\n            await db().open({\r\n                path: ':memory:',\r\n                query: {\r\n                    castTimestampToDate: false,\r\n                },\r\n            });\r\n            conn = await db().connect();\r\n            const resultWithoutCast = await conn.query<{\r\n                ts: arrow.TimestampMillisecond;\r\n            }>(`SELECT TIMESTAMP '1992-03-22 01:02:03' as ts`);\r\n            expect(resultWithoutCast.toArray()[0]?.ts).toEqual(new Date(Date.UTC(1992, 2, 22, 1, 2, 3)).getTime());\r\n\r\n            await db().open({\r\n                path: ':memory:',\r\n                query: {\r\n                    castTimestampToDate: true,\r\n                },\r\n            });\r\n            conn = await db().connect();\r\n            const resultWithCast = await conn.query<{\r\n                ts: arrow.DateMillisecond;\r\n            }>(`SELECT TIMESTAMP '1992-03-22 01:02:03' as ts`);\r\n            expect(resultWithCast.toArray()[0]?.ts).toEqual(new Date(Date.UTC(1992, 2, 22, 1, 2, 3)));\r\n        });\r\n    });\r\n}\r\n", "import * as duckdb from '../../src';\r\nimport * as arrow from 'apache-arrow';\r\n\r\n// https://github.com/duckdb/duckdb-wasm/issues/448\r\nexport function test448(db: () => duckdb.AsyncDuckDB): void {\r\n    let conn: duckdb.AsyncDuckDBConnection | null = null;\r\n    beforeEach(async () => {\r\n        await db().flushFiles();\r\n    });\r\n    afterEach(async () => {\r\n        if (conn) {\r\n            await conn.close();\r\n            conn = null;\r\n        }\r\n        await db().flushFiles();\r\n        await db().dropFiles();\r\n    });\r\n    describe('GitHub issues', () => {\r\n        it('448', async () => {\r\n            conn = await db().connect();\r\n            await conn.query(`create temp table test448(i integer)`);\r\n            await conn.query(`insert into test448 values (1),(2),(1)`);\r\n            let result = await conn.query(`select * from test448`);\r\n            expect(result.numCols).toBe(1);\r\n            expect(result.numRows).toBe(3);\r\n            expect(result.getChildAt(0)?.toArray()).toEqual(new Int32Array([1, 2, 1]));\r\n            result = await conn.query<{ i: arrow.Map_<arrow.Int32, arrow.Uint64> }>(`select histogram(i) from test448`);\r\n            expect(result.numCols).toBe(1);\r\n            expect(result.numRows).toBe(1);\r\n            const array = result.getChildAt(0)!.toArray();\r\n            expect(array.length).toEqual(1);\r\n            expect(array[0].toString()).toEqual('{1: 2, 2: 1}');\r\n        });\r\n    });\r\n}\r\n", "import * as duckdb from '../../src';\r\nimport * as arrow from 'apache-arrow';\r\n\r\n// https://github.com/duckdb/duckdb-wasm/issues/470\r\nexport function test470(db: () => duckdb.AsyncDuckDB): void {\r\n    let conn: duckdb.AsyncDuckDBConnection | null = null;\r\n    beforeEach(async () => {\r\n        await db().flushFiles();\r\n    });\r\n    afterEach(async () => {\r\n        if (conn) {\r\n            await conn.close();\r\n            conn = null;\r\n        }\r\n        await db().flushFiles();\r\n        await db().dropFiles();\r\n    });\r\n    describe('GitHub issues', () => {\r\n        it('470', async () => {\r\n            // Baseline without cast: we expect an error to be thrown because of the duration type that is emitted\r\n            await db().open({\r\n                path: ':memory:',\r\n                query: {\r\n                    castDurationToTime64: false,\r\n                },\r\n            });\r\n            conn = await db().connect();\r\n            const result1 = await conn.query<{\r\n                interval: arrow.TimeMicrosecond;\r\n            }>(`SELECT INTERVAL '3' MONTH AS interval`);\r\n            expect(result1.toArray()[0]?.interval?.toString()).toEqual('0,3');\r\n\r\n            // Cast explicitly enabled: Time64 value is returned\r\n            await db().open({\r\n                path: ':memory:',\r\n                query: {\r\n                    castDurationToTime64: true,\r\n                },\r\n            });\r\n            conn = await db().connect();\r\n            const resultWithCast = await conn.query<{\r\n                interval: arrow.TimeMicrosecond;\r\n            }>(`SELECT INTERVAL '3' MONTH AS interval`);\r\n            expect(resultWithCast.toArray()[0]?.interval?.toString()).toEqual('0,3');\r\n\r\n            // Cast should be on by default\r\n            await db().open({\r\n                path: ':memory:',\r\n                query: {},\r\n            });\r\n            conn = await db().connect();\r\n            const resultWithDefault = await conn.query<{\r\n                interval: arrow.TimeMicrosecond;\r\n            }>(`SELECT INTERVAL '3' MONTH AS interval`);\r\n            expect(resultWithDefault.toArray()[0]?.interval?.toString()).toEqual('0,3');\r\n        });\r\n    });\r\n}\r\n", "import * as duckdb from '../../src';\r\nimport * as arrow from 'apache-arrow';\r\n\r\n// https://github.com/duckdb/duckdb-wasm/issues/477\r\n// Note that when ArrowJS supports negative decimals, castDecimalToDouble should probably be deprecated.\r\nexport function test477(db: () => duckdb.AsyncDuckDB): void {\r\n    let conn: duckdb.AsyncDuckDBConnection | null = null;\r\n    beforeEach(async () => {\r\n        await db().flushFiles();\r\n    });\r\n    afterEach(async () => {\r\n        if (conn) {\r\n            await conn.close();\r\n            conn = null;\r\n        }\r\n        await db().flushFiles();\r\n        await db().dropFiles();\r\n    });\r\n    describe('GitHub issues', () => {\r\n        it('477', async () => {\r\n            // Baseline without cast: we expect the negative decimal values to not work accurately\r\n            await db().open({\r\n                path: ':memory:',\r\n                query: {},\r\n            });\r\n            conn = await db().connect();\r\n            const resultWithoutCast = await conn.query(`SELECT (-1.9)::DECIMAL(2,1) as decimal`);\r\n            expect(resultWithoutCast.schema.fields[0].type.scale).toEqual(1);\r\n            expect(resultWithoutCast.schema.fields[0].type.precision).toEqual(2);\r\n            // If this assertion breaks, arrow JS was likely updated to handle negative values\r\n            expect(resultWithoutCast.toArray()[0]?.decimal == -19).toBe(false);\r\n\r\n            // Using castDecimalToDouble we force decimals to be cast to doubles, note the inevitable imprecision.\r\n            await db().open({\r\n                path: ':memory:',\r\n                query: {\r\n                    castDecimalToDouble: true,\r\n                },\r\n            });\r\n            conn = await db().connect();\r\n            const resultWithCast = await conn.query<{\r\n                decimal: arrow.Float64;\r\n            }>(`SELECT (-1.9)::DECIMAL(2,1) as decimal`);\r\n            expect(resultWithCast.toArray()[0]?.decimal).toEqual(-1.9000000000000001);\r\n        });\r\n    });\r\n}\r\n", "import * as duckdb from '../../src/';\r\nimport { test332 } from './github_332.test';\r\nimport { test334 } from './github_334.test';\r\nimport { test393 } from './github_393.test';\r\nimport { test448 } from './github_448.test';\r\nimport { test470 } from './github_470.test';\r\nimport { test477 } from \"./github_477.test\";\r\n\r\nexport function testRegressionAsync(adb: () => duckdb.AsyncDuckDB): void {\r\n    test332(adb);\r\n    test334(adb);\r\n    test393(adb);\r\n    test448(adb);\r\n    test470(adb);\r\n    test477(adb);\r\n}\r\n", "import * as duckdb from '../src/';\r\n\r\nexport function testFTS(db: () => duckdb.DuckDBBindings): void {\r\n    let conn: duckdb.DuckDBConnection;\r\n    beforeEach(() => {\r\n        conn = db().connect();\r\n    });\r\n\r\n    afterEach(() => {\r\n        conn.close();\r\n        db().flushFiles();\r\n        db().dropFiles();\r\n    });\r\n\r\n    describe('FTS', () => {\r\n        it('sample', async () => {\r\n            // example from https://duckdb.org/docs/sql/full_text_search\r\n            await conn.query(\r\n                'CREATE TABLE documents(document_identifier VARCHAR, text_content VARCHAR, author VARCHAR, doc_version INTEGER);',\r\n            );\r\n            await conn.query(\r\n                \"INSERT INTO documents VALUES ('doc1', 'The mallard is a dabbling duck that breeds throughout the temperate.','Hannes M\u00FChleisen', 3), ('doc2', 'The cat is a domestic species of small carnivorous mammal.', 'Laurens Kuiper', 2);\",\r\n            );\r\n            await conn.query(\"PRAGMA create_fts_index('documents', 'document_identifier', 'text_content', 'author');\");\r\n            const result = conn.query(\r\n                'SELECT document_identifier, score\\n' +\r\n                    \"            FROM (SELECT *, fts_main_documents.match_bm25(document_identifier, 'Muhleisen', fields := 'author') AS score\\n\" +\r\n                    '            FROM documents) sq\\n' +\r\n                    '            WHERE score IS NOT NULL\\n' +\r\n                    '            AND doc_version > 2\\n' +\r\n                    '            ORDER BY score DESC;',\r\n            );\r\n\r\n            expect(result.getChildAt(0)?.toArray()).toEqual(['doc1']);\r\n        });\r\n    });\r\n}\r\n"],
  "mappings": "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",
  "names": ["path", "module", "module", "module", "node", "module", "module", "module", "max", "module", "module", "module", "module", "module", "index", "module", "require_constants", "module", "path", "require_utils", "path", "module", "require_parse", "module", "opts", "value", "rest", "source", "module", "path", "state", "require_picomatch", "module", "module", "path", "module", "require_utils", "fs", "path", "read", "path", "read", "path", "require_fs", "fs", "fs", "sync", "path", "module", "module", "queueMicrotask", "require_constants", "require_fs", "require_utils", "fs", "require_async", "read", "path", "require_sync", "read", "require_fs", "fs", "require_settings", "path", "fs", "require_out", "sync", "path", "module", "module", "worker", "self", "require_common", "require_async", "require_async", "require_stream", "require_sync", "require_sync", "require_settings", "path", "require_out", "require_reader", "path", "require_stream", "require_async", "require_entry", "path", "require_async", "require_stream", "require_sync", "require_sync", "require_settings", "fs", "require_out", "module", "FastGlob", "sync", "path", "decoder", "arrow", "TEXT_ENCODER", "worker", "path", "TEXT_ENCODER", "e", "fs", "path", "DuckDB", "path", "require", "fs", "err", "asm", "module", "getValue", "fd", "Module", "out", "family", "type", "proto", "canon", "addr", "port", "ai", "date", "ret", "import_fs", "path", "fs", "DuckDB", "import_meta", "DuckDB", "path", "require", "fs", "err", "asm", "module", "getValue", "fd", "Module", "out", "family", "type", "proto", "canon", "addr", "port", "ai", "date", "ret", "DuckDB", "DuckDB", "arrow", "db", "TEXT_ENCODER", "worker", "path", "import_fs", "db", "arrow", "db", "adb", "db", "arrow", "db", "resolveData", "testRows", "db", "arrow", "db", "arrow", "db", "arrow", "describeBrowser", "encoder", "TEST_FILE", "db", "db", "db", "import_apache_arrow", "db", "_a", "db", "arrow", "adb", "db", "db", "db", "db", "adb", "db", "path", "fs", "Worker"]
}
