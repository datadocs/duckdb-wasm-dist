var il=Object.create;var Pa=Object.defineProperty;var al=Object.getOwnPropertyDescriptor;var ol=Object.getOwnPropertyNames;var sl=Object.getPrototypeOf,ll=Object.prototype.hasOwnProperty;var Ba=(i=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(i,{get:(a,e)=>(typeof require<"u"?require:a)[e]}):i)(function(i){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+i+'" is not supported')});var cl=(i,a)=>()=>(a||i((a={exports:{}}).exports,a),a.exports);var ul=(i,a,e,l)=>{if(a&&typeof a=="object"||typeof a=="function")for(let c of ol(a))!ll.call(i,c)&&c!==e&&Pa(i,c,{get:()=>a[c],enumerable:!(l=al(a,c))||l.enumerable});return i};var ra=(i,a,e)=>(e=i!=null?il(sl(i)):{},ul(a||!i||!i.__esModule?Pa(e,"default",{value:i,enumerable:!0}):e,i));var no=cl((exports,module)=>{(function(){"use strict";var ERROR="input is invalid type",WINDOW=typeof window=="object",root=WINDOW?window:{};root.JS_SHA256_NO_WINDOW&&(WINDOW=!1);var WEB_WORKER=!WINDOW&&typeof self=="object",NODE_JS=!root.JS_SHA256_NO_NODE_JS&&typeof process=="object"&&process.versions&&process.versions.node;NODE_JS?root=global:WEB_WORKER&&(root=self);var COMMON_JS=!root.JS_SHA256_NO_COMMON_JS&&typeof module=="object"&&module.exports,AMD=typeof define=="function"&&define.amd,ARRAY_BUFFER=!root.JS_SHA256_NO_ARRAY_BUFFER&&typeof ArrayBuffer<"u",HEX_CHARS="0123456789abcdef".split(""),EXTRA=[-2147483648,8388608,32768,128],SHIFT=[24,16,8,0],K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],OUTPUT_TYPES=["hex","array","digest","arrayBuffer"],blocks=[];(root.JS_SHA256_NO_NODE_JS||!Array.isArray)&&(Array.isArray=function(i){return Object.prototype.toString.call(i)==="[object Array]"}),ARRAY_BUFFER&&(root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW||!ArrayBuffer.isView)&&(ArrayBuffer.isView=function(i){return typeof i=="object"&&i.buffer&&i.buffer.constructor===ArrayBuffer});var createOutputMethod=function(i,a){return function(e){return new Sha256(a,!0).update(e)[i]()}},createMethod=function(i){var a=createOutputMethod("hex",i);NODE_JS&&(a=nodeWrap(a,i)),a.create=function(){return new Sha256(i)},a.update=function(c){return a.create().update(c)};for(var e=0;e<OUTPUT_TYPES.length;++e){var l=OUTPUT_TYPES[e];a[l]=createOutputMethod(l,i)}return a},nodeWrap=function(method,is224){var crypto=eval("require('crypto')"),Buffer=eval("require('buffer').Buffer"),algorithm=is224?"sha224":"sha256",nodeMethod=function(i){if(typeof i=="string")return crypto.createHash(algorithm).update(i,"utf8").digest("hex");if(i==null)throw new Error(ERROR);return i.constructor===ArrayBuffer&&(i=new Uint8Array(i)),Array.isArray(i)||ArrayBuffer.isView(i)||i.constructor===Buffer?crypto.createHash(algorithm).update(new Buffer(i)).digest("hex"):method(i)};return nodeMethod},createHmacOutputMethod=function(i,a){return function(e,l){return new HmacSha256(e,a,!0).update(l)[i]()}},createHmacMethod=function(i){var a=createHmacOutputMethod("hex",i);a.create=function(c){return new HmacSha256(c,i)},a.update=function(c,_){return a.create(c).update(_)};for(var e=0;e<OUTPUT_TYPES.length;++e){var l=OUTPUT_TYPES[e];a[l]=createHmacOutputMethod(l,i)}return a};function Sha256(i,a){a?(blocks[0]=blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0,this.blocks=blocks):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],i?(this.h0=3238371032,this.h1=914150663,this.h2=812702999,this.h3=4144912697,this.h4=4290775857,this.h5=1750603025,this.h6=1694076839,this.h7=3204075428):(this.h0=1779033703,this.h1=3144134277,this.h2=1013904242,this.h3=2773480762,this.h4=1359893119,this.h5=2600822924,this.h6=528734635,this.h7=1541459225),this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0,this.is224=i}Sha256.prototype.update=function(i){if(!this.finalized){var a,e=typeof i;if(e!=="string"){if(e==="object"){if(i===null)throw new Error(ERROR);if(ARRAY_BUFFER&&i.constructor===ArrayBuffer)i=new Uint8Array(i);else if(!Array.isArray(i)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(i)))throw new Error(ERROR)}else throw new Error(ERROR);a=!0}for(var l,c=0,_,b=i.length,m=this.blocks;c<b;){if(this.hashed&&(this.hashed=!1,m[0]=this.block,m[16]=m[1]=m[2]=m[3]=m[4]=m[5]=m[6]=m[7]=m[8]=m[9]=m[10]=m[11]=m[12]=m[13]=m[14]=m[15]=0),a)for(_=this.start;c<b&&_<64;++c)m[_>>2]|=i[c]<<SHIFT[_++&3];else for(_=this.start;c<b&&_<64;++c)l=i.charCodeAt(c),l<128?m[_>>2]|=l<<SHIFT[_++&3]:l<2048?(m[_>>2]|=(192|l>>6)<<SHIFT[_++&3],m[_>>2]|=(128|l&63)<<SHIFT[_++&3]):l<55296||l>=57344?(m[_>>2]|=(224|l>>12)<<SHIFT[_++&3],m[_>>2]|=(128|l>>6&63)<<SHIFT[_++&3],m[_>>2]|=(128|l&63)<<SHIFT[_++&3]):(l=65536+((l&1023)<<10|i.charCodeAt(++c)&1023),m[_>>2]|=(240|l>>18)<<SHIFT[_++&3],m[_>>2]|=(128|l>>12&63)<<SHIFT[_++&3],m[_>>2]|=(128|l>>6&63)<<SHIFT[_++&3],m[_>>2]|=(128|l&63)<<SHIFT[_++&3]);this.lastByteIndex=_,this.bytes+=_-this.start,_>=64?(this.block=m[16],this.start=_-64,this.hash(),this.hashed=!0):this.start=_}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},Sha256.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var i=this.blocks,a=this.lastByteIndex;i[16]=this.block,i[a>>2]|=EXTRA[a&3],this.block=i[16],a>=56&&(this.hashed||this.hash(),i[0]=this.block,i[16]=i[1]=i[2]=i[3]=i[4]=i[5]=i[6]=i[7]=i[8]=i[9]=i[10]=i[11]=i[12]=i[13]=i[14]=i[15]=0),i[14]=this.hBytes<<3|this.bytes>>>29,i[15]=this.bytes<<3,this.hash()}},Sha256.prototype.hash=function(){var i=this.h0,a=this.h1,e=this.h2,l=this.h3,c=this.h4,_=this.h5,b=this.h6,m=this.h7,h=this.blocks,D,I,H,ee,U,se,ne,oe,ie,Re,pe;for(D=16;D<64;++D)U=h[D-15],I=(U>>>7|U<<25)^(U>>>18|U<<14)^U>>>3,U=h[D-2],H=(U>>>17|U<<15)^(U>>>19|U<<13)^U>>>10,h[D]=h[D-16]+I+h[D-7]+H<<0;for(pe=a&e,D=0;D<64;D+=4)this.first?(this.is224?(oe=300032,U=h[0]-1413257819,m=U-150054599<<0,l=U+24177077<<0):(oe=704751109,U=h[0]-210244248,m=U-1521486534<<0,l=U+143694565<<0),this.first=!1):(I=(i>>>2|i<<30)^(i>>>13|i<<19)^(i>>>22|i<<10),H=(c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7),oe=i&a,ee=oe^i&e^pe,ne=c&_^~c&b,U=m+H+ne+K[D]+h[D],se=I+ee,m=l+U<<0,l=U+se<<0),I=(l>>>2|l<<30)^(l>>>13|l<<19)^(l>>>22|l<<10),H=(m>>>6|m<<26)^(m>>>11|m<<21)^(m>>>25|m<<7),ie=l&i,ee=ie^l&a^oe,ne=m&c^~m&_,U=b+H+ne+K[D+1]+h[D+1],se=I+ee,b=e+U<<0,e=U+se<<0,I=(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10),H=(b>>>6|b<<26)^(b>>>11|b<<21)^(b>>>25|b<<7),Re=e&l,ee=Re^e&i^ie,ne=b&m^~b&c,U=_+H+ne+K[D+2]+h[D+2],se=I+ee,_=a+U<<0,a=U+se<<0,I=(a>>>2|a<<30)^(a>>>13|a<<19)^(a>>>22|a<<10),H=(_>>>6|_<<26)^(_>>>11|_<<21)^(_>>>25|_<<7),pe=a&e,ee=pe^a&l^Re,ne=_&b^~_&m,U=c+H+ne+K[D+3]+h[D+3],se=I+ee,c=i+U<<0,i=U+se<<0;this.h0=this.h0+i<<0,this.h1=this.h1+a<<0,this.h2=this.h2+e<<0,this.h3=this.h3+l<<0,this.h4=this.h4+c<<0,this.h5=this.h5+_<<0,this.h6=this.h6+b<<0,this.h7=this.h7+m<<0},Sha256.prototype.hex=function(){this.finalize();var i=this.h0,a=this.h1,e=this.h2,l=this.h3,c=this.h4,_=this.h5,b=this.h6,m=this.h7,h=HEX_CHARS[i>>28&15]+HEX_CHARS[i>>24&15]+HEX_CHARS[i>>20&15]+HEX_CHARS[i>>16&15]+HEX_CHARS[i>>12&15]+HEX_CHARS[i>>8&15]+HEX_CHARS[i>>4&15]+HEX_CHARS[i&15]+HEX_CHARS[a>>28&15]+HEX_CHARS[a>>24&15]+HEX_CHARS[a>>20&15]+HEX_CHARS[a>>16&15]+HEX_CHARS[a>>12&15]+HEX_CHARS[a>>8&15]+HEX_CHARS[a>>4&15]+HEX_CHARS[a&15]+HEX_CHARS[e>>28&15]+HEX_CHARS[e>>24&15]+HEX_CHARS[e>>20&15]+HEX_CHARS[e>>16&15]+HEX_CHARS[e>>12&15]+HEX_CHARS[e>>8&15]+HEX_CHARS[e>>4&15]+HEX_CHARS[e&15]+HEX_CHARS[l>>28&15]+HEX_CHARS[l>>24&15]+HEX_CHARS[l>>20&15]+HEX_CHARS[l>>16&15]+HEX_CHARS[l>>12&15]+HEX_CHARS[l>>8&15]+HEX_CHARS[l>>4&15]+HEX_CHARS[l&15]+HEX_CHARS[c>>28&15]+HEX_CHARS[c>>24&15]+HEX_CHARS[c>>20&15]+HEX_CHARS[c>>16&15]+HEX_CHARS[c>>12&15]+HEX_CHARS[c>>8&15]+HEX_CHARS[c>>4&15]+HEX_CHARS[c&15]+HEX_CHARS[_>>28&15]+HEX_CHARS[_>>24&15]+HEX_CHARS[_>>20&15]+HEX_CHARS[_>>16&15]+HEX_CHARS[_>>12&15]+HEX_CHARS[_>>8&15]+HEX_CHARS[_>>4&15]+HEX_CHARS[_&15]+HEX_CHARS[b>>28&15]+HEX_CHARS[b>>24&15]+HEX_CHARS[b>>20&15]+HEX_CHARS[b>>16&15]+HEX_CHARS[b>>12&15]+HEX_CHARS[b>>8&15]+HEX_CHARS[b>>4&15]+HEX_CHARS[b&15];return this.is224||(h+=HEX_CHARS[m>>28&15]+HEX_CHARS[m>>24&15]+HEX_CHARS[m>>20&15]+HEX_CHARS[m>>16&15]+HEX_CHARS[m>>12&15]+HEX_CHARS[m>>8&15]+HEX_CHARS[m>>4&15]+HEX_CHARS[m&15]),h},Sha256.prototype.toString=Sha256.prototype.hex,Sha256.prototype.digest=function(){this.finalize();var i=this.h0,a=this.h1,e=this.h2,l=this.h3,c=this.h4,_=this.h5,b=this.h6,m=this.h7,h=[i>>24&255,i>>16&255,i>>8&255,i&255,a>>24&255,a>>16&255,a>>8&255,a&255,e>>24&255,e>>16&255,e>>8&255,e&255,l>>24&255,l>>16&255,l>>8&255,l&255,c>>24&255,c>>16&255,c>>8&255,c&255,_>>24&255,_>>16&255,_>>8&255,_&255,b>>24&255,b>>16&255,b>>8&255,b&255];return this.is224||h.push(m>>24&255,m>>16&255,m>>8&255,m&255),h},Sha256.prototype.array=Sha256.prototype.digest,Sha256.prototype.arrayBuffer=function(){this.finalize();var i=new ArrayBuffer(this.is224?28:32),a=new DataView(i);return a.setUint32(0,this.h0),a.setUint32(4,this.h1),a.setUint32(8,this.h2),a.setUint32(12,this.h3),a.setUint32(16,this.h4),a.setUint32(20,this.h5),a.setUint32(24,this.h6),this.is224||a.setUint32(28,this.h7),i};function HmacSha256(i,a,e){var l,c=typeof i;if(c==="string"){var _=[],b=i.length,m=0,h;for(l=0;l<b;++l)h=i.charCodeAt(l),h<128?_[m++]=h:h<2048?(_[m++]=192|h>>6,_[m++]=128|h&63):h<55296||h>=57344?(_[m++]=224|h>>12,_[m++]=128|h>>6&63,_[m++]=128|h&63):(h=65536+((h&1023)<<10|i.charCodeAt(++l)&1023),_[m++]=240|h>>18,_[m++]=128|h>>12&63,_[m++]=128|h>>6&63,_[m++]=128|h&63);i=_}else if(c==="object"){if(i===null)throw new Error(ERROR);if(ARRAY_BUFFER&&i.constructor===ArrayBuffer)i=new Uint8Array(i);else if(!Array.isArray(i)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(i)))throw new Error(ERROR)}else throw new Error(ERROR);i.length>64&&(i=new Sha256(a,!0).update(i).array());var D=[],I=[];for(l=0;l<64;++l){var H=i[l]||0;D[l]=92^H,I[l]=54^H}Sha256.call(this,a,e),this.update(I),this.oKeyPad=D,this.inner=!0,this.sharedMemory=e}HmacSha256.prototype=new Sha256,HmacSha256.prototype.finalize=function(){if(Sha256.prototype.finalize.call(this),this.inner){this.inner=!1;var i=this.array();Sha256.call(this,this.is224,this.sharedMemory),this.update(this.oKeyPad),this.update(i),Sha256.prototype.finalize.call(this)}};var exports=createMethod();exports.sha256=exports,exports.sha224=createMethod(!0),exports.sha256.hmac=createHmacMethod(),exports.sha224.hmac=createHmacMethod(!0),COMMON_JS?module.exports=exports:(root.sha256=exports.sha256,root.sha224=exports.sha224,AMD&&define(function(){return exports}))})()});import*as Ye from"apache-arrow";var Ir=class{constructor(a,e){this._bindings=a,this._conn=e}close(){this._bindings.disconnect(this._conn)}useUnsafe(a){return a(this._bindings,this._conn)}query(a){let e=this._bindings.runQuery(this._conn,a),l=Ye.RecordBatchReader.from(e);return console.assert(l.isSync()),console.assert(l.isFile()),new Ye.Table(l)}async send(a){let e=this._bindings.startPendingQuery(this._conn,a);for(;e==null;)e=await new Promise((_,b)=>{try{_(this._bindings.pollPendingQuery(this._conn))}catch(m){b(m)}});let l=new Lr(this._bindings,this._conn,e),c=Ye.RecordBatchReader.from(l);return console.assert(c.isSync()),console.assert(c.isStream()),c}cancelSent(){return this._bindings.cancelPendingQuery(this._conn)}getTableNames(a){return this._bindings.getTableNames(this._conn,a)}prepare(a){let e=this._bindings.createPrepared(this._conn,a);return new na(this._bindings,this._conn,e)}createScalarFunction(a,e,l){this._bindings.createScalarFunction(this._conn,a,e,l)}insertArrowTable(a,e){let l=Ye.tableToIPC(a,"stream");this.insertArrowFromIPCStream(l,e)}insertArrowFromIPCStream(a,e){this._bindings.insertArrowFromIPCStream(this._conn,a,e)}insertCSVFromPath(a,e){this._bindings.insertCSVFromPath(this._conn,a,e)}insertJSONFromPath(a,e){this._bindings.insertJSONFromPath(this._conn,a,e)}},Lr=class{constructor(a,e,l){this.bindings=a;this.conn=e;this.header=l;this._first=!0,this._depleted=!1}next(){if(this._first)return this._first=!1,{done:!1,value:this.header};if(this._depleted)return{done:!0,value:null};let a=this.bindings.fetchQueryResults(this.conn);return this._depleted=a.length==0,{done:this._depleted,value:a}}[Symbol.iterator](){return this}},na=class{constructor(a,e,l){this.bindings=a,this.connectionId=e,this.statementId=l}close(){this.bindings.closePrepared(this.connectionId,this.statementId)}query(...a){let e=this.bindings.runPrepared(this.connectionId,this.statementId,a),l=Ye.RecordBatchReader.from(e);return console.assert(l.isSync()),console.assert(l.isFile()),new Ye.Table(l)}send(...a){let e=this.bindings.sendPrepared(this.connectionId,this.statementId,a),l=new Lr(this.bindings,this.connectionId,e),c=Ye.RecordBatchReader.from(l);return console.assert(c.isSync()),console.assert(c.isStream()),c}};var _l=(a=>(a[a.SUCCESS=0]="SUCCESS",a))(_l||{});var Ya=new TextEncoder,Ha=new TextDecoder("utf-8");function ia(i,a,e){let l=Ya.encode(e),c=i._malloc(l.byteLength),_=i.HEAPU8.subarray(c,c+l.byteLength);_.set(l),i.HEAPF64[(a>>3)+0]=1,i.HEAPF64[(a>>3)+1]=c,i.HEAPF64[(a>>3)+2]=_.byteLength}function oa(i){switch(i){case"UINT8":case"INT8":return 1;case"INT32":case"FLOAT":return 4;case"INT64":case"UINT64":case"DOUBLE":case"VARCHAR":return 8;default:return 0}}function aa(i,a,e,l){let c=i.HEAPU8.subarray(a,a+l*oa(e));switch(e){case"UINT8":return new Uint8Array(c.buffer,c.byteOffset,l);case"INT8":return new Int8Array(c.buffer,c.byteOffset,l);case"INT32":return new Int32Array(c.buffer,c.byteOffset,l);case"FLOAT":return new Float32Array(c.buffer,c.byteOffset,l);case"DOUBLE":return new Float64Array(c.buffer,c.byteOffset,l);case"VARCHAR":return new Float64Array(c.buffer,c.byteOffset,l);default:return new Array(0)}}function Wa(i,a,e){let l=i.HEAPU8.subarray(a,a+e);return new Uint8Array(l.buffer,l.byteOffset,e)}function Ur(i,a,e){let l=i.HEAPU8.subarray(a,a+e*8);return new Float64Array(l.buffer,l.byteOffset,e)}function xr(i,a,e,l,c,_,b,m){try{let h=i._udfFunctions.get(l);if(!h){ia(a,e,"Unknown UDF with id: "+l);return}let D=Ha.decode(a.HEAPU8.subarray(c,c+_)),I=JSON.parse(D),H=Ur(a,b,m/8),ee=z=>{var Ae;let w=null;switch(z.validityBuffer!==void 0&&(w=Wa(a,H[z.validityBuffer],I.rows)),z.physicalType){case"VARCHAR":{if(z.dataBuffer===null||z.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for VARCHAR argument");if(z.lengthBuffer===null||z.lengthBuffer===void 0)throw new Error("malformed data view, expected data length buffer for VARCHAR argument");let Ce=aa(a,H[z.dataBuffer],z.physicalType,I.rows),he=[],fe=Ur(a,H[z.lengthBuffer],I.rows);for(let X=0;X<I.rows;++X){if(w!=null&&!w[X]){he.push(null);continue}let Ee=a.HEAPU8.subarray(Ce[X],Ce[X]+fe[X]),ye=Ha.decode(Ee);he.push(ye)}return X=>he[X]}case"STRUCT":{let Ce={},he=[];for(let fe=0;fe<(((Ae=z.children)==null?void 0:Ae.length)||0);++fe){let X=z.children[fe],Ee=ee(X);he.push(ye=>{Ce[X.name]=Ee(ye)})}return w!=null?fe=>{if(!w[fe])return null;for(let X of he)X(fe);return Ce}:fe=>{for(let X of he)X(fe);return Ce}}default:{if(z.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for argument of type: "+z.physicalType);let Ce=aa(a,H[z.dataBuffer],z.physicalType,I.rows);return w!=null?he=>w[he]?Ce[he]:null:he=>Ce[he]}}},U=[];for(let z=0;z<I.args.length;++z)U.push(ee(I.args[z]));let se=I.rows*oa(I.ret.physicalType),ne=a._malloc(se),oe=aa(a,ne,I.ret.physicalType,I.rows),ie=a._malloc(I.rows),Re=Wa(a,ie,I.rows);if(oe.length==0||Re.length==0){ia(a,e,"Can't create physical arrays for result");return}let pe=oe;I.ret.physicalType=="VARCHAR"&&(pe=new Array(I.rows));let ve=[];for(let z=0;z<I.args.length;++z)ve.push(null);for(let z=0;z<I.rows;++z){for(let Ae=0;Ae<I.args.length;++Ae)ve[Ae]=U[Ae](z);let w=h.func(...ve);pe[z]=w,Re[z]=w==null?0:1}let jt=0;switch(I.ret.physicalType){case"VARCHAR":{let z=new Array(0);jt=a._malloc(I.rows*oa("DOUBLE"));let w=Ur(a,jt,I.rows),Ae=0;for(let X=0;X<I.rows;++X){let Ee=Ya.encode(pe[X]||"");z.push(Ee),w[X]=Ee.length,Ae+=Ee.length}let Ce=a._malloc(Ae),he=a.HEAPU8.subarray(Ce,Ce+Ae),fe=0;for(let X=0;X<I.rows;++X){oe[X]=fe;let Ee=z[X];he.subarray(fe,fe+Ee.length).set(Ee),fe+=Ee.length}}}let we=3*8,Qe=a._malloc(we),Ue=Ur(a,Qe,3);Ue[0]=ne,Ue[1]=ie,Ue[2]=jt,a.HEAPF64[(e>>3)+0]=0,a.HEAPF64[(e>>3)+1]=Qe,a.HEAPF64[(e>>3)+2]=0}catch(h){ia(a,e,h.toString())}}function dl(){let i=new TextDecoder;return a=>(typeof SharedArrayBuffer<"u"&&a.buffer instanceof SharedArrayBuffer&&(a=new Uint8Array(a)),i.decode(a))}var fl=dl();function Be(i,a){console.error(`FAIL WITH: ${a}`),i.ccall("duckdb_web_fail_with",null,["string"],[a])}function bt(i,a,e){let l=i.HEAPU8.subarray(a,a+e),c=new Uint8Array(new ArrayBuffer(l.byteLength));return c.set(l),c}function G(i,a,e){return fl(i.HEAPU8.subarray(a,a+e))}var sa=(b=>(b[b.BUFFER=0]="BUFFER",b[b.NODE_FS=1]="NODE_FS",b[b.BROWSER_FILEREADER=2]="BROWSER_FILEREADER",b[b.BROWSER_FSACCESS=3]="BROWSER_FSACCESS",b[b.HTTP=4]="HTTP",b[b.S3=5]="S3",b))(sa||{}),za=(b=>(b[b.FILE_FLAGS_READ=1]="FILE_FLAGS_READ",b[b.FILE_FLAGS_WRITE=2]="FILE_FLAGS_WRITE",b[b.FILE_FLAGS_DIRECT_IO=4]="FILE_FLAGS_DIRECT_IO",b[b.FILE_FLAGS_FILE_CREATE=8]="FILE_FLAGS_FILE_CREATE",b[b.FILE_FLAGS_FILE_CREATE_NEW=16]="FILE_FLAGS_FILE_CREATE_NEW",b[b.FILE_FLAGS_APPEND=32]="FILE_FLAGS_APPEND",b))(za||{});function Q(i,a,e,l){let c=i.stackSave(),_=i.stackAlloc(3*8);e.unshift("number"),l.unshift(_),i.ccall(a,null,e,l);let b=i.HEAPF64[(_>>3)+0],m=i.HEAPF64[(_>>3)+1],h=i.HEAPF64[(_>>3)+2];return i.stackRestore(c),[b,m,h]}function te(i){i.ccall("duckdb_web_clear_response",null,[],[])}var Xa={_udfFunctions:new Map,testPlatformFeature:(i,a)=>!1,getDefaultDataProtocol:i=>0,openFile:(i,a,e)=>{},syncFile:(i,a)=>{},closeFile:(i,a)=>{},getLastFileModificationTime:(i,a)=>0,truncateFile:(i,a,e)=>{},readFile:(i,a,e,l,c)=>0,writeFile:(i,a,e,l,c)=>0,removeDirectory:(i,a,e)=>{},checkDirectory:(i,a,e)=>!1,createDirectory:(i,a,e)=>{},listDirectoryEntries:(i,a,e)=>!1,glob:(i,a,e)=>{},moveFile:(i,a,e,l,c)=>{},checkFile:(i,a,e)=>!1,removeFile:(i,a,e)=>{},callScalarUDF:(i,a,e,l,c,_,b)=>{xr(Xa,i,a,e,l,c,_,b)}};var Or=class{constructor(a){let e=new Float64Array(a.buffer,a.byteOffset,a.byteLength/8),l=new Uint8Array(new ArrayBuffer(a.byteLength));l.set(a.subarray(7*8)),this.totalFileReadsCold=e[0],this.totalFileReadsAhead=e[1],this.totalFileReadsCached=e[2],this.totalFileWrites=e[3],this.totalPageAccesses=e[4],this.totalPageLoads=e[5],this.blockSize=e[6],this.blockStats=l}getBlockStats(a,e){return e=e||{file_reads_cold:0,file_reads_ahead:0,file_reads_cached:0,file_writes:0,page_accesses:0,page_loads:0},e.file_writes=this.blockStats[a*3+0]&15,e.file_reads_cold=this.blockStats[a*3+0]>>4,e.file_reads_ahead=this.blockStats[a*3+1]&15,e.file_reads_cached=this.blockStats[a*3+1]>>4,e.page_accesses=this.blockStats[a*3+1]&15,e.page_loads=this.blockStats[a*3+1]>>4,e}};import*as q from"apache-arrow";function Ct(i){switch(i.typeId){case q.Type.Binary:return{sqlType:"binary"};case q.Type.Bool:return{sqlType:"bool"};case q.Type.Date:return{sqlType:"date"};case q.Type.DateDay:return{sqlType:"date32[d]"};case q.Type.DateMillisecond:return{sqlType:"date64[ms]"};case q.Type.Decimal:{let a=i;return{sqlType:"decimal",precision:a.precision,scale:a.scale}}case q.Type.Float:return{sqlType:"float"};case q.Type.Float16:return{sqlType:"float16"};case q.Type.Float32:return{sqlType:"float32"};case q.Type.Float64:return{sqlType:"float64"};case q.Type.Int:return{sqlType:"int32"};case q.Type.Int16:return{sqlType:"int16"};case q.Type.Int32:return{sqlType:"int32"};case q.Type.Int64:return{sqlType:"int64"};case q.Type.Uint16:return{sqlType:"uint16"};case q.Type.Uint32:return{sqlType:"uint32"};case q.Type.Uint64:return{sqlType:"uint64"};case q.Type.Uint8:return{sqlType:"uint8"};case q.Type.IntervalDayTime:return{sqlType:"interval[dt]"};case q.Type.IntervalYearMonth:return{sqlType:"interval[m]"};case q.Type.List:return{sqlType:"list",valueType:Ct(i.valueType)};case q.Type.FixedSizeBinary:return{sqlType:"fixedsizebinary",byteWidth:i.byteWidth};case q.Type.Null:return{sqlType:"null"};case q.Type.Utf8:return{sqlType:"utf8"};case q.Type.Struct:return{sqlType:"struct",fields:i.children.map(e=>Nr(e.name,e.type))};case q.Type.Map:{let a=i;return{sqlType:"map",keyType:Ct(a.keyType),valueType:Ct(a.valueType)}}case q.Type.Time:return{sqlType:"time[s]"};case q.Type.TimeMicrosecond:return{sqlType:"time[us]"};case q.Type.TimeMillisecond:return{sqlType:"time[ms]"};case q.Type.TimeNanosecond:return{sqlType:"time[ns]"};case q.Type.TimeSecond:return{sqlType:"time[s]"};case q.Type.Timestamp:return{sqlType:"timestamp",timezone:i.timezone||void 0};case q.Type.TimestampSecond:return{sqlType:"timestamp[s]",timezone:i.timezone||void 0};case q.Type.TimestampMicrosecond:return{sqlType:"timestamp[us]",timezone:i.timezone||void 0};case q.Type.TimestampNanosecond:return{sqlType:"timestamp[ns]",timezone:i.timezone||void 0};case q.Type.TimestampMillisecond:return{sqlType:"timestamp[ms]",timezone:i.timezone||void 0}}throw new Error(`unsupported arrow type: ${i.toString()}`)}function Nr(i,a){let e=Ct(a);return e.name=i,e}var bl=new TextEncoder,ml=(_=>(_[_.WASM_EXCEPTIONS=1]="WASM_EXCEPTIONS",_[_.WASM_THREADS=2]="WASM_THREADS",_[_.WASM_SIMD=4]="WASM_SIMD",_[_.WASM_BULK_MEMORY=8]="WASM_BULK_MEMORY",_[_.EMIT_BIGINT=16]="EMIT_BIGINT",_))(ml||{}),Pr=class{constructor(a,e){this._instance=null;this._initPromise=null;this._initPromiseResolver=()=>{};this.onInstantiationProgress=[];this._logger=a,this._runtime=e,this._nextUDFId=1}get logger(){return this._logger}get mod(){return this._instance}get pthread(){return this.mod.PThread||null}async instantiate(a=e=>{}){return this._instance!=null?this:(this._initPromise!=null&&(this.onInstantiationProgress.push(a),await this._initPromise),this._initPromise=new Promise(e=>{this._initPromiseResolver=e}),this.onInstantiationProgress=[a],this._instance=await this.instantiateImpl({print:console.log.bind(console),printErr:console.log.bind(console),onRuntimeInitialized:this._initPromiseResolver}),await this._initPromise,this._initPromise=null,this.onInstantiationProgress=this.onInstantiationProgress.filter(e=>e!=a),this)}open(a){let[e,l,c]=Q(this.mod,"duckdb_web_open",["string"],[JSON.stringify(a)]);if(e!==0)throw new Error(G(this.mod,l,c));te(this.mod)}reset(){let[a,e,l]=Q(this.mod,"duckdb_web_reset",[],[]);if(a!==0)throw new Error(G(this.mod,e,l));te(this.mod)}getVersion(){let[a,e,l]=Q(this.mod,"duckdb_web_get_version",[],[]);if(a!==0)throw new Error(G(this.mod,e,l));let c=G(this.mod,e,l);return te(this.mod),c}getFeatureFlags(){return this.mod.ccall("duckdb_web_get_feature_flags","number",[],[])}tokenize(a){let[e,l,c]=Q(this.mod,"duckdb_web_tokenize",["string"],[a]);if(e!==0)throw new Error(G(this.mod,l,c));let _=G(this.mod,l,c);return te(this.mod),JSON.parse(_)}connect(){let a=this.mod.ccall("duckdb_web_connect","number",[],[]);return new Ir(this,a)}disconnect(a){if(this.mod.ccall("duckdb_web_disconnect",null,["number"],[a]),this.pthread)for(let e of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])e.postMessage({cmd:"dropUDFFunctions",connectionId:a})}runQuery(a,e){let[l,c,_]=Q(this.mod,"duckdb_web_query_run",["number","string"],[a,e]);if(l!==0)throw new Error(G(this.mod,c,_));let b=bt(this.mod,c,_);return te(this.mod),b}startPendingQuery(a,e){let[l,c,_]=Q(this.mod,"duckdb_web_pending_query_start",["number","string"],[a,e]);if(l!==0)throw new Error(G(this.mod,c,_));if(c==0)return null;let b=bt(this.mod,c,_);return te(this.mod),b}pollPendingQuery(a){let[e,l,c]=Q(this.mod,"duckdb_web_pending_query_poll",["number"],[a]);if(e!==0)throw new Error(G(this.mod,l,c));if(l==0)return null;let _=bt(this.mod,l,c);return te(this.mod),_}cancelPendingQuery(a){return this.mod.ccall("duckdb_web_pending_query_cancel","boolean",["number"],[a])}fetchQueryResults(a){let[e,l,c]=Q(this.mod,"duckdb_web_query_fetch_results",["number"],[a]);if(e!==0)throw new Error(G(this.mod,l,c));let _=bt(this.mod,l,c);return te(this.mod),_}getTableNames(a,e){let[l,c,_]=Q(this.mod,"duckdb_web_get_tablenames",["number","string"],[a,e]);if(l!==0)throw new Error(G(this.mod,c,_));let b=G(this.mod,c,_);return te(this.mod),JSON.parse(b)}createScalarFunction(a,e,l,c){let _={functionId:this._nextUDFId,name:e,returnType:Ct(l)},b={functionId:_.functionId,connectionId:a,name:e,returnType:l,func:c};this._nextUDFId+=1;let[m,h,D]=Q(this.mod,"duckdb_web_udf_scalar_create",["number","string"],[a,JSON.stringify(_)]);if(m!==0)throw new Error(G(this.mod,h,D));if(te(this.mod),globalThis.DUCKDB_RUNTIME._udfFunctions=(globalThis.DUCKDB_RUNTIME._udfFunctions||new Map).set(b.functionId,b),this.pthread)for(let I of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])I.postMessage({cmd:"registerUDFFunction",udf:b})}createPrepared(a,e){let[l,c,_]=Q(this.mod,"duckdb_web_prepared_create",["number","string"],[a,e]);if(l!==0)throw new Error(G(this.mod,c,_));return te(this.mod),c}closePrepared(a,e){let[l,c,_]=Q(this.mod,"duckdb_web_prepared_close",["number","number"],[a,e]);if(l!==0)throw new Error(G(this.mod,c,_));te(this.mod)}runPrepared(a,e,l){let[c,_,b]=Q(this.mod,"duckdb_web_prepared_run",["number","number","string"],[a,e,JSON.stringify(l)]);if(c!==0)throw new Error(G(this.mod,_,b));let m=bt(this.mod,_,b);return te(this.mod),m}sendPrepared(a,e,l){let[c,_,b]=Q(this.mod,"duckdb_web_prepared_send",["number","number","string"],[a,e,JSON.stringify(l)]);if(c!==0)throw new Error(G(this.mod,_,b));let m=bt(this.mod,_,b);return te(this.mod),m}insertArrowFromIPCStream(a,e,l){if(e.length==0)return;let c=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(c,c+e.length).set(e);let b=l?JSON.stringify(l):"",[m,h,D]=Q(this.mod,"duckdb_web_insert_arrow_from_ipc_stream",["number","number","number","string"],[a,c,e.length,b]);if(m!==0)throw new Error(G(this.mod,h,D))}insertCSVFromPath(a,e,l){if(l.columns!==void 0){l.columnsFlat=[];for(let D in l.columns)l.columnsFlat.push(Nr(D,l.columns[D]))}let c={...l};c.columns=c.columnsFlat,delete c.columnsFlat;let _=JSON.stringify(c),[b,m,h]=Q(this.mod,"duckdb_web_insert_csv_from_path",["number","string","string"],[a,e,_]);if(b!==0)throw new Error(G(this.mod,m,h))}insertJSONFromPath(a,e,l){if(l.columns!==void 0){l.columnsFlat=[];for(let D in l.columns)l.columnsFlat.push(Nr(D,l.columns[D]))}let c={...l};c.columns=c.columnsFlat,delete c.columnsFlat;let _=JSON.stringify(c),[b,m,h]=Q(this.mod,"duckdb_web_insert_json_from_path",["number","string","string"],[a,e,_]);if(b!==0)throw new Error(G(this.mod,m,h))}globFiles(a){let[e,l,c]=Q(this.mod,"duckdb_web_fs_glob_file_infos",["string"],[a]);if(e!==0)throw new Error(G(this.mod,l,c));let _=G(this.mod,l,c);te(this.mod);let b=JSON.parse(_);return b==null?[]:b}registerFileURL(a,e,l,c=!1){e===void 0&&(e=a);let[_,b,m]=Q(this.mod,"duckdb_web_fs_register_file_url",["string","string"],[a,e,l,c]);if(_!==0)throw new Error(G(this.mod,b,m));te(this.mod)}registerFileText(a,e){let l=bl.encode(e);this.registerFileBuffer(a,l)}registerFileBuffer(a,e){let l=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(l,l+e.length).set(e);let[_,b,m]=Q(this.mod,"duckdb_web_fs_register_file_buffer",["string","number","number"],[a,l,e.length]);if(_!==0)throw new Error(G(this.mod,b,m));te(this.mod)}registerFileHandle(a,e,l,c){let[_,b,m]=Q(this.mod,"duckdb_web_fs_register_file_url",["string","string","number","boolean"],[a,a,l,c]);if(_!==0)throw new Error(G(this.mod,b,m));if(te(this.mod),globalThis.DUCKDB_RUNTIME._files=(globalThis.DUCKDB_RUNTIME._files||new Map).set(a,e),this.pthread){for(let h of this.pthread.runningWorkers)h.postMessage({cmd:"registerFileHandle",fileName:a,fileHandle:e});for(let h of this.pthread.unusedWorkers)h.postMessage({cmd:"dropFileHandle",fileName:a})}}dropFile(a){let[e,l,c]=Q(this.mod,"duckdb_web_fs_drop_file",["string"],[a]);if(e!==0)throw new Error(G(this.mod,l,c));te(this.mod)}dropFiles(){let[a,e,l]=Q(this.mod,"duckdb_web_fs_drop_files",[],[]);if(a!==0)throw new Error(G(this.mod,e,l));te(this.mod)}flushFiles(){this.mod.ccall("duckdb_web_flush_files",null,[],[])}copyFileToPath(a,e){let[l,c,_]=Q(this.mod,"duckdb_web_copy_file_to_path",["string","string"],[a,e]);if(l!==0)throw new Error(G(this.mod,c,_));te(this.mod)}copyFileToBuffer(a){let[e,l,c]=Q(this.mod,"duckdb_web_copy_file_to_buffer",["string"],[a]);if(e!==0)throw new Error(G(this.mod,l,c));let _=this.mod.HEAPU8.subarray(l,l+c),b=new Uint8Array(_.length);return b.set(_),te(this.mod),b}collectFileStatistics(a,e){let[l,c,_]=Q(this.mod,"duckdb_web_collect_file_stats",["string","boolean"],[a,e]);if(l!==0)throw new Error(G(this.mod,c,_))}exportFileStatistics(a){let[e,l,c]=Q(this.mod,"duckdb_web_export_file_stats",["string"],[a]);if(e!==0)throw new Error(G(this.mod,l,c));return new Or(this.mod.HEAPU8.subarray(l,l+c))}};var pl=(c=>(c[c.UNDEFINED=0]="UNDEFINED",c[c.AUTOMATIC=1]="AUTOMATIC",c[c.READ_ONLY=2]="READ_ONLY",c[c.READ_WRITE=3]="READ_WRITE",c))(pl||{});var hl=(e=>(e.ROW_ARRAY="row-array",e.COLUMN_OBJECT="column-object",e))(hl||{});var yl=(_=>(_[_.NONE=0]="NONE",_[_.DEBUG=1]="DEBUG",_[_.INFO=2]="INFO",_[_.WARNING=3]="WARNING",_[_.ERROR=4]="ERROR",_))(yl||{}),gl=(b=>(b[b.NONE=0]="NONE",b[b.CONNECT=1]="CONNECT",b[b.DISCONNECT=2]="DISCONNECT",b[b.OPEN=3]="OPEN",b[b.QUERY=4]="QUERY",b[b.INSTANTIATE=5]="INSTANTIATE",b))(gl||{}),vl=(b=>(b[b.NONE=0]="NONE",b[b.OK=1]="OK",b[b.ERROR=2]="ERROR",b[b.START=3]="START",b[b.RUN=4]="RUN",b[b.CAPTURE=5]="CAPTURE",b))(vl||{}),wl=(_=>(_[_.NONE=0]="NONE",_[_.WEB_WORKER=1]="WEB_WORKER",_[_.NODE_WORKER=2]="NODE_WORKER",_[_.BINDINGS=3]="BINDINGS",_[_.ASYNC_DUCKDB=4]="ASYNC_DUCKDB",_))(wl||{}),qa=class{log(a){}},Ka=class{constructor(a=2){this.level=a}log(a){a.level>=this.level&&console.log(a)}};function zl(i){switch(i){case 0:return"NONE";case 1:return"DEBUG";case 2:return"INFO";case 3:return"WARNING";case 4:return"ERROR";default:return"?"}}function Xl(i){switch(i){case 0:return"NONE";case 1:return"OK";case 2:return"ERROR";case 3:return"START";case 4:return"RUN";case 5:return"CAPTURE";default:return"?"}}function ql(i){switch(i){case 1:return"CONNECT";case 2:return"DISCONNECT";case 5:return"INSTANTIATE";case 3:return"OPEN";case 4:return"QUERY";default:return"?"}}function Kl(i){switch(i){case 0:return"NONE";case 1:return"WEB WORKER";case 2:return"NODE WORKER";case 3:return"DUCKDB BINDINGS";case 4:return"DUCKDB";default:return"?"}}var Va=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),$a=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11]));var Qa=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11]));var Ja=()=>(async i=>{try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(i)}catch(a){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]));var Br={name:"@duckdb/duckdb-wasm",version:"1.11.0",description:"DuckDB powered by WebAssembly",license:"MIT",repository:{type:"git",url:"https://github.com/duckdb/duckdb-wasm.git"},keywords:["sql","duckdb","relational","database","data","query","wasm","analytics","olap","arrow","parquet","json","csv"],dependencies:{"apache-arrow":"^11.0.0"},devDependencies:{"@types/emscripten":"^1.39.6","@types/jasmine":"^4.3.1","@typescript-eslint/eslint-plugin":"^5.53.0","@typescript-eslint/parser":"^5.49.0",esbuild:"^0.15.12",eslint:"^8.35.0","eslint-plugin-jasmine":"^4.1.3","eslint-plugin-react":"^7.32.2","fast-glob":"^3.2.12",jasmine:"^4.5.0","jasmine-core":"^5.0.0","jasmine-spec-reporter":"^7.0.0","js-sha256":"^0.9.0",karma:"^6.4.2","karma-chrome-launcher":"^3.1.1","karma-coverage":"^2.2.0","karma-firefox-launcher":"^2.1.2","karma-jasmine":"^5.1.0","karma-jasmine-html-reporter":"^2.0.0","karma-sourcemap-loader":"^0.3.8","karma-spec-reporter":"^0.0.36","make-dir":"^3.1.0",nyc:"^15.1.0",prettier:"^2.8.4",puppeteer:"^19.10.0",rimraf:"^4.3.0",s3rver:"^3.7.1",typedoc:"^0.24.8",typescript:"^4.8.4","wasm-feature-detect":"^1.5.1","web-worker":"^1.2.0"},scripts:{"build:debug":"node bundle.mjs debug && tsc --emitDeclarationOnly","build:release":"node bundle.mjs release && tsc --emitDeclarationOnly",docs:"typedoc",report:"node ./coverage.mjs","test:node":"node --enable-source-maps --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:node:debug":"node --inspect-brk --enable-source-maps --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:node:coverage":"nyc -r json --report-dir ./coverage/node node --experimental-wasm-eh ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:firefox":"karma start ./karma/tests-firefox.cjs","test:chrome":"karma start ./karma/tests-chrome.cjs","test:chrome:eh":"karma start ./karma/tests-chrome-eh.cjs","test:chrome:coverage":"karma start ./karma/tests-chrome-coverage.cjs","test:browser":"karma start ./karma/tests-all.cjs","test:browser:debug":"karma start ./karma/tests-debug.cjs",test:"npm run test:chrome && npm run test:node","test:coverage":"npm run test:chrome:coverage && npm run test:node:coverage && npm run report",lint:"eslint src test"},files:["dist","!dist/types/test"],main:"dist/duckdb-browser.cjs",module:"dist/duckdb-browser.mjs",types:"dist/duckdb-browser.d.ts",jsdelivr:"dist/duckdb-browser.cjs",unpkg:"dist/duckdb-browser.mjs",sideEffects:!1,browser:{fs:!1,path:!1,perf_hooks:!1,os:!1,worker_threads:!1},exports:{"./dist/duckdb-mvp.wasm":"./dist/duckdb-mvp.wasm","./dist/duckdb-eh.wasm":"./dist/duckdb-eh.wasm","./dist/duckdb-coi.wasm":"./dist/duckdb-coi.wasm","./dist/duckdb-browser":"./dist/duckdb-browser.mjs","./dist/duckdb-browser.cjs":"./dist/duckdb-browser.cjs","./dist/duckdb-browser.mjs":"./dist/duckdb-browser.mjs","./dist/duckdb-browser-blocking":"./dist/duckdb-browser-blocking.mjs","./dist/duckdb-browser-blocking.mjs":"./dist/duckdb-browser-blocking.mjs","./dist/duckdb-browser-blocking.cjs":"./dist/duckdb-browser-blocking.cjs","./dist/duckdb-browser-coi.pthread.worker.js":"./dist/duckdb-browser-coi.pthread.worker.js","./dist/duckdb-browser-coi.worker.js":"./dist/duckdb-browser-coi.worker.js","./dist/duckdb-browser-eh.worker.js":"./dist/duckdb-browser-eh.worker.js","./dist/duckdb-browser-mvp.worker.js":"./dist/duckdb-browser-mvp.worker.js","./dist/duckdb-node":"./dist/duckdb-node.cjs","./dist/duckdb-node.cjs":"./dist/duckdb-node.cjs","./dist/duckdb-node-blocking":"./dist/duckdb-node-blocking.cjs","./dist/duckdb-node-blocking.cjs":"./dist/duckdb-node-blocking.cjs","./dist/duckdb-node-eh.worker.cjs":"./dist/duckdb-node-eh.worker.cjs","./dist/duckdb-node-mvp.worker.cjs":"./dist/duckdb-node-mvp.worker.cjs","./blocking":{browser:{types:"./dist/duckdb-browser-blocking.d.ts",import:"./dist/duckdb-browser-blocking.mjs",require:"./dist/duckdb-browser-blocking.cjs"},node:{types:"./dist/duckdb-node-blocking.d.ts",require:"./dist/duckdb-node-blocking.cjs",import:"./dist/duckdb-node-blocking.cjs"},types:"./dist/duckdb-browser-blocking.d.ts",import:"./dist/duckdb-browser-blocking.mjs",require:"./dist/duckdb-browser-blocking.cjs"},".":{browser:{types:"./dist/duckdb-browser.d.ts",import:"./dist/duckdb-browser.mjs",require:"./dist/duckdb-browser.cjs"},node:{types:"./dist/duckdb-node.d.ts",import:"./dist/duckdb-node.cjs",require:"./dist/duckdb-node.cjs"},types:"./dist/duckdb-browser.d.ts",import:"./dist/duckdb-browser.mjs",require:"./dist/duckdb-browser.cjs"}}};var Za=Br.name,eo=Br.version,la=Br.version.split("."),Jl=la[0],Zl=la[1],ec=la[2];var to=()=>typeof navigator>"u",ro=()=>to()?"node":navigator.userAgent,nc=()=>ro().includes("Firefox"),ic=()=>/^((?!chrome|android).)*safari/i.test(ro());function ac(){let i=`https://cdn.jsdelivr.net/npm/${Za}@${eo}/dist/`;return{mvp:{mainModule:`${i}duckdb-mvp.wasm`,mainWorker:`${i}duckdb-browser-mvp.worker.js`},eh:{mainModule:`${i}duckdb-eh.wasm`,mainWorker:`${i}duckdb-browser-eh.worker.js`}}}var ca=null,ua=null,_a=null,da=null,fa=null;async function ba(){return ca==null&&(ca=typeof BigInt64Array<"u"),ua==null&&(ua=await $a()),_a==null&&(_a=await Ja()),da==null&&(da=await Qa()),fa==null&&(fa=await Va()),{bigInt64Array:ca,crossOriginIsolated:to()||globalThis.crossOriginIsolated||!1,wasmExceptions:ua,wasmSIMD:da,wasmThreads:_a,wasmBulkMemory:fa}}async function oc(i){let a=await ba();if(a.wasmExceptions){if(a.wasmSIMD&&a.wasmThreads&&a.crossOriginIsolated&&i.coi)return{mainModule:i.coi.mainModule,mainWorker:i.coi.mainWorker,pthreadWorker:i.coi.pthreadWorker};if(i.eh)return{mainModule:i.eh.mainModule,mainWorker:i.eh.mainWorker,pthreadWorker:null}}return{mainModule:i.mvp.mainModule,mainWorker:i.mvp.mainWorker,pthreadWorker:null}}var tt=ra(no()),io=function(i,a,e){var l;if((l=i==null?void 0:i.endpoint)!=null&&l.startsWith("http")){let c=`${i==null?void 0:i.endpoint}`,_=c.indexOf("://")+3;return c.substring(_)}else return i!=null&&i.endpoint?`${e}.${i==null?void 0:i.endpoint}`:`${e}.s3.amazonaws.com`};function kl(i,a,e){var _,b,m,h;let l=ao(a),c=l.path;return oo(i)&&(c=`/${l.bucket}${c}`),{url:c,query:"",host:io(i,a,l.bucket),region:(_=i==null?void 0:i.region)!=null?_:"",service:"s3",method:e,accessKeyId:(b=i==null?void 0:i.accessKeyId)!=null?b:"",secretAccessKey:(m=i==null?void 0:i.secretAccessKey)!=null?m:"",sessionToken:(h=i==null?void 0:i.sessionToken)!=null?h:"",dateNow:new Date().toISOString().replace(/-/g,"").split("T")[0],datetimeNow:new Date().toISOString().replace(/-/g,"").replace(/:/g,"").split(".")[0]+"Z"}}function Cl(i,a=!1){let e="0123456789ABCDEF",l="";for(let c=0;c<i.length;c++){let _=i[c];_>="A"&&_<="Z"||_>="a"&&_<="z"||_>="0"&&_<="9"||_=="_"||_=="-"||_=="~"||_=="."?l+=_:_=="/"?a?l+="%2F":l+=_:(l+="%",l+=e[_.charCodeAt(0)>>4],l+=e[_.charCodeAt(0)&15])}return l}function Tl(i,a=null){var se;let e=(se=a==null?void 0:a.contentHash)!=null?se:"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",l=new Map;l.set("x-amz-date",i.datetimeNow),l.set("x-amz-content-sha256",e),i.sessionToken&&l.set("x-amz-security-token",i.sessionToken);let c="";a!=null&&a.contentType&&(c+="content-type;"),c+="host;x-amz-content-sha256;x-amz-date",i.sessionToken&&(c+=";x-amz-security-token");let _=i.method+`
`+Cl(i.url)+`
`+i.query;a!=null&&a.contentType&&(_+=`
content-type:`+(a==null?void 0:a.contentType)),_+=`
host:`+i.host+`
x-amz-content-sha256:`+e+`
x-amz-date:`+i.datetimeNow,i.sessionToken&&i.sessionToken.length>0&&(_+=`
x-amz-security-token:`+i.sessionToken),_+=`

`+c+`
`+e;let b=(0,tt.sha256)(_),m=`AWS4-HMAC-SHA256
`+i.datetimeNow+`
`+i.dateNow+"/"+i.region+"/"+i.service+`/aws4_request
`+b,h="AWS4"+i.secretAccessKey,D=tt.sha256.hmac.arrayBuffer(h,i.dateNow),I=tt.sha256.hmac.arrayBuffer(D,i.region),H=tt.sha256.hmac.arrayBuffer(I,i.service),ee=tt.sha256.hmac.arrayBuffer(H,"aws4_request"),U=tt.sha256.hmac(ee,m);return l.set("Authorization","AWS4-HMAC-SHA256 Credential="+i.accessKeyId+"/"+i.dateNow+"/"+i.region+"/"+i.service+"/aws4_request, SignedHeaders="+c+", Signature="+U),l}var jl=function(i,a,e,l=null,c=null){let _=kl(i,a,e),b={contentType:l,contentHash:c?tt.sha256.hex(c):null};return Tl(_,b)};function Ge(i,a,e,l,c=null,_=null){((a==null?void 0:a.accessKeyId)||(a==null?void 0:a.sessionToken))&&(jl(a,e,l,c,_).forEach((m,h)=>{i.setRequestHeader(h,m)}),c&&i.setRequestHeader("content-type",c))}function ao(i){if(i.indexOf("s3://")!=0)throw new Error("URL needs to start with s3://");let a=i.indexOf("/",5);if(a==-1)throw new Error("URL needs to contain a '/' after the host");let e=i.substring(5,a);if(!e)throw new Error("URL needs to contain a bucket name");let l=i.substring(a);if(!l)throw new Error("URL needs to contain key");return{bucket:e,path:l}}function oo(i){var a;return!!((a=i==null?void 0:i.endpoint)!=null&&a.startsWith("http"))}function ze(i,a){let e=ao(a);return oo(i)?`${i==null?void 0:i.endpoint}/${e.bucket}`+e.path:"https://"+io(i,a,e.bucket)+e.path}var V={_files:new Map,_fileInfoCache:new Map,_udfFunctions:new Map,_globalFileInfo:null,getFileInfo(i,a){try{let e=V._fileInfoCache.get(a),[l,c,_]=Q(i,"duckdb_web_fs_get_file_info_by_id",["number","number"],[a,(e==null?void 0:e.cacheEpoch)||0]);if(l!==0)return null;if(_===0)return e;let b=G(i,c,_);te(i);let m=JSON.parse(b);if(m==null)return null;let h={...m,blob:null};return V._fileInfoCache.set(a,h),h}catch(e){return null}},getGlobalFileInfo(i){var a;try{let[e,l,c]=Q(i,"duckdb_web_get_global_file_info",["number"],[((a=V._globalFileInfo)==null?void 0:a.cacheEpoch)||0]);if(e!==0)return null;if(c===0)return V._globalFileInfo;let _=G(i,l,c);te(i);let b=JSON.parse(_);return b==null?null:(V._globalFileInfo={...b,blob:null},V._globalFileInfo)}catch(e){return null}},testPlatformFeature:(i,a)=>{switch(a){case 1:return typeof BigInt64Array<"u";default:return console.warn(`test for unknown feature: ${a}`),!1}},getDefaultDataProtocol(i){return 2},openFile:(i,a,e)=>{var l;try{V._fileInfoCache.delete(a);let c=V.getFileInfo(i,a);switch(c==null?void 0:c.dataProtocol){case 4:case 5:{if(e&1&&e&2)throw new Error(`Opening file ${c.fileName} failed: cannot open file with both read and write flags set`);if(e&32)throw new Error(`Opening file ${c.fileName} failed: appending to HTTP/S3 files is not supported`);if(e&2){let m=new XMLHttpRequest;if(c.dataProtocol==5?(m.open("HEAD",ze(c.s3Config,c.dataUrl),!1),Ge(m,c.s3Config,c.dataUrl,"HEAD")):m.open("HEAD",c.dataUrl,!1),m.send(null),m.status!=200&&m.status!=404)throw new Error(`Opening file ${c.fileName} failed: Unexpected return status from server (${m.status})`);if(m.status==404&&!(e&8||e&16))throw new Error(`Opening file ${c.fileName} failed: Cannot write to non-existent file without FILE_FLAGS_FILE_CREATE or FILE_FLAGS_FILE_CREATE_NEW flag.`);let h=i._malloc(1),D=new Uint8Array;i.HEAPU8.set(D,h);let I=i._malloc(2*8);return i.HEAPF64[(I>>3)+0]=1,i.HEAPF64[(I>>3)+1]=h,I}else if(e!=1)throw new Error(`Opening file ${c.fileName} failed: unsupported file flags: ${e}`);let _=null,b=null;try{let m=new XMLHttpRequest;if(c.dataProtocol==5?(m.open("HEAD",ze(c.s3Config,c.dataUrl),!1),Ge(m,c.s3Config,c.dataUrl,"HEAD")):m.open("HEAD",c.dataUrl,!1),m.setRequestHeader("Range","bytes=0-"),m.send(null),_=m.getResponseHeader("Content-Length"),_!==null&&m.status==206){let h=i._malloc(16);return i.HEAPF64[(h>>3)+0]=+_,i.HEAPF64[(h>>3)+1]=0,h}}catch(m){b=m,console.warn(`HEAD request with range header failed: ${m}`)}if(c.allowFullHttpReads){if(_!==null&&+_>1){let h=new XMLHttpRequest;c.dataProtocol==5?(h.open("GET",ze(c.s3Config,c.dataUrl),!1),Ge(h,c.s3Config,c.dataUrl,"GET")):h.open("GET",c.dataUrl,!1),h.setRequestHeader("Range","bytes=0-0"),h.send(null);let D=h.getResponseHeader("Content-Length");if(h.status==206&&D!==null&&+D==1){let I=i._malloc(16);return i.HEAPF64[(I>>3)+0]=+_,i.HEAPF64[(I>>3)+1]=0,I}if(h.status==200&&D!==null&&+D==+_){console.warn(`fall back to full HTTP read for: ${c.dataUrl}`);let I=i._malloc(h.response.byteLength),H=new Uint8Array(h.response,0,h.response.byteLength);i.HEAPU8.set(H,I);let ee=i._malloc(2*8);return i.HEAPF64[(ee>>3)+0]=h.response.byteLength,i.HEAPF64[(ee>>3)+1]=I,ee}}console.warn(`falling back to full HTTP read for: ${c.dataUrl}`);let m=new XMLHttpRequest;if(c.dataProtocol==5?(m.open("GET",ze(c.s3Config,c.dataUrl),!1),Ge(m,c.s3Config,c.dataUrl,"GET")):m.open("GET",c.dataUrl,!1),m.responseType="arraybuffer",m.send(null),m.status==200){let h=i._malloc(m.response.byteLength),D=new Uint8Array(m.response,0,m.response.byteLength);i.HEAPU8.set(D,h);let I=i._malloc(2*8);return i.HEAPF64[(I>>3)+0]=m.response.byteLength,i.HEAPF64[(I>>3)+1]=h,I}}if(b!=null)throw new Error(`Reading file ${c.fileName} failed with error: ${b}`);return 0}case 2:{let _=(l=V._files)==null?void 0:l.get(c.fileName);if(_){let h=i._malloc(16);return i.HEAPF64[(h>>3)+0]=_.size,i.HEAPF64[(h>>3)+1]=0,h}console.warn(`Buffering missing file: ${c.fileName}`);let b=i._malloc(2*8),m=i._malloc(1);return i.HEAPF64[(b>>3)+0]=1,i.HEAPF64[(b>>3)+1]=m,b}}}catch(c){console.error(c.toString()),Be(i,c.toString())}return 0},glob:(i,a,e)=>{var l;try{let c=G(i,a,e);if(c.startsWith("http")||c.startsWith("s3://")){let _=new XMLHttpRequest;if(c.startsWith("s3://")){let b=V.getGlobalFileInfo(i);_.open("HEAD",ze(b==null?void 0:b.s3Config,c),!1),Ge(_,b==null?void 0:b.s3Config,c,"HEAD")}else _.open("HEAD",c,!1);if(_.send(null),_.status!=200&&_.status!==206){if(!((l=V.getGlobalFileInfo(i))!=null&&l.allowFullHttpReads)){Be(i,`HEAD request failed: ${c}, with full http reads are disabled`);return}let b=new XMLHttpRequest;if(c.startsWith("s3://")){let h=V.getGlobalFileInfo(i);b.open("GET",ze(h==null?void 0:h.s3Config,c),!1),Ge(b,h==null?void 0:h.s3Config,c,"HEAD")}else b.open("GET",c,!1);if(b.setRequestHeader("Range","bytes=0-0"),b.send(null),b.status!=200&&b.status!==206){Be(i,`HEAD and GET requests failed: ${c}`);return}let m=b.getResponseHeader("Content-Length");m&&+m>1&&console.warn(`Range request for ${c} did not return a partial response: ${b.status} "${b.statusText}"`)}i.ccall("duckdb_web_fs_glob_add_path",null,["string"],[c])}}catch(c){return Be(i,c.toString()),0}},checkFile:(i,a,e)=>{try{let l=G(i,a,e);if(l.startsWith("http")||l.startsWith("s3://")){let c=new XMLHttpRequest;if(l.startsWith("s3://")){let _=V.getGlobalFileInfo(i);c.open("HEAD",ze(_==null?void 0:_.s3Config,l),!1),Ge(c,_==null?void 0:_.s3Config,l,"HEAD")}else c.open("HEAD",l,!1);return c.send(null),c.status==206||c.status==200}}catch(l){return!1}return!1},syncFile:(i,a)=>{},closeFile:(i,a)=>{var l;let e=V.getFileInfo(i,a);switch(V._fileInfoCache.delete(a),e==null?void 0:e.dataProtocol){case 0:case 4:case 5:break;case 1:case 2:return;case 3:{let c=(l=V._files)==null?void 0:l.get(e.fileName);if(!c)throw new Error(`No OPFS access handle registered with name: ${e.fileName}`);return c.flush()}}},truncateFile:(i,a,e)=>{var c;let l=V.getFileInfo(i,a);switch(l==null?void 0:l.dataProtocol){case 4:Be(i,"Cannot truncate a http file");return;case 5:Be(i,"Cannot truncate an s3 file");return;case 0:case 1:case 2:Be(i,"truncateFile not implemented");return;case 3:{let _=(c=V._files)==null?void 0:c.get(l.fileName);if(!_)throw new Error(`No OPFS access handle registered with name: ${l.fileName}`);return _.truncate(e)}}return 0},readFile(i,a,e,l,c){var _,b;if(l==0)return 0;try{let m=V.getFileInfo(i,a);switch(m==null?void 0:m.dataProtocol){case 4:case 5:{if(!m.dataUrl)throw new Error(`Missing data URL for file ${a}`);try{let h=new XMLHttpRequest;if(m.dataProtocol==5?(h.open("GET",ze(m==null?void 0:m.s3Config,m.dataUrl),!1),Ge(h,m==null?void 0:m.s3Config,m.dataUrl,"GET")):h.open("GET",m.dataUrl,!1),h.responseType="arraybuffer",h.setRequestHeader("Range",`bytes=${c}-${c+l-1}`),h.send(null),h.status==206||h.status==200&&l==h.response.byteLength&&c==0){let D=new Uint8Array(h.response,0,Math.min(h.response.byteLength,l));return i.HEAPU8.set(D,e),D.byteLength}else if(h.status==200){console.warn(`Range request for ${m.dataUrl} did not return a partial response: ${h.status} "${h.statusText}"`);let D=new Uint8Array(h.response,c,Math.min(h.response.byteLength-c,l));return i.HEAPU8.set(D,e),D.byteLength}else throw new Error(`Range request for ${m.dataUrl} did returned non-success status: ${h.status} "${h.statusText}"`)}catch(h){throw new Error(`Range request for ${m.dataUrl} failed with error: ${h}"`)}}case 2:{let h=(_=V._files)==null?void 0:_.get(m.fileName);if(!h)throw new Error(`No HTML5 file registered with name: ${m.fileName}`);let D=h.slice(c,c+l),I=new Uint8Array(new FileReaderSync().readAsArrayBuffer(D));return i.HEAPU8.set(I,e),I.byteLength}case 3:{let h=(b=V._files)==null?void 0:b.get(m.fileName);if(!h)throw new Error(`No OPFS access handle registered with name: ${m.fileName}`);let D=i.HEAPU8.subarray(e,e+l);return h.read(D,{at:c})}}return 0}catch(m){return Be(i,m.toString()),0}},writeFile:(i,a,e,l,c)=>{var b;let _=V.getFileInfo(i,a);switch(_==null?void 0:_.dataProtocol){case 4:return Be(i,"Cannot write to HTTP file"),0;case 5:{let m=i.HEAPU8.subarray(e,e+l),h=new XMLHttpRequest;return h.open("PUT",ze(_==null?void 0:_.s3Config,_.dataUrl),!1),Ge(h,_==null?void 0:_.s3Config,_.dataUrl,"PUT","",m),h.send(m),l}case 2:return Be(i,"cannot write using the html5 file reader api"),0;case 3:{let m=(b=V._files)==null?void 0:b.get(_.fileName);if(!m)throw new Error(`No OPFS access handle registered with name: ${_.fileName}`);let h=i.HEAPU8.subarray(e,e+l);return m.write(h,{at:c})}}return 0},getLastFileModificationTime:(i,a)=>{var l;let e=V.getFileInfo(i,a);switch(e==null?void 0:e.dataProtocol){case 2:{if(!((l=V._files)==null?void 0:l.get(e.fileName)))throw Error(`No handle available for file: ${e.fileName}`);return 0}case 4:case 5:return new Date().getTime()}return 0},checkDirectory:(i,a,e)=>{let l=G(i,a,e);return console.log(`checkDirectory: ${l}`),!1},createDirectory:(i,a,e)=>{let l=G(i,a,e);console.log(`createDirectory: ${l}`)},removeDirectory:(i,a,e)=>{let l=G(i,a,e);console.log(`removeDirectory: ${l}`)},listDirectoryEntries:(i,a,e)=>{let l=G(i,a,e);return console.log(`listDirectoryEntries: ${l}`),!1},moveFile:(i,a,e,l,c)=>{var h,D;let _=G(i,a,e),b=G(i,l,c),m=(h=V._files)==null?void 0:h.get(_);m!==void 0&&(V._files.delete(m),V._files.set(b,m));for(let[I,H]of((D=V._fileInfoCache)==null?void 0:D.entries())||[])if(H.dataUrl==_){V._fileInfoCache.delete(I);break}return!0},removeFile:(i,a,e)=>{},callScalarUDF:(i,a,e,l,c,_,b)=>{xr(V,i,a,e,l,c,_,b)}};var Fl=(()=>{var i=import.meta.url;return async function(a={}){var e=typeof a<"u"?a:{},l,c;e.ready=new Promise((r,o)=>{l=r,c=o}),["_main","_malloc","_free","_duckdb_web_clear_response","_duckdb_web_collect_file_stats","_duckdb_web_connect","_duckdb_web_copy_file_to_buffer","_duckdb_web_copy_file_to_path","_duckdb_web_disconnect","_duckdb_web_export_file_stats","_duckdb_web_fail_with","_duckdb_web_flush_file","_duckdb_web_flush_files","_duckdb_web_fs_drop_file","_duckdb_web_fs_drop_files","_duckdb_web_fs_get_file_info_by_id","_duckdb_web_fs_get_file_info_by_name","_duckdb_web_fs_glob_add_path","_duckdb_web_fs_glob_file_infos","_duckdb_web_fs_register_file_buffer","_duckdb_web_fs_register_file_url","_duckdb_web_get_feature_flags","_duckdb_web_get_global_file_info","_duckdb_web_get_tablenames","_duckdb_web_get_version","_duckdb_web_insert_arrow_from_ipc_stream","_duckdb_web_insert_csv_from_path","_duckdb_web_insert_json_from_path","_duckdb_web_open","_duckdb_web_pending_query_cancel","_duckdb_web_pending_query_poll","_duckdb_web_pending_query_start","_duckdb_web_prepared_close","_duckdb_web_prepared_create","_duckdb_web_prepared_run","_duckdb_web_prepared_send","_duckdb_web_query_fetch_results","_duckdb_web_query_run","_duckdb_web_reset","_duckdb_web_tokenize","_duckdb_web_udf_scalar_create","_fflush","onRuntimeInitialized"].forEach(r=>{Object.getOwnPropertyDescriptor(e.ready,r)||Object.defineProperty(e.ready,r,{get:()=>g("You are getting "+r+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"),set:()=>g("You are setting "+r+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")})});var _=Object.assign({},e),b=[],m="./this.program",h=(r,o)=>{throw o},D=typeof window=="object",I=typeof importScripts=="function",H=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",ee=!D&&!H&&!I;if(e.ENVIRONMENT)throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");var U="";function se(r){return e.locateFile?e.locateFile(r,U):U+r}var ne,oe,ie,Re;if(H){throw typeof process>"u"||process.release,new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");var pe=process.versions.node,ve=pe.split(".").slice(0,3);ve=ve[0]*1e4+ve[1]*100+ve[2].split("-")[0]*1;var jt=101900;if(ve<101900)throw new Error("This emscripten-generated code requires node v10.19.19.0 (detected v"+pe+")");let{createRequire:r}=await Promise.resolve().then(()=>ra(Ba("module")));var we=r(import.meta.url),Qe=we("fs"),Ue=we("path");I?U=Ue.dirname(U)+"/":U=we("url").fileURLToPath(new URL("./",import.meta.url)),ne=(o,u)=>(o=at(o)?new URL(o):Ue.normalize(o),Qe.readFileSync(o,u?void 0:"utf8")),ie=o=>{var u=ne(o,!0);return u.buffer||(u=new Uint8Array(u)),k(u.buffer),u},oe=(o,u,p,j=!0)=>{o=at(o)?new URL(o):Ue.normalize(o),Qe.readFile(o,j?void 0:"utf8",(L,C)=>{L?p(L):u(j?C.buffer:C)})},!e.thisProgram&&process.argv.length>1&&(m=process.argv[1].replace(/\\/g,"/")),b=process.argv.slice(2),h=(o,u)=>{throw process.exitCode=o,u},e.inspect=()=>"[Emscripten Module object]"}else if(ee){if(typeof process=="object"&&typeof we=="function"||typeof window=="object"||typeof importScripts=="function")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");typeof read<"u"&&(ne=r=>read(r)),ie=r=>{let o;return typeof readbuffer=="function"?new Uint8Array(readbuffer(r)):(o=read(r,"binary"),k(typeof o=="object"),o)},oe=(r,o,u)=>{setTimeout(()=>o(ie(r)),0)},typeof clearTimeout>"u"&&(globalThis.clearTimeout=r=>{}),typeof scriptArgs<"u"?b=scriptArgs:typeof arguments<"u"&&(b=arguments),typeof quit=="function"&&(h=(r,o)=>{throw setTimeout(()=>{if(!(o instanceof ot)){let u=o;o&&typeof o=="object"&&o.stack&&(u=[o,o.stack]),w(`exiting due to exception: ${u}`)}quit(r)}),o}),typeof print<"u"&&(typeof console>"u"&&(console={}),console.log=print,console.warn=console.error=typeof printErr<"u"?printErr:print)}else if(D||I){if(I?U=self.location.href:typeof document<"u"&&document.currentScript&&(U=document.currentScript.src),i&&(U=i),U.indexOf("blob:")!==0?U=U.substr(0,U.replace(/[?#].*/,"").lastIndexOf("/")+1):U="",!(typeof window=="object"||typeof importScripts=="function"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");ne=r=>{var o=new XMLHttpRequest;return o.open("GET",r,!1),o.send(null),o.responseText},I&&(ie=r=>{var o=new XMLHttpRequest;return o.open("GET",r,!1),o.responseType="arraybuffer",o.send(null),new Uint8Array(o.response)}),oe=(r,o,u)=>{var p=new XMLHttpRequest;p.open("GET",r,!0),p.responseType="arraybuffer",p.onload=()=>{if(p.status==200||p.status==0&&p.response){o(p.response);return}u()},p.onerror=u,p.send(null)},Re=r=>document.title=r}else throw new Error("environment detection error");var z=e.print||console.log.bind(console),w=e.printErr||console.error.bind(console);Object.assign(e,_),_=null,Ki(),e.arguments&&(b=e.arguments),ue("arguments","arguments_"),e.thisProgram&&(m=e.thisProgram),ue("thisProgram","thisProgram"),e.quit&&(h=e.quit),ue("quit","quit_"),k(typeof e.memoryInitializerPrefixURL>"u","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"),k(typeof e.pthreadMainPrefixURL>"u","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"),k(typeof e.cdInitializerPrefixURL>"u","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"),k(typeof e.filePackagePrefixURL>"u","Module.filePackagePrefixURL option was removed, use Module.locateFile instead"),k(typeof e.read>"u","Module.read option was removed (modify read_ in JS)"),k(typeof e.readAsync>"u","Module.readAsync option was removed (modify readAsync in JS)"),k(typeof e.readBinary>"u","Module.readBinary option was removed (modify readBinary in JS)"),k(typeof e.setWindowTitle>"u","Module.setWindowTitle option was removed (modify setWindowTitle in JS)"),k(typeof e.TOTAL_MEMORY>"u","Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"),ue("read","read_"),ue("readAsync","readAsync"),ue("readBinary","readBinary"),ue("setWindowTitle","setWindowTitle");var Ae="IDBFS is no longer included by default; build with -lidbfs.js",Ce="PROXYFS is no longer included by default; build with -lproxyfs.js",he="WORKERFS is no longer included by default; build with -lworkerfs.js",fe="NODEFS is no longer included by default; build with -lnodefs.js";k(!ee,"shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");var X;e.wasmBinary&&(X=e.wasmBinary),ue("wasmBinary","wasmBinary");var Ee=e.noExitRuntime||!0;ue("noExitRuntime","noExitRuntime"),typeof WebAssembly!="object"&&g("no native wasm support detected");var ye,xe=!1,Xe;function k(r,o){r||g("Assertion failed"+(o?": "+o:""))}var co,ae,le,be,Ft,y,O,rt,nt;function Rt(){var r=ye.buffer;e.HEAP8=ae=new Int8Array(r),e.HEAP16=be=new Int16Array(r),e.HEAP32=y=new Int32Array(r),e.HEAPU8=le=new Uint8Array(r),e.HEAPU16=Ft=new Uint16Array(r),e.HEAPU32=O=new Uint32Array(r),e.HEAPF32=rt=new Float32Array(r),e.HEAPF64=nt=new Float64Array(r)}k(!e.STACK_SIZE,"STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time"),k(typeof Int32Array<"u"&&typeof Float64Array<"u"&&Int32Array.prototype.subarray!=null&&Int32Array.prototype.set!=null,"JS engine does not provide full typed array support"),k(!e.wasmMemory,"Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally"),k(!e.INITIAL_MEMORY,"Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically");var At;function Yr(){var r=dt();k((r&3)==0),r==0&&(r+=4),O[r>>>2]=34821223,O[r+4>>>2]=2310721022,O[0]=1668509029}function Oe(){if(!xe){var r=dt();r==0&&(r+=4);var o=O[r>>>2],u=O[r+4>>>2];(o!=34821223||u!=2310721022)&&g(`Stack overflow! Stack cookie has been overwritten at ${Ke(r)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${Ke(u)} ${Ke(o)}`),O[0]!=1668509029&&g("Runtime error: The application has corrupted its heap memory area (address zero)!")}}(function(){var r=new Int16Array(1),o=new Int8Array(r.buffer);if(r[0]=25459,o[0]!==115||o[1]!==99)throw"Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)"})();var it=[],Dt=[],Mt=[],uo=[],It=[],Je=!1,Lt=0;function Ut(){return Ee||Lt>0}function Gr(){if(e.preRun)for(typeof e.preRun=="function"&&(e.preRun=[e.preRun]);e.preRun.length;)Kr(e.preRun.shift());qe(it)}function zr(){k(!Je),Je=!0,Oe(),qe(Dt)}function Xr(){Oe(),qe(Mt)}function qr(){if(Oe(),e.postRun)for(typeof e.postRun=="function"&&(e.postRun=[e.postRun]);e.postRun.length;)$r(e.postRun.shift());qe(It)}function Kr(r){it.unshift(r)}function Vr(r){Dt.unshift(r)}function _o(r){Mt.unshift(r)}function fo(r){}function $r(r){It.unshift(r)}k(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),k(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),k(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),k(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var me=0,Se=null,Ne=null,De={};function bo(r){for(var o=r;;){if(!De[r])return r;r=o+Math.random()}}function Qr(r){me++,e.monitorRunDependencies&&e.monitorRunDependencies(me),r?(k(!De[r]),De[r]=1,Se===null&&typeof setInterval<"u"&&(Se=setInterval(()=>{if(xe){clearInterval(Se),Se=null;return}var o=!1;for(var u in De)o||(o=!0,w("still waiting on run dependencies:")),w("dependency: "+u);o&&w("(end of list)")},1e4))):w("warning: run dependency added without ID")}function Jr(r){if(me--,e.monitorRunDependencies&&e.monitorRunDependencies(me),r?(k(De[r]),delete De[r]):w("warning: run dependency removed without ID"),me==0&&(Se!==null&&(clearInterval(Se),Se=null),Ne)){var o=Ne;Ne=null,o()}}function g(r){e.onAbort&&e.onAbort(r),r="Aborted("+r+")",w(r),xe=!0,Xe=1;var o=new WebAssembly.RuntimeError(r);throw c(o),o}var Zr="data:application/octet-stream;base64,";function xt(r){return r.startsWith(Zr)}function at(r){return r.startsWith("file://")}function d(r,o){return function(){var u=r,p=o;return o||(p=e.asm),k(Je,"native function `"+u+"` called before runtime initialization"),p[r]||k(p[r],"exported native function `"+u+"` not found"),p[r].apply(null,arguments)}}var ce;e.locateFile?(ce="./duckdb-mvp.wasm",xt(ce)||(ce=se(ce))):ce=new URL("./duckdb-mvp.wasm",import.meta.url).href;function Ot(r){try{if(r==ce&&X)return new Uint8Array(X);if(ie)return ie(r);throw"both async and sync fetching of the wasm failed"}catch(o){g(o)}}function en(r){return!X&&(D||I)&&typeof fetch=="function"?fetch(r,{credentials:"same-origin"}).then(o=>{if(!o.ok)throw"failed to load wasm binary file at '"+r+"'";return o.arrayBuffer()}).catch(()=>Ot(r)):Promise.resolve().then(()=>Ot(r))}function Nt(r,o,u){return en(r).then(p=>WebAssembly.instantiate(p,o)).then(p=>p).then(u,p=>{w("failed to asynchronously prepare wasm: "+p),at(ce)&&w("warning: Loading from a file URI ("+ce+") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing"),g(p)})}function tn(r,o,u,p){return!r&&typeof WebAssembly.instantiateStreaming=="function"&&!xt(o)&&!H&&typeof fetch=="function"?fetch(o,{credentials:"same-origin"}).then(j=>{var L=WebAssembly.instantiateStreaming(j,u);return L.then(p,function(C){return w("wasm streaming compile failed: "+C),w("falling back to ArrayBuffer instantiation"),Nt(o,u,p)})}):Nt(o,u,p)}function rn(){var r={env:Cr,wasi_snapshot_preview1:Cr};function o(j,L){var C=j.exports;return e.asm=C,ye=e.asm.memory,k(ye,"memory not found in wasm exports"),Rt(),At=e.asm.__indirect_function_table,k(At,"table not found in wasm exports"),Vr(e.asm.__wasm_call_ctors),Jr("wasm-instantiate"),C}Qr("wasm-instantiate");var u=e;function p(j){k(e===u,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"),u=null,o(j.instance)}if(e.instantiateWasm)try{return e.instantiateWasm(r,o)}catch(j){w("Module.instantiateWasm callback failed with error: "+j),c(j)}return tn(X,ce,r,p).catch(c),{}}var re,Me;function ue(r,o){Object.getOwnPropertyDescriptor(e,r)||Object.defineProperty(e,r,{configurable:!0,get:function(){g("Module."+r+" has been replaced with plain "+o+" (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}})}function nn(r){Object.getOwnPropertyDescriptor(e,r)&&g("`Module."+r+"` was supplied but `"+r+"` not included in INCOMING_MODULE_JS_API")}function Pt(r){return r==="FS_createPath"||r==="FS_createDataFile"||r==="FS_createPreloadedFile"||r==="FS_unlink"||r==="addRunDependency"||r==="FS_createLazyFile"||r==="FS_createDevice"||r==="removeRunDependency"}function an(r,o){typeof globalThis<"u"&&Object.defineProperty(globalThis,r,{configurable:!0,get:function(){Ie("`"+r+"` is not longer defined by emscripten. "+o)}})}an("buffer","Please use HEAP8.buffer or wasmMemory.buffer");function on(r){typeof globalThis<"u"&&!Object.getOwnPropertyDescriptor(globalThis,r)&&Object.defineProperty(globalThis,r,{configurable:!0,get:function(){var o="`"+r+"` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line",u=r;u.startsWith("_")||(u="$"+r),o+=" (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE="+u+")",Pt(r)&&(o+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),Ie(o)}}),Bt(r)}function Bt(r){Object.getOwnPropertyDescriptor(e,r)||Object.defineProperty(e,r,{configurable:!0,get:function(){var o="'"+r+"' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";Pt(r)&&(o+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),g(o)}})}function mo(r){console.warn.apply(console,arguments)}function ot(r){this.name="ExitStatus",this.message=`Program terminated with exit(${r})`,this.status=r}function qe(r){for(;r.length>0;)r.shift()(e)}function sn(r,o="i8"){switch(o.endsWith("*")&&(o="*"),o){case"i1":return ae[r>>>0];case"i8":return ae[r>>>0];case"i16":return be[r>>>1];case"i32":return y[r>>>2];case"i64":g("to do getValue(i64) use WASM_BIGINT");case"float":return rt[r>>>2];case"double":return nt[r>>>3];case"*":return O[r>>>2];default:g(`invalid type for getValue: ${o}`)}}function Ke(r){return k(typeof r=="number"),"0x"+r.toString(16).padStart(8,"0")}function po(r,o,u="i8"){switch(u.endsWith("*")&&(u="*"),u){case"i1":ae[r>>>0]=o;break;case"i8":ae[r>>>0]=o;break;case"i16":be[r>>>1]=o;break;case"i32":y[r>>>2]=o;break;case"i64":g("to do setValue(i64) use WASM_BIGINT");case"float":rt[r>>>2]=o;break;case"double":nt[r>>>3]=o;break;case"*":O[r>>>2]=o;break;default:g(`invalid type for setValue: ${u}`)}}function Ie(r){Ie.shown||(Ie.shown={}),Ie.shown[r]||(Ie.shown[r]=1,H&&(r="warning: "+r),w(r))}function rr(){w("missing function: XML_GetBuffer"),g(-1)}function nr(){w("missing function: XML_GetErrorCode"),g(-1)}function Te(){w("missing function: XML_Parse"),g(-1)}function ln(){w("missing function: XML_ParseBuffer"),g(-1)}function ir(){w("missing function: XML_ParserCreate"),g(-1)}function ma(){w("missing function: XML_ParserFree"),g(-1)}function pa(){w("missing function: XML_ResumeParser"),g(-1)}function st(){w("missing function: XML_SetCharacterDataHandler"),g(-1)}function ha(){w("missing function: XML_SetElementHandler"),g(-1)}function Le(){w("missing function: XML_SetUserData"),g(-1)}function cn(){w("missing function: XML_StopParser"),g(-1)}function un(r){this.excPtr=r,this.ptr=r-24,this.set_type=function(o){O[this.ptr+4>>>2]=o},this.get_type=function(){return O[this.ptr+4>>>2]},this.set_destructor=function(o){O[this.ptr+8>>>2]=o},this.get_destructor=function(){return O[this.ptr+8>>>2]},this.set_caught=function(o){o=o?1:0,ae[this.ptr+12>>>0]=o},this.get_caught=function(){return ae[this.ptr+12>>>0]!=0},this.set_rethrown=function(o){o=o?1:0,ae[this.ptr+13>>>0]=o},this.get_rethrown=function(){return ae[this.ptr+13>>>0]!=0},this.init=function(o,u){this.set_adjusted_ptr(0),this.set_type(o),this.set_destructor(u)},this.set_adjusted_ptr=function(o){O[this.ptr+16>>>2]=o},this.get_adjusted_ptr=function(){return O[this.ptr+16>>>2]},this.get_exception_ptr=function(){var o=Ji(this.get_type());if(o)return O[this.excPtr>>>2];var u=this.get_adjusted_ptr();return u!==0?u:this.excPtr}}var _n=0,dn=0;function fn(r,o,u){var p=new un(r);p.init(o,u),_n=r,dn++,k(!1,"Exception thrown, but exception catching is not enabled. Compile with -sNO_DISABLE_EXCEPTION_CATCHING or -sEXCEPTION_CATCHING_ALLOWED=[..] to catch.")}var ar="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function bn(r,o,u){g(ar)}var or=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function sr(r,o,u){o>>>=0;for(var p=o+u,j=o;r[j]&&!(j>=p);)++j;if(j-o>16&&r.buffer&&or)return or.decode(r.subarray(o,j));for(var L="";o<j;){var C=r[o++];if(!(C&128)){L+=String.fromCharCode(C);continue}var M=r[o++]&63;if((C&224)==192){L+=String.fromCharCode((C&31)<<6|M);continue}var B=r[o++]&63;if((C&240)==224?C=(C&15)<<12|M<<6|B:((C&248)!=240&&Ie("Invalid UTF-8 leading byte "+Ke(C)+" encountered when deserializing a UTF-8 string in wasm memory to a JS string!"),C=(C&7)<<18|M<<12|B<<6|r[o++]&63),C<65536)L+=String.fromCharCode(C);else{var t=C-65536;L+=String.fromCharCode(55296|t>>10,56320|t&1023)}}return L}function Ve(r,o){return k(typeof r=="number"),r>>>=0,r?sr(le,r,o):""}var He={varargs:void 0,get:function(){k(He.varargs!=null),He.varargs+=4;var r=y[He.varargs-4>>>2];return r},getStr:function(r){var o=Ve(r);return o}};function mn(r,o,u,p,j){k(r<=64,"nfds must be less than or equal to 64"),k(!p,"exceptfds not supported");for(var L=0,C=o?y[o>>>2]:0,M=o?y[o+4>>>2]:0,B=u?y[u>>>2]:0,t=u?y[u+4>>>2]:0,n=p?y[p>>>2]:0,s=p?y[p+4>>>2]:0,f=0,S=0,T=0,E=0,F=0,N=0,v=(o?y[o>>>2]:0)|(u?y[u>>>2]:0)|(p?y[p>>>2]:0),R=(o?y[o+4>>>2]:0)|(u?y[u+4>>>2]:0)|(p?y[p+4>>>2]:0),W=function(We,Pe,A,P){return We<32?Pe&P:A&P},x=0;x<r;x++){var $=1<<x%32;if(!!W(x,v,R,$)){var Y=He.getStreamFromFD(x),Z=He.DEFAULT_POLLMASK;Y.stream_ops.poll&&(Z=Y.stream_ops.poll(Y)),Z&1&&W(x,C,M,$)&&(x<32?f=f|$:S=S|$,L++),Z&4&&W(x,B,t,$)&&(x<32?T=T|$:E=E|$,L++),Z&2&&W(x,n,s,$)&&(x<32?F=F|$:N=N|$,L++)}}return o&&(y[o>>>2]=f,y[o+4>>>2]=S),u&&(y[u>>>2]=T,y[u+4>>>2]=E),p&&(y[p>>>2]=F,y[p+4>>>2]=N),L}function lr(){w("missing function: $SOCKFS"),g(-1)}function cr(){w("missing function: $FS"),g(-1)}function je(r){var o=lr.getSocket(r);if(!o)throw new cr.ErrnoError(8);return o}function ya(r){return y[Ta()>>>2]=r,r}var ga={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};function mt(r){return(r&255)+"."+(r>>8&255)+"."+(r>>16&255)+"."+(r>>24&255)}function Ze(r){var o="",u=0,p=0,j=0,L=0,C=0,M=0,B=[r[0]&65535,r[0]>>16,r[1]&65535,r[1]>>16,r[2]&65535,r[2]>>16,r[3]&65535,r[3]>>16],t=!0,n="";for(M=0;M<5;M++)if(B[M]!==0){t=!1;break}if(t){if(n=mt(B[6]|B[7]<<16),B[5]===-1)return o="::ffff:",o+=n,o;if(B[5]===0)return o="::",n==="0.0.0.0"&&(n=""),n==="0.0.0.1"&&(n="1"),o+=n,o}for(u=0;u<8;u++)B[u]===0&&(u-j>1&&(C=0),j=u,C++),C>p&&(p=C,L=u-p+1);for(u=0;u<8;u++){if(p>1&&B[u]===0&&u>=L&&u<L+p){u===L&&(o+=":",L===0&&(o+=":"));continue}o+=Number(Qi(B[u]&65535)).toString(16),o+=u<7?":":""}return o}function pn(r,o){var u=be[r>>>1],p=Qi(Ft[r+2>>>1]),j;switch(u){case 2:if(o!==16)return{errno:28};j=y[r+4>>>2],j=mt(j);break;case 10:if(o!==28)return{errno:28};j=[y[r+8>>>2],y[r+12>>>2],y[r+16>>>2],y[r+20>>>2]],j=Ze(j);break;default:return{errno:5}}return{family:u,addr:j,port:p}}function Ht(r){for(var o=r.split("."),u=0;u<4;u++){var p=Number(o[u]);if(isNaN(p))return null;o[u]=p}return(o[0]|o[1]<<8|o[2]<<16|o[3]<<24)>>>0}function et(r){return parseInt(r)}function pt(r){var o,u,p,j,L,C=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,M=[];if(!C.test(r))return null;if(r==="::")return[0,0,0,0,0,0,0,0];for(r.startsWith("::")?r=r.replace("::","Z:"):r=r.replace("::",":Z:"),r.indexOf(".")>0?(r=r.replace(new RegExp("[.]","g"),":"),o=r.split(":"),o[o.length-4]=et(o[o.length-4])+et(o[o.length-3])*256,o[o.length-3]=et(o[o.length-2])+et(o[o.length-1])*256,o=o.slice(0,o.length-2)):o=r.split(":"),p=0,j=0,u=0;u<o.length;u++)if(typeof o[u]=="string")if(o[u]==="Z"){for(j=0;j<8-o.length+1;j++)M[u+j]=0;p=j-1}else M[u+p]=jr(parseInt(o[u],16));else M[u+p]=o[u];return[M[1]<<16|M[0],M[3]<<16|M[2],M[5]<<16|M[4],M[7]<<16|M[6]]}var ke={address_map:{id:1,addrs:{},names:{}},lookup_name:function(r){var o=Ht(r);if(o!==null||(o=pt(r),o!==null))return r;var u;if(ke.address_map.addrs[r])u=ke.address_map.addrs[r];else{var p=ke.address_map.id++;k(p<65535,"exceeded max address mappings of 65535"),u="172.29."+(p&255)+"."+(p&65280),ke.address_map.names[u]=r,ke.address_map.addrs[r]=u}return u},lookup_addr:function(r){return ke.address_map.names[r]?ke.address_map.names[r]:null}};function lt(r,o,u){if(u&&r===0)return null;var p=pn(r,o);if(p.errno)throw new cr.ErrnoError(p.errno);return p.addr=ke.lookup_addr(p.addr)||p.addr,p}function ht(r,o,u,p,j,L){var C=je(r),M=lt(o,u);return C.sock_ops.bind(C,M.addr,M.port),0}function Wt(r,o,u,p,j,L){var C=je(r),M=lt(o,u);return C.sock_ops.connect(C,M.addr,M.port),0}function Fe(r,o,u,p){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function ur(r,o,u){return He.varargs=u,0}function hn(r,o){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function va(r,o){return k(r==r>>>0||r==(r|0)),k(o===(o|0)),o+2097152>>>0<4194305-!!r?(r>>>0)+o*4294967296:NaN}function yn(r,o,u){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function _r(r,o,u,p){if(u>>>=0,k(typeof r=="string"),!(p>0))return 0;for(var j=u,L=u+p-1,C=0;C<r.length;++C){var M=r.charCodeAt(C);if(M>=55296&&M<=57343){var B=r.charCodeAt(++C);M=65536+((M&1023)<<10)|B&1023}if(M<=127){if(u>=L)break;o[u++>>>0]=M}else if(M<=2047){if(u+1>=L)break;o[u++>>>0]=192|M>>6,o[u++>>>0]=128|M&63}else if(M<=65535){if(u+2>=L)break;o[u++>>>0]=224|M>>12,o[u++>>>0]=128|M>>6&63,o[u++>>>0]=128|M&63}else{if(u+3>=L)break;M>1114111&&Ie("Invalid Unicode code point "+Ke(M)+" encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF)."),o[u++>>>0]=240|M>>18,o[u++>>>0]=128|M>>12&63,o[u++>>>0]=128|M>>6&63,o[u++>>>0]=128|M&63}}return o[u>>>0]=0,u-j}function yt(r,o,u){return k(typeof u=="number","stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),_r(r,le,o,u)}function wa(r,o,u){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function dr(r,o){return le.fill(0,r,r+o),r}function gt(r,o,u,p,j){switch(o){case 2:u=Ht(u),dr(r,16),j&&(y[j>>>2]=16),be[r>>>1]=o,y[r+4>>>2]=u,be[r+2>>>1]=jr(p);break;case 10:u=pt(u),dr(r,28),j&&(y[j>>>2]=28),y[r>>>2]=o,y[r+8>>>2]=u[0],y[r+12>>>2]=u[1],y[r+16>>>2]=u[2],y[r+20>>>2]=u[3],be[r+2>>>1]=jr(p);break;default:return 5}return 0}function vt(r,o,u,p,j,L){var C=je(r);if(!C.daddr)return-53;var M=gt(o,C.family,ke.lookup_name(C.daddr),C.dport,u);return k(!M),0}function gn(r,o,u,p,j,L){var C=je(r);return o===1&&u===4?(y[p>>>2]=C.error,y[j>>>2]=4,C.error=null,0):-50}function fr(r,o,u){return He.varargs=u,0}function Yt(r,o){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function vn(r,o,u){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function wn(r,o,u,p){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function En(r,o,u,p){He.varargs=p,g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Sn(r,o,u,p,j,L){var C=je(r),M=C.sock_ops.recvmsg(C,u);if(!M)return 0;if(j){var B=gt(j,C.family,ke.lookup_name(M.addr),M.port,L);k(!B)}return le.set(M.buffer,o>>>0),M.buffer.byteLength}function kn(r,o,u,p){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Cn(r){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Tn(r,o,u,p,j,L){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function jn(r,o,u){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Fn(r,o){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Rn(r,o,u){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}var An=!0;function Dn(){return An}function Mn(r){return O[r>>>2]+y[r+4>>>2]*4294967296}function ct(r){return r%4===0&&(r%100!==0||r%400===0)}var In=[0,31,60,91,121,152,182,213,244,274,305,335],Ln=[0,31,59,90,120,151,181,212,243,273,304,334];function Un(r){var o=ct(r.getFullYear()),u=o?In:Ln,p=u[r.getMonth()]+r.getDate()-1;return p}function xn(r,o){var u=new Date(Mn(r)*1e3);y[o>>>2]=u.getSeconds(),y[o+4>>>2]=u.getMinutes(),y[o+8>>>2]=u.getHours(),y[o+12>>>2]=u.getDate(),y[o+16>>>2]=u.getMonth(),y[o+20>>>2]=u.getFullYear()-1900,y[o+24>>>2]=u.getDay();var p=Un(u)|0;y[o+28>>>2]=p,y[o+36>>>2]=-(u.getTimezoneOffset()*60);var j=new Date(u.getFullYear(),0,1),L=new Date(u.getFullYear(),6,1).getTimezoneOffset(),C=j.getTimezoneOffset(),M=(L!=C&&u.getTimezoneOffset()==Math.min(C,L))|0;y[o+32>>>2]=M}function $e(r){for(var o=0,u=0;u<r.length;++u){var p=r.charCodeAt(u);p<=127?o++:p<=2047?o+=2:p>=55296&&p<=57343?(o+=4,++u):o+=3}return o}function br(r){var o=$e(r)+1,u=Qt(o);return u&&yt(r,u,o),u}function On(r,o,u){var p=new Date().getFullYear(),j=new Date(p,0,1),L=new Date(p,6,1),C=j.getTimezoneOffset(),M=L.getTimezoneOffset(),B=Math.max(C,M);O[r>>>2]=B*60,y[o>>>2]=Number(C!=M);function t(T){var E=T.toTimeString().match(/\(([A-Za-z ]+)\)$/);return E?E[1]:"GMT"}var n=t(j),s=t(L),f=br(n),S=br(s);M<C?(O[u>>>2]=f,O[u+4>>>2]=S):(O[u>>>2]=S,O[u+4>>>2]=f)}function Nn(){g("native code called abort()")}function Pn(r,o){g(ar)}function Gt(r,o){return globalThis.DUCKDB_RUNTIME.createDirectory(e,r,o)}function mr(r,o){return globalThis.DUCKDB_RUNTIME.checkDirectory(e,r,o)}function Bn(r,o){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(e,r,o)}function Hn(r,o){return globalThis.DUCKDB_RUNTIME.removeDirectory(e,r,o)}function Wn(r){return globalThis.DUCKDB_RUNTIME.closeFile(e,r)}function Yn(r,o){return globalThis.DUCKDB_RUNTIME.checkFile(e,r,o)}function Gn(r){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(e,r)}function zn(r,o,u,p){return globalThis.DUCKDB_RUNTIME.moveFile(e,r,o,u,p)}function Xn(r,o){return globalThis.DUCKDB_RUNTIME.openFile(e,r,o)}function qn(r,o,u,p){return globalThis.DUCKDB_RUNTIME.readFile(e,r,o,u,p)}function Kn(r,o){return globalThis.DUCKDB_RUNTIME.truncateFile(e,r,o)}function Vn(r,o,u,p){return globalThis.DUCKDB_RUNTIME.writeFile(e,r,o,u,p)}function $n(r){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(r)}function Qn(r,o){return globalThis.DUCKDB_RUNTIME.glob(e,r,o)}function Jn(r){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(e,r)}function Zn(r,o,u,p,j,L){return globalThis.DUCKDB_RUNTIME.callScalarUDF(e,r,o,u,p,j,L)}function ei(r){k(typeof r=="number"),console.error(Ve(r))}function ti(){return Date.now()}function pr(){return 4294901760}function ri(){return pr()}var hr;H&&(global.performance=we("perf_hooks").performance),hr=()=>performance.now();function ni(r,o,u){le.copyWithin(r>>>0,o>>>0,o+u>>>0)}function ii(r){var o=ye.buffer,u=r-o.byteLength+65535>>>16;try{return ye.grow(u),Rt(),1}catch(p){w(`emscripten_realloc_buffer: Attempted to grow heap from ${o.byteLength} bytes to ${r} bytes, but got error: ${p}`)}}function yr(r){var o=le.length;r=r>>>0,k(r>o);var u=pr();if(r>u)return w(`Cannot enlarge memory, asked to go up to ${r} bytes, but the limit is ${u} bytes!`),!1;for(var p=(B,t)=>B+(t-B%t)%t,j=1;j<=4;j*=2){var L=o*(1+.2/j);L=Math.min(L,r+100663296);var C=Math.min(u,p(Math.max(r,L),65536)),M=ii(C);if(M)return!0}return w(`Failed to grow the heap from ${o} bytes to ${C} bytes, not enough memory!`),!1}var zt={};function gr(){return m||"./this.program"}function ut(){if(!ut.strings){var r=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",o={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:r,_:gr()};for(var u in zt)zt[u]===void 0?delete o[u]:o[u]=zt[u];var p=[];for(var u in o)p.push(`${u}=${o[u]}`);ut.strings=p}return ut.strings}function ai(r,o){for(var u=0;u<r.length;++u)k(r.charCodeAt(u)===(r.charCodeAt(u)&255)),ae[o++>>>0]=r.charCodeAt(u);ae[o>>>0]=0}function oi(r,o){var u=0;return ut().forEach(function(p,j){var L=o+u;O[r+j*4>>>2]=L,ai(p,L),u+=p.length+1}),0}function Xt(r,o){var u=ut();O[r>>>2]=u.length;var p=0;return u.forEach(function(j){p+=j.length+1}),O[o>>>2]=p,0}function si(r){g("fd_close called without SYSCALLS_REQUIRE_FILESYSTEM")}function _t(r,o){var u=0,p=0,j=0;{k(r==0||r==1||r==2);var L=2;r==0?u=2:(r==1||r==2)&&(u=64),j=1}return ae[o>>>0]=L,be[o+2>>>1]=j,Me=[u>>>0,(re=u,+Math.abs(re)>=1?re>0?+Math.floor(re/4294967296)>>>0:~~+Math.ceil((re-+(~~re>>>0))/4294967296)>>>0:0)],y[o+8>>>2]=Me[0],y[o+12>>>2]=Me[1],Me=[p>>>0,(re=p,+Math.abs(re)>=1?re>0?+Math.floor(re/4294967296)>>>0:~~+Math.ceil((re-+(~~re>>>0))/4294967296)>>>0:0)],y[o+16>>>2]=Me[0],y[o+20>>>2]=Me[1],0}function li(r,o,u,p,j,L){g("fd_pread called without SYSCALLS_REQUIRE_FILESYSTEM")}function ci(r,o,u,p,j,L){g("fd_pwrite called without SYSCALLS_REQUIRE_FILESYSTEM")}function ui(r,o,u,p){g("fd_read called without SYSCALLS_REQUIRE_FILESYSTEM")}function _i(r,o,u,p,j){return 70}function di(r){g("fd_sync called without SYSCALLS_REQUIRE_FILESYSTEM")}var qt=[null,[],[]];function Kt(r,o){var u=qt[r];k(u),o===0||o===10?((r===1?z:w)(sr(u,0)),u.length=0):u.push(o)}function fi(){ja(0),qt[1].length&&Kt(1,10),qt[2].length&&Kt(2,10)}function bi(r,o,u,p){for(var j=0,L=0;L<u;L++){var C=O[o>>>2],M=O[o+4>>>2];o+=8;for(var B=0;B<M;B++)Kt(r,le[C+B>>>0]);j+=M}return O[p>>>2]=j,0}function mi(r,o,u,p){var j=[],L=null,C=0,M=0,B=0,t=0,n=0,s=0,f,S;function T(E,F,N,v,R,W){var x,$,Y,Z;return $=E===10?28:16,R=E===10?Ze(R):mt(R),x=Qt($),Z=gt(x,E,R,W),k(!Z),Y=Qt(32),y[Y+4>>>2]=E,y[Y+8>>>2]=F,y[Y+12>>>2]=N,O[Y+24>>>2]=v,O[Y+20>>>2]=x,E===10?y[Y+16>>>2]=28:y[Y+16>>>2]=16,y[Y+28>>>2]=0,Y}if(u&&(B=y[u>>>2],t=y[u+4>>>2],n=y[u+8>>>2],s=y[u+12>>>2]),n&&!s&&(s=n===2?17:6),!n&&s&&(n=s===17?2:1),s===0&&(s=6),n===0&&(n=1),!r&&!o)return-2;if(B&-1088||u!==0&&y[u>>>2]&2&&!r)return-1;if(B&32)return-2;if(n!==0&&n!==1&&n!==2)return-7;if(t!==0&&t!==2&&t!==10)return-6;if(o&&(o=Ve(o),M=parseInt(o,10),isNaN(M)))return B&1024?-2:-8;if(!r)return t===0&&(t=2),(B&1)===0&&(t===2?C=Tr(2130706433):C=[0,0,0,1]),f=T(t,n,s,null,C,M),O[p>>>2]=f,0;if(r=Ve(r),C=Ht(r),C!==null)if(t===0||t===2)t=2;else if(t===10&&B&8)C=[0,0,Tr(65535),C],t=10;else return-2;else if(C=pt(r),C!==null)if(t===0||t===10)t=10;else return-2;return C!=null?(f=T(t,n,s,r,C,M),O[p>>>2]=f,0):B&4?-2:(r=ke.lookup_name(r),C=Ht(r),t===0?t=2:t===10&&(C=[0,0,Tr(65535),C]),f=T(t,n,s,null,C,M),O[p>>>2]=f,0)}function Vt(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return p=>crypto.getRandomValues(p);if(H)try{var r=we("crypto"),o=r.randomFillSync;if(o)return p=>r.randomFillSync(p);var u=r.randomBytes;return p=>(p.set(u(p.byteLength)),p)}catch(p){}g("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };")}function wt(r){return(wt=Vt())(r)}function pi(r,o){return wt(le.subarray(r>>>0,r+o>>>0)),0}function hi(r,o,u,p,j,L,C){var M=pn(r,o);if(M.errno)return-6;var B=M.port,t=M.addr,n=!1;if(u&&p){var s;if(C&1||!(s=ke.lookup_addr(t))){if(C&8)return-2}else t=s;var f=yt(t,u,p);f+1>=p&&(n=!0)}if(j&&L){B=""+B;var f=yt(B,j,L);f+1>=L&&(n=!0)}return n?-12:0}function yi(r,o){for(var u=0,p=0;p<=o;u+=r[p++]);return u}var vr=[31,29,31,30,31,30,31,31,30,31,30,31],$t=[31,28,31,30,31,30,31,31,30,31,30,31];function gi(r,o){for(var u=new Date(r.getTime());o>0;){var p=ct(u.getFullYear()),j=u.getMonth(),L=(p?vr:$t)[j];if(o>L-u.getDate())o-=L-u.getDate()+1,u.setDate(1),j<11?u.setMonth(j+1):(u.setMonth(0),u.setFullYear(u.getFullYear()+1));else return u.setDate(u.getDate()+o),u}return u}function vi(r,o,u){var p=u>0?u:$e(r)+1,j=new Array(p),L=_r(r,j,0,j.length);return o&&(j.length=L),j}function wr(r,o){k(r.length>=0,"writeArrayToMemory array must have a length (should be an array or typed array)"),ae.set(r,o>>>0)}function Er(r,o,u,p){var j=y[p+40>>>2],L={tm_sec:y[p>>>2],tm_min:y[p+4>>>2],tm_hour:y[p+8>>>2],tm_mday:y[p+12>>>2],tm_mon:y[p+16>>>2],tm_year:y[p+20>>>2],tm_wday:y[p+24>>>2],tm_yday:y[p+28>>>2],tm_isdst:y[p+32>>>2],tm_gmtoff:y[p+36>>>2],tm_zone:j?Ve(j):""},C=Ve(u),M={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var B in M)C=C.replace(new RegExp(B,"g"),M[B]);var t=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],n=["January","February","March","April","May","June","July","August","September","October","November","December"];function s(v,R,W){for(var x=typeof v=="number"?v.toString():v||"";x.length<R;)x=W[0]+x;return x}function f(v,R){return s(v,R,"0")}function S(v,R){function W($){return $<0?-1:$>0?1:0}var x;return(x=W(v.getFullYear()-R.getFullYear()))===0&&(x=W(v.getMonth()-R.getMonth()))===0&&(x=W(v.getDate()-R.getDate())),x}function T(v){switch(v.getDay()){case 0:return new Date(v.getFullYear()-1,11,29);case 1:return v;case 2:return new Date(v.getFullYear(),0,3);case 3:return new Date(v.getFullYear(),0,2);case 4:return new Date(v.getFullYear(),0,1);case 5:return new Date(v.getFullYear()-1,11,31);case 6:return new Date(v.getFullYear()-1,11,30)}}function E(v){var R=gi(new Date(v.tm_year+1900,0,1),v.tm_yday),W=new Date(R.getFullYear(),0,4),x=new Date(R.getFullYear()+1,0,4),$=T(W),Y=T(x);return S($,R)<=0?S(Y,R)<=0?R.getFullYear()+1:R.getFullYear():R.getFullYear()-1}var F={"%a":function(v){return t[v.tm_wday].substring(0,3)},"%A":function(v){return t[v.tm_wday]},"%b":function(v){return n[v.tm_mon].substring(0,3)},"%B":function(v){return n[v.tm_mon]},"%C":function(v){var R=v.tm_year+1900;return f(R/100|0,2)},"%d":function(v){return f(v.tm_mday,2)},"%e":function(v){return s(v.tm_mday,2," ")},"%g":function(v){return E(v).toString().substring(2)},"%G":function(v){return E(v)},"%H":function(v){return f(v.tm_hour,2)},"%I":function(v){var R=v.tm_hour;return R==0?R=12:R>12&&(R-=12),f(R,2)},"%j":function(v){return f(v.tm_mday+yi(ct(v.tm_year+1900)?vr:$t,v.tm_mon-1),3)},"%m":function(v){return f(v.tm_mon+1,2)},"%M":function(v){return f(v.tm_min,2)},"%n":function(){return`
`},"%p":function(v){return v.tm_hour>=0&&v.tm_hour<12?"AM":"PM"},"%S":function(v){return f(v.tm_sec,2)},"%t":function(){return"	"},"%u":function(v){return v.tm_wday||7},"%U":function(v){var R=v.tm_yday+7-v.tm_wday;return f(Math.floor(R/7),2)},"%V":function(v){var R=Math.floor((v.tm_yday+7-(v.tm_wday+6)%7)/7);if((v.tm_wday+371-v.tm_yday-2)%7<=2&&R++,R){if(R==53){var x=(v.tm_wday+371-v.tm_yday)%7;x!=4&&(x!=3||!ct(v.tm_year))&&(R=1)}}else{R=52;var W=(v.tm_wday+7-v.tm_yday-1)%7;(W==4||W==5&&ct(v.tm_year%400-1))&&R++}return f(R,2)},"%w":function(v){return v.tm_wday},"%W":function(v){var R=v.tm_yday+7-(v.tm_wday+6)%7;return f(Math.floor(R/7),2)},"%y":function(v){return(v.tm_year+1900).toString().substring(2)},"%Y":function(v){return v.tm_year+1900},"%z":function(v){var R=v.tm_gmtoff,W=R>=0;return R=Math.abs(R)/60,R=R/60*100+R%60,(W?"+":"-")+String("0000"+R).slice(-4)},"%Z":function(v){return v.tm_zone},"%%":function(){return"%"}};C=C.replace(/%%/g,"\0\0");for(var B in F)C.includes(B)&&(C=C.replace(new RegExp(B,"g"),F[B](L)));C=C.replace(/\0\0/g,"%");var N=vi(C,!1);return N.length>o?0:(wr(N,r),N.length-1)}function Sr(r,o,u,p,j){return Er(r,o,u,p)}function wi(){w("missing function: ucnv_close_64"),g(-1)}function Ei(){w("missing function: ucnv_convertEx_64"),g(-1)}function kr(){w("missing function: ucnv_open_64"),g(-1)}function Si(){w("missing function: ucnv_toAlgorithmic_64"),g(-1)}function ki(){w("missing function: ucsdet_close_64"),g(-1)}function Ci(){w("missing function: ucsdet_detect_64"),g(-1)}function Ti(){w("missing function: ucsdet_getConfidence_64"),g(-1)}function ji(){w("missing function: ucsdet_getName_64"),g(-1)}function Fi(){w("missing function: ucsdet_open_64"),g(-1)}function Ri(){w("missing function: ucsdet_setText_64"),g(-1)}function Ai(){w("missing function: unzClose"),g(-1)}function Di(){w("missing function: unzCloseCurrentFile"),g(-1)}function Mi(){w("missing function: unzGetCurrentFileInfo"),g(-1)}function Ii(){w("missing function: unzGetCurrentFileInfo64"),g(-1)}function Li(){w("missing function: unzGetGlobalInfo"),g(-1)}function Ui(){w("missing function: unzGoToFirstFile"),g(-1)}function xi(){w("missing function: unzGoToNextFile"),g(-1)}function Oi(){w("missing function: unzLocateFile"),g(-1)}function Ni(){w("missing function: unzOpen"),g(-1)}function Pi(){w("missing function: unzOpen2"),g(-1)}function Bi(){w("missing function: unzOpenCurrentFile"),g(-1)}function Hi(){w("missing function: unzReadCurrentFile"),g(-1)}function Wi(r){Xe=r,Ut()||(e.onExit&&e.onExit(r),xe=!0),h(r,new ot(r))}function Yi(r,o){if(Xe=r,Oa(),Ut()&&!o){var u=`program exited (with status: ${r}), but keepRuntimeAlive() is set (counter=${Lt}) due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)`;c(u),w(u)}Wi(r)}function Gi(r){if(r instanceof ot||r=="unwind")return Xe;Oe(),r instanceof WebAssembly.RuntimeError&&Rr()<=0&&w("Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to 65536)"),h(1,r)}function zi(r){var o=e["_"+r];return k(o,"Cannot call unknown function "+r+", make sure it is exported"),o}function Xi(r){var o=$e(r)+1,u=St(o);return yt(r,u,o),u}function qi(r,o,u,p,j){var L={string:T=>{var E=0;return T!=null&&T!==0&&(E=Xi(T)),E},array:T=>{var E=St(T.length);return wr(T,E),E}};function C(T){return o==="string"?Ve(T):o==="boolean"?Boolean(T):T}var M=zi(r),B=[],t=0;if(k(o!=="array",'Return type should not be "array".'),p)for(var n=0;n<p.length;n++){var s=L[u[n]];s?(t===0&&(t=Zt()),B[n]=s(p[n])):B[n]=p[n]}var f=M.apply(null,B);function S(T){return t!==0&&er(t),C(T)}return f=S(f),f}function Ki(){nn("fetchSettings")}var Cr={XML_GetBuffer:rr,XML_GetErrorCode:nr,XML_Parse:Te,XML_ParseBuffer:ln,XML_ParserCreate:ir,XML_ParserFree:ma,XML_ResumeParser:pa,XML_SetCharacterDataHandler:st,XML_SetElementHandler:ha,XML_SetUserData:Le,XML_StopParser:cn,__cxa_throw:fn,__dlsym:bn,__syscall__newselect:mn,__syscall_bind:ht,__syscall_connect:Wt,__syscall_faccessat:Fe,__syscall_fcntl64:ur,__syscall_fstat64:hn,__syscall_ftruncate64:yn,__syscall_getdents64:wa,__syscall_getpeername:vt,__syscall_getsockopt:gn,__syscall_ioctl:fr,__syscall_lstat64:Yt,__syscall_mkdirat:vn,__syscall_newfstatat:wn,__syscall_openat:En,__syscall_recvfrom:Sn,__syscall_renameat:kn,__syscall_rmdir:Cn,__syscall_sendto:Tn,__syscall_socket:jn,__syscall_stat64:Fn,__syscall_unlinkat:Rn,_emscripten_get_now_is_monotonic:Dn,_localtime_js:xn,_tzset_js:On,abort:Nn,dlopen:Pn,duckdb_web_fs_directory_create:Gt,duckdb_web_fs_directory_exists:mr,duckdb_web_fs_directory_list_files:Bn,duckdb_web_fs_directory_remove:Hn,duckdb_web_fs_file_close:Wn,duckdb_web_fs_file_exists:Yn,duckdb_web_fs_file_get_last_modified_time:Gn,duckdb_web_fs_file_move:zn,duckdb_web_fs_file_open:Xn,duckdb_web_fs_file_read:qn,duckdb_web_fs_file_truncate:Kn,duckdb_web_fs_file_write:Vn,duckdb_web_fs_get_default_data_protocol:$n,duckdb_web_fs_glob:Qn,duckdb_web_test_platform_feature:Jn,duckdb_web_udf_scalar_call:Zn,emscripten_console_error:ei,emscripten_date_now:ti,emscripten_get_heap_max:ri,emscripten_get_now:hr,emscripten_memcpy_big:ni,emscripten_resize_heap:yr,environ_get:oi,environ_sizes_get:Xt,fd_close:si,fd_fdstat_get:_t,fd_pread:li,fd_pwrite:ci,fd_read:ui,fd_seek:_i,fd_sync:di,fd_write:bi,getaddrinfo:mi,getentropy:pi,getnameinfo:hi,strftime_l:Sr,ucnv_close_64:wi,ucnv_convertEx_64:Ei,ucnv_open_64:kr,ucnv_toAlgorithmic_64:Si,ucsdet_close_64:ki,ucsdet_detect_64:Ci,ucsdet_getConfidence_64:Ti,ucsdet_getName_64:ji,ucsdet_open_64:Fi,ucsdet_setText_64:Ri,unzClose:Ai,unzCloseCurrentFile:Di,unzGetCurrentFileInfo:Mi,unzGetCurrentFileInfo64:Ii,unzGetGlobalInfo:Li,unzGoToFirstFile:Ui,unzGoToNextFile:xi,unzLocateFile:Oi,unzOpen:Ni,unzOpen2:Pi,unzOpenCurrentFile:Bi,unzReadCurrentFile:Hi},Ea=rn(),Sa=d("__wasm_call_ctors"),Vi=e._main=d("main"),ka=e._duckdb_web_fs_glob_add_path=d("duckdb_web_fs_glob_add_path"),$i=e._duckdb_web_clear_response=d("duckdb_web_clear_response"),ho=e._duckdb_web_fail_with=d("duckdb_web_fail_with"),yo=e._duckdb_web_reset=d("duckdb_web_reset"),Ca=e._duckdb_web_connect=d("duckdb_web_connect"),go=e._duckdb_web_disconnect=d("duckdb_web_disconnect"),vo=e._duckdb_web_flush_files=d("duckdb_web_flush_files"),wo=e._duckdb_web_flush_file=d("duckdb_web_flush_file"),Eo=e._duckdb_web_open=d("duckdb_web_open"),So=e._duckdb_web_get_global_file_info=d("duckdb_web_get_global_file_info"),ko=e._duckdb_web_collect_file_stats=d("duckdb_web_collect_file_stats"),Co=e._duckdb_web_export_file_stats=d("duckdb_web_export_file_stats"),To=e._duckdb_web_fs_drop_file=d("duckdb_web_fs_drop_file"),jo=e._duckdb_web_fs_drop_files=d("duckdb_web_fs_drop_files"),Fo=e._duckdb_web_fs_glob_file_infos=d("duckdb_web_fs_glob_file_infos"),Ro=e._duckdb_web_fs_get_file_info_by_id=d("duckdb_web_fs_get_file_info_by_id"),Ao=e._duckdb_web_fs_get_file_info_by_name=d("duckdb_web_fs_get_file_info_by_name"),Do=e._duckdb_web_fs_register_file_url=d("duckdb_web_fs_register_file_url"),Mo=e._duckdb_web_fs_register_file_buffer=d("duckdb_web_fs_register_file_buffer"),Io=e._duckdb_web_copy_file_to_buffer=d("duckdb_web_copy_file_to_buffer"),Lo=e._duckdb_web_copy_file_to_path=d("duckdb_web_copy_file_to_path"),Uo=e._duckdb_web_get_version=d("duckdb_web_get_version"),xo=e._duckdb_web_get_feature_flags=d("duckdb_web_get_feature_flags"),Oo=e._duckdb_web_tokenize=d("duckdb_web_tokenize"),No=e._duckdb_web_udf_scalar_create=d("duckdb_web_udf_scalar_create"),Po=e._duckdb_web_prepared_create=d("duckdb_web_prepared_create"),Bo=e._duckdb_web_prepared_close=d("duckdb_web_prepared_close"),Ho=e._duckdb_web_prepared_run=d("duckdb_web_prepared_run"),Wo=e._duckdb_web_prepared_send=d("duckdb_web_prepared_send"),Yo=e._duckdb_web_query_run=d("duckdb_web_query_run"),Go=e._duckdb_web_pending_query_start=d("duckdb_web_pending_query_start"),zo=e._duckdb_web_pending_query_poll=d("duckdb_web_pending_query_poll"),Xo=e._duckdb_web_pending_query_cancel=d("duckdb_web_pending_query_cancel"),qo=e._duckdb_web_query_fetch_results=d("duckdb_web_query_fetch_results"),Ko=e._duckdb_web_get_tablenames=d("duckdb_web_get_tablenames"),Vo=e._duckdb_web_insert_arrow_from_ipc_stream=d("duckdb_web_insert_arrow_from_ipc_stream"),$o=e._duckdb_web_insert_csv_from_path=d("duckdb_web_insert_csv_from_path"),Qo=e._duckdb_web_insert_json_from_path=d("duckdb_web_insert_json_from_path"),Ta=d("__errno_location"),ja=e._fflush=d("fflush"),Tr=d("htonl"),jr=d("htons"),Qi=d("ntohs"),Qt=e._malloc=d("malloc"),Fa=e._free=d("free"),Et=function(){return(Et=e.asm.emscripten_stack_init).apply(null,arguments)},Jt=function(){return(Jt=e.asm.emscripten_stack_get_free).apply(null,arguments)},Fr=function(){return(Fr=e.asm.emscripten_stack_get_base).apply(null,arguments)},dt=function(){return(dt=e.asm.emscripten_stack_get_end).apply(null,arguments)},Zt=d("stackSave"),er=d("stackRestore"),St=d("stackAlloc"),Rr=function(){return(Rr=e.asm.emscripten_stack_get_current).apply(null,arguments)},Ji=d("__cxa_is_pointer_type"),Ar=e.dynCall_jiji=d("dynCall_jiji"),Dr=e.dynCall_iiiiij=d("dynCall_iiiiij"),Mr=e.dynCall_iiiiijj=d("dynCall_iiiiijj"),kt=e.dynCall_iiiiiijj=d("dynCall_iiiiiijj"),Zi=e.dynCall_viijii=d("dynCall_viijii"),Ra=e.dynCall_viijji=d("dynCall_viijji"),Aa=e.dynCall_iiiji=d("dynCall_iiiji"),Da=e.dynCall_ji=d("dynCall_ji"),Ma=e.dynCall_viij=d("dynCall_viij"),Jo=e.dynCall_vij=d("dynCall_vij"),Zo=e.dynCall_vjjijij=d("dynCall_vjjijij"),es=e.dynCall_vijjji=d("dynCall_vijjji"),ts=e.dynCall_vjjii=d("dynCall_vjjii"),rs=e.dynCall_viiiiiji=d("dynCall_viiiiiji"),ns=e.dynCall_jiiiji=d("dynCall_jiiiji"),is=e.dynCall_jiiij=d("dynCall_jiiij"),as=e.dynCall_jijjij=d("dynCall_jijjij"),os=e.dynCall_iiij=d("dynCall_iiij"),ss=e.dynCall_vijjj=d("dynCall_vijjj"),ls=e.dynCall_vijj=d("dynCall_vijj"),cs=e.dynCall_viijj=d("dynCall_viijj"),us=e.dynCall_jiijii=d("dynCall_jiijii"),_s=e.dynCall_jijiii=d("dynCall_jijiii"),ds=e.dynCall_viijiiiii=d("dynCall_viijiiiii"),fs=e.dynCall_viijiiij=d("dynCall_viijiiij"),bs=e.dynCall_vijiiiji=d("dynCall_vijiiiji"),ms=e.dynCall_viiiij=d("dynCall_viiiij"),ps=e.dynCall_jiiji=d("dynCall_jiiji"),hs=e.dynCall_viiijij=d("dynCall_viiijij"),ys=e.dynCall_viijiij=d("dynCall_viijiij"),gs=e.dynCall_viiiiijj=d("dynCall_viiiiijj"),vs=e.dynCall_viiijji=d("dynCall_viiijji"),ws=e.dynCall_vijii=d("dynCall_vijii"),Es=e.dynCall_iiiiiji=d("dynCall_iiiiiji"),Ss=e.dynCall_iij=d("dynCall_iij"),ks=e.dynCall_iiijj=d("dynCall_iiijj"),Cs=e.dynCall_iijii=d("dynCall_iijii"),Ts=e.dynCall_viji=d("dynCall_viji"),js=e.dynCall_iiji=d("dynCall_iiji"),Fs=e.dynCall_viijjj=d("dynCall_viijjj"),Rs=e.dynCall_viiijj=d("dynCall_viiijj"),As=e.dynCall_jijj=d("dynCall_jijj"),Ds=e.dynCall_jiiiii=d("dynCall_jiiiii"),Ms=e.dynCall_jiiii=d("dynCall_jiiii"),Is=e.dynCall_jii=d("dynCall_jii"),Ls=e.dynCall_viijij=d("dynCall_viijij"),Us=e.dynCall_viiij=d("dynCall_viiij"),xs=e.dynCall_j=d("dynCall_j"),Os=e.dynCall_viiijiiiijj=d("dynCall_viiijiiiijj"),Ns=e.dynCall_jiiiij=d("dynCall_jiiiij"),Ps=e.dynCall_jj=d("dynCall_jj"),Bs=e.dynCall_ij=d("dynCall_ij"),Hs=e.dynCall_ijjj=d("dynCall_ijjj"),Ws=e.dynCall_jjjd=d("dynCall_jjjd"),Ys=e.dynCall_jjjjjjd=d("dynCall_jjjjjjd"),Gs=e.dynCall_jij=d("dynCall_jij"),zs=e.dynCall_viiijiiijii=d("dynCall_viiijiiijii"),Xs=e.dynCall_viijijiiii=d("dynCall_viijijiiii"),qs=e.dynCall_viiji=d("dynCall_viiji"),Ks=e.dynCall_jiiiijj=d("dynCall_jiiiijj"),Vs=e.dynCall_viiiji=d("dynCall_viiiji"),$s=e.dynCall_viiiiji=d("dynCall_viiiiji"),Qs=e.dynCall_jijiiii=d("dynCall_jijiiii"),Js=e.dynCall_viiijiji=d("dynCall_viiijiji"),Zs=e.dynCall_viijiji=d("dynCall_viijiji"),el=e.dynCall_jiii=d("dynCall_jiii");e.stackAlloc=St,e.stackSave=Zt,e.stackRestore=er,e.ccall=qi;var Ia=["getHostByName","traverseStack","getCallstack","emscriptenLog","convertPCtoSourceLocation","readEmAsmArgs","jstoi_s","listenOnce","autoResumeAudioContext","dynCallLegacy","getDynCaller","dynCall","runtimeKeepalivePush","runtimeKeepalivePop","callUserCallback","maybeExit","safeSetTimeout","asmjsMangle","asyncLoad","alignMemory","mmapAlloc","HandleAllocator","getNativeTypeSize","STACK_SIZE","STACK_ALIGN","POINTER_SIZE","ASSERTIONS","writeI53ToI64","writeI53ToI64Clamped","writeI53ToI64Signaling","writeI53ToU64Clamped","writeI53ToU64Signaling","readI53FromU64","convertI32PairToI53","convertU32PairToI53","cwrap","uleb128Encode","sigToWasmTypes","generateFuncType","convertJsFunctionToWasm","getEmptyTableSlot","updateTableMap","getFunctionAddress","addFunction","removeFunction","reallyNegative","unSign","strLen","reSign","formatString","intArrayToString","AsciiToString","UTF16ToString","stringToUTF16","lengthBytesUTF16","UTF32ToString","stringToUTF32","lengthBytesUTF32","registerKeyEventCallback","maybeCStringToJsString","findEventTarget","findCanvasEventTarget","getBoundingClientRect","fillMouseEventData","registerMouseEventCallback","registerWheelEventCallback","registerUiEventCallback","registerFocusEventCallback","fillDeviceOrientationEventData","registerDeviceOrientationEventCallback","fillDeviceMotionEventData","registerDeviceMotionEventCallback","screenOrientation","fillOrientationChangeEventData","registerOrientationChangeEventCallback","fillFullscreenChangeEventData","registerFullscreenChangeEventCallback","JSEvents_requestFullscreen","JSEvents_resizeCanvasForFullscreen","registerRestoreOldStyle","hideEverythingExceptGivenElement","restoreHiddenElements","setLetterbox","softFullscreenResizeWebGLRenderTarget","doRequestFullscreen","fillPointerlockChangeEventData","registerPointerlockChangeEventCallback","registerPointerlockErrorEventCallback","requestPointerLock","fillVisibilityChangeEventData","registerVisibilityChangeEventCallback","registerTouchEventCallback","fillGamepadEventData","registerGamepadEventCallback","registerBeforeUnloadEventCallback","fillBatteryEventData","battery","registerBatteryEventCallback","setCanvasElementSize","getCanvasElementSize","demangle","demangleAll","jsStackTrace","stackTrace","checkWasiClock","wasiRightsToMuslOFlags","wasiOFlagsToMuslOFlags","createDyncallWrapper","setImmediateWrapped","clearImmediateWrapped","polyfillSetImmediate","getPromise","makePromise","idsToPromises","makePromiseCallback","setMainLoop","heapObjectForWebGLType","heapAccessShiftForWebGLHeap","webgl_enable_ANGLE_instanced_arrays","webgl_enable_OES_vertex_array_object","webgl_enable_WEBGL_draw_buffers","webgl_enable_WEBGL_multi_draw","emscriptenWebGLGet","computeUnpackAlignedImageSize","colorChannelsInGlTextureFormat","emscriptenWebGLGetTexPixelData","__glGenObject","emscriptenWebGLGetUniform","webglGetUniformLocation","webglPrepareUniformLocationsBeforeFirstUse","webglGetLeftBracePos","emscriptenWebGLGetVertexAttrib","__glGetActiveAttribOrUniform","writeGLArray","registerWebGlEventCallback","runAndAbortIfError","SDL_unicode","SDL_ttfContext","SDL_audio","GLFW_Window","ALLOC_NORMAL","ALLOC_STACK","allocate","writeStringToMemory","writeAsciiToMemory"];Ia.forEach(on);var La=["run","addOnPreRun","addOnInit","addOnPreMain","addOnExit","addOnPostRun","addRunDependency","removeRunDependency","FS_createFolder","FS_createPath","FS_createDataFile","FS_createLazyFile","FS_createLink","FS_createDevice","FS_unlink","out","err","callMain","abort","keepRuntimeAlive","wasmMemory","getTempRet0","setTempRet0","writeStackCookie","checkStackCookie","ptrToString","zeroMemory","exitJS","getHeapMax","emscripten_realloc_buffer","ENV","MONTH_DAYS_REGULAR","MONTH_DAYS_LEAP","MONTH_DAYS_REGULAR_CUMULATIVE","MONTH_DAYS_LEAP_CUMULATIVE","isLeapYear","ydayFromDate","arraySum","addDays","ERRNO_CODES","ERRNO_MESSAGES","setErrNo","inetPton4","inetNtop4","inetPton6","inetNtop6","readSockaddr","writeSockaddr","DNS","Protocols","Sockets","initRandomFill","randomFill","timers","warnOnce","UNWIND_CACHE","readEmAsmArgsArray","jstoi_q","getExecutableName","handleException","readI53FromI64","convertI32PairToI53Checked","getCFunc","freeTableIndexes","functionsInTableMap","setValue","getValue","PATH","PATH_FS","UTF8Decoder","UTF8ArrayToString","UTF8ToString","stringToUTF8Array","stringToUTF8","lengthBytesUTF8","intArrayFromString","stringToAscii","UTF16Decoder","stringToNewUTF8","stringToUTF8OnStack","writeArrayToMemory","JSEvents","specialHTMLTargets","currentFullscreenStrategy","restoreOldWindowedStyle","ExitStatus","getEnvStrings","flush_NO_FILESYSTEM","dlopenMissingError","promiseMap","uncaughtExceptionCount","exceptionLast","exceptionCaught","ExceptionInfo","Browser","wget","SYSCALLS","getSocketFromFD","getSocketAddress","tempFixedLengthArray","miniTempWebGLFloatBuffers","miniTempWebGLIntBuffers","GL","emscripten_webgl_power_preferences","AL","GLUT","EGL","GLEW","IDBStore","SDL","SDL_gfx","GLFW","allocateUTF8","allocateUTF8OnStack","SOCKFS","FS"];La.forEach(Bt);var tr;Ne=function r(){tr||ea(),tr||(Ne=r)};function Ua(){k(me==0,'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])'),k(it.length==0,"cannot call main when preRun functions remain to be called");var r=Vi,o=0,u=0;try{var p=r(o,u);return Yi(p,!0),p}catch(j){return Gi(j)}}function xa(){Et(),Yr()}function ea(){if(me>0||(xa(),Gr(),me>0))return;function r(){tr||(tr=!0,e.calledRun=!0,!xe&&(zr(),Xr(),l(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),ta&&Ua(),qr()))}e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1),r()},1)):r(),Oe()}function Oa(){var r=z,o=w,u=!1;z=w=p=>{u=!0};try{fi()}catch(p){}z=r,w=o,u&&(Ie("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc."),Ie("(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)"))}if(e.preInit)for(typeof e.preInit=="function"&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();var ta=!0;return e.noInitialRun&&(ta=!1),ea(),a.ready}})(),so=Fl;var Tt=class extends Pr{constructor(e,l,c,_){super(e,l);this.mainModuleURL=c,this.pthreadWorkerURL=_}locateFile(e,l){if(e.endsWith(".wasm"))return this.mainModuleURL;if(e.endsWith(".worker.js")){if(!this.pthreadWorkerURL)throw new Error("Missing DuckDB worker URL!");return this.pthreadWorkerURL}throw new Error(`WASM instantiation requested unexpected file: prefix=${l} path=${e}`)}instantiateWasm(e,l){globalThis.DUCKDB_RUNTIME=this._runtime;let c=this.onInstantiationProgress;if(WebAssembly.instantiateStreaming)if(typeof TransformStream=="function"){let b=(async()=>{var ne;let m=new Request(this.mainModuleURL),h=await fetch(m),D=h.headers.get("content-length"),I=D&&parseInt(D,10)||0,H=new Date,ee={startedAt:H,updatedAt:H,bytesTotal:I||0,bytesLoaded:0},U={transform(oe,ie){ee.bytesLoaded+=oe.byteLength;let Re=new Date;if(Re.getTime()-ee.updatedAt.getTime()<20){ee.updatedAt=Re,ie.enqueue(oe);return}for(let pe of c)pe(ee);ie.enqueue(oe)}},se=new TransformStream(U);return new Response((ne=h.body)==null?void 0:ne.pipeThrough(se),h)})();WebAssembly.instantiateStreaming(b,e).then(m=>{l(m.instance,m.module)})}else{console.warn("instantiating without progress handler since transform streams are unavailable");let _=new Request(this.mainModuleURL);WebAssembly.instantiateStreaming(fetch(_),e).then(b=>{l(b.instance,b.module)})}else if(typeof XMLHttpRequest=="function"){let _=new XMLHttpRequest,b=this.mainModuleURL,m=new Date,h={startedAt:m,updatedAt:m,bytesTotal:0,bytesLoaded:0};_.open("GET",b),_.responseType="arraybuffer",_.onerror=D=>{throw this.logger.log({timestamp:new Date,level:4,origin:3,topic:5,event:2,value:"Failed to load WASM: "+D}),new Error(D.toString())},_.onprogress=D=>{h.bytesTotal=D.total,h.bytesLoaded=D.loaded;let I=new Date;if(I.getTime()-h.updatedAt.getTime()<20){h.updatedAt=I;return}for(let H of c)H(h)},_.onload=()=>{WebAssembly.instantiate(_.response,e).then(D=>{l(D.instance,D.module)}).catch(D=>{throw this.logger.log({timestamp:new Date,level:4,origin:3,topic:5,event:2,value:"Failed to instantiate WASM: "+D}),new Error(D)})},_.send()}else console.warn("instantiating with manual fetch since streaming instantiation and xhrs are unavailable"),(async()=>{let b=new Request(this.mainModuleURL),h=await(await fetch(b)).arrayBuffer();WebAssembly.instantiate(h,e).then(D=>{l(D.instance,D.module)})})();return[]}};var Hr=class extends Tt{constructor(a,e,l,c=null){super(a,e,l,c)}instantiateImpl(a){return so({...a,instantiateWasm:this.instantiateWasm.bind(this),locateFile:this.locateFile.bind(this)})}};var Rl=(()=>{var i=import.meta.url;return async function(a={}){var e=typeof a<"u"?a:{},l,c;e.ready=new Promise((t,n)=>{l=t,c=n}),["_main","_malloc","_free","_duckdb_web_clear_response","_duckdb_web_collect_file_stats","_duckdb_web_connect","_duckdb_web_copy_file_to_buffer","_duckdb_web_copy_file_to_path","_duckdb_web_disconnect","_duckdb_web_export_file_stats","_duckdb_web_fail_with","_duckdb_web_flush_file","_duckdb_web_flush_files","_duckdb_web_fs_drop_file","_duckdb_web_fs_drop_files","_duckdb_web_fs_get_file_info_by_id","_duckdb_web_fs_get_file_info_by_name","_duckdb_web_fs_glob_add_path","_duckdb_web_fs_glob_file_infos","_duckdb_web_fs_register_file_buffer","_duckdb_web_fs_register_file_url","_duckdb_web_get_feature_flags","_duckdb_web_get_global_file_info","_duckdb_web_get_tablenames","_duckdb_web_get_version","_duckdb_web_insert_arrow_from_ipc_stream","_duckdb_web_insert_csv_from_path","_duckdb_web_insert_json_from_path","_duckdb_web_open","_duckdb_web_pending_query_cancel","_duckdb_web_pending_query_poll","_duckdb_web_pending_query_start","_duckdb_web_prepared_close","_duckdb_web_prepared_create","_duckdb_web_prepared_run","_duckdb_web_prepared_send","_duckdb_web_query_fetch_results","_duckdb_web_query_run","_duckdb_web_reset","_duckdb_web_tokenize","_duckdb_web_udf_scalar_create","getExceptionMessage","___get_exception_message","___cpp_exception","___cxa_increment_exception_refcount","___cxa_decrement_exception_refcount","___thrown_object_from_unwind_exception","_fflush","onRuntimeInitialized"].forEach(t=>{Object.getOwnPropertyDescriptor(e.ready,t)||Object.defineProperty(e.ready,t,{get:()=>g("You are getting "+t+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js"),set:()=>g("You are setting "+t+" on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js")})});var _=Object.assign({},e),b=[],m="./this.program",h=(t,n)=>{throw n},D=typeof window=="object",I=typeof importScripts=="function",H=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",ee=!D&&!H&&!I;if(e.ENVIRONMENT)throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");var U="";function se(t){return e.locateFile?e.locateFile(t,U):U+t}var ne,oe,ie,Re;if(H){throw typeof process>"u"||process.release,new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");var pe=process.versions.node,ve=pe.split(".").slice(0,3);ve=ve[0]*1e4+ve[1]*100+ve[2].split("-")[0]*1;var jt=101900;if(ve<101900)throw new Error("This emscripten-generated code requires node v10.19.19.0 (detected v"+pe+")");let{createRequire:t}=await Promise.resolve().then(()=>ra(Ba("module")));var we=t(import.meta.url),Qe=we("fs"),Ue=we("path");I?U=Ue.dirname(U)+"/":U=we("url").fileURLToPath(new URL("./",import.meta.url)),ne=(n,s)=>(n=at(n)?new URL(n):Ue.normalize(n),Qe.readFileSync(n,s?void 0:"utf8")),ie=n=>{var s=ne(n,!0);return s.buffer||(s=new Uint8Array(s)),k(s.buffer),s},oe=(n,s,f,S=!0)=>{n=at(n)?new URL(n):Ue.normalize(n),Qe.readFile(n,S?void 0:"utf8",(T,E)=>{T?f(T):s(S?E.buffer:E)})},!e.thisProgram&&process.argv.length>1&&(m=process.argv[1].replace(/\\/g,"/")),b=process.argv.slice(2),h=(n,s)=>{throw process.exitCode=n,s},e.inspect=()=>"[Emscripten Module object]"}else if(ee){if(typeof process=="object"&&typeof we=="function"||typeof window=="object"||typeof importScripts=="function")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");typeof read<"u"&&(ne=t=>read(t)),ie=t=>{let n;return typeof readbuffer=="function"?new Uint8Array(readbuffer(t)):(n=read(t,"binary"),k(typeof n=="object"),n)},oe=(t,n,s)=>{setTimeout(()=>n(ie(t)),0)},typeof clearTimeout>"u"&&(globalThis.clearTimeout=t=>{}),typeof scriptArgs<"u"?b=scriptArgs:typeof arguments<"u"&&(b=arguments),typeof quit=="function"&&(h=(t,n)=>{throw setTimeout(()=>{if(!(n instanceof ot)){let s=n;n&&typeof n=="object"&&n.stack&&(s=[n,n.stack]),w(`exiting due to exception: ${s}`)}quit(t)}),n}),typeof print<"u"&&(typeof console>"u"&&(console={}),console.log=print,console.warn=console.error=typeof printErr<"u"?printErr:print)}else if(D||I){if(I?U=self.location.href:typeof document<"u"&&document.currentScript&&(U=document.currentScript.src),i&&(U=i),U.indexOf("blob:")!==0?U=U.substr(0,U.replace(/[?#].*/,"").lastIndexOf("/")+1):U="",!(typeof window=="object"||typeof importScripts=="function"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");ne=t=>{var n=new XMLHttpRequest;return n.open("GET",t,!1),n.send(null),n.responseText},I&&(ie=t=>{var n=new XMLHttpRequest;return n.open("GET",t,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)}),oe=(t,n,s)=>{var f=new XMLHttpRequest;f.open("GET",t,!0),f.responseType="arraybuffer",f.onload=()=>{if(f.status==200||f.status==0&&f.response){n(f.response);return}s()},f.onerror=s,f.send(null)},Re=t=>document.title=t}else throw new Error("environment detection error");var z=e.print||console.log.bind(console),w=e.printErr||console.error.bind(console);Object.assign(e,_),_=null,ka(),e.arguments&&(b=e.arguments),ue("arguments","arguments_"),e.thisProgram&&(m=e.thisProgram),ue("thisProgram","thisProgram"),e.quit&&(h=e.quit),ue("quit","quit_"),k(typeof e.memoryInitializerPrefixURL>"u","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"),k(typeof e.pthreadMainPrefixURL>"u","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"),k(typeof e.cdInitializerPrefixURL>"u","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"),k(typeof e.filePackagePrefixURL>"u","Module.filePackagePrefixURL option was removed, use Module.locateFile instead"),k(typeof e.read>"u","Module.read option was removed (modify read_ in JS)"),k(typeof e.readAsync>"u","Module.readAsync option was removed (modify readAsync in JS)"),k(typeof e.readBinary>"u","Module.readBinary option was removed (modify readBinary in JS)"),k(typeof e.setWindowTitle>"u","Module.setWindowTitle option was removed (modify setWindowTitle in JS)"),k(typeof e.TOTAL_MEMORY>"u","Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"),ue("read","read_"),ue("readAsync","readAsync"),ue("readBinary","readBinary"),ue("setWindowTitle","setWindowTitle");var Ae="IDBFS is no longer included by default; build with -lidbfs.js",Ce="PROXYFS is no longer included by default; build with -lproxyfs.js",he="WORKERFS is no longer included by default; build with -lworkerfs.js",fe="NODEFS is no longer included by default; build with -lnodefs.js";k(!ee,"shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");var X;e.wasmBinary&&(X=e.wasmBinary),ue("wasmBinary","wasmBinary");var Ee=e.noExitRuntime||!0;ue("noExitRuntime","noExitRuntime"),typeof WebAssembly!="object"&&g("no native wasm support detected");var ye,xe=!1,Xe;function k(t,n){t||g("Assertion failed"+(n?": "+n:""))}var co,ae,le,be,Ft,y,O,rt,nt;function Rt(){var t=ye.buffer;e.HEAP8=ae=new Int8Array(t),e.HEAP16=be=new Int16Array(t),e.HEAP32=y=new Int32Array(t),e.HEAPU8=le=new Uint8Array(t),e.HEAPU16=Ft=new Uint16Array(t),e.HEAPU32=O=new Uint32Array(t),e.HEAPF32=rt=new Float32Array(t),e.HEAPF64=nt=new Float64Array(t)}k(!e.STACK_SIZE,"STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time"),k(typeof Int32Array<"u"&&typeof Float64Array<"u"&&Int32Array.prototype.subarray!=null&&Int32Array.prototype.set!=null,"JS engine does not provide full typed array support"),k(!e.wasmMemory,"Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally"),k(!e.INITIAL_MEMORY,"Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically");var At;function Yr(){var t=Ar();k((t&3)==0),t==0&&(t+=4),O[t>>>2]=34821223,O[t+4>>>2]=2310721022,O[0]=1668509029}function Oe(){if(!xe){var t=Ar();t==0&&(t+=4);var n=O[t>>>2],s=O[t+4>>>2];(n!=34821223||s!=2310721022)&&g(`Stack overflow! Stack cookie has been overwritten at ${st(t)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${st(s)} ${st(n)}`),O[0]!=1668509029&&g("Runtime error: The application has corrupted its heap memory area (address zero)!")}}(function(){var t=new Int16Array(1),n=new Int8Array(t.buffer);if(t[0]=25459,n[0]!==115||n[1]!==99)throw"Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)"})();var it=[],Dt=[],Mt=[],uo=[],It=[],Je=!1,Lt=0;function Ut(){return Ee||Lt>0}function Gr(){if(e.preRun)for(typeof e.preRun=="function"&&(e.preRun=[e.preRun]);e.preRun.length;)Kr(e.preRun.shift());qe(it)}function zr(){k(!Je),Je=!0,Oe(),qe(Dt)}function Xr(){Oe(),qe(Mt)}function qr(){if(Oe(),e.postRun)for(typeof e.postRun=="function"&&(e.postRun=[e.postRun]);e.postRun.length;)$r(e.postRun.shift());qe(It)}function Kr(t){it.unshift(t)}function Vr(t){Dt.unshift(t)}function _o(t){Mt.unshift(t)}function fo(t){}function $r(t){It.unshift(t)}k(Math.imul,"This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),k(Math.fround,"This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),k(Math.clz32,"This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill"),k(Math.trunc,"This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");var me=0,Se=null,Ne=null,De={};function bo(t){for(var n=t;;){if(!De[t])return t;t=n+Math.random()}}function Qr(t){me++,e.monitorRunDependencies&&e.monitorRunDependencies(me),t?(k(!De[t]),De[t]=1,Se===null&&typeof setInterval<"u"&&(Se=setInterval(()=>{if(xe){clearInterval(Se),Se=null;return}var n=!1;for(var s in De)n||(n=!0,w("still waiting on run dependencies:")),w("dependency: "+s);n&&w("(end of list)")},1e4))):w("warning: run dependency added without ID")}function Jr(t){if(me--,e.monitorRunDependencies&&e.monitorRunDependencies(me),t?(k(De[t]),delete De[t]):w("warning: run dependency removed without ID"),me==0&&(Se!==null&&(clearInterval(Se),Se=null),Ne)){var n=Ne;Ne=null,n()}}function g(t){e.onAbort&&e.onAbort(t),t="Aborted("+t+")",w(t),xe=!0,Xe=1,Je&&er();var n=new WebAssembly.RuntimeError(t);throw c(n),n}var Zr="data:application/octet-stream;base64,";function xt(t){return t.startsWith(Zr)}function at(t){return t.startsWith("file://")}function d(t,n){return function(){var s=t,f=n;return n||(f=e.asm),k(Je,"native function `"+s+"` called before runtime initialization"),f[t]||k(f[t],"exported native function `"+s+"` not found"),f[t].apply(null,arguments)}}var ce;e.locateFile?(ce="./duckdb-eh.wasm",xt(ce)||(ce=se(ce))):ce=new URL("./duckdb-eh.wasm",import.meta.url).href;function Ot(t){try{if(t==ce&&X)return new Uint8Array(X);if(ie)return ie(t);throw"both async and sync fetching of the wasm failed"}catch(n){g(n)}}function en(t){return!X&&(D||I)&&typeof fetch=="function"?fetch(t,{credentials:"same-origin"}).then(n=>{if(!n.ok)throw"failed to load wasm binary file at '"+t+"'";return n.arrayBuffer()}).catch(()=>Ot(t)):Promise.resolve().then(()=>Ot(t))}function Nt(t,n,s){return en(t).then(f=>WebAssembly.instantiate(f,n)).then(f=>f).then(s,f=>{w("failed to asynchronously prepare wasm: "+f),at(ce)&&w("warning: Loading from a file URI ("+ce+") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing"),g(f)})}function tn(t,n,s,f){return!t&&typeof WebAssembly.instantiateStreaming=="function"&&!xt(n)&&!H&&typeof fetch=="function"?fetch(n,{credentials:"same-origin"}).then(S=>{var T=WebAssembly.instantiateStreaming(S,s);return T.then(f,function(E){return w("wasm streaming compile failed: "+E),w("falling back to ArrayBuffer instantiation"),Nt(n,s,f)})}):Nt(n,s,f)}function rn(){var t={env:$i,wasi_snapshot_preview1:$i};function n(S,T){var E=S.exports;return e.asm=E,ye=e.asm.memory,k(ye,"memory not found in wasm exports"),Rt(),At=e.asm.__indirect_function_table,k(At,"table not found in wasm exports"),Vr(e.asm.__wasm_call_ctors),Jr("wasm-instantiate"),E}Qr("wasm-instantiate");var s=e;function f(S){k(e===s,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"),s=null,n(S.instance)}if(e.instantiateWasm)try{return e.instantiateWasm(t,n)}catch(S){w("Module.instantiateWasm callback failed with error: "+S),c(S)}return tn(X,ce,t,f).catch(c),{}}var re,Me;function ue(t,n){Object.getOwnPropertyDescriptor(e,t)||Object.defineProperty(e,t,{configurable:!0,get:function(){g("Module."+t+" has been replaced with plain "+n+" (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)")}})}function nn(t){Object.getOwnPropertyDescriptor(e,t)&&g("`Module."+t+"` was supplied but `"+t+"` not included in INCOMING_MODULE_JS_API")}function Pt(t){return t==="FS_createPath"||t==="FS_createDataFile"||t==="FS_createPreloadedFile"||t==="FS_unlink"||t==="addRunDependency"||t==="FS_createLazyFile"||t==="FS_createDevice"||t==="removeRunDependency"}function an(t,n){typeof globalThis<"u"&&Object.defineProperty(globalThis,t,{configurable:!0,get:function(){Le("`"+t+"` is not longer defined by emscripten. "+n)}})}an("buffer","Please use HEAP8.buffer or wasmMemory.buffer");function on(t){typeof globalThis<"u"&&!Object.getOwnPropertyDescriptor(globalThis,t)&&Object.defineProperty(globalThis,t,{configurable:!0,get:function(){var n="`"+t+"` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line",s=t;s.startsWith("_")||(s="$"+t),n+=" (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE="+s+")",Pt(t)&&(n+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),Le(n)}}),Bt(t)}function Bt(t){Object.getOwnPropertyDescriptor(e,t)||Object.defineProperty(e,t,{configurable:!0,get:function(){var n="'"+t+"' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";Pt(t)&&(n+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),g(n)}})}function mo(t){console.warn.apply(console,arguments)}function ot(t){this.name="ExitStatus",this.message=`Program terminated with exit(${t})`,this.status=t}function qe(t){for(;t.length>0;)t.shift()(e)}function sn(){return e.asm.__cpp_exception}function Ke(t){var n=t.getArg(sn(),0);return Da(n)}function po(t){var n=Ke(t);Ra(n)}function Ie(t){var n=Dr(),s=t();return Mr(n),s}var rr=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function nr(t,n,s){n>>>=0;for(var f=n+s,S=n;t[S]&&!(S>=f);)++S;if(S-n>16&&t.buffer&&rr)return rr.decode(t.subarray(n,S));for(var T="";n<S;){var E=t[n++];if(!(E&128)){T+=String.fromCharCode(E);continue}var F=t[n++]&63;if((E&224)==192){T+=String.fromCharCode((E&31)<<6|F);continue}var N=t[n++]&63;if((E&240)==224?E=(E&15)<<12|F<<6|N:((E&248)!=240&&Le("Invalid UTF-8 leading byte "+st(E)+" encountered when deserializing a UTF-8 string in wasm memory to a JS string!"),E=(E&7)<<18|F<<12|N<<6|t[n++]&63),E<65536)T+=String.fromCharCode(E);else{var v=E-65536;T+=String.fromCharCode(55296|v>>10,56320|v&1023)}}return T}function Te(t,n){return k(typeof t=="number"),t>>>=0,t?nr(le,t,n):""}function ln(t){return Ie(function(){var n=kt(4),s=kt(4);Ma(t,n,s);var f=O[n>>>2],S=O[s>>>2],T=Te(f);Zt(f);var E;return S&&(E=Te(S),Zt(S)),[T,E]})}function ir(t){var n=Ke(t);return ln(n)}e.getExceptionMessage=ir;function ma(t,n="i8"){switch(n.endsWith("*")&&(n="*"),n){case"i1":return ae[t>>>0];case"i8":return ae[t>>>0];case"i16":return be[t>>>1];case"i32":return y[t>>>2];case"i64":g("to do getValue(i64) use WASM_BIGINT");case"float":return rt[t>>>2];case"double":return nt[t>>>3];case"*":return O[t>>>2];default:g(`invalid type for getValue: ${n}`)}}function pa(t){var n=Ke(t);Aa(n)}function st(t){return k(typeof t=="number"),"0x"+t.toString(16).padStart(8,"0")}function ha(t,n,s="i8"){switch(s.endsWith("*")&&(s="*"),s){case"i1":ae[t>>>0]=n;break;case"i8":ae[t>>>0]=n;break;case"i16":be[t>>>1]=n;break;case"i32":y[t>>>2]=n;break;case"i64":g("to do setValue(i64) use WASM_BIGINT");case"float":rt[t>>>2]=n;break;case"double":nt[t>>>3]=n;break;case"*":O[t>>>2]=n;break;default:g(`invalid type for setValue: ${s}`)}}function Le(t){Le.shown||(Le.shown={}),Le.shown[t]||(Le.shown[t]=1,H&&(t="warning: "+t),w(t))}function cn(){w("missing function: XML_GetBuffer"),g(-1)}function un(){w("missing function: XML_GetErrorCode"),g(-1)}function _n(){w("missing function: XML_Parse"),g(-1)}function dn(){w("missing function: XML_ParseBuffer"),g(-1)}function fn(){w("missing function: XML_ParserCreate"),g(-1)}function ar(){w("missing function: XML_ParserFree"),g(-1)}function bn(){w("missing function: XML_ResumeParser"),g(-1)}function or(){w("missing function: XML_SetCharacterDataHandler"),g(-1)}function sr(){w("missing function: XML_SetElementHandler"),g(-1)}function Ve(){w("missing function: XML_SetUserData"),g(-1)}function He(){w("missing function: XML_StopParser"),g(-1)}function mn(t,n,s,f){g(`Assertion failed: ${Te(t)}, at: `+[n?Te(n):"unknown filename",s,f?Te(f):"unknown function"])}var lr="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function cr(t,n,s){g(lr)}var je={varargs:void 0,get:function(){k(je.varargs!=null),je.varargs+=4;var t=y[je.varargs-4>>>2];return t},getStr:function(t){var n=Te(t);return n}};function ya(t,n,s,f,S){k(t<=64,"nfds must be less than or equal to 64"),k(!f,"exceptfds not supported");for(var T=0,E=n?y[n>>>2]:0,F=n?y[n+4>>>2]:0,N=s?y[s>>>2]:0,v=s?y[s+4>>>2]:0,R=f?y[f>>>2]:0,W=f?y[f+4>>>2]:0,x=0,$=0,Y=0,Z=0,We=0,Pe=0,A=(n?y[n>>>2]:0)|(s?y[s>>>2]:0)|(f?y[f>>>2]:0),P=(n?y[n+4>>>2]:0)|(s?y[s+4>>>2]:0)|(f?y[f+4>>>2]:0),_e=function(tl,rl,nl,Na){return tl<32?rl&Na:nl&Na},J=0;J<t;J++){var de=1<<J%32;if(!!_e(J,A,P,de)){var ge=je.getStreamFromFD(J),ft=je.DEFAULT_POLLMASK;ge.stream_ops.poll&&(ft=ge.stream_ops.poll(ge)),ft&1&&_e(J,E,F,de)&&(J<32?x=x|de:$=$|de,T++),ft&4&&_e(J,N,v,de)&&(J<32?Y=Y|de:Z=Z|de,T++),ft&2&&_e(J,R,W,de)&&(J<32?We=We|de:Pe=Pe|de,T++)}}return n&&(y[n>>>2]=x,y[n+4>>>2]=$),s&&(y[s>>>2]=Y,y[s+4>>>2]=Z),f&&(y[f>>>2]=We,y[f+4>>>2]=Pe),T}function ga(){w("missing function: $SOCKFS"),g(-1)}function mt(){w("missing function: $FS"),g(-1)}function Ze(t){var n=ga.getSocket(t);if(!n)throw new mt.ErrnoError(8);return n}function pn(t){return y[Qt()>>>2]=t,t}var Ht={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};function et(t){return(t&255)+"."+(t>>8&255)+"."+(t>>16&255)+"."+(t>>24&255)}function pt(t){var n="",s=0,f=0,S=0,T=0,E=0,F=0,N=[t[0]&65535,t[0]>>16,t[1]&65535,t[1]>>16,t[2]&65535,t[2]>>16,t[3]&65535,t[3]>>16],v=!0,R="";for(F=0;F<5;F++)if(N[F]!==0){v=!1;break}if(v){if(R=et(N[6]|N[7]<<16),N[5]===-1)return n="::ffff:",n+=R,n;if(N[5]===0)return n="::",R==="0.0.0.0"&&(R=""),R==="0.0.0.1"&&(R="1"),n+=R,n}for(s=0;s<8;s++)N[s]===0&&(s-S>1&&(E=0),S=s,E++),E>f&&(f=E,T=s-f+1);for(s=0;s<8;s++){if(f>1&&N[s]===0&&s>=T&&s<T+f){s===T&&(n+=":",T===0&&(n+=":"));continue}n+=Number(Fr(N[s]&65535)).toString(16),n+=s<7?":":""}return n}function ke(t,n){var s=be[t>>>1],f=Fr(Ft[t+2>>>1]),S;switch(s){case 2:if(n!==16)return{errno:28};S=y[t+4>>>2],S=et(S);break;case 10:if(n!==28)return{errno:28};S=[y[t+8>>>2],y[t+12>>>2],y[t+16>>>2],y[t+20>>>2]],S=pt(S);break;default:return{errno:5}}return{family:s,addr:S,port:f}}function lt(t){for(var n=t.split("."),s=0;s<4;s++){var f=Number(n[s]);if(isNaN(f))return null;n[s]=f}return(n[0]|n[1]<<8|n[2]<<16|n[3]<<24)>>>0}function ht(t){return parseInt(t)}function Wt(t){var n,s,f,S,T,E=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,F=[];if(!E.test(t))return null;if(t==="::")return[0,0,0,0,0,0,0,0];for(t.startsWith("::")?t=t.replace("::","Z:"):t=t.replace("::",":Z:"),t.indexOf(".")>0?(t=t.replace(new RegExp("[.]","g"),":"),n=t.split(":"),n[n.length-4]=ht(n[n.length-4])+ht(n[n.length-3])*256,n[n.length-3]=ht(n[n.length-2])+ht(n[n.length-1])*256,n=n.slice(0,n.length-2)):n=t.split(":"),f=0,S=0,s=0;s<n.length;s++)if(typeof n[s]=="string")if(n[s]==="Z"){for(S=0;S<8-n.length+1;S++)F[s+S]=0;f=S-1}else F[s+f]=Jt(parseInt(n[s],16));else F[s+f]=n[s];return[F[1]<<16|F[0],F[3]<<16|F[2],F[5]<<16|F[4],F[7]<<16|F[6]]}var Fe={address_map:{id:1,addrs:{},names:{}},lookup_name:function(t){var n=lt(t);if(n!==null||(n=Wt(t),n!==null))return t;var s;if(Fe.address_map.addrs[t])s=Fe.address_map.addrs[t];else{var f=Fe.address_map.id++;k(f<65535,"exceeded max address mappings of 65535"),s="172.29."+(f&255)+"."+(f&65280),Fe.address_map.names[s]=t,Fe.address_map.addrs[t]=s}return s},lookup_addr:function(t){return Fe.address_map.names[t]?Fe.address_map.names[t]:null}};function ur(t,n,s){if(s&&t===0)return null;var f=ke(t,n);if(f.errno)throw new mt.ErrnoError(f.errno);return f.addr=Fe.lookup_addr(f.addr)||f.addr,f}function hn(t,n,s,f,S,T){var E=Ze(t),F=ur(n,s);return E.sock_ops.bind(E,F.addr,F.port),0}function va(t,n,s,f,S,T){var E=Ze(t),F=ur(n,s);return E.sock_ops.connect(E,F.addr,F.port),0}function yn(t,n,s,f){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function _r(t,n,s){return je.varargs=s,0}function yt(t,n){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function wa(t,n){return k(t==t>>>0||t==(t|0)),k(n===(n|0)),n+2097152>>>0<4194305-!!t?(t>>>0)+n*4294967296:NaN}function dr(t,n,s){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function gt(t,n,s,f){if(s>>>=0,k(typeof t=="string"),!(f>0))return 0;for(var S=s,T=s+f-1,E=0;E<t.length;++E){var F=t.charCodeAt(E);if(F>=55296&&F<=57343){var N=t.charCodeAt(++E);F=65536+((F&1023)<<10)|N&1023}if(F<=127){if(s>=T)break;n[s++>>>0]=F}else if(F<=2047){if(s+1>=T)break;n[s++>>>0]=192|F>>6,n[s++>>>0]=128|F&63}else if(F<=65535){if(s+2>=T)break;n[s++>>>0]=224|F>>12,n[s++>>>0]=128|F>>6&63,n[s++>>>0]=128|F&63}else{if(s+3>=T)break;F>1114111&&Le("Invalid Unicode code point "+st(F)+" encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF)."),n[s++>>>0]=240|F>>18,n[s++>>>0]=128|F>>12&63,n[s++>>>0]=128|F>>6&63,n[s++>>>0]=128|F&63}}return n[s>>>0]=0,s-S}function vt(t,n,s){return k(typeof s=="number","stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!"),gt(t,le,n,s)}function gn(t,n,s){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function fr(t,n){return le.fill(0,t,t+n),t}function Yt(t,n,s,f,S){switch(n){case 2:s=lt(s),fr(t,16),S&&(y[S>>>2]=16),be[t>>>1]=n,y[t+4>>>2]=s,be[t+2>>>1]=Jt(f);break;case 10:s=Wt(s),fr(t,28),S&&(y[S>>>2]=28),y[t>>>2]=n,y[t+8>>>2]=s[0],y[t+12>>>2]=s[1],y[t+16>>>2]=s[2],y[t+20>>>2]=s[3],be[t+2>>>1]=Jt(f);break;default:return 5}return 0}function vn(t,n,s,f,S,T){var E=Ze(t);if(!E.daddr)return-53;var F=Yt(n,E.family,Fe.lookup_name(E.daddr),E.dport,s);return k(!F),0}function wn(t,n,s,f,S,T){var E=Ze(t);return n===1&&s===4?(y[f>>>2]=E.error,y[S>>>2]=4,E.error=null,0):-50}function En(t,n,s){return je.varargs=s,0}function Sn(t,n){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function kn(t,n,s){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Cn(t,n,s,f){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Tn(t,n,s,f){je.varargs=f,g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function jn(t,n,s,f,S,T){var E=Ze(t),F=E.sock_ops.recvmsg(E,s);if(!F)return 0;if(S){var N=Yt(S,E.family,Fe.lookup_name(F.addr),F.port,T);k(!N)}return le.set(F.buffer,n>>>0),F.buffer.byteLength}function Fn(t,n,s,f){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Rn(t){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function An(t,n,s,f,S,T){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Dn(t,n,s){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function Mn(t,n){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function ct(t,n,s){g("it should not be possible to operate on streams when !SYSCALLS_REQUIRE_FILESYSTEM")}function In(t){var n=new WebAssembly.Exception(sn(),[t],{traceStack:!0});if(n.message=ir(n),n.stack){var s=n.stack.split(`
`);s.splice(1,1),n.stack=s.join(`
`)}throw n}var Ln=!0;function Un(){return Ln}function xn(t){return O[t>>>2]+y[t+4>>>2]*4294967296}function $e(t){return t%4===0&&(t%100!==0||t%400===0)}var br=[0,31,60,91,121,152,182,213,244,274,305,335],On=[0,31,59,90,120,151,181,212,243,273,304,334];function Nn(t){var n=$e(t.getFullYear()),s=n?br:On,f=s[t.getMonth()]+t.getDate()-1;return f}function Pn(t,n){var s=new Date(xn(t)*1e3);y[n>>>2]=s.getSeconds(),y[n+4>>>2]=s.getMinutes(),y[n+8>>>2]=s.getHours(),y[n+12>>>2]=s.getDate(),y[n+16>>>2]=s.getMonth(),y[n+20>>>2]=s.getFullYear()-1900,y[n+24>>>2]=s.getDay();var f=Nn(s)|0;y[n+28>>>2]=f,y[n+36>>>2]=-(s.getTimezoneOffset()*60);var S=new Date(s.getFullYear(),0,1),T=new Date(s.getFullYear(),6,1).getTimezoneOffset(),E=S.getTimezoneOffset(),F=(T!=E&&s.getTimezoneOffset()==Math.min(E,T))|0;y[n+32>>>2]=F}function Gt(t){for(var n=0,s=0;s<t.length;++s){var f=t.charCodeAt(s);f<=127?n++:f<=2047?n+=2:f>=55296&&f<=57343?(n+=4,++s):n+=3}return n}function mr(t){var n=Gt(t)+1,s=dt(n);return s&&vt(t,s,n),s}function Bn(t,n,s){var f=new Date().getFullYear(),S=new Date(f,0,1),T=new Date(f,6,1),E=S.getTimezoneOffset(),F=T.getTimezoneOffset(),N=Math.max(E,F);O[t>>>2]=N*60,y[n>>>2]=Number(E!=F);function v(Y){var Z=Y.toTimeString().match(/\(([A-Za-z ]+)\)$/);return Z?Z[1]:"GMT"}var R=v(S),W=v(T),x=mr(R),$=mr(W);F<E?(O[s>>>2]=x,O[s+4>>>2]=$):(O[s>>>2]=$,O[s+4>>>2]=x)}function Hn(){g("native code called abort()")}function Wn(t,n){g(lr)}function Yn(t,n){return globalThis.DUCKDB_RUNTIME.createDirectory(e,t,n)}function Gn(t,n){return globalThis.DUCKDB_RUNTIME.checkDirectory(e,t,n)}function zn(t,n){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(e,t,n)}function Xn(t,n){return globalThis.DUCKDB_RUNTIME.removeDirectory(e,t,n)}function qn(t){return globalThis.DUCKDB_RUNTIME.closeFile(e,t)}function Kn(t,n){return globalThis.DUCKDB_RUNTIME.checkFile(e,t,n)}function Vn(t){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(e,t)}function $n(t,n,s,f){return globalThis.DUCKDB_RUNTIME.moveFile(e,t,n,s,f)}function Qn(t,n){return globalThis.DUCKDB_RUNTIME.openFile(e,t,n)}function Jn(t,n,s,f){return globalThis.DUCKDB_RUNTIME.readFile(e,t,n,s,f)}function Zn(t,n){return globalThis.DUCKDB_RUNTIME.truncateFile(e,t,n)}function ei(t,n,s,f){return globalThis.DUCKDB_RUNTIME.writeFile(e,t,n,s,f)}function ti(t){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(t)}function pr(t,n){return globalThis.DUCKDB_RUNTIME.glob(e,t,n)}function ri(t){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(e,t)}function hr(t,n,s,f,S,T){return globalThis.DUCKDB_RUNTIME.callScalarUDF(e,t,n,s,f,S,T)}function ni(t){k(typeof t=="number"),console.error(Te(t))}function ii(){return Date.now()}function yr(){return 4294901760}function zt(){return yr()}var gr;H&&(global.performance=we("perf_hooks").performance),gr=()=>performance.now();function ut(t,n,s){le.copyWithin(t>>>0,n>>>0,n+s>>>0)}function ai(t){var n=ye.buffer,s=t-n.byteLength+65535>>>16;try{return ye.grow(s),Rt(),1}catch(f){w(`emscripten_realloc_buffer: Attempted to grow heap from ${n.byteLength} bytes to ${t} bytes, but got error: ${f}`)}}function oi(t){var n=le.length;t=t>>>0,k(t>n);var s=yr();if(t>s)return w(`Cannot enlarge memory, asked to go up to ${t} bytes, but the limit is ${s} bytes!`),!1;for(var f=(N,v)=>N+(v-N%v)%v,S=1;S<=4;S*=2){var T=n*(1+.2/S);T=Math.min(T,t+100663296);var E=Math.min(s,f(Math.max(t,T),65536)),F=ai(E);if(F)return!0}return w(`Failed to grow the heap from ${n} bytes to ${E} bytes, not enough memory!`),!1}var Xt={};function si(){return m||"./this.program"}function _t(){if(!_t.strings){var t=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",n={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:t,_:si()};for(var s in Xt)Xt[s]===void 0?delete n[s]:n[s]=Xt[s];var f=[];for(var s in n)f.push(`${s}=${n[s]}`);_t.strings=f}return _t.strings}function li(t,n){for(var s=0;s<t.length;++s)k(t.charCodeAt(s)===(t.charCodeAt(s)&255)),ae[n++>>>0]=t.charCodeAt(s);ae[n>>>0]=0}function ci(t,n){var s=0;return _t().forEach(function(f,S){var T=n+s;O[t+S*4>>>2]=T,li(f,T),s+=f.length+1}),0}function ui(t,n){var s=_t();O[t>>>2]=s.length;var f=0;return s.forEach(function(S){f+=S.length+1}),O[n>>>2]=f,0}function _i(t){g("fd_close called without SYSCALLS_REQUIRE_FILESYSTEM")}function di(t,n){var s=0,f=0,S=0;{k(t==0||t==1||t==2);var T=2;t==0?s=2:(t==1||t==2)&&(s=64),S=1}return ae[n>>>0]=T,be[n+2>>>1]=S,Me=[s>>>0,(re=s,+Math.abs(re)>=1?re>0?+Math.floor(re/4294967296)>>>0:~~+Math.ceil((re-+(~~re>>>0))/4294967296)>>>0:0)],y[n+8>>>2]=Me[0],y[n+12>>>2]=Me[1],Me=[f>>>0,(re=f,+Math.abs(re)>=1?re>0?+Math.floor(re/4294967296)>>>0:~~+Math.ceil((re-+(~~re>>>0))/4294967296)>>>0:0)],y[n+16>>>2]=Me[0],y[n+20>>>2]=Me[1],0}function qt(t,n,s,f,S,T){g("fd_pread called without SYSCALLS_REQUIRE_FILESYSTEM")}function Kt(t,n,s,f,S,T){g("fd_pwrite called without SYSCALLS_REQUIRE_FILESYSTEM")}function fi(t,n,s,f){g("fd_read called without SYSCALLS_REQUIRE_FILESYSTEM")}function bi(t,n,s,f,S){return 70}function mi(t){g("fd_sync called without SYSCALLS_REQUIRE_FILESYSTEM")}var Vt=[null,[],[]];function wt(t,n){var s=Vt[t];k(s),n===0||n===10?((t===1?z:w)(nr(s,0)),s.length=0):s.push(n)}function pi(){Fa(0),Vt[1].length&&wt(1,10),Vt[2].length&&wt(2,10)}function hi(t,n,s,f){for(var S=0,T=0;T<s;T++){var E=O[n>>>2],F=O[n+4>>>2];n+=8;for(var N=0;N<F;N++)wt(t,le[E+N>>>0]);S+=F}return O[f>>>2]=S,0}function yi(t,n,s,f){var S=[],T=null,E=0,F=0,N=0,v=0,R=0,W=0,x,$;function Y(Z,We,Pe,A,P,_e){var J,de,ge,ft;return de=Z===10?28:16,P=Z===10?pt(P):et(P),J=dt(de),ft=Yt(J,Z,P,_e),k(!ft),ge=dt(32),y[ge+4>>>2]=Z,y[ge+8>>>2]=We,y[ge+12>>>2]=Pe,O[ge+24>>>2]=A,O[ge+20>>>2]=J,Z===10?y[ge+16>>>2]=28:y[ge+16>>>2]=16,y[ge+28>>>2]=0,ge}if(s&&(N=y[s>>>2],v=y[s+4>>>2],R=y[s+8>>>2],W=y[s+12>>>2]),R&&!W&&(W=R===2?17:6),!R&&W&&(R=W===17?2:1),W===0&&(W=6),R===0&&(R=1),!t&&!n)return-2;if(N&-1088||s!==0&&y[s>>>2]&2&&!t)return-1;if(N&32)return-2;if(R!==0&&R!==1&&R!==2)return-7;if(v!==0&&v!==2&&v!==10)return-6;if(n&&(n=Te(n),F=parseInt(n,10),isNaN(F)))return N&1024?-2:-8;if(!t)return v===0&&(v=2),(N&1)===0&&(v===2?E=Et(2130706433):E=[0,0,0,1]),x=Y(v,R,W,null,E,F),O[f>>>2]=x,0;if(t=Te(t),E=lt(t),E!==null)if(v===0||v===2)v=2;else if(v===10&&N&8)E=[0,0,Et(65535),E],v=10;else return-2;else if(E=Wt(t),E!==null)if(v===0||v===10)v=10;else return-2;return E!=null?(x=Y(v,R,W,t,E,F),O[f>>>2]=x,0):N&4?-2:(t=Fe.lookup_name(t),E=lt(t),v===0?v=2:v===10&&(E=[0,0,Et(65535),E]),x=Y(v,R,W,null,E,F),O[f>>>2]=x,0)}function vr(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return f=>crypto.getRandomValues(f);if(H)try{var t=we("crypto"),n=t.randomFillSync;if(n)return f=>t.randomFillSync(f);var s=t.randomBytes;return f=>(f.set(s(f.byteLength)),f)}catch(f){}g("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };")}function $t(t){return($t=vr())(t)}function gi(t,n){return $t(le.subarray(t>>>0,t+n>>>0)),0}function vi(t,n,s,f,S,T,E){var F=ke(t,n);if(F.errno)return-6;var N=F.port,v=F.addr,R=!1;if(s&&f){var W;if(E&1||!(W=Fe.lookup_addr(v))){if(E&8)return-2}else v=W;var x=vt(v,s,f);x+1>=f&&(R=!0)}if(S&&T){N=""+N;var x=vt(N,S,T);x+1>=T&&(R=!0)}return R?-12:0}function wr(t,n){for(var s=0,f=0;f<=n;s+=t[f++]);return s}var Er=[31,29,31,30,31,30,31,31,30,31,30,31],Sr=[31,28,31,30,31,30,31,31,30,31,30,31];function wi(t,n){for(var s=new Date(t.getTime());n>0;){var f=$e(s.getFullYear()),S=s.getMonth(),T=(f?Er:Sr)[S];if(n>T-s.getDate())n-=T-s.getDate()+1,s.setDate(1),S<11?s.setMonth(S+1):(s.setMonth(0),s.setFullYear(s.getFullYear()+1));else return s.setDate(s.getDate()+n),s}return s}function Ei(t,n,s){var f=s>0?s:Gt(t)+1,S=new Array(f),T=gt(t,S,0,S.length);return n&&(S.length=T),S}function kr(t,n){k(t.length>=0,"writeArrayToMemory array must have a length (should be an array or typed array)"),ae.set(t,n>>>0)}function Si(t,n,s,f){var S=y[f+40>>>2],T={tm_sec:y[f>>>2],tm_min:y[f+4>>>2],tm_hour:y[f+8>>>2],tm_mday:y[f+12>>>2],tm_mon:y[f+16>>>2],tm_year:y[f+20>>>2],tm_wday:y[f+24>>>2],tm_yday:y[f+28>>>2],tm_isdst:y[f+32>>>2],tm_gmtoff:y[f+36>>>2],tm_zone:S?Te(S):""},E=Te(s),F={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var N in F)E=E.replace(new RegExp(N,"g"),F[N]);var v=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],R=["January","February","March","April","May","June","July","August","September","October","November","December"];function W(A,P,_e){for(var J=typeof A=="number"?A.toString():A||"";J.length<P;)J=_e[0]+J;return J}function x(A,P){return W(A,P,"0")}function $(A,P){function _e(de){return de<0?-1:de>0?1:0}var J;return(J=_e(A.getFullYear()-P.getFullYear()))===0&&(J=_e(A.getMonth()-P.getMonth()))===0&&(J=_e(A.getDate()-P.getDate())),J}function Y(A){switch(A.getDay()){case 0:return new Date(A.getFullYear()-1,11,29);case 1:return A;case 2:return new Date(A.getFullYear(),0,3);case 3:return new Date(A.getFullYear(),0,2);case 4:return new Date(A.getFullYear(),0,1);case 5:return new Date(A.getFullYear()-1,11,31);case 6:return new Date(A.getFullYear()-1,11,30)}}function Z(A){var P=wi(new Date(A.tm_year+1900,0,1),A.tm_yday),_e=new Date(P.getFullYear(),0,4),J=new Date(P.getFullYear()+1,0,4),de=Y(_e),ge=Y(J);return $(de,P)<=0?$(ge,P)<=0?P.getFullYear()+1:P.getFullYear():P.getFullYear()-1}var We={"%a":function(A){return v[A.tm_wday].substring(0,3)},"%A":function(A){return v[A.tm_wday]},"%b":function(A){return R[A.tm_mon].substring(0,3)},"%B":function(A){return R[A.tm_mon]},"%C":function(A){var P=A.tm_year+1900;return x(P/100|0,2)},"%d":function(A){return x(A.tm_mday,2)},"%e":function(A){return W(A.tm_mday,2," ")},"%g":function(A){return Z(A).toString().substring(2)},"%G":function(A){return Z(A)},"%H":function(A){return x(A.tm_hour,2)},"%I":function(A){var P=A.tm_hour;return P==0?P=12:P>12&&(P-=12),x(P,2)},"%j":function(A){return x(A.tm_mday+wr($e(A.tm_year+1900)?Er:Sr,A.tm_mon-1),3)},"%m":function(A){return x(A.tm_mon+1,2)},"%M":function(A){return x(A.tm_min,2)},"%n":function(){return`
`},"%p":function(A){return A.tm_hour>=0&&A.tm_hour<12?"AM":"PM"},"%S":function(A){return x(A.tm_sec,2)},"%t":function(){return"	"},"%u":function(A){return A.tm_wday||7},"%U":function(A){var P=A.tm_yday+7-A.tm_wday;return x(Math.floor(P/7),2)},"%V":function(A){var P=Math.floor((A.tm_yday+7-(A.tm_wday+6)%7)/7);if((A.tm_wday+371-A.tm_yday-2)%7<=2&&P++,P){if(P==53){var J=(A.tm_wday+371-A.tm_yday)%7;J!=4&&(J!=3||!$e(A.tm_year))&&(P=1)}}else{P=52;var _e=(A.tm_wday+7-A.tm_yday-1)%7;(_e==4||_e==5&&$e(A.tm_year%400-1))&&P++}return x(P,2)},"%w":function(A){return A.tm_wday},"%W":function(A){var P=A.tm_yday+7-(A.tm_wday+6)%7;return x(Math.floor(P/7),2)},"%y":function(A){return(A.tm_year+1900).toString().substring(2)},"%Y":function(A){return A.tm_year+1900},"%z":function(A){var P=A.tm_gmtoff,_e=P>=0;return P=Math.abs(P)/60,P=P/60*100+P%60,(_e?"+":"-")+String("0000"+P).slice(-4)},"%Z":function(A){return A.tm_zone},"%%":function(){return"%"}};E=E.replace(/%%/g,"\0\0");for(var N in We)E.includes(N)&&(E=E.replace(new RegExp(N,"g"),We[N](T)));E=E.replace(/\0\0/g,"%");var Pe=Ei(E,!1);return Pe.length>n?0:(kr(Pe,t),Pe.length-1)}function ki(t,n,s,f,S){return Si(t,n,s,f)}function Ci(){w("missing function: ucnv_close_64"),g(-1)}function Ti(){w("missing function: ucnv_convertEx_64"),g(-1)}function ji(){w("missing function: ucnv_open_64"),g(-1)}function Fi(){w("missing function: ucnv_toAlgorithmic_64"),g(-1)}function Ri(){w("missing function: ucsdet_close_64"),g(-1)}function Ai(){w("missing function: ucsdet_detect_64"),g(-1)}function Di(){w("missing function: ucsdet_getConfidence_64"),g(-1)}function Mi(){w("missing function: ucsdet_getName_64"),g(-1)}function Ii(){w("missing function: ucsdet_open_64"),g(-1)}function Li(){w("missing function: ucsdet_setText_64"),g(-1)}function Ui(){w("missing function: unzClose"),g(-1)}function xi(){w("missing function: unzCloseCurrentFile"),g(-1)}function Oi(){w("missing function: unzGetCurrentFileInfo"),g(-1)}function Ni(){w("missing function: unzGetCurrentFileInfo64"),g(-1)}function Pi(){w("missing function: unzGetGlobalInfo"),g(-1)}function Bi(){w("missing function: unzGoToFirstFile"),g(-1)}function Hi(){w("missing function: unzGoToNextFile"),g(-1)}function Wi(){w("missing function: unzLocateFile"),g(-1)}function Yi(){w("missing function: unzOpen"),g(-1)}function Gi(){w("missing function: unzOpen2"),g(-1)}function zi(){w("missing function: unzOpenCurrentFile"),g(-1)}function Xi(){w("missing function: unzReadCurrentFile"),g(-1)}function qi(t){Xe=t,Ut()||(e.onExit&&e.onExit(t),xe=!0),h(t,new ot(t))}function Ki(t,n){if(Xe=t,M(),Ut()&&!n){var s=`program exited (with status: ${t}), but keepRuntimeAlive() is set (counter=${Lt}) due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)`;c(s),w(s)}qi(t)}function Cr(t){if(t instanceof ot||t=="unwind")return Xe;Oe(),t instanceof WebAssembly.RuntimeError&&Zi()<=0&&w("Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to 65536)"),h(1,t)}function Ea(t){var n=e["_"+t];return k(n,"Cannot call unknown function "+t+", make sure it is exported"),n}function Sa(t){var n=Gt(t)+1,s=kt(n);return vt(t,s,n),s}function Vi(t,n,s,f,S){var T={string:Y=>{var Z=0;return Y!=null&&Y!==0&&(Z=Sa(Y)),Z},array:Y=>{var Z=kt(Y.length);return kr(Y,Z),Z}};function E(Y){return n==="string"?Te(Y):n==="boolean"?Boolean(Y):Y}var F=Ea(t),N=[],v=0;if(k(n!=="array",'Return type should not be "array".'),f)for(var R=0;R<f.length;R++){var W=T[s[R]];W?(v===0&&(v=Dr()),N[R]=W(f[R])):N[R]=f[R]}var x=F.apply(null,N);function $(Y){return v!==0&&Mr(v),E(Y)}return x=$(x),x}function ka(){nn("fetchSettings")}var $i={XML_GetBuffer:cn,XML_GetErrorCode:un,XML_Parse:_n,XML_ParseBuffer:dn,XML_ParserCreate:fn,XML_ParserFree:ar,XML_ResumeParser:bn,XML_SetCharacterDataHandler:or,XML_SetElementHandler:sr,XML_SetUserData:Ve,XML_StopParser:He,__assert_fail:mn,__dlsym:cr,__syscall__newselect:ya,__syscall_bind:hn,__syscall_connect:va,__syscall_faccessat:yn,__syscall_fcntl64:_r,__syscall_fstat64:yt,__syscall_ftruncate64:dr,__syscall_getdents64:gn,__syscall_getpeername:vn,__syscall_getsockopt:wn,__syscall_ioctl:En,__syscall_lstat64:Sn,__syscall_mkdirat:kn,__syscall_newfstatat:Cn,__syscall_openat:Tn,__syscall_recvfrom:jn,__syscall_renameat:Fn,__syscall_rmdir:Rn,__syscall_sendto:An,__syscall_socket:Dn,__syscall_stat64:Mn,__syscall_unlinkat:ct,__throw_exception_with_stack_trace:In,_emscripten_get_now_is_monotonic:Un,_localtime_js:Pn,_tzset_js:Bn,abort:Hn,dlopen:Wn,duckdb_web_fs_directory_create:Yn,duckdb_web_fs_directory_exists:Gn,duckdb_web_fs_directory_list_files:zn,duckdb_web_fs_directory_remove:Xn,duckdb_web_fs_file_close:qn,duckdb_web_fs_file_exists:Kn,duckdb_web_fs_file_get_last_modified_time:Vn,duckdb_web_fs_file_move:$n,duckdb_web_fs_file_open:Qn,duckdb_web_fs_file_read:Jn,duckdb_web_fs_file_truncate:Zn,duckdb_web_fs_file_write:ei,duckdb_web_fs_get_default_data_protocol:ti,duckdb_web_fs_glob:pr,duckdb_web_test_platform_feature:ri,duckdb_web_udf_scalar_call:hr,emscripten_console_error:ni,emscripten_date_now:ii,emscripten_get_heap_max:zt,emscripten_get_now:gr,emscripten_memcpy_big:ut,emscripten_resize_heap:oi,environ_get:ci,environ_sizes_get:ui,fd_close:_i,fd_fdstat_get:di,fd_pread:qt,fd_pwrite:Kt,fd_read:fi,fd_seek:bi,fd_sync:mi,fd_write:hi,getaddrinfo:yi,getentropy:gi,getnameinfo:vi,strftime_l:ki,ucnv_close_64:Ci,ucnv_convertEx_64:Ti,ucnv_open_64:ji,ucnv_toAlgorithmic_64:Fi,ucsdet_close_64:Ri,ucsdet_detect_64:Ai,ucsdet_getConfidence_64:Di,ucsdet_getName_64:Mi,ucsdet_open_64:Ii,ucsdet_setText_64:Li,unzClose:Ui,unzCloseCurrentFile:xi,unzGetCurrentFileInfo:Oi,unzGetCurrentFileInfo64:Ni,unzGetGlobalInfo:Pi,unzGoToFirstFile:Bi,unzGoToNextFile:Hi,unzLocateFile:Wi,unzOpen:Yi,unzOpen2:Gi,unzOpenCurrentFile:zi,unzReadCurrentFile:Xi},ho=rn(),yo=d("__wasm_call_ctors"),Ca=e._main=d("main"),go=e._duckdb_web_fs_glob_add_path=d("duckdb_web_fs_glob_add_path"),vo=e._duckdb_web_clear_response=d("duckdb_web_clear_response"),wo=e._duckdb_web_fail_with=d("duckdb_web_fail_with"),Eo=e._duckdb_web_reset=d("duckdb_web_reset"),So=e._duckdb_web_connect=d("duckdb_web_connect"),ko=e._duckdb_web_disconnect=d("duckdb_web_disconnect"),Co=e._duckdb_web_flush_files=d("duckdb_web_flush_files"),To=e._duckdb_web_flush_file=d("duckdb_web_flush_file"),jo=e._duckdb_web_open=d("duckdb_web_open"),Fo=e._duckdb_web_get_global_file_info=d("duckdb_web_get_global_file_info"),Ro=e._duckdb_web_collect_file_stats=d("duckdb_web_collect_file_stats"),Ao=e._duckdb_web_export_file_stats=d("duckdb_web_export_file_stats"),Do=e._duckdb_web_fs_drop_file=d("duckdb_web_fs_drop_file"),Mo=e._duckdb_web_fs_drop_files=d("duckdb_web_fs_drop_files"),Io=e._duckdb_web_fs_glob_file_infos=d("duckdb_web_fs_glob_file_infos"),Lo=e._duckdb_web_fs_get_file_info_by_id=d("duckdb_web_fs_get_file_info_by_id"),Uo=e._duckdb_web_fs_get_file_info_by_name=d("duckdb_web_fs_get_file_info_by_name"),xo=e._duckdb_web_fs_register_file_url=d("duckdb_web_fs_register_file_url"),Oo=e._duckdb_web_fs_register_file_buffer=d("duckdb_web_fs_register_file_buffer"),No=e._duckdb_web_copy_file_to_buffer=d("duckdb_web_copy_file_to_buffer"),Po=e._duckdb_web_copy_file_to_path=d("duckdb_web_copy_file_to_path"),Bo=e._duckdb_web_get_version=d("duckdb_web_get_version"),Ho=e._duckdb_web_get_feature_flags=d("duckdb_web_get_feature_flags"),Wo=e._duckdb_web_tokenize=d("duckdb_web_tokenize"),Yo=e._duckdb_web_udf_scalar_create=d("duckdb_web_udf_scalar_create"),Go=e._duckdb_web_prepared_create=d("duckdb_web_prepared_create"),zo=e._duckdb_web_prepared_close=d("duckdb_web_prepared_close"),Xo=e._duckdb_web_prepared_run=d("duckdb_web_prepared_run"),qo=e._duckdb_web_prepared_send=d("duckdb_web_prepared_send"),Ko=e._duckdb_web_query_run=d("duckdb_web_query_run"),Vo=e._duckdb_web_pending_query_start=d("duckdb_web_pending_query_start"),$o=e._duckdb_web_pending_query_poll=d("duckdb_web_pending_query_poll"),Qo=e._duckdb_web_pending_query_cancel=d("duckdb_web_pending_query_cancel"),Ta=e._duckdb_web_query_fetch_results=d("duckdb_web_query_fetch_results"),ja=e._duckdb_web_get_tablenames=d("duckdb_web_get_tablenames"),Tr=e._duckdb_web_insert_arrow_from_ipc_stream=d("duckdb_web_insert_arrow_from_ipc_stream"),jr=e._duckdb_web_insert_csv_from_path=d("duckdb_web_insert_csv_from_path"),Qi=e._duckdb_web_insert_json_from_path=d("duckdb_web_insert_json_from_path"),Qt=d("__errno_location"),Fa=e._fflush=d("fflush"),Et=d("htonl"),Jt=d("htons"),Fr=d("ntohs"),dt=e._malloc=d("malloc"),Zt=e._free=d("free"),er=function(){return(er=e.asm.__trap).apply(null,arguments)},St=function(){return(St=e.asm.emscripten_stack_init).apply(null,arguments)},Rr=function(){return(Rr=e.asm.emscripten_stack_get_free).apply(null,arguments)},Ji=function(){return(Ji=e.asm.emscripten_stack_get_base).apply(null,arguments)},Ar=function(){return(Ar=e.asm.emscripten_stack_get_end).apply(null,arguments)},Dr=d("stackSave"),Mr=d("stackRestore"),kt=d("stackAlloc"),Zi=function(){return(Zi=e.asm.emscripten_stack_get_current).apply(null,arguments)},Ra=e.___cxa_decrement_exception_refcount=d("__cxa_decrement_exception_refcount"),Aa=e.___cxa_increment_exception_refcount=d("__cxa_increment_exception_refcount"),Da=e.___thrown_object_from_unwind_exception=d("__thrown_object_from_unwind_exception"),Ma=e.___get_exception_message=d("__get_exception_message"),Jo=e.dynCall_jiji=d("dynCall_jiji"),Zo=e.dynCall_iiiiij=d("dynCall_iiiiij"),es=e.dynCall_iiiiijj=d("dynCall_iiiiijj"),ts=e.dynCall_iiiiiijj=d("dynCall_iiiiiijj"),rs=e.dynCall_viijii=d("dynCall_viijii"),ns=e.dynCall_viijji=d("dynCall_viijji"),is=e.dynCall_iiiji=d("dynCall_iiiji"),as=e.dynCall_ji=d("dynCall_ji"),os=e.dynCall_viij=d("dynCall_viij"),ss=e.dynCall_vij=d("dynCall_vij"),ls=e.dynCall_vjjijij=d("dynCall_vjjijij"),cs=e.dynCall_vijjji=d("dynCall_vijjji"),us=e.dynCall_vjjii=d("dynCall_vjjii"),_s=e.dynCall_viiiiiji=d("dynCall_viiiiiji"),ds=e.dynCall_jiiiji=d("dynCall_jiiiji"),fs=e.dynCall_jiiij=d("dynCall_jiiij"),bs=e.dynCall_jijjij=d("dynCall_jijjij"),ms=e.dynCall_iiij=d("dynCall_iiij"),ps=e.dynCall_vijjj=d("dynCall_vijjj"),hs=e.dynCall_vijj=d("dynCall_vijj"),ys=e.dynCall_viijj=d("dynCall_viijj"),gs=e.dynCall_jiijii=d("dynCall_jiijii"),vs=e.dynCall_jijiii=d("dynCall_jijiii"),ws=e.dynCall_viijiiiii=d("dynCall_viijiiiii"),Es=e.dynCall_viijiiij=d("dynCall_viijiiij"),Ss=e.dynCall_vijiiiji=d("dynCall_vijiiiji"),ks=e.dynCall_viiiij=d("dynCall_viiiij"),Cs=e.dynCall_jiiji=d("dynCall_jiiji"),Ts=e.dynCall_viiijij=d("dynCall_viiijij"),js=e.dynCall_viijiij=d("dynCall_viijiij"),Fs=e.dynCall_viiiiijj=d("dynCall_viiiiijj"),Rs=e.dynCall_viiijji=d("dynCall_viiijji"),As=e.dynCall_vijii=d("dynCall_vijii"),Ds=e.dynCall_iiiiiji=d("dynCall_iiiiiji"),Ms=e.dynCall_iij=d("dynCall_iij"),Is=e.dynCall_iiijj=d("dynCall_iiijj"),Ls=e.dynCall_iijii=d("dynCall_iijii"),Us=e.dynCall_viji=d("dynCall_viji"),xs=e.dynCall_iiji=d("dynCall_iiji"),Os=e.dynCall_viijjj=d("dynCall_viijjj"),Ns=e.dynCall_viiijj=d("dynCall_viiijj"),Ps=e.dynCall_jijj=d("dynCall_jijj"),Bs=e.dynCall_jiiiii=d("dynCall_jiiiii"),Hs=e.dynCall_jiiii=d("dynCall_jiiii"),Ws=e.dynCall_jii=d("dynCall_jii"),Ys=e.dynCall_viijij=d("dynCall_viijij"),Gs=e.dynCall_viiij=d("dynCall_viiij"),zs=e.dynCall_j=d("dynCall_j"),Xs=e.dynCall_viiijiiiijj=d("dynCall_viiijiiiijj"),qs=e.dynCall_jiiiij=d("dynCall_jiiiij"),Ks=e.dynCall_jj=d("dynCall_jj"),Vs=e.dynCall_ij=d("dynCall_ij"),$s=e.dynCall_ijjj=d("dynCall_ijjj"),Qs=e.dynCall_jjjd=d("dynCall_jjjd"),Js=e.dynCall_jjjjjjd=d("dynCall_jjjjjjd"),Zs=e.dynCall_jij=d("dynCall_jij"),el=e.dynCall_viiijiiijii=d("dynCall_viiijiiijii"),Ia=e.dynCall_viijijiiii=d("dynCall_viijijiiii"),La=e.dynCall_viiji=d("dynCall_viiji"),tr=e.dynCall_jiiiijj=d("dynCall_jiiiijj"),Ua=e.dynCall_viiiji=d("dynCall_viiiji"),xa=e.dynCall_viiiiji=d("dynCall_viiiiji"),ea=e.dynCall_jijiiii=d("dynCall_jijiiii"),Oa=e.dynCall_viiijiji=d("dynCall_viiijiji"),ta=e.dynCall_viijiji=d("dynCall_viijiji"),r=e.dynCall_jiii=d("dynCall_jiii");e.stackAlloc=kt,e.stackSave=Dr,e.stackRestore=Mr,e.ccall=Vi;var o=["getHostByName","traverseStack","getCallstack","emscriptenLog","convertPCtoSourceLocation","readEmAsmArgs","jstoi_s","listenOnce","autoResumeAudioContext","dynCallLegacy","getDynCaller","dynCall","runtimeKeepalivePush","runtimeKeepalivePop","callUserCallback","maybeExit","safeSetTimeout","asmjsMangle","asyncLoad","alignMemory","mmapAlloc","HandleAllocator","getNativeTypeSize","STACK_SIZE","STACK_ALIGN","POINTER_SIZE","ASSERTIONS","writeI53ToI64","writeI53ToI64Clamped","writeI53ToI64Signaling","writeI53ToU64Clamped","writeI53ToU64Signaling","readI53FromU64","convertI32PairToI53","convertU32PairToI53","cwrap","uleb128Encode","sigToWasmTypes","generateFuncType","convertJsFunctionToWasm","getEmptyTableSlot","updateTableMap","getFunctionAddress","addFunction","removeFunction","reallyNegative","unSign","strLen","reSign","formatString","intArrayToString","AsciiToString","UTF16ToString","stringToUTF16","lengthBytesUTF16","UTF32ToString","stringToUTF32","lengthBytesUTF32","registerKeyEventCallback","maybeCStringToJsString","findEventTarget","findCanvasEventTarget","getBoundingClientRect","fillMouseEventData","registerMouseEventCallback","registerWheelEventCallback","registerUiEventCallback","registerFocusEventCallback","fillDeviceOrientationEventData","registerDeviceOrientationEventCallback","fillDeviceMotionEventData","registerDeviceMotionEventCallback","screenOrientation","fillOrientationChangeEventData","registerOrientationChangeEventCallback","fillFullscreenChangeEventData","registerFullscreenChangeEventCallback","JSEvents_requestFullscreen","JSEvents_resizeCanvasForFullscreen","registerRestoreOldStyle","hideEverythingExceptGivenElement","restoreHiddenElements","setLetterbox","softFullscreenResizeWebGLRenderTarget","doRequestFullscreen","fillPointerlockChangeEventData","registerPointerlockChangeEventCallback","registerPointerlockErrorEventCallback","requestPointerLock","fillVisibilityChangeEventData","registerVisibilityChangeEventCallback","registerTouchEventCallback","fillGamepadEventData","registerGamepadEventCallback","registerBeforeUnloadEventCallback","fillBatteryEventData","battery","registerBatteryEventCallback","setCanvasElementSize","getCanvasElementSize","demangle","demangleAll","jsStackTrace","stackTrace","checkWasiClock","wasiRightsToMuslOFlags","wasiOFlagsToMuslOFlags","createDyncallWrapper","setImmediateWrapped","clearImmediateWrapped","polyfillSetImmediate","getPromise","makePromise","idsToPromises","makePromiseCallback","setMainLoop","heapObjectForWebGLType","heapAccessShiftForWebGLHeap","webgl_enable_ANGLE_instanced_arrays","webgl_enable_OES_vertex_array_object","webgl_enable_WEBGL_draw_buffers","webgl_enable_WEBGL_multi_draw","emscriptenWebGLGet","computeUnpackAlignedImageSize","colorChannelsInGlTextureFormat","emscriptenWebGLGetTexPixelData","__glGenObject","emscriptenWebGLGetUniform","webglGetUniformLocation","webglPrepareUniformLocationsBeforeFirstUse","webglGetLeftBracePos","emscriptenWebGLGetVertexAttrib","__glGetActiveAttribOrUniform","writeGLArray","registerWebGlEventCallback","runAndAbortIfError","SDL_unicode","SDL_ttfContext","SDL_audio","GLFW_Window","ALLOC_NORMAL","ALLOC_STACK","allocate","writeStringToMemory","writeAsciiToMemory"];o.forEach(on);var u=["run","addOnPreRun","addOnInit","addOnPreMain","addOnExit","addOnPostRun","addRunDependency","removeRunDependency","FS_createFolder","FS_createPath","FS_createDataFile","FS_createLazyFile","FS_createLink","FS_createDevice","FS_unlink","out","err","callMain","abort","keepRuntimeAlive","wasmMemory","getTempRet0","setTempRet0","writeStackCookie","checkStackCookie","ptrToString","zeroMemory","exitJS","getHeapMax","emscripten_realloc_buffer","ENV","MONTH_DAYS_REGULAR","MONTH_DAYS_LEAP","MONTH_DAYS_REGULAR_CUMULATIVE","MONTH_DAYS_LEAP_CUMULATIVE","isLeapYear","ydayFromDate","arraySum","addDays","ERRNO_CODES","ERRNO_MESSAGES","setErrNo","inetPton4","inetNtop4","inetPton6","inetNtop6","readSockaddr","writeSockaddr","DNS","Protocols","Sockets","initRandomFill","randomFill","timers","warnOnce","UNWIND_CACHE","readEmAsmArgsArray","jstoi_q","getExecutableName","handleException","readI53FromI64","convertI32PairToI53Checked","getCFunc","freeTableIndexes","functionsInTableMap","setValue","getValue","PATH","PATH_FS","UTF8Decoder","UTF8ArrayToString","UTF8ToString","stringToUTF8Array","stringToUTF8","lengthBytesUTF8","intArrayFromString","stringToAscii","UTF16Decoder","stringToNewUTF8","stringToUTF8OnStack","writeArrayToMemory","JSEvents","specialHTMLTargets","currentFullscreenStrategy","restoreOldWindowedStyle","ExitStatus","getEnvStrings","flush_NO_FILESYSTEM","dlopenMissingError","promiseMap","getExceptionMessageCommon","getCppExceptionTag","getCppExceptionThrownObjectFromWebAssemblyException","incrementExceptionRefcount","decrementExceptionRefcount","getExceptionMessage","Browser","wget","SYSCALLS","getSocketFromFD","getSocketAddress","tempFixedLengthArray","miniTempWebGLFloatBuffers","miniTempWebGLIntBuffers","GL","emscripten_webgl_power_preferences","AL","GLUT","EGL","GLEW","IDBStore","SDL","SDL_gfx","GLFW","allocateUTF8","allocateUTF8OnStack","SOCKFS","FS"];u.forEach(Bt);var p;Ne=function t(){p||C(),p||(Ne=t)};function j(){k(me==0,'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])'),k(it.length==0,"cannot call main when preRun functions remain to be called");var t=Ca,n=0,s=0;try{var f=t(n,s);return Ki(f,!0),f}catch(S){return Cr(S)}}function L(){St(),Yr()}function C(){if(me>0||(L(),Gr(),me>0))return;function t(){p||(p=!0,e.calledRun=!0,!xe&&(zr(),Xr(),l(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),B&&j(),qr()))}e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1),t()},1)):t(),Oe()}function M(){var t=z,n=w,s=!1;z=w=f=>{s=!0};try{pi()}catch(f){}z=t,w=n,s&&(Le("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc."),Le("(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)"))}if(e.preInit)for(typeof e.preInit=="function"&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();var B=!0;return e.noInitialRun&&(B=!1),C(),a.ready}})(),lo=Rl;var Wr=class extends Tt{constructor(a,e,l,c=null){super(a,e,l,c)}instantiateImpl(a){return lo({...a,instantiateWasm:this.instantiateWasm.bind(this),locateFile:this.locateFile.bind(this)})}};async function Rc(i,a,e){return(await ba()).wasmExceptions&&i.eh?new Wr(a,e,i.eh.mainModule):new Hr(a,e,i.mvp.mainModule)}export{V as BROWSER_RUNTIME,Ka as ConsoleLogger,Xa as DEFAULT_RUNTIME,pl as DuckDBAccessMode,Pr as DuckDBBindingsBase,Ir as DuckDBConnection,sa as DuckDBDataProtocol,ml as DuckDBFeature,za as FileFlags,Or as FileStatistics,hl as JSONTableShape,vl as LogEvent,yl as LogLevel,wl as LogOrigin,gl as LogTopic,Za as PACKAGE_NAME,eo as PACKAGE_VERSION,Jl as PACKAGE_VERSION_MAJOR,Zl as PACKAGE_VERSION_MINOR,ec as PACKAGE_VERSION_PATCH,na as PreparedStatement,Lr as ResultStreamIterator,_l as StatusCode,qa as VoidLogger,Q as callSRet,bt as copyBuffer,Rc as createDuckDB,fl as decodeText,te as dropResponseBuffers,Be as failWith,ac as getJsDelivrBundles,Xl as getLogEventLabel,zl as getLogLevelLabel,Kl as getLogOriginLabel,ql as getLogTopicLabel,ba as getPlatformFeatures,nc as isFirefox,to as isNode,ic as isSafari,G as readString,oc as selectBundle};
/**
 * [js-sha256]{@link https://github.com/emn178/js-sha256}
 *
 * @version 0.9.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */
//# sourceMappingURL=data:application/json;base64,
