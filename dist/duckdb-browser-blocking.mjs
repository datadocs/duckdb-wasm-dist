var na=Object.create;var As=Object.defineProperty;var ia=Object.getOwnPropertyDescriptor;var sa=Object.getOwnPropertyNames;var aa=Object.getPrototypeOf,oa=Object.prototype.hasOwnProperty;var Fs=(r=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(r,{get:(n,e)=>(typeof require<"u"?require:n)[e]}):r)(function(r){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+r+'" is not supported')});var it=(r,n)=>()=>(n||r((n={exports:{}}).exports,n),n.exports);var ua=(r,n,e,o)=>{if(n&&typeof n=="object"||typeof n=="function")for(let u of sa(n))!oa.call(r,u)&&u!==e&&As(r,u,{get:()=>n[u],enumerable:!(o=ia(n,u))||o.enumerable});return r};var ss=(r,n,e)=>(e=r!=null?na(aa(r)):{},ua(n||!r||!r.__esModule?As(e,"default",{value:r,enumerable:!0}):e,r));var Gs=it((exports,module)=>{(function(){"use strict";var ERROR="input is invalid type",WINDOW=typeof window=="object",root=WINDOW?window:{};root.JS_SHA256_NO_WINDOW&&(WINDOW=!1);var WEB_WORKER=!WINDOW&&typeof self=="object",NODE_JS=!root.JS_SHA256_NO_NODE_JS&&typeof process=="object"&&process.versions&&process.versions.node;NODE_JS?root=global:WEB_WORKER&&(root=self);var COMMON_JS=!root.JS_SHA256_NO_COMMON_JS&&typeof module=="object"&&module.exports,AMD=typeof define=="function"&&define.amd,ARRAY_BUFFER=!root.JS_SHA256_NO_ARRAY_BUFFER&&typeof ArrayBuffer<"u",HEX_CHARS="0123456789abcdef".split(""),EXTRA=[-2147483648,8388608,32768,128],SHIFT=[24,16,8,0],K=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],OUTPUT_TYPES=["hex","array","digest","arrayBuffer"],blocks=[];(root.JS_SHA256_NO_NODE_JS||!Array.isArray)&&(Array.isArray=function(r){return Object.prototype.toString.call(r)==="[object Array]"}),ARRAY_BUFFER&&(root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW||!ArrayBuffer.isView)&&(ArrayBuffer.isView=function(r){return typeof r=="object"&&r.buffer&&r.buffer.constructor===ArrayBuffer});var createOutputMethod=function(r,n){return function(e){return new Sha256(n,!0).update(e)[r]()}},createMethod=function(r){var n=createOutputMethod("hex",r);NODE_JS&&(n=nodeWrap(n,r)),n.create=function(){return new Sha256(r)},n.update=function(u){return n.create().update(u)};for(var e=0;e<OUTPUT_TYPES.length;++e){var o=OUTPUT_TYPES[e];n[o]=createOutputMethod(o,r)}return n},nodeWrap=function(method,is224){var crypto=eval("require('crypto')"),Buffer=eval("require('buffer').Buffer"),algorithm=is224?"sha224":"sha256",nodeMethod=function(r){if(typeof r=="string")return crypto.createHash(algorithm).update(r,"utf8").digest("hex");if(r==null)throw new Error(ERROR);return r.constructor===ArrayBuffer&&(r=new Uint8Array(r)),Array.isArray(r)||ArrayBuffer.isView(r)||r.constructor===Buffer?crypto.createHash(algorithm).update(new Buffer(r)).digest("hex"):method(r)};return nodeMethod},createHmacOutputMethod=function(r,n){return function(e,o){return new HmacSha256(e,n,!0).update(o)[r]()}},createHmacMethod=function(r){var n=createHmacOutputMethod("hex",r);n.create=function(u){return new HmacSha256(u,r)},n.update=function(u,l){return n.create(u).update(l)};for(var e=0;e<OUTPUT_TYPES.length;++e){var o=OUTPUT_TYPES[e];n[o]=createHmacOutputMethod(o,r)}return n};function Sha256(r,n){n?(blocks[0]=blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0,this.blocks=blocks):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],r?(this.h0=3238371032,this.h1=914150663,this.h2=812702999,this.h3=4144912697,this.h4=4290775857,this.h5=1750603025,this.h6=1694076839,this.h7=3204075428):(this.h0=1779033703,this.h1=3144134277,this.h2=1013904242,this.h3=2773480762,this.h4=1359893119,this.h5=2600822924,this.h6=528734635,this.h7=1541459225),this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0,this.is224=r}Sha256.prototype.update=function(r){if(!this.finalized){var n,e=typeof r;if(e!=="string"){if(e==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);n=!0}for(var o,u=0,l,m=r.length,d=this.blocks;u<m;){if(this.hashed&&(this.hashed=!1,d[0]=this.block,d[16]=d[1]=d[2]=d[3]=d[4]=d[5]=d[6]=d[7]=d[8]=d[9]=d[10]=d[11]=d[12]=d[13]=d[14]=d[15]=0),n)for(l=this.start;u<m&&l<64;++u)d[l>>2]|=r[u]<<SHIFT[l++&3];else for(l=this.start;u<m&&l<64;++u)o=r.charCodeAt(u),o<128?d[l>>2]|=o<<SHIFT[l++&3]:o<2048?(d[l>>2]|=(192|o>>6)<<SHIFT[l++&3],d[l>>2]|=(128|o&63)<<SHIFT[l++&3]):o<55296||o>=57344?(d[l>>2]|=(224|o>>12)<<SHIFT[l++&3],d[l>>2]|=(128|o>>6&63)<<SHIFT[l++&3],d[l>>2]|=(128|o&63)<<SHIFT[l++&3]):(o=65536+((o&1023)<<10|r.charCodeAt(++u)&1023),d[l>>2]|=(240|o>>18)<<SHIFT[l++&3],d[l>>2]|=(128|o>>12&63)<<SHIFT[l++&3],d[l>>2]|=(128|o>>6&63)<<SHIFT[l++&3],d[l>>2]|=(128|o&63)<<SHIFT[l++&3]);this.lastByteIndex=l,this.bytes+=l-this.start,l>=64?(this.block=d[16],this.start=l-64,this.hash(),this.hashed=!0):this.start=l}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},Sha256.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var r=this.blocks,n=this.lastByteIndex;r[16]=this.block,r[n>>2]|=EXTRA[n&3],this.block=r[16],n>=56&&(this.hashed||this.hash(),r[0]=this.block,r[16]=r[1]=r[2]=r[3]=r[4]=r[5]=r[6]=r[7]=r[8]=r[9]=r[10]=r[11]=r[12]=r[13]=r[14]=r[15]=0),r[14]=this.hBytes<<3|this.bytes>>>29,r[15]=this.bytes<<3,this.hash()}},Sha256.prototype.hash=function(){var r=this.h0,n=this.h1,e=this.h2,o=this.h3,u=this.h4,l=this.h5,m=this.h6,d=this.h7,h=this.blocks,R,A,P,U,N,te,se,re,de,ce,ae;for(R=16;R<64;++R)N=h[R-15],A=(N>>>7|N<<25)^(N>>>18|N<<14)^N>>>3,N=h[R-2],P=(N>>>17|N<<15)^(N>>>19|N<<13)^N>>>10,h[R]=h[R-16]+A+h[R-7]+P<<0;for(ae=n&e,R=0;R<64;R+=4)this.first?(this.is224?(re=300032,N=h[0]-1413257819,d=N-150054599<<0,o=N+24177077<<0):(re=704751109,N=h[0]-210244248,d=N-1521486534<<0,o=N+143694565<<0),this.first=!1):(A=(r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10),P=(u>>>6|u<<26)^(u>>>11|u<<21)^(u>>>25|u<<7),re=r&n,U=re^r&e^ae,se=u&l^~u&m,N=d+P+se+K[R]+h[R],te=A+U,d=o+N<<0,o=N+te<<0),A=(o>>>2|o<<30)^(o>>>13|o<<19)^(o>>>22|o<<10),P=(d>>>6|d<<26)^(d>>>11|d<<21)^(d>>>25|d<<7),de=o&r,U=de^o&n^re,se=d&u^~d&l,N=m+P+se+K[R+1]+h[R+1],te=A+U,m=e+N<<0,e=N+te<<0,A=(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10),P=(m>>>6|m<<26)^(m>>>11|m<<21)^(m>>>25|m<<7),ce=e&o,U=ce^e&r^de,se=m&d^~m&u,N=l+P+se+K[R+2]+h[R+2],te=A+U,l=n+N<<0,n=N+te<<0,A=(n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10),P=(l>>>6|l<<26)^(l>>>11|l<<21)^(l>>>25|l<<7),ae=n&e,U=ae^n&o^ce,se=l&m^~l&d,N=u+P+se+K[R+3]+h[R+3],te=A+U,u=r+N<<0,r=N+te<<0;this.h0=this.h0+r<<0,this.h1=this.h1+n<<0,this.h2=this.h2+e<<0,this.h3=this.h3+o<<0,this.h4=this.h4+u<<0,this.h5=this.h5+l<<0,this.h6=this.h6+m<<0,this.h7=this.h7+d<<0},Sha256.prototype.hex=function(){this.finalize();var r=this.h0,n=this.h1,e=this.h2,o=this.h3,u=this.h4,l=this.h5,m=this.h6,d=this.h7,h=HEX_CHARS[r>>28&15]+HEX_CHARS[r>>24&15]+HEX_CHARS[r>>20&15]+HEX_CHARS[r>>16&15]+HEX_CHARS[r>>12&15]+HEX_CHARS[r>>8&15]+HEX_CHARS[r>>4&15]+HEX_CHARS[r&15]+HEX_CHARS[n>>28&15]+HEX_CHARS[n>>24&15]+HEX_CHARS[n>>20&15]+HEX_CHARS[n>>16&15]+HEX_CHARS[n>>12&15]+HEX_CHARS[n>>8&15]+HEX_CHARS[n>>4&15]+HEX_CHARS[n&15]+HEX_CHARS[e>>28&15]+HEX_CHARS[e>>24&15]+HEX_CHARS[e>>20&15]+HEX_CHARS[e>>16&15]+HEX_CHARS[e>>12&15]+HEX_CHARS[e>>8&15]+HEX_CHARS[e>>4&15]+HEX_CHARS[e&15]+HEX_CHARS[o>>28&15]+HEX_CHARS[o>>24&15]+HEX_CHARS[o>>20&15]+HEX_CHARS[o>>16&15]+HEX_CHARS[o>>12&15]+HEX_CHARS[o>>8&15]+HEX_CHARS[o>>4&15]+HEX_CHARS[o&15]+HEX_CHARS[u>>28&15]+HEX_CHARS[u>>24&15]+HEX_CHARS[u>>20&15]+HEX_CHARS[u>>16&15]+HEX_CHARS[u>>12&15]+HEX_CHARS[u>>8&15]+HEX_CHARS[u>>4&15]+HEX_CHARS[u&15]+HEX_CHARS[l>>28&15]+HEX_CHARS[l>>24&15]+HEX_CHARS[l>>20&15]+HEX_CHARS[l>>16&15]+HEX_CHARS[l>>12&15]+HEX_CHARS[l>>8&15]+HEX_CHARS[l>>4&15]+HEX_CHARS[l&15]+HEX_CHARS[m>>28&15]+HEX_CHARS[m>>24&15]+HEX_CHARS[m>>20&15]+HEX_CHARS[m>>16&15]+HEX_CHARS[m>>12&15]+HEX_CHARS[m>>8&15]+HEX_CHARS[m>>4&15]+HEX_CHARS[m&15];return this.is224||(h+=HEX_CHARS[d>>28&15]+HEX_CHARS[d>>24&15]+HEX_CHARS[d>>20&15]+HEX_CHARS[d>>16&15]+HEX_CHARS[d>>12&15]+HEX_CHARS[d>>8&15]+HEX_CHARS[d>>4&15]+HEX_CHARS[d&15]),h},Sha256.prototype.toString=Sha256.prototype.hex,Sha256.prototype.digest=function(){this.finalize();var r=this.h0,n=this.h1,e=this.h2,o=this.h3,u=this.h4,l=this.h5,m=this.h6,d=this.h7,h=[r>>24&255,r>>16&255,r>>8&255,r&255,n>>24&255,n>>16&255,n>>8&255,n&255,e>>24&255,e>>16&255,e>>8&255,e&255,o>>24&255,o>>16&255,o>>8&255,o&255,u>>24&255,u>>16&255,u>>8&255,u&255,l>>24&255,l>>16&255,l>>8&255,l&255,m>>24&255,m>>16&255,m>>8&255,m&255];return this.is224||h.push(d>>24&255,d>>16&255,d>>8&255,d&255),h},Sha256.prototype.array=Sha256.prototype.digest,Sha256.prototype.arrayBuffer=function(){this.finalize();var r=new ArrayBuffer(this.is224?28:32),n=new DataView(r);return n.setUint32(0,this.h0),n.setUint32(4,this.h1),n.setUint32(8,this.h2),n.setUint32(12,this.h3),n.setUint32(16,this.h4),n.setUint32(20,this.h5),n.setUint32(24,this.h6),this.is224||n.setUint32(28,this.h7),r};function HmacSha256(r,n,e){var o,u=typeof r;if(u==="string"){var l=[],m=r.length,d=0,h;for(o=0;o<m;++o)h=r.charCodeAt(o),h<128?l[d++]=h:h<2048?(l[d++]=192|h>>6,l[d++]=128|h&63):h<55296||h>=57344?(l[d++]=224|h>>12,l[d++]=128|h>>6&63,l[d++]=128|h&63):(h=65536+((h&1023)<<10|r.charCodeAt(++o)&1023),l[d++]=240|h>>18,l[d++]=128|h>>12&63,l[d++]=128|h>>6&63,l[d++]=128|h&63);r=l}else if(u==="object"){if(r===null)throw new Error(ERROR);if(ARRAY_BUFFER&&r.constructor===ArrayBuffer)r=new Uint8Array(r);else if(!Array.isArray(r)&&(!ARRAY_BUFFER||!ArrayBuffer.isView(r)))throw new Error(ERROR)}else throw new Error(ERROR);r.length>64&&(r=new Sha256(n,!0).update(r).array());var R=[],A=[];for(o=0;o<64;++o){var P=r[o]||0;R[o]=92^P,A[o]=54^P}Sha256.call(this,n,e),this.update(A),this.oKeyPad=R,this.inner=!0,this.sharedMemory=e}HmacSha256.prototype=new Sha256,HmacSha256.prototype.finalize=function(){if(Sha256.prototype.finalize.call(this),this.inner){this.inner=!1;var r=this.array();Sha256.call(this,this.is224,this.sharedMemory),this.update(this.oKeyPad),this.update(r),Sha256.prototype.finalize.call(this)}};var exports=createMethod();exports.sha256=exports,exports.sha224=createMethod(!0),exports.sha256.hmac=createHmacMethod(),exports.sha224.hmac=createHmacMethod(!0),COMMON_JS?module.exports=exports:(root.sha256=exports.sha256,root.sha224=exports.sha224,AMD&&define(function(){return exports}))})()});var gs=it(()=>{});var ys=it(()=>{});var ws=it(()=>{});var Vs=it((sr,ks)=>{"use strict";var vs=(()=>{var r=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(r=r||__filename),function(n={}){var e=typeof n<"u"?n:{},o,u;e.ready=new Promise((t,i)=>{o=t,u=i});var l=Object.assign({},e),m=[],d="./this.program",h=(t,i)=>{throw i},R=typeof window=="object",A=typeof importScripts=="function",P=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",U="";function N(t){return e.locateFile?e.locateFile(t,U):U+t}var te,se,re,de;if(P){var ce=gs(),ae=ys();A?U=ae.dirname(U)+"/":U=__dirname+"/",te=(t,i)=>(t=_t(t)?new URL(t):ae.normalize(t),ce.readFileSync(t,i?void 0:"utf8")),re=t=>{var i=te(t,!0);return i.buffer||(i=new Uint8Array(i)),i},se=(t,i,a,f=!0)=>{t=_t(t)?new URL(t):ae.normalize(t),ce.readFile(t,f?void 0:"utf8",(p,w)=>{p?a(p):i(f?w.buffer:w)})},!e.thisProgram&&process.argv.length>1&&(d=process.argv[1].replace(/\\/g,"/")),m=process.argv.slice(2),h=(t,i)=>{throw process.exitCode=t,i},e.inspect=()=>"[Emscripten Module object]"}else(R||A)&&(A?U=self.location.href:typeof document<"u"&&document.currentScript&&(U=document.currentScript.src),r&&(U=r),U.indexOf("blob:")!==0?U=U.substr(0,U.replace(/[?#].*/,"").lastIndexOf("/")+1):U="",te=t=>{var i=new XMLHttpRequest;return i.open("GET",t,!1),i.send(null),i.responseText},A&&(re=t=>{var i=new XMLHttpRequest;return i.open("GET",t,!1),i.responseType="arraybuffer",i.send(null),new Uint8Array(i.response)}),se=(t,i,a)=>{var f=new XMLHttpRequest;f.open("GET",t,!0),f.responseType="arraybuffer",f.onload=()=>{if(f.status==200||f.status==0&&f.response){i(f.response);return}a()},f.onerror=a,f.send(null)},de=t=>document.title=t);var Ue=e.print||console.log.bind(console),S=e.printErr||console.error.bind(console);Object.assign(e,l),l=null,e.arguments&&(m=e.arguments),e.thisProgram&&(d=e.thisProgram),e.quit&&(h=e.quit);var me;e.wasmBinary&&(me=e.wasmBinary);var Ge=e.noExitRuntime||!0;typeof WebAssembly!="object"&&D("no native wasm support detected");var be,L=!1,ne;function oe(t,i){t||D(i)}var Q,z,J,Y,g,I,cr,lr;function ot(){var t=be.buffer;e.HEAP8=Q=new Int8Array(t),e.HEAP16=J=new Int16Array(t),e.HEAP32=g=new Int32Array(t),e.HEAPU8=z=new Uint8Array(t),e.HEAPU16=Y=new Uint16Array(t),e.HEAPU32=I=new Uint32Array(t),e.HEAPF32=cr=new Float32Array(t),e.HEAPF64=lr=new Float64Array(t)}var fr,ut=[],ct=[],_r=[],lt=[],At=!1,dr=0;function mr(){return Ge||dr>0}function br(){if(e.preRun)for(typeof e.preRun=="function"&&(e.preRun=[e.preRun]);e.preRun.length;)yr(e.preRun.shift());De(ut)}function pr(){At=!0,De(ct)}function hr(){De(_r)}function gr(){if(e.postRun)for(typeof e.postRun=="function"&&(e.postRun=[e.postRun]);e.postRun.length;)vr(e.postRun.shift());De(lt)}function yr(t){ut.unshift(t)}function wr(t){ct.unshift(t)}function vr(t){lt.unshift(t)}var le=0,Ie=null,we=null;function kr(t){le++,e.monitorRunDependencies&&e.monitorRunDependencies(le)}function Er(t){if(le--,e.monitorRunDependencies&&e.monitorRunDependencies(le),le==0&&(Ie!==null&&(clearInterval(Ie),Ie=null),we)){var i=we;we=null,i()}}function D(t){e.onAbort&&e.onAbort(t),t="Aborted("+t+")",S(t),L=!0,ne=1,t+=". Build with -sASSERTIONS for more info.";var i=new WebAssembly.RuntimeError(t);throw u(i),i}var Sr="data:application/octet-stream;base64,";function ft(t){return t.startsWith(Sr)}function _t(t){return t.startsWith("file://")}var pe;pe="./duckdb-mvp.wasm",ft(pe)||(pe=N(pe));function dt(t){try{if(t==pe&&me)return new Uint8Array(me);if(re)return re(t);throw"both async and sync fetching of the wasm failed"}catch(i){D(i)}}function Dr(t){return!me&&(R||A)&&typeof fetch=="function"?fetch(t,{credentials:"same-origin"}).then(i=>{if(!i.ok)throw"failed to load wasm binary file at '"+t+"'";return i.arrayBuffer()}).catch(()=>dt(t)):Promise.resolve().then(()=>dt(t))}function mt(t,i,a){return Dr(t).then(f=>WebAssembly.instantiate(f,i)).then(f=>f).then(a,f=>{S("failed to asynchronously prepare wasm: "+f),D(f)})}function Tr(t,i,a,f){return!t&&typeof WebAssembly.instantiateStreaming=="function"&&!ft(i)&&!P&&typeof fetch=="function"?fetch(i,{credentials:"same-origin"}).then(p=>{var w=WebAssembly.instantiateStreaming(p,a);return w.then(f,function(y){return S("wasm streaming compile failed: "+y),S("falling back to ArrayBuffer instantiation"),mt(i,a,f)})}):mt(i,a,f)}function Rr(){var t={a:ki};function i(f,p){var w=f.exports;return e.asm=w,be=e.asm.Ra,ot(),fr=e.asm.Ua,wr(e.asm.Sa),Er("wasm-instantiate"),w}kr("wasm-instantiate");function a(f){i(f.instance)}if(e.instantiateWasm)try{return e.instantiateWasm(t,i)}catch(f){S("Module.instantiateWasm callback failed with error: "+f),u(f)}return Tr(me,pe,t,a).catch(u),{}}var ee,he;function bt(t){this.name="ExitStatus",this.message="Program terminated with exit(".concat(t,")"),this.status=t}function De(t){for(;t.length>0;)t.shift()(e)}function Ar(){S("missing function: XML_GetBuffer"),D(-1)}function Fr(){S("missing function: XML_GetErrorCode"),D(-1)}function xr(){S("missing function: XML_Parse"),D(-1)}function Cr(){S("missing function: XML_ParseBuffer"),D(-1)}function Mr(){S("missing function: XML_ParserCreate"),D(-1)}function Ur(){S("missing function: XML_ParserFree"),D(-1)}function Ir(){S("missing function: XML_ResumeParser"),D(-1)}function Hr(){S("missing function: XML_SetCharacterDataHandler"),D(-1)}function Br(){S("missing function: XML_SetElementHandler"),D(-1)}function Nr(){S("missing function: XML_SetUserData"),D(-1)}function Lr(){S("missing function: XML_StopParser"),D(-1)}function Ft(t){this.excPtr=t,this.ptr=t-24,this.set_type=function(i){I[this.ptr+4>>>2]=i},this.get_type=function(){return I[this.ptr+4>>>2]},this.set_destructor=function(i){I[this.ptr+8>>>2]=i},this.get_destructor=function(){return I[this.ptr+8>>>2]},this.set_caught=function(i){i=i?1:0,Q[this.ptr+12>>>0]=i},this.get_caught=function(){return Q[this.ptr+12>>>0]!=0},this.set_rethrown=function(i){i=i?1:0,Q[this.ptr+13>>>0]=i},this.get_rethrown=function(){return Q[this.ptr+13>>>0]!=0},this.init=function(i,a){this.set_adjusted_ptr(0),this.set_type(i),this.set_destructor(a)},this.set_adjusted_ptr=function(i){I[this.ptr+16>>>2]=i},this.get_adjusted_ptr=function(){return I[this.ptr+16>>>2]},this.get_exception_ptr=function(){var i=Rt(this.get_type());if(i)return I[this.excPtr>>>2];var a=this.get_adjusted_ptr();return a!==0?a:this.excPtr}}var xt=0,Ct=0;function Mt(t,i,a){var f=new Ft(t);throw f.init(i,a),xt=t,Ct++,xt}var Te="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function Re(t,i,a){D(Te)}var Ut=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function It(t,i,a){i>>>=0;for(var f=i+a,p=i;t[p]&&!(p>=f);)++p;if(p-i>16&&t.buffer&&Ut)return Ut.decode(t.subarray(i,p));for(var w="";i<p;){var y=t[i++];if(!(y&128)){w+=String.fromCharCode(y);continue}var E=t[i++]&63;if((y&224)==192){w+=String.fromCharCode((y&31)<<6|E);continue}var T=t[i++]&63;if((y&240)==224?y=(y&15)<<12|E<<6|T:y=(y&7)<<18|E<<12|T<<6|t[i++]&63,y<65536)w+=String.fromCharCode(y);else{var M=y-65536;w+=String.fromCharCode(55296|M>>10,56320|M&1023)}}return w}function Ae(t,i){return t>>>=0,t?It(z,t,i):""}var ge={varargs:void 0,get:function(){ge.varargs+=4;var t=g[ge.varargs-4>>>2];return t},getStr:function(t){var i=Ae(t);return i}};function pt(t,i,a,f,p){for(var w=0,y=i?g[i>>>2]:0,E=i?g[i+4>>>2]:0,T=a?g[a>>>2]:0,M=a?g[a+4>>>2]:0,x=f?g[f>>>2]:0,X=f?g[f+4>>>2]:0,H=0,ie=0,v=0,F=0,O=0,W=0,k=(i?g[i>>>2]:0)|(a?g[a>>>2]:0)|(f?g[f>>>2]:0),C=(i?g[i+4>>>2]:0)|(a?g[a+4>>>2]:0)|(f?g[f+4>>>2]:0),j=function(ea,ta,ra,Rs){return ea<32?ta&Rs:ra&Rs},$=0;$<t;$++){var ue=1<<$%32;if(j($,k,C,ue)){var ze=ge.getStreamFromFD($),Xe=ge.DEFAULT_POLLMASK;ze.stream_ops.poll&&(Xe=ze.stream_ops.poll(ze)),Xe&1&&j($,y,E,ue)&&($<32?H=H|ue:ie=ie|ue,w++),Xe&4&&j($,T,M,ue)&&($<32?v=v|ue:F=F|ue,w++),Xe&2&&j($,x,X,ue)&&($<32?O=O|ue:W=W|ue,w++)}}return i&&(g[i>>>2]=H,g[i+4>>>2]=ie),a&&(g[a>>>2]=v,g[a+4>>>2]=F),f&&(g[f>>>2]=O,g[f+4>>>2]=W),w}function Ht(){S("missing function: $SOCKFS"),D(-1)}function ht(){S("missing function: $FS"),D(-1)}function ve(t){var i=Ht.getSocket(t);if(!i)throw new ht.ErrnoError(8);return i}function Fe(t){return(t&255)+"."+(t>>8&255)+"."+(t>>16&255)+"."+(t>>24&255)}function Ye(t){var i="",a=0,f=0,p=0,w=0,y=0,E=0,T=[t[0]&65535,t[0]>>16,t[1]&65535,t[1]>>16,t[2]&65535,t[2]>>16,t[3]&65535,t[3]>>16],M=!0,x="";for(E=0;E<5;E++)if(T[E]!==0){M=!1;break}if(M){if(x=Fe(T[6]|T[7]<<16),T[5]===-1)return i="::ffff:",i+=x,i;if(T[5]===0)return i="::",x==="0.0.0.0"&&(x=""),x==="0.0.0.1"&&(x="1"),i+=x,i}for(a=0;a<8;a++)T[a]===0&&(a-p>1&&(y=0),p=a,y++),y>f&&(f=y,w=a-f+1);for(a=0;a<8;a++){if(f>1&&T[a]===0&&a>=w&&a<w+f){a===w&&(i+=":",w===0&&(i+=":"));continue}i+=Number(We(T[a]&65535)).toString(16),i+=a<7?":":""}return i}function fe(t,i){var a=J[t>>>1],f=We(Y[t+2>>>1]),p;switch(a){case 2:if(i!==16)return{errno:28};p=g[t+4>>>2],p=Fe(p);break;case 10:if(i!==28)return{errno:28};p=[g[t+8>>>2],g[t+12>>>2],g[t+16>>>2],g[t+20>>>2]],p=Ye(p);break;default:return{errno:5}}return{family:a,addr:p,port:f}}function He(t){for(var i=t.split("."),a=0;a<4;a++){var f=Number(i[a]);if(isNaN(f))return null;i[a]=f}return(i[0]|i[1]<<8|i[2]<<16|i[3]<<24)>>>0}function Ke(t){return parseInt(t)}function gt(t){var i,a,f,p,w=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,y=[];if(!w.test(t))return null;if(t==="::")return[0,0,0,0,0,0,0,0];for(t.startsWith("::")?t=t.replace("::","Z:"):t=t.replace("::",":Z:"),t.indexOf(".")>0?(t=t.replace(new RegExp("[.]","g"),":"),i=t.split(":"),i[i.length-4]=Ke(i[i.length-4])+Ke(i[i.length-3])*256,i[i.length-3]=Ke(i[i.length-2])+Ke(i[i.length-1])*256,i=i.slice(0,i.length-2)):i=t.split(":"),f=0,p=0,a=0;a<i.length;a++)if(typeof i[a]=="string")if(i[a]==="Z"){for(p=0;p<8-i.length+1;p++)y[a+p]=0;f=p-1}else y[a+f]=Pe(parseInt(i[a],16));else y[a+f]=i[a];return[y[1]<<16|y[0],y[3]<<16|y[2],y[5]<<16|y[4],y[7]<<16|y[6]]}var _e={address_map:{id:1,addrs:{},names:{}},lookup_name:function(t){var i=He(t);if(i!==null||(i=gt(t),i!==null))return t;var a;if(_e.address_map.addrs[t])a=_e.address_map.addrs[t];else{var f=_e.address_map.id++;oe(f<65535,"exceeded max address mappings of 65535"),a="172.29."+(f&255)+"."+(f&65280),_e.address_map.names[a]=t,_e.address_map.addrs[t]=a}return a},lookup_addr:function(t){return _e.address_map.names[t]?_e.address_map.names[t]:null}};function Bt(t,i,a){if(a&&t===0)return null;var f=fe(t,i);if(f.errno)throw new ht.ErrnoError(f.errno);return f.addr=_e.lookup_addr(f.addr)||f.addr,f}function Or(t,i,a,f,p,w){var y=ve(t),E=Bt(i,a);return y.sock_ops.bind(y,E.addr,E.port),0}function Pr(t,i,a,f,p,w){var y=ve(t),E=Bt(i,a);return y.sock_ops.connect(y,E.addr,E.port),0}function Nt(t,i,a,f){}function $e(t,i,a){return ge.varargs=a,0}function Wr(t,i){}function Lt(t,i,a){}function Ve(t,i,a,f){if(a>>>=0,!(f>0))return 0;for(var p=a,w=a+f-1,y=0;y<t.length;++y){var E=t.charCodeAt(y);if(E>=55296&&E<=57343){var T=t.charCodeAt(++y);E=65536+((E&1023)<<10)|T&1023}if(E<=127){if(a>=w)break;i[a++>>>0]=E}else if(E<=2047){if(a+1>=w)break;i[a++>>>0]=192|E>>6,i[a++>>>0]=128|E&63}else if(E<=65535){if(a+2>=w)break;i[a++>>>0]=224|E>>12,i[a++>>>0]=128|E>>6&63,i[a++>>>0]=128|E&63}else{if(a+3>=w)break;i[a++>>>0]=240|E>>18,i[a++>>>0]=128|E>>12&63,i[a++>>>0]=128|E>>6&63,i[a++>>>0]=128|E&63}}return i[a>>>0]=0,a-p}function Je(t,i,a){return Ve(t,z,i,a)}function qr(t,i,a){}function Ot(t,i){return z.fill(0,t,t+i),t}function yt(t,i,a,f,p){switch(i){case 2:a=He(a),Ot(t,16),p&&(g[p>>>2]=16),J[t>>>1]=i,g[t+4>>>2]=a,J[t+2>>>1]=Pe(f);break;case 10:a=gt(a),Ot(t,28),p&&(g[p>>>2]=28),g[t>>>2]=i,g[t+8>>>2]=a[0],g[t+12>>>2]=a[1],g[t+16>>>2]=a[2],g[t+20>>>2]=a[3],J[t+2>>>1]=Pe(f);break;default:return 5}return 0}function zr(t,i,a,f,p,w){var y=ve(t);if(!y.daddr)return-53;var E=yt(i,y.family,_e.lookup_name(y.daddr),y.dport,a);return 0}function Xr(t,i,a,f,p,w){var y=ve(t);return i===1&&a===4?(g[f>>>2]=y.error,g[p>>>2]=4,y.error=null,0):-50}function jr(t,i,a){return ge.varargs=a,0}function Gr(t,i){}function Yr(t,i,a){}function Kr(t,i,a,f){}function $r(t,i,a,f){ge.varargs=f}function Vr(t,i,a,f,p,w){var y=ve(t),E=y.sock_ops.recvmsg(y,a);if(!E)return 0;if(p)var T=yt(p,y.family,_e.lookup_name(E.addr),E.port,w);return z.set(E.buffer,i>>>0),E.buffer.byteLength}function Jr(t,i,a,f){}function Qr(t){}function Zr(t,i,a,f,p,w){}function en(t,i,a){}function tn(t,i){}function Be(t,i,a){}var rn=!0;function nn(){return rn}function sn(t){return I[t>>>2]+g[t+4>>>2]*4294967296}function Ne(t){return t%4===0&&(t%100!==0||t%400===0)}var wt=[0,31,60,91,121,152,182,213,244,274,305,335],Pt=[0,31,59,90,120,151,181,212,243,273,304,334];function an(t){var i=Ne(t.getFullYear()),a=i?wt:Pt,f=a[t.getMonth()]+t.getDate()-1;return f}function on(t,i){var a=new Date(sn(t)*1e3);g[i>>>2]=a.getSeconds(),g[i+4>>>2]=a.getMinutes(),g[i+8>>>2]=a.getHours(),g[i+12>>>2]=a.getDate(),g[i+16>>>2]=a.getMonth(),g[i+20>>>2]=a.getFullYear()-1900,g[i+24>>>2]=a.getDay();var f=an(a)|0;g[i+28>>>2]=f,g[i+36>>>2]=-(a.getTimezoneOffset()*60);var p=new Date(a.getFullYear(),0,1),w=new Date(a.getFullYear(),6,1).getTimezoneOffset(),y=p.getTimezoneOffset(),E=(w!=y&&a.getTimezoneOffset()==Math.min(y,w))|0;g[i+32>>>2]=E}function vt(t){for(var i=0,a=0;a<t.length;++a){var f=t.charCodeAt(a);f<=127?i++:f<=2047?i+=2:f>=55296&&f<=57343?(i+=4,++a):i+=3}return i}function Wt(t){var i=vt(t)+1,a=xe(i);return a&&Je(t,a,i),a}function un(t,i,a){var f=new Date().getFullYear(),p=new Date(f,0,1),w=new Date(f,6,1),y=p.getTimezoneOffset(),E=w.getTimezoneOffset(),T=Math.max(y,E);I[t>>>2]=T*60,g[i>>>2]=+(y!=E);function M(v){var F=v.toTimeString().match(/\(([A-Za-z ]+)\)$/);return F?F[1]:"GMT"}var x=M(p),X=M(w),H=Wt(x),ie=Wt(X);E<y?(I[a>>>2]=H,I[a+4>>>2]=ie):(I[a>>>2]=ie,I[a+4>>>2]=H)}function cn(){D("")}function ln(t,i){D(Te)}function fn(t,i){return globalThis.DUCKDB_RUNTIME.createDirectory(e,t,i)}function _n(t,i){return globalThis.DUCKDB_RUNTIME.checkDirectory(e,t,i)}function dn(t,i){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(e,t,i)}function mn(t,i){return globalThis.DUCKDB_RUNTIME.removeDirectory(e,t,i)}function bn(t){return globalThis.DUCKDB_RUNTIME.closeFile(e,t)}function pn(t,i){return globalThis.DUCKDB_RUNTIME.checkFile(e,t,i)}function hn(t){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(e,t)}function gn(t,i,a,f){return globalThis.DUCKDB_RUNTIME.moveFile(e,t,i,a,f)}function yn(t,i){return globalThis.DUCKDB_RUNTIME.openFile(e,t,i)}function wn(t,i,a,f){return globalThis.DUCKDB_RUNTIME.readFile(e,t,i,a,f)}function vn(t,i){return globalThis.DUCKDB_RUNTIME.truncateFile(e,t,i)}function kn(t,i,a,f){return globalThis.DUCKDB_RUNTIME.writeFile(e,t,i,a,f)}function En(t){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(t)}function qt(t,i){return globalThis.DUCKDB_RUNTIME.glob(e,t,i)}function Sn(t){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(e,t)}function zt(t,i,a,f,p,w){return globalThis.DUCKDB_RUNTIME.callScalarUDF(e,t,i,a,f,p,w)}function Dn(){return Date.now()}function Xt(){return 4294901760}function Tn(){return Xt()}var Qe;P&&(global.performance=ws().performance),Qe=()=>performance.now();function Rn(t,i,a){z.copyWithin(t>>>0,i>>>0,i+a>>>0)}function Le(t){var i=be.buffer,a=t-i.byteLength+65535>>>16;try{return be.grow(a),ot(),1}catch(f){}}function An(t){var i=z.length;t=t>>>0;var a=Xt();if(t>a)return!1;for(var f=(T,M)=>T+(M-T%M)%M,p=1;p<=4;p*=2){var w=i*(1+.2/p);w=Math.min(w,t+100663296);var y=Math.min(a,f(Math.max(t,w),65536)),E=Le(y);if(E)return!0}return!1}var kt={};function Fn(){return d||"./this.program"}function Oe(){if(!Oe.strings){var t=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",i={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:t,_:Fn()};for(var a in kt)kt[a]===void 0?delete i[a]:i[a]=kt[a];var f=[];for(var a in i)f.push("".concat(a,"=").concat(i[a]));Oe.strings=f}return Oe.strings}function xn(t,i){for(var a=0;a<t.length;++a)Q[i++>>>0]=t.charCodeAt(a);Q[i>>>0]=0}function Cn(t,i){var a=0;return Oe().forEach(function(f,p){var w=i+a;I[t+p*4>>>2]=w,xn(f,w),a+=f.length+1}),0}function Mn(t,i){var a=Oe();I[t>>>2]=a.length;var f=0;return a.forEach(function(p){f+=p.length+1}),I[i>>>2]=f,0}function Un(t){return 52}function In(t,i){var a=0,f=0,p=0;{var w=2;t==0?a=2:(t==1||t==2)&&(a=64),p=1}return Q[i>>>0]=w,J[i+2>>>1]=p,he=[a>>>0,(ee=a,+Math.abs(ee)>=1?ee>0?+Math.floor(ee/4294967296)>>>0:~~+Math.ceil((ee-+(~~ee>>>0))/4294967296)>>>0:0)],g[i+8>>>2]=he[0],g[i+12>>>2]=he[1],he=[f>>>0,(ee=f,+Math.abs(ee)>=1?ee>0?+Math.floor(ee/4294967296)>>>0:~~+Math.ceil((ee-+(~~ee>>>0))/4294967296)>>>0:0)],g[i+16>>>2]=he[0],g[i+20>>>2]=he[1],0}function Hn(t,i,a,f,p,w){return 52}function Bn(t,i,a,f,p,w){return 52}function Nn(t,i,a,f){return 52}function Ln(t,i,a,f,p){return 70}function On(t){return 52}var Pn=[null,[],[]];function jt(t,i){var a=Pn[t];i===0||i===10?((t===1?Ue:S)(It(a,0)),a.length=0):a.push(i)}function Wn(t,i,a,f){for(var p=0,w=0;w<a;w++){var y=I[i>>>2],E=I[i+4>>>2];i+=8;for(var T=0;T<E;T++)jt(t,z[y+T>>>0]);p+=E}return I[f>>>2]=p,0}function qn(t,i,a,f){var p=0,w=0,y=0,E=0,T=0,M=0,x;function X(H,ie,v,F,O,W){var k,C,j,$;return C=H===10?28:16,O=H===10?Ye(O):Fe(O),k=xe(C),$=yt(k,H,O,W),oe(!$),j=xe(32),g[j+4>>>2]=H,g[j+8>>>2]=ie,g[j+12>>>2]=v,I[j+24>>>2]=F,I[j+20>>>2]=k,H===10?g[j+16>>>2]=28:g[j+16>>>2]=16,g[j+28>>>2]=0,j}if(a&&(y=g[a>>>2],E=g[a+4>>>2],T=g[a+8>>>2],M=g[a+12>>>2]),T&&!M&&(M=T===2?17:6),!T&&M&&(T=M===17?2:1),M===0&&(M=6),T===0&&(T=1),!t&&!i)return-2;if(y&-1088||a!==0&&g[a>>>2]&2&&!t)return-1;if(y&32)return-2;if(T!==0&&T!==1&&T!==2)return-7;if(E!==0&&E!==2&&E!==10)return-6;if(i&&(i=Ae(i),w=parseInt(i,10),isNaN(w)))return y&1024?-2:-8;if(!t)return E===0&&(E=2),y&1||(E===2?p=rt(2130706433):p=[0,0,0,1]),x=X(E,T,M,null,p,w),I[f>>>2]=x,0;if(t=Ae(t),p=He(t),p!==null)if(E===0||E===2)E=2;else if(E===10&&y&8)p=[0,0,rt(65535),p],E=10;else return-2;else if(p=gt(t),p!==null)if(E===0||E===10)E=10;else return-2;return p!=null?(x=X(E,T,M,t,p,w),I[f>>>2]=x,0):y&4?-2:(t=_e.lookup_name(t),p=He(t),E===0?E=2:E===10&&(p=[0,0,rt(65535),p]),x=X(E,T,M,null,p,w),I[f>>>2]=x,0)}function zn(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return f=>crypto.getRandomValues(f);if(P)try{var t=Fs("crypto"),i=t.randomFillSync;if(i)return f=>t.randomFillSync(f);var a=t.randomBytes;return f=>(f.set(a(f.byteLength)),f)}catch(f){}D("initRandomDevice")}function Et(t){return(Et=zn())(t)}function Gt(t,i){return Et(z.subarray(t>>>0,t+i>>>0)),0}function Xn(t,i,a,f,p,w,y){var E=fe(t,i);if(E.errno)return-6;var T=E.port,M=E.addr,x=!1;if(a&&f){var X;if(y&1||!(X=_e.lookup_addr(M))){if(y&8)return-2}else M=X;var H=Je(M,a,f);H+1>=f&&(x=!0)}if(p&&w){T=""+T;var H=Je(T,p,w);H+1>=w&&(x=!0)}return x?-12:0}function jn(t,i){for(var a=0,f=0;f<=i;a+=t[f++]);return a}var St=[31,29,31,30,31,30,31,31,30,31,30,31],Yt=[31,28,31,30,31,30,31,31,30,31,30,31];function Gn(t,i){for(var a=new Date(t.getTime());i>0;){var f=Ne(a.getFullYear()),p=a.getMonth(),w=(f?St:Yt)[p];if(i>w-a.getDate())i-=w-a.getDate()+1,a.setDate(1),p<11?a.setMonth(p+1):(a.setMonth(0),a.setFullYear(a.getFullYear()+1));else return a.setDate(a.getDate()+i),a}return a}function Yn(t,i,a){var f=a>0?a:vt(t)+1,p=new Array(f),w=Ve(t,p,0,p.length);return i&&(p.length=w),p}function Kt(t,i){Q.set(t,i>>>0)}function Kn(t,i,a,f){var p=g[f+40>>>2],w={tm_sec:g[f>>>2],tm_min:g[f+4>>>2],tm_hour:g[f+8>>>2],tm_mday:g[f+12>>>2],tm_mon:g[f+16>>>2],tm_year:g[f+20>>>2],tm_wday:g[f+24>>>2],tm_yday:g[f+28>>>2],tm_isdst:g[f+32>>>2],tm_gmtoff:g[f+36>>>2],tm_zone:p?Ae(p):""},y=Ae(a),E={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var T in E)y=y.replace(new RegExp(T,"g"),E[T]);var M=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],x=["January","February","March","April","May","June","July","August","September","October","November","December"];function X(k,C,j){for(var $=typeof k=="number"?k.toString():k||"";$.length<C;)$=j[0]+$;return $}function H(k,C){return X(k,C,"0")}function ie(k,C){function j(ue){return ue<0?-1:ue>0?1:0}var $;return($=j(k.getFullYear()-C.getFullYear()))===0&&($=j(k.getMonth()-C.getMonth()))===0&&($=j(k.getDate()-C.getDate())),$}function v(k){switch(k.getDay()){case 0:return new Date(k.getFullYear()-1,11,29);case 1:return k;case 2:return new Date(k.getFullYear(),0,3);case 3:return new Date(k.getFullYear(),0,2);case 4:return new Date(k.getFullYear(),0,1);case 5:return new Date(k.getFullYear()-1,11,31);case 6:return new Date(k.getFullYear()-1,11,30)}}function F(k){var C=Gn(new Date(k.tm_year+1900,0,1),k.tm_yday),j=new Date(C.getFullYear(),0,4),$=new Date(C.getFullYear()+1,0,4),ue=v(j),ze=v($);return ie(ue,C)<=0?ie(ze,C)<=0?C.getFullYear()+1:C.getFullYear():C.getFullYear()-1}var O={"%a":function(k){return M[k.tm_wday].substring(0,3)},"%A":function(k){return M[k.tm_wday]},"%b":function(k){return x[k.tm_mon].substring(0,3)},"%B":function(k){return x[k.tm_mon]},"%C":function(k){var C=k.tm_year+1900;return H(C/100|0,2)},"%d":function(k){return H(k.tm_mday,2)},"%e":function(k){return X(k.tm_mday,2," ")},"%g":function(k){return F(k).toString().substring(2)},"%G":function(k){return F(k)},"%H":function(k){return H(k.tm_hour,2)},"%I":function(k){var C=k.tm_hour;return C==0?C=12:C>12&&(C-=12),H(C,2)},"%j":function(k){return H(k.tm_mday+jn(Ne(k.tm_year+1900)?St:Yt,k.tm_mon-1),3)},"%m":function(k){return H(k.tm_mon+1,2)},"%M":function(k){return H(k.tm_min,2)},"%n":function(){return"\n"},"%p":function(k){return k.tm_hour>=0&&k.tm_hour<12?"AM":"PM"},"%S":function(k){return H(k.tm_sec,2)},"%t":function(){return"	"},"%u":function(k){return k.tm_wday||7},"%U":function(k){var C=k.tm_yday+7-k.tm_wday;return H(Math.floor(C/7),2)},"%V":function(k){var C=Math.floor((k.tm_yday+7-(k.tm_wday+6)%7)/7);if((k.tm_wday+371-k.tm_yday-2)%7<=2&&C++,C){if(C==53){var $=(k.tm_wday+371-k.tm_yday)%7;$!=4&&($!=3||!Ne(k.tm_year))&&(C=1)}}else{C=52;var j=(k.tm_wday+7-k.tm_yday-1)%7;(j==4||j==5&&Ne(k.tm_year%400-1))&&C++}return H(C,2)},"%w":function(k){return k.tm_wday},"%W":function(k){var C=k.tm_yday+7-(k.tm_wday+6)%7;return H(Math.floor(C/7),2)},"%y":function(k){return(k.tm_year+1900).toString().substring(2)},"%Y":function(k){return k.tm_year+1900},"%z":function(k){var C=k.tm_gmtoff,j=C>=0;return C=Math.abs(C)/60,C=C/60*100+C%60,(j?"+":"-")+("0000"+C).slice(-4)},"%Z":function(k){return k.tm_zone},"%%":function(){return"%"}};y=y.replace(/%%/g,"\0\0");for(var T in O)y.includes(T)&&(y=y.replace(new RegExp(T,"g"),O[T](w)));y=y.replace(/\0\0/g,"%");var W=Yn(y,!1);return W.length>i?0:(Kt(W,t),W.length-1)}function $n(t,i,a,f,p){return Kn(t,i,a,f)}function Vn(){S("missing function: ucnv_close_64"),D(-1)}function Jn(){S("missing function: ucnv_convertEx_64"),D(-1)}function Qn(){S("missing function: ucnv_open_64"),D(-1)}function Zn(){S("missing function: ucnv_toAlgorithmic_64"),D(-1)}function ei(){S("missing function: ucsdet_close_64"),D(-1)}function ti(){S("missing function: ucsdet_detect_64"),D(-1)}function ri(){S("missing function: ucsdet_getConfidence_64"),D(-1)}function ni(){S("missing function: ucsdet_getName_64"),D(-1)}function ii(){S("missing function: ucsdet_open_64"),D(-1)}function si(){S("missing function: ucsdet_setText_64"),D(-1)}function ai(){S("missing function: unzClose"),D(-1)}function oi(){S("missing function: unzCloseCurrentFile"),D(-1)}function ui(){S("missing function: unzGetCurrentFileInfo"),D(-1)}function ci(){S("missing function: unzGetCurrentFileInfo64"),D(-1)}function li(){S("missing function: unzGetGlobalInfo"),D(-1)}function fi(){S("missing function: unzGoToFirstFile"),D(-1)}function _i(){S("missing function: unzGoToNextFile"),D(-1)}function di(){S("missing function: unzLocateFile"),D(-1)}function mi(){S("missing function: unzOpen"),D(-1)}function bi(){S("missing function: unzOpen2"),D(-1)}function pi(){S("missing function: unzOpenCurrentFile"),D(-1)}function hi(){S("missing function: unzReadCurrentFile"),D(-1)}function gi(t){ne=t,mr()||(e.onExit&&e.onExit(t),L=!0),h(t,new bt(t))}function yi(t,i){ne=t,gi(t)}function wi(t){if(t instanceof bt||t=="unwind")return ne;h(1,t)}function Ds(t){var i=e["_"+t];return i}function vi(t){var i=vt(t)+1,a=qe(i);return Je(t,a,i),a}function $t(t,i,a,f,p){var w={string:v=>{var F=0;return v!=null&&v!==0&&(F=vi(v)),F},array:v=>{var F=qe(v.length);return Kt(v,F),F}};function y(v){return i==="string"?Ae(v):i==="boolean"?!!v:v}var E=Ds(t),T=[],M=0;if(f)for(var x=0;x<f.length;x++){var X=w[a[x]];X?(M===0&&(M=Ce()),T[x]=X(f[x])):T[x]=f[x]}var H=E.apply(null,T);function ie(v){return M!==0&&Tt(M),y(v)}return H=ie(H),H}var ki={g:Ar,V:Fr,da:xr,n:Cr,p:Mr,d:Ur,B:Ir,f:Hr,b:Br,o:Nr,h:Lr,a:Mt,La:Re,Fa:pt,Ja:Or,Ia:Pr,Ba:Nt,e:$e,Aa:Wr,O:Lt,va:qr,Da:zr,Ea:Xr,K:jr,xa:Gr,wa:Yr,ya:Kr,L:$r,Ga:Vr,ta:Jr,F:Qr,Ha:Zr,H:en,za:tn,G:Be,Na:nn,fa:on,ga:un,j:cn,Ma:ln,ma:fn,na:_n,ka:dn,la:mn,D:bn,ia:pn,N:hn,ja:gn,pa:yn,q:wn,oa:vn,E:kn,qa:En,ha:qt,C:Sn,ra:zt,M:Dn,Oa:Tn,i:Qe,Ka:Rn,Qa:An,T:Cn,W:Mn,l:Un,ea:In,Q:Hn,P:Bn,J:Nn,R:Ln,ua:On,w:Wn,I:qn,sa:Gt,Ca:Xn,Pa:$n,c:Vn,X:Jn,v:Qn,Z:Zn,Y:ei,aa:ti,$:ri,_:ni,ca:ii,ba:si,k:ai,u:oi,z:ui,r:ci,U:li,A:fi,y:_i,t:di,x:mi,S:bi,s:pi,m:hi},Ts=Rr(),Ei=function(){return(Ei=e.asm.Sa).apply(null,arguments)},Vt=e._main=function(){return(Vt=e._main=e.asm.Ta).apply(null,arguments)},Si=e._duckdb_web_fs_glob_add_path=function(){return(Si=e._duckdb_web_fs_glob_add_path=e.asm.Va).apply(null,arguments)},Di=e._duckdb_web_clear_response=function(){return(Di=e._duckdb_web_clear_response=e.asm.Wa).apply(null,arguments)},Ti=e._duckdb_web_fail_with=function(){return(Ti=e._duckdb_web_fail_with=e.asm.Xa).apply(null,arguments)},Ri=e._duckdb_web_reset=function(){return(Ri=e._duckdb_web_reset=e.asm.Ya).apply(null,arguments)},Ai=e._duckdb_web_connect=function(){return(Ai=e._duckdb_web_connect=e.asm.Za).apply(null,arguments)},Fi=e._duckdb_web_disconnect=function(){return(Fi=e._duckdb_web_disconnect=e.asm._a).apply(null,arguments)},xi=e._duckdb_web_flush_files=function(){return(xi=e._duckdb_web_flush_files=e.asm.$a).apply(null,arguments)},Ci=e._duckdb_web_flush_file=function(){return(Ci=e._duckdb_web_flush_file=e.asm.ab).apply(null,arguments)},Mi=e._duckdb_web_open=function(){return(Mi=e._duckdb_web_open=e.asm.bb).apply(null,arguments)},Ui=e._duckdb_web_get_global_file_info=function(){return(Ui=e._duckdb_web_get_global_file_info=e.asm.cb).apply(null,arguments)},Ii=e._duckdb_web_collect_file_stats=function(){return(Ii=e._duckdb_web_collect_file_stats=e.asm.db).apply(null,arguments)},Hi=e._duckdb_web_export_file_stats=function(){return(Hi=e._duckdb_web_export_file_stats=e.asm.eb).apply(null,arguments)},Bi=e._duckdb_web_fs_drop_file=function(){return(Bi=e._duckdb_web_fs_drop_file=e.asm.fb).apply(null,arguments)},Ni=e._duckdb_web_fs_drop_files=function(){return(Ni=e._duckdb_web_fs_drop_files=e.asm.gb).apply(null,arguments)},Li=e._duckdb_web_fs_glob_file_infos=function(){return(Li=e._duckdb_web_fs_glob_file_infos=e.asm.hb).apply(null,arguments)},Oi=e._duckdb_web_fs_get_file_info_by_id=function(){return(Oi=e._duckdb_web_fs_get_file_info_by_id=e.asm.ib).apply(null,arguments)},Pi=e._duckdb_web_fs_get_file_info_by_name=function(){return(Pi=e._duckdb_web_fs_get_file_info_by_name=e.asm.jb).apply(null,arguments)},Wi=e._duckdb_web_fs_register_file_url=function(){return(Wi=e._duckdb_web_fs_register_file_url=e.asm.kb).apply(null,arguments)},qi=e._duckdb_web_fs_register_file_buffer=function(){return(qi=e._duckdb_web_fs_register_file_buffer=e.asm.lb).apply(null,arguments)},zi=e._duckdb_web_copy_file_to_buffer=function(){return(zi=e._duckdb_web_copy_file_to_buffer=e.asm.mb).apply(null,arguments)},Xi=e._duckdb_web_copy_file_to_path=function(){return(Xi=e._duckdb_web_copy_file_to_path=e.asm.nb).apply(null,arguments)},ji=e._duckdb_web_get_version=function(){return(ji=e._duckdb_web_get_version=e.asm.ob).apply(null,arguments)},Gi=e._duckdb_web_get_feature_flags=function(){return(Gi=e._duckdb_web_get_feature_flags=e.asm.pb).apply(null,arguments)},Yi=e._duckdb_web_tokenize=function(){return(Yi=e._duckdb_web_tokenize=e.asm.qb).apply(null,arguments)},Ki=e._duckdb_web_udf_scalar_create=function(){return(Ki=e._duckdb_web_udf_scalar_create=e.asm.rb).apply(null,arguments)},$i=e._duckdb_web_prepared_create=function(){return($i=e._duckdb_web_prepared_create=e.asm.sb).apply(null,arguments)},Vi=e._duckdb_web_prepared_close=function(){return(Vi=e._duckdb_web_prepared_close=e.asm.tb).apply(null,arguments)},Ji=e._duckdb_web_prepared_run=function(){return(Ji=e._duckdb_web_prepared_run=e.asm.ub).apply(null,arguments)},Qi=e._duckdb_web_prepared_send=function(){return(Qi=e._duckdb_web_prepared_send=e.asm.vb).apply(null,arguments)},Zi=e._duckdb_web_query_run=function(){return(Zi=e._duckdb_web_query_run=e.asm.wb).apply(null,arguments)},es=e._duckdb_web_pending_query_start=function(){return(es=e._duckdb_web_pending_query_start=e.asm.xb).apply(null,arguments)},ts=e._duckdb_web_pending_query_poll=function(){return(ts=e._duckdb_web_pending_query_poll=e.asm.yb).apply(null,arguments)},rs=e._duckdb_web_pending_query_cancel=function(){return(rs=e._duckdb_web_pending_query_cancel=e.asm.zb).apply(null,arguments)},ns=e._duckdb_web_query_fetch_results=function(){return(ns=e._duckdb_web_query_fetch_results=e.asm.Ab).apply(null,arguments)},is=e._duckdb_web_get_tablenames=function(){return(is=e._duckdb_web_get_tablenames=e.asm.Bb).apply(null,arguments)},Ze=e._duckdb_web_insert_arrow_from_ipc_stream=function(){return(Ze=e._duckdb_web_insert_arrow_from_ipc_stream=e.asm.Cb).apply(null,arguments)},et=e._duckdb_web_insert_csv_from_path=function(){return(et=e._duckdb_web_insert_csv_from_path=e.asm.Db).apply(null,arguments)},Dt=e._duckdb_web_insert_json_from_path=function(){return(Dt=e._duckdb_web_insert_json_from_path=e.asm.Eb).apply(null,arguments)},tt=function(){return(tt=e.asm.__errno_location).apply(null,arguments)},rt=function(){return(rt=e.asm.Fb).apply(null,arguments)},Pe=function(){return(Pe=e.asm.Gb).apply(null,arguments)},We=function(){return(We=e.asm.Hb).apply(null,arguments)},xe=e._malloc=function(){return(xe=e._malloc=e.asm.Ib).apply(null,arguments)},nt=e._free=function(){return(nt=e._free=e.asm.Jb).apply(null,arguments)},Ce=function(){return(Ce=e.asm.Kb).apply(null,arguments)},Tt=function(){return(Tt=e.asm.Lb).apply(null,arguments)},qe=function(){return(qe=e.asm.Mb).apply(null,arguments)},Rt=function(){return(Rt=e.asm.Nb).apply(null,arguments)};e.stackAlloc=qe,e.stackSave=Ce,e.stackRestore=Tt,e.ccall=$t;var s;we=function t(){s||_(),s||(we=t)};function c(){var t=Vt,i=0,a=0;try{var f=t(i,a);return yi(f,!0),f}catch(p){return wi(p)}}function _(){if(le>0||(br(),le>0))return;function t(){s||(s=!0,e.calledRun=!0,!L&&(pr(),hr(),o(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),b&&c(),gr()))}e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1),t()},1)):t()}if(e.preInit)for(typeof e.preInit=="function"&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();var b=!0;return e.noInitialRun&&(b=!1),_(),n.ready}})();typeof sr=="object"&&typeof ks=="object"?ks.exports=vs:typeof define=="function"&&define.amd?define([],function(){return vs}):typeof sr=="object"&&(sr.DuckDB=vs)});var Qs=it((or,Ss)=>{"use strict";var Es=(()=>{var r=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(r=r||__filename),function(n={}){var e=typeof n<"u"?n:{},o,u;e.ready=new Promise((s,c)=>{o=s,u=c});var l=Object.assign({},e),m=[],d="./this.program",h=(s,c)=>{throw c},R=typeof window=="object",A=typeof importScripts=="function",P=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",U="";function N(s){return e.locateFile?e.locateFile(s,U):U+s}var te,se,re,de;if(P){var ce=gs(),ae=ys();A?U=ae.dirname(U)+"/":U=__dirname+"/",te=(s,c)=>(s=_t(s)?new URL(s):ae.normalize(s),ce.readFileSync(s,c?void 0:"utf8")),re=s=>{var c=te(s,!0);return c.buffer||(c=new Uint8Array(c)),c},se=(s,c,_,b=!0)=>{s=_t(s)?new URL(s):ae.normalize(s),ce.readFile(s,b?void 0:"utf8",(t,i)=>{t?_(t):c(b?i.buffer:i)})},!e.thisProgram&&process.argv.length>1&&(d=process.argv[1].replace(/\\/g,"/")),m=process.argv.slice(2),h=(s,c)=>{throw process.exitCode=s,c},e.inspect=()=>"[Emscripten Module object]"}else(R||A)&&(A?U=self.location.href:typeof document<"u"&&document.currentScript&&(U=document.currentScript.src),r&&(U=r),U.indexOf("blob:")!==0?U=U.substr(0,U.replace(/[?#].*/,"").lastIndexOf("/")+1):U="",te=s=>{var c=new XMLHttpRequest;return c.open("GET",s,!1),c.send(null),c.responseText},A&&(re=s=>{var c=new XMLHttpRequest;return c.open("GET",s,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),se=(s,c,_)=>{var b=new XMLHttpRequest;b.open("GET",s,!0),b.responseType="arraybuffer",b.onload=()=>{if(b.status==200||b.status==0&&b.response){c(b.response);return}_()},b.onerror=_,b.send(null)},de=s=>document.title=s);var Ue=e.print||console.log.bind(console),S=e.printErr||console.error.bind(console);Object.assign(e,l),l=null,e.arguments&&(m=e.arguments),e.thisProgram&&(d=e.thisProgram),e.quit&&(h=e.quit);var me;e.wasmBinary&&(me=e.wasmBinary);var Ge=e.noExitRuntime||!0;typeof WebAssembly!="object"&&D("no native wasm support detected");var be,L=!1,ne;function oe(s,c){s||D(c)}var Q,z,J,Y,g,I,cr,lr;function ot(){var s=be.buffer;e.HEAP8=Q=new Int8Array(s),e.HEAP16=J=new Int16Array(s),e.HEAP32=g=new Int32Array(s),e.HEAPU8=z=new Uint8Array(s),e.HEAPU16=Y=new Uint16Array(s),e.HEAPU32=I=new Uint32Array(s),e.HEAPF32=cr=new Float32Array(s),e.HEAPF64=lr=new Float64Array(s)}var fr,ut=[],ct=[],_r=[],lt=[],At=!1,dr=0;function mr(){return Ge||dr>0}function br(){if(e.preRun)for(typeof e.preRun=="function"&&(e.preRun=[e.preRun]);e.preRun.length;)yr(e.preRun.shift());De(ut)}function pr(){At=!0,De(ct)}function hr(){De(_r)}function gr(){if(e.postRun)for(typeof e.postRun=="function"&&(e.postRun=[e.postRun]);e.postRun.length;)vr(e.postRun.shift());De(lt)}function yr(s){ut.unshift(s)}function wr(s){ct.unshift(s)}function vr(s){lt.unshift(s)}var le=0,Ie=null,we=null;function kr(s){le++,e.monitorRunDependencies&&e.monitorRunDependencies(le)}function Er(s){if(le--,e.monitorRunDependencies&&e.monitorRunDependencies(le),le==0&&(Ie!==null&&(clearInterval(Ie),Ie=null),we)){var c=we;we=null,c()}}function D(s){e.onAbort&&e.onAbort(s),s="Aborted("+s+")",S(s),L=!0,ne=1,s+=". Build with -sASSERTIONS for more info.",At&&Pe();var c=new WebAssembly.RuntimeError(s);throw u(c),c}var Sr="data:application/octet-stream;base64,";function ft(s){return s.startsWith(Sr)}function _t(s){return s.startsWith("file://")}var pe;pe="./duckdb-eh.wasm",ft(pe)||(pe=N(pe));function dt(s){try{if(s==pe&&me)return new Uint8Array(me);if(re)return re(s);throw"both async and sync fetching of the wasm failed"}catch(c){D(c)}}function Dr(s){return!me&&(R||A)&&typeof fetch=="function"?fetch(s,{credentials:"same-origin"}).then(c=>{if(!c.ok)throw"failed to load wasm binary file at '"+s+"'";return c.arrayBuffer()}).catch(()=>dt(s)):Promise.resolve().then(()=>dt(s))}function mt(s,c,_){return Dr(s).then(b=>WebAssembly.instantiate(b,c)).then(b=>b).then(_,b=>{S("failed to asynchronously prepare wasm: "+b),D(b)})}function Tr(s,c,_,b){return!s&&typeof WebAssembly.instantiateStreaming=="function"&&!ft(c)&&!P&&typeof fetch=="function"?fetch(c,{credentials:"same-origin"}).then(t=>{var i=WebAssembly.instantiateStreaming(t,_);return i.then(b,function(a){return S("wasm streaming compile failed: "+a),S("falling back to ArrayBuffer instantiation"),mt(c,_,b)})}):mt(c,_,b)}function Rr(){var s={a:wi};function c(b,t){var i=b.exports;return e.asm=i,be=e.asm.Qa,ot(),fr=e.asm.Ta,wr(e.asm.Ra),Er("wasm-instantiate"),i}kr("wasm-instantiate");function _(b){c(b.instance)}if(e.instantiateWasm)try{return e.instantiateWasm(s,c)}catch(b){S("Module.instantiateWasm callback failed with error: "+b),u(b)}return Tr(me,pe,s,_).catch(u),{}}var ee,he;function bt(s){this.name="ExitStatus",this.message="Program terminated with exit(".concat(s,")"),this.status=s}function De(s){for(;s.length>0;)s.shift()(e)}function Ar(){S("missing function: XML_GetBuffer"),D(-1)}function Fr(){S("missing function: XML_GetErrorCode"),D(-1)}function xr(){S("missing function: XML_Parse"),D(-1)}function Cr(){S("missing function: XML_ParseBuffer"),D(-1)}function Mr(){S("missing function: XML_ParserCreate"),D(-1)}function Ur(){S("missing function: XML_ParserFree"),D(-1)}function Ir(){S("missing function: XML_ResumeParser"),D(-1)}function Hr(){S("missing function: XML_SetCharacterDataHandler"),D(-1)}function Br(){S("missing function: XML_SetElementHandler"),D(-1)}function Nr(){S("missing function: XML_SetUserData"),D(-1)}function Lr(){S("missing function: XML_StopParser"),D(-1)}var Ft="To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html";function xt(s,c,_){D(Ft)}var Ct=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function Mt(s,c,_){c>>>=0;for(var b=c+_,t=c;s[t]&&!(t>=b);)++t;if(t-c>16&&s.buffer&&Ct)return Ct.decode(s.subarray(c,t));for(var i="";c<t;){var a=s[c++];if(!(a&128)){i+=String.fromCharCode(a);continue}var f=s[c++]&63;if((a&224)==192){i+=String.fromCharCode((a&31)<<6|f);continue}var p=s[c++]&63;if((a&240)==224?a=(a&15)<<12|f<<6|p:a=(a&7)<<18|f<<12|p<<6|s[c++]&63,a<65536)i+=String.fromCharCode(a);else{var w=a-65536;i+=String.fromCharCode(55296|w>>10,56320|w&1023)}}return i}function Te(s,c){return s>>>=0,s?Mt(z,s,c):""}var Re={varargs:void 0,get:function(){Re.varargs+=4;var s=g[Re.varargs-4>>>2];return s},getStr:function(s){var c=Te(s);return c}};function Ut(s,c,_,b,t){for(var i=0,a=c?g[c>>>2]:0,f=c?g[c+4>>>2]:0,p=_?g[_>>>2]:0,w=_?g[_+4>>>2]:0,y=b?g[b>>>2]:0,E=b?g[b+4>>>2]:0,T=0,M=0,x=0,X=0,H=0,ie=0,v=(c?g[c>>>2]:0)|(_?g[_>>>2]:0)|(b?g[b>>>2]:0),F=(c?g[c+4>>>2]:0)|(_?g[_+4>>>2]:0)|(b?g[b+4>>>2]:0),O=function($,ue,ze,Xe){return $<32?ue&Xe:ze&Xe},W=0;W<s;W++){var k=1<<W%32;if(O(W,v,F,k)){var C=Re.getStreamFromFD(W),j=Re.DEFAULT_POLLMASK;C.stream_ops.poll&&(j=C.stream_ops.poll(C)),j&1&&O(W,a,f,k)&&(W<32?T=T|k:M=M|k,i++),j&4&&O(W,p,w,k)&&(W<32?x=x|k:X=X|k,i++),j&2&&O(W,y,E,k)&&(W<32?H=H|k:ie=ie|k,i++)}}return c&&(g[c>>>2]=T,g[c+4>>>2]=M),_&&(g[_>>>2]=x,g[_+4>>>2]=X),b&&(g[b>>>2]=H,g[b+4>>>2]=ie),i}function It(){S("missing function: $SOCKFS"),D(-1)}function Ae(){S("missing function: $FS"),D(-1)}function ge(s){var c=It.getSocket(s);if(!c)throw new Ae.ErrnoError(8);return c}function pt(s){return(s&255)+"."+(s>>8&255)+"."+(s>>16&255)+"."+(s>>24&255)}function Ht(s){var c="",_=0,b=0,t=0,i=0,a=0,f=0,p=[s[0]&65535,s[0]>>16,s[1]&65535,s[1]>>16,s[2]&65535,s[2]>>16,s[3]&65535,s[3]>>16],w=!0,y="";for(f=0;f<5;f++)if(p[f]!==0){w=!1;break}if(w){if(y=pt(p[6]|p[7]<<16),p[5]===-1)return c="::ffff:",c+=y,c;if(p[5]===0)return c="::",y==="0.0.0.0"&&(y=""),y==="0.0.0.1"&&(y="1"),c+=y,c}for(_=0;_<8;_++)p[_]===0&&(_-t>1&&(a=0),t=_,a++),a>b&&(b=a,i=_-b+1);for(_=0;_<8;_++){if(b>1&&p[_]===0&&_>=i&&_<i+b){_===i&&(c+=":",i===0&&(c+=":"));continue}c+=Number(Dt(p[_]&65535)).toString(16),c+=_<7?":":""}return c}function ht(s,c){var _=J[s>>>1],b=Dt(Y[s+2>>>1]),t;switch(_){case 2:if(c!==16)return{errno:28};t=g[s+4>>>2],t=pt(t);break;case 10:if(c!==28)return{errno:28};t=[g[s+8>>>2],g[s+12>>>2],g[s+16>>>2],g[s+20>>>2]],t=Ht(t);break;default:return{errno:5}}return{family:_,addr:t,port:b}}function ve(s){for(var c=s.split("."),_=0;_<4;_++){var b=Number(c[_]);if(isNaN(b))return null;c[_]=b}return(c[0]|c[1]<<8|c[2]<<16|c[3]<<24)>>>0}function Fe(s){return parseInt(s)}function Ye(s){var c,_,b,t,i=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i,a=[];if(!i.test(s))return null;if(s==="::")return[0,0,0,0,0,0,0,0];for(s.startsWith("::")?s=s.replace("::","Z:"):s=s.replace("::",":Z:"),s.indexOf(".")>0?(s=s.replace(new RegExp("[.]","g"),":"),c=s.split(":"),c[c.length-4]=Fe(c[c.length-4])+Fe(c[c.length-3])*256,c[c.length-3]=Fe(c[c.length-2])+Fe(c[c.length-1])*256,c=c.slice(0,c.length-2)):c=s.split(":"),b=0,t=0,_=0;_<c.length;_++)if(typeof c[_]=="string")if(c[_]==="Z"){for(t=0;t<8-c.length+1;t++)a[_+t]=0;b=t-1}else a[_+b]=et(parseInt(c[_],16));else a[_+b]=c[_];return[a[1]<<16|a[0],a[3]<<16|a[2],a[5]<<16|a[4],a[7]<<16|a[6]]}var fe={address_map:{id:1,addrs:{},names:{}},lookup_name:function(s){var c=ve(s);if(c!==null||(c=Ye(s),c!==null))return s;var _;if(fe.address_map.addrs[s])_=fe.address_map.addrs[s];else{var b=fe.address_map.id++;oe(b<65535,"exceeded max address mappings of 65535"),_="172.29."+(b&255)+"."+(b&65280),fe.address_map.names[_]=s,fe.address_map.addrs[s]=_}return _},lookup_addr:function(s){return fe.address_map.names[s]?fe.address_map.names[s]:null}};function He(s,c,_){if(_&&s===0)return null;var b=ht(s,c);if(b.errno)throw new Ae.ErrnoError(b.errno);return b.addr=fe.lookup_addr(b.addr)||b.addr,b}function Ke(s,c,_,b,t,i){var a=ge(s),f=He(c,_);return a.sock_ops.bind(a,f.addr,f.port),0}function gt(s,c,_,b,t,i){var a=ge(s),f=He(c,_);return a.sock_ops.connect(a,f.addr,f.port),0}function _e(s,c,_,b){}function Bt(s,c,_){return Re.varargs=_,0}function Or(s,c){}function Pr(s,c,_){}function Nt(s,c,_,b){if(_>>>=0,!(b>0))return 0;for(var t=_,i=_+b-1,a=0;a<s.length;++a){var f=s.charCodeAt(a);if(f>=55296&&f<=57343){var p=s.charCodeAt(++a);f=65536+((f&1023)<<10)|p&1023}if(f<=127){if(_>=i)break;c[_++>>>0]=f}else if(f<=2047){if(_+1>=i)break;c[_++>>>0]=192|f>>6,c[_++>>>0]=128|f&63}else if(f<=65535){if(_+2>=i)break;c[_++>>>0]=224|f>>12,c[_++>>>0]=128|f>>6&63,c[_++>>>0]=128|f&63}else{if(_+3>=i)break;c[_++>>>0]=240|f>>18,c[_++>>>0]=128|f>>12&63,c[_++>>>0]=128|f>>6&63,c[_++>>>0]=128|f&63}}return c[_>>>0]=0,_-t}function $e(s,c,_){return Nt(s,z,c,_)}function Wr(s,c,_){}function Lt(s,c){return z.fill(0,s,s+c),s}function Ve(s,c,_,b,t){switch(c){case 2:_=ve(_),Lt(s,16),t&&(g[t>>>2]=16),J[s>>>1]=c,g[s+4>>>2]=_,J[s+2>>>1]=et(b);break;case 10:_=Ye(_),Lt(s,28),t&&(g[t>>>2]=28),g[s>>>2]=c,g[s+8>>>2]=_[0],g[s+12>>>2]=_[1],g[s+16>>>2]=_[2],g[s+20>>>2]=_[3],J[s+2>>>1]=et(b);break;default:return 5}return 0}function Je(s,c,_,b,t,i){var a=ge(s);if(!a.daddr)return-53;var f=Ve(c,a.family,fe.lookup_name(a.daddr),a.dport,_);return 0}function qr(s,c,_,b,t,i){var a=ge(s);return c===1&&_===4?(g[b>>>2]=a.error,g[t>>>2]=4,a.error=null,0):-50}function Ot(s,c,_){return Re.varargs=_,0}function yt(s,c){}function zr(s,c,_){}function Xr(s,c,_,b){}function jr(s,c,_,b){Re.varargs=b}function Gr(s,c,_,b,t,i){var a=ge(s),f=a.sock_ops.recvmsg(a,_);if(!f)return 0;if(t)var p=Ve(t,a.family,fe.lookup_name(f.addr),f.port,i);return z.set(f.buffer,c>>>0),f.buffer.byteLength}function Yr(s,c,_,b){}function Kr(s){}function $r(s,c,_,b,t,i){}function Vr(s,c,_){}function Jr(s,c){}function Qr(s,c,_){}var Zr=!0;function en(){return Zr}function tn(s){return I[s>>>2]+g[s+4>>>2]*4294967296}function Be(s){return s%4===0&&(s%100!==0||s%400===0)}var rn=[0,31,60,91,121,152,182,213,244,274,305,335],nn=[0,31,59,90,120,151,181,212,243,273,304,334];function sn(s){var c=Be(s.getFullYear()),_=c?rn:nn,b=_[s.getMonth()]+s.getDate()-1;return b}function Ne(s,c){var _=new Date(tn(s)*1e3);g[c>>>2]=_.getSeconds(),g[c+4>>>2]=_.getMinutes(),g[c+8>>>2]=_.getHours(),g[c+12>>>2]=_.getDate(),g[c+16>>>2]=_.getMonth(),g[c+20>>>2]=_.getFullYear()-1900,g[c+24>>>2]=_.getDay();var b=sn(_)|0;g[c+28>>>2]=b,g[c+36>>>2]=-(_.getTimezoneOffset()*60);var t=new Date(_.getFullYear(),0,1),i=new Date(_.getFullYear(),6,1).getTimezoneOffset(),a=t.getTimezoneOffset(),f=(i!=a&&_.getTimezoneOffset()==Math.min(a,i))|0;g[c+32>>>2]=f}function wt(s){for(var c=0,_=0;_<s.length;++_){var b=s.charCodeAt(_);b<=127?c++:b<=2047?c+=2:b>=55296&&b<=57343?(c+=4,++_):c+=3}return c}function Pt(s){var c=wt(s)+1,_=tt(c);return _&&$e(s,_,c),_}function an(s,c,_){var b=new Date().getFullYear(),t=new Date(b,0,1),i=new Date(b,6,1),a=t.getTimezoneOffset(),f=i.getTimezoneOffset(),p=Math.max(a,f);I[s>>>2]=p*60,g[c>>>2]=+(a!=f);function w(x){var X=x.toTimeString().match(/\(([A-Za-z ]+)\)$/);return X?X[1]:"GMT"}var y=w(t),E=w(i),T=Pt(y),M=Pt(E);f<a?(I[_>>>2]=T,I[_+4>>>2]=M):(I[_>>>2]=M,I[_+4>>>2]=T)}function on(){D("")}function vt(s,c){D(Ft)}function Wt(s,c){return globalThis.DUCKDB_RUNTIME.createDirectory(e,s,c)}function un(s,c){return globalThis.DUCKDB_RUNTIME.checkDirectory(e,s,c)}function cn(s,c){return globalThis.DUCKDB_RUNTIME.listDirectoryEntries(e,s,c)}function ln(s,c){return globalThis.DUCKDB_RUNTIME.removeDirectory(e,s,c)}function fn(s){return globalThis.DUCKDB_RUNTIME.closeFile(e,s)}function _n(s,c){return globalThis.DUCKDB_RUNTIME.checkFile(e,s,c)}function dn(s){return globalThis.DUCKDB_RUNTIME.getLastFileModificationTime(e,s)}function mn(s,c,_,b){return globalThis.DUCKDB_RUNTIME.moveFile(e,s,c,_,b)}function bn(s,c){return globalThis.DUCKDB_RUNTIME.openFile(e,s,c)}function pn(s,c,_,b){return globalThis.DUCKDB_RUNTIME.readFile(e,s,c,_,b)}function hn(s,c){return globalThis.DUCKDB_RUNTIME.truncateFile(e,s,c)}function gn(s,c,_,b){return globalThis.DUCKDB_RUNTIME.writeFile(e,s,c,_,b)}function yn(s){return globalThis.DUCKDB_RUNTIME.getDefaultDataProtocol(s)}function wn(s,c){return globalThis.DUCKDB_RUNTIME.glob(e,s,c)}function vn(s){return globalThis.DUCKDB_RUNTIME.testPlatformFeature(e,s)}function kn(s,c,_,b,t,i){return globalThis.DUCKDB_RUNTIME.callScalarUDF(e,s,c,_,b,t,i)}function En(){return Date.now()}function qt(){return 4294901760}function Sn(){return qt()}var zt;P&&(global.performance=ws().performance),zt=()=>performance.now();function Dn(s,c,_){z.copyWithin(s>>>0,c>>>0,c+_>>>0)}function Xt(s){var c=be.buffer,_=s-c.byteLength+65535>>>16;try{return be.grow(_),ot(),1}catch(b){}}function Tn(s){var c=z.length;s=s>>>0;var _=qt();if(s>_)return!1;for(var b=(p,w)=>p+(w-p%w)%w,t=1;t<=4;t*=2){var i=c*(1+.2/t);i=Math.min(i,s+100663296);var a=Math.min(_,b(Math.max(s,i),65536)),f=Xt(a);if(f)return!0}return!1}var Qe={};function Rn(){return d||"./this.program"}function Le(){if(!Le.strings){var s=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",c={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:s,_:Rn()};for(var _ in Qe)Qe[_]===void 0?delete c[_]:c[_]=Qe[_];var b=[];for(var _ in c)b.push("".concat(_,"=").concat(c[_]));Le.strings=b}return Le.strings}function An(s,c){for(var _=0;_<s.length;++_)Q[c++>>>0]=s.charCodeAt(_);Q[c>>>0]=0}function kt(s,c){var _=0;return Le().forEach(function(b,t){var i=c+_;I[s+t*4>>>2]=i,An(b,i),_+=b.length+1}),0}function Fn(s,c){var _=Le();I[s>>>2]=_.length;var b=0;return _.forEach(function(t){b+=t.length+1}),I[c>>>2]=b,0}function Oe(s){return 52}function xn(s,c){var _=0,b=0,t=0;{var i=2;s==0?_=2:(s==1||s==2)&&(_=64),t=1}return Q[c>>>0]=i,J[c+2>>>1]=t,he=[_>>>0,(ee=_,+Math.abs(ee)>=1?ee>0?+Math.floor(ee/4294967296)>>>0:~~+Math.ceil((ee-+(~~ee>>>0))/4294967296)>>>0:0)],g[c+8>>>2]=he[0],g[c+12>>>2]=he[1],he=[b>>>0,(ee=b,+Math.abs(ee)>=1?ee>0?+Math.floor(ee/4294967296)>>>0:~~+Math.ceil((ee-+(~~ee>>>0))/4294967296)>>>0:0)],g[c+16>>>2]=he[0],g[c+20>>>2]=he[1],0}function Cn(s,c,_,b,t,i){return 52}function Mn(s,c,_,b,t,i){return 52}function Un(s,c,_,b){return 52}function In(s,c,_,b,t){return 70}function Hn(s){return 52}var Bn=[null,[],[]];function Nn(s,c){var _=Bn[s];c===0||c===10?((s===1?Ue:S)(Mt(_,0)),_.length=0):_.push(c)}function Ln(s,c,_,b){for(var t=0,i=0;i<_;i++){var a=I[c>>>2],f=I[c+4>>>2];c+=8;for(var p=0;p<f;p++)Nn(s,z[a+p>>>0]);t+=f}return I[b>>>2]=t,0}function On(s,c,_,b){var t=0,i=0,a=0,f=0,p=0,w=0,y;function E(T,M,x,X,H,ie){var v,F,O,W;return F=T===10?28:16,H=T===10?Ht(H):pt(H),v=tt(F),W=Ve(v,T,H,ie),oe(!W),O=tt(32),g[O+4>>>2]=T,g[O+8>>>2]=M,g[O+12>>>2]=x,I[O+24>>>2]=X,I[O+20>>>2]=v,T===10?g[O+16>>>2]=28:g[O+16>>>2]=16,g[O+28>>>2]=0,O}if(_&&(a=g[_>>>2],f=g[_+4>>>2],p=g[_+8>>>2],w=g[_+12>>>2]),p&&!w&&(w=p===2?17:6),!p&&w&&(p=w===17?2:1),w===0&&(w=6),p===0&&(p=1),!s&&!c)return-2;if(a&-1088||_!==0&&g[_>>>2]&2&&!s)return-1;if(a&32)return-2;if(p!==0&&p!==1&&p!==2)return-7;if(f!==0&&f!==2&&f!==10)return-6;if(c&&(c=Te(c),i=parseInt(c,10),isNaN(i)))return a&1024?-2:-8;if(!s)return f===0&&(f=2),a&1||(f===2?t=Ze(2130706433):t=[0,0,0,1]),y=E(f,p,w,null,t,i),I[b>>>2]=y,0;if(s=Te(s),t=ve(s),t!==null)if(f===0||f===2)f=2;else if(f===10&&a&8)t=[0,0,Ze(65535),t],f=10;else return-2;else if(t=Ye(s),t!==null)if(f===0||f===10)f=10;else return-2;return t!=null?(y=E(f,p,w,s,t,i),I[b>>>2]=y,0):a&4?-2:(s=fe.lookup_name(s),t=ve(s),f===0?f=2:f===10&&(t=[0,0,Ze(65535),t]),y=E(f,p,w,null,t,i),I[b>>>2]=y,0)}function Pn(){if(typeof crypto=="object"&&typeof crypto.getRandomValues=="function")return b=>crypto.getRandomValues(b);if(P)try{var s=Fs("crypto"),c=s.randomFillSync;if(c)return b=>s.randomFillSync(b);var _=s.randomBytes;return b=>(b.set(_(b.byteLength)),b)}catch(b){}D("initRandomDevice")}function jt(s){return(jt=Pn())(s)}function Wn(s,c){return jt(z.subarray(s>>>0,s+c>>>0)),0}function qn(s,c,_,b,t,i,a){var f=ht(s,c);if(f.errno)return-6;var p=f.port,w=f.addr,y=!1;if(_&&b){var E;if(a&1||!(E=fe.lookup_addr(w))){if(a&8)return-2}else w=E;var T=$e(w,_,b);T+1>=b&&(y=!0)}if(t&&i){p=""+p;var T=$e(p,t,i);T+1>=i&&(y=!0)}return y?-12:0}function zn(s,c){for(var _=0,b=0;b<=c;_+=s[b++]);return _}var Et=[31,29,31,30,31,30,31,31,30,31,30,31],Gt=[31,28,31,30,31,30,31,31,30,31,30,31];function Xn(s,c){for(var _=new Date(s.getTime());c>0;){var b=Be(_.getFullYear()),t=_.getMonth(),i=(b?Et:Gt)[t];if(c>i-_.getDate())c-=i-_.getDate()+1,_.setDate(1),t<11?_.setMonth(t+1):(_.setMonth(0),_.setFullYear(_.getFullYear()+1));else return _.setDate(_.getDate()+c),_}return _}function jn(s,c,_){var b=_>0?_:wt(s)+1,t=new Array(b),i=Nt(s,t,0,t.length);return c&&(t.length=i),t}function St(s,c){Q.set(s,c>>>0)}function Yt(s,c,_,b){var t=g[b+40>>>2],i={tm_sec:g[b>>>2],tm_min:g[b+4>>>2],tm_hour:g[b+8>>>2],tm_mday:g[b+12>>>2],tm_mon:g[b+16>>>2],tm_year:g[b+20>>>2],tm_wday:g[b+24>>>2],tm_yday:g[b+28>>>2],tm_isdst:g[b+32>>>2],tm_gmtoff:g[b+36>>>2],tm_zone:t?Te(t):""},a=Te(_),f={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var p in f)a=a.replace(new RegExp(p,"g"),f[p]);var w=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],y=["January","February","March","April","May","June","July","August","September","October","November","December"];function E(v,F,O){for(var W=typeof v=="number"?v.toString():v||"";W.length<F;)W=O[0]+W;return W}function T(v,F){return E(v,F,"0")}function M(v,F){function O(k){return k<0?-1:k>0?1:0}var W;return(W=O(v.getFullYear()-F.getFullYear()))===0&&(W=O(v.getMonth()-F.getMonth()))===0&&(W=O(v.getDate()-F.getDate())),W}function x(v){switch(v.getDay()){case 0:return new Date(v.getFullYear()-1,11,29);case 1:return v;case 2:return new Date(v.getFullYear(),0,3);case 3:return new Date(v.getFullYear(),0,2);case 4:return new Date(v.getFullYear(),0,1);case 5:return new Date(v.getFullYear()-1,11,31);case 6:return new Date(v.getFullYear()-1,11,30)}}function X(v){var F=Xn(new Date(v.tm_year+1900,0,1),v.tm_yday),O=new Date(F.getFullYear(),0,4),W=new Date(F.getFullYear()+1,0,4),k=x(O),C=x(W);return M(k,F)<=0?M(C,F)<=0?F.getFullYear()+1:F.getFullYear():F.getFullYear()-1}var H={"%a":function(v){return w[v.tm_wday].substring(0,3)},"%A":function(v){return w[v.tm_wday]},"%b":function(v){return y[v.tm_mon].substring(0,3)},"%B":function(v){return y[v.tm_mon]},"%C":function(v){var F=v.tm_year+1900;return T(F/100|0,2)},"%d":function(v){return T(v.tm_mday,2)},"%e":function(v){return E(v.tm_mday,2," ")},"%g":function(v){return X(v).toString().substring(2)},"%G":function(v){return X(v)},"%H":function(v){return T(v.tm_hour,2)},"%I":function(v){var F=v.tm_hour;return F==0?F=12:F>12&&(F-=12),T(F,2)},"%j":function(v){return T(v.tm_mday+zn(Be(v.tm_year+1900)?Et:Gt,v.tm_mon-1),3)},"%m":function(v){return T(v.tm_mon+1,2)},"%M":function(v){return T(v.tm_min,2)},"%n":function(){return"\n"},"%p":function(v){return v.tm_hour>=0&&v.tm_hour<12?"AM":"PM"},"%S":function(v){return T(v.tm_sec,2)},"%t":function(){return"	"},"%u":function(v){return v.tm_wday||7},"%U":function(v){var F=v.tm_yday+7-v.tm_wday;return T(Math.floor(F/7),2)},"%V":function(v){var F=Math.floor((v.tm_yday+7-(v.tm_wday+6)%7)/7);if((v.tm_wday+371-v.tm_yday-2)%7<=2&&F++,F){if(F==53){var W=(v.tm_wday+371-v.tm_yday)%7;W!=4&&(W!=3||!Be(v.tm_year))&&(F=1)}}else{F=52;var O=(v.tm_wday+7-v.tm_yday-1)%7;(O==4||O==5&&Be(v.tm_year%400-1))&&F++}return T(F,2)},"%w":function(v){return v.tm_wday},"%W":function(v){var F=v.tm_yday+7-(v.tm_wday+6)%7;return T(Math.floor(F/7),2)},"%y":function(v){return(v.tm_year+1900).toString().substring(2)},"%Y":function(v){return v.tm_year+1900},"%z":function(v){var F=v.tm_gmtoff,O=F>=0;return F=Math.abs(F)/60,F=F/60*100+F%60,(O?"+":"-")+("0000"+F).slice(-4)},"%Z":function(v){return v.tm_zone},"%%":function(){return"%"}};a=a.replace(/%%/g,"\0\0");for(var p in H)a.includes(p)&&(a=a.replace(new RegExp(p,"g"),H[p](i)));a=a.replace(/\0\0/g,"%");var ie=jn(a,!1);return ie.length>c?0:(St(ie,s),ie.length-1)}function Gn(s,c,_,b,t){return Yt(s,c,_,b)}function Yn(){S("missing function: ucnv_close_64"),D(-1)}function Kt(){S("missing function: ucnv_convertEx_64"),D(-1)}function Kn(){S("missing function: ucnv_open_64"),D(-1)}function $n(){S("missing function: ucnv_toAlgorithmic_64"),D(-1)}function Vn(){S("missing function: ucsdet_close_64"),D(-1)}function Jn(){S("missing function: ucsdet_detect_64"),D(-1)}function Qn(){S("missing function: ucsdet_getConfidence_64"),D(-1)}function Zn(){S("missing function: ucsdet_getName_64"),D(-1)}function ei(){S("missing function: ucsdet_open_64"),D(-1)}function ti(){S("missing function: ucsdet_setText_64"),D(-1)}function ri(){S("missing function: unzClose"),D(-1)}function ni(){S("missing function: unzCloseCurrentFile"),D(-1)}function ii(){S("missing function: unzGetCurrentFileInfo"),D(-1)}function si(){S("missing function: unzGetCurrentFileInfo64"),D(-1)}function ai(){S("missing function: unzGetGlobalInfo"),D(-1)}function oi(){S("missing function: unzGoToFirstFile"),D(-1)}function ui(){S("missing function: unzGoToNextFile"),D(-1)}function ci(){S("missing function: unzLocateFile"),D(-1)}function li(){S("missing function: unzOpen"),D(-1)}function fi(){S("missing function: unzOpen2"),D(-1)}function _i(){S("missing function: unzOpenCurrentFile"),D(-1)}function di(){S("missing function: unzReadCurrentFile"),D(-1)}function mi(s){ne=s,mr()||(e.onExit&&e.onExit(s),L=!0),h(s,new bt(s))}function bi(s,c){ne=s,mi(s)}function pi(s){if(s instanceof bt||s=="unwind")return ne;h(1,s)}function hi(s){var c=e["_"+s];return c}function gi(s){var c=wt(s)+1,_=nt(c);return $e(s,_,c),_}function yi(s,c,_,b,t){var i={string:x=>{var X=0;return x!=null&&x!==0&&(X=gi(x)),X},array:x=>{var X=nt(x.length);return St(x,X),X}};function a(x){return c==="string"?Te(x):c==="boolean"?!!x:x}var f=hi(s),p=[],w=0;if(b)for(var y=0;y<b.length;y++){var E=i[_[y]];E?(w===0&&(w=We()),p[y]=E(b[y])):p[y]=b[y]}var T=f.apply(null,p);function M(x){return w!==0&&xe(w),a(x)}return T=M(T),T}var wi={f:Ar,V:Fr,W:xr,m:Cr,o:Mr,b:Ur,B:Ir,d:Hr,a:Br,n:Nr,i:Lr,La:xt,Ga:Ut,Ka:Ke,Ja:gt,Ca:_e,c:Bt,Ba:Or,O:Pr,wa:Wr,Ea:Je,Fa:qr,L:Ot,ya:yt,xa:zr,za:Xr,M:jr,Ha:Gr,ua:Yr,G:Kr,Ia:$r,I:Vr,Aa:Jr,H:Qr,S:en,ea:Ne,fa:an,j:on,Ma:vt,ma:Wt,na:un,ja:cn,ka:ln,E:fn,ha:_n,N:dn,ia:mn,pa:bn,p:pn,oa:hn,F:gn,qa:yn,ga:wn,D:vn,ra:kn,A:En,X:Sn,g:zt,Oa:Dn,Pa:Tn,la:kt,ta:Fn,k:Oe,Na:xn,Q:Cn,P:Mn,K:Un,R:In,va:Hn,v:Ln,J:On,sa:Wn,Da:qn,ba:Gn,e:Yn,Y:Kt,u:Kn,Z:$n,C:Vn,aa:Jn,$:Qn,_:Zn,da:ei,ca:ti,h:ri,t:ni,y:ii,q:si,U:ai,z:oi,x:ui,s:ci,w:li,T:fi,r:_i,l:di},Ds=Rr(),vi=function(){return(vi=e.asm.Ra).apply(null,arguments)},$t=e._main=function(){return($t=e._main=e.asm.Sa).apply(null,arguments)},ki=e._duckdb_web_fs_glob_add_path=function(){return(ki=e._duckdb_web_fs_glob_add_path=e.asm.Ua).apply(null,arguments)},Ts=e._duckdb_web_clear_response=function(){return(Ts=e._duckdb_web_clear_response=e.asm.Va).apply(null,arguments)},Ei=e._duckdb_web_fail_with=function(){return(Ei=e._duckdb_web_fail_with=e.asm.Wa).apply(null,arguments)},Vt=e._duckdb_web_reset=function(){return(Vt=e._duckdb_web_reset=e.asm.Xa).apply(null,arguments)},Si=e._duckdb_web_connect=function(){return(Si=e._duckdb_web_connect=e.asm.Ya).apply(null,arguments)},Di=e._duckdb_web_disconnect=function(){return(Di=e._duckdb_web_disconnect=e.asm.Za).apply(null,arguments)},Ti=e._duckdb_web_flush_files=function(){return(Ti=e._duckdb_web_flush_files=e.asm._a).apply(null,arguments)},Ri=e._duckdb_web_flush_file=function(){return(Ri=e._duckdb_web_flush_file=e.asm.$a).apply(null,arguments)},Ai=e._duckdb_web_open=function(){return(Ai=e._duckdb_web_open=e.asm.ab).apply(null,arguments)},Fi=e._duckdb_web_get_global_file_info=function(){return(Fi=e._duckdb_web_get_global_file_info=e.asm.bb).apply(null,arguments)},xi=e._duckdb_web_collect_file_stats=function(){return(xi=e._duckdb_web_collect_file_stats=e.asm.cb).apply(null,arguments)},Ci=e._duckdb_web_export_file_stats=function(){return(Ci=e._duckdb_web_export_file_stats=e.asm.db).apply(null,arguments)},Mi=e._duckdb_web_fs_drop_file=function(){return(Mi=e._duckdb_web_fs_drop_file=e.asm.eb).apply(null,arguments)},Ui=e._duckdb_web_fs_drop_files=function(){return(Ui=e._duckdb_web_fs_drop_files=e.asm.fb).apply(null,arguments)},Ii=e._duckdb_web_fs_glob_file_infos=function(){return(Ii=e._duckdb_web_fs_glob_file_infos=e.asm.gb).apply(null,arguments)},Hi=e._duckdb_web_fs_get_file_info_by_id=function(){return(Hi=e._duckdb_web_fs_get_file_info_by_id=e.asm.hb).apply(null,arguments)},Bi=e._duckdb_web_fs_get_file_info_by_name=function(){return(Bi=e._duckdb_web_fs_get_file_info_by_name=e.asm.ib).apply(null,arguments)},Ni=e._duckdb_web_fs_register_file_url=function(){return(Ni=e._duckdb_web_fs_register_file_url=e.asm.jb).apply(null,arguments)},Li=e._duckdb_web_fs_register_file_buffer=function(){return(Li=e._duckdb_web_fs_register_file_buffer=e.asm.kb).apply(null,arguments)},Oi=e._duckdb_web_copy_file_to_buffer=function(){return(Oi=e._duckdb_web_copy_file_to_buffer=e.asm.lb).apply(null,arguments)},Pi=e._duckdb_web_copy_file_to_path=function(){return(Pi=e._duckdb_web_copy_file_to_path=e.asm.mb).apply(null,arguments)},Wi=e._duckdb_web_get_version=function(){return(Wi=e._duckdb_web_get_version=e.asm.nb).apply(null,arguments)},qi=e._duckdb_web_get_feature_flags=function(){return(qi=e._duckdb_web_get_feature_flags=e.asm.ob).apply(null,arguments)},zi=e._duckdb_web_tokenize=function(){return(zi=e._duckdb_web_tokenize=e.asm.pb).apply(null,arguments)},Xi=e._duckdb_web_udf_scalar_create=function(){return(Xi=e._duckdb_web_udf_scalar_create=e.asm.qb).apply(null,arguments)},ji=e._duckdb_web_prepared_create=function(){return(ji=e._duckdb_web_prepared_create=e.asm.rb).apply(null,arguments)},Gi=e._duckdb_web_prepared_close=function(){return(Gi=e._duckdb_web_prepared_close=e.asm.sb).apply(null,arguments)},Yi=e._duckdb_web_prepared_run=function(){return(Yi=e._duckdb_web_prepared_run=e.asm.tb).apply(null,arguments)},Ki=e._duckdb_web_prepared_send=function(){return(Ki=e._duckdb_web_prepared_send=e.asm.ub).apply(null,arguments)},$i=e._duckdb_web_query_run=function(){return($i=e._duckdb_web_query_run=e.asm.vb).apply(null,arguments)},Vi=e._duckdb_web_pending_query_start=function(){return(Vi=e._duckdb_web_pending_query_start=e.asm.wb).apply(null,arguments)},Ji=e._duckdb_web_pending_query_poll=function(){return(Ji=e._duckdb_web_pending_query_poll=e.asm.xb).apply(null,arguments)},Qi=e._duckdb_web_pending_query_cancel=function(){return(Qi=e._duckdb_web_pending_query_cancel=e.asm.yb).apply(null,arguments)},Zi=e._duckdb_web_query_fetch_results=function(){return(Zi=e._duckdb_web_query_fetch_results=e.asm.zb).apply(null,arguments)},es=e._duckdb_web_get_tablenames=function(){return(es=e._duckdb_web_get_tablenames=e.asm.Ab).apply(null,arguments)},ts=e._duckdb_web_insert_arrow_from_ipc_stream=function(){return(ts=e._duckdb_web_insert_arrow_from_ipc_stream=e.asm.Bb).apply(null,arguments)},rs=e._duckdb_web_insert_csv_from_path=function(){return(rs=e._duckdb_web_insert_csv_from_path=e.asm.Cb).apply(null,arguments)},ns=e._duckdb_web_insert_json_from_path=function(){return(ns=e._duckdb_web_insert_json_from_path=e.asm.Db).apply(null,arguments)},is=function(){return(is=e.asm.__errno_location).apply(null,arguments)},Ze=function(){return(Ze=e.asm.Eb).apply(null,arguments)},et=function(){return(et=e.asm.Fb).apply(null,arguments)},Dt=function(){return(Dt=e.asm.Gb).apply(null,arguments)},tt=e._malloc=function(){return(tt=e._malloc=e.asm.Hb).apply(null,arguments)},rt=e._free=function(){return(rt=e._free=e.asm.Ib).apply(null,arguments)},Pe=function(){return(Pe=e.asm.Jb).apply(null,arguments)},We=function(){return(We=e.asm.Kb).apply(null,arguments)},xe=function(){return(xe=e.asm.Lb).apply(null,arguments)},nt=function(){return(nt=e.asm.Mb).apply(null,arguments)};e.stackAlloc=nt,e.stackSave=We,e.stackRestore=xe,e.ccall=yi;var Ce;we=function s(){Ce||qe(),Ce||(we=s)};function Tt(){var s=$t,c=0,_=0;try{var b=s(c,_);return bi(b,!0),b}catch(t){return pi(t)}}function qe(){if(le>0||(br(),le>0))return;function s(){Ce||(Ce=!0,e.calledRun=!0,!L&&(pr(),hr(),o(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),Rt&&Tt(),gr()))}e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1),s()},1)):s()}if(e.preInit)for(typeof e.preInit=="function"&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();var Rt=!0;return e.noInitialRun&&(Rt=!1),qe(),n.ready}})();typeof or=="object"&&typeof Ss=="object"?Ss.exports=Es:typeof define=="function"&&define.amd?define([],function(){return Es}):typeof or=="object"&&(or.DuckDB=Es)});import*as ke from"apache-arrow";var Jt=class{constructor(n,e){this._bindings=n,this._conn=e}close(){this._bindings.disconnect(this._conn)}useUnsafe(n){return n(this._bindings,this._conn)}query(n){let e=this._bindings.runQuery(this._conn,n),o=ke.RecordBatchReader.from(e);return console.assert(o.isSync()),console.assert(o.isFile()),new ke.Table(o)}async send(n){let e=this._bindings.startPendingQuery(this._conn,n);for(;e==null;)e=await new Promise((l,m)=>{try{l(this._bindings.pollPendingQuery(this._conn))}catch(d){console.log(d),m(d)}});let o=new Qt(this._bindings,this._conn,e),u=ke.RecordBatchReader.from(o);return console.assert(u.isSync()),console.assert(u.isStream()),u}cancelSent(){return this._bindings.cancelPendingQuery(this._conn)}getTableNames(n){return this._bindings.getTableNames(this._conn,n)}prepare(n){let e=this._bindings.createPrepared(this._conn,n);return new as(this._bindings,this._conn,e)}createScalarFunction(n,e,o){this._bindings.createScalarFunction(this._conn,n,e,o)}insertArrowTable(n,e){let o=ke.tableToIPC(n,"stream");this.insertArrowFromIPCStream(o,e)}insertArrowFromIPCStream(n,e){this._bindings.insertArrowFromIPCStream(this._conn,n,e)}insertCSVFromPath(n,e){this._bindings.insertCSVFromPath(this._conn,n,e)}insertJSONFromPath(n,e){this._bindings.insertJSONFromPath(this._conn,n,e)}},Qt=class{constructor(n,e,o){this.bindings=n;this.conn=e;this.header=o;this._first=!0,this._depleted=!1}next(){if(this._first)return this._first=!1,{done:!1,value:this.header};if(this._depleted)return{done:!0,value:null};let n=this.bindings.fetchQueryResults(this.conn);return this._depleted=n.length==0,{done:this._depleted,value:n}}[Symbol.iterator](){return this}},as=class{constructor(n,e,o){this.bindings=n,this.connectionId=e,this.statementId=o}close(){this.bindings.closePrepared(this.connectionId,this.statementId)}query(...n){let e=this.bindings.runPrepared(this.connectionId,this.statementId,n),o=ke.RecordBatchReader.from(e);return console.assert(o.isSync()),console.assert(o.isFile()),new ke.Table(o)}send(...n){let e=this.bindings.sendPrepared(this.connectionId,this.statementId,n),o=new Qt(this.bindings,this.connectionId,e),u=ke.RecordBatchReader.from(o);return console.assert(u.isSync()),console.assert(u.isStream()),u}};var ca=(n=>(n[n.SUCCESS=0]="SUCCESS",n))(ca||{});var Ms=new TextEncoder,xs=new TextDecoder("utf-8");function os(r,n,e){let o=Ms.encode(e),u=r._malloc(o.byteLength),l=r.HEAPU8.subarray(u,u+o.byteLength);l.set(o),r.HEAPF64[(n>>3)+0]=1,r.HEAPF64[(n>>3)+1]=u,r.HEAPF64[(n>>3)+2]=l.byteLength}function cs(r){switch(r){case"UINT8":case"INT8":return 1;case"INT32":case"FLOAT":return 4;case"INT64":case"UINT64":case"DOUBLE":case"VARCHAR":return 8;default:return 0}}function us(r,n,e,o){let u=r.HEAPU8.subarray(n,n+o*cs(e));switch(e){case"UINT8":return new Uint8Array(u.buffer,u.byteOffset,o);case"INT8":return new Int8Array(u.buffer,u.byteOffset,o);case"INT32":return new Int32Array(u.buffer,u.byteOffset,o);case"FLOAT":return new Float32Array(u.buffer,u.byteOffset,o);case"DOUBLE":return new Float64Array(u.buffer,u.byteOffset,o);case"VARCHAR":return new Float64Array(u.buffer,u.byteOffset,o);default:return new Array(0)}}function Cs(r,n,e){let o=r.HEAPU8.subarray(n,n+e);return new Uint8Array(o.buffer,o.byteOffset,e)}function Zt(r,n,e){let o=r.HEAPU8.subarray(n,n+e*8);return new Float64Array(o.buffer,o.byteOffset,e)}function er(r,n,e,o,u,l,m,d){try{let h=r._udfFunctions.get(o);if(!h){os(n,e,"Unknown UDF with id: "+o);return}let R=xs.decode(n.HEAPU8.subarray(u,u+l)),A=JSON.parse(R),P=Zt(n,m,d/8),U=L=>{var oe;let ne=null;switch(L.validityBuffer!==void 0&&(ne=Cs(n,P[L.validityBuffer],A.rows)),L.physicalType){case"VARCHAR":{if(L.dataBuffer===null||L.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for VARCHAR argument");if(L.lengthBuffer===null||L.lengthBuffer===void 0)throw new Error("malformed data view, expected data length buffer for VARCHAR argument");let Q=us(n,P[L.dataBuffer],L.physicalType,A.rows),z=[],J=Zt(n,P[L.lengthBuffer],A.rows);for(let Y=0;Y<A.rows;++Y){if(ne!=null&&!ne[Y]){z.push(null);continue}let g=n.HEAPU8.subarray(Q[Y],Q[Y]+J[Y]),I=xs.decode(g);z.push(I)}return Y=>z[Y]}case"STRUCT":{let Q={},z=[];for(let J=0;J<(((oe=L.children)==null?void 0:oe.length)||0);++J){let Y=L.children[J],g=U(Y);z.push(I=>{Q[Y.name]=g(I)})}return ne!=null?J=>{if(!ne[J])return null;for(let Y of z)Y(J);return Q}:J=>{for(let Y of z)Y(J);return Q}}default:{if(L.dataBuffer===void 0)throw new Error("malformed data view, expected data buffer for argument of type: "+L.physicalType);let Q=us(n,P[L.dataBuffer],L.physicalType,A.rows);return ne!=null?z=>ne[z]?Q[z]:null:z=>Q[z]}}},N=[];for(let L=0;L<A.args.length;++L)N.push(U(A.args[L]));let te=A.rows*cs(A.ret.physicalType),se=n._malloc(te),re=us(n,se,A.ret.physicalType,A.rows),de=n._malloc(A.rows),ce=Cs(n,de,A.rows);if(re.length==0||ce.length==0){os(n,e,"Can't create physical arrays for result");return}let ae=re;A.ret.physicalType=="VARCHAR"&&(ae=new Array(A.rows));let Ue=[];for(let L=0;L<A.args.length;++L)Ue.push(null);for(let L=0;L<A.rows;++L){for(let oe=0;oe<A.args.length;++oe)Ue[oe]=N[oe](L);let ne=h.func(...Ue);ae[L]=ne,ce[L]=ne==null?0:1}let S=0;switch(A.ret.physicalType){case"VARCHAR":{let L=new Array(0);S=n._malloc(A.rows*cs("DOUBLE"));let ne=Zt(n,S,A.rows),oe=0;for(let Y=0;Y<A.rows;++Y){let g=Ms.encode(ae[Y]||"");L.push(g),ne[Y]=g.length,oe+=g.length}let Q=n._malloc(oe),z=n.HEAPU8.subarray(Q,Q+oe),J=0;for(let Y=0;Y<A.rows;++Y){re[Y]=J;let g=L[Y];z.subarray(J,J+g.length).set(g),J+=g.length}}}let me=3*8,Ge=n._malloc(me),be=Zt(n,Ge,3);be[0]=se,be[1]=de,be[2]=S,n.HEAPF64[(e>>3)+0]=0,n.HEAPF64[(e>>3)+1]=Ge,n.HEAPF64[(e>>3)+2]=0}catch(h){os(n,e,h.toString())}}function la(){let r=new TextDecoder;return n=>(typeof SharedArrayBuffer<"u"&&n.buffer instanceof SharedArrayBuffer&&(n=new Uint8Array(n)),r.decode(n))}var fa=la();function ye(r,n){console.error("FAIL WITH: ".concat(n)),r.ccall("duckdb_web_fail_with",null,["string"],[n])}function je(r,n,e){let o=r.HEAPU8.subarray(n,n+e),u=new Uint8Array(new ArrayBuffer(o.byteLength));return u.set(o),u}function B(r,n,e){return fa(r.HEAPU8.subarray(n,n+e))}var ls=(m=>(m[m.BUFFER=0]="BUFFER",m[m.NODE_FS=1]="NODE_FS",m[m.BROWSER_FILEREADER=2]="BROWSER_FILEREADER",m[m.BROWSER_FSACCESS=3]="BROWSER_FSACCESS",m[m.HTTP=4]="HTTP",m[m.S3=5]="S3",m))(ls||{}),Is=(m=>(m[m.FILE_FLAGS_READ=1]="FILE_FLAGS_READ",m[m.FILE_FLAGS_WRITE=2]="FILE_FLAGS_WRITE",m[m.FILE_FLAGS_DIRECT_IO=4]="FILE_FLAGS_DIRECT_IO",m[m.FILE_FLAGS_FILE_CREATE=8]="FILE_FLAGS_FILE_CREATE",m[m.FILE_FLAGS_FILE_CREATE_NEW=16]="FILE_FLAGS_FILE_CREATE_NEW",m[m.FILE_FLAGS_APPEND=32]="FILE_FLAGS_APPEND",m))(Is||{});function V(r,n,e,o){let u=r.stackSave(),l=r.stackAlloc(3*8);e.unshift("number"),o.unshift(l),r.ccall(n,null,e,o);let m=r.HEAPF64[(l>>3)+0],d=r.HEAPF64[(l>>3)+1],h=r.HEAPF64[(l>>3)+2];return r.stackRestore(u),[m,d,h]}function Z(r){r.ccall("duckdb_web_clear_response",null,[],[])}var Hs={_udfFunctions:new Map,testPlatformFeature:(r,n)=>!1,getDefaultDataProtocol:r=>0,openFile:(r,n,e)=>{},syncFile:(r,n)=>{},closeFile:(r,n)=>{},getLastFileModificationTime:(r,n)=>0,truncateFile:(r,n,e)=>{},readFile:(r,n,e,o,u)=>0,writeFile:(r,n,e,o,u)=>0,removeDirectory:(r,n,e)=>{},checkDirectory:(r,n,e)=>!1,createDirectory:(r,n,e)=>{},listDirectoryEntries:(r,n,e)=>!1,glob:(r,n,e)=>{},moveFile:(r,n,e,o,u)=>{},checkFile:(r,n,e)=>!1,removeFile:(r,n,e)=>{},callScalarUDF:(r,n,e,o,u,l,m)=>{er(Hs,r,n,e,o,u,l,m)}};var tr=class{constructor(n){let e=new Float64Array(n.buffer,n.byteOffset,n.byteLength/8),o=new Uint8Array(new ArrayBuffer(n.byteLength));o.set(n.subarray(7*8)),this.totalFileReadsCold=e[0],this.totalFileReadsAhead=e[1],this.totalFileReadsCached=e[2],this.totalFileWrites=e[3],this.totalPageAccesses=e[4],this.totalPageLoads=e[5],this.blockSize=e[6],this.blockStats=o}getBlockStats(n,e){return e=e||{file_reads_cold:0,file_reads_ahead:0,file_reads_cached:0,file_writes:0,page_accesses:0,page_loads:0},e.file_writes=this.blockStats[n*3+0]&15,e.file_reads_cold=this.blockStats[n*3+0]>>4,e.file_reads_ahead=this.blockStats[n*3+1]&15,e.file_reads_cached=this.blockStats[n*3+1]>>4,e.page_accesses=this.blockStats[n*3+1]&15,e.page_loads=this.blockStats[n*3+1]>>4,e}};import*as q from"apache-arrow";function st(r){switch(r.typeId){case q.Type.Binary:return{sqlType:"binary"};case q.Type.Bool:return{sqlType:"bool"};case q.Type.Date:return{sqlType:"date"};case q.Type.DateDay:return{sqlType:"date32[d]"};case q.Type.DateMillisecond:return{sqlType:"date64[ms]"};case q.Type.Decimal:{let n=r;return{sqlType:"decimal",precision:n.precision,scale:n.scale}}case q.Type.Float:return{sqlType:"float"};case q.Type.Float16:return{sqlType:"float16"};case q.Type.Float32:return{sqlType:"float32"};case q.Type.Float64:return{sqlType:"float64"};case q.Type.Int:return{sqlType:"int32"};case q.Type.Int16:return{sqlType:"int16"};case q.Type.Int32:return{sqlType:"int32"};case q.Type.Int64:return{sqlType:"int64"};case q.Type.Uint16:return{sqlType:"uint16"};case q.Type.Uint32:return{sqlType:"uint32"};case q.Type.Uint64:return{sqlType:"uint64"};case q.Type.Uint8:return{sqlType:"uint8"};case q.Type.IntervalDayTime:return{sqlType:"interval[dt]"};case q.Type.IntervalYearMonth:return{sqlType:"interval[m]"};case q.Type.List:return{sqlType:"list",valueType:st(r.valueType)};case q.Type.FixedSizeBinary:return{sqlType:"fixedsizebinary",byteWidth:r.byteWidth};case q.Type.Null:return{sqlType:"null"};case q.Type.Utf8:return{sqlType:"utf8"};case q.Type.Struct:return{sqlType:"struct",fields:r.children.map(e=>rr(e.name,e.type))};case q.Type.Map:{let n=r;return{sqlType:"map",keyType:st(n.keyType),valueType:st(n.valueType)}}case q.Type.Time:return{sqlType:"time[s]"};case q.Type.TimeMicrosecond:return{sqlType:"time[us]"};case q.Type.TimeMillisecond:return{sqlType:"time[ms]"};case q.Type.TimeNanosecond:return{sqlType:"time[ns]"};case q.Type.TimeSecond:return{sqlType:"time[s]"};case q.Type.Timestamp:return{sqlType:"timestamp",timezone:r.timezone||void 0};case q.Type.TimestampSecond:return{sqlType:"timestamp[s]",timezone:r.timezone||void 0};case q.Type.TimestampMicrosecond:return{sqlType:"timestamp[us]",timezone:r.timezone||void 0};case q.Type.TimestampNanosecond:return{sqlType:"timestamp[ns]",timezone:r.timezone||void 0};case q.Type.TimestampMillisecond:return{sqlType:"timestamp[ms]",timezone:r.timezone||void 0}}throw new Error("unsupported arrow type: ".concat(r.toString()))}function rr(r,n){let e=st(n);return e.name=r,e}var _a=new TextEncoder,da=(l=>(l[l.WASM_EXCEPTIONS=1]="WASM_EXCEPTIONS",l[l.WASM_THREADS=2]="WASM_THREADS",l[l.WASM_SIMD=4]="WASM_SIMD",l[l.WASM_BULK_MEMORY=8]="WASM_BULK_MEMORY",l[l.EMIT_BIGINT=16]="EMIT_BIGINT",l))(da||{}),nr=class{constructor(n,e){this._instance=null;this._initPromise=null;this._initPromiseResolver=()=>{};this.onInstantiationProgress=[];this._logger=n,this._runtime=e,this._nextUDFId=1}get logger(){return this._logger}get mod(){return this._instance}get pthread(){return this.mod.PThread||null}async instantiate(n=e=>{}){return this._instance!=null?this:(this._initPromise!=null&&(this.onInstantiationProgress.push(n),await this._initPromise),this._initPromise=new Promise(e=>{this._initPromiseResolver=e}),this.onInstantiationProgress=[n],this._instance=await this.instantiateImpl({print:console.log.bind(console),printErr:console.log.bind(console),onRuntimeInitialized:this._initPromiseResolver}),await this._initPromise,this._initPromise=null,this.onInstantiationProgress=this.onInstantiationProgress.filter(e=>e!=n),this)}open(n){let[e,o,u]=V(this.mod,"duckdb_web_open",["string"],[JSON.stringify(n)]);if(e!==0)throw new Error(B(this.mod,o,u));Z(this.mod)}reset(){let[n,e,o]=V(this.mod,"duckdb_web_reset",[],[]);if(n!==0)throw new Error(B(this.mod,e,o));Z(this.mod)}getVersion(){let[n,e,o]=V(this.mod,"duckdb_web_get_version",[],[]);if(n!==0)throw new Error(B(this.mod,e,o));let u=B(this.mod,e,o);return Z(this.mod),u}getFeatureFlags(){return this.mod.ccall("duckdb_web_get_feature_flags","number",[],[])}tokenize(n){let[e,o,u]=V(this.mod,"duckdb_web_tokenize",["string"],[n]);if(e!==0)throw new Error(B(this.mod,o,u));let l=B(this.mod,o,u);return Z(this.mod),JSON.parse(l)}connect(){let n=this.mod.ccall("duckdb_web_connect","number",[],[]);return new Jt(this,n)}disconnect(n){if(this.mod.ccall("duckdb_web_disconnect",null,["number"],[n]),this.pthread)for(let e of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])e.postMessage({cmd:"dropUDFFunctions",connectionId:n})}runQuery(n,e){let[o,u,l]=V(this.mod,"duckdb_web_query_run",["number","string"],[n,e]);if(o!==0)throw new Error(B(this.mod,u,l));let m=je(this.mod,u,l);return Z(this.mod),m}startPendingQuery(n,e){let[o,u,l]=V(this.mod,"duckdb_web_pending_query_start",["number","string"],[n,e]);if(o!==0)throw new Error(B(this.mod,u,l));if(u==0)return null;let m=je(this.mod,u,l);return Z(this.mod),m}pollPendingQuery(n){let[e,o,u]=V(this.mod,"duckdb_web_pending_query_poll",["number"],[n]);if(e!==0)throw new Error(B(this.mod,o,u));if(o==0)return null;let l=je(this.mod,o,u);return Z(this.mod),l}cancelPendingQuery(n){return this.mod.ccall("duckdb_web_pending_query_cancel","boolean",["number"],[n])}fetchQueryResults(n){let[e,o,u]=V(this.mod,"duckdb_web_query_fetch_results",["number"],[n]);if(e!==0)throw new Error(B(this.mod,o,u));let l=je(this.mod,o,u);return Z(this.mod),l}getTableNames(n,e){let[o,u,l]=V(this.mod,"duckdb_web_get_tablenames",["number","string"],[n,e]);if(o!==0)throw new Error(B(this.mod,u,l));let m=B(this.mod,u,l);return Z(this.mod),JSON.parse(m)}createScalarFunction(n,e,o,u){let l={functionId:this._nextUDFId,name:e,returnType:st(o)},m={functionId:l.functionId,connectionId:n,name:e,returnType:o,func:u};this._nextUDFId+=1;let[d,h,R]=V(this.mod,"duckdb_web_udf_scalar_create",["number","string"],[n,JSON.stringify(l)]);if(d!==0)throw new Error(B(this.mod,h,R));if(Z(this.mod),globalThis.DUCKDB_RUNTIME._udfFunctions=(globalThis.DUCKDB_RUNTIME._udfFunctions||new Map).set(m.functionId,m),this.pthread)for(let A of[...this.pthread.runningWorkers,...this.pthread.unusedWorkers])A.postMessage({cmd:"registerUDFFunction",udf:m})}createPrepared(n,e){let[o,u,l]=V(this.mod,"duckdb_web_prepared_create",["number","string"],[n,e]);if(o!==0)throw new Error(B(this.mod,u,l));return Z(this.mod),u}closePrepared(n,e){let[o,u,l]=V(this.mod,"duckdb_web_prepared_close",["number","number"],[n,e]);if(o!==0)throw new Error(B(this.mod,u,l));Z(this.mod)}runPrepared(n,e,o){let[u,l,m]=V(this.mod,"duckdb_web_prepared_run",["number","number","string"],[n,e,JSON.stringify(o)]);if(u!==0)throw new Error(B(this.mod,l,m));let d=je(this.mod,l,m);return Z(this.mod),d}sendPrepared(n,e,o){let[u,l,m]=V(this.mod,"duckdb_web_prepared_send",["number","number","string"],[n,e,JSON.stringify(o)]);if(u!==0)throw new Error(B(this.mod,l,m));let d=je(this.mod,l,m);return Z(this.mod),d}insertArrowFromIPCStream(n,e,o){if(e.length==0)return;let u=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(u,u+e.length).set(e);let m=o?JSON.stringify(o):"",[d,h,R]=V(this.mod,"duckdb_web_insert_arrow_from_ipc_stream",["number","number","number","string"],[n,u,e.length,m]);if(d!==0)throw new Error(B(this.mod,h,R))}insertCSVFromPath(n,e,o){if(o.columns!==void 0){o.columnsFlat=[];for(let R in o.columns)o.columnsFlat.push(rr(R,o.columns[R]))}let u={...o};u.columns=u.columnsFlat,delete u.columnsFlat;let l=JSON.stringify(u),[m,d,h]=V(this.mod,"duckdb_web_insert_csv_from_path",["number","string","string"],[n,e,l]);if(m!==0)throw new Error(B(this.mod,d,h))}insertJSONFromPath(n,e,o){if(o.columns!==void 0){o.columnsFlat=[];for(let R in o.columns)o.columnsFlat.push(rr(R,o.columns[R]))}let u={...o};u.columns=u.columnsFlat,delete u.columnsFlat;let l=JSON.stringify(u),[m,d,h]=V(this.mod,"duckdb_web_insert_json_from_path",["number","string","string"],[n,e,l]);if(m!==0)throw new Error(B(this.mod,d,h))}globFiles(n){let[e,o,u]=V(this.mod,"duckdb_web_fs_glob_file_infos",["string"],[n]);if(e!==0)throw new Error(B(this.mod,o,u));let l=B(this.mod,o,u);Z(this.mod);let m=JSON.parse(l);return m==null?[]:m}registerFileURL(n,e,o,u=!1){e===void 0&&(e=n);let[l,m,d]=V(this.mod,"duckdb_web_fs_register_file_url",["string","string"],[n,e,o,u]);if(l!==0)throw new Error(B(this.mod,m,d));Z(this.mod)}registerFileText(n,e){let o=_a.encode(e);this.registerFileBuffer(n,o)}registerFileBuffer(n,e){let o=this.mod._malloc(e.length);this.mod.HEAPU8.subarray(o,o+e.length).set(e);let[l,m,d]=V(this.mod,"duckdb_web_fs_register_file_buffer",["string","number","number"],[n,o,e.length]);if(l!==0)throw new Error(B(this.mod,m,d));Z(this.mod)}registerFileHandle(n,e,o,u){let[l,m,d]=V(this.mod,"duckdb_web_fs_register_file_url",["string","string","number","boolean"],[n,n,o,u]);if(l!==0)throw new Error(B(this.mod,m,d));if(Z(this.mod),globalThis.DUCKDB_RUNTIME._files=(globalThis.DUCKDB_RUNTIME._files||new Map).set(n,e),this.pthread){for(let h of this.pthread.runningWorkers)h.postMessage({cmd:"registerFileHandle",fileName:n,fileHandle:e});for(let h of this.pthread.unusedWorkers)h.postMessage({cmd:"dropFileHandle",fileName:n})}}dropFile(n){let[e,o,u]=V(this.mod,"duckdb_web_fs_drop_file",["string"],[n]);if(e!==0)throw new Error(B(this.mod,o,u));Z(this.mod)}dropFiles(){let[n,e,o]=V(this.mod,"duckdb_web_fs_drop_files",[],[]);if(n!==0)throw new Error(B(this.mod,e,o));Z(this.mod)}flushFiles(){this.mod.ccall("duckdb_web_flush_files",null,[],[])}copyFileToPath(n,e){let[o,u,l]=V(this.mod,"duckdb_web_copy_file_to_path",["string","string"],[n,e]);if(o!==0)throw new Error(B(this.mod,u,l));Z(this.mod)}copyFileToBuffer(n){let[e,o,u]=V(this.mod,"duckdb_web_copy_file_to_buffer",["string"],[n]);if(e!==0)throw new Error(B(this.mod,o,u));let l=this.mod.HEAPU8.subarray(o,o+u),m=new Uint8Array(l.length);return m.set(l),Z(this.mod),m}collectFileStatistics(n,e){let[o,u,l]=V(this.mod,"duckdb_web_collect_file_stats",["string","boolean"],[n,e]);if(o!==0)throw new Error(B(this.mod,u,l))}exportFileStatistics(n){let[e,o,u]=V(this.mod,"duckdb_web_export_file_stats",["string"],[n]);if(e!==0)throw new Error(B(this.mod,o,u));return new tr(this.mod.HEAPU8.subarray(o,o+u))}};var ma=(u=>(u[u.UNDEFINED=0]="UNDEFINED",u[u.AUTOMATIC=1]="AUTOMATIC",u[u.READ_ONLY=2]="READ_ONLY",u[u.READ_WRITE=3]="READ_WRITE",u))(ma||{});var ba=(e=>(e.ROW_ARRAY="row-array",e.COLUMN_OBJECT="column-object",e))(ba||{});var pa=(l=>(l[l.NONE=0]="NONE",l[l.DEBUG=1]="DEBUG",l[l.INFO=2]="INFO",l[l.WARNING=3]="WARNING",l[l.ERROR=4]="ERROR",l))(pa||{}),ha=(m=>(m[m.NONE=0]="NONE",m[m.CONNECT=1]="CONNECT",m[m.DISCONNECT=2]="DISCONNECT",m[m.OPEN=3]="OPEN",m[m.QUERY=4]="QUERY",m[m.INSTANTIATE=5]="INSTANTIATE",m))(ha||{}),ga=(m=>(m[m.NONE=0]="NONE",m[m.OK=1]="OK",m[m.ERROR=2]="ERROR",m[m.START=3]="START",m[m.RUN=4]="RUN",m[m.CAPTURE=5]="CAPTURE",m))(ga||{}),ya=(l=>(l[l.NONE=0]="NONE",l[l.WEB_WORKER=1]="WEB_WORKER",l[l.NODE_WORKER=2]="NODE_WORKER",l[l.BINDINGS=3]="BINDINGS",l[l.ASYNC_DUCKDB=4]="ASYNC_DUCKDB",l))(ya||{}),Bs=class{log(n){}},Ns=class{constructor(n=2){this.level=n}log(n){n.level>=this.level&&console.log(n)}};function Wa(r){switch(r){case 0:return"NONE";case 1:return"DEBUG";case 2:return"INFO";case 3:return"WARNING";case 4:return"ERROR";default:return"?"}}function qa(r){switch(r){case 0:return"NONE";case 1:return"OK";case 2:return"ERROR";case 3:return"START";case 4:return"RUN";case 5:return"CAPTURE";default:return"?"}}function za(r){switch(r){case 1:return"CONNECT";case 2:return"DISCONNECT";case 5:return"INSTANTIATE";case 3:return"OPEN";case 4:return"QUERY";default:return"?"}}function Xa(r){switch(r){case 0:return"NONE";case 1:return"WEB WORKER";case 2:return"NODE WORKER";case 3:return"DUCKDB BINDINGS";case 4:return"DUCKDB";default:return"?"}}var Ls=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),Os=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11]));var Ps=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11]));var Ws=()=>(async r=>{try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(r)}catch(n){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]));var ir={name:"@duckdb/duckdb-wasm",version:"1.11.0",description:"DuckDB powered by WebAssembly",license:"MIT",repository:{type:"git",url:"https://github.com/duckdb/duckdb-wasm.git"},keywords:["sql","duckdb","relational","database","data","query","wasm","analytics","olap","arrow","parquet","json","csv"],dependencies:{"apache-arrow":"^12.0.0"},devDependencies:{"@types/emscripten":"^1.39.6","@types/jasmine":"^4.3.1","@typescript-eslint/eslint-plugin":"^5.61.0","@typescript-eslint/parser":"^5.49.0",esbuild:"^0.18.13",eslint:"^8.35.0","eslint-plugin-jasmine":"^4.1.3","eslint-plugin-react":"^7.32.2","fast-glob":"^3.2.12",jasmine:"^5.0.2","jasmine-core":"^5.0.0","jasmine-spec-reporter":"^7.0.0","js-sha256":"^0.9.0",karma:"^6.4.2","karma-chrome-launcher":"^3.2.0","karma-coverage":"^2.2.0","karma-firefox-launcher":"^2.1.2","karma-jasmine":"^5.1.0","karma-jasmine-html-reporter":"^2.0.0","karma-sourcemap-loader":"^0.3.8","karma-spec-reporter":"^0.0.36","make-dir":"^3.1.0",nyc:"^15.1.0",prettier:"^2.8.4",puppeteer:"^20.8.0",rimraf:"^4.3.0",s3rver:"^3.7.1",typedoc:"^0.24.8",typescript:"^4.8.4","wasm-feature-detect":"^1.5.1","web-worker":"^1.2.0"},scripts:{"build:debug":"node bundle.mjs debug && tsc --emitDeclarationOnly","build:release":"node bundle.mjs release && tsc --emitDeclarationOnly",docs:"typedoc",report:"node ./coverage.mjs","test:node":"node --enable-source-maps ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:node:debug":"node --inspect-brk --enable-source-maps ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:node:coverage":"nyc -r json --report-dir ./coverage/node node ../../node_modules/jasmine/bin/jasmine ./dist/tests-node.cjs","test:firefox":"karma start ./karma/tests-firefox.cjs","test:chrome":"karma start ./karma/tests-chrome.cjs","test:chrome:eh":"karma start ./karma/tests-chrome-eh.cjs","test:chrome:coverage":"karma start ./karma/tests-chrome-coverage.cjs","test:browser":"karma start ./karma/tests-all.cjs","test:browser:debug":"karma start ./karma/tests-debug.cjs",test:"npm run test:chrome && npm run test:node","test:coverage":"npm run test:chrome:coverage && npm run test:node:coverage && npm run report",lint:"eslint src test"},files:["dist","!dist/types/test"],main:"dist/duckdb-browser.cjs",module:"dist/duckdb-browser.mjs",types:"dist/duckdb-browser.d.ts",jsdelivr:"dist/duckdb-browser.cjs",unpkg:"dist/duckdb-browser.mjs",sideEffects:!1,browser:{fs:!1,path:!1,perf_hooks:!1,os:!1,worker_threads:!1},exports:{"./dist/duckdb-mvp.wasm":"./dist/duckdb-mvp.wasm","./dist/duckdb-eh.wasm":"./dist/duckdb-eh.wasm","./dist/duckdb-coi.wasm":"./dist/duckdb-coi.wasm","./dist/duckdb-browser":"./dist/duckdb-browser.mjs","./dist/duckdb-browser.cjs":"./dist/duckdb-browser.cjs","./dist/duckdb-browser.mjs":"./dist/duckdb-browser.mjs","./dist/duckdb-browser-blocking":"./dist/duckdb-browser-blocking.mjs","./dist/duckdb-browser-blocking.mjs":"./dist/duckdb-browser-blocking.mjs","./dist/duckdb-browser-blocking.cjs":"./dist/duckdb-browser-blocking.cjs","./dist/duckdb-browser-coi.pthread.worker.js":"./dist/duckdb-browser-coi.pthread.worker.js","./dist/duckdb-browser-coi.worker.js":"./dist/duckdb-browser-coi.worker.js","./dist/duckdb-browser-eh.worker.js":"./dist/duckdb-browser-eh.worker.js","./dist/duckdb-browser-mvp.worker.js":"./dist/duckdb-browser-mvp.worker.js","./dist/duckdb-node":"./dist/duckdb-node.cjs","./dist/duckdb-node.cjs":"./dist/duckdb-node.cjs","./dist/duckdb-node-blocking":"./dist/duckdb-node-blocking.cjs","./dist/duckdb-node-blocking.cjs":"./dist/duckdb-node-blocking.cjs","./dist/duckdb-node-eh.worker.cjs":"./dist/duckdb-node-eh.worker.cjs","./dist/duckdb-node-mvp.worker.cjs":"./dist/duckdb-node-mvp.worker.cjs","./blocking":{browser:{types:"./dist/duckdb-browser-blocking.d.ts",import:"./dist/duckdb-browser-blocking.mjs",require:"./dist/duckdb-browser-blocking.cjs"},node:{types:"./dist/duckdb-node-blocking.d.ts",require:"./dist/duckdb-node-blocking.cjs",import:"./dist/duckdb-node-blocking.cjs"},types:"./dist/duckdb-browser-blocking.d.ts",import:"./dist/duckdb-browser-blocking.mjs",require:"./dist/duckdb-browser-blocking.cjs"},".":{browser:{types:"./dist/duckdb-browser.d.ts",import:"./dist/duckdb-browser.mjs",require:"./dist/duckdb-browser.cjs"},node:{types:"./dist/duckdb-node.d.ts",import:"./dist/duckdb-node.cjs",require:"./dist/duckdb-node.cjs"},types:"./dist/duckdb-browser.d.ts",import:"./dist/duckdb-browser.mjs",require:"./dist/duckdb-browser.cjs"}}};var qs=ir.name,zs=ir.version,fs=ir.version.split("."),Ka=fs[0],$a=fs[1],Va=fs[2];var Xs=()=>typeof navigator>"u",js=()=>Xs()?"node":navigator.userAgent,Za=()=>js().includes("Firefox"),eo=()=>/^((?!chrome|android).)*safari/i.test(js());function to(){let r="https://cdn.jsdelivr.net/npm/".concat(qs,"@").concat(zs,"/dist/");return{mvp:{mainModule:"".concat(r,"duckdb-mvp.wasm"),mainWorker:"".concat(r,"duckdb-browser-mvp.worker.js")},eh:{mainModule:"".concat(r,"duckdb-eh.wasm"),mainWorker:"".concat(r,"duckdb-browser-eh.worker.js")}}}var _s=null,ds=null,ms=null,bs=null,ps=null;async function hs(){return _s==null&&(_s=typeof BigInt64Array<"u"),ds==null&&(ds=await Os()),ms==null&&(ms=await Ws()),bs==null&&(bs=await Ps()),ps==null&&(ps=await Ls()),{bigInt64Array:_s,crossOriginIsolated:Xs()||globalThis.crossOriginIsolated||!1,wasmExceptions:ds,wasmSIMD:bs,wasmThreads:ms,wasmBulkMemory:ps}}async function ro(r){let n=await hs();if(n.wasmExceptions){if(n.wasmSIMD&&n.wasmThreads&&n.crossOriginIsolated&&r.coi)return{mainModule:r.coi.mainModule,mainWorker:r.coi.mainWorker,pthreadWorker:r.coi.pthreadWorker};if(r.eh)return{mainModule:r.eh.mainModule,mainWorker:r.eh.mainWorker,pthreadWorker:null}}return{mainModule:r.mvp.mainModule,mainWorker:r.mvp.mainWorker,pthreadWorker:null}}var Me=ss(Gs()),Ys=function(r,n,e){var o;if((o=r==null?void 0:r.endpoint)!=null&&o.startsWith("http")){let u="".concat(r==null?void 0:r.endpoint),l=u.indexOf("://")+3;return u.substring(l)}else return r!=null&&r.endpoint?"".concat(e,".").concat(r==null?void 0:r.endpoint):"".concat(e,".s3.amazonaws.com")};function ka(r,n,e){var l,m,d,h;let o=Ks(n),u=o.path;return $s(r)&&(u="/".concat(o.bucket).concat(u)),{url:u,query:"",host:Ys(r,n,o.bucket),region:(l=r==null?void 0:r.region)!=null?l:"",service:"s3",method:e,accessKeyId:(m=r==null?void 0:r.accessKeyId)!=null?m:"",secretAccessKey:(d=r==null?void 0:r.secretAccessKey)!=null?d:"",sessionToken:(h=r==null?void 0:r.sessionToken)!=null?h:"",dateNow:new Date().toISOString().replace(/-/g,"").split("T")[0],datetimeNow:new Date().toISOString().replace(/-/g,"").replace(/:/g,"").split(".")[0]+"Z"}}function Ea(r,n=!1){let e="0123456789ABCDEF",o="";for(let u=0;u<r.length;u++){let l=r[u];l>="A"&&l<="Z"||l>="a"&&l<="z"||l>="0"&&l<="9"||l=="_"||l=="-"||l=="~"||l=="."?o+=l:l=="/"?n?o+="%2F":o+=l:(o+="%",o+=e[l.charCodeAt(0)>>4],o+=e[l.charCodeAt(0)&15])}return o}function Sa(r,n=null){var te;let e=(te=n==null?void 0:n.contentHash)!=null?te:"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",o=new Map;o.set("x-amz-date",r.datetimeNow),o.set("x-amz-content-sha256",e),r.sessionToken&&o.set("x-amz-security-token",r.sessionToken);let u="";n!=null&&n.contentType&&(u+="content-type;"),u+="host;x-amz-content-sha256;x-amz-date",r.sessionToken&&(u+=";x-amz-security-token");let l=r.method+"\n"+Ea(r.url)+"\n"+r.query;n!=null&&n.contentType&&(l+="\ncontent-type:"+(n==null?void 0:n.contentType)),l+="\nhost:"+r.host+"\nx-amz-content-sha256:"+e+"\nx-amz-date:"+r.datetimeNow,r.sessionToken&&r.sessionToken.length>0&&(l+="\nx-amz-security-token:"+r.sessionToken),l+="\n\n"+u+"\n"+e;let m=(0,Me.sha256)(l),d="AWS4-HMAC-SHA256\n"+r.datetimeNow+"\n"+r.dateNow+"/"+r.region+"/"+r.service+"/aws4_request\n"+m,h="AWS4"+r.secretAccessKey,R=Me.sha256.hmac.arrayBuffer(h,r.dateNow),A=Me.sha256.hmac.arrayBuffer(R,r.region),P=Me.sha256.hmac.arrayBuffer(A,r.service),U=Me.sha256.hmac.arrayBuffer(P,"aws4_request"),N=Me.sha256.hmac(U,d);return o.set("Authorization","AWS4-HMAC-SHA256 Credential="+r.accessKeyId+"/"+r.dateNow+"/"+r.region+"/"+r.service+"/aws4_request, SignedHeaders="+u+", Signature="+N),o}var Da=function(r,n,e,o=null,u=null){let l=ka(r,n,e),m={contentType:o,contentHash:u?Me.sha256.hex(u):null};return Sa(l,m)};function Ee(r,n,e,o,u=null,l=null){(n!=null&&n.accessKeyId||n!=null&&n.sessionToken)&&(Da(n,e,o,u,l).forEach((d,h)=>{r.setRequestHeader(h,d)}),u&&r.setRequestHeader("content-type",u))}function Ks(r){if(r.indexOf("s3://")!=0)throw new Error("URL needs to start with s3://");let n=r.indexOf("/",5);if(n==-1)throw new Error("URL needs to contain a '/' after the host");let e=r.substring(5,n);if(!e)throw new Error("URL needs to contain a bucket name");let o=r.substring(n);if(!o)throw new Error("URL needs to contain key");return{bucket:e,path:o}}function $s(r){var n;return!!((n=r==null?void 0:r.endpoint)!=null&&n.startsWith("http"))}function Se(r,n){let e=Ks(n);return $s(r)?"".concat(r==null?void 0:r.endpoint,"/").concat(e.bucket)+e.path:"https://"+Ys(r,n,e.bucket)+e.path}var G={_files:new Map,_fileInfoCache:new Map,_udfFunctions:new Map,_globalFileInfo:null,getFileInfo(r,n){try{let e=G._fileInfoCache.get(n),[o,u,l]=V(r,"duckdb_web_fs_get_file_info_by_id",["number","number"],[n,(e==null?void 0:e.cacheEpoch)||0]);if(o!==0)return null;if(l===0)return e;let m=B(r,u,l);Z(r);let d=JSON.parse(m);if(d==null)return null;let h={...d,blob:null};return G._fileInfoCache.set(n,h),h}catch(e){return console.log(e),null}},getGlobalFileInfo(r){var n;try{let[e,o,u]=V(r,"duckdb_web_get_global_file_info",["number"],[((n=G._globalFileInfo)==null?void 0:n.cacheEpoch)||0]);if(e!==0)return null;if(u===0)return G._globalFileInfo;let l=B(r,o,u);Z(r);let m=JSON.parse(l);return m==null?null:(G._globalFileInfo={...m,blob:null},G._globalFileInfo)}catch(e){return console.log(e),null}},testPlatformFeature:(r,n)=>{switch(n){case 1:return typeof BigInt64Array<"u";default:return console.warn("test for unknown feature: ".concat(n)),!1}},getDefaultDataProtocol(r){return 2},openFile:(r,n,e)=>{var o;try{G._fileInfoCache.delete(n);let u=G.getFileInfo(r,n);switch(u==null?void 0:u.dataProtocol){case 4:case 5:{if(e&1&&e&2)throw new Error("Opening file ".concat(u.fileName," failed: cannot open file with both read and write flags set"));if(e&32)throw new Error("Opening file ".concat(u.fileName," failed: appending to HTTP/S3 files is not supported"));if(e&2){let d=new XMLHttpRequest;if(u.dataProtocol==5?(d.open("HEAD",Se(u.s3Config,u.dataUrl),!1),Ee(d,u.s3Config,u.dataUrl,"HEAD")):d.open("HEAD",u.dataUrl,!1),d.send(null),d.status!=200&&d.status!=404)throw new Error("Opening file ".concat(u.fileName," failed: Unexpected return status from server (").concat(d.status,")"));if(d.status==404&&!(e&8||e&16))throw new Error("Opening file ".concat(u.fileName," failed: Cannot write to non-existent file without FILE_FLAGS_FILE_CREATE or FILE_FLAGS_FILE_CREATE_NEW flag."));let h=r._malloc(1),R=new Uint8Array;r.HEAPU8.set(R,h);let A=r._malloc(2*8);return r.HEAPF64[(A>>3)+0]=1,r.HEAPF64[(A>>3)+1]=h,A}else if(e!=1)throw new Error("Opening file ".concat(u.fileName," failed: unsupported file flags: ").concat(e));let l=null,m=null;try{let d=new XMLHttpRequest;if(u.dataProtocol==5?(d.open("HEAD",Se(u.s3Config,u.dataUrl),!1),Ee(d,u.s3Config,u.dataUrl,"HEAD")):d.open("HEAD",u.dataUrl,!1),d.setRequestHeader("Range","bytes=0-"),d.send(null),l=d.getResponseHeader("Content-Length"),l!==null&&d.status==206){let h=r._malloc(16);return r.HEAPF64[(h>>3)+0]=+l,r.HEAPF64[(h>>3)+1]=0,h}}catch(d){m=d,console.warn("HEAD request with range header failed: ".concat(d))}if(u.allowFullHttpReads){if(l!==null&&+l>1){let h=new XMLHttpRequest;u.dataProtocol==5?(h.open("GET",Se(u.s3Config,u.dataUrl),!1),Ee(h,u.s3Config,u.dataUrl,"GET")):h.open("GET",u.dataUrl,!1),h.setRequestHeader("Range","bytes=0-0"),h.send(null);let R=h.getResponseHeader("Content-Length");if(h.status==206&&R!==null&&+R==1){let A=r._malloc(16);return r.HEAPF64[(A>>3)+0]=+l,r.HEAPF64[(A>>3)+1]=0,A}if(h.status==200&&R!==null&&+R==+l){console.warn("fall back to full HTTP read for: ".concat(u.dataUrl));let A=r._malloc(h.response.byteLength),P=new Uint8Array(h.response,0,h.response.byteLength);r.HEAPU8.set(P,A);let U=r._malloc(2*8);return r.HEAPF64[(U>>3)+0]=h.response.byteLength,r.HEAPF64[(U>>3)+1]=A,U}}console.warn("falling back to full HTTP read for: ".concat(u.dataUrl));let d=new XMLHttpRequest;if(u.dataProtocol==5?(d.open("GET",Se(u.s3Config,u.dataUrl),!1),Ee(d,u.s3Config,u.dataUrl,"GET")):d.open("GET",u.dataUrl,!1),d.responseType="arraybuffer",d.send(null),d.status==200){let h=r._malloc(d.response.byteLength),R=new Uint8Array(d.response,0,d.response.byteLength);r.HEAPU8.set(R,h);let A=r._malloc(2*8);return r.HEAPF64[(A>>3)+0]=d.response.byteLength,r.HEAPF64[(A>>3)+1]=h,A}}if(m!=null)throw new Error("Reading file ".concat(u.fileName," failed with error: ").concat(m));return 0}case 2:{let l=(o=G._files)==null?void 0:o.get(u.fileName);if(l){let h=r._malloc(16);return r.HEAPF64[(h>>3)+0]=l.size,r.HEAPF64[(h>>3)+1]=0,h}console.warn("Buffering missing file: ".concat(u.fileName));let m=r._malloc(2*8),d=r._malloc(1);return r.HEAPF64[(m>>3)+0]=1,r.HEAPF64[(m>>3)+1]=d,m}}}catch(u){console.error(u.toString()),ye(r,u.toString())}return 0},glob:(r,n,e)=>{var o;try{let u=B(r,n,e);if(u.startsWith("http")||u.startsWith("s3://")){let l=new XMLHttpRequest;if(u.startsWith("s3://")){let m=G.getGlobalFileInfo(r);l.open("HEAD",Se(m==null?void 0:m.s3Config,u),!1),Ee(l,m==null?void 0:m.s3Config,u,"HEAD")}else l.open("HEAD",u,!1);if(l.send(null),l.status!=200&&l.status!==206){if(!((o=G.getGlobalFileInfo(r))!=null&&o.allowFullHttpReads)){ye(r,"HEAD request failed: ".concat(u,", with full http reads are disabled"));return}let m=new XMLHttpRequest;if(u.startsWith("s3://")){let h=G.getGlobalFileInfo(r);m.open("GET",Se(h==null?void 0:h.s3Config,u),!1),Ee(m,h==null?void 0:h.s3Config,u,"HEAD")}else m.open("GET",u,!1);if(m.setRequestHeader("Range","bytes=0-0"),m.send(null),m.status!=200&&m.status!==206){ye(r,"HEAD and GET requests failed: ".concat(u));return}let d=m.getResponseHeader("Content-Length");d&&+d>1&&console.warn("Range request for ".concat(u," did not return a partial response: ").concat(m.status,' "').concat(m.statusText,'"'))}r.ccall("duckdb_web_fs_glob_add_path",null,["string"],[u])}}catch(u){return console.log(u),ye(r,u.toString()),0}},checkFile:(r,n,e)=>{try{let o=B(r,n,e);if(o.startsWith("http")||o.startsWith("s3://")){let u=new XMLHttpRequest;if(o.startsWith("s3://")){let l=G.getGlobalFileInfo(r);u.open("HEAD",Se(l==null?void 0:l.s3Config,o),!1),Ee(u,l==null?void 0:l.s3Config,o,"HEAD")}else u.open("HEAD",o,!1);return u.send(null),u.status==206||u.status==200}}catch(o){return console.log(o),!1}return!1},syncFile:(r,n)=>{},closeFile:(r,n)=>{var o;let e=G.getFileInfo(r,n);switch(G._fileInfoCache.delete(n),e==null?void 0:e.dataProtocol){case 0:case 4:case 5:break;case 1:case 2:return;case 3:{let u=(o=G._files)==null?void 0:o.get(e.fileName);if(!u)throw new Error("No OPFS access handle registered with name: ".concat(e.fileName));return u.flush()}}},truncateFile:(r,n,e)=>{var u;let o=G.getFileInfo(r,n);switch(o==null?void 0:o.dataProtocol){case 4:ye(r,"Cannot truncate a http file");return;case 5:ye(r,"Cannot truncate an s3 file");return;case 0:case 1:case 2:ye(r,"truncateFile not implemented");return;case 3:{let l=(u=G._files)==null?void 0:u.get(o.fileName);if(!l)throw new Error("No OPFS access handle registered with name: ".concat(o.fileName));return l.truncate(e)}}return 0},readFile(r,n,e,o,u){var l,m;if(o==0)return 0;try{let d=G.getFileInfo(r,n);switch(d==null?void 0:d.dataProtocol){case 4:case 5:{if(!d.dataUrl)throw new Error("Missing data URL for file ".concat(n));try{let h=new XMLHttpRequest;if(d.dataProtocol==5?(h.open("GET",Se(d==null?void 0:d.s3Config,d.dataUrl),!1),Ee(h,d==null?void 0:d.s3Config,d.dataUrl,"GET")):h.open("GET",d.dataUrl,!1),h.responseType="arraybuffer",h.setRequestHeader("Range","bytes=".concat(u,"-").concat(u+o-1)),h.send(null),h.status==206||h.status==200&&o==h.response.byteLength&&u==0){let R=new Uint8Array(h.response,0,Math.min(h.response.byteLength,o));return r.HEAPU8.set(R,e),R.byteLength}else if(h.status==200){console.warn("Range request for ".concat(d.dataUrl," did not return a partial response: ").concat(h.status,' "').concat(h.statusText,'"'));let R=new Uint8Array(h.response,u,Math.min(h.response.byteLength-u,o));return r.HEAPU8.set(R,e),R.byteLength}else throw new Error("Range request for ".concat(d.dataUrl," did returned non-success status: ").concat(h.status,' "').concat(h.statusText,'"'))}catch(h){throw console.log(h),new Error("Range request for ".concat(d.dataUrl," failed with error: ").concat(h,'"'))}}case 2:{let h=(l=G._files)==null?void 0:l.get(d.fileName);if(!h)throw new Error("No HTML5 file registered with name: ".concat(d.fileName));let R=h.slice(u,u+o),A=new Uint8Array(new FileReaderSync().readAsArrayBuffer(R));return r.HEAPU8.set(A,e),A.byteLength}case 3:{let h=(m=G._files)==null?void 0:m.get(d.fileName);if(!h)throw new Error("No OPFS access handle registered with name: ".concat(d.fileName));let R=r.HEAPU8.subarray(e,e+o);return h.read(R,{at:u})}}return 0}catch(d){return console.log(d),ye(r,d.toString()),0}},writeFile:(r,n,e,o,u)=>{var m;let l=G.getFileInfo(r,n);switch(l==null?void 0:l.dataProtocol){case 4:return ye(r,"Cannot write to HTTP file"),0;case 5:{let d=r.HEAPU8.subarray(e,e+o),h=new XMLHttpRequest;return h.open("PUT",Se(l==null?void 0:l.s3Config,l.dataUrl),!1),Ee(h,l==null?void 0:l.s3Config,l.dataUrl,"PUT","",d),h.send(d),h.status!==200?(ye(r,"Failed writing file: HTTP "+h.status),0):o}case 2:return ye(r,"cannot write using the html5 file reader api"),0;case 3:{let d=(m=G._files)==null?void 0:m.get(l.fileName);if(!d)throw new Error("No OPFS access handle registered with name: ".concat(l.fileName));let h=r.HEAPU8.subarray(e,e+o);return d.write(h,{at:u})}}return 0},getLastFileModificationTime:(r,n)=>{var o;let e=G.getFileInfo(r,n);switch(e==null?void 0:e.dataProtocol){case 2:{if(!((o=G._files)==null?void 0:o.get(e.fileName)))throw Error("No handle available for file: ".concat(e.fileName));return 0}case 4:case 5:return new Date().getTime()}return 0},checkDirectory:(r,n,e)=>{let o=B(r,n,e);return console.log("checkDirectory: ".concat(o)),!1},createDirectory:(r,n,e)=>{let o=B(r,n,e);console.log("createDirectory: ".concat(o))},removeDirectory:(r,n,e)=>{let o=B(r,n,e);console.log("removeDirectory: ".concat(o))},listDirectoryEntries:(r,n,e)=>{let o=B(r,n,e);return console.log("listDirectoryEntries: ".concat(o)),!1},moveFile:(r,n,e,o,u)=>{var h,R;let l=B(r,n,e),m=B(r,o,u),d=(h=G._files)==null?void 0:h.get(l);d!==void 0&&(G._files.delete(d),G._files.set(m,d));for(let[A,P]of((R=G._fileInfoCache)==null?void 0:R.entries())||[])if(P.dataUrl==l){G._fileInfoCache.delete(A);break}return!0},removeFile:(r,n,e)=>{},callScalarUDF:(r,n,e,o,u,l,m)=>{er(G,r,n,e,o,u,l,m)}};var Js=ss(Vs());var at=class extends nr{constructor(e,o,u,l){super(e,o);this.mainModuleURL=u,this.pthreadWorkerURL=l}locateFile(e,o){if(e.endsWith(".wasm"))return this.mainModuleURL;if(e.endsWith(".worker.js")){if(!this.pthreadWorkerURL)throw new Error("Missing DuckDB worker URL!");return this.pthreadWorkerURL}throw new Error("WASM instantiation requested unexpected file: prefix=".concat(o," path=").concat(e))}instantiateWasm(e,o){globalThis.DUCKDB_RUNTIME=this._runtime;let u=this.onInstantiationProgress;if(WebAssembly.instantiateStreaming)if(typeof TransformStream=="function"){let m=(async()=>{var se;let d=new Request(this.mainModuleURL),h=await fetch(d),R=h.headers.get("content-length"),A=R&&parseInt(R,10)||0,P=new Date,U={startedAt:P,updatedAt:P,bytesTotal:A||0,bytesLoaded:0},N={transform(re,de){U.bytesLoaded+=re.byteLength;let ce=new Date;if(ce.getTime()-U.updatedAt.getTime()<20){U.updatedAt=ce,de.enqueue(re);return}for(let ae of u)ae(U);de.enqueue(re)}},te=new TransformStream(N);return new Response((se=h.body)==null?void 0:se.pipeThrough(te),h)})();WebAssembly.instantiateStreaming(m,e).then(d=>{o(d.instance,d.module)})}else{console.warn("instantiating without progress handler since transform streams are unavailable");let l=new Request(this.mainModuleURL);WebAssembly.instantiateStreaming(fetch(l),e).then(m=>{o(m.instance,m.module)})}else if(typeof XMLHttpRequest=="function"){let l=new XMLHttpRequest,m=this.mainModuleURL,d=new Date,h={startedAt:d,updatedAt:d,bytesTotal:0,bytesLoaded:0};l.open("GET",m),l.responseType="arraybuffer",l.onerror=R=>{throw this.logger.log({timestamp:new Date,level:4,origin:3,topic:5,event:2,value:"Failed to load WASM: "+R}),new Error(R.toString())},l.onprogress=R=>{h.bytesTotal=R.total,h.bytesLoaded=R.loaded;let A=new Date;if(A.getTime()-h.updatedAt.getTime()<20){h.updatedAt=A;return}for(let P of u)P(h)},l.onload=()=>{WebAssembly.instantiate(l.response,e).then(R=>{o(R.instance,R.module)}).catch(R=>{throw this.logger.log({timestamp:new Date,level:4,origin:3,topic:5,event:2,value:"Failed to instantiate WASM: "+R}),new Error(R)})},l.send()}else console.warn("instantiating with manual fetch since streaming instantiation and xhrs are unavailable"),(async()=>{let m=new Request(this.mainModuleURL),h=await(await fetch(m)).arrayBuffer();WebAssembly.instantiate(h,e).then(R=>{o(R.instance,R.module)})})();return[]}};var ar=class extends at{constructor(n,e,o,u=null){super(n,e,o,u)}instantiateImpl(n){return(0,Js.default)({...n,instantiateWasm:this.instantiateWasm.bind(this),locateFile:this.locateFile.bind(this)})}};var Zs=ss(Qs());var ur=class extends at{constructor(n,e,o,u=null){super(n,e,o,u)}instantiateImpl(n){return(0,Zs.default)({...n,instantiateWasm:this.instantiateWasm.bind(this),locateFile:this.locateFile.bind(this)})}};async function Ao(r,n,e){return(await hs()).wasmExceptions&&r.eh?new ur(n,e,r.eh.mainModule):new ar(n,e,r.mvp.mainModule)}export{G as BROWSER_RUNTIME,Ns as ConsoleLogger,Hs as DEFAULT_RUNTIME,ma as DuckDBAccessMode,nr as DuckDBBindingsBase,Jt as DuckDBConnection,ls as DuckDBDataProtocol,da as DuckDBFeature,Is as FileFlags,tr as FileStatistics,ba as JSONTableShape,ga as LogEvent,pa as LogLevel,ya as LogOrigin,ha as LogTopic,qs as PACKAGE_NAME,zs as PACKAGE_VERSION,Ka as PACKAGE_VERSION_MAJOR,$a as PACKAGE_VERSION_MINOR,Va as PACKAGE_VERSION_PATCH,as as PreparedStatement,Qt as ResultStreamIterator,ca as StatusCode,Bs as VoidLogger,V as callSRet,je as copyBuffer,Ao as createDuckDB,fa as decodeText,Z as dropResponseBuffers,ye as failWith,to as getJsDelivrBundles,qa as getLogEventLabel,Wa as getLogLevelLabel,Xa as getLogOriginLabel,za as getLogTopicLabel,hs as getPlatformFeatures,Za as isFirefox,Xs as isNode,eo as isSafari,B as readString,ro as selectBundle};
/*! Bundled license information:

js-sha256/src/sha256.js:
  (**
   * [js-sha256]{@link https://github.com/emn178/js-sha256}
   *
   * @version 0.9.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2014-2017
   * @license MIT
   *)
*/
//# sourceMappingURL=data:application/json;base64,
